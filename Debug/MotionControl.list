
MotionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800ada8  0800ada8  0001ada8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b304  0800b304  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b30c  0800b30c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b30c  0800b30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001284  200001ec  0800b500  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001470  0800b500  00021470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019040  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004267  00000000  00000000  0003925c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  0003d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  0003e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d6c  00000000  00000000  0003f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be7e  00000000  00000000  0006511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad2b  00000000  00000000  00080f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015bcc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  0015bd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad90 	.word	0x0800ad90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800ad90 	.word	0x0800ad90

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000212:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000216:	491a      	ldr	r1, [pc, #104]	; (8000280 <__tx_DBGHandler+0x6>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000218:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800021c:	4819      	ldr	r0, [pc, #100]	; (8000284 <__tx_DBGHandler+0xa>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800021e:	4918      	ldr	r1, [pc, #96]	; (8000280 <__tx_DBGHandler+0x6>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000220:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000222:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <__tx_DBGHandler+0xe>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000226:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000228:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000232:	f240 5177 	movw	r1, #1399	; 0x577
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000236:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000238:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800023c:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800023e:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000242:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000246:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 800024a:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800024e:	490f      	ldr	r1, [pc, #60]	; (800028c <__tx_DBGHandler+0x12>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000250:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000254:	4770      	bx	lr

08000256 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000256:	f7ff bffe 	b.w	8000256 <__tx_BadHandler>

0800025a <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 800025a:	f7ff bffe 	b.w	800025a <__tx_HardfaultHandler>

0800025e <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_SVCallHandler>

08000262 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000262:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000264:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000268:	4770      	bx	lr

0800026a <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800026c:	f000 f890 	bl	8000390 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000274:	4770      	bx	lr

08000276 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_NMIHandler>

0800027a <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 800027a:	f7ff bffe 	b.w	800027a <__tx_DBGHandler>
 800027e:	0000      	.short	0x0000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000280:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000284:	20000e28 	.word	0x20000e28
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000288:	e0001000 	.word	0xe0001000
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800028c:	40ff0000 	.word	0x40ff0000

08000290 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000290:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000296:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000298:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800029c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002b6:	f3bf 8f6f 	isb	sy

080002ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ba:	e7fe      	b.n	80002ba <__tx_wait_here>

080002bc <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002bc:	4821      	ldr	r0, [pc, #132]	; (8000344 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002c6:	b191      	cbz	r1, 80002ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002d6:	d101      	bne.n	80002dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002dc:	4c1b      	ldr	r4, [pc, #108]	; (800034c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002e8:	b10d      	cbz	r5, 80002ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ec:	6023      	str	r3, [r4, #0]

080002ee <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ee:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002f2:	b1b1      	cbz	r1, 8000322 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002f4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002f6:	b662      	cpsie	i

080002f8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002fa:	4c14      	ldr	r4, [pc, #80]	; (800034c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000302:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000304:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000306:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800030a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000312:	d101      	bne.n	8000318 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000314:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000318 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800033c:	e7dc      	b.n	80002f8 <__tx_ts_restore>

0800033e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800033e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000340:	20000ec4 	.word	0x20000ec4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000344:	20000e2c 	.word	0x20000e2c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000348:	20000e30 	.word	0x20000e30
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800034c:	20001430 	.word	0x20001430

08000350 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000350:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000352:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000356:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800035a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800035e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000360:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000364:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000366:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000368:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800036a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800036c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800036e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000370:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000372:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000374:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000376:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000378:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800037c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000382:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000384:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800038a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800038c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800038e:	4770      	bx	lr

08000390 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000390:	4922      	ldr	r1, [pc, #136]	; (800041c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000392:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000394:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000398:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800039c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800039e:	b13a      	cbz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003a6:	b91a      	cbnz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003ae:	6018      	str	r0, [r3, #0]

080003b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003b0:	491d      	ldr	r1, [pc, #116]	; (8000428 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003b6:	b122      	cbz	r2, 80003c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003c0:	e008      	b.n	80003d4 <__tx_timer_done>

080003c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003cc:	d101      	bne.n	80003d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003d0:	6818      	ldr	r0, [r3, #0]

080003d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003d2:	6008      	str	r0, [r1, #0]

080003d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003d8:	b912      	cbnz	r2, 80003e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003da:	4914      	ldr	r1, [pc, #80]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003de:	b1d0      	cbz	r0, 8000416 <__tx_timer_nothing_expired>

080003e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003e4:	4911      	ldr	r1, [pc, #68]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003e8:	b108      	cbz	r0, 80003ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ea:	f005 fb55 	bl	8005a98 <_tx_timer_expiration_process>

080003ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003f2:	b172      	cbz	r2, 8000412 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003f4:	f005 fa34 	bl	8005860 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003fc:	b949      	cbnz	r1, 8000412 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000400:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000404:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800040c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800040e:	d000      	beq.n	8000412 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000410:	6002      	str	r2, [r0, #0]

08000412 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000412:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000416 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000416:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	20000ed0 	.word	0x20000ed0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000420:	20001430 	.word	0x20001430
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	20000ed4 	.word	0x20000ed4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	20000f60 	.word	0x20000f60
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800042c:	20000f64 	.word	0x20000f64
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000430:	20000f5c 	.word	0x20000f5c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000434:	20000f58 	.word	0x20000f58
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000438:	20000ec4 	.word	0x20000ec4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800043c:	20000e2c 	.word	0x20000e2c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000440:	20000e30 	.word	0x20000e30
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <strlen>:
 8000448:	4603      	mov	r3, r0
 800044a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800044e:	2a00      	cmp	r2, #0
 8000450:	d1fb      	bne.n	800044a <strlen+0x2>
 8000452:	1a18      	subs	r0, r3, r0
 8000454:	3801      	subs	r0, #1
 8000456:	4770      	bx	lr
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_drsub>:
 8000500:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e002      	b.n	800050c <__adddf3>
 8000506:	bf00      	nop

08000508 <__aeabi_dsub>:
 8000508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800050c <__adddf3>:
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000512:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	bf1f      	itttt	ne
 8000522:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000526:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000532:	f000 80e2 	beq.w	80006fa <__adddf3+0x1ee>
 8000536:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053e:	bfb8      	it	lt
 8000540:	426d      	neglt	r5, r5
 8000542:	dd0c      	ble.n	800055e <__adddf3+0x52>
 8000544:	442c      	add	r4, r5
 8000546:	ea80 0202 	eor.w	r2, r0, r2
 800054a:	ea81 0303 	eor.w	r3, r1, r3
 800054e:	ea82 0000 	eor.w	r0, r2, r0
 8000552:	ea83 0101 	eor.w	r1, r3, r1
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	2d36      	cmp	r5, #54	; 0x36
 8000560:	bf88      	it	hi
 8000562:	bd30      	pophi	{r4, r5, pc}
 8000564:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000568:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800056c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000570:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x70>
 8000576:	4240      	negs	r0, r0
 8000578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000580:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000584:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x84>
 800058a:	4252      	negs	r2, r2
 800058c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000590:	ea94 0f05 	teq	r4, r5
 8000594:	f000 80a7 	beq.w	80006e6 <__adddf3+0x1da>
 8000598:	f1a4 0401 	sub.w	r4, r4, #1
 800059c:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a0:	db0d      	blt.n	80005be <__adddf3+0xb2>
 80005a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a6:	fa22 f205 	lsr.w	r2, r2, r5
 80005aa:	1880      	adds	r0, r0, r2
 80005ac:	f141 0100 	adc.w	r1, r1, #0
 80005b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b4:	1880      	adds	r0, r0, r2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	4159      	adcs	r1, r3
 80005bc:	e00e      	b.n	80005dc <__adddf3+0xd0>
 80005be:	f1a5 0520 	sub.w	r5, r5, #32
 80005c2:	f10e 0e20 	add.w	lr, lr, #32
 80005c6:	2a01      	cmp	r2, #1
 80005c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005cc:	bf28      	it	cs
 80005ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	d507      	bpl.n	80005f2 <__adddf3+0xe6>
 80005e2:	f04f 0e00 	mov.w	lr, #0
 80005e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005f6:	d31b      	bcc.n	8000630 <__adddf3+0x124>
 80005f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005fc:	d30c      	bcc.n	8000618 <__adddf3+0x10c>
 80005fe:	0849      	lsrs	r1, r1, #1
 8000600:	ea5f 0030 	movs.w	r0, r0, rrx
 8000604:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000608:	f104 0401 	add.w	r4, r4, #1
 800060c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000610:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000614:	f080 809a 	bcs.w	800074c <__adddf3+0x240>
 8000618:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	ea41 0105 	orr.w	r1, r1, r5
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000634:	4140      	adcs	r0, r0
 8000636:	eb41 0101 	adc.w	r1, r1, r1
 800063a:	3c01      	subs	r4, #1
 800063c:	bf28      	it	cs
 800063e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000642:	d2e9      	bcs.n	8000618 <__adddf3+0x10c>
 8000644:	f091 0f00 	teq	r1, #0
 8000648:	bf04      	itt	eq
 800064a:	4601      	moveq	r1, r0
 800064c:	2000      	moveq	r0, #0
 800064e:	fab1 f381 	clz	r3, r1
 8000652:	bf08      	it	eq
 8000654:	3320      	addeq	r3, #32
 8000656:	f1a3 030b 	sub.w	r3, r3, #11
 800065a:	f1b3 0220 	subs.w	r2, r3, #32
 800065e:	da0c      	bge.n	800067a <__adddf3+0x16e>
 8000660:	320c      	adds	r2, #12
 8000662:	dd08      	ble.n	8000676 <__adddf3+0x16a>
 8000664:	f102 0c14 	add.w	ip, r2, #20
 8000668:	f1c2 020c 	rsb	r2, r2, #12
 800066c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000670:	fa21 f102 	lsr.w	r1, r1, r2
 8000674:	e00c      	b.n	8000690 <__adddf3+0x184>
 8000676:	f102 0214 	add.w	r2, r2, #20
 800067a:	bfd8      	it	le
 800067c:	f1c2 0c20 	rsble	ip, r2, #32
 8000680:	fa01 f102 	lsl.w	r1, r1, r2
 8000684:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000688:	bfdc      	itt	le
 800068a:	ea41 010c 	orrle.w	r1, r1, ip
 800068e:	4090      	lslle	r0, r2
 8000690:	1ae4      	subs	r4, r4, r3
 8000692:	bfa2      	ittt	ge
 8000694:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000698:	4329      	orrge	r1, r5
 800069a:	bd30      	popge	{r4, r5, pc}
 800069c:	ea6f 0404 	mvn.w	r4, r4
 80006a0:	3c1f      	subs	r4, #31
 80006a2:	da1c      	bge.n	80006de <__adddf3+0x1d2>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc0e      	bgt.n	80006c6 <__adddf3+0x1ba>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0220 	rsb	r2, r4, #32
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f302 	lsl.w	r3, r1, r2
 80006b8:	ea40 0003 	orr.w	r0, r0, r3
 80006bc:	fa21 f304 	lsr.w	r3, r1, r4
 80006c0:	ea45 0103 	orr.w	r1, r5, r3
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	f1c4 040c 	rsb	r4, r4, #12
 80006ca:	f1c4 0220 	rsb	r2, r4, #32
 80006ce:	fa20 f002 	lsr.w	r0, r0, r2
 80006d2:	fa01 f304 	lsl.w	r3, r1, r4
 80006d6:	ea40 0003 	orr.w	r0, r0, r3
 80006da:	4629      	mov	r1, r5
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	fa21 f004 	lsr.w	r0, r1, r4
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	f094 0f00 	teq	r4, #0
 80006ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ee:	bf06      	itte	eq
 80006f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f4:	3401      	addeq	r4, #1
 80006f6:	3d01      	subne	r5, #1
 80006f8:	e74e      	b.n	8000598 <__adddf3+0x8c>
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf18      	it	ne
 8000700:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000704:	d029      	beq.n	800075a <__adddf3+0x24e>
 8000706:	ea94 0f05 	teq	r4, r5
 800070a:	bf08      	it	eq
 800070c:	ea90 0f02 	teqeq	r0, r2
 8000710:	d005      	beq.n	800071e <__adddf3+0x212>
 8000712:	ea54 0c00 	orrs.w	ip, r4, r0
 8000716:	bf04      	itt	eq
 8000718:	4619      	moveq	r1, r3
 800071a:	4610      	moveq	r0, r2
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea91 0f03 	teq	r1, r3
 8000722:	bf1e      	ittt	ne
 8000724:	2100      	movne	r1, #0
 8000726:	2000      	movne	r0, #0
 8000728:	bd30      	popne	{r4, r5, pc}
 800072a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072e:	d105      	bne.n	800073c <__adddf3+0x230>
 8000730:	0040      	lsls	r0, r0, #1
 8000732:	4149      	adcs	r1, r1
 8000734:	bf28      	it	cs
 8000736:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd30      	pop	{r4, r5, pc}
 800073c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000740:	bf3c      	itt	cc
 8000742:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000746:	bd30      	popcc	{r4, r5, pc}
 8000748:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800074c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd30      	pop	{r4, r5, pc}
 800075a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075e:	bf1a      	itte	ne
 8000760:	4619      	movne	r1, r3
 8000762:	4610      	movne	r0, r2
 8000764:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000768:	bf1c      	itt	ne
 800076a:	460b      	movne	r3, r1
 800076c:	4602      	movne	r2, r0
 800076e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000772:	bf06      	itte	eq
 8000774:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000778:	ea91 0f03 	teqeq	r1, r3
 800077c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	bf00      	nop

08000784 <__aeabi_ui2d>:
 8000784:	f090 0f00 	teq	r0, #0
 8000788:	bf04      	itt	eq
 800078a:	2100      	moveq	r1, #0
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000798:	f04f 0500 	mov.w	r5, #0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e750      	b.n	8000644 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_i2d>:
 80007a4:	f090 0f00 	teq	r0, #0
 80007a8:	bf04      	itt	eq
 80007aa:	2100      	moveq	r1, #0
 80007ac:	4770      	bxeq	lr
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007bc:	bf48      	it	mi
 80007be:	4240      	negmi	r0, r0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e73e      	b.n	8000644 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_f2d>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d6:	bf1f      	itttt	ne
 80007d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e4:	4770      	bxne	lr
 80007e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ea:	bf08      	it	eq
 80007ec:	4770      	bxeq	lr
 80007ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f2:	bf04      	itt	eq
 80007f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007f8:	4770      	bxeq	lr
 80007fa:	b530      	push	{r4, r5, lr}
 80007fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000800:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000808:	e71c      	b.n	8000644 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_ul2d>:
 800080c:	ea50 0201 	orrs.w	r2, r0, r1
 8000810:	bf08      	it	eq
 8000812:	4770      	bxeq	lr
 8000814:	b530      	push	{r4, r5, lr}
 8000816:	f04f 0500 	mov.w	r5, #0
 800081a:	e00a      	b.n	8000832 <__aeabi_l2d+0x16>

0800081c <__aeabi_l2d>:
 800081c:	ea50 0201 	orrs.w	r2, r0, r1
 8000820:	bf08      	it	eq
 8000822:	4770      	bxeq	lr
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082a:	d502      	bpl.n	8000832 <__aeabi_l2d+0x16>
 800082c:	4240      	negs	r0, r0
 800082e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000832:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000836:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800083e:	f43f aed8 	beq.w	80005f2 <__adddf3+0xe6>
 8000842:	f04f 0203 	mov.w	r2, #3
 8000846:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084a:	bf18      	it	ne
 800084c:	3203      	addne	r2, #3
 800084e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000852:	bf18      	it	ne
 8000854:	3203      	addne	r2, #3
 8000856:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	fa01 fe03 	lsl.w	lr, r1, r3
 800086a:	ea40 000e 	orr.w	r0, r0, lr
 800086e:	fa21 f102 	lsr.w	r1, r1, r2
 8000872:	4414      	add	r4, r2
 8000874:	e6bd      	b.n	80005f2 <__adddf3+0xe6>
 8000876:	bf00      	nop

08000878 <__aeabi_dmul>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000886:	bf1d      	ittte	ne
 8000888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800088c:	ea94 0f0c 	teqne	r4, ip
 8000890:	ea95 0f0c 	teqne	r5, ip
 8000894:	f000 f8de 	bleq	8000a54 <__aeabi_dmul+0x1dc>
 8000898:	442c      	add	r4, r5
 800089a:	ea81 0603 	eor.w	r6, r1, r3
 800089e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008aa:	bf18      	it	ne
 80008ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b8:	d038      	beq.n	800092c <__aeabi_dmul+0xb4>
 80008ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80008be:	f04f 0500 	mov.w	r5, #0
 80008c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008ce:	f04f 0600 	mov.w	r6, #0
 80008d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008d6:	f09c 0f00 	teq	ip, #0
 80008da:	bf18      	it	ne
 80008dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80008e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008ec:	d204      	bcs.n	80008f8 <__aeabi_dmul+0x80>
 80008ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008f2:	416d      	adcs	r5, r5
 80008f4:	eb46 0606 	adc.w	r6, r6, r6
 80008f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000900:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000904:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000908:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800090c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000910:	bf88      	it	hi
 8000912:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000916:	d81e      	bhi.n	8000956 <__aeabi_dmul+0xde>
 8000918:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800091c:	bf08      	it	eq
 800091e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000930:	ea46 0101 	orr.w	r1, r6, r1
 8000934:	ea40 0002 	orr.w	r0, r0, r2
 8000938:	ea81 0103 	eor.w	r1, r1, r3
 800093c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	f300 80ab 	bgt.w	8000ab0 <__aeabi_dmul+0x238>
 800095a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800095e:	bfde      	ittt	le
 8000960:	2000      	movle	r0, #0
 8000962:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000966:	bd70      	pople	{r4, r5, r6, pc}
 8000968:	f1c4 0400 	rsb	r4, r4, #0
 800096c:	3c20      	subs	r4, #32
 800096e:	da35      	bge.n	80009dc <__aeabi_dmul+0x164>
 8000970:	340c      	adds	r4, #12
 8000972:	dc1b      	bgt.n	80009ac <__aeabi_dmul+0x134>
 8000974:	f104 0414 	add.w	r4, r4, #20
 8000978:	f1c4 0520 	rsb	r5, r4, #32
 800097c:	fa00 f305 	lsl.w	r3, r0, r5
 8000980:	fa20 f004 	lsr.w	r0, r0, r4
 8000984:	fa01 f205 	lsl.w	r2, r1, r5
 8000988:	ea40 0002 	orr.w	r0, r0, r2
 800098c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000998:	fa21 f604 	lsr.w	r6, r1, r4
 800099c:	eb42 0106 	adc.w	r1, r2, r6
 80009a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a4:	bf08      	it	eq
 80009a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f1c4 040c 	rsb	r4, r4, #12
 80009b0:	f1c4 0520 	rsb	r5, r4, #32
 80009b4:	fa00 f304 	lsl.w	r3, r0, r4
 80009b8:	fa20 f005 	lsr.w	r0, r0, r5
 80009bc:	fa01 f204 	lsl.w	r2, r1, r4
 80009c0:	ea40 0002 	orr.w	r0, r0, r2
 80009c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009cc:	f141 0100 	adc.w	r1, r1, #0
 80009d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d4:	bf08      	it	eq
 80009d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f1c4 0520 	rsb	r5, r4, #32
 80009e0:	fa00 f205 	lsl.w	r2, r0, r5
 80009e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009e8:	fa20 f304 	lsr.w	r3, r0, r4
 80009ec:	fa01 f205 	lsl.w	r2, r1, r5
 80009f0:	ea43 0302 	orr.w	r3, r3, r2
 80009f4:	fa21 f004 	lsr.w	r0, r1, r4
 80009f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000a00:	ea20 0002 	bic.w	r0, r0, r2
 8000a04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a0c:	bf08      	it	eq
 8000a0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f094 0f00 	teq	r4, #0
 8000a18:	d10f      	bne.n	8000a3a <__aeabi_dmul+0x1c2>
 8000a1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a1e:	0040      	lsls	r0, r0, #1
 8000a20:	eb41 0101 	adc.w	r1, r1, r1
 8000a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a28:	bf08      	it	eq
 8000a2a:	3c01      	subeq	r4, #1
 8000a2c:	d0f7      	beq.n	8000a1e <__aeabi_dmul+0x1a6>
 8000a2e:	ea41 0106 	orr.w	r1, r1, r6
 8000a32:	f095 0f00 	teq	r5, #0
 8000a36:	bf18      	it	ne
 8000a38:	4770      	bxne	lr
 8000a3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	eb43 0303 	adc.w	r3, r3, r3
 8000a44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a48:	bf08      	it	eq
 8000a4a:	3d01      	subeq	r5, #1
 8000a4c:	d0f7      	beq.n	8000a3e <__aeabi_dmul+0x1c6>
 8000a4e:	ea43 0306 	orr.w	r3, r3, r6
 8000a52:	4770      	bx	lr
 8000a54:	ea94 0f0c 	teq	r4, ip
 8000a58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5c:	bf18      	it	ne
 8000a5e:	ea95 0f0c 	teqne	r5, ip
 8000a62:	d00c      	beq.n	8000a7e <__aeabi_dmul+0x206>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	d1d1      	bne.n	8000a14 <__aeabi_dmul+0x19c>
 8000a70:	ea81 0103 	eor.w	r1, r1, r3
 8000a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a82:	bf06      	itte	eq
 8000a84:	4610      	moveq	r0, r2
 8000a86:	4619      	moveq	r1, r3
 8000a88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a8c:	d019      	beq.n	8000ac2 <__aeabi_dmul+0x24a>
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dmul+0x222>
 8000a94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a98:	d113      	bne.n	8000ac2 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	d105      	bne.n	8000aac <__aeabi_dmul+0x234>
 8000aa0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000aa4:	bf1c      	itt	ne
 8000aa6:	4610      	movne	r0, r2
 8000aa8:	4619      	movne	r1, r3
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dmul+0x24a>
 8000aac:	ea81 0103 	eor.w	r1, r1, r3
 8000ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ac6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000aca:	bd70      	pop	{r4, r5, r6, pc}

08000acc <__aeabi_ddiv>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ad2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ad6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ada:	bf1d      	ittte	ne
 8000adc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ae0:	ea94 0f0c 	teqne	r4, ip
 8000ae4:	ea95 0f0c 	teqne	r5, ip
 8000ae8:	f000 f8a7 	bleq	8000c3a <__aeabi_ddiv+0x16e>
 8000aec:	eba4 0405 	sub.w	r4, r4, r5
 8000af0:	ea81 0e03 	eor.w	lr, r1, r3
 8000af4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000afc:	f000 8088 	beq.w	8000c10 <__aeabi_ddiv+0x144>
 8000b00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b24:	429d      	cmp	r5, r3
 8000b26:	bf08      	it	eq
 8000b28:	4296      	cmpeq	r6, r2
 8000b2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b32:	d202      	bcs.n	8000b3a <__aeabi_ddiv+0x6e>
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3a:	1ab6      	subs	r6, r6, r2
 8000b3c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b56:	bf22      	ittt	cs
 8000b58:	1ab6      	subcs	r6, r6, r2
 8000b5a:	4675      	movcs	r5, lr
 8000b5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6e:	bf22      	ittt	cs
 8000b70:	1ab6      	subcs	r6, r6, r2
 8000b72:	4675      	movcs	r5, lr
 8000b74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b86:	bf22      	ittt	cs
 8000b88:	1ab6      	subcs	r6, r6, r2
 8000b8a:	4675      	movcs	r5, lr
 8000b8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b9e:	bf22      	ittt	cs
 8000ba0:	1ab6      	subcs	r6, r6, r2
 8000ba2:	4675      	movcs	r5, lr
 8000ba4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bac:	d018      	beq.n	8000be0 <__aeabi_ddiv+0x114>
 8000bae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bca:	d1c0      	bne.n	8000b4e <__aeabi_ddiv+0x82>
 8000bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd0:	d10b      	bne.n	8000bea <__aeabi_ddiv+0x11e>
 8000bd2:	ea41 0100 	orr.w	r1, r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bde:	e7b6      	b.n	8000b4e <__aeabi_ddiv+0x82>
 8000be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be4:	bf04      	itt	eq
 8000be6:	4301      	orreq	r1, r0
 8000be8:	2000      	moveq	r0, #0
 8000bea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bee:	bf88      	it	hi
 8000bf0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bf4:	f63f aeaf 	bhi.w	8000956 <__aeabi_dmul+0xde>
 8000bf8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bfc:	bf04      	itt	eq
 8000bfe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c06:	f150 0000 	adcs.w	r0, r0, #0
 8000c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c26:	bd70      	popgt	{r4, r5, r6, pc}
 8000c28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2c:	f04f 0e00 	mov.w	lr, #0
 8000c30:	3c01      	subs	r4, #1
 8000c32:	e690      	b.n	8000956 <__aeabi_dmul+0xde>
 8000c34:	ea45 0e06 	orr.w	lr, r5, r6
 8000c38:	e68d      	b.n	8000956 <__aeabi_dmul+0xde>
 8000c3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c3e:	ea94 0f0c 	teq	r4, ip
 8000c42:	bf08      	it	eq
 8000c44:	ea95 0f0c 	teqeq	r5, ip
 8000c48:	f43f af3b 	beq.w	8000ac2 <__aeabi_dmul+0x24a>
 8000c4c:	ea94 0f0c 	teq	r4, ip
 8000c50:	d10a      	bne.n	8000c68 <__aeabi_ddiv+0x19c>
 8000c52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c56:	f47f af34 	bne.w	8000ac2 <__aeabi_dmul+0x24a>
 8000c5a:	ea95 0f0c 	teq	r5, ip
 8000c5e:	f47f af25 	bne.w	8000aac <__aeabi_dmul+0x234>
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	e72c      	b.n	8000ac2 <__aeabi_dmul+0x24a>
 8000c68:	ea95 0f0c 	teq	r5, ip
 8000c6c:	d106      	bne.n	8000c7c <__aeabi_ddiv+0x1b0>
 8000c6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c72:	f43f aefd 	beq.w	8000a70 <__aeabi_dmul+0x1f8>
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	e722      	b.n	8000ac2 <__aeabi_dmul+0x24a>
 8000c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c86:	f47f aec5 	bne.w	8000a14 <__aeabi_dmul+0x19c>
 8000c8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c8e:	f47f af0d 	bne.w	8000aac <__aeabi_dmul+0x234>
 8000c92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c96:	f47f aeeb 	bne.w	8000a70 <__aeabi_dmul+0x1f8>
 8000c9a:	e712      	b.n	8000ac2 <__aeabi_dmul+0x24a>

08000c9c <__gedf2>:
 8000c9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca0:	e006      	b.n	8000cb0 <__cmpdf2+0x4>
 8000ca2:	bf00      	nop

08000ca4 <__ledf2>:
 8000ca4:	f04f 0c01 	mov.w	ip, #1
 8000ca8:	e002      	b.n	8000cb0 <__cmpdf2+0x4>
 8000caa:	bf00      	nop

08000cac <__cmpdf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc0:	bf18      	it	ne
 8000cc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cc6:	d01b      	beq.n	8000d00 <__cmpdf2+0x54>
 8000cc8:	b001      	add	sp, #4
 8000cca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cce:	bf0c      	ite	eq
 8000cd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cd4:	ea91 0f03 	teqne	r1, r3
 8000cd8:	bf02      	ittt	eq
 8000cda:	ea90 0f02 	teqeq	r0, r2
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	4770      	bxeq	lr
 8000ce2:	f110 0f00 	cmn.w	r0, #0
 8000ce6:	ea91 0f03 	teq	r1, r3
 8000cea:	bf58      	it	pl
 8000cec:	4299      	cmppl	r1, r3
 8000cee:	bf08      	it	eq
 8000cf0:	4290      	cmpeq	r0, r2
 8000cf2:	bf2c      	ite	cs
 8000cf4:	17d8      	asrcs	r0, r3, #31
 8000cf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cfa:	f040 0001 	orr.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d08:	d102      	bne.n	8000d10 <__cmpdf2+0x64>
 8000d0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d0e:	d107      	bne.n	8000d20 <__cmpdf2+0x74>
 8000d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d18:	d1d6      	bne.n	8000cc8 <__cmpdf2+0x1c>
 8000d1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d1e:	d0d3      	beq.n	8000cc8 <__cmpdf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cdrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	468c      	mov	ip, r1
 8000d30:	4619      	mov	r1, r3
 8000d32:	4663      	mov	r3, ip
 8000d34:	e000      	b.n	8000d38 <__aeabi_cdcmpeq>
 8000d36:	bf00      	nop

08000d38 <__aeabi_cdcmpeq>:
 8000d38:	b501      	push	{r0, lr}
 8000d3a:	f7ff ffb7 	bl	8000cac <__cmpdf2>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	bf48      	it	mi
 8000d42:	f110 0f00 	cmnmi.w	r0, #0
 8000d46:	bd01      	pop	{r0, pc}

08000d48 <__aeabi_dcmpeq>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff fff4 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d50:	bf0c      	ite	eq
 8000d52:	2001      	moveq	r0, #1
 8000d54:	2000      	movne	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop

08000d5c <__aeabi_dcmplt>:
 8000d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d60:	f7ff ffea 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d64:	bf34      	ite	cc
 8000d66:	2001      	movcc	r0, #1
 8000d68:	2000      	movcs	r0, #0
 8000d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6e:	bf00      	nop

08000d70 <__aeabi_dcmple>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff ffe0 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d78:	bf94      	ite	ls
 8000d7a:	2001      	movls	r0, #1
 8000d7c:	2000      	movhi	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_dcmpge>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffce 	bl	8000d28 <__aeabi_cdrcmple>
 8000d8c:	bf94      	ite	ls
 8000d8e:	2001      	movls	r0, #1
 8000d90:	2000      	movhi	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_dcmpgt>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff ffc4 	bl	8000d28 <__aeabi_cdrcmple>
 8000da0:	bf34      	ite	cc
 8000da2:	2001      	movcc	r0, #1
 8000da4:	2000      	movcs	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmpun>:
 8000dac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db4:	d102      	bne.n	8000dbc <__aeabi_dcmpun+0x10>
 8000db6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dba:	d10a      	bne.n	8000dd2 <__aeabi_dcmpun+0x26>
 8000dbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dc4:	d102      	bne.n	8000dcc <__aeabi_dcmpun+0x20>
 8000dc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dca:	d102      	bne.n	8000dd2 <__aeabi_dcmpun+0x26>
 8000dcc:	f04f 0000 	mov.w	r0, #0
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0001 	mov.w	r0, #1
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_d2iz>:
 8000dd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ddc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000de0:	d215      	bcs.n	8000e0e <__aeabi_d2iz+0x36>
 8000de2:	d511      	bpl.n	8000e08 <__aeabi_d2iz+0x30>
 8000de4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dec:	d912      	bls.n	8000e14 <__aeabi_d2iz+0x3c>
 8000dee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000e02:	bf18      	it	ne
 8000e04:	4240      	negne	r0, r0
 8000e06:	4770      	bx	lr
 8000e08:	f04f 0000 	mov.w	r0, #0
 8000e0c:	4770      	bx	lr
 8000e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e12:	d105      	bne.n	8000e20 <__aeabi_d2iz+0x48>
 8000e14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e18:	bf08      	it	eq
 8000e1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bx	lr
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <__aeabi_d2uiz>:
 8000e28:	004a      	lsls	r2, r1, #1
 8000e2a:	d211      	bcs.n	8000e50 <__aeabi_d2uiz+0x28>
 8000e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e30:	d211      	bcs.n	8000e56 <__aeabi_d2uiz+0x2e>
 8000e32:	d50d      	bpl.n	8000e50 <__aeabi_d2uiz+0x28>
 8000e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e3c:	d40e      	bmi.n	8000e5c <__aeabi_d2uiz+0x34>
 8000e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e4e:	4770      	bx	lr
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	4770      	bx	lr
 8000e56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e5a:	d102      	bne.n	8000e62 <__aeabi_d2uiz+0x3a>
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_d2f>:
 8000e68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e70:	bf24      	itt	cs
 8000e72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e7a:	d90d      	bls.n	8000e98 <__aeabi_d2f+0x30>
 8000e7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e90:	bf08      	it	eq
 8000e92:	f020 0001 	biceq.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e9c:	d121      	bne.n	8000ee2 <__aeabi_d2f+0x7a>
 8000e9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ea2:	bfbc      	itt	lt
 8000ea4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ea8:	4770      	bxlt	lr
 8000eaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000eae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000eb2:	f1c2 0218 	rsb	r2, r2, #24
 8000eb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000eba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ebe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ec2:	bf18      	it	ne
 8000ec4:	f040 0001 	orrne.w	r0, r0, #1
 8000ec8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ecc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ed0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ed4:	ea40 000c 	orr.w	r0, r0, ip
 8000ed8:	fa23 f302 	lsr.w	r3, r3, r2
 8000edc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ee0:	e7cc      	b.n	8000e7c <__aeabi_d2f+0x14>
 8000ee2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ee6:	d107      	bne.n	8000ef8 <__aeabi_d2f+0x90>
 8000ee8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000eec:	bf1e      	ittt	ne
 8000eee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bxne	lr
 8000ef8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000efc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_uldivmod>:
 8000f08:	b953      	cbnz	r3, 8000f20 <__aeabi_uldivmod+0x18>
 8000f0a:	b94a      	cbnz	r2, 8000f20 <__aeabi_uldivmod+0x18>
 8000f0c:	2900      	cmp	r1, #0
 8000f0e:	bf08      	it	eq
 8000f10:	2800      	cmpeq	r0, #0
 8000f12:	bf1c      	itt	ne
 8000f14:	f04f 31ff 	movne.w	r1, #4294967295
 8000f18:	f04f 30ff 	movne.w	r0, #4294967295
 8000f1c:	f000 b9aa 	b.w	8001274 <__aeabi_idiv0>
 8000f20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f28:	f000 f83c 	bl	8000fa4 <__udivmoddi4>
 8000f2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	f7ff ff0b 	bl	8000d5c <__aeabi_dcmplt>
 8000f46:	b928      	cbnz	r0, 8000f54 <__aeabi_d2lz+0x1c>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b80a 	b.w	8000f68 <__aeabi_d2ulz>
 8000f54:	4620      	mov	r0, r4
 8000f56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f5a:	f000 f805 	bl	8000f68 <__aeabi_d2ulz>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop

08000f68 <__aeabi_d2ulz>:
 8000f68:	b5d0      	push	{r4, r6, r7, lr}
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__aeabi_d2ulz+0x34>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4606      	mov	r6, r0
 8000f70:	460f      	mov	r7, r1
 8000f72:	f7ff fc81 	bl	8000878 <__aeabi_dmul>
 8000f76:	f7ff ff57 	bl	8000e28 <__aeabi_d2uiz>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f7ff fc02 	bl	8000784 <__aeabi_ui2d>
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <__aeabi_d2ulz+0x38>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f7ff fc78 	bl	8000878 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff faba 	bl	8000508 <__aeabi_dsub>
 8000f94:	f7ff ff48 	bl	8000e28 <__aeabi_d2uiz>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f9c:	3df00000 	.word	0x3df00000
 8000fa0:	41f00000 	.word	0x41f00000

08000fa4 <__udivmoddi4>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	9d08      	ldr	r5, [sp, #32]
 8000faa:	4604      	mov	r4, r0
 8000fac:	468e      	mov	lr, r1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d14d      	bne.n	800104e <__udivmoddi4+0xaa>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	d969      	bls.n	800108c <__udivmoddi4+0xe8>
 8000fb8:	fab2 f282 	clz	r2, r2
 8000fbc:	b152      	cbz	r2, 8000fd4 <__udivmoddi4+0x30>
 8000fbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000fc2:	f1c2 0120 	rsb	r1, r2, #32
 8000fc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000fca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fce:	ea41 0e03 	orr.w	lr, r1, r3
 8000fd2:	4094      	lsls	r4, r2
 8000fd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd8:	0c21      	lsrs	r1, r4, #16
 8000fda:	fbbe f6f8 	udiv	r6, lr, r8
 8000fde:	fa1f f78c 	uxth.w	r7, ip
 8000fe2:	fb08 e316 	mls	r3, r8, r6, lr
 8000fe6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fea:	fb06 f107 	mul.w	r1, r6, r7
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x64>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ffa:	f080 811f 	bcs.w	800123c <__udivmoddi4+0x298>
 8000ffe:	4299      	cmp	r1, r3
 8001000:	f240 811c 	bls.w	800123c <__udivmoddi4+0x298>
 8001004:	3e02      	subs	r6, #2
 8001006:	4463      	add	r3, ip
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	b2a4      	uxth	r4, r4
 800100c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001010:	fb08 3310 	mls	r3, r8, r0, r3
 8001014:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001018:	fb00 f707 	mul.w	r7, r0, r7
 800101c:	42a7      	cmp	r7, r4
 800101e:	d90a      	bls.n	8001036 <__udivmoddi4+0x92>
 8001020:	eb1c 0404 	adds.w	r4, ip, r4
 8001024:	f100 33ff 	add.w	r3, r0, #4294967295
 8001028:	f080 810a 	bcs.w	8001240 <__udivmoddi4+0x29c>
 800102c:	42a7      	cmp	r7, r4
 800102e:	f240 8107 	bls.w	8001240 <__udivmoddi4+0x29c>
 8001032:	4464      	add	r4, ip
 8001034:	3802      	subs	r0, #2
 8001036:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800103a:	1be4      	subs	r4, r4, r7
 800103c:	2600      	movs	r6, #0
 800103e:	b11d      	cbz	r5, 8001048 <__udivmoddi4+0xa4>
 8001040:	40d4      	lsrs	r4, r2
 8001042:	2300      	movs	r3, #0
 8001044:	e9c5 4300 	strd	r4, r3, [r5]
 8001048:	4631      	mov	r1, r6
 800104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104e:	428b      	cmp	r3, r1
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0xc2>
 8001052:	2d00      	cmp	r5, #0
 8001054:	f000 80ef 	beq.w	8001236 <__udivmoddi4+0x292>
 8001058:	2600      	movs	r6, #0
 800105a:	e9c5 0100 	strd	r0, r1, [r5]
 800105e:	4630      	mov	r0, r6
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	fab3 f683 	clz	r6, r3
 800106a:	2e00      	cmp	r6, #0
 800106c:	d14a      	bne.n	8001104 <__udivmoddi4+0x160>
 800106e:	428b      	cmp	r3, r1
 8001070:	d302      	bcc.n	8001078 <__udivmoddi4+0xd4>
 8001072:	4282      	cmp	r2, r0
 8001074:	f200 80f9 	bhi.w	800126a <__udivmoddi4+0x2c6>
 8001078:	1a84      	subs	r4, r0, r2
 800107a:	eb61 0303 	sbc.w	r3, r1, r3
 800107e:	2001      	movs	r0, #1
 8001080:	469e      	mov	lr, r3
 8001082:	2d00      	cmp	r5, #0
 8001084:	d0e0      	beq.n	8001048 <__udivmoddi4+0xa4>
 8001086:	e9c5 4e00 	strd	r4, lr, [r5]
 800108a:	e7dd      	b.n	8001048 <__udivmoddi4+0xa4>
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xec>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	2a00      	cmp	r2, #0
 8001096:	f040 8092 	bne.w	80011be <__udivmoddi4+0x21a>
 800109a:	eba1 010c 	sub.w	r1, r1, ip
 800109e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010a2:	fa1f fe8c 	uxth.w	lr, ip
 80010a6:	2601      	movs	r6, #1
 80010a8:	0c20      	lsrs	r0, r4, #16
 80010aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ae:	fb07 1113 	mls	r1, r7, r3, r1
 80010b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010b6:	fb0e f003 	mul.w	r0, lr, r3
 80010ba:	4288      	cmp	r0, r1
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x12c>
 80010be:	eb1c 0101 	adds.w	r1, ip, r1
 80010c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x12a>
 80010c8:	4288      	cmp	r0, r1
 80010ca:	f200 80cb 	bhi.w	8001264 <__udivmoddi4+0x2c0>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1a09      	subs	r1, r1, r0
 80010d2:	b2a4      	uxth	r4, r4
 80010d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80010d8:	fb07 1110 	mls	r1, r7, r0, r1
 80010dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010e0:	fb0e fe00 	mul.w	lr, lr, r0
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	d908      	bls.n	80010fa <__udivmoddi4+0x156>
 80010e8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f0:	d202      	bcs.n	80010f8 <__udivmoddi4+0x154>
 80010f2:	45a6      	cmp	lr, r4
 80010f4:	f200 80bb 	bhi.w	800126e <__udivmoddi4+0x2ca>
 80010f8:	4608      	mov	r0, r1
 80010fa:	eba4 040e 	sub.w	r4, r4, lr
 80010fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x9a>
 8001104:	f1c6 0720 	rsb	r7, r6, #32
 8001108:	40b3      	lsls	r3, r6
 800110a:	fa22 fc07 	lsr.w	ip, r2, r7
 800110e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001112:	fa20 f407 	lsr.w	r4, r0, r7
 8001116:	fa01 f306 	lsl.w	r3, r1, r6
 800111a:	431c      	orrs	r4, r3
 800111c:	40f9      	lsrs	r1, r7
 800111e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001122:	fa00 f306 	lsl.w	r3, r0, r6
 8001126:	fbb1 f8f9 	udiv	r8, r1, r9
 800112a:	0c20      	lsrs	r0, r4, #16
 800112c:	fa1f fe8c 	uxth.w	lr, ip
 8001130:	fb09 1118 	mls	r1, r9, r8, r1
 8001134:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001138:	fb08 f00e 	mul.w	r0, r8, lr
 800113c:	4288      	cmp	r0, r1
 800113e:	fa02 f206 	lsl.w	r2, r2, r6
 8001142:	d90b      	bls.n	800115c <__udivmoddi4+0x1b8>
 8001144:	eb1c 0101 	adds.w	r1, ip, r1
 8001148:	f108 3aff 	add.w	sl, r8, #4294967295
 800114c:	f080 8088 	bcs.w	8001260 <__udivmoddi4+0x2bc>
 8001150:	4288      	cmp	r0, r1
 8001152:	f240 8085 	bls.w	8001260 <__udivmoddi4+0x2bc>
 8001156:	f1a8 0802 	sub.w	r8, r8, #2
 800115a:	4461      	add	r1, ip
 800115c:	1a09      	subs	r1, r1, r0
 800115e:	b2a4      	uxth	r4, r4
 8001160:	fbb1 f0f9 	udiv	r0, r1, r9
 8001164:	fb09 1110 	mls	r1, r9, r0, r1
 8001168:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800116c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001170:	458e      	cmp	lr, r1
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0x1e2>
 8001174:	eb1c 0101 	adds.w	r1, ip, r1
 8001178:	f100 34ff 	add.w	r4, r0, #4294967295
 800117c:	d26c      	bcs.n	8001258 <__udivmoddi4+0x2b4>
 800117e:	458e      	cmp	lr, r1
 8001180:	d96a      	bls.n	8001258 <__udivmoddi4+0x2b4>
 8001182:	3802      	subs	r0, #2
 8001184:	4461      	add	r1, ip
 8001186:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800118a:	fba0 9402 	umull	r9, r4, r0, r2
 800118e:	eba1 010e 	sub.w	r1, r1, lr
 8001192:	42a1      	cmp	r1, r4
 8001194:	46c8      	mov	r8, r9
 8001196:	46a6      	mov	lr, r4
 8001198:	d356      	bcc.n	8001248 <__udivmoddi4+0x2a4>
 800119a:	d053      	beq.n	8001244 <__udivmoddi4+0x2a0>
 800119c:	b15d      	cbz	r5, 80011b6 <__udivmoddi4+0x212>
 800119e:	ebb3 0208 	subs.w	r2, r3, r8
 80011a2:	eb61 010e 	sbc.w	r1, r1, lr
 80011a6:	fa01 f707 	lsl.w	r7, r1, r7
 80011aa:	fa22 f306 	lsr.w	r3, r2, r6
 80011ae:	40f1      	lsrs	r1, r6
 80011b0:	431f      	orrs	r7, r3
 80011b2:	e9c5 7100 	strd	r7, r1, [r5]
 80011b6:	2600      	movs	r6, #0
 80011b8:	4631      	mov	r1, r6
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	f1c2 0320 	rsb	r3, r2, #32
 80011c2:	40d8      	lsrs	r0, r3
 80011c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c8:	fa21 f303 	lsr.w	r3, r1, r3
 80011cc:	4091      	lsls	r1, r2
 80011ce:	4301      	orrs	r1, r0
 80011d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d4:	fa1f fe8c 	uxth.w	lr, ip
 80011d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80011dc:	fb07 3610 	mls	r6, r7, r0, r3
 80011e0:	0c0b      	lsrs	r3, r1, #16
 80011e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011e6:	fb00 f60e 	mul.w	r6, r0, lr
 80011ea:	429e      	cmp	r6, r3
 80011ec:	fa04 f402 	lsl.w	r4, r4, r2
 80011f0:	d908      	bls.n	8001204 <__udivmoddi4+0x260>
 80011f2:	eb1c 0303 	adds.w	r3, ip, r3
 80011f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80011fa:	d22f      	bcs.n	800125c <__udivmoddi4+0x2b8>
 80011fc:	429e      	cmp	r6, r3
 80011fe:	d92d      	bls.n	800125c <__udivmoddi4+0x2b8>
 8001200:	3802      	subs	r0, #2
 8001202:	4463      	add	r3, ip
 8001204:	1b9b      	subs	r3, r3, r6
 8001206:	b289      	uxth	r1, r1
 8001208:	fbb3 f6f7 	udiv	r6, r3, r7
 800120c:	fb07 3316 	mls	r3, r7, r6, r3
 8001210:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001214:	fb06 f30e 	mul.w	r3, r6, lr
 8001218:	428b      	cmp	r3, r1
 800121a:	d908      	bls.n	800122e <__udivmoddi4+0x28a>
 800121c:	eb1c 0101 	adds.w	r1, ip, r1
 8001220:	f106 38ff 	add.w	r8, r6, #4294967295
 8001224:	d216      	bcs.n	8001254 <__udivmoddi4+0x2b0>
 8001226:	428b      	cmp	r3, r1
 8001228:	d914      	bls.n	8001254 <__udivmoddi4+0x2b0>
 800122a:	3e02      	subs	r6, #2
 800122c:	4461      	add	r1, ip
 800122e:	1ac9      	subs	r1, r1, r3
 8001230:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001234:	e738      	b.n	80010a8 <__udivmoddi4+0x104>
 8001236:	462e      	mov	r6, r5
 8001238:	4628      	mov	r0, r5
 800123a:	e705      	b.n	8001048 <__udivmoddi4+0xa4>
 800123c:	4606      	mov	r6, r0
 800123e:	e6e3      	b.n	8001008 <__udivmoddi4+0x64>
 8001240:	4618      	mov	r0, r3
 8001242:	e6f8      	b.n	8001036 <__udivmoddi4+0x92>
 8001244:	454b      	cmp	r3, r9
 8001246:	d2a9      	bcs.n	800119c <__udivmoddi4+0x1f8>
 8001248:	ebb9 0802 	subs.w	r8, r9, r2
 800124c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001250:	3801      	subs	r0, #1
 8001252:	e7a3      	b.n	800119c <__udivmoddi4+0x1f8>
 8001254:	4646      	mov	r6, r8
 8001256:	e7ea      	b.n	800122e <__udivmoddi4+0x28a>
 8001258:	4620      	mov	r0, r4
 800125a:	e794      	b.n	8001186 <__udivmoddi4+0x1e2>
 800125c:	4640      	mov	r0, r8
 800125e:	e7d1      	b.n	8001204 <__udivmoddi4+0x260>
 8001260:	46d0      	mov	r8, sl
 8001262:	e77b      	b.n	800115c <__udivmoddi4+0x1b8>
 8001264:	3b02      	subs	r3, #2
 8001266:	4461      	add	r1, ip
 8001268:	e732      	b.n	80010d0 <__udivmoddi4+0x12c>
 800126a:	4630      	mov	r0, r6
 800126c:	e709      	b.n	8001082 <__udivmoddi4+0xde>
 800126e:	4464      	add	r4, ip
 8001270:	3802      	subs	r0, #2
 8001272:	e742      	b.n	80010fa <__udivmoddi4+0x156>

08001274 <__aeabi_idiv0>:
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop

08001278 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001280:	2334      	movs	r3, #52	; 0x34
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <tx_application_define+0x34>)
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <tx_application_define+0x38>)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <tx_application_define+0x3c>)
 800128e:	f004 ff4b 	bl	8006128 <_txe_byte_pool_create>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <tx_application_define+0x3c>)
 800129a:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f80b 	bl	80012b8 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000208 	.word	0x20000208
 80012b0:	0800ada8 	.word	0x0800ada8
 80012b4:	20000608 	.word	0x20000608

080012b8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af08      	add	r7, sp, #32
 80012be:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1,"my_First_trade",my_Thread_entry_1,0x1234,thread_stack1,THREAD_STACK_SIZE,
 80012c8:	23b0      	movs	r3, #176	; 0xb0
 80012ca:	9306      	str	r3, [sp, #24]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9305      	str	r3, [sp, #20]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9304      	str	r3, [sp, #16]
 80012d4:	2303      	movs	r3, #3
 80012d6:	9303      	str	r3, [sp, #12]
 80012d8:	2303      	movs	r3, #3
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <App_ThreadX_Init+0x48>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	f241 2334 	movw	r3, #4660	; 0x1234
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <App_ThreadX_Init+0x4c>)
 80012ec:	4906      	ldr	r1, [pc, #24]	; (8001308 <App_ThreadX_Init+0x50>)
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <App_ThreadX_Init+0x54>)
 80012f0:	f004 ffba 	bl	8006268 <_txe_thread_create>
     	  */
  (void)byte_pool;

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000063c 	.word	0x2000063c
 8001304:	0800133d 	.word	0x0800133d
 8001308:	0800adbc 	.word	0x0800adbc
 800130c:	20000a3c 	.word	0x20000a3c

08001310 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */
  sprintf(HEADER2, "Init ThreadX");
 8001314:	4906      	ldr	r1, [pc, #24]	; (8001330 <MX_ThreadX_Init+0x20>)
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_ThreadX_Init+0x24>)
 8001318:	f005 ff4a 	bl	80071b0 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	220e      	movs	r2, #14
 8001320:	4904      	ldr	r1, [pc, #16]	; (8001334 <MX_ThreadX_Init+0x24>)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_ThreadX_Init+0x28>)
 8001324:	f002 ffa3 	bl	800426e <HAL_UART_Transmit>
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001328:	f003 fc80 	bl	8004c2c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800adcc 	.word	0x0800adcc
 8001334:	20000aec 	.word	0x20000aec
 8001338:	20000cd0 	.word	0x20000cd0

0800133c <my_Thread_entry_1>:

/* USER CODE BEGIN 1 */
void my_Thread_entry_1(ULONG initial_input)
{
 800133c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001340:	b089      	sub	sp, #36	; 0x24
 8001342:	af06      	add	r7, sp, #24
 8001344:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(TickSerial == true)
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <my_Thread_entry_1+0xb4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0fb      	beq.n	8001346 <my_Thread_entry_1+0xa>
					{
					  TickSerial = false;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <my_Thread_entry_1+0xb4>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
					  if (SerialTX >= ThransholdSerialTX)
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <my_Thread_entry_1+0xb8>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <my_Thread_entry_1+0xbc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d308      	bcc.n	8001372 <my_Thread_entry_1+0x36>
					  {
						  SerialTX = 0;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <my_Thread_entry_1+0xb8>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
						  SerialTX++;
 8001366:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <my_Thread_entry_1+0xb8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <my_Thread_entry_1+0xb8>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e004      	b.n	800137c <my_Thread_entry_1+0x40>
					  }
					  else
					  {
						  SerialTX++;
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <my_Thread_entry_1+0xb8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <my_Thread_entry_1+0xb8>)
 800137a:	6013      	str	r3, [r2, #0]
					  }
						  sprintf(MSG,"Px,%d;%d;%.3f;%.3f;%.3f;Sx",SerialTX,Counter,
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <my_Thread_entry_1+0xb8>)
 800137e:	681e      	ldr	r6, [r3, #0]
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <my_Thread_entry_1+0xc0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <my_Thread_entry_1+0xc4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa1c 	bl	80007c8 <__aeabi_f2d>
 8001390:	4604      	mov	r4, r0
 8001392:	460d      	mov	r5, r1
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <my_Thread_entry_1+0xc8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fa15 	bl	80007c8 <__aeabi_f2d>
 800139e:	4680      	mov	r8, r0
 80013a0:	4689      	mov	r9, r1
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <my_Thread_entry_1+0xcc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fa0e 	bl	80007c8 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013b8:	e9cd 4500 	strd	r4, r5, [sp]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4632      	mov	r2, r6
 80013c0:	4912      	ldr	r1, [pc, #72]	; (800140c <my_Thread_entry_1+0xd0>)
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <my_Thread_entry_1+0xd4>)
 80013c4:	f005 fef4 	bl	80071b0 <siprintf>
								  ActualPosition,ActualSpeedRPM,ActualSpeed);
						  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 80013c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013cc:	2256      	movs	r2, #86	; 0x56
 80013ce:	4910      	ldr	r1, [pc, #64]	; (8001410 <my_Thread_entry_1+0xd4>)
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <my_Thread_entry_1+0xd8>)
 80013d2:	f002 ff4c 	bl	800426e <HAL_UART_Transmit>
						  sprintf(CR,"\r\n");   // sprintf(CR,"\r\n"); 	//Ritorno a capo e a destra
 80013d6:	4910      	ldr	r1, [pc, #64]	; (8001418 <my_Thread_entry_1+0xdc>)
 80013d8:	4810      	ldr	r0, [pc, #64]	; (800141c <my_Thread_entry_1+0xe0>)
 80013da:	f005 fee9 	bl	80071b0 <siprintf>
						  HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);
 80013de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e2:	2204      	movs	r2, #4
 80013e4:	490d      	ldr	r1, [pc, #52]	; (800141c <my_Thread_entry_1+0xe0>)
 80013e6:	480b      	ldr	r0, [pc, #44]	; (8001414 <my_Thread_entry_1+0xd8>)
 80013e8:	f002 ff41 	bl	800426e <HAL_UART_Transmit>
		if(TickSerial == true)
 80013ec:	e7ab      	b.n	8001346 <my_Thread_entry_1+0xa>
 80013ee:	bf00      	nop
 80013f0:	20000d48 	.word	0x20000d48
 80013f4:	20000b64 	.word	0x20000b64
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000b58 	.word	0x20000b58
 8001400:	20000d90 	.word	0x20000d90
 8001404:	20000d94 	.word	0x20000d94
 8001408:	20000d98 	.word	0x20000d98
 800140c:	0800addc 	.word	0x0800addc
 8001410:	20000afc 	.word	0x20000afc
 8001414:	20000cd0 	.word	0x20000cd0
 8001418:	0800adf8 	.word	0x0800adf8
 800141c:	20000b54 	.word	0x20000b54

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001424:	f000 ffba 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001428:	f000 f824 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142c:	f000 fa10 	bl	8001850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001430:	f000 f9e4 	bl	80017fc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001434:	f000 f95c 	bl	80016f0 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001438:	f000 f992 	bl	8001760 <MX_TIM10_Init>
  MX_TIM11_Init();
 800143c:	f000 f9b8 	bl	80017b0 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001440:	f000 f8aa 	bl	8001598 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001444:	f000 f8fc 	bl	8001640 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001448:	f000 f882 	bl	8001550 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized Serial Comunication \n");
 800144c:	4906      	ldr	r1, [pc, #24]	; (8001468 <main+0x48>)
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <main+0x4c>)
 8001450:	f005 feae 	bl	80071b0 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	2223      	movs	r2, #35	; 0x23
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <main+0x4c>)
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <main+0x50>)
 800145c:	f002 ff07 	bl	800426e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001460:	f7ff ff56 	bl	8001310 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001464:	e7fe      	b.n	8001464 <main+0x44>
 8001466:	bf00      	nop
 8001468:	0800adfc 	.word	0x0800adfc
 800146c:	20000d14 	.word	0x20000d14
 8001470:	20000cd0 	.word	0x20000cd0

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f005 f80c 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a29      	ldr	r2, [pc, #164]	; (8001548 <SystemClock_Config+0xd4>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <SystemClock_Config+0xd4>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <SystemClock_Config+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <SystemClock_Config+0xd8>)
 80014c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <SystemClock_Config+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d0:	603b      	str	r3, [r7, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014dc:	2310      	movs	r3, #16
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014e8:	2310      	movs	r3, #16
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fdd6 	bl	80030b4 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800150e:	f000 fa89 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001522:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	2102      	movs	r1, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f001 fa44 	bl	80029bc <HAL_RCC_ClockConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800153a:	f000 fa73 	bl	8001a24 <Error_Handler>
  }
}
 800153e:	bf00      	nop
 8001540:	3750      	adds	r7, #80	; 0x50
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40007000 	.word	0x40007000

08001550 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2019      	movs	r0, #25
 800155a:	f001 f819 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800155e:	2019      	movs	r0, #25
 8001560:	f001 f832 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	201a      	movs	r0, #26
 800156a:	f001 f811 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800156e:	201a      	movs	r0, #26
 8001570:	f001 f82a 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2100      	movs	r1, #0
 8001578:	2028      	movs	r0, #40	; 0x28
 800157a:	f001 f809 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800157e:	2028      	movs	r0, #40	; 0x28
 8001580:	f001 f822 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2037      	movs	r0, #55	; 0x37
 800158a:	f001 f801 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800158e:	2037      	movs	r0, #55	; 0x37
 8001590:	f001 f81a 	bl	80025c8 <HAL_NVIC_EnableIRQ>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015b6:	4a21      	ldr	r2, [pc, #132]	; (800163c <MX_TIM1_Init+0xa4>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015bc:	2201      	movs	r2, #1
 80015be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2099;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015c8:	f640 0233 	movw	r2, #2099	; 0x833
 80015cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e0:	4815      	ldr	r0, [pc, #84]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015e2:	f002 f805 	bl	80035f0 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015ec:	f000 fa1a 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <MX_TIM1_Init+0xa0>)
 80015fe:	f002 fb13 	bl	8003c28 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001608:	f000 fa0c 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_TIM1_Init+0xa0>)
 800161a:	f002 fd4b 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001624:	f000 f9fe 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Start Timer
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <MX_TIM1_Init+0xa0>)
 800162a:	f002 f831 	bl	8003690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000b68 	.word	0x20000b68
 800163c:	40010000 	.word	0x40010000

08001640 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08c      	sub	sp, #48	; 0x30
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	2224      	movs	r2, #36	; 0x24
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f004 ff26 	bl	80064a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_TIM2_Init+0xac>)
 800165e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_TIM2_Init+0xac>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_TIM2_Init+0xac>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <MX_TIM2_Init+0xac>)
 8001672:	f04f 32ff 	mov.w	r2, #4294967295
 8001676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_TIM2_Init+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MX_TIM2_Init+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001684:	2303      	movs	r3, #3
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001698:	2302      	movs	r3, #2
 800169a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480f      	ldr	r0, [pc, #60]	; (80016ec <MX_TIM2_Init+0xac>)
 80016b0:	f002 f85e 	bl	8003770 <HAL_TIM_Encoder_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ba:	f000 f9b3 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4808      	ldr	r0, [pc, #32]	; (80016ec <MX_TIM2_Init+0xac>)
 80016cc:	f002 fcf2 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016d6:	f000 f9a5 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80016da:	213c      	movs	r1, #60	; 0x3c
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM2_Init+0xac>)
 80016de:	f002 f8ed 	bl	80038bc <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000bb0 	.word	0x20000bb0

080016f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_TIM7_Init+0x68>)
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <MX_TIM7_Init+0x6c>)
 8001702:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_TIM7_Init+0x68>)
 8001706:	2201      	movs	r2, #1
 8001708:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_TIM7_Init+0x68>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2099;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_TIM7_Init+0x68>)
 8001712:	f640 0233 	movw	r2, #2099	; 0x833
 8001716:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <MX_TIM7_Init+0x68>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <MX_TIM7_Init+0x68>)
 8001720:	f001 ff66 	bl	80035f0 <HAL_TIM_Base_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800172a:	f000 f97b 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM7_Init+0x68>)
 800173c:	f002 fcba 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001746:	f000 f96d 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM7_Init+0x68>)
 800174c:	f001 ffa0 	bl	8003690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000bf8 	.word	0x20000bf8
 800175c:	40001400 	.word	0x40001400

08001760 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_TIM10_Init+0x48>)
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <MX_TIM10_Init+0x4c>)
 8001768:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_TIM10_Init+0x48>)
 800176c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001770:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_TIM10_Init+0x48>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 839;
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_TIM10_Init+0x48>)
 800177a:	f240 3247 	movw	r2, #839	; 0x347
 800177e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_TIM10_Init+0x48>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_TIM10_Init+0x48>)
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <MX_TIM10_Init+0x48>)
 800178e:	f001 ff2f 	bl	80035f0 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001798:	f000 f944 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  HAL_TIM_Base_Start_IT(&htim10); // Start Timer
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <MX_TIM10_Init+0x48>)
 800179e:	f001 ff77 	bl	8003690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000c40 	.word	0x20000c40
 80017ac:	40014400 	.word	0x40014400

080017b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <MX_TIM11_Init+0x48>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1000;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017c0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 83;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017ca:	2253      	movs	r2, #83	; 0x53
 80017cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017dc:	f001 ff08 	bl	80035f0 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80017e6:	f000 f91d 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  HAL_TIM_Base_Start_IT(&htim11); // Start Timer
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <MX_TIM11_Init+0x44>)
 80017ec:	f001 ff50 	bl	8003690 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM11_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000c88 	.word	0x20000c88
 80017f8:	40014800 	.word	0x40014800

080017fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_USART2_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800180c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_USART2_UART_Init+0x4c>)
 8001834:	f002 fcce 	bl	80041d4 <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 f8f1 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000cd0 	.word	0x20000cd0
 800184c:	40004400 	.word	0x40004400

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <MX_GPIO_Init+0x114>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <MX_GPIO_Init+0x114>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3b      	ldr	r3, [pc, #236]	; (8001964 <MX_GPIO_Init+0x114>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <MX_GPIO_Init+0x114>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a36      	ldr	r2, [pc, #216]	; (8001964 <MX_GPIO_Init+0x114>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <MX_GPIO_Init+0x114>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <MX_GPIO_Init+0x114>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <MX_GPIO_Init+0x114>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <MX_GPIO_Init+0x114>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_GPIO_Init+0x114>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a28      	ldr	r2, [pc, #160]	; (8001964 <MX_GPIO_Init+0x114>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_GPIO_Init+0x114>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2120      	movs	r1, #32
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <MX_GPIO_Init+0x118>)
 80018dc:	f001 f816 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	481d      	ldr	r0, [pc, #116]	; (800196c <MX_GPIO_Init+0x11c>)
 80018f8:	f000 fe74 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 80018fc:	2320      	movs	r3, #32
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4815      	ldr	r0, [pc, #84]	; (8001968 <MX_GPIO_Init+0x118>)
 8001914:	f000 fe66 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Index_Pin */
  GPIO_InitStruct.Pin = Encoder_Index_Pin;
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_Index_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	480e      	ldr	r0, [pc, #56]	; (8001968 <MX_GPIO_Init+0x118>)
 800192e:	f000 fe59 	bl	80025e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001932:	2308      	movs	r3, #8
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001936:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <MX_GPIO_Init+0x120>)
 8001948:	f000 fe4c 	bl	80025e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2009      	movs	r0, #9
 8001952:	f000 fe1d 	bl	8002590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001956:	2009      	movs	r0, #9
 8001958:	f000 fe36 	bl	80025c8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020800 	.word	0x40020800
 8001970:	40020400 	.word	0x40020400

08001974 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	timer_counter = __HAL_TIM_GET_COUNTER(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001984:	6013      	str	r3, [r2, #0]
	EncoderCount = (int16_t)timer_counter;
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_TIM_IC_CaptureCallback+0x40>)
 800198e:	801a      	strh	r2, [r3, #0]
	Calculate_Rotation(EncoderPulse,RevoluctionFactor,EncoderCount);
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_IC_CaptureCallback+0x48>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	4619      	mov	r1, r3
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_TIM_IC_CaptureCallback+0x40>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	461a      	mov	r2, r3
 80019a4:	f000 f8a0 	bl	8001ae8 <Calculate_Rotation>
	//EncoderPosition = EncoderCount/4;
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000d4c 	.word	0x20000d4c
 80019b4:	20000d54 	.word	0x20000d54
 80019b8:	20000004 	.word	0x20000004
 80019bc:	20000006 	.word	0x20000006

080019c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d102      	bne.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80019d2:	f000 fd05 	bl	80023e0 <HAL_IncTick>
  else if (htim->Instance == TIM11)  // 1KHz 1ms/sample
  {
    DiagnosticMotor();
    }
  /* USER CODE END Callback 1 */
}
 80019d6:	e017      	b.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM7)  //20KHz 20000sample/sec
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d102      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x28>
	  Motion();
 80019e2:	f000 f835 	bl	8001a50 <Motion>
}
 80019e6:	e00f      	b.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM10) //0.1KHz 10ms/sample
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d103      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0x3a>
  	TickSerial = true;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
}
 80019f8:	e006      	b.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM11)  // 1KHz 1ms/sample
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x48>
    DiagnosticMotor();
 8001a04:	f000 f862 	bl	8001acc <DiagnosticMotor>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40001000 	.word	0x40001000
 8001a14:	40001400 	.word	0x40001400
 8001a18:	40014400 	.word	0x40014400
 8001a1c:	20000d48 	.word	0x20000d48
 8001a20:	40014800 	.word	0x40014800

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(HEADER4, "Inside TradeMASTER");
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <Error_Handler+0x20>)
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <Error_Handler+0x24>)
 8001a30:	f005 fbbe 	bl	80071b0 <siprintf>
	  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8001a34:	2364      	movs	r3, #100	; 0x64
 8001a36:	2210      	movs	r2, #16
 8001a38:	4903      	ldr	r1, [pc, #12]	; (8001a48 <Error_Handler+0x24>)
 8001a3a:	4804      	ldr	r0, [pc, #16]	; (8001a4c <Error_Handler+0x28>)
 8001a3c:	f002 fc17 	bl	800426e <HAL_UART_Transmit>
  {
 8001a40:	e7f4      	b.n	8001a2c <Error_Handler+0x8>
 8001a42:	bf00      	nop
 8001a44:	0800ae20 	.word	0x0800ae20
 8001a48:	20000d38 	.word	0x20000d38
 8001a4c:	20000cd0 	.word	0x20000cd0

08001a50 <Motion>:
float ActualSpeed = 0;
float OldEncoderSpeedRPM = 0;


void Motion(void)      // THIS VOID RUN AT 20Khz
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

	  Counter++;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Motion+0x58>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <Motion+0x58>)
 8001a5c:	6013      	str	r3, [r2, #0]
	  if(TickSerial == true)
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <Motion+0x5c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <Motion+0x1e>
	  {
		  CouterSerial = Counter;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <Motion+0x58>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <Motion+0x60>)
 8001a6c:	6013      	str	r3, [r2, #0]
	  }

	  //--------------------GET SENSOR VALUES------------------------------

	  ActualPosition = KinematicPositionUnit;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <Motion+0x64>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <Motion+0x68>)
 8001a74:	6013      	str	r3, [r2, #0]
	  ActualSpeedRPM = EncoderPosition;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <Motion+0x6c>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <Motion+0x70>)
 8001a86:	edc3 7a00 	vstr	s15, [r3]
	  ActualSpeed = EncoderSpeed;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <Motion+0x74>)
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <Motion+0x78>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
	  //OldEncoderSpeedRPM = EncoderSpeedRPM;


}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20000b58 	.word	0x20000b58
 8001aac:	20000d48 	.word	0x20000d48
 8001ab0:	20000b5c 	.word	0x20000b5c
 8001ab4:	20000d58 	.word	0x20000d58
 8001ab8:	20000d90 	.word	0x20000d90
 8001abc:	20000d50 	.word	0x20000d50
 8001ac0:	20000d94 	.word	0x20000d94
 8001ac4:	20000d52 	.word	0x20000d52
 8001ac8:	20000d98 	.word	0x20000d98

08001acc <DiagnosticMotor>:
void DiagnosticMotor(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	  CounterDiag++;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <DiagnosticMotor+0x18>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <DiagnosticMotor+0x18>)
 8001ad8:	6013      	str	r3, [r2, #0]
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000b60 	.word	0x20000b60

08001ae8 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet,int32_t EncoderCountSet)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	603a      	str	r2, [r7, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
 8001af4:	460b      	mov	r3, r1
 8001af6:	80bb      	strh	r3, [r7, #4]
	EncoderPosition = EncoderCountSet/4.0;   // Single Event Encoder 1*4 in Single Counter
 8001af8:	6838      	ldr	r0, [r7, #0]
 8001afa:	f7fe fe53 	bl	80007a4 <__aeabi_i2d>
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <Calculate_Rotation+0x218>)
 8001b04:	f7fe ffe2 	bl	8000acc <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f962 	bl	8000dd8 <__aeabi_d2iz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <Calculate_Rotation+0x21c>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 8001b1c:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <Calculate_Rotation+0x21c>)
 8001b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2a:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <Calculate_Rotation+0x220>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <Calculate_Rotation+0x220>)
 8001b32:	edd3 6a00 	vldr	s13, [r3]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <Calculate_Rotation+0x224>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
	KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 8001b4a:	88bb      	ldrh	r3, [r7, #4]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <Calculate_Rotation+0x224>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	4b6c      	ldr	r3, [pc, #432]	; (8001d10 <Calculate_Rotation+0x228>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]

	TickClockMotion = Counter; // Get current time (seconds)
 8001b64:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <Calculate_Rotation+0x22c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <Calculate_Rotation+0x230>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]

	DiffTickClockMotion = (TickClockMotion - OldTickClockMotion); // Calculate time from count to count
 8001b76:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <Calculate_Rotation+0x230>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <Calculate_Rotation+0x234>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	4b66      	ldr	r3, [pc, #408]	; (8001d20 <Calculate_Rotation+0x238>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]


	if (FilterSpeedEnable == 1)  //  CutOff Low-Pass Filter
 8001b8c:	4b65      	ldr	r3, [pc, #404]	; (8001d24 <Calculate_Rotation+0x23c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d17e      	bne.n	8001c92 <Calculate_Rotation+0x1aa>
	{
		//GetConstantFilter();        DA INSERIRE //////////////////////////////////////////////////////////
		EncoderSpeedRPSToFiler = ((20000.0/DiffTickClockMotion)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001b94:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <Calculate_Rotation+0x238>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fe15 	bl	80007c8 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	a155      	add	r1, pc, #340	; (adr r1, 8001cf8 <Calculate_Rotation+0x210>)
 8001ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba8:	f7fe ff90 	bl	8000acc <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fdf3 	bl	80007a4 <__aeabi_i2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe ff81 	bl	8000acc <__aeabi_ddiv>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f949 	bl	8000e68 <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <Calculate_Rotation+0x240>)
 8001bda:	6013      	str	r3, [r2, #0]
		EncoderSpeed = ((b_i*RPSSpeedFilter) + (a_i*EncoderSpeedRPSToFiler) + (a_i*RPSSpeedFilterPrev));
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <Calculate_Rotation+0x244>)
 8001bde:	ed93 7a00 	vldr	s14, [r3]
 8001be2:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <Calculate_Rotation+0x248>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <Calculate_Rotation+0x24c>)
 8001bee:	edd3 6a00 	vldr	s13, [r3]
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <Calculate_Rotation+0x240>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <Calculate_Rotation+0x24c>)
 8001c02:	edd3 6a00 	vldr	s13, [r3]
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <Calculate_Rotation+0x250>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <Calculate_Rotation+0x254>)
 8001c20:	801a      	strh	r2, [r3, #0]
		EncoderSpeedRPM = (EncoderSpeed* 60.0); //Calculate RPM Speed
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <Calculate_Rotation+0x254>)
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fdbb 	bl	80007a4 <__aeabi_i2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <Calculate_Rotation+0x258>)
 8001c34:	f7fe fe20 	bl	8000878 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7ff f912 	bl	8000e68 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <Calculate_Rotation+0x25c>)
 8001c48:	6013      	str	r3, [r2, #0]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001c4a:	88bb      	ldrh	r3, [r7, #4]
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <Calculate_Rotation+0x25c>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <Calculate_Rotation+0x260>)
 8001c60:	edc3 7a00 	vstr	s15, [r3]
		OldTickClockMotion = TickClockMotion; // Save to old value
 8001c64:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <Calculate_Rotation+0x230>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <Calculate_Rotation+0x234>)
 8001c6a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Green_Led_Pin);
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	4837      	ldr	r0, [pc, #220]	; (8001d4c <Calculate_Rotation+0x264>)
 8001c70:	f000 fe65 	bl	800293e <HAL_GPIO_TogglePin>
		RPSSpeedFilterPrev = EncoderSpeedRPSToFiler;
 8001c74:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <Calculate_Rotation+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2f      	ldr	r2, [pc, #188]	; (8001d38 <Calculate_Rotation+0x250>)
 8001c7a:	6013      	str	r3, [r2, #0]
		RPSSpeedFilter = EncoderSpeed;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <Calculate_Rotation+0x254>)
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	4b29      	ldr	r3, [pc, #164]	; (8001d30 <Calculate_Rotation+0x248>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
		//IncrementSpeedCheck++;
		//TM6_Currentvalue = 0; //Reset Current Value Counter
		HAL_GPIO_TogglePin (GPIOA, LD2_Green_Led_Pin);
	}

}
 8001c90:	e02c      	b.n	8001cec <Calculate_Rotation+0x204>
		EncoderSpeedRPM = ((EncoderSpeed/EncoderPulseSet)*60.0); //Calculate RPM Speed
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <Calculate_Rotation+0x254>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd7f 	bl	80007a4 <__aeabi_i2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <Calculate_Rotation+0x258>)
 8001cac:	f7fe fde4 	bl	8000878 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7ff f8d6 	bl	8000e68 <__aeabi_d2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <Calculate_Rotation+0x25c>)
 8001cc0:	6013      	str	r3, [r2, #0]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <Calculate_Rotation+0x25c>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <Calculate_Rotation+0x260>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]
		OldTickClockMotion = TickClockMotion; // Save to old value
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <Calculate_Rotation+0x230>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <Calculate_Rotation+0x234>)
 8001ce2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Green_Led_Pin);
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	4819      	ldr	r0, [pc, #100]	; (8001d4c <Calculate_Rotation+0x264>)
 8001ce8:	f000 fe29 	bl	800293e <HAL_GPIO_TogglePin>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40d38800 	.word	0x40d38800
 8001d00:	40100000 	.word	0x40100000
 8001d04:	20000d50 	.word	0x20000d50
 8001d08:	20000d6c 	.word	0x20000d6c
 8001d0c:	20000d70 	.word	0x20000d70
 8001d10:	20000d58 	.word	0x20000d58
 8001d14:	20000b58 	.word	0x20000b58
 8001d18:	20000d8c 	.word	0x20000d8c
 8001d1c:	20000d68 	.word	0x20000d68
 8001d20:	20000d64 	.word	0x20000d64
 8001d24:	20000d74 	.word	0x20000d74
 8001d28:	20000d80 	.word	0x20000d80
 8001d2c:	20000d84 	.word	0x20000d84
 8001d30:	20000d78 	.word	0x20000d78
 8001d34:	20000d88 	.word	0x20000d88
 8001d38:	20000d7c 	.word	0x20000d7c
 8001d3c:	20000d52 	.word	0x20000d52
 8001d40:	404e0000 	.word	0x404e0000
 8001d44:	20000d5c 	.word	0x20000d5c
 8001d48:	20000d60 	.word	0x20000d60
 8001d4c:	40020000 	.word	0x40020000

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_TIM_Base_MspInit+0xb4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001dce:	e03a      	b.n	8001e46 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a21      	ldr	r2, [pc, #132]	; (8001e5c <HAL_TIM_Base_MspInit+0xbc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
}
 8001df6:	e026      	b.n	8001e46 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_Base_MspInit+0xc0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	e012      	b.n	8001e46 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_TIM_Base_MspInit+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10d      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <HAL_TIM_Base_MspInit+0xb8>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
}
 8001e46:	bf00      	nop
 8001e48:	371c      	adds	r7, #28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40001400 	.word	0x40001400
 8001e60:	40014400 	.word	0x40014400
 8001e64:	40014800 	.word	0x40014800

08001e68 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e88:	d133      	bne.n	8001ef2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_TIM_Encoder_MspInit+0x94>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <HAL_TIM_Encoder_MspInit+0x98>)
 8001ede:	f000 fb81 	bl	80025e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	201c      	movs	r0, #28
 8001ee8:	f000 fb52 	bl	8002590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eec:	201c      	movs	r0, #28
 8001eee:	f000 fb6b 	bl	80025c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_UART_MspInit+0x84>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d12b      	bne.n	8001f7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6e:	2307      	movs	r3, #7
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_UART_MspInit+0x8c>)
 8001f7a:	f000 fb33 	bl	80025e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	; 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_InitTick+0xe4>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	4a32      	ldr	r2, [pc, #200]	; (8002078 <HAL_InitTick+0xe4>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_InitTick+0xe4>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fc0:	f107 0210 	add.w	r2, r7, #16
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fe10 	bl	8002bf0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fda:	f000 fde1 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8001fde:	6378      	str	r0, [r7, #52]	; 0x34
 8001fe0:	e004      	b.n	8001fec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fe2:	f000 fddd 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_InitTick+0xe8>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_InitTick+0xec>)
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_InitTick+0xf0>)
 8001ffe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_InitTick+0xec>)
 8002002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002006:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_InitTick+0xec>)
 800200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_InitTick+0xec>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_InitTick+0xec>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_InitTick+0xec>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002020:	4817      	ldr	r0, [pc, #92]	; (8002080 <HAL_InitTick+0xec>)
 8002022:	f001 fae5 	bl	80035f0 <HAL_TIM_Base_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800202c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11b      	bne.n	800206c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002034:	4812      	ldr	r0, [pc, #72]	; (8002080 <HAL_InitTick+0xec>)
 8002036:	f001 fb2b 	bl	8003690 <HAL_TIM_Base_Start_IT>
 800203a:	4603      	mov	r3, r0
 800203c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002044:	2b00      	cmp	r3, #0
 8002046:	d111      	bne.n	800206c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002048:	2036      	movs	r0, #54	; 0x36
 800204a:	f000 fabd 	bl	80025c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d808      	bhi.n	8002066 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	2036      	movs	r0, #54	; 0x36
 800205a:	f000 fa99 	bl	8002590 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_InitTick+0xf4>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	e002      	b.n	800206c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800206c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002070:	4618      	mov	r0, r3
 8002072:	3738      	adds	r7, #56	; 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	431bde83 	.word	0x431bde83
 8002080:	20000d9c 	.word	0x20000d9c
 8002084:	40001000 	.word	0x40001000
 8002088:	2000000c 	.word	0x2000000c

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <NMI_Handler+0x4>

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <HardFault_Handler+0x4>

08002098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <MemManage_Handler+0x4>

0800209e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <UsageFault_Handler+0x4>

080020aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80020bc:	2008      	movs	r0, #8
 80020be:	f000 fc59 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020cc:	4803      	ldr	r0, [pc, #12]	; (80020dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80020ce:	f001 fca3 	bl	8003a18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020d4:	f001 fca0 	bl	8003a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000b68 	.word	0x20000b68
 80020e0:	20000c40 	.word	0x20000c40

080020e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e8:	4803      	ldr	r0, [pc, #12]	; (80020f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80020ea:	f001 fc95 	bl	8003a18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80020f0:	f001 fc92 	bl	8003a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000b68 	.word	0x20000b68
 80020fc:	20000c88 	.word	0x20000c88

08002100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM2_IRQHandler+0x10>)
 8002106:	f001 fc87 	bl	8003a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000bb0 	.word	0x20000bb0

08002114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800211c:	f000 fc2a 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002128:	4811      	ldr	r0, [pc, #68]	; (8002170 <TIM6_DAC_IRQHandler+0x4c>)
 800212a:	f001 fc75 	bl	8003a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  index++;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <TIM6_DAC_IRQHandler+0x50>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a0f      	ldr	r2, [pc, #60]	; (8002174 <TIM6_DAC_IRQHandler+0x50>)
 8002136:	6013      	str	r3, [r2, #0]
  if(index == 10)
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <TIM6_DAC_IRQHandler+0x50>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b0a      	cmp	r3, #10
 800213e:	d114      	bne.n	800216a <TIM6_DAC_IRQHandler+0x46>
  {
	  EncoderSpeed = ((EncoderPosition-oldEncoderPosition)*1); // Speed in Count/0.1sec
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <TIM6_DAC_IRQHandler+0x54>)
 8002142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <TIM6_DAC_IRQHandler+0x58>)
 800214a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214e:	b29b      	uxth	r3, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21a      	sxth	r2, r3
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <TIM6_DAC_IRQHandler+0x5c>)
 8002158:	801a      	strh	r2, [r3, #0]
	  oldEncoderPosition = EncoderPosition;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <TIM6_DAC_IRQHandler+0x54>)
 800215c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <TIM6_DAC_IRQHandler+0x58>)
 8002162:	801a      	strh	r2, [r3, #0]
	  index = 0;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <TIM6_DAC_IRQHandler+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000d9c 	.word	0x20000d9c
 8002174:	20000de8 	.word	0x20000de8
 8002178:	20000d50 	.word	0x20000d50
 800217c:	20000de4 	.word	0x20000de4
 8002180:	20000d52 	.word	0x20000d52

08002184 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <TIM7_IRQHandler+0x10>)
 800218a:	f001 fc45 	bl	8003a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000bf8 	.word	0x20000bf8

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b2:	f004 f94b 	bl	800644c <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021da:	e7fe      	b.n	80021da <_exit+0x12>

080021dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00a      	b.n	8002204 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ee:	f3af 8000 	nop.w
 80021f2:	4601      	mov	r1, r0
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	60ba      	str	r2, [r7, #8]
 80021fa:	b2ca      	uxtb	r2, r1
 80021fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	3301      	adds	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	429a      	cmp	r2, r3
 800220a:	dbf0      	blt.n	80021ee <_read+0x12>
  }

  return len;
 800220c:	687b      	ldr	r3, [r7, #4]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e009      	b.n	800223c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	60ba      	str	r2, [r7, #8]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3301      	adds	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	dbf1      	blt.n	8002228 <_write+0x12>
  }
  return len;
 8002244:	687b      	ldr	r3, [r7, #4]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <_close>:

int _close(int file)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002276:	605a      	str	r2, [r3, #4]
  return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_isatty>:

int _isatty(int file)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f004 f8b0 	bl	800644c <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20020000 	.word	0x20020000
 8002318:	00000400 	.word	0x00000400
 800231c:	20000dec 	.word	0x20000dec
 8002320:	20001470 	.word	0x20001470

08002324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SystemInit+0x20>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	4a05      	ldr	r2, [pc, #20]	; (8002344 <SystemInit+0x20>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800234c:	480d      	ldr	r0, [pc, #52]	; (8002384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800234e:	490e      	ldr	r1, [pc, #56]	; (8002388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002364:	4c0b      	ldr	r4, [pc, #44]	; (8002394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002372:	f7ff ffd7 	bl	8002324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002376:	f004 f86f 	bl	8006458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237a:	f7ff f851 	bl	8001420 <main>
  bx  lr    
 800237e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800238c:	0800b314 	.word	0x0800b314
  ldr r2, =_sbss
 8002390:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002394:	20001470 	.word	0x20001470

08002398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f8d8 	bl	800257a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	200f      	movs	r0, #15
 80023cc:	f7ff fde2 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7ff fcbe 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010
 8002404:	20000df0 	.word	0x20000df0

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000df0 	.word	0x20000df0

08002420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800243c:	4013      	ands	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800244c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002452:	4a04      	ldr	r2, [pc, #16]	; (8002464 <__NVIC_SetPriorityGrouping+0x44>)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <__NVIC_GetPriorityGrouping+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0a1b      	lsrs	r3, r3, #8
 8002472:	f003 0307 	and.w	r3, r3, #7
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	db0b      	blt.n	80024ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	f003 021f 	and.w	r2, r3, #31
 800249c:	4907      	ldr	r1, [pc, #28]	; (80024bc <__NVIC_EnableIRQ+0x38>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	2001      	movs	r0, #1
 80024a6:	fa00 f202 	lsl.w	r2, r0, r2
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000e100 	.word	0xe000e100

080024c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	6039      	str	r1, [r7, #0]
 80024ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db0a      	blt.n	80024ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	490c      	ldr	r1, [pc, #48]	; (800250c <__NVIC_SetPriority+0x4c>)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	440b      	add	r3, r1
 80024e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e8:	e00a      	b.n	8002500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4908      	ldr	r1, [pc, #32]	; (8002510 <__NVIC_SetPriority+0x50>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	3b04      	subs	r3, #4
 80024f8:	0112      	lsls	r2, r2, #4
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	440b      	add	r3, r1
 80024fe:	761a      	strb	r2, [r3, #24]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002514:	b480      	push	{r7}
 8002516:	b089      	sub	sp, #36	; 0x24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f1c3 0307 	rsb	r3, r3, #7
 800252e:	2b04      	cmp	r3, #4
 8002530:	bf28      	it	cs
 8002532:	2304      	movcs	r3, #4
 8002534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3304      	adds	r3, #4
 800253a:	2b06      	cmp	r3, #6
 800253c:	d902      	bls.n	8002544 <NVIC_EncodePriority+0x30>
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3b03      	subs	r3, #3
 8002542:	e000      	b.n	8002546 <NVIC_EncodePriority+0x32>
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	401a      	ands	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800255c:	f04f 31ff 	mov.w	r1, #4294967295
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43d9      	mvns	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	4313      	orrs	r3, r2
         );
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff4c 	bl	8002420 <__NVIC_SetPriorityGrouping>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a2:	f7ff ff61 	bl	8002468 <__NVIC_GetPriorityGrouping>
 80025a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7ff ffb1 	bl	8002514 <NVIC_EncodePriority>
 80025b2:	4602      	mov	r2, r0
 80025b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff80 	bl	80024c0 <__NVIC_SetPriority>
}
 80025c0:	bf00      	nop
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff54 	bl	8002484 <__NVIC_EnableIRQ>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e165      	b.n	80028cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8154 	bne.w	80028c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80ae 	beq.w	80028c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a5c      	ldr	r2, [pc, #368]	; (80028e4 <HAL_GPIO_Init+0x300>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b5a      	ldr	r3, [pc, #360]	; (80028e4 <HAL_GPIO_Init+0x300>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002786:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	; (80028ec <HAL_GPIO_Init+0x308>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d025      	beq.n	80027fe <HAL_GPIO_Init+0x21a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4e      	ldr	r2, [pc, #312]	; (80028f0 <HAL_GPIO_Init+0x30c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d01f      	beq.n	80027fa <HAL_GPIO_Init+0x216>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <HAL_GPIO_Init+0x310>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x212>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_GPIO_Init+0x314>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x20e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4b      	ldr	r2, [pc, #300]	; (80028fc <HAL_GPIO_Init+0x318>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x20a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <HAL_GPIO_Init+0x31c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x206>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a49      	ldr	r2, [pc, #292]	; (8002904 <HAL_GPIO_Init+0x320>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x202>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00c      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e00a      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027ea:	2305      	movs	r3, #5
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x21c>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x304>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a31      	ldr	r2, [pc, #196]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2f      	ldr	r3, [pc, #188]	; (8002908 <HAL_GPIO_Init+0x324>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a26      	ldr	r2, [pc, #152]	; (8002908 <HAL_GPIO_Init+0x324>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <HAL_GPIO_Init+0x324>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_GPIO_Init+0x324>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a11      	ldr	r2, [pc, #68]	; (8002908 <HAL_GPIO_Init+0x324>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f ae96 	bls.w	8002600 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40021400 	.word	0x40021400
 8002904:	40021800 	.word	0x40021800
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	041a      	lsls	r2, r3, #16
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43d9      	mvns	r1, r3
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	400b      	ands	r3, r1
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f806 	bl	80029a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff fcac 	bl	8002408 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7ff fca8 	bl	8002408 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f887 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa16 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	0800ae48 	.word	0x0800ae48
 8002b80:	20000008 	.word	0x20000008
 8002b84:	2000000c 	.word	0x2000000c

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000008 	.word	0x20000008

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	0800ae58 	.word	0x0800ae58

08002bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bcc:	f7ff ffdc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0b5b      	lsrs	r3, r3, #13
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	0800ae58 	.word	0x0800ae58

08002bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RCC_GetClockConfig+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40023c00 	.word	0x40023c00

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b0ae      	sub	sp, #184	; 0xb8
 8002c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7a:	4bcb      	ldr	r3, [pc, #812]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	f200 8206 	bhi.w	8003094 <HAL_RCC_GetSysClockFreq+0x440>
 8002c88:	a201      	add	r2, pc, #4	; (adr r2, 8002c90 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002cc5 	.word	0x08002cc5
 8002c94:	08003095 	.word	0x08003095
 8002c98:	08003095 	.word	0x08003095
 8002c9c:	08003095 	.word	0x08003095
 8002ca0:	08002ccd 	.word	0x08002ccd
 8002ca4:	08003095 	.word	0x08003095
 8002ca8:	08003095 	.word	0x08003095
 8002cac:	08003095 	.word	0x08003095
 8002cb0:	08002cd5 	.word	0x08002cd5
 8002cb4:	08003095 	.word	0x08003095
 8002cb8:	08003095 	.word	0x08003095
 8002cbc:	08003095 	.word	0x08003095
 8002cc0:	08002ec5 	.word	0x08002ec5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc4:	4bb9      	ldr	r3, [pc, #740]	; (8002fac <HAL_RCC_GetSysClockFreq+0x358>)
 8002cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cca:	e1e7      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4bb8      	ldr	r3, [pc, #736]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cd2:	e1e3      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4bb4      	ldr	r3, [pc, #720]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce0:	4bb1      	ldr	r3, [pc, #708]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d071      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cec:	4bae      	ldr	r3, [pc, #696]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cf8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d12:	4622      	mov	r2, r4
 8002d14:	462b      	mov	r3, r5
 8002d16:	f04f 0000 	mov.w	r0, #0
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	0159      	lsls	r1, r3, #5
 8002d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d24:	0150      	lsls	r0, r2, #5
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	1a51      	subs	r1, r2, r1
 8002d2e:	6439      	str	r1, [r7, #64]	; 0x40
 8002d30:	4629      	mov	r1, r5
 8002d32:	eb63 0301 	sbc.w	r3, r3, r1
 8002d36:	647b      	str	r3, [r7, #68]	; 0x44
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d44:	4649      	mov	r1, r9
 8002d46:	018b      	lsls	r3, r1, #6
 8002d48:	4641      	mov	r1, r8
 8002d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d4e:	4641      	mov	r1, r8
 8002d50:	018a      	lsls	r2, r1, #6
 8002d52:	4641      	mov	r1, r8
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d58:	4649      	mov	r1, r9
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d6c:	4649      	mov	r1, r9
 8002d6e:	00cb      	lsls	r3, r1, #3
 8002d70:	4641      	mov	r1, r8
 8002d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d76:	4641      	mov	r1, r8
 8002d78:	00ca      	lsls	r2, r1, #3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4622      	mov	r2, r4
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	462b      	mov	r3, r5
 8002d88:	460a      	mov	r2, r1
 8002d8a:	eb42 0303 	adc.w	r3, r2, r3
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	024b      	lsls	r3, r1, #9
 8002da0:	4621      	mov	r1, r4
 8002da2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da6:	4621      	mov	r1, r4
 8002da8:	024a      	lsls	r2, r1, #9
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dbc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002dc0:	f7fe f8a2 	bl	8000f08 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dce:	e067      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ddc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dea:	2300      	movs	r3, #0
 8002dec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e24:	4649      	mov	r1, r9
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4641      	mov	r1, r8
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4641      	mov	r1, r8
 8002e34:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e38:	4649      	mov	r1, r9
 8002e3a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e4a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e52:	4692      	mov	sl, r2
 8002e54:	469b      	mov	fp, r3
 8002e56:	4623      	mov	r3, r4
 8002e58:	eb1a 0303 	adds.w	r3, sl, r3
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	eb4b 0303 	adc.w	r3, fp, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e88:	2200      	movs	r2, #0
 8002e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e8c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e92:	f7fe f839 	bl	8000f08 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0c1b      	lsrs	r3, r3, #16
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ec2:	e0eb      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec4:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d06b      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002edc:	4b32      	ldr	r3, [pc, #200]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eee:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ef4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	0159      	lsls	r1, r3, #5
 8002f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0a:	0150      	lsls	r0, r2, #5
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4621      	mov	r1, r4
 8002f12:	1a51      	subs	r1, r2, r1
 8002f14:	61b9      	str	r1, [r7, #24]
 8002f16:	4629      	mov	r1, r5
 8002f18:	eb63 0301 	sbc.w	r3, r3, r1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	018b      	lsls	r3, r1, #6
 8002f2e:	4651      	mov	r1, sl
 8002f30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f34:	4651      	mov	r1, sl
 8002f36:	018a      	lsls	r2, r1, #6
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002f3e:	4659      	mov	r1, fp
 8002f40:	eb63 0901 	sbc.w	r9, r3, r1
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f58:	4690      	mov	r8, r2
 8002f5a:	4699      	mov	r9, r3
 8002f5c:	4623      	mov	r3, r4
 8002f5e:	eb18 0303 	adds.w	r3, r8, r3
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	462b      	mov	r3, r5
 8002f66:	eb49 0303 	adc.w	r3, r9, r3
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f78:	4629      	mov	r1, r5
 8002f7a:	024b      	lsls	r3, r1, #9
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f82:	4621      	mov	r1, r4
 8002f84:	024a      	lsls	r2, r1, #9
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8e:	2200      	movs	r2, #0
 8002f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f98:	f7fd ffb6 	bl	8000f08 <__aeabi_uldivmod>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa6:	e065      	b.n	8003074 <HAL_RCC_GetSysClockFreq+0x420>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400
 8002fb0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb4:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <HAL_RCC_GetSysClockFreq+0x458>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc4:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	657b      	str	r3, [r7, #84]	; 0x54
 8002fca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002fce:	4642      	mov	r2, r8
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	4649      	mov	r1, r9
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003000:	4659      	mov	r1, fp
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4651      	mov	r1, sl
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4651      	mov	r1, sl
 8003010:	1a54      	subs	r4, r2, r1
 8003012:	4659      	mov	r1, fp
 8003014:	eb63 0501 	sbc.w	r5, r3, r1
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	00eb      	lsls	r3, r5, #3
 8003022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	4614      	mov	r4, r2
 800302a:	461d      	mov	r5, r3
 800302c:	4643      	mov	r3, r8
 800302e:	18e3      	adds	r3, r4, r3
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	464b      	mov	r3, r9
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003046:	4629      	mov	r1, r5
 8003048:	028b      	lsls	r3, r1, #10
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003050:	4621      	mov	r1, r4
 8003052:	028a      	lsls	r2, r1, #10
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305c:	2200      	movs	r2, #0
 800305e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003060:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003066:	f7fd ff4f 	bl	8000f08 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4613      	mov	r3, r2
 8003070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_RCC_GetSysClockFreq+0x458>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	0f1b      	lsrs	r3, r3, #28
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003082:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003092:	e003      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800309a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	37b8      	adds	r7, #184	; 0xb8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400

080030b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e28d      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8083 	beq.w	80031da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030d4:	4b94      	ldr	r3, [pc, #592]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d019      	beq.n	8003114 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030e0:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d106      	bne.n	80030fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030ec:	4b8e      	ldr	r3, [pc, #568]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f8:	d00c      	beq.n	8003114 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030fa:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003112:	d10b      	bne.n	800312c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d05b      	beq.n	80031d8 <HAL_RCC_OscConfig+0x124>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d157      	bne.n	80031d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e25a      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d106      	bne.n	8003144 <HAL_RCC_OscConfig+0x90>
 8003136:	4b7c      	ldr	r3, [pc, #496]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7b      	ldr	r2, [pc, #492]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xcc>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xb4>
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a75      	ldr	r2, [pc, #468]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b73      	ldr	r3, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a72      	ldr	r2, [pc, #456]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xcc>
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6b      	ldr	r2, [pc, #428]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7ff f93e 	bl	8002408 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7ff f93a 	bl	8002408 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e21f      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xdc>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff f92a 	bl	8002408 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7ff f926 	bl	8002408 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e20b      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x104>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d06f      	beq.n	80032c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031e6:	4b50      	ldr	r3, [pc, #320]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031f2:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d105      	bne.n	800320a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031fe:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b47      	ldr	r3, [pc, #284]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d11c      	bne.n	8003250 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003216:	4b44      	ldr	r3, [pc, #272]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d116      	bne.n	8003250 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003222:	4b41      	ldr	r3, [pc, #260]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d005      	beq.n	800323a <HAL_RCC_OscConfig+0x186>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e1d3      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4937      	ldr	r1, [pc, #220]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	e03a      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d020      	beq.n	800329a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_RCC_OscConfig+0x278>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325e:	f7ff f8d3 	bl	8002408 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003266:	f7ff f8cf 	bl	8002408 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e1b4      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0f0      	beq.n	8003266 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4925      	ldr	r1, [pc, #148]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]
 8003298:	e015      	b.n	80032c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_OscConfig+0x278>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7ff f8b2 	bl	8002408 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a8:	f7ff f8ae 	bl	8002408 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e193      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d036      	beq.n	8003340 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7ff f892 	bl	8002408 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e8:	f7ff f88e 	bl	8002408 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e173      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_RCC_OscConfig+0x274>)
 80032fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x234>
 8003306:	e01b      	b.n	8003340 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_OscConfig+0x27c>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7ff f87b 	bl	8002408 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	e00e      	b.n	8003334 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003316:	f7ff f877 	bl	8002408 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d907      	bls.n	8003334 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e15c      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
 8003328:	40023800 	.word	0x40023800
 800332c:	42470000 	.word	0x42470000
 8003330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	4b8a      	ldr	r3, [pc, #552]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ea      	bne.n	8003316 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8097 	beq.w	800347c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003352:	4b83      	ldr	r3, [pc, #524]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a7e      	ldr	r2, [pc, #504]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b7c      	ldr	r3, [pc, #496]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800337e:	4b79      	ldr	r3, [pc, #484]	; (8003564 <HAL_RCC_OscConfig+0x4b0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x4b0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a75      	ldr	r2, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x4b0>)
 8003390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003396:	f7ff f837 	bl	8002408 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339e:	f7ff f833 	bl	8002408 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e118      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b0:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <HAL_RCC_OscConfig+0x4b0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0f0      	beq.n	800339e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x31e>
 80033c4:	4b66      	ldr	r3, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	e01c      	b.n	800340c <HAL_RCC_OscConfig+0x358>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x340>
 80033da:	4b61      	ldr	r3, [pc, #388]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a60      	ldr	r2, [pc, #384]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	f043 0304 	orr.w	r3, r3, #4
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ea:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
 80033f2:	e00b      	b.n	800340c <HAL_RCC_OscConfig+0x358>
 80033f4:	4b5a      	ldr	r3, [pc, #360]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a59      	ldr	r2, [pc, #356]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003400:	4b57      	ldr	r3, [pc, #348]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003406:	f023 0304 	bic.w	r3, r3, #4
 800340a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d015      	beq.n	8003440 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003414:	f7fe fff8 	bl	8002408 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fe fff4 	bl	8002408 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0d7      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ee      	beq.n	800341c <HAL_RCC_OscConfig+0x368>
 800343e:	e014      	b.n	800346a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe ffe2 	bl	8002408 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fe ffde 	bl	8002408 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e0c1      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345e:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ee      	bne.n	8003448 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346a:	7dfb      	ldrb	r3, [r7, #23]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003470:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	4a3a      	ldr	r2, [pc, #232]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80ad 	beq.w	80035e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003486:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b08      	cmp	r3, #8
 8003490:	d060      	beq.n	8003554 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d145      	bne.n	8003526 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x4b4>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe ffb2 	bl	8002408 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe ffae 	bl	8002408 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e093      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	3b01      	subs	r3, #1
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	061b      	lsls	r3, r3, #24
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	491b      	ldr	r1, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4b4>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe ff83 	bl	8002408 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe ff7f 	bl	8002408 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e064      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x452>
 8003524:	e05c      	b.n	80035e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x4b4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe ff6c 	bl	8002408 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe ff68 	bl	8002408 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e04d      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x4ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x480>
 8003552:	e045      	b.n	80035e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e040      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000
 8003568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800356c:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <HAL_RCC_OscConfig+0x538>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d030      	beq.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d129      	bne.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d122      	bne.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d119      	bne.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	3b01      	subs	r3, #1
 80035b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d10f      	bne.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800

080035f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e041      	b.n	8003686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fbc2 	bl	8001da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f000 fbe0 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d001      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04e      	b.n	8003746 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_TIM_Base_Start_IT+0xc4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d022      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d01d      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_TIM_Base_Start_IT+0xc8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d018      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_TIM_Base_Start_IT+0xcc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00e      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_TIM_Base_Start_IT+0xd4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_TIM_Base_Start_IT+0xd8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_TIM_Base_Start_IT+0x80>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <HAL_TIM_Base_Start_IT+0xdc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b06      	cmp	r3, #6
 8003720:	d010      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003732:	e007      	b.n	8003744 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40010400 	.word	0x40010400
 8003768:	40014000 	.word	0x40014000
 800376c:	40001800 	.word	0x40001800

08003770 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e097      	b.n	80038b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fe fb65 	bl	8001e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f000 fb15 	bl	8003df4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	4313      	orrs	r3, r2
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003810:	f023 030c 	bic.w	r3, r3, #12
 8003814:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800381c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	4313      	orrs	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	011a      	lsls	r2, r3, #4
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	031b      	lsls	r3, r3, #12
 8003840:	4313      	orrs	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4313      	orrs	r3, r2
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d110      	bne.n	800390e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038f2:	7b7b      	ldrb	r3, [r7, #13]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e089      	b.n	8003a10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800390c:	e031      	b.n	8003972 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d110      	bne.n	8003936 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d102      	bne.n	8003920 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800391a:	7b3b      	ldrb	r3, [r7, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e075      	b.n	8003a10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003934:	e01d      	b.n	8003972 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d108      	bne.n	800394e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800393c:	7bbb      	ldrb	r3, [r7, #14]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d102      	bne.n	800394e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003948:	7b3b      	ldrb	r3, [r7, #12]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e05e      	b.n	8003a10 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d010      	beq.n	80039a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800397e:	e01f      	b.n	80039c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f000 fb6d 	bl	8004068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0202 	orr.w	r2, r2, #2
 800399c:	60da      	str	r2, [r3, #12]
      break;
 800399e:	e02e      	b.n	80039fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	2104      	movs	r1, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fb5d 	bl	8004068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0204 	orr.w	r2, r2, #4
 80039bc:	60da      	str	r2, [r3, #12]
      break;
 80039be:	e01e      	b.n	80039fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2201      	movs	r2, #1
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fb4d 	bl	8004068 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	2104      	movs	r1, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fb46 	bl	8004068 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0202 	orr.w	r2, r2, #2
 80039ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0204 	orr.w	r2, r2, #4
 80039fa:	60da      	str	r2, [r3, #12]
      break;
 80039fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0202 	mvn.w	r2, #2
 8003a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd ff8a 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f9a7 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f9ae 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d122      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0204 	mvn.w	r2, #4
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd ff60 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f97d 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f984 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0208 	mvn.w	r2, #8
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2204      	movs	r2, #4
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd ff36 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f953 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f95a 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d122      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d11b      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0210 	mvn.w	r2, #16
 8003b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2208      	movs	r2, #8
 8003b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd ff0c 	bl	8001974 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e005      	b.n	8003b6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f929 	bl	8003db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f930 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10e      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0201 	mvn.w	r2, #1
 8003b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd ff12 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d10e      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b80      	cmp	r3, #128	; 0x80
 8003bb6:	d107      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fafc 	bl	80041c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d10e      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8f5 	bl	8003dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d10e      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d107      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0220 	mvn.w	r2, #32
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fac6 	bl	80041ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0b4      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x186>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7c:	d03e      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0xd4>
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c82:	f200 8087 	bhi.w	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8a:	f000 8086 	beq.w	8003d9a <HAL_TIM_ConfigClockSource+0x172>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d87f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d01a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xa6>
 8003c98:	2b70      	cmp	r3, #112	; 0x70
 8003c9a:	d87b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d050      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ca0:	2b60      	cmp	r3, #96	; 0x60
 8003ca2:	d877      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d03c      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ca8:	2b50      	cmp	r3, #80	; 0x50
 8003caa:	d873      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d058      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x13a>
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d86f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d064      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d86b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d060      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d867      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d05a      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	e062      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 f9a3 	bl	8004028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	609a      	str	r2, [r3, #8]
      break;
 8003cfa:	e04f      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f000 f98c 	bl	8004028 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e03c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 f900 	bl	8003f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2150      	movs	r1, #80	; 0x50
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f959 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003d40:	e02c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 f91f 	bl	8003f92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2160      	movs	r1, #96	; 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f949 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003d60:	e01c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 f8e0 	bl	8003f34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f939 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 f930 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a40      	ldr	r2, [pc, #256]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3d      	ldr	r2, [pc, #244]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3c      	ldr	r2, [pc, #240]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3b      	ldr	r2, [pc, #236]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3a      	ldr	r2, [pc, #232]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <TIM_Base_SetConfig+0x118>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2b      	ldr	r2, [pc, #172]	; (8003f10 <TIM_Base_SetConfig+0x11c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2a      	ldr	r2, [pc, #168]	; (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a28      	ldr	r2, [pc, #160]	; (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a24      	ldr	r2, [pc, #144]	; (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <TIM_Base_SetConfig+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <TIM_Base_SetConfig+0x124>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800
 8003f14:	40000c00 	.word	0x40000c00
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40014000 	.word	0x40014000
 8003f20:	40014400 	.word	0x40014400
 8003f24:	40014800 	.word	0x40014800
 8003f28:	40001800 	.word	0x40001800
 8003f2c:	40001c00 	.word	0x40001c00
 8003f30:	40002000 	.word	0x40002000

08003f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f023 030a 	bic.w	r3, r3, #10
 8003f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	621a      	str	r2, [r3, #32]
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b087      	sub	sp, #28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0210 	bic.w	r2, r3, #16
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	031b      	lsls	r3, r3, #12
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	621a      	str	r2, [r3, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	f043 0307 	orr.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	021a      	lsls	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	431a      	orrs	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4313      	orrs	r3, r2
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	609a      	str	r2, [r3, #8]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2201      	movs	r2, #1
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	43db      	mvns	r3, r3
 800408a:	401a      	ands	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1a      	ldr	r2, [r3, #32]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e05a      	b.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d01d      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d018      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00e      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d009      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10c      	bne.n	8004170 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4313      	orrs	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40010000 	.word	0x40010000
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40010400 	.word	0x40010400
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40001800 	.word	0x40001800

080041ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e03f      	b.n	8004266 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fe82 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f929 	bl	8004470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800422c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800423c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	; 0x28
 8004272:	af02      	add	r7, sp, #8
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	d17c      	bne.n	8004388 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_Transmit+0x2c>
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e075      	b.n	800438a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Transmit+0x3e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e06e      	b.n	800438a <HAL_UART_Transmit+0x11c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fe f8a1 	bl	8002408 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d108      	bne.n	80042f0 <HAL_UART_Transmit+0x82>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004300:	e02a      	b.n	8004358 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f840 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e036      	b.n	800438a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3302      	adds	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e007      	b.n	800434a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1cf      	bne.n	8004302 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f810 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e006      	b.n	800438a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b090      	sub	sp, #64	; 0x40
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	e050      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d04c      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b2:	f7fe f829 	bl	8002408 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043be:	429a      	cmp	r2, r3
 80043c0:	d241      	bcs.n	8004446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	330c      	adds	r3, #12
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	330c      	adds	r3, #12
 80043e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043e2:	637a      	str	r2, [r7, #52]	; 0x34
 80043e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e5      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004416:	623a      	str	r2, [r7, #32]
 8004418:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	69f9      	ldr	r1, [r7, #28]
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	61bb      	str	r3, [r7, #24]
   return(result);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e00f      	b.n	8004466 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	429a      	cmp	r2, r3
 8004454:	bf0c      	ite	eq
 8004456:	2301      	moveq	r3, #1
 8004458:	2300      	movne	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	429a      	cmp	r2, r3
 8004462:	d09f      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3740      	adds	r7, #64	; 0x40
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004474:	b0c0      	sub	sp, #256	; 0x100
 8004476:	af00      	add	r7, sp, #0
 8004478:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	68d9      	ldr	r1, [r3, #12]
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	ea40 0301 	orr.w	r3, r0, r1
 8004498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044c8:	f021 010c 	bic.w	r1, r1, #12
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044d6:	430b      	orrs	r3, r1
 80044d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ea:	6999      	ldr	r1, [r3, #24]
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	ea40 0301 	orr.w	r3, r0, r1
 80044f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4b8f      	ldr	r3, [pc, #572]	; (800473c <UART_SetConfig+0x2cc>)
 8004500:	429a      	cmp	r2, r3
 8004502:	d005      	beq.n	8004510 <UART_SetConfig+0xa0>
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b8d      	ldr	r3, [pc, #564]	; (8004740 <UART_SetConfig+0x2d0>)
 800450c:	429a      	cmp	r2, r3
 800450e:	d104      	bne.n	800451a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004510:	f7fe fb5a 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 8004514:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004518:	e003      	b.n	8004522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800451a:	f7fe fb41 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 800451e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452c:	f040 810c 	bne.w	8004748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800453a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800453e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004542:	4622      	mov	r2, r4
 8004544:	462b      	mov	r3, r5
 8004546:	1891      	adds	r1, r2, r2
 8004548:	65b9      	str	r1, [r7, #88]	; 0x58
 800454a:	415b      	adcs	r3, r3
 800454c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800454e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004552:	4621      	mov	r1, r4
 8004554:	eb12 0801 	adds.w	r8, r2, r1
 8004558:	4629      	mov	r1, r5
 800455a:	eb43 0901 	adc.w	r9, r3, r1
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800456a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800456e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004572:	4690      	mov	r8, r2
 8004574:	4699      	mov	r9, r3
 8004576:	4623      	mov	r3, r4
 8004578:	eb18 0303 	adds.w	r3, r8, r3
 800457c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004580:	462b      	mov	r3, r5
 8004582:	eb49 0303 	adc.w	r3, r9, r3
 8004586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004596:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800459a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800459e:	460b      	mov	r3, r1
 80045a0:	18db      	adds	r3, r3, r3
 80045a2:	653b      	str	r3, [r7, #80]	; 0x50
 80045a4:	4613      	mov	r3, r2
 80045a6:	eb42 0303 	adc.w	r3, r2, r3
 80045aa:	657b      	str	r3, [r7, #84]	; 0x54
 80045ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045b4:	f7fc fca8 	bl	8000f08 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4b61      	ldr	r3, [pc, #388]	; (8004744 <UART_SetConfig+0x2d4>)
 80045be:	fba3 2302 	umull	r2, r3, r3, r2
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	011c      	lsls	r4, r3, #4
 80045c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	1891      	adds	r1, r2, r2
 80045de:	64b9      	str	r1, [r7, #72]	; 0x48
 80045e0:	415b      	adcs	r3, r3
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045e8:	4641      	mov	r1, r8
 80045ea:	eb12 0a01 	adds.w	sl, r2, r1
 80045ee:	4649      	mov	r1, r9
 80045f0:	eb43 0b01 	adc.w	fp, r3, r1
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004608:	4692      	mov	sl, r2
 800460a:	469b      	mov	fp, r3
 800460c:	4643      	mov	r3, r8
 800460e:	eb1a 0303 	adds.w	r3, sl, r3
 8004612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004616:	464b      	mov	r3, r9
 8004618:	eb4b 0303 	adc.w	r3, fp, r3
 800461c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800462c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004634:	460b      	mov	r3, r1
 8004636:	18db      	adds	r3, r3, r3
 8004638:	643b      	str	r3, [r7, #64]	; 0x40
 800463a:	4613      	mov	r3, r2
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
 8004642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800464a:	f7fc fc5d 	bl	8000f08 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4611      	mov	r1, r2
 8004654:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <UART_SetConfig+0x2d4>)
 8004656:	fba3 2301 	umull	r2, r3, r3, r1
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2264      	movs	r2, #100	; 0x64
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	1acb      	subs	r3, r1, r3
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800466a:	4b36      	ldr	r3, [pc, #216]	; (8004744 <UART_SetConfig+0x2d4>)
 800466c:	fba3 2302 	umull	r2, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004678:	441c      	add	r4, r3
 800467a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004684:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	1891      	adds	r1, r2, r2
 8004692:	63b9      	str	r1, [r7, #56]	; 0x38
 8004694:	415b      	adcs	r3, r3
 8004696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800469c:	4641      	mov	r1, r8
 800469e:	1851      	adds	r1, r2, r1
 80046a0:	6339      	str	r1, [r7, #48]	; 0x30
 80046a2:	4649      	mov	r1, r9
 80046a4:	414b      	adcs	r3, r1
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046b4:	4659      	mov	r1, fp
 80046b6:	00cb      	lsls	r3, r1, #3
 80046b8:	4651      	mov	r1, sl
 80046ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046be:	4651      	mov	r1, sl
 80046c0:	00ca      	lsls	r2, r1, #3
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	4642      	mov	r2, r8
 80046ca:	189b      	adds	r3, r3, r2
 80046cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046d0:	464b      	mov	r3, r9
 80046d2:	460a      	mov	r2, r1
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046f0:	460b      	mov	r3, r1
 80046f2:	18db      	adds	r3, r3, r3
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f6:	4613      	mov	r3, r2
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004706:	f7fc fbff 	bl	8000f08 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <UART_SetConfig+0x2d4>)
 8004710:	fba3 1302 	umull	r1, r3, r3, r2
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2164      	movs	r1, #100	; 0x64
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	3332      	adds	r3, #50	; 0x32
 8004722:	4a08      	ldr	r2, [pc, #32]	; (8004744 <UART_SetConfig+0x2d4>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 0207 	and.w	r2, r3, #7
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4422      	add	r2, r4
 8004736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004738:	e105      	b.n	8004946 <UART_SetConfig+0x4d6>
 800473a:	bf00      	nop
 800473c:	40011000 	.word	0x40011000
 8004740:	40011400 	.word	0x40011400
 8004744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474c:	2200      	movs	r2, #0
 800474e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004752:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	1891      	adds	r1, r2, r2
 8004760:	6239      	str	r1, [r7, #32]
 8004762:	415b      	adcs	r3, r3
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
 8004766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800476a:	4641      	mov	r1, r8
 800476c:	1854      	adds	r4, r2, r1
 800476e:	4649      	mov	r1, r9
 8004770:	eb43 0501 	adc.w	r5, r3, r1
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	00eb      	lsls	r3, r5, #3
 800477e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004782:	00e2      	lsls	r2, r4, #3
 8004784:	4614      	mov	r4, r2
 8004786:	461d      	mov	r5, r3
 8004788:	4643      	mov	r3, r8
 800478a:	18e3      	adds	r3, r4, r3
 800478c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004790:	464b      	mov	r3, r9
 8004792:	eb45 0303 	adc.w	r3, r5, r3
 8004796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047b6:	4629      	mov	r1, r5
 80047b8:	008b      	lsls	r3, r1, #2
 80047ba:	4621      	mov	r1, r4
 80047bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c0:	4621      	mov	r1, r4
 80047c2:	008a      	lsls	r2, r1, #2
 80047c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047c8:	f7fc fb9e 	bl	8000f08 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b60      	ldr	r3, [pc, #384]	; (8004954 <UART_SetConfig+0x4e4>)
 80047d2:	fba3 2302 	umull	r2, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	011c      	lsls	r4, r3, #4
 80047da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047de:	2200      	movs	r2, #0
 80047e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	61b9      	str	r1, [r7, #24]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047fc:	4641      	mov	r1, r8
 80047fe:	1851      	adds	r1, r2, r1
 8004800:	6139      	str	r1, [r7, #16]
 8004802:	4649      	mov	r1, r9
 8004804:	414b      	adcs	r3, r1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004814:	4659      	mov	r1, fp
 8004816:	00cb      	lsls	r3, r1, #3
 8004818:	4651      	mov	r1, sl
 800481a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481e:	4651      	mov	r1, sl
 8004820:	00ca      	lsls	r2, r1, #3
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	4603      	mov	r3, r0
 8004828:	4642      	mov	r2, r8
 800482a:	189b      	adds	r3, r3, r2
 800482c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004830:	464b      	mov	r3, r9
 8004832:	460a      	mov	r2, r1
 8004834:	eb42 0303 	adc.w	r3, r2, r3
 8004838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	67bb      	str	r3, [r7, #120]	; 0x78
 8004846:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004854:	4649      	mov	r1, r9
 8004856:	008b      	lsls	r3, r1, #2
 8004858:	4641      	mov	r1, r8
 800485a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485e:	4641      	mov	r1, r8
 8004860:	008a      	lsls	r2, r1, #2
 8004862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004866:	f7fc fb4f 	bl	8000f08 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <UART_SetConfig+0x4e4>)
 8004870:	fba3 1302 	umull	r1, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	2164      	movs	r1, #100	; 0x64
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	3332      	adds	r3, #50	; 0x32
 8004882:	4a34      	ldr	r2, [pc, #208]	; (8004954 <UART_SetConfig+0x4e4>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488e:	441c      	add	r4, r3
 8004890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004894:	2200      	movs	r2, #0
 8004896:	673b      	str	r3, [r7, #112]	; 0x70
 8004898:	677a      	str	r2, [r7, #116]	; 0x74
 800489a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800489e:	4642      	mov	r2, r8
 80048a0:	464b      	mov	r3, r9
 80048a2:	1891      	adds	r1, r2, r2
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ae:	4641      	mov	r1, r8
 80048b0:	1851      	adds	r1, r2, r1
 80048b2:	6039      	str	r1, [r7, #0]
 80048b4:	4649      	mov	r1, r9
 80048b6:	414b      	adcs	r3, r1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048c6:	4659      	mov	r1, fp
 80048c8:	00cb      	lsls	r3, r1, #3
 80048ca:	4651      	mov	r1, sl
 80048cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d0:	4651      	mov	r1, sl
 80048d2:	00ca      	lsls	r2, r1, #3
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	4603      	mov	r3, r0
 80048da:	4642      	mov	r2, r8
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	66bb      	str	r3, [r7, #104]	; 0x68
 80048e0:	464b      	mov	r3, r9
 80048e2:	460a      	mov	r2, r1
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	663b      	str	r3, [r7, #96]	; 0x60
 80048f4:	667a      	str	r2, [r7, #100]	; 0x64
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004902:	4649      	mov	r1, r9
 8004904:	008b      	lsls	r3, r1, #2
 8004906:	4641      	mov	r1, r8
 8004908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800490c:	4641      	mov	r1, r8
 800490e:	008a      	lsls	r2, r1, #2
 8004910:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004914:	f7fc faf8 	bl	8000f08 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <UART_SetConfig+0x4e4>)
 800491e:	fba3 1302 	umull	r1, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	2164      	movs	r1, #100	; 0x64
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	3332      	adds	r3, #50	; 0x32
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <UART_SetConfig+0x4e4>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	095b      	lsrs	r3, r3, #5
 8004938:	f003 020f 	and.w	r2, r3, #15
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4422      	add	r2, r4
 8004944:	609a      	str	r2, [r3, #8]
}
 8004946:	bf00      	nop
 8004948:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	51eb851f 	.word	0x51eb851f

08004958 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b096      	sub	sp, #88	; 0x58
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004966:	2234      	movs	r2, #52	; 0x34
 8004968:	2100      	movs	r1, #0
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f001 fd98 	bl	80064a0 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f1a3 0208 	sub.w	r2, r3, #8
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2202      	movs	r2, #2
 80049a4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4413      	add	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	3b04      	subs	r3, #4
 80049b6:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 80049c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049c4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3b04      	subs	r3, #4
 80049ca:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80049d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80049da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049dc:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049e2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3304      	adds	r3, #4
 80049ec:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	4a5d      	ldr	r2, [pc, #372]	; (8004b6c <_tx_byte_pool_create+0x214>)
 80049f6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8004a06:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a08:	b672      	cpsid	i
#endif
    return(int_posture);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <_tx_byte_pool_create+0x218>)
 8004a12:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8004a14:	4b57      	ldr	r3, [pc, #348]	; (8004b74 <_tx_byte_pool_create+0x21c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8004a1c:	4a56      	ldr	r2, [pc, #344]	; (8004b78 <_tx_byte_pool_create+0x220>)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2e:	e011      	b.n	8004a54 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8004a30:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <_tx_byte_pool_create+0x220>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8004a54:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <_tx_byte_pool_create+0x21c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a46      	ldr	r2, [pc, #280]	; (8004b74 <_tx_byte_pool_create+0x21c>)
 8004a5c:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	2008      	movs	r0, #8
 8004a6a:	f001 fa71 	bl	8005f50 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 8004a6e:	4b43      	ldr	r3, [pc, #268]	; (8004b7c <_tx_byte_pool_create+0x224>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d06c      	beq.n	8004b54 <_tx_byte_pool_create+0x1fc>
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <_tx_byte_pool_create+0x228>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d066      	beq.n	8004b54 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <_tx_byte_pool_create+0x22c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	4b3c      	ldr	r3, [pc, #240]	; (8004b88 <_tx_byte_pool_create+0x230>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10b      	bne.n	8004aba <_tx_byte_pool_create+0x162>
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	041a      	lsls	r2, r3, #16
 8004aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	e00e      	b.n	8004ad8 <_tx_byte_pool_create+0x180>
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004ac0:	d205      	bcs.n	8004ace <_tx_byte_pool_create+0x176>
 8004ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004acc:	e004      	b.n	8004ad8 <_tx_byte_pool_create+0x180>
 8004ace:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2215      	movs	r2, #21
 8004ae8:	609a      	str	r2, [r3, #8]
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <_tx_byte_pool_create+0x234>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	611a      	str	r2, [r3, #16]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	615a      	str	r2, [r3, #20]
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	619a      	str	r2, [r3, #24]
 8004b04:	f107 0214 	add.w	r2, r7, #20
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0a:	61da      	str	r2, [r3, #28]
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	3320      	adds	r3, #32
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <_tx_byte_pool_create+0x238>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d314      	bcc.n	8004b46 <_tx_byte_pool_create+0x1ee>
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <_tx_byte_pool_create+0x23c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b22:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <_tx_byte_pool_create+0x224>)
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <_tx_byte_pool_create+0x240>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2e:	621a      	str	r2, [r3, #32]
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <_tx_byte_pool_create+0x244>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00d      	beq.n	8004b54 <_tx_byte_pool_create+0x1fc>
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <_tx_byte_pool_create+0x244>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <_tx_byte_pool_create+0x240>)
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	4610      	mov	r0, r2
 8004b42:	4798      	blx	r3
 8004b44:	e006      	b.n	8004b54 <_tx_byte_pool_create+0x1fc>
 8004b46:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <_tx_byte_pool_create+0x224>)
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <_tx_byte_pool_create+0x240>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b52:	621a      	str	r2, [r3, #32]
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f383 8810 	msr	PRIMASK, r3
}
 8004b5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3750      	adds	r7, #80	; 0x50
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	ffffeeee 	.word	0xffffeeee
 8004b70:	42595445 	.word	0x42595445
 8004b74:	20000e20 	.word	0x20000e20
 8004b78:	20000e1c 	.word	0x20000e1c
 8004b7c:	20001448 	.word	0x20001448
 8004b80:	2000144c 	.word	0x2000144c
 8004b84:	20000014 	.word	0x20000014
 8004b88:	20000e2c 	.word	0x20000e2c
 8004b8c:	e0001004 	.word	0xe0001004
 8004b90:	20001444 	.word	0x20001444
 8004b94:	20001440 	.word	0x20001440
 8004b98:	20001434 	.word	0x20001434
 8004b9c:	20001450 	.word	0x20001450

08004ba0 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8004ba4:	f001 f9ae 	bl	8005f04 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004ba8:	f000 f9ec 	bl	8004f84 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004bac:	f000 ff96 	bl	8005adc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <_tx_initialize_high_level+0x5c>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <_tx_initialize_high_level+0x60>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <_tx_initialize_high_level+0x64>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <_tx_initialize_high_level+0x68>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <_tx_initialize_high_level+0x6c>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <_tx_initialize_high_level+0x70>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <_tx_initialize_high_level+0x74>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <_tx_initialize_high_level+0x78>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004be0:	4b0e      	ldr	r3, [pc, #56]	; (8004c1c <_tx_initialize_high_level+0x7c>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <_tx_initialize_high_level+0x80>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <_tx_initialize_high_level+0x84>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <_tx_initialize_high_level+0x88>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
#endif
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000df4 	.word	0x20000df4
 8004c00:	20000df8 	.word	0x20000df8
 8004c04:	20000dfc 	.word	0x20000dfc
 8004c08:	20000e00 	.word	0x20000e00
 8004c0c:	20000e04 	.word	0x20000e04
 8004c10:	20000e08 	.word	0x20000e08
 8004c14:	20000e14 	.word	0x20000e14
 8004c18:	20000e18 	.word	0x20000e18
 8004c1c:	20000e1c 	.word	0x20000e1c
 8004c20:	20000e20 	.word	0x20000e20
 8004c24:	20000e0c 	.word	0x20000e0c
 8004c28:	20000e10 	.word	0x20000e10

08004c2c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <_tx_initialize_kernel_enter+0x48>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004c38:	d00c      	beq.n	8004c54 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <_tx_initialize_kernel_enter+0x48>)
 8004c3c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004c40:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004c42:	f7fb fae5 	bl	8000210 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8004c46:	f7ff ffab 	bl	8004ba0 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <_tx_initialize_kernel_enter+0x4c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <_tx_initialize_kernel_enter+0x4c>)
 8004c52:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004c54:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <_tx_initialize_kernel_enter+0x48>)
 8004c56:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004c5a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <_tx_initialize_kernel_enter+0x50>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fb09 	bl	8001278 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004c66:	4b03      	ldr	r3, [pc, #12]	; (8004c74 <_tx_initialize_kernel_enter+0x48>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8004c6c:	f7fb fb10 	bl	8000290 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000014 	.word	0x20000014
 8004c78:	20000ec4 	.word	0x20000ec4
 8004c7c:	20000e24 	.word	0x20000e24

08004c80 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b09a      	sub	sp, #104	; 0x68
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c94:	21ef      	movs	r1, #239	; 0xef
 8004c96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c98:	f001 fc02 	bl	80064a0 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004c9c:	22b0      	movs	r2, #176	; 0xb0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f001 fbfd 	bl	80064a0 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cbc:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004cce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cd6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cdc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cec:	3b01      	subs	r3, #1
 8004cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf0:	4413      	add	r3, r2
 8004cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8004cfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d007      	beq.n	8004d12 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004d10:	e006      	b.n	8004d20 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d16:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004d1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2203      	movs	r2, #3
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a86      	ldr	r2, [pc, #536]	; (8004f44 <_tx_thread_create+0x2c4>)
 8004d2a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004d32:	4985      	ldr	r1, [pc, #532]	; (8004f48 <_tx_thread_create+0x2c8>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7fb fb0b 	bl	8000350 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d3e:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d44:	b672      	cpsid	i
    return(int_posture);
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a7f      	ldr	r2, [pc, #508]	; (8004f4c <_tx_thread_create+0x2cc>)
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004d50:	4b7f      	ldr	r3, [pc, #508]	; (8004f50 <_tx_thread_create+0x2d0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004d58:	4a7e      	ldr	r2, [pc, #504]	; (8004f54 <_tx_thread_create+0x2d4>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004d6e:	e016      	b.n	8004d9e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004d70:	4b78      	ldr	r3, [pc, #480]	; (8004f54 <_tx_thread_create+0x2d4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	; (8004f50 <_tx_thread_create+0x2d0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3301      	adds	r3, #1
 8004da4:	4a6a      	ldr	r2, [pc, #424]	; (8004f50 <_tx_thread_create+0x2d0>)
 8004da6:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8004da8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	4613      	mov	r3, r2
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	2001      	movs	r0, #1
 8004db6:	f001 f8cb 	bl	8005f50 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8004dba:	4b67      	ldr	r3, [pc, #412]	; (8004f58 <_tx_thread_create+0x2d8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d06b      	beq.n	8004e9e <_tx_thread_create+0x21e>
 8004dc6:	4b65      	ldr	r3, [pc, #404]	; (8004f5c <_tx_thread_create+0x2dc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d065      	beq.n	8004e9e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004dd2:	f3ef 8305 	mrs	r3, IPSR
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dda:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <_tx_thread_create+0x2e0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de2:	4b60      	ldr	r3, [pc, #384]	; (8004f64 <_tx_thread_create+0x2e4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10b      	bne.n	8004e06 <_tx_thread_create+0x186>
 8004dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
 8004df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	041a      	lsls	r2, r3, #16
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
 8004e04:	e00e      	b.n	8004e24 <_tx_thread_create+0x1a4>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004e0c:	d205      	bcs.n	8004e1a <_tx_thread_create+0x19a>
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	657b      	str	r3, [r7, #84]	; 0x54
 8004e12:	f04f 33ff 	mov.w	r3, #4294967295
 8004e16:	653b      	str	r3, [r7, #80]	; 0x50
 8004e18:	e004      	b.n	8004e24 <_tx_thread_create+0x1a4>
 8004e1a:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	2300      	movs	r3, #0
 8004e22:	657b      	str	r3, [r7, #84]	; 0x54
 8004e24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	2264      	movs	r2, #100	; 0x64
 8004e34:	609a      	str	r2, [r3, #8]
 8004e36:	4b4c      	ldr	r3, [pc, #304]	; (8004f68 <_tx_thread_create+0x2e8>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e42:	611a      	str	r2, [r3, #16]
 8004e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e48:	615a      	str	r2, [r3, #20]
 8004e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4e:	619a      	str	r2, [r3, #24]
 8004e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e54:	61da      	str	r2, [r3, #28]
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	3320      	adds	r3, #32
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5c:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <_tx_thread_create+0x2ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d314      	bcc.n	8004e90 <_tx_thread_create+0x210>
 8004e66:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <_tx_thread_create+0x2f0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e6c:	4a3a      	ldr	r2, [pc, #232]	; (8004f58 <_tx_thread_create+0x2d8>)
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <_tx_thread_create+0x2f4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e78:	621a      	str	r2, [r3, #32]
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	; (8004f78 <_tx_thread_create+0x2f8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00d      	beq.n	8004e9e <_tx_thread_create+0x21e>
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <_tx_thread_create+0x2f8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3b      	ldr	r2, [pc, #236]	; (8004f74 <_tx_thread_create+0x2f4>)
 8004e88:	6812      	ldr	r2, [r2, #0]
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4798      	blx	r3
 8004e8e:	e006      	b.n	8004e9e <_tx_thread_create+0x21e>
 8004e90:	4a31      	ldr	r2, [pc, #196]	; (8004f58 <_tx_thread_create+0x2d8>)
 8004e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <_tx_thread_create+0x2f4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e9c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004e9e:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <_tx_thread_create+0x2fc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a35      	ldr	r2, [pc, #212]	; (8004f7c <_tx_thread_create+0x2fc>)
 8004ea6:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d129      	bne.n	8004f02 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004eae:	f3ef 8305 	mrs	r3, IPSR
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004eb6:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <_tx_thread_create+0x2e0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004ec0:	d30d      	bcc.n	8004ede <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <_tx_thread_create+0x300>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004ec8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8004edc:	e001      	b.n	8004ee2 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	f383 8810 	msr	PRIMASK, r3
}
 8004eec:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f90c 	bl	800510c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01e      	beq.n	8004f38 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f00:	e01a      	b.n	8004f38 <_tx_thread_create+0x2b8>
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f12:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004f14:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004f16:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004f18:	b672      	cpsid	i
    return(int_posture);
 8004f1a:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004f1c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <_tx_thread_create+0x2fc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <_tx_thread_create+0x2fc>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f383 8810 	msr	PRIMASK, r3
}
 8004f32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004f34:	f000 f8b0 	bl	8005098 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3760      	adds	r7, #96	; 0x60
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	08005a21 	.word	0x08005a21
 8004f48:	08005001 	.word	0x08005001
 8004f4c:	54485244 	.word	0x54485244
 8004f50:	20000e38 	.word	0x20000e38
 8004f54:	20000e34 	.word	0x20000e34
 8004f58:	20001448 	.word	0x20001448
 8004f5c:	2000144c 	.word	0x2000144c
 8004f60:	20000014 	.word	0x20000014
 8004f64:	20000e2c 	.word	0x20000e2c
 8004f68:	e0001004 	.word	0xe0001004
 8004f6c:	20001444 	.word	0x20001444
 8004f70:	20001440 	.word	0x20001440
 8004f74:	20001434 	.word	0x20001434
 8004f78:	20001450 	.word	0x20001450
 8004f7c:	20000ec4 	.word	0x20000ec4
 8004f80:	20000e30 	.word	0x20000e30

08004f84 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004f88:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <_tx_thread_initialize+0x54>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <_tx_thread_initialize+0x58>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <_tx_thread_initialize+0x5c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004f9a:	4b12      	ldr	r3, [pc, #72]	; (8004fe4 <_tx_thread_initialize+0x60>)
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004fa0:	2280      	movs	r2, #128	; 0x80
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4810      	ldr	r0, [pc, #64]	; (8004fe8 <_tx_thread_initialize+0x64>)
 8004fa6:	f001 fa7b 	bl	80064a0 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <_tx_thread_initialize+0x68>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <_tx_thread_initialize+0x6c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <_tx_thread_initialize+0x70>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004fbc:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <_tx_thread_initialize+0x74>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <_tx_thread_initialize+0x78>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 8004fca:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8004fce:	4a0b      	ldr	r2, [pc, #44]	; (8004ffc <_tx_thread_initialize+0x78>)
 8004fd0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000e2c 	.word	0x20000e2c
 8004fdc:	20000e30 	.word	0x20000e30
 8004fe0:	20000e3c 	.word	0x20000e3c
 8004fe4:	20000e40 	.word	0x20000e40
 8004fe8:	20000e44 	.word	0x20000e44
 8004fec:	20000e34 	.word	0x20000e34
 8004ff0:	20000e38 	.word	0x20000e38
 8004ff4:	20000ec4 	.word	0x20000ec4
 8004ff8:	20000ec8 	.word	0x20000ec8
 8004ffc:	20000ecc 	.word	0x20000ecc

08005000 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <_tx_thread_shell_entry+0x8c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005014:	4610      	mov	r0, r2
 8005016:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8005018:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <_tx_thread_shell_entry+0x90>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8005020:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <_tx_thread_shell_entry+0x90>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69f8      	ldr	r0, [r7, #28]
 8005026:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005028:	f3ef 8310 	mrs	r3, PRIMASK
 800502c:	607b      	str	r3, [r7, #4]
    return(posture);
 800502e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005030:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005032:	b672      	cpsid	i
    return(int_posture);
 8005034:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8005036:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2201      	movs	r2, #1
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2201      	movs	r2, #1
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2200      	movs	r2, #0
 8005048:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <_tx_thread_shell_entry+0x94>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a10      	ldr	r2, [pc, #64]	; (8005094 <_tx_thread_shell_entry+0x94>)
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f383 8810 	msr	PRIMASK, r3
}
 800505e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8005060:	f3ef 8314 	mrs	r3, CONTROL
 8005064:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8005066:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 0304 	bic.w	r3, r3, #4
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f383 8814 	msr	CONTROL, r3
}
 800507c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800507e:	69f8      	ldr	r0, [r7, #28]
 8005080:	f000 f9fe 	bl	8005480 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8005084:	bf00      	nop
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000e2c 	.word	0x20000e2c
 8005090:	20000ec8 	.word	0x20000ec8
 8005094:	20000ec4 	.word	0x20000ec4

08005098 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <_tx_thread_system_preempt_check+0x64>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d121      	bne.n	80050ee <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80050aa:	4b15      	ldr	r3, [pc, #84]	; (8005100 <_tx_thread_system_preempt_check+0x68>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80050b0:	4b14      	ldr	r3, [pc, #80]	; (8005104 <_tx_thread_system_preempt_check+0x6c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d017      	beq.n	80050ee <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <_tx_thread_system_preempt_check+0x70>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80050c6:	f3ef 8305 	mrs	r3, IPSR
 80050ca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80050cc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10c      	bne.n	80050ec <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050d2:	f3ef 8310 	mrs	r3, PRIMASK
 80050d6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80050d8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80050da:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80050dc:	b662      	cpsie	i
}
 80050de:	bf00      	nop
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f383 8810 	msr	PRIMASK, r3
}
 80050ea:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80050ec:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80050ee:	bf00      	nop
 80050f0:	3724      	adds	r7, #36	; 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000ec4 	.word	0x20000ec4
 8005100:	20000e2c 	.word	0x20000e2c
 8005104:	20000e30 	.word	0x20000e30
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b09e      	sub	sp, #120	; 0x78
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8005114:	2300      	movs	r3, #0
 8005116:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800511e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005122:	b672      	cpsid	i
    return(int_posture);
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005126:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	334c      	adds	r3, #76	; 0x4c
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fdaf 	bl	8005c98 <_tx_timer_system_deactivate>
 800513a:	e002      	b.n	8005142 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 8005142:	4b8b      	ldr	r3, [pc, #556]	; (8005370 <_tx_thread_system_resume+0x264>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8005148:	4b89      	ldr	r3, [pc, #548]	; (8005370 <_tx_thread_system_resume+0x264>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	663b      	str	r3, [r7, #96]	; 0x60
 800514e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005150:	2b00      	cmp	r3, #0
 8005152:	d06f      	beq.n	8005234 <_tx_thread_system_resume+0x128>
 8005154:	4b87      	ldr	r3, [pc, #540]	; (8005374 <_tx_thread_system_resume+0x268>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d069      	beq.n	8005234 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005160:	f3ef 8305 	mrs	r3, IPSR
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	4b83      	ldr	r3, [pc, #524]	; (8005378 <_tx_thread_system_resume+0x26c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4313      	orrs	r3, r2
 800516e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005170:	4b82      	ldr	r3, [pc, #520]	; (800537c <_tx_thread_system_resume+0x270>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <_tx_thread_system_resume+0x88>
 800517c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	673b      	str	r3, [r7, #112]	; 0x70
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	041a      	lsls	r2, r3, #16
 8005188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518a:	4313      	orrs	r3, r2
 800518c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005190:	673b      	str	r3, [r7, #112]	; 0x70
 8005192:	e00e      	b.n	80051b2 <_tx_thread_system_resume+0xa6>
 8005194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005196:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800519a:	d205      	bcs.n	80051a8 <_tx_thread_system_resume+0x9c>
 800519c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519e:	673b      	str	r3, [r7, #112]	; 0x70
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a6:	e004      	b.n	80051b2 <_tx_thread_system_resume+0xa6>
 80051a8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80051ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ae:	2300      	movs	r3, #0
 80051b0:	673b      	str	r3, [r7, #112]	; 0x70
 80051b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c0:	2201      	movs	r2, #1
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <_tx_thread_system_resume+0x274>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	615a      	str	r2, [r3, #20]
 80051da:	f107 020c 	add.w	r2, r7, #12
 80051de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e0:	619a      	str	r2, [r3, #24]
 80051e2:	4b68      	ldr	r3, [pc, #416]	; (8005384 <_tx_thread_system_resume+0x278>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ea:	61da      	str	r2, [r3, #28]
 80051ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ee:	3320      	adds	r3, #32
 80051f0:	663b      	str	r3, [r7, #96]	; 0x60
 80051f2:	4b65      	ldr	r3, [pc, #404]	; (8005388 <_tx_thread_system_resume+0x27c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d314      	bcc.n	8005226 <_tx_thread_system_resume+0x11a>
 80051fc:	4b63      	ldr	r3, [pc, #396]	; (800538c <_tx_thread_system_resume+0x280>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	663b      	str	r3, [r7, #96]	; 0x60
 8005202:	4a5b      	ldr	r2, [pc, #364]	; (8005370 <_tx_thread_system_resume+0x264>)
 8005204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	4b61      	ldr	r3, [pc, #388]	; (8005390 <_tx_thread_system_resume+0x284>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800520e:	621a      	str	r2, [r3, #32]
 8005210:	4b60      	ldr	r3, [pc, #384]	; (8005394 <_tx_thread_system_resume+0x288>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00d      	beq.n	8005234 <_tx_thread_system_resume+0x128>
 8005218:	4b5e      	ldr	r3, [pc, #376]	; (8005394 <_tx_thread_system_resume+0x288>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5c      	ldr	r2, [pc, #368]	; (8005390 <_tx_thread_system_resume+0x284>)
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	4610      	mov	r0, r2
 8005222:	4798      	blx	r3
 8005224:	e006      	b.n	8005234 <_tx_thread_system_resume+0x128>
 8005226:	4a52      	ldr	r2, [pc, #328]	; (8005370 <_tx_thread_system_resume+0x264>)
 8005228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	4b58      	ldr	r3, [pc, #352]	; (8005390 <_tx_thread_system_resume+0x284>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005232:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8005234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800523a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005240:	4b55      	ldr	r3, [pc, #340]	; (8005398 <_tx_thread_system_resume+0x28c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3b01      	subs	r3, #1
 8005246:	4a54      	ldr	r2, [pc, #336]	; (8005398 <_tx_thread_system_resume+0x28c>)
 8005248:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 80b3 	bne.w	80053ba <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80c7 	beq.w	80053ec <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 80a2 	bne.w	80053ac <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8005274:	4a49      	ldr	r2, [pc, #292]	; (800539c <_tx_thread_system_resume+0x290>)
 8005276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 800527e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005280:	2b00      	cmp	r3, #0
 8005282:	d164      	bne.n	800534e <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8005284:	4945      	ldr	r1, [pc, #276]	; (800539c <_tx_thread_system_resume+0x290>)
 8005286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800529a:	2201      	movs	r2, #1
 800529c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80052a4:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <_tx_thread_system_resume+0x294>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	4313      	orrs	r3, r2
 80052ac:	4a3c      	ldr	r2, [pc, #240]	; (80053a0 <_tx_thread_system_resume+0x294>)
 80052ae:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80052b0:	4b3c      	ldr	r3, [pc, #240]	; (80053a4 <_tx_thread_system_resume+0x298>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052b6:	429a      	cmp	r2, r3
 80052b8:	f080 8098 	bcs.w	80053ec <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80052bc:	4a39      	ldr	r2, [pc, #228]	; (80053a4 <_tx_thread_system_resume+0x298>)
 80052be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052c0:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <_tx_thread_system_resume+0x278>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80052ce:	4a2d      	ldr	r2, [pc, #180]	; (8005384 <_tx_thread_system_resume+0x278>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e08a      	b.n	80053ec <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052dc:	429a      	cmp	r2, r3
 80052de:	f080 8085 	bcs.w	80053ec <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80052e2:	4a28      	ldr	r2, [pc, #160]	; (8005384 <_tx_thread_system_resume+0x278>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 80052e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80052ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d104      	bne.n	8005302 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80052f8:	4b22      	ldr	r3, [pc, #136]	; (8005384 <_tx_thread_system_resume+0x278>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005300:	61da      	str	r2, [r3, #28]
 8005302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800530e:	4b22      	ldr	r3, [pc, #136]	; (8005398 <_tx_thread_system_resume+0x28c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8005314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 80a1 	bne.w	800545e <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800531c:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <_tx_thread_system_resume+0x29c>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005324:	f3ef 8305 	mrs	r3, IPSR
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 800532c:	2b00      	cmp	r3, #0
 800532e:	f040 8098 	bne.w	8005462 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005332:	f3ef 8310 	mrs	r3, PRIMASK
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800533c:	b662      	cpsie	i
}
 800533e:	bf00      	nop
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	bf00      	nop
}
 800534c:	e089      	b.n	8005462 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800534e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8005354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800535a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005364:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800536a:	621a      	str	r2, [r3, #32]
 800536c:	e03e      	b.n	80053ec <_tx_thread_system_resume+0x2e0>
 800536e:	bf00      	nop
 8005370:	20001448 	.word	0x20001448
 8005374:	2000144c 	.word	0x2000144c
 8005378:	20000014 	.word	0x20000014
 800537c:	20000e2c 	.word	0x20000e2c
 8005380:	e0001004 	.word	0xe0001004
 8005384:	20000e30 	.word	0x20000e30
 8005388:	20001444 	.word	0x20001444
 800538c:	20001440 	.word	0x20001440
 8005390:	20001434 	.word	0x20001434
 8005394:	20001450 	.word	0x20001450
 8005398:	20000ec4 	.word	0x20000ec4
 800539c:	20000e44 	.word	0x20000e44
 80053a0:	20000e3c 	.word	0x20000e3c
 80053a4:	20000e40 	.word	0x20000e40
 80053a8:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2203      	movs	r2, #3
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
 80053b8:	e018      	b.n	80053ec <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d014      	beq.n	80053ec <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d010      	beq.n	80053ec <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
 80053de:	e005      	b.n	80053ec <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2203      	movs	r2, #3
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 80053ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80053f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d104      	bne.n	8005406 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <_tx_thread_system_resume+0x364>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005404:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005406:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <_tx_thread_system_resume+0x368>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	647b      	str	r3, [r7, #68]	; 0x44
 800540c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800540e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f383 8810 	msr	PRIMASK, r3
}
 8005416:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <_tx_thread_system_resume+0x364>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800541e:	429a      	cmp	r2, r3
 8005420:	d022      	beq.n	8005468 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <_tx_thread_system_resume+0x36c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11c      	bne.n	8005468 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <_tx_thread_system_resume+0x370>)
 8005430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005434:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005436:	f3ef 8305 	mrs	r3, IPSR
 800543a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800543c:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 800543e:	2b00      	cmp	r3, #0
 8005440:	d111      	bne.n	8005466 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005442:	f3ef 8310 	mrs	r3, PRIMASK
 8005446:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005448:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800544a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800544c:	b662      	cpsie	i
}
 800544e:	bf00      	nop
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f383 8810 	msr	PRIMASK, r3
}
 800545a:	bf00      	nop
}
 800545c:	e003      	b.n	8005466 <_tx_thread_system_resume+0x35a>
                                return;
 800545e:	bf00      	nop
 8005460:	e002      	b.n	8005468 <_tx_thread_system_resume+0x35c>
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <_tx_thread_system_resume+0x35c>
 8005466:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8005468:	3778      	adds	r7, #120	; 0x78
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000e30 	.word	0x20000e30
 8005474:	20000e2c 	.word	0x20000e2c
 8005478:	20000ec4 	.word	0x20000ec4
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0a4      	sub	sp, #144	; 0x90
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800548e:	4b98      	ldr	r3, [pc, #608]	; (80056f0 <_tx_thread_system_suspend+0x270>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800549c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 80054a0:	b672      	cpsid	i
    return(int_posture);
 80054a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80054a4:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d112      	bne.n	80054d6 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80054b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80054bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d004      	beq.n	80054ce <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	334c      	adds	r3, #76	; 0x4c
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 fb83 	bl	8005bd4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	4a88      	ldr	r2, [pc, #544]	; (80056f4 <_tx_thread_system_suspend+0x274>)
 80054d4:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80054d6:	4b88      	ldr	r3, [pc, #544]	; (80056f8 <_tx_thread_system_suspend+0x278>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3b01      	subs	r3, #1
 80054dc:	4a86      	ldr	r2, [pc, #536]	; (80056f8 <_tx_thread_system_suspend+0x278>)
 80054de:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 817d 	bne.w	80057e4 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 80054ea:	4b84      	ldr	r3, [pc, #528]	; (80056fc <_tx_thread_system_suspend+0x27c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80054f0:	4b82      	ldr	r3, [pc, #520]	; (80056fc <_tx_thread_system_suspend+0x27c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	673b      	str	r3, [r7, #112]	; 0x70
 80054f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d07c      	beq.n	80055f6 <_tx_thread_system_suspend+0x176>
 80054fc:	4b80      	ldr	r3, [pc, #512]	; (8005700 <_tx_thread_system_suspend+0x280>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d076      	beq.n	80055f6 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005508:	f3ef 8305 	mrs	r3, IPSR
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800550e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005510:	4b7c      	ldr	r3, [pc, #496]	; (8005704 <_tx_thread_system_suspend+0x284>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4313      	orrs	r3, r2
 8005516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005518:	4b75      	ldr	r3, [pc, #468]	; (80056f0 <_tx_thread_system_suspend+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d110      	bne.n	8005548 <_tx_thread_system_suspend+0xc8>
 8005526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	041a      	lsls	r2, r3, #16
 8005538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800553c:	4313      	orrs	r3, r2
 800553e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005546:	e013      	b.n	8005570 <_tx_thread_system_suspend+0xf0>
 8005548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800554e:	d208      	bcs.n	8005562 <_tx_thread_system_suspend+0xe2>
 8005550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005558:	f04f 33ff 	mov.w	r3, #4294967295
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005560:	e006      	b.n	8005570 <_tx_thread_system_suspend+0xf0>
 8005562:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8005566:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005570:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800557a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005582:	2202      	movs	r2, #2
 8005584:	609a      	str	r2, [r3, #8]
 8005586:	4b60      	ldr	r3, [pc, #384]	; (8005708 <_tx_thread_system_suspend+0x288>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005592:	611a      	str	r2, [r3, #16]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005598:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800559a:	615a      	str	r2, [r3, #20]
 800559c:	f107 0208 	add.w	r2, r7, #8
 80055a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a2:	619a      	str	r2, [r3, #24]
 80055a4:	4b59      	ldr	r3, [pc, #356]	; (800570c <_tx_thread_system_suspend+0x28c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ac:	61da      	str	r2, [r3, #28]
 80055ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b0:	3320      	adds	r3, #32
 80055b2:	673b      	str	r3, [r7, #112]	; 0x70
 80055b4:	4b56      	ldr	r3, [pc, #344]	; (8005710 <_tx_thread_system_suspend+0x290>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d314      	bcc.n	80055e8 <_tx_thread_system_suspend+0x168>
 80055be:	4b55      	ldr	r3, [pc, #340]	; (8005714 <_tx_thread_system_suspend+0x294>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	673b      	str	r3, [r7, #112]	; 0x70
 80055c4:	4a4d      	ldr	r2, [pc, #308]	; (80056fc <_tx_thread_system_suspend+0x27c>)
 80055c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	4b53      	ldr	r3, [pc, #332]	; (8005718 <_tx_thread_system_suspend+0x298>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80055d0:	621a      	str	r2, [r3, #32]
 80055d2:	4b52      	ldr	r3, [pc, #328]	; (800571c <_tx_thread_system_suspend+0x29c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00d      	beq.n	80055f6 <_tx_thread_system_suspend+0x176>
 80055da:	4b50      	ldr	r3, [pc, #320]	; (800571c <_tx_thread_system_suspend+0x29c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a4e      	ldr	r2, [pc, #312]	; (8005718 <_tx_thread_system_suspend+0x298>)
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	4610      	mov	r0, r2
 80055e4:	4798      	blx	r3
 80055e6:	e006      	b.n	80055f6 <_tx_thread_system_suspend+0x176>
 80055e8:	4a44      	ldr	r2, [pc, #272]	; (80056fc <_tx_thread_system_suspend+0x27c>)
 80055ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <_tx_thread_system_suspend+0x298>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80055f4:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 80055fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8005616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d016      	beq.n	800564c <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800562a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800562e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4a3b      	ldr	r2, [pc, #236]	; (8005720 <_tx_thread_system_suspend+0x2a0>)
 8005634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	f040 8085 	bne.w	800574a <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4937      	ldr	r1, [pc, #220]	; (8005720 <_tx_thread_system_suspend+0x2a0>)
 8005644:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800564a:	e07e      	b.n	800574a <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4a34      	ldr	r2, [pc, #208]	; (8005720 <_tx_thread_system_suspend+0x2a0>)
 8005650:	2100      	movs	r1, #0
 8005652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2201      	movs	r2, #1
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005660:	4b30      	ldr	r3, [pc, #192]	; (8005724 <_tx_thread_system_suspend+0x2a4>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005666:	43db      	mvns	r3, r3
 8005668:	4013      	ands	r3, r2
 800566a:	4a2e      	ldr	r2, [pc, #184]	; (8005724 <_tx_thread_system_suspend+0x2a4>)
 800566c:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800566e:	2300      	movs	r3, #0
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005672:	4b2c      	ldr	r3, [pc, #176]	; (8005724 <_tx_thread_system_suspend+0x2a4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8005678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d158      	bne.n	8005730 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <_tx_thread_system_suspend+0x2a8>)
 8005680:	2220      	movs	r2, #32
 8005682:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8005684:	4b21      	ldr	r3, [pc, #132]	; (800570c <_tx_thread_system_suspend+0x28c>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800568a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8005690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005698:	429a      	cmp	r2, r3
 800569a:	d102      	bne.n	80056a2 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800569c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800569e:	2200      	movs	r2, #0
 80056a0:	61da      	str	r2, [r3, #28]
 80056a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <_tx_thread_system_suspend+0x278>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 80056b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 80bf 	bne.w	800583a <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80056bc:	4b1b      	ldr	r3, [pc, #108]	; (800572c <_tx_thread_system_suspend+0x2ac>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80056c4:	f3ef 8305 	mrs	r3, IPSR
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80056ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10c      	bne.n	80056ea <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80056d8:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80056da:	b662      	cpsie	i
}
 80056dc:	bf00      	nop
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	bf00      	nop
}
 80056ea:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80056ec:	e0a5      	b.n	800583a <_tx_thread_system_suspend+0x3ba>
 80056ee:	bf00      	nop
 80056f0:	20000e2c 	.word	0x20000e2c
 80056f4:	20001430 	.word	0x20001430
 80056f8:	20000ec4 	.word	0x20000ec4
 80056fc:	20001448 	.word	0x20001448
 8005700:	2000144c 	.word	0x2000144c
 8005704:	20000014 	.word	0x20000014
 8005708:	e0001004 	.word	0xe0001004
 800570c:	20000e30 	.word	0x20000e30
 8005710:	20001444 	.word	0x20001444
 8005714:	20001440 	.word	0x20001440
 8005718:	20001434 	.word	0x20001434
 800571c:	20001450 	.word	0x20001450
 8005720:	20000e44 	.word	0x20000e44
 8005724:	20000e3c 	.word	0x20000e3c
 8005728:	20000e40 	.word	0x20000e40
 800572c:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005732:	fa93 f3a3 	rbit	r3, r3
 8005736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005740:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005744:	4413      	add	r3, r2
 8005746:	4a41      	ldr	r2, [pc, #260]	; (800584c <_tx_thread_system_suspend+0x3cc>)
 8005748:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800574a:	4b41      	ldr	r3, [pc, #260]	; (8005850 <_tx_thread_system_suspend+0x3d0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	429a      	cmp	r2, r3
 8005752:	d139      	bne.n	80057c8 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005754:	4b3d      	ldr	r3, [pc, #244]	; (800584c <_tx_thread_system_suspend+0x3cc>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a3e      	ldr	r2, [pc, #248]	; (8005854 <_tx_thread_system_suspend+0x3d4>)
 800575a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575e:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <_tx_thread_system_suspend+0x3d0>)
 8005760:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8005762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8005768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8005774:	4b36      	ldr	r3, [pc, #216]	; (8005850 <_tx_thread_system_suspend+0x3d0>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800577c:	61da      	str	r2, [r3, #28]
 800577e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005780:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	f383 8810 	msr	PRIMASK, r3
}
 8005788:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800578a:	4b33      	ldr	r3, [pc, #204]	; (8005858 <_tx_thread_system_suspend+0x3d8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8005790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005792:	2b00      	cmp	r3, #0
 8005794:	d153      	bne.n	800583e <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005796:	4b31      	ldr	r3, [pc, #196]	; (800585c <_tx_thread_system_suspend+0x3dc>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800579e:	f3ef 8305 	mrs	r3, IPSR
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80057a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057aa:	f3ef 8310 	mrs	r3, PRIMASK
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80057b4:	b662      	cpsie	i
}
 80057b6:	bf00      	nop
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f383 8810 	msr	PRIMASK, r3
}
 80057c2:	bf00      	nop
}
 80057c4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80057c6:	e03a      	b.n	800583e <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 80057c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d104      	bne.n	80057e4 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <_tx_thread_system_suspend+0x3d0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e2:	61da      	str	r2, [r3, #28]
 80057e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <_tx_thread_system_suspend+0x3d0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d022      	beq.n	8005842 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <_tx_thread_system_suspend+0x3d8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8005802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11c      	bne.n	8005842 <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005808:	4b14      	ldr	r3, [pc, #80]	; (800585c <_tx_thread_system_suspend+0x3dc>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005810:	f3ef 8305 	mrs	r3, IPSR
 8005814:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005816:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800581c:	f3ef 8310 	mrs	r3, PRIMASK
 8005820:	617b      	str	r3, [r7, #20]
    return(posture);
 8005822:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8005824:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005826:	b662      	cpsie	i
}
 8005828:	bf00      	nop
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f383 8810 	msr	PRIMASK, r3
}
 8005834:	bf00      	nop
}
 8005836:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8005838:	e003      	b.n	8005842 <_tx_thread_system_suspend+0x3c2>
                return;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <_tx_thread_system_suspend+0x3c4>
            return;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <_tx_thread_system_suspend+0x3c4>
    return;
 8005842:	bf00      	nop
}
 8005844:	3790      	adds	r7, #144	; 0x90
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20000e40 	.word	0x20000e40
 8005850:	20000e30 	.word	0x20000e30
 8005854:	20000e44 	.word	0x20000e44
 8005858:	20000ec4 	.word	0x20000ec4
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08e      	sub	sp, #56	; 0x38
 8005864:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005866:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <_tx_thread_time_slice+0x184>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800586c:	f3ef 8310 	mrs	r3, PRIMASK
 8005870:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005872:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005874:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005876:	b672      	cpsid	i
    return(int_posture);
 8005878:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800587c:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <_tx_thread_time_slice+0x188>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d024      	beq.n	80058d2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d120      	bne.n	80058d2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69d2      	ldr	r2, [r2, #28]
 8005896:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	4a53      	ldr	r2, [pc, #332]	; (80059ec <_tx_thread_time_slice+0x18c>)
 800589e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1a      	ldr	r2, [r3, #32]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d013      	beq.n	80058d2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10d      	bne.n	80058d2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	6a12      	ldr	r2, [r2, #32]
 80058be:	494c      	ldr	r1, [pc, #304]	; (80059f0 <_tx_thread_time_slice+0x190>)
 80058c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <_tx_thread_time_slice+0x194>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a49      	ldr	r2, [pc, #292]	; (80059f0 <_tx_thread_time_slice+0x190>)
 80058ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ce:	4a4a      	ldr	r2, [pc, #296]	; (80059f8 <_tx_thread_time_slice+0x198>)
 80058d0:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80058d8:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 80058da:	4b48      	ldr	r3, [pc, #288]	; (80059fc <_tx_thread_time_slice+0x19c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4313      	orrs	r3, r2
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 80058e2:	4b47      	ldr	r3, [pc, #284]	; (8005a00 <_tx_thread_time_slice+0x1a0>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 80058e8:	4b46      	ldr	r3, [pc, #280]	; (8005a04 <_tx_thread_time_slice+0x1a4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	623b      	str	r3, [r7, #32]
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d06d      	beq.n	80059d0 <_tx_thread_time_slice+0x170>
 80058f4:	4b44      	ldr	r3, [pc, #272]	; (8005a08 <_tx_thread_time_slice+0x1a8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d067      	beq.n	80059d0 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005900:	f3ef 8305 	mrs	r3, IPSR
 8005904:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <_tx_thread_time_slice+0x19c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4313      	orrs	r3, r2
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <_tx_thread_time_slice+0x184>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <_tx_thread_time_slice+0xd4>
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	041a      	lsls	r2, r3, #16
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	4313      	orrs	r3, r2
 800592c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
 8005932:	e00e      	b.n	8005952 <_tx_thread_time_slice+0xf2>
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800593a:	d205      	bcs.n	8005948 <_tx_thread_time_slice+0xe8>
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	633b      	str	r3, [r7, #48]	; 0x30
 8005946:	e004      	b.n	8005952 <_tx_thread_time_slice+0xf2>
 8005948:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800594c:	633b      	str	r3, [r7, #48]	; 0x30
 800594e:	2300      	movs	r3, #0
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
 8005952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2205      	movs	r2, #5
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	4b29      	ldr	r3, [pc, #164]	; (8005a0c <_tx_thread_time_slice+0x1ac>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	4b22      	ldr	r3, [pc, #136]	; (80059f8 <_tx_thread_time_slice+0x198>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	611a      	str	r2, [r3, #16]
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597a:	615a      	str	r2, [r3, #20]
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	619a      	str	r2, [r3, #24]
 8005982:	1d3a      	adds	r2, r7, #4
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	61da      	str	r2, [r3, #28]
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	3320      	adds	r3, #32
 800598c:	623b      	str	r3, [r7, #32]
 800598e:	4b20      	ldr	r3, [pc, #128]	; (8005a10 <_tx_thread_time_slice+0x1b0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	429a      	cmp	r2, r3
 8005996:	d314      	bcc.n	80059c2 <_tx_thread_time_slice+0x162>
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <_tx_thread_time_slice+0x1b4>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <_tx_thread_time_slice+0x1a4>)
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <_tx_thread_time_slice+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6a3a      	ldr	r2, [r7, #32]
 80059aa:	621a      	str	r2, [r3, #32]
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <_tx_thread_time_slice+0x1bc>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <_tx_thread_time_slice+0x170>
 80059b4:	4b19      	ldr	r3, [pc, #100]	; (8005a1c <_tx_thread_time_slice+0x1bc>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a17      	ldr	r2, [pc, #92]	; (8005a18 <_tx_thread_time_slice+0x1b8>)
 80059ba:	6812      	ldr	r2, [r2, #0]
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
 80059c0:	e006      	b.n	80059d0 <_tx_thread_time_slice+0x170>
 80059c2:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <_tx_thread_time_slice+0x1a4>)
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <_tx_thread_time_slice+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	621a      	str	r2, [r3, #32]
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f383 8810 	msr	PRIMASK, r3
}
 80059da:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80059dc:	bf00      	nop
 80059de:	3738      	adds	r7, #56	; 0x38
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000e2c 	.word	0x20000e2c
 80059e8:	20000ed4 	.word	0x20000ed4
 80059ec:	20001430 	.word	0x20001430
 80059f0:	20000e44 	.word	0x20000e44
 80059f4:	20000e40 	.word	0x20000e40
 80059f8:	20000e30 	.word	0x20000e30
 80059fc:	20000014 	.word	0x20000014
 8005a00:	20000ec4 	.word	0x20000ec4
 8005a04:	20001448 	.word	0x20001448
 8005a08:	2000144c 	.word	0x2000144c
 8005a0c:	e0001004 	.word	0xe0001004
 8005a10:	20001444 	.word	0x20001444
 8005a14:	20001440 	.word	0x20001440
 8005a18:	20001434 	.word	0x20001434
 8005a1c:	20001450 	.word	0x20001450

08005a20 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a30:	617b      	str	r3, [r7, #20]
    return(posture);
 8005a32:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005a34:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a36:	b672      	cpsid	i
    return(int_posture);
 8005a38:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8005a3a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	2b04      	cmp	r3, #4
 8005a42:	d10e      	bne.n	8005a62 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8005a44:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <_tx_thread_timeout+0x74>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	4a12      	ldr	r2, [pc, #72]	; (8005a94 <_tx_thread_timeout+0x74>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f383 8810 	msr	PRIMASK, r3
}
 8005a58:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a5c:	f7ff fb56 	bl	800510c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005a60:	e013      	b.n	8005a8a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a66:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a88:	4798      	blx	r3
}
 8005a8a:	bf00      	nop
 8005a8c:	3728      	adds	r7, #40	; 0x28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000ec4 	.word	0x20000ec4

08005a98 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa2:	607b      	str	r3, [r7, #4]
    return(posture);
 8005aa4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005aa6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005aa8:	b672      	cpsid	i
    return(int_posture);
 8005aaa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005aac:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <_tx_timer_expiration_process+0x3c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a07      	ldr	r2, [pc, #28]	; (8005ad4 <_tx_timer_expiration_process+0x3c>)
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f383 8810 	msr	PRIMASK, r3
}
 8005ac2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005ac4:	4804      	ldr	r0, [pc, #16]	; (8005ad8 <_tx_timer_expiration_process+0x40>)
 8005ac6:	f7ff fb21 	bl	800510c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000ec4 	.word	0x20000ec4
 8005ad8:	20000f74 	.word	0x20000f74

08005adc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <_tx_timer_initialize+0xa8>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005ae8:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <_tx_timer_initialize+0xac>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <_tx_timer_initialize+0xb0>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005af4:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <_tx_timer_initialize+0xb4>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <_tx_timer_initialize+0xb8>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	2100      	movs	r1, #0
 8005b04:	4824      	ldr	r0, [pc, #144]	; (8005b98 <_tx_timer_initialize+0xbc>)
 8005b06:	f000 fccb 	bl	80064a0 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <_tx_timer_initialize+0xc0>)
 8005b0c:	4a22      	ldr	r2, [pc, #136]	; (8005b98 <_tx_timer_initialize+0xbc>)
 8005b0e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005b10:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <_tx_timer_initialize+0xc4>)
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <_tx_timer_initialize+0xbc>)
 8005b14:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8005b16:	4b23      	ldr	r3, [pc, #140]	; (8005ba4 <_tx_timer_initialize+0xc8>)
 8005b18:	4a23      	ldr	r2, [pc, #140]	; (8005ba8 <_tx_timer_initialize+0xcc>)
 8005b1a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005b1c:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <_tx_timer_initialize+0xc8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <_tx_timer_initialize+0xc8>)
 8005b24:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005b26:	4b21      	ldr	r3, [pc, #132]	; (8005bac <_tx_timer_initialize+0xd0>)
 8005b28:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <_tx_timer_initialize+0xd4>)
 8005b2a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <_tx_timer_initialize+0xd8>)
 8005b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b32:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005b34:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <_tx_timer_initialize+0xdc>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8005b3a:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <_tx_timer_initialize+0xd0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <_tx_timer_initialize+0xd8>)
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	491d      	ldr	r1, [pc, #116]	; (8005bb8 <_tx_timer_initialize+0xdc>)
 8005b44:	6809      	ldr	r1, [r1, #0]
 8005b46:	481c      	ldr	r0, [pc, #112]	; (8005bb8 <_tx_timer_initialize+0xdc>)
 8005b48:	6800      	ldr	r0, [r0, #0]
 8005b4a:	2400      	movs	r4, #0
 8005b4c:	9405      	str	r4, [sp, #20]
 8005b4e:	2400      	movs	r4, #0
 8005b50:	9404      	str	r4, [sp, #16]
 8005b52:	9003      	str	r0, [sp, #12]
 8005b54:	9102      	str	r1, [sp, #8]
 8005b56:	9201      	str	r2, [sp, #4]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4b18      	ldr	r3, [pc, #96]	; (8005bbc <_tx_timer_initialize+0xe0>)
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <_tx_timer_initialize+0xe4>)
 8005b5e:	4919      	ldr	r1, [pc, #100]	; (8005bc4 <_tx_timer_initialize+0xe8>)
 8005b60:	4819      	ldr	r0, [pc, #100]	; (8005bc8 <_tx_timer_initialize+0xec>)
 8005b62:	f7ff f88d 	bl	8004c80 <_tx_thread_create>
 8005b66:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e5      	bne.n	8005b3a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8005b6e:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <_tx_timer_initialize+0xf0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8005b74:	4b16      	ldr	r3, [pc, #88]	; (8005bd0 <_tx_timer_initialize+0xf4>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd90      	pop	{r4, r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000ed0 	.word	0x20000ed0
 8005b88:	20001430 	.word	0x20001430
 8005b8c:	20000ed4 	.word	0x20000ed4
 8005b90:	20000f64 	.word	0x20000f64
 8005b94:	20000f70 	.word	0x20000f70
 8005b98:	20000ed8 	.word	0x20000ed8
 8005b9c:	20000f58 	.word	0x20000f58
 8005ba0:	20000f60 	.word	0x20000f60
 8005ba4:	20000f5c 	.word	0x20000f5c
 8005ba8:	20000f54 	.word	0x20000f54
 8005bac:	20001024 	.word	0x20001024
 8005bb0:	20001030 	.word	0x20001030
 8005bb4:	20001028 	.word	0x20001028
 8005bb8:	2000102c 	.word	0x2000102c
 8005bbc:	4154494d 	.word	0x4154494d
 8005bc0:	08005d09 	.word	0x08005d09
 8005bc4:	0800ae34 	.word	0x0800ae34
 8005bc8:	20000f74 	.word	0x20000f74
 8005bcc:	20000f68 	.word	0x20000f68
 8005bd0:	20000f6c 	.word	0x20000f6c

08005bd4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b089      	sub	sp, #36	; 0x24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d04a      	beq.n	8005c7e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bee:	d046      	beq.n	8005c7e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d142      	bne.n	8005c7e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d902      	bls.n	8005c04 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8005bfe:	231f      	movs	r3, #31
 8005c00:	61bb      	str	r3, [r7, #24]
 8005c02:	e002      	b.n	8005c0a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005c0a:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <_tx_timer_system_activate+0xb8>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005c16:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <_tx_timer_system_activate+0xbc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d30b      	bcc.n	8005c38 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <_tx_timer_system_activate+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	109b      	asrs	r3, r3, #2
 8005c2a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <_tx_timer_system_activate+0xc0>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d109      	bne.n	8005c54 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	e011      	b.n	8005c78 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8005c7e:	bf00      	nop
 8005c80:	3724      	adds	r7, #36	; 0x24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000f60 	.word	0x20000f60
 8005c90:	20000f5c 	.word	0x20000f5c
 8005c94:	20000f58 	.word	0x20000f58

08005c98 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d026      	beq.n	8005cfa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d108      	bne.n	8005ccc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d117      	bne.n	8005cf4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	e013      	b.n	8005cf4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d105      	bne.n	8005cf4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
    }
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b098      	sub	sp, #96	; 0x60
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005d10:	2300      	movs	r3, #0
 8005d12:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a73      	ldr	r2, [pc, #460]	; (8005ee4 <_tx_timer_thread_entry+0x1dc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	f040 80de 	bne.w	8005eda <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d22:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d28:	b672      	cpsid	i
    return(int_posture);
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005d2c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8005d2e:	4b6e      	ldr	r3, [pc, #440]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f107 020c 	add.w	r2, r7, #12
 8005d42:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005d44:	4b68      	ldr	r3, [pc, #416]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005d4c:	4b66      	ldr	r3, [pc, #408]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4a65      	ldr	r2, [pc, #404]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d54:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005d56:	4b64      	ldr	r3, [pc, #400]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	4b64      	ldr	r3, [pc, #400]	; (8005eec <_tx_timer_thread_entry+0x1e4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d103      	bne.n	8005d6a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005d62:	4b63      	ldr	r3, [pc, #396]	; (8005ef0 <_tx_timer_thread_entry+0x1e8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a60      	ldr	r2, [pc, #384]	; (8005ee8 <_tx_timer_thread_entry+0x1e0>)
 8005d68:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005d6a:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <_tx_timer_thread_entry+0x1ec>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d86:	b672      	cpsid	i
    return(int_posture);
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005d8a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005d8c:	e07f      	b.n	8005e8e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d102      	bne.n	8005daa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e00e      	b.n	8005dc8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dba:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dbe:	f107 020c 	add.w	r2, r7, #12
 8005dc2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d911      	bls.n	8005df4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dda:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de2:	f107 0208 	add.w	r2, r7, #8
 8005de6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dec:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	e01a      	b.n	8005e2a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e12:	f107 0208 	add.w	r2, r7, #8
 8005e16:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e1c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	e002      	b.n	8005e2a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e26:	2200      	movs	r2, #0
 8005e28:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005e2a:	4a33      	ldr	r2, [pc, #204]	; (8005ef8 <_tx_timer_thread_entry+0x1f0>)
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	f383 8810 	msr	PRIMASK, r3
}
 8005e3a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8005e3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8005e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e44:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005e46:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e48:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e52:	b672      	cpsid	i
    return(int_posture);
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005e56:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005e58:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <_tx_timer_thread_entry+0x1f0>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d105      	bne.n	8005e72 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	2200      	movs	r2, #0
 8005e6a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005e6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005e6e:	f7ff feb1 	bl	8005bd4 <_tx_timer_system_activate>
 8005e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e74:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e82:	623b      	str	r3, [r7, #32]
    return(posture);
 8005e84:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005e86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e88:	b672      	cpsid	i
    return(int_posture);
 8005e8a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f47f af7c 	bne.w	8005d8e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005e96:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <_tx_timer_thread_entry+0x1ec>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d116      	bne.n	8005ecc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005e9e:	4b17      	ldr	r3, [pc, #92]	; (8005efc <_tx_timer_thread_entry+0x1f4>)
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	2201      	movs	r2, #1
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <_tx_timer_thread_entry+0x1f8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a12      	ldr	r2, [pc, #72]	; (8005f00 <_tx_timer_thread_entry+0x1f8>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005ec4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005ec6:	f7ff fadb 	bl	8005480 <_tx_thread_system_suspend>
 8005eca:	e728      	b.n	8005d1e <_tx_timer_thread_entry+0x16>
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ece:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f383 8810 	msr	PRIMASK, r3
}
 8005ed6:	bf00      	nop
            TX_DISABLE
 8005ed8:	e721      	b.n	8005d1e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005eda:	bf00      	nop
 8005edc:	3760      	adds	r7, #96	; 0x60
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	4154494d 	.word	0x4154494d
 8005ee8:	20000f60 	.word	0x20000f60
 8005eec:	20000f5c 	.word	0x20000f5c
 8005ef0:	20000f58 	.word	0x20000f58
 8005ef4:	20000f64 	.word	0x20000f64
 8005ef8:	20000f70 	.word	0x20000f70
 8005efc:	20000f74 	.word	0x20000f74
 8005f00:	20000ec4 	.word	0x20000ec4

08005f04 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <_tx_trace_initialize+0x34>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <_tx_trace_initialize+0x38>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <_tx_trace_initialize+0x3c>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <_tx_trace_initialize+0x40>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8005f20:	4b09      	ldr	r3, [pc, #36]	; (8005f48 <_tx_trace_initialize+0x44>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <_tx_trace_initialize+0x48>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8005f2c:	bf00      	nop
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20001434 	.word	0x20001434
 8005f3c:	20001438 	.word	0x20001438
 8005f40:	2000143c 	.word	0x2000143c
 8005f44:	20001440 	.word	0x20001440
 8005f48:	20001444 	.word	0x20001444
 8005f4c:	20001448 	.word	0x20001448

08005f50 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b08d      	sub	sp, #52	; 0x34
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8005f60:	4b6d      	ldr	r3, [pc, #436]	; (8006118 <_tx_trace_object_register+0x1c8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80d0 	beq.w	800610a <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 8005f6a:	4b6c      	ldr	r3, [pc, #432]	; (800611c <_tx_trace_object_register+0x1cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8005f70:	4b6b      	ldr	r3, [pc, #428]	; (8006120 <_tx_trace_object_register+0x1d0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 80c8 	beq.w	800610a <_tx_trace_object_register+0x1ba>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8005f82:	4b68      	ldr	r3, [pc, #416]	; (8006124 <_tx_trace_object_register+0x1d4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005f88:	4b63      	ldr	r3, [pc, #396]	; (8006118 <_tx_trace_object_register+0x1c8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8005f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	461a      	mov	r2, r3
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d103      	bne.n	8005fc6 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d02d      	beq.n	8006028 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d11a      	bne.n	800600a <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8005fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d102      	bne.n	8005fe2 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	e013      	b.n	800600a <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005fe2:	4b4d      	ldr	r3, [pc, #308]	; (8006118 <_tx_trace_object_register+0x1c8>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005fe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	3301      	adds	r3, #1
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8006010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	429a      	cmp	r2, r3
 8006016:	d301      	bcc.n	800601c <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8006018:	2300      	movs	r3, #0
 800601a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <_tx_trace_object_register+0x1d4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006022:	429a      	cmp	r2, r3
 8006024:	d1b0      	bne.n	8005f88 <_tx_trace_object_register+0x38>
 8006026:	e000      	b.n	800602a <_tx_trace_object_register+0xda>
                    break;
 8006028:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800602a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	429a      	cmp	r2, r3
 8006030:	d26b      	bcs.n	800610a <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <_tx_trace_object_register+0x1d0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3b01      	subs	r3, #1
 8006038:	4a39      	ldr	r2, [pc, #228]	; (8006120 <_tx_trace_object_register+0x1d0>)
 800603a:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 800603c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603e:	3301      	adds	r3, #1
 8006040:	6a3a      	ldr	r2, [r7, #32]
 8006042:	429a      	cmp	r2, r3
 8006044:	d904      	bls.n	8006050 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	3301      	adds	r3, #1
 800604a:	4a36      	ldr	r2, [pc, #216]	; (8006124 <_tx_trace_object_register+0x1d4>)
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e002      	b.n	8006056 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8006050:	4b34      	ldr	r3, [pc, #208]	; (8006124 <_tx_trace_object_register+0x1d4>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <_tx_trace_object_register+0x1c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	461a      	mov	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	4413      	add	r3, r2
 800606c:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	7bfa      	ldrb	r2, [r7, #15]
 800607c:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608e:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8006090:	2300      	movs	r3, #0
 8006092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006094:	e014      	b.n	80060c0 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	4413      	add	r3, r2
 80060a0:	61fb      	str	r3, [r7, #28]

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	4413      	add	r3, r2
 80060ac:	3310      	adds	r3, #16
 80060ae:	460a      	mov	r2, r1
 80060b0:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	3301      	adds	r3, #1
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b1e      	cmp	r3, #30
 80060c4:	d9e7      	bls.n	8006096 <_tx_trace_object_register+0x146>
 80060c6:	e000      	b.n	80060ca <_tx_trace_object_register+0x17a>
                    {
                        break;
 80060c8:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	4413      	add	r3, r2
 80060d0:	3310      	adds	r3, #16
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d110      	bne.n	80060fe <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 80060fc:	e005      	b.n	800610a <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2200      	movs	r2, #0
 8006102:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2200      	movs	r2, #0
 8006108:	70da      	strb	r2, [r3, #3]
}
 800610a:	bf00      	nop
 800610c:	3734      	adds	r7, #52	; 0x34
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20001438 	.word	0x20001438
 800611c:	20001454 	.word	0x20001454
 8006120:	20001458 	.word	0x20001458
 8006124:	2000145c 	.word	0x2000145c

08006128 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b092      	sub	sp, #72	; 0x48
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006136:	2300      	movs	r3, #0
 8006138:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d102      	bne.n	8006146 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006140:	2302      	movs	r3, #2
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
 8006144:	e075      	b.n	8006232 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	2b34      	cmp	r3, #52	; 0x34
 800614a:	d002      	beq.n	8006152 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800614c:	2302      	movs	r3, #2
 800614e:	647b      	str	r3, [r7, #68]	; 0x44
 8006150:	e06f      	b.n	8006232 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800615c:	b672      	cpsid	i
    return(int_posture);
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006162:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <_txe_byte_pool_create+0x128>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3301      	adds	r3, #1
 8006168:	4a39      	ldr	r2, [pc, #228]	; (8006250 <_txe_byte_pool_create+0x128>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	f383 8810 	msr	PRIMASK, r3
}
 8006176:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8006178:	4b36      	ldr	r3, [pc, #216]	; (8006254 <_txe_byte_pool_create+0x12c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	643b      	str	r3, [r7, #64]	; 0x40
 8006182:	e009      	b.n	8006198 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006188:	429a      	cmp	r2, r3
 800618a:	d00b      	beq.n	80061a4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800618c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8006192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006194:	3301      	adds	r3, #1
 8006196:	643b      	str	r3, [r7, #64]	; 0x40
 8006198:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <_txe_byte_pool_create+0x130>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800619e:	429a      	cmp	r2, r3
 80061a0:	d3f0      	bcc.n	8006184 <_txe_byte_pool_create+0x5c>
 80061a2:	e000      	b.n	80061a6 <_txe_byte_pool_create+0x7e>
                break;
 80061a4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061a6:	f3ef 8310 	mrs	r3, PRIMASK
 80061aa:	623b      	str	r3, [r7, #32]
    return(posture);
 80061ac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80061ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80061b0:	b672      	cpsid	i
    return(int_posture);
 80061b2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80061b4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80061b6:	4b26      	ldr	r3, [pc, #152]	; (8006250 <_txe_byte_pool_create+0x128>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	4a24      	ldr	r2, [pc, #144]	; (8006250 <_txe_byte_pool_create+0x128>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80061cc:	f7fe ff64 	bl	8005098 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d102      	bne.n	80061de <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80061d8:	2302      	movs	r3, #2
 80061da:	647b      	str	r3, [r7, #68]	; 0x44
 80061dc:	e029      	b.n	8006232 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80061e4:	2303      	movs	r3, #3
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
 80061e8:	e023      	b.n	8006232 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b63      	cmp	r3, #99	; 0x63
 80061ee:	d802      	bhi.n	80061f6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80061f0:	2305      	movs	r3, #5
 80061f2:	647b      	str	r3, [r7, #68]	; 0x44
 80061f4:	e01d      	b.n	8006232 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80061f6:	4b19      	ldr	r3, [pc, #100]	; (800625c <_txe_byte_pool_create+0x134>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80061fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <_txe_byte_pool_create+0x138>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006204:	2313      	movs	r3, #19
 8006206:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006208:	f3ef 8305 	mrs	r3, IPSR
 800620c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800620e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006210:	4b14      	ldr	r3, [pc, #80]	; (8006264 <_txe_byte_pool_create+0x13c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4313      	orrs	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800621a:	f3ef 8305 	mrs	r3, IPSR
 800621e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006220:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006222:	4b10      	ldr	r3, [pc, #64]	; (8006264 <_txe_byte_pool_create+0x13c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4313      	orrs	r3, r2
 8006228:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800622c:	d201      	bcs.n	8006232 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800622e:	2313      	movs	r3, #19
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7fe fb8a 	bl	8004958 <_tx_byte_pool_create>
 8006244:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8006246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006248:	4618      	mov	r0, r3
 800624a:	3748      	adds	r7, #72	; 0x48
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20000ec4 	.word	0x20000ec4
 8006254:	20000e1c 	.word	0x20000e1c
 8006258:	20000e20 	.word	0x20000e20
 800625c:	20000e2c 	.word	0x20000e2c
 8006260:	20000f74 	.word	0x20000f74
 8006264:	20000014 	.word	0x20000014

08006268 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b09a      	sub	sp, #104	; 0x68
 800626c:	af06      	add	r7, sp, #24
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006276:	2300      	movs	r3, #0
 8006278:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8006280:	230e      	movs	r3, #14
 8006282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006284:	e0bb      	b.n	80063fe <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8006286:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006288:	2bb0      	cmp	r3, #176	; 0xb0
 800628a:	d002      	beq.n	8006292 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800628c:	230e      	movs	r3, #14
 800628e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006290:	e0b5      	b.n	80063fe <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006292:	f3ef 8310 	mrs	r3, PRIMASK
 8006296:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800629c:	b672      	cpsid	i
    return(int_posture);
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80062a0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80062a2:	4b64      	ldr	r3, [pc, #400]	; (8006434 <_txe_thread_create+0x1cc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a62      	ldr	r2, [pc, #392]	; (8006434 <_txe_thread_create+0x1cc>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	f383 8810 	msr	PRIMASK, r3
}
 80062b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80062bc:	4b5e      	ldr	r3, [pc, #376]	; (8006438 <_txe_thread_create+0x1d0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80062c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80062c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062c8:	3b01      	subs	r3, #1
 80062ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062cc:	4413      	add	r3, r2
 80062ce:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44
 80062d8:	e02b      	b.n	8006332 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	429a      	cmp	r2, r3
 80062e0:	d101      	bne.n	80062e6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80062e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d028      	beq.n	800633e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d308      	bcc.n	8006308 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80062f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d203      	bcs.n	8006308 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8006300:	2300      	movs	r3, #0
 8006302:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006304:	2301      	movs	r3, #1
 8006306:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8006308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800630e:	429a      	cmp	r2, r3
 8006310:	d308      	bcc.n	8006324 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8006312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006318:	429a      	cmp	r2, r3
 800631a:	d203      	bcs.n	8006324 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800632c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800632e:	3301      	adds	r3, #1
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
 8006332:	4b42      	ldr	r3, [pc, #264]	; (800643c <_txe_thread_create+0x1d4>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006338:	429a      	cmp	r2, r3
 800633a:	d3ce      	bcc.n	80062da <_txe_thread_create+0x72>
 800633c:	e000      	b.n	8006340 <_txe_thread_create+0xd8>
                break;
 800633e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006340:	f3ef 8310 	mrs	r3, PRIMASK
 8006344:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006346:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006348:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800634a:	b672      	cpsid	i
    return(int_posture);
 800634c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006350:	4b38      	ldr	r3, [pc, #224]	; (8006434 <_txe_thread_create+0x1cc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3b01      	subs	r3, #1
 8006356:	4a37      	ldr	r2, [pc, #220]	; (8006434 <_txe_thread_create+0x1cc>)
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f383 8810 	msr	PRIMASK, r3
}
 8006364:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006366:	f7fe fe97 	bl	8005098 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636e:	429a      	cmp	r2, r3
 8006370:	d102      	bne.n	8006378 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8006372:	230e      	movs	r3, #14
 8006374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006376:	e042      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8006378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800637e:	2303      	movs	r3, #3
 8006380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006382:	e03c      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800638a:	2303      	movs	r3, #3
 800638c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800638e:	e036      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8006390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006392:	2bc7      	cmp	r3, #199	; 0xc7
 8006394:	d802      	bhi.n	800639c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8006396:	2305      	movs	r3, #5
 8006398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800639a:	e030      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800639c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639e:	2b1f      	cmp	r3, #31
 80063a0:	d902      	bls.n	80063a8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80063a2:	230f      	movs	r3, #15
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a6:	e02a      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80063a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80063aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d902      	bls.n	80063b6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80063b0:	2318      	movs	r3, #24
 80063b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063b4:	e023      	b.n	80063fe <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d902      	bls.n	80063c2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80063bc:	2310      	movs	r3, #16
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c0:	e01d      	b.n	80063fe <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80063c2:	4b1f      	ldr	r3, [pc, #124]	; (8006440 <_txe_thread_create+0x1d8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <_txe_thread_create+0x1dc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d101      	bne.n	80063d4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80063d0:	2313      	movs	r3, #19
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80063d4:	f3ef 8305 	mrs	r3, IPSR
 80063d8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80063da:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80063dc:	4b1a      	ldr	r3, [pc, #104]	; (8006448 <_txe_thread_create+0x1e0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80063e6:	f3ef 8305 	mrs	r3, IPSR
 80063ea:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80063ec:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80063ee:	4b16      	ldr	r3, [pc, #88]	; (8006448 <_txe_thread_create+0x1e0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80063f8:	d201      	bcs.n	80063fe <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80063fa:	2313      	movs	r3, #19
 80063fc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80063fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d112      	bne.n	800642a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8006404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800640e:	9303      	str	r3, [sp, #12]
 8006410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7fe fc2c 	bl	8004c80 <_tx_thread_create>
 8006428:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800642a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800642c:	4618      	mov	r0, r3
 800642e:	3750      	adds	r7, #80	; 0x50
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000ec4 	.word	0x20000ec4
 8006438:	20000e34 	.word	0x20000e34
 800643c:	20000e38 	.word	0x20000e38
 8006440:	20000e2c 	.word	0x20000e2c
 8006444:	20000f74 	.word	0x20000f74
 8006448:	20000014 	.word	0x20000014

0800644c <__errno>:
 800644c:	4b01      	ldr	r3, [pc, #4]	; (8006454 <__errno+0x8>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000018 	.word	0x20000018

08006458 <__libc_init_array>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4d0d      	ldr	r5, [pc, #52]	; (8006490 <__libc_init_array+0x38>)
 800645c:	4c0d      	ldr	r4, [pc, #52]	; (8006494 <__libc_init_array+0x3c>)
 800645e:	1b64      	subs	r4, r4, r5
 8006460:	10a4      	asrs	r4, r4, #2
 8006462:	2600      	movs	r6, #0
 8006464:	42a6      	cmp	r6, r4
 8006466:	d109      	bne.n	800647c <__libc_init_array+0x24>
 8006468:	4d0b      	ldr	r5, [pc, #44]	; (8006498 <__libc_init_array+0x40>)
 800646a:	4c0c      	ldr	r4, [pc, #48]	; (800649c <__libc_init_array+0x44>)
 800646c:	f004 fc90 	bl	800ad90 <_init>
 8006470:	1b64      	subs	r4, r4, r5
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	2600      	movs	r6, #0
 8006476:	42a6      	cmp	r6, r4
 8006478:	d105      	bne.n	8006486 <__libc_init_array+0x2e>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006480:	4798      	blx	r3
 8006482:	3601      	adds	r6, #1
 8006484:	e7ee      	b.n	8006464 <__libc_init_array+0xc>
 8006486:	f855 3b04 	ldr.w	r3, [r5], #4
 800648a:	4798      	blx	r3
 800648c:	3601      	adds	r6, #1
 800648e:	e7f2      	b.n	8006476 <__libc_init_array+0x1e>
 8006490:	0800b30c 	.word	0x0800b30c
 8006494:	0800b30c 	.word	0x0800b30c
 8006498:	0800b30c 	.word	0x0800b30c
 800649c:	0800b310 	.word	0x0800b310

080064a0 <memset>:
 80064a0:	4402      	add	r2, r0
 80064a2:	4603      	mov	r3, r0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <__cvt>:
 80064b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	ec55 4b10 	vmov	r4, r5, d0
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	460e      	mov	r6, r1
 80064bc:	4619      	mov	r1, r3
 80064be:	462b      	mov	r3, r5
 80064c0:	bfbb      	ittet	lt
 80064c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064c6:	461d      	movlt	r5, r3
 80064c8:	2300      	movge	r3, #0
 80064ca:	232d      	movlt	r3, #45	; 0x2d
 80064cc:	700b      	strb	r3, [r1, #0]
 80064ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064d4:	4691      	mov	r9, r2
 80064d6:	f023 0820 	bic.w	r8, r3, #32
 80064da:	bfbc      	itt	lt
 80064dc:	4622      	movlt	r2, r4
 80064de:	4614      	movlt	r4, r2
 80064e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064e4:	d005      	beq.n	80064f2 <__cvt+0x42>
 80064e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064ea:	d100      	bne.n	80064ee <__cvt+0x3e>
 80064ec:	3601      	adds	r6, #1
 80064ee:	2102      	movs	r1, #2
 80064f0:	e000      	b.n	80064f4 <__cvt+0x44>
 80064f2:	2103      	movs	r1, #3
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	ab02      	add	r3, sp, #8
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	ec45 4b10 	vmov	d0, r4, r5
 8006500:	4653      	mov	r3, sl
 8006502:	4632      	mov	r2, r6
 8006504:	f001 fdac 	bl	8008060 <_dtoa_r>
 8006508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800650c:	4607      	mov	r7, r0
 800650e:	d102      	bne.n	8006516 <__cvt+0x66>
 8006510:	f019 0f01 	tst.w	r9, #1
 8006514:	d022      	beq.n	800655c <__cvt+0xac>
 8006516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651a:	eb07 0906 	add.w	r9, r7, r6
 800651e:	d110      	bne.n	8006542 <__cvt+0x92>
 8006520:	783b      	ldrb	r3, [r7, #0]
 8006522:	2b30      	cmp	r3, #48	; 0x30
 8006524:	d10a      	bne.n	800653c <__cvt+0x8c>
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	4620      	mov	r0, r4
 800652c:	4629      	mov	r1, r5
 800652e:	f7fa fc0b 	bl	8000d48 <__aeabi_dcmpeq>
 8006532:	b918      	cbnz	r0, 800653c <__cvt+0x8c>
 8006534:	f1c6 0601 	rsb	r6, r6, #1
 8006538:	f8ca 6000 	str.w	r6, [sl]
 800653c:	f8da 3000 	ldr.w	r3, [sl]
 8006540:	4499      	add	r9, r3
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa fbfd 	bl	8000d48 <__aeabi_dcmpeq>
 800654e:	b108      	cbz	r0, 8006554 <__cvt+0xa4>
 8006550:	f8cd 900c 	str.w	r9, [sp, #12]
 8006554:	2230      	movs	r2, #48	; 0x30
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	454b      	cmp	r3, r9
 800655a:	d307      	bcc.n	800656c <__cvt+0xbc>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006560:	1bdb      	subs	r3, r3, r7
 8006562:	4638      	mov	r0, r7
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	b004      	add	sp, #16
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e7f0      	b.n	8006556 <__cvt+0xa6>

08006574 <__exponent>:
 8006574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006576:	4603      	mov	r3, r0
 8006578:	2900      	cmp	r1, #0
 800657a:	bfb8      	it	lt
 800657c:	4249      	neglt	r1, r1
 800657e:	f803 2b02 	strb.w	r2, [r3], #2
 8006582:	bfb4      	ite	lt
 8006584:	222d      	movlt	r2, #45	; 0x2d
 8006586:	222b      	movge	r2, #43	; 0x2b
 8006588:	2909      	cmp	r1, #9
 800658a:	7042      	strb	r2, [r0, #1]
 800658c:	dd2a      	ble.n	80065e4 <__exponent+0x70>
 800658e:	f10d 0407 	add.w	r4, sp, #7
 8006592:	46a4      	mov	ip, r4
 8006594:	270a      	movs	r7, #10
 8006596:	46a6      	mov	lr, r4
 8006598:	460a      	mov	r2, r1
 800659a:	fb91 f6f7 	sdiv	r6, r1, r7
 800659e:	fb07 1516 	mls	r5, r7, r6, r1
 80065a2:	3530      	adds	r5, #48	; 0x30
 80065a4:	2a63      	cmp	r2, #99	; 0x63
 80065a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80065aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065ae:	4631      	mov	r1, r6
 80065b0:	dcf1      	bgt.n	8006596 <__exponent+0x22>
 80065b2:	3130      	adds	r1, #48	; 0x30
 80065b4:	f1ae 0502 	sub.w	r5, lr, #2
 80065b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065bc:	1c44      	adds	r4, r0, #1
 80065be:	4629      	mov	r1, r5
 80065c0:	4561      	cmp	r1, ip
 80065c2:	d30a      	bcc.n	80065da <__exponent+0x66>
 80065c4:	f10d 0209 	add.w	r2, sp, #9
 80065c8:	eba2 020e 	sub.w	r2, r2, lr
 80065cc:	4565      	cmp	r5, ip
 80065ce:	bf88      	it	hi
 80065d0:	2200      	movhi	r2, #0
 80065d2:	4413      	add	r3, r2
 80065d4:	1a18      	subs	r0, r3, r0
 80065d6:	b003      	add	sp, #12
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065e2:	e7ed      	b.n	80065c0 <__exponent+0x4c>
 80065e4:	2330      	movs	r3, #48	; 0x30
 80065e6:	3130      	adds	r1, #48	; 0x30
 80065e8:	7083      	strb	r3, [r0, #2]
 80065ea:	70c1      	strb	r1, [r0, #3]
 80065ec:	1d03      	adds	r3, r0, #4
 80065ee:	e7f1      	b.n	80065d4 <__exponent+0x60>

080065f0 <_printf_float>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b02 	vpush	{d8}
 80065f8:	b08d      	sub	sp, #52	; 0x34
 80065fa:	460c      	mov	r4, r1
 80065fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006600:	4616      	mov	r6, r2
 8006602:	461f      	mov	r7, r3
 8006604:	4605      	mov	r5, r0
 8006606:	f002 fe89 	bl	800931c <_localeconv_r>
 800660a:	f8d0 a000 	ldr.w	sl, [r0]
 800660e:	4650      	mov	r0, sl
 8006610:	f7f9 ff1a 	bl	8000448 <strlen>
 8006614:	2300      	movs	r3, #0
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006624:	3307      	adds	r3, #7
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	f103 0208 	add.w	r2, r3, #8
 800662e:	f8c8 2000 	str.w	r2, [r8]
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800663a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800663e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006642:	9307      	str	r3, [sp, #28]
 8006644:	f8cd 8018 	str.w	r8, [sp, #24]
 8006648:	ee08 0a10 	vmov	s16, r0
 800664c:	4b9f      	ldr	r3, [pc, #636]	; (80068cc <_printf_float+0x2dc>)
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	f7fa fba9 	bl	8000dac <__aeabi_dcmpun>
 800665a:	bb88      	cbnz	r0, 80066c0 <_printf_float+0xd0>
 800665c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006660:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <_printf_float+0x2dc>)
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	f7fa fb83 	bl	8000d70 <__aeabi_dcmple>
 800666a:	bb48      	cbnz	r0, 80066c0 <_printf_float+0xd0>
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7fa fb72 	bl	8000d5c <__aeabi_dcmplt>
 8006678:	b110      	cbz	r0, 8006680 <_printf_float+0x90>
 800667a:	232d      	movs	r3, #45	; 0x2d
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006680:	4b93      	ldr	r3, [pc, #588]	; (80068d0 <_printf_float+0x2e0>)
 8006682:	4894      	ldr	r0, [pc, #592]	; (80068d4 <_printf_float+0x2e4>)
 8006684:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006688:	bf94      	ite	ls
 800668a:	4698      	movls	r8, r3
 800668c:	4680      	movhi	r8, r0
 800668e:	2303      	movs	r3, #3
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	f023 0204 	bic.w	r2, r3, #4
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	9700      	str	r7, [sp, #0]
 80066a0:	4633      	mov	r3, r6
 80066a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f9d8 	bl	8006a5c <_printf_common>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f040 8090 	bne.w	80067d2 <_printf_float+0x1e2>
 80066b2:	f04f 30ff 	mov.w	r0, #4294967295
 80066b6:	b00d      	add	sp, #52	; 0x34
 80066b8:	ecbd 8b02 	vpop	{d8}
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7fa fb70 	bl	8000dac <__aeabi_dcmpun>
 80066cc:	b140      	cbz	r0, 80066e0 <_printf_float+0xf0>
 80066ce:	464b      	mov	r3, r9
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfbc      	itt	lt
 80066d4:	232d      	movlt	r3, #45	; 0x2d
 80066d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066da:	487f      	ldr	r0, [pc, #508]	; (80068d8 <_printf_float+0x2e8>)
 80066dc:	4b7f      	ldr	r3, [pc, #508]	; (80068dc <_printf_float+0x2ec>)
 80066de:	e7d1      	b.n	8006684 <_printf_float+0x94>
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066e6:	9206      	str	r2, [sp, #24]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	d13f      	bne.n	800676c <_printf_float+0x17c>
 80066ec:	2306      	movs	r3, #6
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	9b05      	ldr	r3, [sp, #20]
 80066f2:	6861      	ldr	r1, [r4, #4]
 80066f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066f8:	2300      	movs	r3, #0
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	ab0a      	add	r3, sp, #40	; 0x28
 80066fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006702:	ab09      	add	r3, sp, #36	; 0x24
 8006704:	ec49 8b10 	vmov	d0, r8, r9
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	6022      	str	r2, [r4, #0]
 800670c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006710:	4628      	mov	r0, r5
 8006712:	f7ff fecd 	bl	80064b0 <__cvt>
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671a:	2b47      	cmp	r3, #71	; 0x47
 800671c:	4680      	mov	r8, r0
 800671e:	d108      	bne.n	8006732 <_printf_float+0x142>
 8006720:	1cc8      	adds	r0, r1, #3
 8006722:	db02      	blt.n	800672a <_printf_float+0x13a>
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	dd41      	ble.n	80067ae <_printf_float+0x1be>
 800672a:	f1ab 0b02 	sub.w	fp, fp, #2
 800672e:	fa5f fb8b 	uxtb.w	fp, fp
 8006732:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006736:	d820      	bhi.n	800677a <_printf_float+0x18a>
 8006738:	3901      	subs	r1, #1
 800673a:	465a      	mov	r2, fp
 800673c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006740:	9109      	str	r1, [sp, #36]	; 0x24
 8006742:	f7ff ff17 	bl	8006574 <__exponent>
 8006746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006748:	1813      	adds	r3, r2, r0
 800674a:	2a01      	cmp	r2, #1
 800674c:	4681      	mov	r9, r0
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	dc02      	bgt.n	8006758 <_printf_float+0x168>
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	07d2      	lsls	r2, r2, #31
 8006756:	d501      	bpl.n	800675c <_printf_float+0x16c>
 8006758:	3301      	adds	r3, #1
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006760:	2b00      	cmp	r3, #0
 8006762:	d09c      	beq.n	800669e <_printf_float+0xae>
 8006764:	232d      	movs	r3, #45	; 0x2d
 8006766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800676a:	e798      	b.n	800669e <_printf_float+0xae>
 800676c:	9a06      	ldr	r2, [sp, #24]
 800676e:	2a47      	cmp	r2, #71	; 0x47
 8006770:	d1be      	bne.n	80066f0 <_printf_float+0x100>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1bc      	bne.n	80066f0 <_printf_float+0x100>
 8006776:	2301      	movs	r3, #1
 8006778:	e7b9      	b.n	80066ee <_printf_float+0xfe>
 800677a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800677e:	d118      	bne.n	80067b2 <_printf_float+0x1c2>
 8006780:	2900      	cmp	r1, #0
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	dd0b      	ble.n	800679e <_printf_float+0x1ae>
 8006786:	6121      	str	r1, [r4, #16]
 8006788:	b913      	cbnz	r3, 8006790 <_printf_float+0x1a0>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d0      	lsls	r0, r2, #31
 800678e:	d502      	bpl.n	8006796 <_printf_float+0x1a6>
 8006790:	3301      	adds	r3, #1
 8006792:	440b      	add	r3, r1
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	65a1      	str	r1, [r4, #88]	; 0x58
 8006798:	f04f 0900 	mov.w	r9, #0
 800679c:	e7de      	b.n	800675c <_printf_float+0x16c>
 800679e:	b913      	cbnz	r3, 80067a6 <_printf_float+0x1b6>
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	07d2      	lsls	r2, r2, #31
 80067a4:	d501      	bpl.n	80067aa <_printf_float+0x1ba>
 80067a6:	3302      	adds	r3, #2
 80067a8:	e7f4      	b.n	8006794 <_printf_float+0x1a4>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7f2      	b.n	8006794 <_printf_float+0x1a4>
 80067ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b4:	4299      	cmp	r1, r3
 80067b6:	db05      	blt.n	80067c4 <_printf_float+0x1d4>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	6121      	str	r1, [r4, #16]
 80067bc:	07d8      	lsls	r0, r3, #31
 80067be:	d5ea      	bpl.n	8006796 <_printf_float+0x1a6>
 80067c0:	1c4b      	adds	r3, r1, #1
 80067c2:	e7e7      	b.n	8006794 <_printf_float+0x1a4>
 80067c4:	2900      	cmp	r1, #0
 80067c6:	bfd4      	ite	le
 80067c8:	f1c1 0202 	rsble	r2, r1, #2
 80067cc:	2201      	movgt	r2, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	e7e0      	b.n	8006794 <_printf_float+0x1a4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	055a      	lsls	r2, r3, #21
 80067d6:	d407      	bmi.n	80067e8 <_printf_float+0x1f8>
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	4642      	mov	r2, r8
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	d12c      	bne.n	8006840 <_printf_float+0x250>
 80067e6:	e764      	b.n	80066b2 <_printf_float+0xc2>
 80067e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067ec:	f240 80e0 	bls.w	80069b0 <_printf_float+0x3c0>
 80067f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa faa6 	bl	8000d48 <__aeabi_dcmpeq>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d034      	beq.n	800686a <_printf_float+0x27a>
 8006800:	4a37      	ldr	r2, [pc, #220]	; (80068e0 <_printf_float+0x2f0>)
 8006802:	2301      	movs	r3, #1
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af51 	beq.w	80066b2 <_printf_float+0xc2>
 8006810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006814:	429a      	cmp	r2, r3
 8006816:	db02      	blt.n	800681e <_printf_float+0x22e>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07d8      	lsls	r0, r3, #31
 800681c:	d510      	bpl.n	8006840 <_printf_float+0x250>
 800681e:	ee18 3a10 	vmov	r3, s16
 8006822:	4652      	mov	r2, sl
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af41 	beq.w	80066b2 <_printf_float+0xc2>
 8006830:	f04f 0800 	mov.w	r8, #0
 8006834:	f104 091a 	add.w	r9, r4, #26
 8006838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683a:	3b01      	subs	r3, #1
 800683c:	4543      	cmp	r3, r8
 800683e:	dc09      	bgt.n	8006854 <_printf_float+0x264>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	079b      	lsls	r3, r3, #30
 8006844:	f100 8105 	bmi.w	8006a52 <_printf_float+0x462>
 8006848:	68e0      	ldr	r0, [r4, #12]
 800684a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684c:	4298      	cmp	r0, r3
 800684e:	bfb8      	it	lt
 8006850:	4618      	movlt	r0, r3
 8006852:	e730      	b.n	80066b6 <_printf_float+0xc6>
 8006854:	2301      	movs	r3, #1
 8006856:	464a      	mov	r2, r9
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af27 	beq.w	80066b2 <_printf_float+0xc2>
 8006864:	f108 0801 	add.w	r8, r8, #1
 8006868:	e7e6      	b.n	8006838 <_printf_float+0x248>
 800686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc39      	bgt.n	80068e4 <_printf_float+0x2f4>
 8006870:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <_printf_float+0x2f0>)
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af19 	beq.w	80066b2 <_printf_float+0xc2>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	4313      	orrs	r3, r2
 8006886:	d102      	bne.n	800688e <_printf_float+0x29e>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07d9      	lsls	r1, r3, #31
 800688c:	d5d8      	bpl.n	8006840 <_printf_float+0x250>
 800688e:	ee18 3a10 	vmov	r3, s16
 8006892:	4652      	mov	r2, sl
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af09 	beq.w	80066b2 <_printf_float+0xc2>
 80068a0:	f04f 0900 	mov.w	r9, #0
 80068a4:	f104 0a1a 	add.w	sl, r4, #26
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	425b      	negs	r3, r3
 80068ac:	454b      	cmp	r3, r9
 80068ae:	dc01      	bgt.n	80068b4 <_printf_float+0x2c4>
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	e792      	b.n	80067da <_printf_float+0x1ea>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4652      	mov	r2, sl
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f aef7 	beq.w	80066b2 <_printf_float+0xc2>
 80068c4:	f109 0901 	add.w	r9, r9, #1
 80068c8:	e7ee      	b.n	80068a8 <_printf_float+0x2b8>
 80068ca:	bf00      	nop
 80068cc:	7fefffff 	.word	0x7fefffff
 80068d0:	0800ae64 	.word	0x0800ae64
 80068d4:	0800ae68 	.word	0x0800ae68
 80068d8:	0800ae70 	.word	0x0800ae70
 80068dc:	0800ae6c 	.word	0x0800ae6c
 80068e0:	0800ae74 	.word	0x0800ae74
 80068e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068e8:	429a      	cmp	r2, r3
 80068ea:	bfa8      	it	ge
 80068ec:	461a      	movge	r2, r3
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	4691      	mov	r9, r2
 80068f2:	dc37      	bgt.n	8006964 <_printf_float+0x374>
 80068f4:	f04f 0b00 	mov.w	fp, #0
 80068f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068fc:	f104 021a 	add.w	r2, r4, #26
 8006900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	eba3 0309 	sub.w	r3, r3, r9
 8006908:	455b      	cmp	r3, fp
 800690a:	dc33      	bgt.n	8006974 <_printf_float+0x384>
 800690c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006910:	429a      	cmp	r2, r3
 8006912:	db3b      	blt.n	800698c <_printf_float+0x39c>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	d438      	bmi.n	800698c <_printf_float+0x39c>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006920:	1a9a      	subs	r2, r3, r2
 8006922:	eba3 0901 	sub.w	r9, r3, r1
 8006926:	4591      	cmp	r9, r2
 8006928:	bfa8      	it	ge
 800692a:	4691      	movge	r9, r2
 800692c:	f1b9 0f00 	cmp.w	r9, #0
 8006930:	dc35      	bgt.n	800699e <_printf_float+0x3ae>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800693a:	f104 0a1a 	add.w	sl, r4, #26
 800693e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	eba3 0309 	sub.w	r3, r3, r9
 8006948:	4543      	cmp	r3, r8
 800694a:	f77f af79 	ble.w	8006840 <_printf_float+0x250>
 800694e:	2301      	movs	r3, #1
 8006950:	4652      	mov	r2, sl
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f aeaa 	beq.w	80066b2 <_printf_float+0xc2>
 800695e:	f108 0801 	add.w	r8, r8, #1
 8006962:	e7ec      	b.n	800693e <_printf_float+0x34e>
 8006964:	4613      	mov	r3, r2
 8006966:	4631      	mov	r1, r6
 8006968:	4642      	mov	r2, r8
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	d1c0      	bne.n	80068f4 <_printf_float+0x304>
 8006972:	e69e      	b.n	80066b2 <_printf_float+0xc2>
 8006974:	2301      	movs	r3, #1
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	9205      	str	r2, [sp, #20]
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f ae97 	beq.w	80066b2 <_printf_float+0xc2>
 8006984:	9a05      	ldr	r2, [sp, #20]
 8006986:	f10b 0b01 	add.w	fp, fp, #1
 800698a:	e7b9      	b.n	8006900 <_printf_float+0x310>
 800698c:	ee18 3a10 	vmov	r3, s16
 8006990:	4652      	mov	r2, sl
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1be      	bne.n	800691a <_printf_float+0x32a>
 800699c:	e689      	b.n	80066b2 <_printf_float+0xc2>
 800699e:	9a05      	ldr	r2, [sp, #20]
 80069a0:	464b      	mov	r3, r9
 80069a2:	4442      	add	r2, r8
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	d1c1      	bne.n	8006932 <_printf_float+0x342>
 80069ae:	e680      	b.n	80066b2 <_printf_float+0xc2>
 80069b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	dc01      	bgt.n	80069ba <_printf_float+0x3ca>
 80069b6:	07db      	lsls	r3, r3, #31
 80069b8:	d538      	bpl.n	8006a2c <_printf_float+0x43c>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4642      	mov	r2, r8
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae74 	beq.w	80066b2 <_printf_float+0xc2>
 80069ca:	ee18 3a10 	vmov	r3, s16
 80069ce:	4652      	mov	r2, sl
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae6b 	beq.w	80066b2 <_printf_float+0xc2>
 80069dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069e0:	2200      	movs	r2, #0
 80069e2:	2300      	movs	r3, #0
 80069e4:	f7fa f9b0 	bl	8000d48 <__aeabi_dcmpeq>
 80069e8:	b9d8      	cbnz	r0, 8006a22 <_printf_float+0x432>
 80069ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ec:	f108 0201 	add.w	r2, r8, #1
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d10e      	bne.n	8006a1a <_printf_float+0x42a>
 80069fc:	e659      	b.n	80066b2 <_printf_float+0xc2>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae52 	beq.w	80066b2 <_printf_float+0xc2>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	3b01      	subs	r3, #1
 8006a16:	4543      	cmp	r3, r8
 8006a18:	dcf1      	bgt.n	80069fe <_printf_float+0x40e>
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a20:	e6dc      	b.n	80067dc <_printf_float+0x1ec>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 0a1a 	add.w	sl, r4, #26
 8006a2a:	e7f2      	b.n	8006a12 <_printf_float+0x422>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4642      	mov	r2, r8
 8006a30:	e7df      	b.n	80069f2 <_printf_float+0x402>
 8006a32:	2301      	movs	r3, #1
 8006a34:	464a      	mov	r2, r9
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae38 	beq.w	80066b2 <_printf_float+0xc2>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	dcf0      	bgt.n	8006a32 <_printf_float+0x442>
 8006a50:	e6fa      	b.n	8006848 <_printf_float+0x258>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0919 	add.w	r9, r4, #25
 8006a5a:	e7f4      	b.n	8006a46 <_printf_float+0x456>

08006a5c <_printf_common>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	4616      	mov	r6, r2
 8006a62:	4699      	mov	r9, r3
 8006a64:	688a      	ldr	r2, [r1, #8]
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bfb8      	it	lt
 8006a70:	4613      	movlt	r3, r2
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a78:	4607      	mov	r7, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	b10a      	cbz	r2, 8006a82 <_printf_common+0x26>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	0699      	lsls	r1, r3, #26
 8006a86:	bf42      	ittt	mi
 8006a88:	6833      	ldrmi	r3, [r6, #0]
 8006a8a:	3302      	addmi	r3, #2
 8006a8c:	6033      	strmi	r3, [r6, #0]
 8006a8e:	6825      	ldr	r5, [r4, #0]
 8006a90:	f015 0506 	ands.w	r5, r5, #6
 8006a94:	d106      	bne.n	8006aa4 <_printf_common+0x48>
 8006a96:	f104 0a19 	add.w	sl, r4, #25
 8006a9a:	68e3      	ldr	r3, [r4, #12]
 8006a9c:	6832      	ldr	r2, [r6, #0]
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	dc26      	bgt.n	8006af2 <_printf_common+0x96>
 8006aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa8:	1e13      	subs	r3, r2, #0
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	bf18      	it	ne
 8006aae:	2301      	movne	r3, #1
 8006ab0:	0692      	lsls	r2, r2, #26
 8006ab2:	d42b      	bmi.n	8006b0c <_printf_common+0xb0>
 8006ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab8:	4649      	mov	r1, r9
 8006aba:	4638      	mov	r0, r7
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d01e      	beq.n	8006b00 <_printf_common+0xa4>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	68e5      	ldr	r5, [r4, #12]
 8006ac6:	6832      	ldr	r2, [r6, #0]
 8006ac8:	f003 0306 	and.w	r3, r3, #6
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	bf08      	it	eq
 8006ad0:	1aad      	subeq	r5, r5, r2
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	bf0c      	ite	eq
 8006ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006adc:	2500      	movne	r5, #0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bfc4      	itt	gt
 8006ae2:	1a9b      	subgt	r3, r3, r2
 8006ae4:	18ed      	addgt	r5, r5, r3
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	341a      	adds	r4, #26
 8006aea:	42b5      	cmp	r5, r6
 8006aec:	d11a      	bne.n	8006b24 <_printf_common+0xc8>
 8006aee:	2000      	movs	r0, #0
 8006af0:	e008      	b.n	8006b04 <_printf_common+0xa8>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4652      	mov	r2, sl
 8006af6:	4649      	mov	r1, r9
 8006af8:	4638      	mov	r0, r7
 8006afa:	47c0      	blx	r8
 8006afc:	3001      	adds	r0, #1
 8006afe:	d103      	bne.n	8006b08 <_printf_common+0xac>
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	3501      	adds	r5, #1
 8006b0a:	e7c6      	b.n	8006a9a <_printf_common+0x3e>
 8006b0c:	18e1      	adds	r1, r4, r3
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	2030      	movs	r0, #48	; 0x30
 8006b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b16:	4422      	add	r2, r4
 8006b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b20:	3302      	adds	r3, #2
 8006b22:	e7c7      	b.n	8006ab4 <_printf_common+0x58>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4622      	mov	r2, r4
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d0e6      	beq.n	8006b00 <_printf_common+0xa4>
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7d9      	b.n	8006aea <_printf_common+0x8e>
	...

08006b38 <_printf_i>:
 8006b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3c:	7e0f      	ldrb	r7, [r1, #24]
 8006b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b40:	2f78      	cmp	r7, #120	; 0x78
 8006b42:	4691      	mov	r9, r2
 8006b44:	4680      	mov	r8, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	469a      	mov	sl, r3
 8006b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b4e:	d807      	bhi.n	8006b60 <_printf_i+0x28>
 8006b50:	2f62      	cmp	r7, #98	; 0x62
 8006b52:	d80a      	bhi.n	8006b6a <_printf_i+0x32>
 8006b54:	2f00      	cmp	r7, #0
 8006b56:	f000 80d8 	beq.w	8006d0a <_printf_i+0x1d2>
 8006b5a:	2f58      	cmp	r7, #88	; 0x58
 8006b5c:	f000 80a3 	beq.w	8006ca6 <_printf_i+0x16e>
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b68:	e03a      	b.n	8006be0 <_printf_i+0xa8>
 8006b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b6e:	2b15      	cmp	r3, #21
 8006b70:	d8f6      	bhi.n	8006b60 <_printf_i+0x28>
 8006b72:	a101      	add	r1, pc, #4	; (adr r1, 8006b78 <_printf_i+0x40>)
 8006b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006b61 	.word	0x08006b61
 8006b84:	08006b61 	.word	0x08006b61
 8006b88:	08006b61 	.word	0x08006b61
 8006b8c:	08006b61 	.word	0x08006b61
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006b61 	.word	0x08006b61
 8006b98:	08006b61 	.word	0x08006b61
 8006b9c:	08006b61 	.word	0x08006b61
 8006ba0:	08006b61 	.word	0x08006b61
 8006ba4:	08006cf1 	.word	0x08006cf1
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006cd3 	.word	0x08006cd3
 8006bb0:	08006b61 	.word	0x08006b61
 8006bb4:	08006b61 	.word	0x08006b61
 8006bb8:	08006d13 	.word	0x08006d13
 8006bbc:	08006b61 	.word	0x08006b61
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b61 	.word	0x08006b61
 8006bc8:	08006b61 	.word	0x08006b61
 8006bcc:	08006cdb 	.word	0x08006cdb
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	602a      	str	r2, [r5, #0]
 8006bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0a3      	b.n	8006d2c <_printf_i+0x1f4>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	6829      	ldr	r1, [r5, #0]
 8006be8:	0606      	lsls	r6, r0, #24
 8006bea:	f101 0304 	add.w	r3, r1, #4
 8006bee:	d50a      	bpl.n	8006c06 <_printf_i+0xce>
 8006bf0:	680e      	ldr	r6, [r1, #0]
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	da03      	bge.n	8006c00 <_printf_i+0xc8>
 8006bf8:	232d      	movs	r3, #45	; 0x2d
 8006bfa:	4276      	negs	r6, r6
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c00:	485e      	ldr	r0, [pc, #376]	; (8006d7c <_printf_i+0x244>)
 8006c02:	230a      	movs	r3, #10
 8006c04:	e019      	b.n	8006c3a <_printf_i+0x102>
 8006c06:	680e      	ldr	r6, [r1, #0]
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c0e:	bf18      	it	ne
 8006c10:	b236      	sxthne	r6, r6
 8006c12:	e7ef      	b.n	8006bf4 <_printf_i+0xbc>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	6029      	str	r1, [r5, #0]
 8006c1c:	0601      	lsls	r1, r0, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0xec>
 8006c20:	681e      	ldr	r6, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <_printf_i+0xf2>
 8006c24:	0646      	lsls	r6, r0, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0xe8>
 8006c28:	881e      	ldrh	r6, [r3, #0]
 8006c2a:	4854      	ldr	r0, [pc, #336]	; (8006d7c <_printf_i+0x244>)
 8006c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c2e:	bf0c      	ite	eq
 8006c30:	2308      	moveq	r3, #8
 8006c32:	230a      	movne	r3, #10
 8006c34:	2100      	movs	r1, #0
 8006c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3a:	6865      	ldr	r5, [r4, #4]
 8006c3c:	60a5      	str	r5, [r4, #8]
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	bfa2      	ittt	ge
 8006c42:	6821      	ldrge	r1, [r4, #0]
 8006c44:	f021 0104 	bicge.w	r1, r1, #4
 8006c48:	6021      	strge	r1, [r4, #0]
 8006c4a:	b90e      	cbnz	r6, 8006c50 <_printf_i+0x118>
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	d04d      	beq.n	8006cec <_printf_i+0x1b4>
 8006c50:	4615      	mov	r5, r2
 8006c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c56:	fb03 6711 	mls	r7, r3, r1, r6
 8006c5a:	5dc7      	ldrb	r7, [r0, r7]
 8006c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c60:	4637      	mov	r7, r6
 8006c62:	42bb      	cmp	r3, r7
 8006c64:	460e      	mov	r6, r1
 8006c66:	d9f4      	bls.n	8006c52 <_printf_i+0x11a>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d10b      	bne.n	8006c84 <_printf_i+0x14c>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	07de      	lsls	r6, r3, #31
 8006c70:	d508      	bpl.n	8006c84 <_printf_i+0x14c>
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	bfde      	ittt	le
 8006c7a:	2330      	movle	r3, #48	; 0x30
 8006c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c84:	1b52      	subs	r2, r2, r5
 8006c86:	6122      	str	r2, [r4, #16]
 8006c88:	f8cd a000 	str.w	sl, [sp]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fee2 	bl	8006a5c <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d14c      	bne.n	8006d36 <_printf_i+0x1fe>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	b004      	add	sp, #16
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	4835      	ldr	r0, [pc, #212]	; (8006d7c <_printf_i+0x244>)
 8006ca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb4:	6029      	str	r1, [r5, #0]
 8006cb6:	061d      	lsls	r5, r3, #24
 8006cb8:	d514      	bpl.n	8006ce4 <_printf_i+0x1ac>
 8006cba:	07df      	lsls	r7, r3, #31
 8006cbc:	bf44      	itt	mi
 8006cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc2:	6023      	strmi	r3, [r4, #0]
 8006cc4:	b91e      	cbnz	r6, 8006cce <_printf_i+0x196>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f023 0320 	bic.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	2310      	movs	r3, #16
 8006cd0:	e7b0      	b.n	8006c34 <_printf_i+0xfc>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	2378      	movs	r3, #120	; 0x78
 8006cdc:	4828      	ldr	r0, [pc, #160]	; (8006d80 <_printf_i+0x248>)
 8006cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce2:	e7e3      	b.n	8006cac <_printf_i+0x174>
 8006ce4:	0659      	lsls	r1, r3, #25
 8006ce6:	bf48      	it	mi
 8006ce8:	b2b6      	uxthmi	r6, r6
 8006cea:	e7e6      	b.n	8006cba <_printf_i+0x182>
 8006cec:	4615      	mov	r5, r2
 8006cee:	e7bb      	b.n	8006c68 <_printf_i+0x130>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	6826      	ldr	r6, [r4, #0]
 8006cf4:	6961      	ldr	r1, [r4, #20]
 8006cf6:	1d18      	adds	r0, r3, #4
 8006cf8:	6028      	str	r0, [r5, #0]
 8006cfa:	0635      	lsls	r5, r6, #24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	d501      	bpl.n	8006d04 <_printf_i+0x1cc>
 8006d00:	6019      	str	r1, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <_printf_i+0x1d2>
 8006d04:	0670      	lsls	r0, r6, #25
 8006d06:	d5fb      	bpl.n	8006d00 <_printf_i+0x1c8>
 8006d08:	8019      	strh	r1, [r3, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6123      	str	r3, [r4, #16]
 8006d0e:	4615      	mov	r5, r2
 8006d10:	e7ba      	b.n	8006c88 <_printf_i+0x150>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	1d1a      	adds	r2, r3, #4
 8006d16:	602a      	str	r2, [r5, #0]
 8006d18:	681d      	ldr	r5, [r3, #0]
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7f9 fb9e 	bl	8000460 <memchr>
 8006d24:	b108      	cbz	r0, 8006d2a <_printf_i+0x1f2>
 8006d26:	1b40      	subs	r0, r0, r5
 8006d28:	6060      	str	r0, [r4, #4]
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d34:	e7a8      	b.n	8006c88 <_printf_i+0x150>
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	47d0      	blx	sl
 8006d40:	3001      	adds	r0, #1
 8006d42:	d0ab      	beq.n	8006c9c <_printf_i+0x164>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	079b      	lsls	r3, r3, #30
 8006d48:	d413      	bmi.n	8006d72 <_printf_i+0x23a>
 8006d4a:	68e0      	ldr	r0, [r4, #12]
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	4298      	cmp	r0, r3
 8006d50:	bfb8      	it	lt
 8006d52:	4618      	movlt	r0, r3
 8006d54:	e7a4      	b.n	8006ca0 <_printf_i+0x168>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	47d0      	blx	sl
 8006d60:	3001      	adds	r0, #1
 8006d62:	d09b      	beq.n	8006c9c <_printf_i+0x164>
 8006d64:	3501      	adds	r5, #1
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	1a5b      	subs	r3, r3, r1
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dcf2      	bgt.n	8006d56 <_printf_i+0x21e>
 8006d70:	e7eb      	b.n	8006d4a <_printf_i+0x212>
 8006d72:	2500      	movs	r5, #0
 8006d74:	f104 0619 	add.w	r6, r4, #25
 8006d78:	e7f5      	b.n	8006d66 <_printf_i+0x22e>
 8006d7a:	bf00      	nop
 8006d7c:	0800ae76 	.word	0x0800ae76
 8006d80:	0800ae87 	.word	0x0800ae87

08006d84 <_scanf_float>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	4617      	mov	r7, r2
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	688b      	ldr	r3, [r1, #8]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d96:	bf83      	ittte	hi
 8006d98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006d9c:	195b      	addhi	r3, r3, r5
 8006d9e:	9302      	strhi	r3, [sp, #8]
 8006da0:	2300      	movls	r3, #0
 8006da2:	bf86      	itte	hi
 8006da4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006da8:	608b      	strhi	r3, [r1, #8]
 8006daa:	9302      	strls	r3, [sp, #8]
 8006dac:	680b      	ldr	r3, [r1, #0]
 8006dae:	468b      	mov	fp, r1
 8006db0:	2500      	movs	r5, #0
 8006db2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006db6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	465e      	mov	r6, fp
 8006dc4:	46aa      	mov	sl, r5
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	9501      	str	r5, [sp, #4]
 8006dca:	68a2      	ldr	r2, [r4, #8]
 8006dcc:	b152      	cbz	r2, 8006de4 <_scanf_float+0x60>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8006dd4:	d864      	bhi.n	8006ea0 <_scanf_float+0x11c>
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d83c      	bhi.n	8006e54 <_scanf_float+0xd0>
 8006dda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006dde:	b2c8      	uxtb	r0, r1
 8006de0:	280e      	cmp	r0, #14
 8006de2:	d93a      	bls.n	8006e5a <_scanf_float+0xd6>
 8006de4:	f1b9 0f00 	cmp.w	r9, #0
 8006de8:	d003      	beq.n	8006df2 <_scanf_float+0x6e>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006df6:	f1ba 0f01 	cmp.w	sl, #1
 8006dfa:	f200 8113 	bhi.w	8007024 <_scanf_float+0x2a0>
 8006dfe:	455e      	cmp	r6, fp
 8006e00:	f200 8105 	bhi.w	800700e <_scanf_float+0x28a>
 8006e04:	2501      	movs	r5, #1
 8006e06:	4628      	mov	r0, r5
 8006e08:	b007      	add	sp, #28
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e12:	2a0d      	cmp	r2, #13
 8006e14:	d8e6      	bhi.n	8006de4 <_scanf_float+0x60>
 8006e16:	a101      	add	r1, pc, #4	; (adr r1, 8006e1c <_scanf_float+0x98>)
 8006e18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e1c:	08006f5b 	.word	0x08006f5b
 8006e20:	08006de5 	.word	0x08006de5
 8006e24:	08006de5 	.word	0x08006de5
 8006e28:	08006de5 	.word	0x08006de5
 8006e2c:	08006fbb 	.word	0x08006fbb
 8006e30:	08006f93 	.word	0x08006f93
 8006e34:	08006de5 	.word	0x08006de5
 8006e38:	08006de5 	.word	0x08006de5
 8006e3c:	08006f69 	.word	0x08006f69
 8006e40:	08006de5 	.word	0x08006de5
 8006e44:	08006de5 	.word	0x08006de5
 8006e48:	08006de5 	.word	0x08006de5
 8006e4c:	08006de5 	.word	0x08006de5
 8006e50:	08006f21 	.word	0x08006f21
 8006e54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e58:	e7db      	b.n	8006e12 <_scanf_float+0x8e>
 8006e5a:	290e      	cmp	r1, #14
 8006e5c:	d8c2      	bhi.n	8006de4 <_scanf_float+0x60>
 8006e5e:	a001      	add	r0, pc, #4	; (adr r0, 8006e64 <_scanf_float+0xe0>)
 8006e60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e64:	08006f13 	.word	0x08006f13
 8006e68:	08006de5 	.word	0x08006de5
 8006e6c:	08006f13 	.word	0x08006f13
 8006e70:	08006fa7 	.word	0x08006fa7
 8006e74:	08006de5 	.word	0x08006de5
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006efd 	.word	0x08006efd
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006efd 	.word	0x08006efd
 8006e88:	08006efd 	.word	0x08006efd
 8006e8c:	08006efd 	.word	0x08006efd
 8006e90:	08006efd 	.word	0x08006efd
 8006e94:	08006efd 	.word	0x08006efd
 8006e98:	08006efd 	.word	0x08006efd
 8006e9c:	08006efd 	.word	0x08006efd
 8006ea0:	2b6e      	cmp	r3, #110	; 0x6e
 8006ea2:	d809      	bhi.n	8006eb8 <_scanf_float+0x134>
 8006ea4:	2b60      	cmp	r3, #96	; 0x60
 8006ea6:	d8b2      	bhi.n	8006e0e <_scanf_float+0x8a>
 8006ea8:	2b54      	cmp	r3, #84	; 0x54
 8006eaa:	d077      	beq.n	8006f9c <_scanf_float+0x218>
 8006eac:	2b59      	cmp	r3, #89	; 0x59
 8006eae:	d199      	bne.n	8006de4 <_scanf_float+0x60>
 8006eb0:	2d07      	cmp	r5, #7
 8006eb2:	d197      	bne.n	8006de4 <_scanf_float+0x60>
 8006eb4:	2508      	movs	r5, #8
 8006eb6:	e029      	b.n	8006f0c <_scanf_float+0x188>
 8006eb8:	2b74      	cmp	r3, #116	; 0x74
 8006eba:	d06f      	beq.n	8006f9c <_scanf_float+0x218>
 8006ebc:	2b79      	cmp	r3, #121	; 0x79
 8006ebe:	e7f6      	b.n	8006eae <_scanf_float+0x12a>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	05c8      	lsls	r0, r1, #23
 8006ec4:	d51a      	bpl.n	8006efc <_scanf_float+0x178>
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ecc:	6021      	str	r1, [r4, #0]
 8006ece:	f109 0901 	add.w	r9, r9, #1
 8006ed2:	b11b      	cbz	r3, 8006edc <_scanf_float+0x158>
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	3201      	adds	r2, #1
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	60a2      	str	r2, [r4, #8]
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	f340 8084 	ble.w	8006ffc <_scanf_float+0x278>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	e766      	b.n	8006dca <_scanf_float+0x46>
 8006efc:	eb1a 0f05 	cmn.w	sl, r5
 8006f00:	f47f af70 	bne.w	8006de4 <_scanf_float+0x60>
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f10:	e7e4      	b.n	8006edc <_scanf_float+0x158>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	0610      	lsls	r0, r2, #24
 8006f16:	f57f af65 	bpl.w	8006de4 <_scanf_float+0x60>
 8006f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1e:	e7f4      	b.n	8006f0a <_scanf_float+0x186>
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	d10e      	bne.n	8006f44 <_scanf_float+0x1c0>
 8006f26:	f1b9 0f00 	cmp.w	r9, #0
 8006f2a:	d10e      	bne.n	8006f4a <_scanf_float+0x1c6>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f36:	d108      	bne.n	8006f4a <_scanf_float+0x1c6>
 8006f38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f3c:	6022      	str	r2, [r4, #0]
 8006f3e:	f04f 0a01 	mov.w	sl, #1
 8006f42:	e7e3      	b.n	8006f0c <_scanf_float+0x188>
 8006f44:	f1ba 0f02 	cmp.w	sl, #2
 8006f48:	d055      	beq.n	8006ff6 <_scanf_float+0x272>
 8006f4a:	2d01      	cmp	r5, #1
 8006f4c:	d002      	beq.n	8006f54 <_scanf_float+0x1d0>
 8006f4e:	2d04      	cmp	r5, #4
 8006f50:	f47f af48 	bne.w	8006de4 <_scanf_float+0x60>
 8006f54:	3501      	adds	r5, #1
 8006f56:	b2ed      	uxtb	r5, r5
 8006f58:	e7d8      	b.n	8006f0c <_scanf_float+0x188>
 8006f5a:	f1ba 0f01 	cmp.w	sl, #1
 8006f5e:	f47f af41 	bne.w	8006de4 <_scanf_float+0x60>
 8006f62:	f04f 0a02 	mov.w	sl, #2
 8006f66:	e7d1      	b.n	8006f0c <_scanf_float+0x188>
 8006f68:	b97d      	cbnz	r5, 8006f8a <_scanf_float+0x206>
 8006f6a:	f1b9 0f00 	cmp.w	r9, #0
 8006f6e:	f47f af3c 	bne.w	8006dea <_scanf_float+0x66>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f7c:	f47f af39 	bne.w	8006df2 <_scanf_float+0x6e>
 8006f80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	2501      	movs	r5, #1
 8006f88:	e7c0      	b.n	8006f0c <_scanf_float+0x188>
 8006f8a:	2d03      	cmp	r5, #3
 8006f8c:	d0e2      	beq.n	8006f54 <_scanf_float+0x1d0>
 8006f8e:	2d05      	cmp	r5, #5
 8006f90:	e7de      	b.n	8006f50 <_scanf_float+0x1cc>
 8006f92:	2d02      	cmp	r5, #2
 8006f94:	f47f af26 	bne.w	8006de4 <_scanf_float+0x60>
 8006f98:	2503      	movs	r5, #3
 8006f9a:	e7b7      	b.n	8006f0c <_scanf_float+0x188>
 8006f9c:	2d06      	cmp	r5, #6
 8006f9e:	f47f af21 	bne.w	8006de4 <_scanf_float+0x60>
 8006fa2:	2507      	movs	r5, #7
 8006fa4:	e7b2      	b.n	8006f0c <_scanf_float+0x188>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	0591      	lsls	r1, r2, #22
 8006faa:	f57f af1b 	bpl.w	8006de4 <_scanf_float+0x60>
 8006fae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb8:	e7a8      	b.n	8006f0c <_scanf_float+0x188>
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fc4:	d006      	beq.n	8006fd4 <_scanf_float+0x250>
 8006fc6:	0550      	lsls	r0, r2, #21
 8006fc8:	f57f af0c 	bpl.w	8006de4 <_scanf_float+0x60>
 8006fcc:	f1b9 0f00 	cmp.w	r9, #0
 8006fd0:	f43f af0f 	beq.w	8006df2 <_scanf_float+0x6e>
 8006fd4:	0591      	lsls	r1, r2, #22
 8006fd6:	bf58      	it	pl
 8006fd8:	9901      	ldrpl	r1, [sp, #4]
 8006fda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fde:	bf58      	it	pl
 8006fe0:	eba9 0101 	subpl.w	r1, r9, r1
 8006fe4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006fe8:	bf58      	it	pl
 8006fea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	f04f 0900 	mov.w	r9, #0
 8006ff4:	e78a      	b.n	8006f0c <_scanf_float+0x188>
 8006ff6:	f04f 0a03 	mov.w	sl, #3
 8006ffa:	e787      	b.n	8006f0c <_scanf_float+0x188>
 8006ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007000:	4639      	mov	r1, r7
 8007002:	4640      	mov	r0, r8
 8007004:	4798      	blx	r3
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f aedf 	beq.w	8006dca <_scanf_float+0x46>
 800700c:	e6ea      	b.n	8006de4 <_scanf_float+0x60>
 800700e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007016:	463a      	mov	r2, r7
 8007018:	4640      	mov	r0, r8
 800701a:	4798      	blx	r3
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	3b01      	subs	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	e6ec      	b.n	8006dfe <_scanf_float+0x7a>
 8007024:	1e6b      	subs	r3, r5, #1
 8007026:	2b06      	cmp	r3, #6
 8007028:	d825      	bhi.n	8007076 <_scanf_float+0x2f2>
 800702a:	2d02      	cmp	r5, #2
 800702c:	d836      	bhi.n	800709c <_scanf_float+0x318>
 800702e:	455e      	cmp	r6, fp
 8007030:	f67f aee8 	bls.w	8006e04 <_scanf_float+0x80>
 8007034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007038:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800703c:	463a      	mov	r2, r7
 800703e:	4640      	mov	r0, r8
 8007040:	4798      	blx	r3
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	e7f1      	b.n	800702e <_scanf_float+0x2aa>
 800704a:	9802      	ldr	r0, [sp, #8]
 800704c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007050:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	463a      	mov	r2, r7
 8007058:	4640      	mov	r0, r8
 800705a:	4798      	blx	r3
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	3b01      	subs	r3, #1
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007066:	fa5f fa8a 	uxtb.w	sl, sl
 800706a:	f1ba 0f02 	cmp.w	sl, #2
 800706e:	d1ec      	bne.n	800704a <_scanf_float+0x2c6>
 8007070:	3d03      	subs	r5, #3
 8007072:	b2ed      	uxtb	r5, r5
 8007074:	1b76      	subs	r6, r6, r5
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	05da      	lsls	r2, r3, #23
 800707a:	d52f      	bpl.n	80070dc <_scanf_float+0x358>
 800707c:	055b      	lsls	r3, r3, #21
 800707e:	d510      	bpl.n	80070a2 <_scanf_float+0x31e>
 8007080:	455e      	cmp	r6, fp
 8007082:	f67f aebf 	bls.w	8006e04 <_scanf_float+0x80>
 8007086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800708a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800708e:	463a      	mov	r2, r7
 8007090:	4640      	mov	r0, r8
 8007092:	4798      	blx	r3
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	3b01      	subs	r3, #1
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	e7f1      	b.n	8007080 <_scanf_float+0x2fc>
 800709c:	46aa      	mov	sl, r5
 800709e:	9602      	str	r6, [sp, #8]
 80070a0:	e7df      	b.n	8007062 <_scanf_float+0x2de>
 80070a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	2965      	cmp	r1, #101	; 0x65
 80070aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80070ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	d00c      	beq.n	80070d0 <_scanf_float+0x34c>
 80070b6:	2945      	cmp	r1, #69	; 0x45
 80070b8:	d00a      	beq.n	80070d0 <_scanf_float+0x34c>
 80070ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070be:	463a      	mov	r2, r7
 80070c0:	4640      	mov	r0, r8
 80070c2:	4798      	blx	r3
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	1eb5      	subs	r5, r6, #2
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d4:	463a      	mov	r2, r7
 80070d6:	4640      	mov	r0, r8
 80070d8:	4798      	blx	r3
 80070da:	462e      	mov	r6, r5
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	f015 0510 	ands.w	r5, r5, #16
 80070e2:	d159      	bne.n	8007198 <_scanf_float+0x414>
 80070e4:	7035      	strb	r5, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f0:	d11b      	bne.n	800712a <_scanf_float+0x3a6>
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	454b      	cmp	r3, r9
 80070f6:	eba3 0209 	sub.w	r2, r3, r9
 80070fa:	d123      	bne.n	8007144 <_scanf_float+0x3c0>
 80070fc:	2200      	movs	r2, #0
 80070fe:	4659      	mov	r1, fp
 8007100:	4640      	mov	r0, r8
 8007102:	f000 fe97 	bl	8007e34 <_strtod_r>
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	f012 0f02 	tst.w	r2, #2
 800710e:	ec57 6b10 	vmov	r6, r7, d0
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	d021      	beq.n	800715a <_scanf_float+0x3d6>
 8007116:	9903      	ldr	r1, [sp, #12]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	600a      	str	r2, [r1, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	e9c3 6700 	strd	r6, r7, [r3]
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60e3      	str	r3, [r4, #12]
 8007128:	e66d      	b.n	8006e06 <_scanf_float+0x82>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0e5      	beq.n	80070fc <_scanf_float+0x378>
 8007130:	9905      	ldr	r1, [sp, #20]
 8007132:	230a      	movs	r3, #10
 8007134:	462a      	mov	r2, r5
 8007136:	3101      	adds	r1, #1
 8007138:	4640      	mov	r0, r8
 800713a:	f000 ff03 	bl	8007f44 <_strtol_r>
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	9e05      	ldr	r6, [sp, #20]
 8007142:	1ac2      	subs	r2, r0, r3
 8007144:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007148:	429e      	cmp	r6, r3
 800714a:	bf28      	it	cs
 800714c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007150:	4912      	ldr	r1, [pc, #72]	; (800719c <_scanf_float+0x418>)
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f82c 	bl	80071b0 <siprintf>
 8007158:	e7d0      	b.n	80070fc <_scanf_float+0x378>
 800715a:	9903      	ldr	r1, [sp, #12]
 800715c:	f012 0f04 	tst.w	r2, #4
 8007160:	f103 0204 	add.w	r2, r3, #4
 8007164:	600a      	str	r2, [r1, #0]
 8007166:	d1d9      	bne.n	800711c <_scanf_float+0x398>
 8007168:	f8d3 8000 	ldr.w	r8, [r3]
 800716c:	ee10 2a10 	vmov	r2, s0
 8007170:	ee10 0a10 	vmov	r0, s0
 8007174:	463b      	mov	r3, r7
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fe18 	bl	8000dac <__aeabi_dcmpun>
 800717c:	b128      	cbz	r0, 800718a <_scanf_float+0x406>
 800717e:	4808      	ldr	r0, [pc, #32]	; (80071a0 <_scanf_float+0x41c>)
 8007180:	f000 f810 	bl	80071a4 <nanf>
 8007184:	ed88 0a00 	vstr	s0, [r8]
 8007188:	e7cb      	b.n	8007122 <_scanf_float+0x39e>
 800718a:	4630      	mov	r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	f7f9 fe6b 	bl	8000e68 <__aeabi_d2f>
 8007192:	f8c8 0000 	str.w	r0, [r8]
 8007196:	e7c4      	b.n	8007122 <_scanf_float+0x39e>
 8007198:	2500      	movs	r5, #0
 800719a:	e634      	b.n	8006e06 <_scanf_float+0x82>
 800719c:	0800ae98 	.word	0x0800ae98
 80071a0:	0800b2a0 	.word	0x0800b2a0

080071a4 <nanf>:
 80071a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80071ac <nanf+0x8>
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	7fc00000 	.word	0x7fc00000

080071b0 <siprintf>:
 80071b0:	b40e      	push	{r1, r2, r3}
 80071b2:	b500      	push	{lr}
 80071b4:	b09c      	sub	sp, #112	; 0x70
 80071b6:	ab1d      	add	r3, sp, #116	; 0x74
 80071b8:	9002      	str	r0, [sp, #8]
 80071ba:	9006      	str	r0, [sp, #24]
 80071bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071c0:	4809      	ldr	r0, [pc, #36]	; (80071e8 <siprintf+0x38>)
 80071c2:	9107      	str	r1, [sp, #28]
 80071c4:	9104      	str	r1, [sp, #16]
 80071c6:	4909      	ldr	r1, [pc, #36]	; (80071ec <siprintf+0x3c>)
 80071c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80071cc:	9105      	str	r1, [sp, #20]
 80071ce:	6800      	ldr	r0, [r0, #0]
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	a902      	add	r1, sp, #8
 80071d4:	f002 fee2 	bl	8009f9c <_svfiprintf_r>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	b01c      	add	sp, #112	; 0x70
 80071e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071e4:	b003      	add	sp, #12
 80071e6:	4770      	bx	lr
 80071e8:	20000018 	.word	0x20000018
 80071ec:	ffff0208 	.word	0xffff0208

080071f0 <sulp>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	460d      	mov	r5, r1
 80071f6:	ec45 4b10 	vmov	d0, r4, r5
 80071fa:	4616      	mov	r6, r2
 80071fc:	f002 fc2c 	bl	8009a58 <__ulp>
 8007200:	ec51 0b10 	vmov	r0, r1, d0
 8007204:	b17e      	cbz	r6, 8007226 <sulp+0x36>
 8007206:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800720a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd09      	ble.n	8007226 <sulp+0x36>
 8007212:	051b      	lsls	r3, r3, #20
 8007214:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007218:	2400      	movs	r4, #0
 800721a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800721e:	4622      	mov	r2, r4
 8007220:	462b      	mov	r3, r5
 8007222:	f7f9 fb29 	bl	8000878 <__aeabi_dmul>
 8007226:	bd70      	pop	{r4, r5, r6, pc}

08007228 <_strtod_l>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	ed2d 8b02 	vpush	{d8}
 8007230:	b09d      	sub	sp, #116	; 0x74
 8007232:	461f      	mov	r7, r3
 8007234:	2300      	movs	r3, #0
 8007236:	9318      	str	r3, [sp, #96]	; 0x60
 8007238:	4ba2      	ldr	r3, [pc, #648]	; (80074c4 <_strtod_l+0x29c>)
 800723a:	9213      	str	r2, [sp, #76]	; 0x4c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	4604      	mov	r4, r0
 8007242:	4618      	mov	r0, r3
 8007244:	4688      	mov	r8, r1
 8007246:	f7f9 f8ff 	bl	8000448 <strlen>
 800724a:	f04f 0a00 	mov.w	sl, #0
 800724e:	4605      	mov	r5, r0
 8007250:	f04f 0b00 	mov.w	fp, #0
 8007254:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007258:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725a:	781a      	ldrb	r2, [r3, #0]
 800725c:	2a2b      	cmp	r2, #43	; 0x2b
 800725e:	d04e      	beq.n	80072fe <_strtod_l+0xd6>
 8007260:	d83b      	bhi.n	80072da <_strtod_l+0xb2>
 8007262:	2a0d      	cmp	r2, #13
 8007264:	d834      	bhi.n	80072d0 <_strtod_l+0xa8>
 8007266:	2a08      	cmp	r2, #8
 8007268:	d834      	bhi.n	80072d4 <_strtod_l+0xac>
 800726a:	2a00      	cmp	r2, #0
 800726c:	d03e      	beq.n	80072ec <_strtod_l+0xc4>
 800726e:	2300      	movs	r3, #0
 8007270:	930a      	str	r3, [sp, #40]	; 0x28
 8007272:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007274:	7833      	ldrb	r3, [r6, #0]
 8007276:	2b30      	cmp	r3, #48	; 0x30
 8007278:	f040 80b0 	bne.w	80073dc <_strtod_l+0x1b4>
 800727c:	7873      	ldrb	r3, [r6, #1]
 800727e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007282:	2b58      	cmp	r3, #88	; 0x58
 8007284:	d168      	bne.n	8007358 <_strtod_l+0x130>
 8007286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	ab18      	add	r3, sp, #96	; 0x60
 800728c:	9702      	str	r7, [sp, #8]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	4a8d      	ldr	r2, [pc, #564]	; (80074c8 <_strtod_l+0x2a0>)
 8007292:	ab19      	add	r3, sp, #100	; 0x64
 8007294:	a917      	add	r1, sp, #92	; 0x5c
 8007296:	4620      	mov	r0, r4
 8007298:	f001 fd38 	bl	8008d0c <__gethex>
 800729c:	f010 0707 	ands.w	r7, r0, #7
 80072a0:	4605      	mov	r5, r0
 80072a2:	d005      	beq.n	80072b0 <_strtod_l+0x88>
 80072a4:	2f06      	cmp	r7, #6
 80072a6:	d12c      	bne.n	8007302 <_strtod_l+0xda>
 80072a8:	3601      	adds	r6, #1
 80072aa:	2300      	movs	r3, #0
 80072ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80072ae:	930a      	str	r3, [sp, #40]	; 0x28
 80072b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 8590 	bne.w	8007dd8 <_strtod_l+0xbb0>
 80072b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ba:	b1eb      	cbz	r3, 80072f8 <_strtod_l+0xd0>
 80072bc:	4652      	mov	r2, sl
 80072be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072c2:	ec43 2b10 	vmov	d0, r2, r3
 80072c6:	b01d      	add	sp, #116	; 0x74
 80072c8:	ecbd 8b02 	vpop	{d8}
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d0:	2a20      	cmp	r2, #32
 80072d2:	d1cc      	bne.n	800726e <_strtod_l+0x46>
 80072d4:	3301      	adds	r3, #1
 80072d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80072d8:	e7be      	b.n	8007258 <_strtod_l+0x30>
 80072da:	2a2d      	cmp	r2, #45	; 0x2d
 80072dc:	d1c7      	bne.n	800726e <_strtod_l+0x46>
 80072de:	2201      	movs	r2, #1
 80072e0:	920a      	str	r2, [sp, #40]	; 0x28
 80072e2:	1c5a      	adds	r2, r3, #1
 80072e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1c2      	bne.n	8007272 <_strtod_l+0x4a>
 80072ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 856e 	bne.w	8007dd4 <_strtod_l+0xbac>
 80072f8:	4652      	mov	r2, sl
 80072fa:	465b      	mov	r3, fp
 80072fc:	e7e1      	b.n	80072c2 <_strtod_l+0x9a>
 80072fe:	2200      	movs	r2, #0
 8007300:	e7ee      	b.n	80072e0 <_strtod_l+0xb8>
 8007302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007304:	b13a      	cbz	r2, 8007316 <_strtod_l+0xee>
 8007306:	2135      	movs	r1, #53	; 0x35
 8007308:	a81a      	add	r0, sp, #104	; 0x68
 800730a:	f002 fcb0 	bl	8009c6e <__copybits>
 800730e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007310:	4620      	mov	r0, r4
 8007312:	f002 f86f 	bl	80093f4 <_Bfree>
 8007316:	3f01      	subs	r7, #1
 8007318:	2f04      	cmp	r7, #4
 800731a:	d806      	bhi.n	800732a <_strtod_l+0x102>
 800731c:	e8df f007 	tbb	[pc, r7]
 8007320:	1714030a 	.word	0x1714030a
 8007324:	0a          	.byte	0x0a
 8007325:	00          	.byte	0x00
 8007326:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800732a:	0728      	lsls	r0, r5, #28
 800732c:	d5c0      	bpl.n	80072b0 <_strtod_l+0x88>
 800732e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007332:	e7bd      	b.n	80072b0 <_strtod_l+0x88>
 8007334:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007338:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800733a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800733e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007342:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007346:	e7f0      	b.n	800732a <_strtod_l+0x102>
 8007348:	f8df b180 	ldr.w	fp, [pc, #384]	; 80074cc <_strtod_l+0x2a4>
 800734c:	e7ed      	b.n	800732a <_strtod_l+0x102>
 800734e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007352:	f04f 3aff 	mov.w	sl, #4294967295
 8007356:	e7e8      	b.n	800732a <_strtod_l+0x102>
 8007358:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	9217      	str	r2, [sp, #92]	; 0x5c
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d0f9      	beq.n	8007358 <_strtod_l+0x130>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0a3      	beq.n	80072b0 <_strtod_l+0x88>
 8007368:	2301      	movs	r3, #1
 800736a:	f04f 0900 	mov.w	r9, #0
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	f8cd 901c 	str.w	r9, [sp, #28]
 8007378:	464f      	mov	r7, r9
 800737a:	220a      	movs	r2, #10
 800737c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800737e:	7806      	ldrb	r6, [r0, #0]
 8007380:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007384:	b2d9      	uxtb	r1, r3
 8007386:	2909      	cmp	r1, #9
 8007388:	d92a      	bls.n	80073e0 <_strtod_l+0x1b8>
 800738a:	9905      	ldr	r1, [sp, #20]
 800738c:	462a      	mov	r2, r5
 800738e:	f002 ff1f 	bl	800a1d0 <strncmp>
 8007392:	b398      	cbz	r0, 80073fc <_strtod_l+0x1d4>
 8007394:	2000      	movs	r0, #0
 8007396:	4632      	mov	r2, r6
 8007398:	463d      	mov	r5, r7
 800739a:	9005      	str	r0, [sp, #20]
 800739c:	4603      	mov	r3, r0
 800739e:	2a65      	cmp	r2, #101	; 0x65
 80073a0:	d001      	beq.n	80073a6 <_strtod_l+0x17e>
 80073a2:	2a45      	cmp	r2, #69	; 0x45
 80073a4:	d118      	bne.n	80073d8 <_strtod_l+0x1b0>
 80073a6:	b91d      	cbnz	r5, 80073b0 <_strtod_l+0x188>
 80073a8:	9a04      	ldr	r2, [sp, #16]
 80073aa:	4302      	orrs	r2, r0
 80073ac:	d09e      	beq.n	80072ec <_strtod_l+0xc4>
 80073ae:	2500      	movs	r5, #0
 80073b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80073b4:	f108 0201 	add.w	r2, r8, #1
 80073b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80073ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80073be:	2a2b      	cmp	r2, #43	; 0x2b
 80073c0:	d075      	beq.n	80074ae <_strtod_l+0x286>
 80073c2:	2a2d      	cmp	r2, #45	; 0x2d
 80073c4:	d07b      	beq.n	80074be <_strtod_l+0x296>
 80073c6:	f04f 0c00 	mov.w	ip, #0
 80073ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80073ce:	2909      	cmp	r1, #9
 80073d0:	f240 8082 	bls.w	80074d8 <_strtod_l+0x2b0>
 80073d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80073d8:	2600      	movs	r6, #0
 80073da:	e09d      	b.n	8007518 <_strtod_l+0x2f0>
 80073dc:	2300      	movs	r3, #0
 80073de:	e7c4      	b.n	800736a <_strtod_l+0x142>
 80073e0:	2f08      	cmp	r7, #8
 80073e2:	bfd8      	it	le
 80073e4:	9907      	ldrle	r1, [sp, #28]
 80073e6:	f100 0001 	add.w	r0, r0, #1
 80073ea:	bfda      	itte	le
 80073ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80073f0:	9307      	strle	r3, [sp, #28]
 80073f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80073f6:	3701      	adds	r7, #1
 80073f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80073fa:	e7bf      	b.n	800737c <_strtod_l+0x154>
 80073fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073fe:	195a      	adds	r2, r3, r5
 8007400:	9217      	str	r2, [sp, #92]	; 0x5c
 8007402:	5d5a      	ldrb	r2, [r3, r5]
 8007404:	2f00      	cmp	r7, #0
 8007406:	d037      	beq.n	8007478 <_strtod_l+0x250>
 8007408:	9005      	str	r0, [sp, #20]
 800740a:	463d      	mov	r5, r7
 800740c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007410:	2b09      	cmp	r3, #9
 8007412:	d912      	bls.n	800743a <_strtod_l+0x212>
 8007414:	2301      	movs	r3, #1
 8007416:	e7c2      	b.n	800739e <_strtod_l+0x176>
 8007418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	9217      	str	r2, [sp, #92]	; 0x5c
 800741e:	785a      	ldrb	r2, [r3, #1]
 8007420:	3001      	adds	r0, #1
 8007422:	2a30      	cmp	r2, #48	; 0x30
 8007424:	d0f8      	beq.n	8007418 <_strtod_l+0x1f0>
 8007426:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800742a:	2b08      	cmp	r3, #8
 800742c:	f200 84d9 	bhi.w	8007de2 <_strtod_l+0xbba>
 8007430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007432:	9005      	str	r0, [sp, #20]
 8007434:	2000      	movs	r0, #0
 8007436:	9308      	str	r3, [sp, #32]
 8007438:	4605      	mov	r5, r0
 800743a:	3a30      	subs	r2, #48	; 0x30
 800743c:	f100 0301 	add.w	r3, r0, #1
 8007440:	d014      	beq.n	800746c <_strtod_l+0x244>
 8007442:	9905      	ldr	r1, [sp, #20]
 8007444:	4419      	add	r1, r3
 8007446:	9105      	str	r1, [sp, #20]
 8007448:	462b      	mov	r3, r5
 800744a:	eb00 0e05 	add.w	lr, r0, r5
 800744e:	210a      	movs	r1, #10
 8007450:	4573      	cmp	r3, lr
 8007452:	d113      	bne.n	800747c <_strtod_l+0x254>
 8007454:	182b      	adds	r3, r5, r0
 8007456:	2b08      	cmp	r3, #8
 8007458:	f105 0501 	add.w	r5, r5, #1
 800745c:	4405      	add	r5, r0
 800745e:	dc1c      	bgt.n	800749a <_strtod_l+0x272>
 8007460:	9907      	ldr	r1, [sp, #28]
 8007462:	230a      	movs	r3, #10
 8007464:	fb03 2301 	mla	r3, r3, r1, r2
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	2300      	movs	r3, #0
 800746c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800746e:	1c51      	adds	r1, r2, #1
 8007470:	9117      	str	r1, [sp, #92]	; 0x5c
 8007472:	7852      	ldrb	r2, [r2, #1]
 8007474:	4618      	mov	r0, r3
 8007476:	e7c9      	b.n	800740c <_strtod_l+0x1e4>
 8007478:	4638      	mov	r0, r7
 800747a:	e7d2      	b.n	8007422 <_strtod_l+0x1fa>
 800747c:	2b08      	cmp	r3, #8
 800747e:	dc04      	bgt.n	800748a <_strtod_l+0x262>
 8007480:	9e07      	ldr	r6, [sp, #28]
 8007482:	434e      	muls	r6, r1
 8007484:	9607      	str	r6, [sp, #28]
 8007486:	3301      	adds	r3, #1
 8007488:	e7e2      	b.n	8007450 <_strtod_l+0x228>
 800748a:	f103 0c01 	add.w	ip, r3, #1
 800748e:	f1bc 0f10 	cmp.w	ip, #16
 8007492:	bfd8      	it	le
 8007494:	fb01 f909 	mulle.w	r9, r1, r9
 8007498:	e7f5      	b.n	8007486 <_strtod_l+0x25e>
 800749a:	2d10      	cmp	r5, #16
 800749c:	bfdc      	itt	le
 800749e:	230a      	movle	r3, #10
 80074a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80074a4:	e7e1      	b.n	800746a <_strtod_l+0x242>
 80074a6:	2300      	movs	r3, #0
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	2301      	movs	r3, #1
 80074ac:	e77c      	b.n	80073a8 <_strtod_l+0x180>
 80074ae:	f04f 0c00 	mov.w	ip, #0
 80074b2:	f108 0202 	add.w	r2, r8, #2
 80074b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80074b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80074bc:	e785      	b.n	80073ca <_strtod_l+0x1a2>
 80074be:	f04f 0c01 	mov.w	ip, #1
 80074c2:	e7f6      	b.n	80074b2 <_strtod_l+0x28a>
 80074c4:	0800b0e8 	.word	0x0800b0e8
 80074c8:	0800aea0 	.word	0x0800aea0
 80074cc:	7ff00000 	.word	0x7ff00000
 80074d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074d2:	1c51      	adds	r1, r2, #1
 80074d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80074d6:	7852      	ldrb	r2, [r2, #1]
 80074d8:	2a30      	cmp	r2, #48	; 0x30
 80074da:	d0f9      	beq.n	80074d0 <_strtod_l+0x2a8>
 80074dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80074e0:	2908      	cmp	r1, #8
 80074e2:	f63f af79 	bhi.w	80073d8 <_strtod_l+0x1b0>
 80074e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80074ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074ec:	9206      	str	r2, [sp, #24]
 80074ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f0:	1c51      	adds	r1, r2, #1
 80074f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80074f4:	7852      	ldrb	r2, [r2, #1]
 80074f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074fa:	2e09      	cmp	r6, #9
 80074fc:	d937      	bls.n	800756e <_strtod_l+0x346>
 80074fe:	9e06      	ldr	r6, [sp, #24]
 8007500:	1b89      	subs	r1, r1, r6
 8007502:	2908      	cmp	r1, #8
 8007504:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007508:	dc02      	bgt.n	8007510 <_strtod_l+0x2e8>
 800750a:	4576      	cmp	r6, lr
 800750c:	bfa8      	it	ge
 800750e:	4676      	movge	r6, lr
 8007510:	f1bc 0f00 	cmp.w	ip, #0
 8007514:	d000      	beq.n	8007518 <_strtod_l+0x2f0>
 8007516:	4276      	negs	r6, r6
 8007518:	2d00      	cmp	r5, #0
 800751a:	d14d      	bne.n	80075b8 <_strtod_l+0x390>
 800751c:	9904      	ldr	r1, [sp, #16]
 800751e:	4301      	orrs	r1, r0
 8007520:	f47f aec6 	bne.w	80072b0 <_strtod_l+0x88>
 8007524:	2b00      	cmp	r3, #0
 8007526:	f47f aee1 	bne.w	80072ec <_strtod_l+0xc4>
 800752a:	2a69      	cmp	r2, #105	; 0x69
 800752c:	d027      	beq.n	800757e <_strtod_l+0x356>
 800752e:	dc24      	bgt.n	800757a <_strtod_l+0x352>
 8007530:	2a49      	cmp	r2, #73	; 0x49
 8007532:	d024      	beq.n	800757e <_strtod_l+0x356>
 8007534:	2a4e      	cmp	r2, #78	; 0x4e
 8007536:	f47f aed9 	bne.w	80072ec <_strtod_l+0xc4>
 800753a:	499f      	ldr	r1, [pc, #636]	; (80077b8 <_strtod_l+0x590>)
 800753c:	a817      	add	r0, sp, #92	; 0x5c
 800753e:	f001 fe3d 	bl	80091bc <__match>
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f aed2 	beq.w	80072ec <_strtod_l+0xc4>
 8007548:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b28      	cmp	r3, #40	; 0x28
 800754e:	d12d      	bne.n	80075ac <_strtod_l+0x384>
 8007550:	499a      	ldr	r1, [pc, #616]	; (80077bc <_strtod_l+0x594>)
 8007552:	aa1a      	add	r2, sp, #104	; 0x68
 8007554:	a817      	add	r0, sp, #92	; 0x5c
 8007556:	f001 fe45 	bl	80091e4 <__hexnan>
 800755a:	2805      	cmp	r0, #5
 800755c:	d126      	bne.n	80075ac <_strtod_l+0x384>
 800755e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007560:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007564:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007568:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800756c:	e6a0      	b.n	80072b0 <_strtod_l+0x88>
 800756e:	210a      	movs	r1, #10
 8007570:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007574:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007578:	e7b9      	b.n	80074ee <_strtod_l+0x2c6>
 800757a:	2a6e      	cmp	r2, #110	; 0x6e
 800757c:	e7db      	b.n	8007536 <_strtod_l+0x30e>
 800757e:	4990      	ldr	r1, [pc, #576]	; (80077c0 <_strtod_l+0x598>)
 8007580:	a817      	add	r0, sp, #92	; 0x5c
 8007582:	f001 fe1b 	bl	80091bc <__match>
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f aeb0 	beq.w	80072ec <_strtod_l+0xc4>
 800758c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800758e:	498d      	ldr	r1, [pc, #564]	; (80077c4 <_strtod_l+0x59c>)
 8007590:	3b01      	subs	r3, #1
 8007592:	a817      	add	r0, sp, #92	; 0x5c
 8007594:	9317      	str	r3, [sp, #92]	; 0x5c
 8007596:	f001 fe11 	bl	80091bc <__match>
 800759a:	b910      	cbnz	r0, 80075a2 <_strtod_l+0x37a>
 800759c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800759e:	3301      	adds	r3, #1
 80075a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80075a2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80077d4 <_strtod_l+0x5ac>
 80075a6:	f04f 0a00 	mov.w	sl, #0
 80075aa:	e681      	b.n	80072b0 <_strtod_l+0x88>
 80075ac:	4886      	ldr	r0, [pc, #536]	; (80077c8 <_strtod_l+0x5a0>)
 80075ae:	f002 fdf7 	bl	800a1a0 <nan>
 80075b2:	ec5b ab10 	vmov	sl, fp, d0
 80075b6:	e67b      	b.n	80072b0 <_strtod_l+0x88>
 80075b8:	9b05      	ldr	r3, [sp, #20]
 80075ba:	9807      	ldr	r0, [sp, #28]
 80075bc:	1af3      	subs	r3, r6, r3
 80075be:	2f00      	cmp	r7, #0
 80075c0:	bf08      	it	eq
 80075c2:	462f      	moveq	r7, r5
 80075c4:	2d10      	cmp	r5, #16
 80075c6:	9306      	str	r3, [sp, #24]
 80075c8:	46a8      	mov	r8, r5
 80075ca:	bfa8      	it	ge
 80075cc:	f04f 0810 	movge.w	r8, #16
 80075d0:	f7f9 f8d8 	bl	8000784 <__aeabi_ui2d>
 80075d4:	2d09      	cmp	r5, #9
 80075d6:	4682      	mov	sl, r0
 80075d8:	468b      	mov	fp, r1
 80075da:	dd13      	ble.n	8007604 <_strtod_l+0x3dc>
 80075dc:	4b7b      	ldr	r3, [pc, #492]	; (80077cc <_strtod_l+0x5a4>)
 80075de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80075e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80075e6:	f7f9 f947 	bl	8000878 <__aeabi_dmul>
 80075ea:	4682      	mov	sl, r0
 80075ec:	4648      	mov	r0, r9
 80075ee:	468b      	mov	fp, r1
 80075f0:	f7f9 f8c8 	bl	8000784 <__aeabi_ui2d>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4650      	mov	r0, sl
 80075fa:	4659      	mov	r1, fp
 80075fc:	f7f8 ff86 	bl	800050c <__adddf3>
 8007600:	4682      	mov	sl, r0
 8007602:	468b      	mov	fp, r1
 8007604:	2d0f      	cmp	r5, #15
 8007606:	dc38      	bgt.n	800767a <_strtod_l+0x452>
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f43f ae50 	beq.w	80072b0 <_strtod_l+0x88>
 8007610:	dd24      	ble.n	800765c <_strtod_l+0x434>
 8007612:	2b16      	cmp	r3, #22
 8007614:	dc0b      	bgt.n	800762e <_strtod_l+0x406>
 8007616:	496d      	ldr	r1, [pc, #436]	; (80077cc <_strtod_l+0x5a4>)
 8007618:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800761c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007620:	4652      	mov	r2, sl
 8007622:	465b      	mov	r3, fp
 8007624:	f7f9 f928 	bl	8000878 <__aeabi_dmul>
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	e640      	b.n	80072b0 <_strtod_l+0x88>
 800762e:	9a06      	ldr	r2, [sp, #24]
 8007630:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007634:	4293      	cmp	r3, r2
 8007636:	db20      	blt.n	800767a <_strtod_l+0x452>
 8007638:	4c64      	ldr	r4, [pc, #400]	; (80077cc <_strtod_l+0x5a4>)
 800763a:	f1c5 050f 	rsb	r5, r5, #15
 800763e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007642:	4652      	mov	r2, sl
 8007644:	465b      	mov	r3, fp
 8007646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800764a:	f7f9 f915 	bl	8000878 <__aeabi_dmul>
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	1b5d      	subs	r5, r3, r5
 8007652:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007656:	e9d4 2300 	ldrd	r2, r3, [r4]
 800765a:	e7e3      	b.n	8007624 <_strtod_l+0x3fc>
 800765c:	9b06      	ldr	r3, [sp, #24]
 800765e:	3316      	adds	r3, #22
 8007660:	db0b      	blt.n	800767a <_strtod_l+0x452>
 8007662:	9b05      	ldr	r3, [sp, #20]
 8007664:	1b9e      	subs	r6, r3, r6
 8007666:	4b59      	ldr	r3, [pc, #356]	; (80077cc <_strtod_l+0x5a4>)
 8007668:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800766c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007670:	4650      	mov	r0, sl
 8007672:	4659      	mov	r1, fp
 8007674:	f7f9 fa2a 	bl	8000acc <__aeabi_ddiv>
 8007678:	e7d6      	b.n	8007628 <_strtod_l+0x400>
 800767a:	9b06      	ldr	r3, [sp, #24]
 800767c:	eba5 0808 	sub.w	r8, r5, r8
 8007680:	4498      	add	r8, r3
 8007682:	f1b8 0f00 	cmp.w	r8, #0
 8007686:	dd74      	ble.n	8007772 <_strtod_l+0x54a>
 8007688:	f018 030f 	ands.w	r3, r8, #15
 800768c:	d00a      	beq.n	80076a4 <_strtod_l+0x47c>
 800768e:	494f      	ldr	r1, [pc, #316]	; (80077cc <_strtod_l+0x5a4>)
 8007690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007694:	4652      	mov	r2, sl
 8007696:	465b      	mov	r3, fp
 8007698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800769c:	f7f9 f8ec 	bl	8000878 <__aeabi_dmul>
 80076a0:	4682      	mov	sl, r0
 80076a2:	468b      	mov	fp, r1
 80076a4:	f038 080f 	bics.w	r8, r8, #15
 80076a8:	d04f      	beq.n	800774a <_strtod_l+0x522>
 80076aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80076ae:	dd22      	ble.n	80076f6 <_strtod_l+0x4ce>
 80076b0:	2500      	movs	r5, #0
 80076b2:	462e      	mov	r6, r5
 80076b4:	9507      	str	r5, [sp, #28]
 80076b6:	9505      	str	r5, [sp, #20]
 80076b8:	2322      	movs	r3, #34	; 0x22
 80076ba:	f8df b118 	ldr.w	fp, [pc, #280]	; 80077d4 <_strtod_l+0x5ac>
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	f04f 0a00 	mov.w	sl, #0
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f43f adf2 	beq.w	80072b0 <_strtod_l+0x88>
 80076cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076ce:	4620      	mov	r0, r4
 80076d0:	f001 fe90 	bl	80093f4 <_Bfree>
 80076d4:	9905      	ldr	r1, [sp, #20]
 80076d6:	4620      	mov	r0, r4
 80076d8:	f001 fe8c 	bl	80093f4 <_Bfree>
 80076dc:	4631      	mov	r1, r6
 80076de:	4620      	mov	r0, r4
 80076e0:	f001 fe88 	bl	80093f4 <_Bfree>
 80076e4:	9907      	ldr	r1, [sp, #28]
 80076e6:	4620      	mov	r0, r4
 80076e8:	f001 fe84 	bl	80093f4 <_Bfree>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4620      	mov	r0, r4
 80076f0:	f001 fe80 	bl	80093f4 <_Bfree>
 80076f4:	e5dc      	b.n	80072b0 <_strtod_l+0x88>
 80076f6:	4b36      	ldr	r3, [pc, #216]	; (80077d0 <_strtod_l+0x5a8>)
 80076f8:	9304      	str	r3, [sp, #16]
 80076fa:	2300      	movs	r3, #0
 80076fc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007700:	4650      	mov	r0, sl
 8007702:	4659      	mov	r1, fp
 8007704:	4699      	mov	r9, r3
 8007706:	f1b8 0f01 	cmp.w	r8, #1
 800770a:	dc21      	bgt.n	8007750 <_strtod_l+0x528>
 800770c:	b10b      	cbz	r3, 8007712 <_strtod_l+0x4ea>
 800770e:	4682      	mov	sl, r0
 8007710:	468b      	mov	fp, r1
 8007712:	4b2f      	ldr	r3, [pc, #188]	; (80077d0 <_strtod_l+0x5a8>)
 8007714:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007718:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800771c:	4652      	mov	r2, sl
 800771e:	465b      	mov	r3, fp
 8007720:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007724:	f7f9 f8a8 	bl	8000878 <__aeabi_dmul>
 8007728:	4b2a      	ldr	r3, [pc, #168]	; (80077d4 <_strtod_l+0x5ac>)
 800772a:	460a      	mov	r2, r1
 800772c:	400b      	ands	r3, r1
 800772e:	492a      	ldr	r1, [pc, #168]	; (80077d8 <_strtod_l+0x5b0>)
 8007730:	428b      	cmp	r3, r1
 8007732:	4682      	mov	sl, r0
 8007734:	d8bc      	bhi.n	80076b0 <_strtod_l+0x488>
 8007736:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800773a:	428b      	cmp	r3, r1
 800773c:	bf86      	itte	hi
 800773e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80077dc <_strtod_l+0x5b4>
 8007742:	f04f 3aff 	movhi.w	sl, #4294967295
 8007746:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800774a:	2300      	movs	r3, #0
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	e084      	b.n	800785a <_strtod_l+0x632>
 8007750:	f018 0f01 	tst.w	r8, #1
 8007754:	d005      	beq.n	8007762 <_strtod_l+0x53a>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f7f9 f88c 	bl	8000878 <__aeabi_dmul>
 8007760:	2301      	movs	r3, #1
 8007762:	9a04      	ldr	r2, [sp, #16]
 8007764:	3208      	adds	r2, #8
 8007766:	f109 0901 	add.w	r9, r9, #1
 800776a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800776e:	9204      	str	r2, [sp, #16]
 8007770:	e7c9      	b.n	8007706 <_strtod_l+0x4de>
 8007772:	d0ea      	beq.n	800774a <_strtod_l+0x522>
 8007774:	f1c8 0800 	rsb	r8, r8, #0
 8007778:	f018 020f 	ands.w	r2, r8, #15
 800777c:	d00a      	beq.n	8007794 <_strtod_l+0x56c>
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <_strtod_l+0x5a4>)
 8007780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007784:	4650      	mov	r0, sl
 8007786:	4659      	mov	r1, fp
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f9 f99e 	bl	8000acc <__aeabi_ddiv>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007798:	d0d7      	beq.n	800774a <_strtod_l+0x522>
 800779a:	f1b8 0f1f 	cmp.w	r8, #31
 800779e:	dd1f      	ble.n	80077e0 <_strtod_l+0x5b8>
 80077a0:	2500      	movs	r5, #0
 80077a2:	462e      	mov	r6, r5
 80077a4:	9507      	str	r5, [sp, #28]
 80077a6:	9505      	str	r5, [sp, #20]
 80077a8:	2322      	movs	r3, #34	; 0x22
 80077aa:	f04f 0a00 	mov.w	sl, #0
 80077ae:	f04f 0b00 	mov.w	fp, #0
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	e786      	b.n	80076c4 <_strtod_l+0x49c>
 80077b6:	bf00      	nop
 80077b8:	0800ae71 	.word	0x0800ae71
 80077bc:	0800aeb4 	.word	0x0800aeb4
 80077c0:	0800ae69 	.word	0x0800ae69
 80077c4:	0800aff4 	.word	0x0800aff4
 80077c8:	0800b2a0 	.word	0x0800b2a0
 80077cc:	0800b180 	.word	0x0800b180
 80077d0:	0800b158 	.word	0x0800b158
 80077d4:	7ff00000 	.word	0x7ff00000
 80077d8:	7ca00000 	.word	0x7ca00000
 80077dc:	7fefffff 	.word	0x7fefffff
 80077e0:	f018 0310 	ands.w	r3, r8, #16
 80077e4:	bf18      	it	ne
 80077e6:	236a      	movne	r3, #106	; 0x6a
 80077e8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007b98 <_strtod_l+0x970>
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	4650      	mov	r0, sl
 80077f0:	4659      	mov	r1, fp
 80077f2:	2300      	movs	r3, #0
 80077f4:	f018 0f01 	tst.w	r8, #1
 80077f8:	d004      	beq.n	8007804 <_strtod_l+0x5dc>
 80077fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077fe:	f7f9 f83b 	bl	8000878 <__aeabi_dmul>
 8007802:	2301      	movs	r3, #1
 8007804:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007808:	f109 0908 	add.w	r9, r9, #8
 800780c:	d1f2      	bne.n	80077f4 <_strtod_l+0x5cc>
 800780e:	b10b      	cbz	r3, 8007814 <_strtod_l+0x5ec>
 8007810:	4682      	mov	sl, r0
 8007812:	468b      	mov	fp, r1
 8007814:	9b04      	ldr	r3, [sp, #16]
 8007816:	b1c3      	cbz	r3, 800784a <_strtod_l+0x622>
 8007818:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800781c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007820:	2b00      	cmp	r3, #0
 8007822:	4659      	mov	r1, fp
 8007824:	dd11      	ble.n	800784a <_strtod_l+0x622>
 8007826:	2b1f      	cmp	r3, #31
 8007828:	f340 8124 	ble.w	8007a74 <_strtod_l+0x84c>
 800782c:	2b34      	cmp	r3, #52	; 0x34
 800782e:	bfde      	ittt	le
 8007830:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007834:	f04f 33ff 	movle.w	r3, #4294967295
 8007838:	fa03 f202 	lslle.w	r2, r3, r2
 800783c:	f04f 0a00 	mov.w	sl, #0
 8007840:	bfcc      	ite	gt
 8007842:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007846:	ea02 0b01 	andle.w	fp, r2, r1
 800784a:	2200      	movs	r2, #0
 800784c:	2300      	movs	r3, #0
 800784e:	4650      	mov	r0, sl
 8007850:	4659      	mov	r1, fp
 8007852:	f7f9 fa79 	bl	8000d48 <__aeabi_dcmpeq>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1a2      	bne.n	80077a0 <_strtod_l+0x578>
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	9908      	ldr	r1, [sp, #32]
 8007860:	462b      	mov	r3, r5
 8007862:	463a      	mov	r2, r7
 8007864:	4620      	mov	r0, r4
 8007866:	f001 fe2d 	bl	80094c4 <__s2b>
 800786a:	9007      	str	r0, [sp, #28]
 800786c:	2800      	cmp	r0, #0
 800786e:	f43f af1f 	beq.w	80076b0 <_strtod_l+0x488>
 8007872:	9b05      	ldr	r3, [sp, #20]
 8007874:	1b9e      	subs	r6, r3, r6
 8007876:	9b06      	ldr	r3, [sp, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	bfb4      	ite	lt
 800787c:	4633      	movlt	r3, r6
 800787e:	2300      	movge	r3, #0
 8007880:	930c      	str	r3, [sp, #48]	; 0x30
 8007882:	9b06      	ldr	r3, [sp, #24]
 8007884:	2500      	movs	r5, #0
 8007886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800788a:	9312      	str	r3, [sp, #72]	; 0x48
 800788c:	462e      	mov	r6, r5
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	4620      	mov	r0, r4
 8007892:	6859      	ldr	r1, [r3, #4]
 8007894:	f001 fd6e 	bl	8009374 <_Balloc>
 8007898:	9005      	str	r0, [sp, #20]
 800789a:	2800      	cmp	r0, #0
 800789c:	f43f af0c 	beq.w	80076b8 <_strtod_l+0x490>
 80078a0:	9b07      	ldr	r3, [sp, #28]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	3202      	adds	r2, #2
 80078a6:	f103 010c 	add.w	r1, r3, #12
 80078aa:	0092      	lsls	r2, r2, #2
 80078ac:	300c      	adds	r0, #12
 80078ae:	f001 fd53 	bl	8009358 <memcpy>
 80078b2:	ec4b ab10 	vmov	d0, sl, fp
 80078b6:	aa1a      	add	r2, sp, #104	; 0x68
 80078b8:	a919      	add	r1, sp, #100	; 0x64
 80078ba:	4620      	mov	r0, r4
 80078bc:	f002 f948 	bl	8009b50 <__d2b>
 80078c0:	ec4b ab18 	vmov	d8, sl, fp
 80078c4:	9018      	str	r0, [sp, #96]	; 0x60
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f43f aef6 	beq.w	80076b8 <_strtod_l+0x490>
 80078cc:	2101      	movs	r1, #1
 80078ce:	4620      	mov	r0, r4
 80078d0:	f001 fe92 	bl	80095f8 <__i2b>
 80078d4:	4606      	mov	r6, r0
 80078d6:	2800      	cmp	r0, #0
 80078d8:	f43f aeee 	beq.w	80076b8 <_strtod_l+0x490>
 80078dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078de:	9904      	ldr	r1, [sp, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bfab      	itete	ge
 80078e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80078e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80078e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80078ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80078ee:	bfac      	ite	ge
 80078f0:	eb03 0902 	addge.w	r9, r3, r2
 80078f4:	1ad7      	sublt	r7, r2, r3
 80078f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078f8:	eba3 0801 	sub.w	r8, r3, r1
 80078fc:	4490      	add	r8, r2
 80078fe:	4ba1      	ldr	r3, [pc, #644]	; (8007b84 <_strtod_l+0x95c>)
 8007900:	f108 38ff 	add.w	r8, r8, #4294967295
 8007904:	4598      	cmp	r8, r3
 8007906:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800790a:	f280 80c7 	bge.w	8007a9c <_strtod_l+0x874>
 800790e:	eba3 0308 	sub.w	r3, r3, r8
 8007912:	2b1f      	cmp	r3, #31
 8007914:	eba2 0203 	sub.w	r2, r2, r3
 8007918:	f04f 0101 	mov.w	r1, #1
 800791c:	f300 80b1 	bgt.w	8007a82 <_strtod_l+0x85a>
 8007920:	fa01 f303 	lsl.w	r3, r1, r3
 8007924:	930d      	str	r3, [sp, #52]	; 0x34
 8007926:	2300      	movs	r3, #0
 8007928:	9308      	str	r3, [sp, #32]
 800792a:	eb09 0802 	add.w	r8, r9, r2
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	45c1      	cmp	r9, r8
 8007932:	4417      	add	r7, r2
 8007934:	441f      	add	r7, r3
 8007936:	464b      	mov	r3, r9
 8007938:	bfa8      	it	ge
 800793a:	4643      	movge	r3, r8
 800793c:	42bb      	cmp	r3, r7
 800793e:	bfa8      	it	ge
 8007940:	463b      	movge	r3, r7
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfc2      	ittt	gt
 8007946:	eba8 0803 	subgt.w	r8, r8, r3
 800794a:	1aff      	subgt	r7, r7, r3
 800794c:	eba9 0903 	subgt.w	r9, r9, r3
 8007950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007952:	2b00      	cmp	r3, #0
 8007954:	dd17      	ble.n	8007986 <_strtod_l+0x75e>
 8007956:	4631      	mov	r1, r6
 8007958:	461a      	mov	r2, r3
 800795a:	4620      	mov	r0, r4
 800795c:	f001 ff0c 	bl	8009778 <__pow5mult>
 8007960:	4606      	mov	r6, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	f43f aea8 	beq.w	80076b8 <_strtod_l+0x490>
 8007968:	4601      	mov	r1, r0
 800796a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800796c:	4620      	mov	r0, r4
 800796e:	f001 fe59 	bl	8009624 <__multiply>
 8007972:	900b      	str	r0, [sp, #44]	; 0x2c
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f ae9f 	beq.w	80076b8 <_strtod_l+0x490>
 800797a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800797c:	4620      	mov	r0, r4
 800797e:	f001 fd39 	bl	80093f4 <_Bfree>
 8007982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007984:	9318      	str	r3, [sp, #96]	; 0x60
 8007986:	f1b8 0f00 	cmp.w	r8, #0
 800798a:	f300 808c 	bgt.w	8007aa6 <_strtod_l+0x87e>
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	dd08      	ble.n	80079a6 <_strtod_l+0x77e>
 8007994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007996:	9905      	ldr	r1, [sp, #20]
 8007998:	4620      	mov	r0, r4
 800799a:	f001 feed 	bl	8009778 <__pow5mult>
 800799e:	9005      	str	r0, [sp, #20]
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f43f ae89 	beq.w	80076b8 <_strtod_l+0x490>
 80079a6:	2f00      	cmp	r7, #0
 80079a8:	dd08      	ble.n	80079bc <_strtod_l+0x794>
 80079aa:	9905      	ldr	r1, [sp, #20]
 80079ac:	463a      	mov	r2, r7
 80079ae:	4620      	mov	r0, r4
 80079b0:	f001 ff3c 	bl	800982c <__lshift>
 80079b4:	9005      	str	r0, [sp, #20]
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f ae7e 	beq.w	80076b8 <_strtod_l+0x490>
 80079bc:	f1b9 0f00 	cmp.w	r9, #0
 80079c0:	dd08      	ble.n	80079d4 <_strtod_l+0x7ac>
 80079c2:	4631      	mov	r1, r6
 80079c4:	464a      	mov	r2, r9
 80079c6:	4620      	mov	r0, r4
 80079c8:	f001 ff30 	bl	800982c <__lshift>
 80079cc:	4606      	mov	r6, r0
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f ae72 	beq.w	80076b8 <_strtod_l+0x490>
 80079d4:	9a05      	ldr	r2, [sp, #20]
 80079d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079d8:	4620      	mov	r0, r4
 80079da:	f001 ffb3 	bl	8009944 <__mdiff>
 80079de:	4605      	mov	r5, r0
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f43f ae69 	beq.w	80076b8 <_strtod_l+0x490>
 80079e6:	68c3      	ldr	r3, [r0, #12]
 80079e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ea:	2300      	movs	r3, #0
 80079ec:	60c3      	str	r3, [r0, #12]
 80079ee:	4631      	mov	r1, r6
 80079f0:	f001 ff8c 	bl	800990c <__mcmp>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	da60      	bge.n	8007aba <_strtod_l+0x892>
 80079f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079fa:	ea53 030a 	orrs.w	r3, r3, sl
 80079fe:	f040 8082 	bne.w	8007b06 <_strtod_l+0x8de>
 8007a02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d17d      	bne.n	8007b06 <_strtod_l+0x8de>
 8007a0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a0e:	0d1b      	lsrs	r3, r3, #20
 8007a10:	051b      	lsls	r3, r3, #20
 8007a12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a16:	d976      	bls.n	8007b06 <_strtod_l+0x8de>
 8007a18:	696b      	ldr	r3, [r5, #20]
 8007a1a:	b913      	cbnz	r3, 8007a22 <_strtod_l+0x7fa>
 8007a1c:	692b      	ldr	r3, [r5, #16]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	dd71      	ble.n	8007b06 <_strtod_l+0x8de>
 8007a22:	4629      	mov	r1, r5
 8007a24:	2201      	movs	r2, #1
 8007a26:	4620      	mov	r0, r4
 8007a28:	f001 ff00 	bl	800982c <__lshift>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4605      	mov	r5, r0
 8007a30:	f001 ff6c 	bl	800990c <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dd66      	ble.n	8007b06 <_strtod_l+0x8de>
 8007a38:	9904      	ldr	r1, [sp, #16]
 8007a3a:	4a53      	ldr	r2, [pc, #332]	; (8007b88 <_strtod_l+0x960>)
 8007a3c:	465b      	mov	r3, fp
 8007a3e:	2900      	cmp	r1, #0
 8007a40:	f000 8081 	beq.w	8007b46 <_strtod_l+0x91e>
 8007a44:	ea02 010b 	and.w	r1, r2, fp
 8007a48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007a4c:	dc7b      	bgt.n	8007b46 <_strtod_l+0x91e>
 8007a4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007a52:	f77f aea9 	ble.w	80077a8 <_strtod_l+0x580>
 8007a56:	4b4d      	ldr	r3, [pc, #308]	; (8007b8c <_strtod_l+0x964>)
 8007a58:	4650      	mov	r0, sl
 8007a5a:	4659      	mov	r1, fp
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f7f8 ff0b 	bl	8000878 <__aeabi_dmul>
 8007a62:	460b      	mov	r3, r1
 8007a64:	4303      	orrs	r3, r0
 8007a66:	bf08      	it	eq
 8007a68:	2322      	moveq	r3, #34	; 0x22
 8007a6a:	4682      	mov	sl, r0
 8007a6c:	468b      	mov	fp, r1
 8007a6e:	bf08      	it	eq
 8007a70:	6023      	streq	r3, [r4, #0]
 8007a72:	e62b      	b.n	80076cc <_strtod_l+0x4a4>
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7c:	ea03 0a0a 	and.w	sl, r3, sl
 8007a80:	e6e3      	b.n	800784a <_strtod_l+0x622>
 8007a82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007a86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007a8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007a8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007a92:	fa01 f308 	lsl.w	r3, r1, r8
 8007a96:	9308      	str	r3, [sp, #32]
 8007a98:	910d      	str	r1, [sp, #52]	; 0x34
 8007a9a:	e746      	b.n	800792a <_strtod_l+0x702>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa4:	e741      	b.n	800792a <_strtod_l+0x702>
 8007aa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f001 febe 	bl	800982c <__lshift>
 8007ab0:	9018      	str	r0, [sp, #96]	; 0x60
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f47f af6b 	bne.w	800798e <_strtod_l+0x766>
 8007ab8:	e5fe      	b.n	80076b8 <_strtod_l+0x490>
 8007aba:	465f      	mov	r7, fp
 8007abc:	d16e      	bne.n	8007b9c <_strtod_l+0x974>
 8007abe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac4:	b342      	cbz	r2, 8007b18 <_strtod_l+0x8f0>
 8007ac6:	4a32      	ldr	r2, [pc, #200]	; (8007b90 <_strtod_l+0x968>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d128      	bne.n	8007b1e <_strtod_l+0x8f6>
 8007acc:	9b04      	ldr	r3, [sp, #16]
 8007ace:	4651      	mov	r1, sl
 8007ad0:	b1eb      	cbz	r3, 8007b0e <_strtod_l+0x8e6>
 8007ad2:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <_strtod_l+0x960>)
 8007ad4:	403b      	ands	r3, r7
 8007ad6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ada:	f04f 32ff 	mov.w	r2, #4294967295
 8007ade:	d819      	bhi.n	8007b14 <_strtod_l+0x8ec>
 8007ae0:	0d1b      	lsrs	r3, r3, #20
 8007ae2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	4299      	cmp	r1, r3
 8007aec:	d117      	bne.n	8007b1e <_strtod_l+0x8f6>
 8007aee:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <_strtod_l+0x96c>)
 8007af0:	429f      	cmp	r7, r3
 8007af2:	d102      	bne.n	8007afa <_strtod_l+0x8d2>
 8007af4:	3101      	adds	r1, #1
 8007af6:	f43f addf 	beq.w	80076b8 <_strtod_l+0x490>
 8007afa:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <_strtod_l+0x960>)
 8007afc:	403b      	ands	r3, r7
 8007afe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007b02:	f04f 0a00 	mov.w	sl, #0
 8007b06:	9b04      	ldr	r3, [sp, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1a4      	bne.n	8007a56 <_strtod_l+0x82e>
 8007b0c:	e5de      	b.n	80076cc <_strtod_l+0x4a4>
 8007b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b12:	e7ea      	b.n	8007aea <_strtod_l+0x8c2>
 8007b14:	4613      	mov	r3, r2
 8007b16:	e7e8      	b.n	8007aea <_strtod_l+0x8c2>
 8007b18:	ea53 030a 	orrs.w	r3, r3, sl
 8007b1c:	d08c      	beq.n	8007a38 <_strtod_l+0x810>
 8007b1e:	9b08      	ldr	r3, [sp, #32]
 8007b20:	b1db      	cbz	r3, 8007b5a <_strtod_l+0x932>
 8007b22:	423b      	tst	r3, r7
 8007b24:	d0ef      	beq.n	8007b06 <_strtod_l+0x8de>
 8007b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b28:	9a04      	ldr	r2, [sp, #16]
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	b1c3      	cbz	r3, 8007b62 <_strtod_l+0x93a>
 8007b30:	f7ff fb5e 	bl	80071f0 <sulp>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	ec51 0b18 	vmov	r0, r1, d8
 8007b3c:	f7f8 fce6 	bl	800050c <__adddf3>
 8007b40:	4682      	mov	sl, r0
 8007b42:	468b      	mov	fp, r1
 8007b44:	e7df      	b.n	8007b06 <_strtod_l+0x8de>
 8007b46:	4013      	ands	r3, r2
 8007b48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007b4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b54:	f04f 3aff 	mov.w	sl, #4294967295
 8007b58:	e7d5      	b.n	8007b06 <_strtod_l+0x8de>
 8007b5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5c:	ea13 0f0a 	tst.w	r3, sl
 8007b60:	e7e0      	b.n	8007b24 <_strtod_l+0x8fc>
 8007b62:	f7ff fb45 	bl	80071f0 <sulp>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	ec51 0b18 	vmov	r0, r1, d8
 8007b6e:	f7f8 fccb 	bl	8000508 <__aeabi_dsub>
 8007b72:	2200      	movs	r2, #0
 8007b74:	2300      	movs	r3, #0
 8007b76:	4682      	mov	sl, r0
 8007b78:	468b      	mov	fp, r1
 8007b7a:	f7f9 f8e5 	bl	8000d48 <__aeabi_dcmpeq>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0c1      	beq.n	8007b06 <_strtod_l+0x8de>
 8007b82:	e611      	b.n	80077a8 <_strtod_l+0x580>
 8007b84:	fffffc02 	.word	0xfffffc02
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	39500000 	.word	0x39500000
 8007b90:	000fffff 	.word	0x000fffff
 8007b94:	7fefffff 	.word	0x7fefffff
 8007b98:	0800aec8 	.word	0x0800aec8
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f002 f832 	bl	8009c08 <__ratio>
 8007ba4:	ec59 8b10 	vmov	r8, r9, d0
 8007ba8:	ee10 0a10 	vmov	r0, s0
 8007bac:	2200      	movs	r2, #0
 8007bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	f7f9 f8dc 	bl	8000d70 <__aeabi_dcmple>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d07a      	beq.n	8007cb2 <_strtod_l+0xa8a>
 8007bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04a      	beq.n	8007c58 <_strtod_l+0xa30>
 8007bc2:	4b95      	ldr	r3, [pc, #596]	; (8007e18 <_strtod_l+0xbf0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007bca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007e18 <_strtod_l+0xbf0>
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	4b92      	ldr	r3, [pc, #584]	; (8007e1c <_strtod_l+0xbf4>)
 8007bd4:	403b      	ands	r3, r7
 8007bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bda:	4b91      	ldr	r3, [pc, #580]	; (8007e20 <_strtod_l+0xbf8>)
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f040 80b0 	bne.w	8007d42 <_strtod_l+0xb1a>
 8007be2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007be6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007bea:	ec4b ab10 	vmov	d0, sl, fp
 8007bee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007bf2:	f001 ff31 	bl	8009a58 <__ulp>
 8007bf6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007bfa:	ec53 2b10 	vmov	r2, r3, d0
 8007bfe:	f7f8 fe3b 	bl	8000878 <__aeabi_dmul>
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	f7f8 fc81 	bl	800050c <__adddf3>
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4983      	ldr	r1, [pc, #524]	; (8007e1c <_strtod_l+0xbf4>)
 8007c0e:	4a85      	ldr	r2, [pc, #532]	; (8007e24 <_strtod_l+0xbfc>)
 8007c10:	4019      	ands	r1, r3
 8007c12:	4291      	cmp	r1, r2
 8007c14:	4682      	mov	sl, r0
 8007c16:	d960      	bls.n	8007cda <_strtod_l+0xab2>
 8007c18:	ee18 3a90 	vmov	r3, s17
 8007c1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d104      	bne.n	8007c2e <_strtod_l+0xa06>
 8007c24:	ee18 3a10 	vmov	r3, s16
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f43f ad45 	beq.w	80076b8 <_strtod_l+0x490>
 8007c2e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007e30 <_strtod_l+0xc08>
 8007c32:	f04f 3aff 	mov.w	sl, #4294967295
 8007c36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f001 fbdb 	bl	80093f4 <_Bfree>
 8007c3e:	9905      	ldr	r1, [sp, #20]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 fbd7 	bl	80093f4 <_Bfree>
 8007c46:	4631      	mov	r1, r6
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f001 fbd3 	bl	80093f4 <_Bfree>
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 fbcf 	bl	80093f4 <_Bfree>
 8007c56:	e61a      	b.n	800788e <_strtod_l+0x666>
 8007c58:	f1ba 0f00 	cmp.w	sl, #0
 8007c5c:	d11b      	bne.n	8007c96 <_strtod_l+0xa6e>
 8007c5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c62:	b9f3      	cbnz	r3, 8007ca2 <_strtod_l+0xa7a>
 8007c64:	4b6c      	ldr	r3, [pc, #432]	; (8007e18 <_strtod_l+0xbf0>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	4640      	mov	r0, r8
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f9 f876 	bl	8000d5c <__aeabi_dcmplt>
 8007c70:	b9d0      	cbnz	r0, 8007ca8 <_strtod_l+0xa80>
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	4b6c      	ldr	r3, [pc, #432]	; (8007e28 <_strtod_l+0xc00>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f7f8 fdfd 	bl	8000878 <__aeabi_dmul>
 8007c7e:	4680      	mov	r8, r0
 8007c80:	4689      	mov	r9, r1
 8007c82:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c86:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007c8a:	9315      	str	r3, [sp, #84]	; 0x54
 8007c8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c94:	e79d      	b.n	8007bd2 <_strtod_l+0x9aa>
 8007c96:	f1ba 0f01 	cmp.w	sl, #1
 8007c9a:	d102      	bne.n	8007ca2 <_strtod_l+0xa7a>
 8007c9c:	2f00      	cmp	r7, #0
 8007c9e:	f43f ad83 	beq.w	80077a8 <_strtod_l+0x580>
 8007ca2:	4b62      	ldr	r3, [pc, #392]	; (8007e2c <_strtod_l+0xc04>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	e78e      	b.n	8007bc6 <_strtod_l+0x99e>
 8007ca8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007e28 <_strtod_l+0xc00>
 8007cac:	f04f 0800 	mov.w	r8, #0
 8007cb0:	e7e7      	b.n	8007c82 <_strtod_l+0xa5a>
 8007cb2:	4b5d      	ldr	r3, [pc, #372]	; (8007e28 <_strtod_l+0xc00>)
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f7f8 fddd 	bl	8000878 <__aeabi_dmul>
 8007cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	b933      	cbnz	r3, 8007cd4 <_strtod_l+0xaac>
 8007cc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cca:	900e      	str	r0, [sp, #56]	; 0x38
 8007ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007cd2:	e7dd      	b.n	8007c90 <_strtod_l+0xa68>
 8007cd4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007cd8:	e7f9      	b.n	8007cce <_strtod_l+0xaa6>
 8007cda:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1a8      	bne.n	8007c36 <_strtod_l+0xa0e>
 8007ce4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cea:	0d1b      	lsrs	r3, r3, #20
 8007cec:	051b      	lsls	r3, r3, #20
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d1a1      	bne.n	8007c36 <_strtod_l+0xa0e>
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	f7f9 f91f 	bl	8000f38 <__aeabi_d2lz>
 8007cfa:	f7f8 fd8f 	bl	800081c <__aeabi_l2d>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fbff 	bl	8000508 <__aeabi_dsub>
 8007d0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d10:	ea43 030a 	orr.w	r3, r3, sl
 8007d14:	4313      	orrs	r3, r2
 8007d16:	4680      	mov	r8, r0
 8007d18:	4689      	mov	r9, r1
 8007d1a:	d055      	beq.n	8007dc8 <_strtod_l+0xba0>
 8007d1c:	a336      	add	r3, pc, #216	; (adr r3, 8007df8 <_strtod_l+0xbd0>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	f7f9 f81b 	bl	8000d5c <__aeabi_dcmplt>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f47f acd0 	bne.w	80076cc <_strtod_l+0x4a4>
 8007d2c:	a334      	add	r3, pc, #208	; (adr r3, 8007e00 <_strtod_l+0xbd8>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f9 f82f 	bl	8000d98 <__aeabi_dcmpgt>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f af7b 	beq.w	8007c36 <_strtod_l+0xa0e>
 8007d40:	e4c4      	b.n	80076cc <_strtod_l+0x4a4>
 8007d42:	9b04      	ldr	r3, [sp, #16]
 8007d44:	b333      	cbz	r3, 8007d94 <_strtod_l+0xb6c>
 8007d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d48:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d4c:	d822      	bhi.n	8007d94 <_strtod_l+0xb6c>
 8007d4e:	a32e      	add	r3, pc, #184	; (adr r3, 8007e08 <_strtod_l+0xbe0>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f9 f80a 	bl	8000d70 <__aeabi_dcmple>
 8007d5c:	b1a0      	cbz	r0, 8007d88 <_strtod_l+0xb60>
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	f7f9 f861 	bl	8000e28 <__aeabi_d2uiz>
 8007d66:	2801      	cmp	r0, #1
 8007d68:	bf38      	it	cc
 8007d6a:	2001      	movcc	r0, #1
 8007d6c:	f7f8 fd0a 	bl	8000784 <__aeabi_ui2d>
 8007d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d72:	4680      	mov	r8, r0
 8007d74:	4689      	mov	r9, r1
 8007d76:	bb23      	cbnz	r3, 8007dc2 <_strtod_l+0xb9a>
 8007d78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d7c:	9010      	str	r0, [sp, #64]	; 0x40
 8007d7e:	9311      	str	r3, [sp, #68]	; 0x44
 8007d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d8c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	9309      	str	r3, [sp, #36]	; 0x24
 8007d94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d98:	eeb0 0a48 	vmov.f32	s0, s16
 8007d9c:	eef0 0a68 	vmov.f32	s1, s17
 8007da0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007da4:	f001 fe58 	bl	8009a58 <__ulp>
 8007da8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dac:	ec53 2b10 	vmov	r2, r3, d0
 8007db0:	f7f8 fd62 	bl	8000878 <__aeabi_dmul>
 8007db4:	ec53 2b18 	vmov	r2, r3, d8
 8007db8:	f7f8 fba8 	bl	800050c <__adddf3>
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	e78d      	b.n	8007cde <_strtod_l+0xab6>
 8007dc2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007dc6:	e7db      	b.n	8007d80 <_strtod_l+0xb58>
 8007dc8:	a311      	add	r3, pc, #68	; (adr r3, 8007e10 <_strtod_l+0xbe8>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 ffc5 	bl	8000d5c <__aeabi_dcmplt>
 8007dd2:	e7b2      	b.n	8007d3a <_strtod_l+0xb12>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	f7ff ba6b 	b.w	80072b8 <_strtod_l+0x90>
 8007de2:	2a65      	cmp	r2, #101	; 0x65
 8007de4:	f43f ab5f 	beq.w	80074a6 <_strtod_l+0x27e>
 8007de8:	2a45      	cmp	r2, #69	; 0x45
 8007dea:	f43f ab5c 	beq.w	80074a6 <_strtod_l+0x27e>
 8007dee:	2301      	movs	r3, #1
 8007df0:	f7ff bb94 	b.w	800751c <_strtod_l+0x2f4>
 8007df4:	f3af 8000 	nop.w
 8007df8:	94a03595 	.word	0x94a03595
 8007dfc:	3fdfffff 	.word	0x3fdfffff
 8007e00:	35afe535 	.word	0x35afe535
 8007e04:	3fe00000 	.word	0x3fe00000
 8007e08:	ffc00000 	.word	0xffc00000
 8007e0c:	41dfffff 	.word	0x41dfffff
 8007e10:	94a03595 	.word	0x94a03595
 8007e14:	3fcfffff 	.word	0x3fcfffff
 8007e18:	3ff00000 	.word	0x3ff00000
 8007e1c:	7ff00000 	.word	0x7ff00000
 8007e20:	7fe00000 	.word	0x7fe00000
 8007e24:	7c9fffff 	.word	0x7c9fffff
 8007e28:	3fe00000 	.word	0x3fe00000
 8007e2c:	bff00000 	.word	0xbff00000
 8007e30:	7fefffff 	.word	0x7fefffff

08007e34 <_strtod_r>:
 8007e34:	4b01      	ldr	r3, [pc, #4]	; (8007e3c <_strtod_r+0x8>)
 8007e36:	f7ff b9f7 	b.w	8007228 <_strtod_l>
 8007e3a:	bf00      	nop
 8007e3c:	20000080 	.word	0x20000080

08007e40 <_strtol_l.constprop.0>:
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e46:	d001      	beq.n	8007e4c <_strtol_l.constprop.0+0xc>
 8007e48:	2b24      	cmp	r3, #36	; 0x24
 8007e4a:	d906      	bls.n	8007e5a <_strtol_l.constprop.0+0x1a>
 8007e4c:	f7fe fafe 	bl	800644c <__errno>
 8007e50:	2316      	movs	r3, #22
 8007e52:	6003      	str	r3, [r0, #0]
 8007e54:	2000      	movs	r0, #0
 8007e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007f40 <_strtol_l.constprop.0+0x100>
 8007e5e:	460d      	mov	r5, r1
 8007e60:	462e      	mov	r6, r5
 8007e62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e66:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007e6a:	f017 0708 	ands.w	r7, r7, #8
 8007e6e:	d1f7      	bne.n	8007e60 <_strtol_l.constprop.0+0x20>
 8007e70:	2c2d      	cmp	r4, #45	; 0x2d
 8007e72:	d132      	bne.n	8007eda <_strtol_l.constprop.0+0x9a>
 8007e74:	782c      	ldrb	r4, [r5, #0]
 8007e76:	2701      	movs	r7, #1
 8007e78:	1cb5      	adds	r5, r6, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d05b      	beq.n	8007f36 <_strtol_l.constprop.0+0xf6>
 8007e7e:	2b10      	cmp	r3, #16
 8007e80:	d109      	bne.n	8007e96 <_strtol_l.constprop.0+0x56>
 8007e82:	2c30      	cmp	r4, #48	; 0x30
 8007e84:	d107      	bne.n	8007e96 <_strtol_l.constprop.0+0x56>
 8007e86:	782c      	ldrb	r4, [r5, #0]
 8007e88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007e8c:	2c58      	cmp	r4, #88	; 0x58
 8007e8e:	d14d      	bne.n	8007f2c <_strtol_l.constprop.0+0xec>
 8007e90:	786c      	ldrb	r4, [r5, #1]
 8007e92:	2310      	movs	r3, #16
 8007e94:	3502      	adds	r5, #2
 8007e96:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007e9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e9e:	f04f 0c00 	mov.w	ip, #0
 8007ea2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007ea6:	4666      	mov	r6, ip
 8007ea8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007eac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007eb0:	f1be 0f09 	cmp.w	lr, #9
 8007eb4:	d816      	bhi.n	8007ee4 <_strtol_l.constprop.0+0xa4>
 8007eb6:	4674      	mov	r4, lr
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	dd24      	ble.n	8007f06 <_strtol_l.constprop.0+0xc6>
 8007ebc:	f1bc 0f00 	cmp.w	ip, #0
 8007ec0:	db1e      	blt.n	8007f00 <_strtol_l.constprop.0+0xc0>
 8007ec2:	45b1      	cmp	r9, r6
 8007ec4:	d31c      	bcc.n	8007f00 <_strtol_l.constprop.0+0xc0>
 8007ec6:	d101      	bne.n	8007ecc <_strtol_l.constprop.0+0x8c>
 8007ec8:	45a2      	cmp	sl, r4
 8007eca:	db19      	blt.n	8007f00 <_strtol_l.constprop.0+0xc0>
 8007ecc:	fb06 4603 	mla	r6, r6, r3, r4
 8007ed0:	f04f 0c01 	mov.w	ip, #1
 8007ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ed8:	e7e8      	b.n	8007eac <_strtol_l.constprop.0+0x6c>
 8007eda:	2c2b      	cmp	r4, #43	; 0x2b
 8007edc:	bf04      	itt	eq
 8007ede:	782c      	ldrbeq	r4, [r5, #0]
 8007ee0:	1cb5      	addeq	r5, r6, #2
 8007ee2:	e7ca      	b.n	8007e7a <_strtol_l.constprop.0+0x3a>
 8007ee4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007ee8:	f1be 0f19 	cmp.w	lr, #25
 8007eec:	d801      	bhi.n	8007ef2 <_strtol_l.constprop.0+0xb2>
 8007eee:	3c37      	subs	r4, #55	; 0x37
 8007ef0:	e7e2      	b.n	8007eb8 <_strtol_l.constprop.0+0x78>
 8007ef2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ef6:	f1be 0f19 	cmp.w	lr, #25
 8007efa:	d804      	bhi.n	8007f06 <_strtol_l.constprop.0+0xc6>
 8007efc:	3c57      	subs	r4, #87	; 0x57
 8007efe:	e7db      	b.n	8007eb8 <_strtol_l.constprop.0+0x78>
 8007f00:	f04f 3cff 	mov.w	ip, #4294967295
 8007f04:	e7e6      	b.n	8007ed4 <_strtol_l.constprop.0+0x94>
 8007f06:	f1bc 0f00 	cmp.w	ip, #0
 8007f0a:	da05      	bge.n	8007f18 <_strtol_l.constprop.0+0xd8>
 8007f0c:	2322      	movs	r3, #34	; 0x22
 8007f0e:	6003      	str	r3, [r0, #0]
 8007f10:	4646      	mov	r6, r8
 8007f12:	b942      	cbnz	r2, 8007f26 <_strtol_l.constprop.0+0xe6>
 8007f14:	4630      	mov	r0, r6
 8007f16:	e79e      	b.n	8007e56 <_strtol_l.constprop.0+0x16>
 8007f18:	b107      	cbz	r7, 8007f1c <_strtol_l.constprop.0+0xdc>
 8007f1a:	4276      	negs	r6, r6
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	d0f9      	beq.n	8007f14 <_strtol_l.constprop.0+0xd4>
 8007f20:	f1bc 0f00 	cmp.w	ip, #0
 8007f24:	d000      	beq.n	8007f28 <_strtol_l.constprop.0+0xe8>
 8007f26:	1e69      	subs	r1, r5, #1
 8007f28:	6011      	str	r1, [r2, #0]
 8007f2a:	e7f3      	b.n	8007f14 <_strtol_l.constprop.0+0xd4>
 8007f2c:	2430      	movs	r4, #48	; 0x30
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1b1      	bne.n	8007e96 <_strtol_l.constprop.0+0x56>
 8007f32:	2308      	movs	r3, #8
 8007f34:	e7af      	b.n	8007e96 <_strtol_l.constprop.0+0x56>
 8007f36:	2c30      	cmp	r4, #48	; 0x30
 8007f38:	d0a5      	beq.n	8007e86 <_strtol_l.constprop.0+0x46>
 8007f3a:	230a      	movs	r3, #10
 8007f3c:	e7ab      	b.n	8007e96 <_strtol_l.constprop.0+0x56>
 8007f3e:	bf00      	nop
 8007f40:	0800aef1 	.word	0x0800aef1

08007f44 <_strtol_r>:
 8007f44:	f7ff bf7c 	b.w	8007e40 <_strtol_l.constprop.0>

08007f48 <quorem>:
 8007f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	6903      	ldr	r3, [r0, #16]
 8007f4e:	690c      	ldr	r4, [r1, #16]
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	4607      	mov	r7, r0
 8007f54:	f2c0 8081 	blt.w	800805a <quorem+0x112>
 8007f58:	3c01      	subs	r4, #1
 8007f5a:	f101 0814 	add.w	r8, r1, #20
 8007f5e:	f100 0514 	add.w	r5, r0, #20
 8007f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f70:	3301      	adds	r3, #1
 8007f72:	429a      	cmp	r2, r3
 8007f74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f80:	d331      	bcc.n	8007fe6 <quorem+0x9e>
 8007f82:	f04f 0e00 	mov.w	lr, #0
 8007f86:	4640      	mov	r0, r8
 8007f88:	46ac      	mov	ip, r5
 8007f8a:	46f2      	mov	sl, lr
 8007f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f90:	b293      	uxth	r3, r2
 8007f92:	fb06 e303 	mla	r3, r6, r3, lr
 8007f96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	ebaa 0303 	sub.w	r3, sl, r3
 8007fa0:	f8dc a000 	ldr.w	sl, [ip]
 8007fa4:	0c12      	lsrs	r2, r2, #16
 8007fa6:	fa13 f38a 	uxtah	r3, r3, sl
 8007faa:	fb06 e202 	mla	r2, r6, r2, lr
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	9b00      	ldr	r3, [sp, #0]
 8007fb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fc4:	4581      	cmp	r9, r0
 8007fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fca:	f84c 3b04 	str.w	r3, [ip], #4
 8007fce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fd2:	d2db      	bcs.n	8007f8c <quorem+0x44>
 8007fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fd8:	b92b      	cbnz	r3, 8007fe6 <quorem+0x9e>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	3b04      	subs	r3, #4
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	d32e      	bcc.n	8008042 <quorem+0xfa>
 8007fe4:	613c      	str	r4, [r7, #16]
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	f001 fc90 	bl	800990c <__mcmp>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	db24      	blt.n	800803a <quorem+0xf2>
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f04f 0c00 	mov.w	ip, #0
 8007ff8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ffc:	f8d0 e000 	ldr.w	lr, [r0]
 8008000:	b293      	uxth	r3, r2
 8008002:	ebac 0303 	sub.w	r3, ip, r3
 8008006:	0c12      	lsrs	r2, r2, #16
 8008008:	fa13 f38e 	uxtah	r3, r3, lr
 800800c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801a:	45c1      	cmp	r9, r8
 800801c:	f840 3b04 	str.w	r3, [r0], #4
 8008020:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008024:	d2e8      	bcs.n	8007ff8 <quorem+0xb0>
 8008026:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800802a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800802e:	b922      	cbnz	r2, 800803a <quorem+0xf2>
 8008030:	3b04      	subs	r3, #4
 8008032:	429d      	cmp	r5, r3
 8008034:	461a      	mov	r2, r3
 8008036:	d30a      	bcc.n	800804e <quorem+0x106>
 8008038:	613c      	str	r4, [r7, #16]
 800803a:	4630      	mov	r0, r6
 800803c:	b003      	add	sp, #12
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	6812      	ldr	r2, [r2, #0]
 8008044:	3b04      	subs	r3, #4
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1cc      	bne.n	8007fe4 <quorem+0x9c>
 800804a:	3c01      	subs	r4, #1
 800804c:	e7c7      	b.n	8007fde <quorem+0x96>
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	3b04      	subs	r3, #4
 8008052:	2a00      	cmp	r2, #0
 8008054:	d1f0      	bne.n	8008038 <quorem+0xf0>
 8008056:	3c01      	subs	r4, #1
 8008058:	e7eb      	b.n	8008032 <quorem+0xea>
 800805a:	2000      	movs	r0, #0
 800805c:	e7ee      	b.n	800803c <quorem+0xf4>
	...

08008060 <_dtoa_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	ed2d 8b04 	vpush	{d8-d9}
 8008068:	ec57 6b10 	vmov	r6, r7, d0
 800806c:	b093      	sub	sp, #76	; 0x4c
 800806e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008074:	9106      	str	r1, [sp, #24]
 8008076:	ee10 aa10 	vmov	sl, s0
 800807a:	4604      	mov	r4, r0
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	930c      	str	r3, [sp, #48]	; 0x30
 8008080:	46bb      	mov	fp, r7
 8008082:	b975      	cbnz	r5, 80080a2 <_dtoa_r+0x42>
 8008084:	2010      	movs	r0, #16
 8008086:	f001 f94d 	bl	8009324 <malloc>
 800808a:	4602      	mov	r2, r0
 800808c:	6260      	str	r0, [r4, #36]	; 0x24
 800808e:	b920      	cbnz	r0, 800809a <_dtoa_r+0x3a>
 8008090:	4ba7      	ldr	r3, [pc, #668]	; (8008330 <_dtoa_r+0x2d0>)
 8008092:	21ea      	movs	r1, #234	; 0xea
 8008094:	48a7      	ldr	r0, [pc, #668]	; (8008334 <_dtoa_r+0x2d4>)
 8008096:	f002 f8bd 	bl	800a214 <__assert_func>
 800809a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800809e:	6005      	str	r5, [r0, #0]
 80080a0:	60c5      	str	r5, [r0, #12]
 80080a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	b151      	cbz	r1, 80080be <_dtoa_r+0x5e>
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	604a      	str	r2, [r1, #4]
 80080ac:	2301      	movs	r3, #1
 80080ae:	4093      	lsls	r3, r2
 80080b0:	608b      	str	r3, [r1, #8]
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 f99e 	bl	80093f4 <_Bfree>
 80080b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	1e3b      	subs	r3, r7, #0
 80080c0:	bfaa      	itet	ge
 80080c2:	2300      	movge	r3, #0
 80080c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080c8:	f8c8 3000 	strge.w	r3, [r8]
 80080cc:	4b9a      	ldr	r3, [pc, #616]	; (8008338 <_dtoa_r+0x2d8>)
 80080ce:	bfbc      	itt	lt
 80080d0:	2201      	movlt	r2, #1
 80080d2:	f8c8 2000 	strlt.w	r2, [r8]
 80080d6:	ea33 030b 	bics.w	r3, r3, fp
 80080da:	d11b      	bne.n	8008114 <_dtoa_r+0xb4>
 80080dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080de:	f242 730f 	movw	r3, #9999	; 0x270f
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e8:	4333      	orrs	r3, r6
 80080ea:	f000 8592 	beq.w	8008c12 <_dtoa_r+0xbb2>
 80080ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f0:	b963      	cbnz	r3, 800810c <_dtoa_r+0xac>
 80080f2:	4b92      	ldr	r3, [pc, #584]	; (800833c <_dtoa_r+0x2dc>)
 80080f4:	e022      	b.n	800813c <_dtoa_r+0xdc>
 80080f6:	4b92      	ldr	r3, [pc, #584]	; (8008340 <_dtoa_r+0x2e0>)
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	3308      	adds	r3, #8
 80080fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	b013      	add	sp, #76	; 0x4c
 8008104:	ecbd 8b04 	vpop	{d8-d9}
 8008108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810c:	4b8b      	ldr	r3, [pc, #556]	; (800833c <_dtoa_r+0x2dc>)
 800810e:	9301      	str	r3, [sp, #4]
 8008110:	3303      	adds	r3, #3
 8008112:	e7f3      	b.n	80080fc <_dtoa_r+0x9c>
 8008114:	2200      	movs	r2, #0
 8008116:	2300      	movs	r3, #0
 8008118:	4650      	mov	r0, sl
 800811a:	4659      	mov	r1, fp
 800811c:	f7f8 fe14 	bl	8000d48 <__aeabi_dcmpeq>
 8008120:	ec4b ab19 	vmov	d9, sl, fp
 8008124:	4680      	mov	r8, r0
 8008126:	b158      	cbz	r0, 8008140 <_dtoa_r+0xe0>
 8008128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812a:	2301      	movs	r3, #1
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 856b 	beq.w	8008c0c <_dtoa_r+0xbac>
 8008136:	4883      	ldr	r0, [pc, #524]	; (8008344 <_dtoa_r+0x2e4>)
 8008138:	6018      	str	r0, [r3, #0]
 800813a:	1e43      	subs	r3, r0, #1
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	e7df      	b.n	8008100 <_dtoa_r+0xa0>
 8008140:	ec4b ab10 	vmov	d0, sl, fp
 8008144:	aa10      	add	r2, sp, #64	; 0x40
 8008146:	a911      	add	r1, sp, #68	; 0x44
 8008148:	4620      	mov	r0, r4
 800814a:	f001 fd01 	bl	8009b50 <__d2b>
 800814e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008152:	ee08 0a10 	vmov	s16, r0
 8008156:	2d00      	cmp	r5, #0
 8008158:	f000 8084 	beq.w	8008264 <_dtoa_r+0x204>
 800815c:	ee19 3a90 	vmov	r3, s19
 8008160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008168:	4656      	mov	r6, sl
 800816a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800816e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008176:	4b74      	ldr	r3, [pc, #464]	; (8008348 <_dtoa_r+0x2e8>)
 8008178:	2200      	movs	r2, #0
 800817a:	4630      	mov	r0, r6
 800817c:	4639      	mov	r1, r7
 800817e:	f7f8 f9c3 	bl	8000508 <__aeabi_dsub>
 8008182:	a365      	add	r3, pc, #404	; (adr r3, 8008318 <_dtoa_r+0x2b8>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fb76 	bl	8000878 <__aeabi_dmul>
 800818c:	a364      	add	r3, pc, #400	; (adr r3, 8008320 <_dtoa_r+0x2c0>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f9bb 	bl	800050c <__adddf3>
 8008196:	4606      	mov	r6, r0
 8008198:	4628      	mov	r0, r5
 800819a:	460f      	mov	r7, r1
 800819c:	f7f8 fb02 	bl	80007a4 <__aeabi_i2d>
 80081a0:	a361      	add	r3, pc, #388	; (adr r3, 8008328 <_dtoa_r+0x2c8>)
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f7f8 fb67 	bl	8000878 <__aeabi_dmul>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 f9ab 	bl	800050c <__adddf3>
 80081b6:	4606      	mov	r6, r0
 80081b8:	460f      	mov	r7, r1
 80081ba:	f7f8 fe0d 	bl	8000dd8 <__aeabi_d2iz>
 80081be:	2200      	movs	r2, #0
 80081c0:	9000      	str	r0, [sp, #0]
 80081c2:	2300      	movs	r3, #0
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fdc8 	bl	8000d5c <__aeabi_dcmplt>
 80081cc:	b150      	cbz	r0, 80081e4 <_dtoa_r+0x184>
 80081ce:	9800      	ldr	r0, [sp, #0]
 80081d0:	f7f8 fae8 	bl	80007a4 <__aeabi_i2d>
 80081d4:	4632      	mov	r2, r6
 80081d6:	463b      	mov	r3, r7
 80081d8:	f7f8 fdb6 	bl	8000d48 <__aeabi_dcmpeq>
 80081dc:	b910      	cbnz	r0, 80081e4 <_dtoa_r+0x184>
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	9b00      	ldr	r3, [sp, #0]
 80081e6:	2b16      	cmp	r3, #22
 80081e8:	d85a      	bhi.n	80082a0 <_dtoa_r+0x240>
 80081ea:	9a00      	ldr	r2, [sp, #0]
 80081ec:	4b57      	ldr	r3, [pc, #348]	; (800834c <_dtoa_r+0x2ec>)
 80081ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	ec51 0b19 	vmov	r0, r1, d9
 80081fa:	f7f8 fdaf 	bl	8000d5c <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d050      	beq.n	80082a4 <_dtoa_r+0x244>
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	3b01      	subs	r3, #1
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	930b      	str	r3, [sp, #44]	; 0x2c
 800820c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800820e:	1b5d      	subs	r5, r3, r5
 8008210:	1e6b      	subs	r3, r5, #1
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	bf45      	ittet	mi
 8008216:	f1c5 0301 	rsbmi	r3, r5, #1
 800821a:	9304      	strmi	r3, [sp, #16]
 800821c:	2300      	movpl	r3, #0
 800821e:	2300      	movmi	r3, #0
 8008220:	bf4c      	ite	mi
 8008222:	9305      	strmi	r3, [sp, #20]
 8008224:	9304      	strpl	r3, [sp, #16]
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db3d      	blt.n	80082a8 <_dtoa_r+0x248>
 800822c:	9b05      	ldr	r3, [sp, #20]
 800822e:	9a00      	ldr	r2, [sp, #0]
 8008230:	920a      	str	r2, [sp, #40]	; 0x28
 8008232:	4413      	add	r3, r2
 8008234:	9305      	str	r3, [sp, #20]
 8008236:	2300      	movs	r3, #0
 8008238:	9307      	str	r3, [sp, #28]
 800823a:	9b06      	ldr	r3, [sp, #24]
 800823c:	2b09      	cmp	r3, #9
 800823e:	f200 8089 	bhi.w	8008354 <_dtoa_r+0x2f4>
 8008242:	2b05      	cmp	r3, #5
 8008244:	bfc4      	itt	gt
 8008246:	3b04      	subgt	r3, #4
 8008248:	9306      	strgt	r3, [sp, #24]
 800824a:	9b06      	ldr	r3, [sp, #24]
 800824c:	f1a3 0302 	sub.w	r3, r3, #2
 8008250:	bfcc      	ite	gt
 8008252:	2500      	movgt	r5, #0
 8008254:	2501      	movle	r5, #1
 8008256:	2b03      	cmp	r3, #3
 8008258:	f200 8087 	bhi.w	800836a <_dtoa_r+0x30a>
 800825c:	e8df f003 	tbb	[pc, r3]
 8008260:	59383a2d 	.word	0x59383a2d
 8008264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008268:	441d      	add	r5, r3
 800826a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800826e:	2b20      	cmp	r3, #32
 8008270:	bfc1      	itttt	gt
 8008272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800827a:	fa0b f303 	lslgt.w	r3, fp, r3
 800827e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008282:	bfda      	itte	le
 8008284:	f1c3 0320 	rsble	r3, r3, #32
 8008288:	fa06 f003 	lslle.w	r0, r6, r3
 800828c:	4318      	orrgt	r0, r3
 800828e:	f7f8 fa79 	bl	8000784 <__aeabi_ui2d>
 8008292:	2301      	movs	r3, #1
 8008294:	4606      	mov	r6, r0
 8008296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800829a:	3d01      	subs	r5, #1
 800829c:	930e      	str	r3, [sp, #56]	; 0x38
 800829e:	e76a      	b.n	8008176 <_dtoa_r+0x116>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e7b2      	b.n	800820a <_dtoa_r+0x1aa>
 80082a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082a6:	e7b1      	b.n	800820c <_dtoa_r+0x1ac>
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	9a00      	ldr	r2, [sp, #0]
 80082ac:	1a9b      	subs	r3, r3, r2
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	4253      	negs	r3, r2
 80082b2:	9307      	str	r3, [sp, #28]
 80082b4:	2300      	movs	r3, #0
 80082b6:	930a      	str	r3, [sp, #40]	; 0x28
 80082b8:	e7bf      	b.n	800823a <_dtoa_r+0x1da>
 80082ba:	2300      	movs	r3, #0
 80082bc:	9308      	str	r3, [sp, #32]
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc55      	bgt.n	8008370 <_dtoa_r+0x310>
 80082c4:	2301      	movs	r3, #1
 80082c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ca:	461a      	mov	r2, r3
 80082cc:	9209      	str	r2, [sp, #36]	; 0x24
 80082ce:	e00c      	b.n	80082ea <_dtoa_r+0x28a>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e7f3      	b.n	80082bc <_dtoa_r+0x25c>
 80082d4:	2300      	movs	r3, #0
 80082d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	3301      	adds	r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	9303      	str	r3, [sp, #12]
 80082e6:	bfb8      	it	lt
 80082e8:	2301      	movlt	r3, #1
 80082ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082ec:	2200      	movs	r2, #0
 80082ee:	6042      	str	r2, [r0, #4]
 80082f0:	2204      	movs	r2, #4
 80082f2:	f102 0614 	add.w	r6, r2, #20
 80082f6:	429e      	cmp	r6, r3
 80082f8:	6841      	ldr	r1, [r0, #4]
 80082fa:	d93d      	bls.n	8008378 <_dtoa_r+0x318>
 80082fc:	4620      	mov	r0, r4
 80082fe:	f001 f839 	bl	8009374 <_Balloc>
 8008302:	9001      	str	r0, [sp, #4]
 8008304:	2800      	cmp	r0, #0
 8008306:	d13b      	bne.n	8008380 <_dtoa_r+0x320>
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <_dtoa_r+0x2f0>)
 800830a:	4602      	mov	r2, r0
 800830c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008310:	e6c0      	b.n	8008094 <_dtoa_r+0x34>
 8008312:	2301      	movs	r3, #1
 8008314:	e7df      	b.n	80082d6 <_dtoa_r+0x276>
 8008316:	bf00      	nop
 8008318:	636f4361 	.word	0x636f4361
 800831c:	3fd287a7 	.word	0x3fd287a7
 8008320:	8b60c8b3 	.word	0x8b60c8b3
 8008324:	3fc68a28 	.word	0x3fc68a28
 8008328:	509f79fb 	.word	0x509f79fb
 800832c:	3fd34413 	.word	0x3fd34413
 8008330:	0800affe 	.word	0x0800affe
 8008334:	0800b015 	.word	0x0800b015
 8008338:	7ff00000 	.word	0x7ff00000
 800833c:	0800affa 	.word	0x0800affa
 8008340:	0800aff1 	.word	0x0800aff1
 8008344:	0800ae75 	.word	0x0800ae75
 8008348:	3ff80000 	.word	0x3ff80000
 800834c:	0800b180 	.word	0x0800b180
 8008350:	0800b070 	.word	0x0800b070
 8008354:	2501      	movs	r5, #1
 8008356:	2300      	movs	r3, #0
 8008358:	9306      	str	r3, [sp, #24]
 800835a:	9508      	str	r5, [sp, #32]
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
 8008360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	2312      	movs	r3, #18
 8008368:	e7b0      	b.n	80082cc <_dtoa_r+0x26c>
 800836a:	2301      	movs	r3, #1
 800836c:	9308      	str	r3, [sp, #32]
 800836e:	e7f5      	b.n	800835c <_dtoa_r+0x2fc>
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008376:	e7b8      	b.n	80082ea <_dtoa_r+0x28a>
 8008378:	3101      	adds	r1, #1
 800837a:	6041      	str	r1, [r0, #4]
 800837c:	0052      	lsls	r2, r2, #1
 800837e:	e7b8      	b.n	80082f2 <_dtoa_r+0x292>
 8008380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008382:	9a01      	ldr	r2, [sp, #4]
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	2b0e      	cmp	r3, #14
 800838a:	f200 809d 	bhi.w	80084c8 <_dtoa_r+0x468>
 800838e:	2d00      	cmp	r5, #0
 8008390:	f000 809a 	beq.w	80084c8 <_dtoa_r+0x468>
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd32      	ble.n	8008400 <_dtoa_r+0x3a0>
 800839a:	4ab7      	ldr	r2, [pc, #732]	; (8008678 <_dtoa_r+0x618>)
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	05d8      	lsls	r0, r3, #23
 80083ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80083b0:	d516      	bpl.n	80083e0 <_dtoa_r+0x380>
 80083b2:	4bb2      	ldr	r3, [pc, #712]	; (800867c <_dtoa_r+0x61c>)
 80083b4:	ec51 0b19 	vmov	r0, r1, d9
 80083b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083bc:	f7f8 fb86 	bl	8000acc <__aeabi_ddiv>
 80083c0:	f007 070f 	and.w	r7, r7, #15
 80083c4:	4682      	mov	sl, r0
 80083c6:	468b      	mov	fp, r1
 80083c8:	2503      	movs	r5, #3
 80083ca:	4eac      	ldr	r6, [pc, #688]	; (800867c <_dtoa_r+0x61c>)
 80083cc:	b957      	cbnz	r7, 80083e4 <_dtoa_r+0x384>
 80083ce:	4642      	mov	r2, r8
 80083d0:	464b      	mov	r3, r9
 80083d2:	4650      	mov	r0, sl
 80083d4:	4659      	mov	r1, fp
 80083d6:	f7f8 fb79 	bl	8000acc <__aeabi_ddiv>
 80083da:	4682      	mov	sl, r0
 80083dc:	468b      	mov	fp, r1
 80083de:	e028      	b.n	8008432 <_dtoa_r+0x3d2>
 80083e0:	2502      	movs	r5, #2
 80083e2:	e7f2      	b.n	80083ca <_dtoa_r+0x36a>
 80083e4:	07f9      	lsls	r1, r7, #31
 80083e6:	d508      	bpl.n	80083fa <_dtoa_r+0x39a>
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083f0:	f7f8 fa42 	bl	8000878 <__aeabi_dmul>
 80083f4:	3501      	adds	r5, #1
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	107f      	asrs	r7, r7, #1
 80083fc:	3608      	adds	r6, #8
 80083fe:	e7e5      	b.n	80083cc <_dtoa_r+0x36c>
 8008400:	f000 809b 	beq.w	800853a <_dtoa_r+0x4da>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	4f9d      	ldr	r7, [pc, #628]	; (800867c <_dtoa_r+0x61c>)
 8008408:	425e      	negs	r6, r3
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <_dtoa_r+0x618>)
 800840c:	f006 020f 	and.w	r2, r6, #15
 8008410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	ec51 0b19 	vmov	r0, r1, d9
 800841c:	f7f8 fa2c 	bl	8000878 <__aeabi_dmul>
 8008420:	1136      	asrs	r6, r6, #4
 8008422:	4682      	mov	sl, r0
 8008424:	468b      	mov	fp, r1
 8008426:	2300      	movs	r3, #0
 8008428:	2502      	movs	r5, #2
 800842a:	2e00      	cmp	r6, #0
 800842c:	d17a      	bne.n	8008524 <_dtoa_r+0x4c4>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1d3      	bne.n	80083da <_dtoa_r+0x37a>
 8008432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8082 	beq.w	800853e <_dtoa_r+0x4de>
 800843a:	4b91      	ldr	r3, [pc, #580]	; (8008680 <_dtoa_r+0x620>)
 800843c:	2200      	movs	r2, #0
 800843e:	4650      	mov	r0, sl
 8008440:	4659      	mov	r1, fp
 8008442:	f7f8 fc8b 	bl	8000d5c <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	d079      	beq.n	800853e <_dtoa_r+0x4de>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d076      	beq.n	800853e <_dtoa_r+0x4de>
 8008450:	9b02      	ldr	r3, [sp, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd36      	ble.n	80084c4 <_dtoa_r+0x464>
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	4650      	mov	r0, sl
 800845a:	4659      	mov	r1, fp
 800845c:	1e5f      	subs	r7, r3, #1
 800845e:	2200      	movs	r2, #0
 8008460:	4b88      	ldr	r3, [pc, #544]	; (8008684 <_dtoa_r+0x624>)
 8008462:	f7f8 fa09 	bl	8000878 <__aeabi_dmul>
 8008466:	9e02      	ldr	r6, [sp, #8]
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	3501      	adds	r5, #1
 800846e:	4628      	mov	r0, r5
 8008470:	f7f8 f998 	bl	80007a4 <__aeabi_i2d>
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	f7f8 f9fe 	bl	8000878 <__aeabi_dmul>
 800847c:	4b82      	ldr	r3, [pc, #520]	; (8008688 <_dtoa_r+0x628>)
 800847e:	2200      	movs	r2, #0
 8008480:	f7f8 f844 	bl	800050c <__adddf3>
 8008484:	46d0      	mov	r8, sl
 8008486:	46d9      	mov	r9, fp
 8008488:	4682      	mov	sl, r0
 800848a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800848e:	2e00      	cmp	r6, #0
 8008490:	d158      	bne.n	8008544 <_dtoa_r+0x4e4>
 8008492:	4b7e      	ldr	r3, [pc, #504]	; (800868c <_dtoa_r+0x62c>)
 8008494:	2200      	movs	r2, #0
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f8 f835 	bl	8000508 <__aeabi_dsub>
 800849e:	4652      	mov	r2, sl
 80084a0:	465b      	mov	r3, fp
 80084a2:	4680      	mov	r8, r0
 80084a4:	4689      	mov	r9, r1
 80084a6:	f7f8 fc77 	bl	8000d98 <__aeabi_dcmpgt>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f040 8295 	bne.w	80089da <_dtoa_r+0x97a>
 80084b0:	4652      	mov	r2, sl
 80084b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084b6:	4640      	mov	r0, r8
 80084b8:	4649      	mov	r1, r9
 80084ba:	f7f8 fc4f 	bl	8000d5c <__aeabi_dcmplt>
 80084be:	2800      	cmp	r0, #0
 80084c0:	f040 8289 	bne.w	80089d6 <_dtoa_r+0x976>
 80084c4:	ec5b ab19 	vmov	sl, fp, d9
 80084c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f2c0 8148 	blt.w	8008760 <_dtoa_r+0x700>
 80084d0:	9a00      	ldr	r2, [sp, #0]
 80084d2:	2a0e      	cmp	r2, #14
 80084d4:	f300 8144 	bgt.w	8008760 <_dtoa_r+0x700>
 80084d8:	4b67      	ldr	r3, [pc, #412]	; (8008678 <_dtoa_r+0x618>)
 80084da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f280 80d5 	bge.w	8008694 <_dtoa_r+0x634>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f300 80d1 	bgt.w	8008694 <_dtoa_r+0x634>
 80084f2:	f040 826f 	bne.w	80089d4 <_dtoa_r+0x974>
 80084f6:	4b65      	ldr	r3, [pc, #404]	; (800868c <_dtoa_r+0x62c>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 f9bb 	bl	8000878 <__aeabi_dmul>
 8008502:	4652      	mov	r2, sl
 8008504:	465b      	mov	r3, fp
 8008506:	f7f8 fc3d 	bl	8000d84 <__aeabi_dcmpge>
 800850a:	9e03      	ldr	r6, [sp, #12]
 800850c:	4637      	mov	r7, r6
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8245 	bne.w	800899e <_dtoa_r+0x93e>
 8008514:	9d01      	ldr	r5, [sp, #4]
 8008516:	2331      	movs	r3, #49	; 0x31
 8008518:	f805 3b01 	strb.w	r3, [r5], #1
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	3301      	adds	r3, #1
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	e240      	b.n	80089a6 <_dtoa_r+0x946>
 8008524:	07f2      	lsls	r2, r6, #31
 8008526:	d505      	bpl.n	8008534 <_dtoa_r+0x4d4>
 8008528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852c:	f7f8 f9a4 	bl	8000878 <__aeabi_dmul>
 8008530:	3501      	adds	r5, #1
 8008532:	2301      	movs	r3, #1
 8008534:	1076      	asrs	r6, r6, #1
 8008536:	3708      	adds	r7, #8
 8008538:	e777      	b.n	800842a <_dtoa_r+0x3ca>
 800853a:	2502      	movs	r5, #2
 800853c:	e779      	b.n	8008432 <_dtoa_r+0x3d2>
 800853e:	9f00      	ldr	r7, [sp, #0]
 8008540:	9e03      	ldr	r6, [sp, #12]
 8008542:	e794      	b.n	800846e <_dtoa_r+0x40e>
 8008544:	9901      	ldr	r1, [sp, #4]
 8008546:	4b4c      	ldr	r3, [pc, #304]	; (8008678 <_dtoa_r+0x618>)
 8008548:	4431      	add	r1, r6
 800854a:	910d      	str	r1, [sp, #52]	; 0x34
 800854c:	9908      	ldr	r1, [sp, #32]
 800854e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008556:	2900      	cmp	r1, #0
 8008558:	d043      	beq.n	80085e2 <_dtoa_r+0x582>
 800855a:	494d      	ldr	r1, [pc, #308]	; (8008690 <_dtoa_r+0x630>)
 800855c:	2000      	movs	r0, #0
 800855e:	f7f8 fab5 	bl	8000acc <__aeabi_ddiv>
 8008562:	4652      	mov	r2, sl
 8008564:	465b      	mov	r3, fp
 8008566:	f7f7 ffcf 	bl	8000508 <__aeabi_dsub>
 800856a:	9d01      	ldr	r5, [sp, #4]
 800856c:	4682      	mov	sl, r0
 800856e:	468b      	mov	fp, r1
 8008570:	4649      	mov	r1, r9
 8008572:	4640      	mov	r0, r8
 8008574:	f7f8 fc30 	bl	8000dd8 <__aeabi_d2iz>
 8008578:	4606      	mov	r6, r0
 800857a:	f7f8 f913 	bl	80007a4 <__aeabi_i2d>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4640      	mov	r0, r8
 8008584:	4649      	mov	r1, r9
 8008586:	f7f7 ffbf 	bl	8000508 <__aeabi_dsub>
 800858a:	3630      	adds	r6, #48	; 0x30
 800858c:	f805 6b01 	strb.w	r6, [r5], #1
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	4680      	mov	r8, r0
 8008596:	4689      	mov	r9, r1
 8008598:	f7f8 fbe0 	bl	8000d5c <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	d163      	bne.n	8008668 <_dtoa_r+0x608>
 80085a0:	4642      	mov	r2, r8
 80085a2:	464b      	mov	r3, r9
 80085a4:	4936      	ldr	r1, [pc, #216]	; (8008680 <_dtoa_r+0x620>)
 80085a6:	2000      	movs	r0, #0
 80085a8:	f7f7 ffae 	bl	8000508 <__aeabi_dsub>
 80085ac:	4652      	mov	r2, sl
 80085ae:	465b      	mov	r3, fp
 80085b0:	f7f8 fbd4 	bl	8000d5c <__aeabi_dcmplt>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	f040 80b5 	bne.w	8008724 <_dtoa_r+0x6c4>
 80085ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085bc:	429d      	cmp	r5, r3
 80085be:	d081      	beq.n	80084c4 <_dtoa_r+0x464>
 80085c0:	4b30      	ldr	r3, [pc, #192]	; (8008684 <_dtoa_r+0x624>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	4650      	mov	r0, sl
 80085c6:	4659      	mov	r1, fp
 80085c8:	f7f8 f956 	bl	8000878 <__aeabi_dmul>
 80085cc:	4b2d      	ldr	r3, [pc, #180]	; (8008684 <_dtoa_r+0x624>)
 80085ce:	4682      	mov	sl, r0
 80085d0:	468b      	mov	fp, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	2200      	movs	r2, #0
 80085d8:	f7f8 f94e 	bl	8000878 <__aeabi_dmul>
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	e7c6      	b.n	8008570 <_dtoa_r+0x510>
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	f7f8 f947 	bl	8000878 <__aeabi_dmul>
 80085ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ec:	9d01      	ldr	r5, [sp, #4]
 80085ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80085f0:	4682      	mov	sl, r0
 80085f2:	468b      	mov	fp, r1
 80085f4:	4649      	mov	r1, r9
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7f8 fbee 	bl	8000dd8 <__aeabi_d2iz>
 80085fc:	4606      	mov	r6, r0
 80085fe:	f7f8 f8d1 	bl	80007a4 <__aeabi_i2d>
 8008602:	3630      	adds	r6, #48	; 0x30
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4640      	mov	r0, r8
 800860a:	4649      	mov	r1, r9
 800860c:	f7f7 ff7c 	bl	8000508 <__aeabi_dsub>
 8008610:	f805 6b01 	strb.w	r6, [r5], #1
 8008614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008616:	429d      	cmp	r5, r3
 8008618:	4680      	mov	r8, r0
 800861a:	4689      	mov	r9, r1
 800861c:	f04f 0200 	mov.w	r2, #0
 8008620:	d124      	bne.n	800866c <_dtoa_r+0x60c>
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <_dtoa_r+0x630>)
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	f7f7 ff70 	bl	800050c <__adddf3>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f8 fbb0 	bl	8000d98 <__aeabi_dcmpgt>
 8008638:	2800      	cmp	r0, #0
 800863a:	d173      	bne.n	8008724 <_dtoa_r+0x6c4>
 800863c:	4652      	mov	r2, sl
 800863e:	465b      	mov	r3, fp
 8008640:	4913      	ldr	r1, [pc, #76]	; (8008690 <_dtoa_r+0x630>)
 8008642:	2000      	movs	r0, #0
 8008644:	f7f7 ff60 	bl	8000508 <__aeabi_dsub>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fb84 	bl	8000d5c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f43f af35 	beq.w	80084c4 <_dtoa_r+0x464>
 800865a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800865c:	1e6b      	subs	r3, r5, #1
 800865e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008664:	2b30      	cmp	r3, #48	; 0x30
 8008666:	d0f8      	beq.n	800865a <_dtoa_r+0x5fa>
 8008668:	9700      	str	r7, [sp, #0]
 800866a:	e049      	b.n	8008700 <_dtoa_r+0x6a0>
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <_dtoa_r+0x624>)
 800866e:	f7f8 f903 	bl	8000878 <__aeabi_dmul>
 8008672:	4680      	mov	r8, r0
 8008674:	4689      	mov	r9, r1
 8008676:	e7bd      	b.n	80085f4 <_dtoa_r+0x594>
 8008678:	0800b180 	.word	0x0800b180
 800867c:	0800b158 	.word	0x0800b158
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	3fe00000 	.word	0x3fe00000
 8008694:	9d01      	ldr	r5, [sp, #4]
 8008696:	4656      	mov	r6, sl
 8008698:	465f      	mov	r7, fp
 800869a:	4642      	mov	r2, r8
 800869c:	464b      	mov	r3, r9
 800869e:	4630      	mov	r0, r6
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f8 fa13 	bl	8000acc <__aeabi_ddiv>
 80086a6:	f7f8 fb97 	bl	8000dd8 <__aeabi_d2iz>
 80086aa:	4682      	mov	sl, r0
 80086ac:	f7f8 f87a 	bl	80007a4 <__aeabi_i2d>
 80086b0:	4642      	mov	r2, r8
 80086b2:	464b      	mov	r3, r9
 80086b4:	f7f8 f8e0 	bl	8000878 <__aeabi_dmul>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4630      	mov	r0, r6
 80086be:	4639      	mov	r1, r7
 80086c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086c4:	f7f7 ff20 	bl	8000508 <__aeabi_dsub>
 80086c8:	f805 6b01 	strb.w	r6, [r5], #1
 80086cc:	9e01      	ldr	r6, [sp, #4]
 80086ce:	9f03      	ldr	r7, [sp, #12]
 80086d0:	1bae      	subs	r6, r5, r6
 80086d2:	42b7      	cmp	r7, r6
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	d135      	bne.n	8008746 <_dtoa_r+0x6e6>
 80086da:	f7f7 ff17 	bl	800050c <__adddf3>
 80086de:	4642      	mov	r2, r8
 80086e0:	464b      	mov	r3, r9
 80086e2:	4606      	mov	r6, r0
 80086e4:	460f      	mov	r7, r1
 80086e6:	f7f8 fb57 	bl	8000d98 <__aeabi_dcmpgt>
 80086ea:	b9d0      	cbnz	r0, 8008722 <_dtoa_r+0x6c2>
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f7f8 fb28 	bl	8000d48 <__aeabi_dcmpeq>
 80086f8:	b110      	cbz	r0, 8008700 <_dtoa_r+0x6a0>
 80086fa:	f01a 0f01 	tst.w	sl, #1
 80086fe:	d110      	bne.n	8008722 <_dtoa_r+0x6c2>
 8008700:	4620      	mov	r0, r4
 8008702:	ee18 1a10 	vmov	r1, s16
 8008706:	f000 fe75 	bl	80093f4 <_Bfree>
 800870a:	2300      	movs	r3, #0
 800870c:	9800      	ldr	r0, [sp, #0]
 800870e:	702b      	strb	r3, [r5, #0]
 8008710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008712:	3001      	adds	r0, #1
 8008714:	6018      	str	r0, [r3, #0]
 8008716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008718:	2b00      	cmp	r3, #0
 800871a:	f43f acf1 	beq.w	8008100 <_dtoa_r+0xa0>
 800871e:	601d      	str	r5, [r3, #0]
 8008720:	e4ee      	b.n	8008100 <_dtoa_r+0xa0>
 8008722:	9f00      	ldr	r7, [sp, #0]
 8008724:	462b      	mov	r3, r5
 8008726:	461d      	mov	r5, r3
 8008728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800872c:	2a39      	cmp	r2, #57	; 0x39
 800872e:	d106      	bne.n	800873e <_dtoa_r+0x6de>
 8008730:	9a01      	ldr	r2, [sp, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d1f7      	bne.n	8008726 <_dtoa_r+0x6c6>
 8008736:	9901      	ldr	r1, [sp, #4]
 8008738:	2230      	movs	r2, #48	; 0x30
 800873a:	3701      	adds	r7, #1
 800873c:	700a      	strb	r2, [r1, #0]
 800873e:	781a      	ldrb	r2, [r3, #0]
 8008740:	3201      	adds	r2, #1
 8008742:	701a      	strb	r2, [r3, #0]
 8008744:	e790      	b.n	8008668 <_dtoa_r+0x608>
 8008746:	4ba6      	ldr	r3, [pc, #664]	; (80089e0 <_dtoa_r+0x980>)
 8008748:	2200      	movs	r2, #0
 800874a:	f7f8 f895 	bl	8000878 <__aeabi_dmul>
 800874e:	2200      	movs	r2, #0
 8008750:	2300      	movs	r3, #0
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	f7f8 faf7 	bl	8000d48 <__aeabi_dcmpeq>
 800875a:	2800      	cmp	r0, #0
 800875c:	d09d      	beq.n	800869a <_dtoa_r+0x63a>
 800875e:	e7cf      	b.n	8008700 <_dtoa_r+0x6a0>
 8008760:	9a08      	ldr	r2, [sp, #32]
 8008762:	2a00      	cmp	r2, #0
 8008764:	f000 80d7 	beq.w	8008916 <_dtoa_r+0x8b6>
 8008768:	9a06      	ldr	r2, [sp, #24]
 800876a:	2a01      	cmp	r2, #1
 800876c:	f300 80ba 	bgt.w	80088e4 <_dtoa_r+0x884>
 8008770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008772:	2a00      	cmp	r2, #0
 8008774:	f000 80b2 	beq.w	80088dc <_dtoa_r+0x87c>
 8008778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800877c:	9e07      	ldr	r6, [sp, #28]
 800877e:	9d04      	ldr	r5, [sp, #16]
 8008780:	9a04      	ldr	r2, [sp, #16]
 8008782:	441a      	add	r2, r3
 8008784:	9204      	str	r2, [sp, #16]
 8008786:	9a05      	ldr	r2, [sp, #20]
 8008788:	2101      	movs	r1, #1
 800878a:	441a      	add	r2, r3
 800878c:	4620      	mov	r0, r4
 800878e:	9205      	str	r2, [sp, #20]
 8008790:	f000 ff32 	bl	80095f8 <__i2b>
 8008794:	4607      	mov	r7, r0
 8008796:	2d00      	cmp	r5, #0
 8008798:	dd0c      	ble.n	80087b4 <_dtoa_r+0x754>
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd09      	ble.n	80087b4 <_dtoa_r+0x754>
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	9a04      	ldr	r2, [sp, #16]
 80087a4:	bfa8      	it	ge
 80087a6:	462b      	movge	r3, r5
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	9204      	str	r2, [sp, #16]
 80087ac:	9a05      	ldr	r2, [sp, #20]
 80087ae:	1aed      	subs	r5, r5, r3
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	9b07      	ldr	r3, [sp, #28]
 80087b6:	b31b      	cbz	r3, 8008800 <_dtoa_r+0x7a0>
 80087b8:	9b08      	ldr	r3, [sp, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80af 	beq.w	800891e <_dtoa_r+0x8be>
 80087c0:	2e00      	cmp	r6, #0
 80087c2:	dd13      	ble.n	80087ec <_dtoa_r+0x78c>
 80087c4:	4639      	mov	r1, r7
 80087c6:	4632      	mov	r2, r6
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 ffd5 	bl	8009778 <__pow5mult>
 80087ce:	ee18 2a10 	vmov	r2, s16
 80087d2:	4601      	mov	r1, r0
 80087d4:	4607      	mov	r7, r0
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 ff24 	bl	8009624 <__multiply>
 80087dc:	ee18 1a10 	vmov	r1, s16
 80087e0:	4680      	mov	r8, r0
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fe06 	bl	80093f4 <_Bfree>
 80087e8:	ee08 8a10 	vmov	s16, r8
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	1b9a      	subs	r2, r3, r6
 80087f0:	d006      	beq.n	8008800 <_dtoa_r+0x7a0>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 ffbe 	bl	8009778 <__pow5mult>
 80087fc:	ee08 0a10 	vmov	s16, r0
 8008800:	2101      	movs	r1, #1
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fef8 	bl	80095f8 <__i2b>
 8008808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880a:	2b00      	cmp	r3, #0
 800880c:	4606      	mov	r6, r0
 800880e:	f340 8088 	ble.w	8008922 <_dtoa_r+0x8c2>
 8008812:	461a      	mov	r2, r3
 8008814:	4601      	mov	r1, r0
 8008816:	4620      	mov	r0, r4
 8008818:	f000 ffae 	bl	8009778 <__pow5mult>
 800881c:	9b06      	ldr	r3, [sp, #24]
 800881e:	2b01      	cmp	r3, #1
 8008820:	4606      	mov	r6, r0
 8008822:	f340 8081 	ble.w	8008928 <_dtoa_r+0x8c8>
 8008826:	f04f 0800 	mov.w	r8, #0
 800882a:	6933      	ldr	r3, [r6, #16]
 800882c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008830:	6918      	ldr	r0, [r3, #16]
 8008832:	f000 fe91 	bl	8009558 <__hi0bits>
 8008836:	f1c0 0020 	rsb	r0, r0, #32
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	4418      	add	r0, r3
 800883e:	f010 001f 	ands.w	r0, r0, #31
 8008842:	f000 8092 	beq.w	800896a <_dtoa_r+0x90a>
 8008846:	f1c0 0320 	rsb	r3, r0, #32
 800884a:	2b04      	cmp	r3, #4
 800884c:	f340 808a 	ble.w	8008964 <_dtoa_r+0x904>
 8008850:	f1c0 001c 	rsb	r0, r0, #28
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	4403      	add	r3, r0
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9b05      	ldr	r3, [sp, #20]
 800885c:	4403      	add	r3, r0
 800885e:	4405      	add	r5, r0
 8008860:	9305      	str	r3, [sp, #20]
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd07      	ble.n	8008878 <_dtoa_r+0x818>
 8008868:	ee18 1a10 	vmov	r1, s16
 800886c:	461a      	mov	r2, r3
 800886e:	4620      	mov	r0, r4
 8008870:	f000 ffdc 	bl	800982c <__lshift>
 8008874:	ee08 0a10 	vmov	s16, r0
 8008878:	9b05      	ldr	r3, [sp, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dd05      	ble.n	800888a <_dtoa_r+0x82a>
 800887e:	4631      	mov	r1, r6
 8008880:	461a      	mov	r2, r3
 8008882:	4620      	mov	r0, r4
 8008884:	f000 ffd2 	bl	800982c <__lshift>
 8008888:	4606      	mov	r6, r0
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d06e      	beq.n	800896e <_dtoa_r+0x90e>
 8008890:	ee18 0a10 	vmov	r0, s16
 8008894:	4631      	mov	r1, r6
 8008896:	f001 f839 	bl	800990c <__mcmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	da67      	bge.n	800896e <_dtoa_r+0x90e>
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	ee18 1a10 	vmov	r1, s16
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	220a      	movs	r2, #10
 80088aa:	2300      	movs	r3, #0
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fdc3 	bl	8009438 <__multadd>
 80088b2:	9b08      	ldr	r3, [sp, #32]
 80088b4:	ee08 0a10 	vmov	s16, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 81b1 	beq.w	8008c20 <_dtoa_r+0xbc0>
 80088be:	2300      	movs	r3, #0
 80088c0:	4639      	mov	r1, r7
 80088c2:	220a      	movs	r2, #10
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fdb7 	bl	8009438 <__multadd>
 80088ca:	9b02      	ldr	r3, [sp, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	4607      	mov	r7, r0
 80088d0:	f300 808e 	bgt.w	80089f0 <_dtoa_r+0x990>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	dc51      	bgt.n	800897e <_dtoa_r+0x91e>
 80088da:	e089      	b.n	80089f0 <_dtoa_r+0x990>
 80088dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088e2:	e74b      	b.n	800877c <_dtoa_r+0x71c>
 80088e4:	9b03      	ldr	r3, [sp, #12]
 80088e6:	1e5e      	subs	r6, r3, #1
 80088e8:	9b07      	ldr	r3, [sp, #28]
 80088ea:	42b3      	cmp	r3, r6
 80088ec:	bfbf      	itttt	lt
 80088ee:	9b07      	ldrlt	r3, [sp, #28]
 80088f0:	9607      	strlt	r6, [sp, #28]
 80088f2:	1af2      	sublt	r2, r6, r3
 80088f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088f6:	bfb6      	itet	lt
 80088f8:	189b      	addlt	r3, r3, r2
 80088fa:	1b9e      	subge	r6, r3, r6
 80088fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	bfb8      	it	lt
 8008902:	2600      	movlt	r6, #0
 8008904:	2b00      	cmp	r3, #0
 8008906:	bfb7      	itett	lt
 8008908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800890c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008910:	1a9d      	sublt	r5, r3, r2
 8008912:	2300      	movlt	r3, #0
 8008914:	e734      	b.n	8008780 <_dtoa_r+0x720>
 8008916:	9e07      	ldr	r6, [sp, #28]
 8008918:	9d04      	ldr	r5, [sp, #16]
 800891a:	9f08      	ldr	r7, [sp, #32]
 800891c:	e73b      	b.n	8008796 <_dtoa_r+0x736>
 800891e:	9a07      	ldr	r2, [sp, #28]
 8008920:	e767      	b.n	80087f2 <_dtoa_r+0x792>
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	dc18      	bgt.n	800895a <_dtoa_r+0x8fa>
 8008928:	f1ba 0f00 	cmp.w	sl, #0
 800892c:	d115      	bne.n	800895a <_dtoa_r+0x8fa>
 800892e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008932:	b993      	cbnz	r3, 800895a <_dtoa_r+0x8fa>
 8008934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008938:	0d1b      	lsrs	r3, r3, #20
 800893a:	051b      	lsls	r3, r3, #20
 800893c:	b183      	cbz	r3, 8008960 <_dtoa_r+0x900>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	9b05      	ldr	r3, [sp, #20]
 8008946:	3301      	adds	r3, #1
 8008948:	9305      	str	r3, [sp, #20]
 800894a:	f04f 0801 	mov.w	r8, #1
 800894e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f af6a 	bne.w	800882a <_dtoa_r+0x7ca>
 8008956:	2001      	movs	r0, #1
 8008958:	e76f      	b.n	800883a <_dtoa_r+0x7da>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	e7f6      	b.n	800894e <_dtoa_r+0x8ee>
 8008960:	4698      	mov	r8, r3
 8008962:	e7f4      	b.n	800894e <_dtoa_r+0x8ee>
 8008964:	f43f af7d 	beq.w	8008862 <_dtoa_r+0x802>
 8008968:	4618      	mov	r0, r3
 800896a:	301c      	adds	r0, #28
 800896c:	e772      	b.n	8008854 <_dtoa_r+0x7f4>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc37      	bgt.n	80089e4 <_dtoa_r+0x984>
 8008974:	9b06      	ldr	r3, [sp, #24]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dd34      	ble.n	80089e4 <_dtoa_r+0x984>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	9302      	str	r3, [sp, #8]
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	b96b      	cbnz	r3, 800899e <_dtoa_r+0x93e>
 8008982:	4631      	mov	r1, r6
 8008984:	2205      	movs	r2, #5
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fd56 	bl	8009438 <__multadd>
 800898c:	4601      	mov	r1, r0
 800898e:	4606      	mov	r6, r0
 8008990:	ee18 0a10 	vmov	r0, s16
 8008994:	f000 ffba 	bl	800990c <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	f73f adbb 	bgt.w	8008514 <_dtoa_r+0x4b4>
 800899e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a0:	9d01      	ldr	r5, [sp, #4]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	4631      	mov	r1, r6
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fd21 	bl	80093f4 <_Bfree>
 80089b2:	2f00      	cmp	r7, #0
 80089b4:	f43f aea4 	beq.w	8008700 <_dtoa_r+0x6a0>
 80089b8:	f1b8 0f00 	cmp.w	r8, #0
 80089bc:	d005      	beq.n	80089ca <_dtoa_r+0x96a>
 80089be:	45b8      	cmp	r8, r7
 80089c0:	d003      	beq.n	80089ca <_dtoa_r+0x96a>
 80089c2:	4641      	mov	r1, r8
 80089c4:	4620      	mov	r0, r4
 80089c6:	f000 fd15 	bl	80093f4 <_Bfree>
 80089ca:	4639      	mov	r1, r7
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 fd11 	bl	80093f4 <_Bfree>
 80089d2:	e695      	b.n	8008700 <_dtoa_r+0x6a0>
 80089d4:	2600      	movs	r6, #0
 80089d6:	4637      	mov	r7, r6
 80089d8:	e7e1      	b.n	800899e <_dtoa_r+0x93e>
 80089da:	9700      	str	r7, [sp, #0]
 80089dc:	4637      	mov	r7, r6
 80089de:	e599      	b.n	8008514 <_dtoa_r+0x4b4>
 80089e0:	40240000 	.word	0x40240000
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f000 80ca 	beq.w	8008b80 <_dtoa_r+0xb20>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	2d00      	cmp	r5, #0
 80089f2:	dd05      	ble.n	8008a00 <_dtoa_r+0x9a0>
 80089f4:	4639      	mov	r1, r7
 80089f6:	462a      	mov	r2, r5
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 ff17 	bl	800982c <__lshift>
 80089fe:	4607      	mov	r7, r0
 8008a00:	f1b8 0f00 	cmp.w	r8, #0
 8008a04:	d05b      	beq.n	8008abe <_dtoa_r+0xa5e>
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fcb3 	bl	8009374 <_Balloc>
 8008a0e:	4605      	mov	r5, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <_dtoa_r+0x9be>
 8008a12:	4b87      	ldr	r3, [pc, #540]	; (8008c30 <_dtoa_r+0xbd0>)
 8008a14:	4602      	mov	r2, r0
 8008a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a1a:	f7ff bb3b 	b.w	8008094 <_dtoa_r+0x34>
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	3202      	adds	r2, #2
 8008a22:	0092      	lsls	r2, r2, #2
 8008a24:	f107 010c 	add.w	r1, r7, #12
 8008a28:	300c      	adds	r0, #12
 8008a2a:	f000 fc95 	bl	8009358 <memcpy>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4629      	mov	r1, r5
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 fefa 	bl	800982c <__lshift>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	f103 0901 	add.w	r9, r3, #1
 8008a3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a42:	4413      	add	r3, r2
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	f00a 0301 	and.w	r3, sl, #1
 8008a4a:	46b8      	mov	r8, r7
 8008a4c:	9304      	str	r3, [sp, #16]
 8008a4e:	4607      	mov	r7, r0
 8008a50:	4631      	mov	r1, r6
 8008a52:	ee18 0a10 	vmov	r0, s16
 8008a56:	f7ff fa77 	bl	8007f48 <quorem>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	9002      	str	r0, [sp, #8]
 8008a5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a62:	ee18 0a10 	vmov	r0, s16
 8008a66:	f000 ff51 	bl	800990c <__mcmp>
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	9003      	str	r0, [sp, #12]
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 ff67 	bl	8009944 <__mdiff>
 8008a76:	68c2      	ldr	r2, [r0, #12]
 8008a78:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	bb02      	cbnz	r2, 8008ac2 <_dtoa_r+0xa62>
 8008a80:	4601      	mov	r1, r0
 8008a82:	ee18 0a10 	vmov	r0, s16
 8008a86:	f000 ff41 	bl	800990c <__mcmp>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4620      	mov	r0, r4
 8008a90:	9207      	str	r2, [sp, #28]
 8008a92:	f000 fcaf 	bl	80093f4 <_Bfree>
 8008a96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a9a:	ea43 0102 	orr.w	r1, r3, r2
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	464d      	mov	r5, r9
 8008aa4:	d10f      	bne.n	8008ac6 <_dtoa_r+0xa66>
 8008aa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aaa:	d02a      	beq.n	8008b02 <_dtoa_r+0xaa2>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd02      	ble.n	8008ab8 <_dtoa_r+0xa58>
 8008ab2:	9b02      	ldr	r3, [sp, #8]
 8008ab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ab8:	f88b a000 	strb.w	sl, [fp]
 8008abc:	e775      	b.n	80089aa <_dtoa_r+0x94a>
 8008abe:	4638      	mov	r0, r7
 8008ac0:	e7ba      	b.n	8008a38 <_dtoa_r+0x9d8>
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	e7e2      	b.n	8008a8c <_dtoa_r+0xa2c>
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db04      	blt.n	8008ad6 <_dtoa_r+0xa76>
 8008acc:	9906      	ldr	r1, [sp, #24]
 8008ace:	430b      	orrs	r3, r1
 8008ad0:	9904      	ldr	r1, [sp, #16]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	d122      	bne.n	8008b1c <_dtoa_r+0xabc>
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	ddee      	ble.n	8008ab8 <_dtoa_r+0xa58>
 8008ada:	ee18 1a10 	vmov	r1, s16
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fea3 	bl	800982c <__lshift>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	ee08 0a10 	vmov	s16, r0
 8008aec:	f000 ff0e 	bl	800990c <__mcmp>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	dc03      	bgt.n	8008afc <_dtoa_r+0xa9c>
 8008af4:	d1e0      	bne.n	8008ab8 <_dtoa_r+0xa58>
 8008af6:	f01a 0f01 	tst.w	sl, #1
 8008afa:	d0dd      	beq.n	8008ab8 <_dtoa_r+0xa58>
 8008afc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b00:	d1d7      	bne.n	8008ab2 <_dtoa_r+0xa52>
 8008b02:	2339      	movs	r3, #57	; 0x39
 8008b04:	f88b 3000 	strb.w	r3, [fp]
 8008b08:	462b      	mov	r3, r5
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b12:	2a39      	cmp	r2, #57	; 0x39
 8008b14:	d071      	beq.n	8008bfa <_dtoa_r+0xb9a>
 8008b16:	3201      	adds	r2, #1
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	e746      	b.n	80089aa <_dtoa_r+0x94a>
 8008b1c:	2a00      	cmp	r2, #0
 8008b1e:	dd07      	ble.n	8008b30 <_dtoa_r+0xad0>
 8008b20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b24:	d0ed      	beq.n	8008b02 <_dtoa_r+0xaa2>
 8008b26:	f10a 0301 	add.w	r3, sl, #1
 8008b2a:	f88b 3000 	strb.w	r3, [fp]
 8008b2e:	e73c      	b.n	80089aa <_dtoa_r+0x94a>
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b36:	4599      	cmp	r9, r3
 8008b38:	d047      	beq.n	8008bca <_dtoa_r+0xb6a>
 8008b3a:	ee18 1a10 	vmov	r1, s16
 8008b3e:	2300      	movs	r3, #0
 8008b40:	220a      	movs	r2, #10
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 fc78 	bl	8009438 <__multadd>
 8008b48:	45b8      	cmp	r8, r7
 8008b4a:	ee08 0a10 	vmov	s16, r0
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	f04f 020a 	mov.w	r2, #10
 8008b56:	4641      	mov	r1, r8
 8008b58:	4620      	mov	r0, r4
 8008b5a:	d106      	bne.n	8008b6a <_dtoa_r+0xb0a>
 8008b5c:	f000 fc6c 	bl	8009438 <__multadd>
 8008b60:	4680      	mov	r8, r0
 8008b62:	4607      	mov	r7, r0
 8008b64:	f109 0901 	add.w	r9, r9, #1
 8008b68:	e772      	b.n	8008a50 <_dtoa_r+0x9f0>
 8008b6a:	f000 fc65 	bl	8009438 <__multadd>
 8008b6e:	4639      	mov	r1, r7
 8008b70:	4680      	mov	r8, r0
 8008b72:	2300      	movs	r3, #0
 8008b74:	220a      	movs	r2, #10
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 fc5e 	bl	8009438 <__multadd>
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	e7f1      	b.n	8008b64 <_dtoa_r+0xb04>
 8008b80:	9b03      	ldr	r3, [sp, #12]
 8008b82:	9302      	str	r3, [sp, #8]
 8008b84:	9d01      	ldr	r5, [sp, #4]
 8008b86:	ee18 0a10 	vmov	r0, s16
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	f7ff f9dc 	bl	8007f48 <quorem>
 8008b90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	f805 ab01 	strb.w	sl, [r5], #1
 8008b9a:	1aea      	subs	r2, r5, r3
 8008b9c:	9b02      	ldr	r3, [sp, #8]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	dd09      	ble.n	8008bb6 <_dtoa_r+0xb56>
 8008ba2:	ee18 1a10 	vmov	r1, s16
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	220a      	movs	r2, #10
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fc44 	bl	8009438 <__multadd>
 8008bb0:	ee08 0a10 	vmov	s16, r0
 8008bb4:	e7e7      	b.n	8008b86 <_dtoa_r+0xb26>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bfc8      	it	gt
 8008bbc:	461d      	movgt	r5, r3
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	bfd8      	it	le
 8008bc2:	2501      	movle	r5, #1
 8008bc4:	441d      	add	r5, r3
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	ee18 1a10 	vmov	r1, s16
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fe2b 	bl	800982c <__lshift>
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	ee08 0a10 	vmov	s16, r0
 8008bdc:	f000 fe96 	bl	800990c <__mcmp>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dc91      	bgt.n	8008b08 <_dtoa_r+0xaa8>
 8008be4:	d102      	bne.n	8008bec <_dtoa_r+0xb8c>
 8008be6:	f01a 0f01 	tst.w	sl, #1
 8008bea:	d18d      	bne.n	8008b08 <_dtoa_r+0xaa8>
 8008bec:	462b      	mov	r3, r5
 8008bee:	461d      	mov	r5, r3
 8008bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bf4:	2a30      	cmp	r2, #48	; 0x30
 8008bf6:	d0fa      	beq.n	8008bee <_dtoa_r+0xb8e>
 8008bf8:	e6d7      	b.n	80089aa <_dtoa_r+0x94a>
 8008bfa:	9a01      	ldr	r2, [sp, #4]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d184      	bne.n	8008b0a <_dtoa_r+0xaaa>
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	2331      	movs	r3, #49	; 0x31
 8008c08:	7013      	strb	r3, [r2, #0]
 8008c0a:	e6ce      	b.n	80089aa <_dtoa_r+0x94a>
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <_dtoa_r+0xbd4>)
 8008c0e:	f7ff ba95 	b.w	800813c <_dtoa_r+0xdc>
 8008c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f47f aa6e 	bne.w	80080f6 <_dtoa_r+0x96>
 8008c1a:	4b07      	ldr	r3, [pc, #28]	; (8008c38 <_dtoa_r+0xbd8>)
 8008c1c:	f7ff ba8e 	b.w	800813c <_dtoa_r+0xdc>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dcae      	bgt.n	8008b84 <_dtoa_r+0xb24>
 8008c26:	9b06      	ldr	r3, [sp, #24]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	f73f aea8 	bgt.w	800897e <_dtoa_r+0x91e>
 8008c2e:	e7a9      	b.n	8008b84 <_dtoa_r+0xb24>
 8008c30:	0800b070 	.word	0x0800b070
 8008c34:	0800ae74 	.word	0x0800ae74
 8008c38:	0800aff1 	.word	0x0800aff1

08008c3c <rshift>:
 8008c3c:	6903      	ldr	r3, [r0, #16]
 8008c3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c4a:	f100 0414 	add.w	r4, r0, #20
 8008c4e:	dd45      	ble.n	8008cdc <rshift+0xa0>
 8008c50:	f011 011f 	ands.w	r1, r1, #31
 8008c54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c5c:	d10c      	bne.n	8008c78 <rshift+0x3c>
 8008c5e:	f100 0710 	add.w	r7, r0, #16
 8008c62:	4629      	mov	r1, r5
 8008c64:	42b1      	cmp	r1, r6
 8008c66:	d334      	bcc.n	8008cd2 <rshift+0x96>
 8008c68:	1a9b      	subs	r3, r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	1eea      	subs	r2, r5, #3
 8008c6e:	4296      	cmp	r6, r2
 8008c70:	bf38      	it	cc
 8008c72:	2300      	movcc	r3, #0
 8008c74:	4423      	add	r3, r4
 8008c76:	e015      	b.n	8008ca4 <rshift+0x68>
 8008c78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c7c:	f1c1 0820 	rsb	r8, r1, #32
 8008c80:	40cf      	lsrs	r7, r1
 8008c82:	f105 0e04 	add.w	lr, r5, #4
 8008c86:	46a1      	mov	r9, r4
 8008c88:	4576      	cmp	r6, lr
 8008c8a:	46f4      	mov	ip, lr
 8008c8c:	d815      	bhi.n	8008cba <rshift+0x7e>
 8008c8e:	1a9a      	subs	r2, r3, r2
 8008c90:	0092      	lsls	r2, r2, #2
 8008c92:	3a04      	subs	r2, #4
 8008c94:	3501      	adds	r5, #1
 8008c96:	42ae      	cmp	r6, r5
 8008c98:	bf38      	it	cc
 8008c9a:	2200      	movcc	r2, #0
 8008c9c:	18a3      	adds	r3, r4, r2
 8008c9e:	50a7      	str	r7, [r4, r2]
 8008ca0:	b107      	cbz	r7, 8008ca4 <rshift+0x68>
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	1b1a      	subs	r2, r3, r4
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cac:	bf08      	it	eq
 8008cae:	2300      	moveq	r3, #0
 8008cb0:	6102      	str	r2, [r0, #16]
 8008cb2:	bf08      	it	eq
 8008cb4:	6143      	streq	r3, [r0, #20]
 8008cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cba:	f8dc c000 	ldr.w	ip, [ip]
 8008cbe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cc2:	ea4c 0707 	orr.w	r7, ip, r7
 8008cc6:	f849 7b04 	str.w	r7, [r9], #4
 8008cca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cce:	40cf      	lsrs	r7, r1
 8008cd0:	e7da      	b.n	8008c88 <rshift+0x4c>
 8008cd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cd6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cda:	e7c3      	b.n	8008c64 <rshift+0x28>
 8008cdc:	4623      	mov	r3, r4
 8008cde:	e7e1      	b.n	8008ca4 <rshift+0x68>

08008ce0 <__hexdig_fun>:
 8008ce0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d802      	bhi.n	8008cee <__hexdig_fun+0xe>
 8008ce8:	3820      	subs	r0, #32
 8008cea:	b2c0      	uxtb	r0, r0
 8008cec:	4770      	bx	lr
 8008cee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d801      	bhi.n	8008cfa <__hexdig_fun+0x1a>
 8008cf6:	3847      	subs	r0, #71	; 0x47
 8008cf8:	e7f7      	b.n	8008cea <__hexdig_fun+0xa>
 8008cfa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d801      	bhi.n	8008d06 <__hexdig_fun+0x26>
 8008d02:	3827      	subs	r0, #39	; 0x27
 8008d04:	e7f1      	b.n	8008cea <__hexdig_fun+0xa>
 8008d06:	2000      	movs	r0, #0
 8008d08:	4770      	bx	lr
	...

08008d0c <__gethex>:
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	ed2d 8b02 	vpush	{d8}
 8008d14:	b089      	sub	sp, #36	; 0x24
 8008d16:	ee08 0a10 	vmov	s16, r0
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	4bb4      	ldr	r3, [pc, #720]	; (8008ff0 <__gethex+0x2e4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	4618      	mov	r0, r3
 8008d24:	468b      	mov	fp, r1
 8008d26:	4690      	mov	r8, r2
 8008d28:	f7f7 fb8e 	bl	8000448 <strlen>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	f8db 2000 	ldr.w	r2, [fp]
 8008d32:	4403      	add	r3, r0
 8008d34:	4682      	mov	sl, r0
 8008d36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	1c93      	adds	r3, r2, #2
 8008d3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d46:	32fe      	adds	r2, #254	; 0xfe
 8008d48:	18d1      	adds	r1, r2, r3
 8008d4a:	461f      	mov	r7, r3
 8008d4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d50:	9100      	str	r1, [sp, #0]
 8008d52:	2830      	cmp	r0, #48	; 0x30
 8008d54:	d0f8      	beq.n	8008d48 <__gethex+0x3c>
 8008d56:	f7ff ffc3 	bl	8008ce0 <__hexdig_fun>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d13a      	bne.n	8008dd6 <__gethex+0xca>
 8008d60:	9901      	ldr	r1, [sp, #4]
 8008d62:	4652      	mov	r2, sl
 8008d64:	4638      	mov	r0, r7
 8008d66:	f001 fa33 	bl	800a1d0 <strncmp>
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d168      	bne.n	8008e42 <__gethex+0x136>
 8008d70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d74:	eb07 060a 	add.w	r6, r7, sl
 8008d78:	f7ff ffb2 	bl	8008ce0 <__hexdig_fun>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d062      	beq.n	8008e46 <__gethex+0x13a>
 8008d80:	4633      	mov	r3, r6
 8008d82:	7818      	ldrb	r0, [r3, #0]
 8008d84:	2830      	cmp	r0, #48	; 0x30
 8008d86:	461f      	mov	r7, r3
 8008d88:	f103 0301 	add.w	r3, r3, #1
 8008d8c:	d0f9      	beq.n	8008d82 <__gethex+0x76>
 8008d8e:	f7ff ffa7 	bl	8008ce0 <__hexdig_fun>
 8008d92:	2301      	movs	r3, #1
 8008d94:	fab0 f480 	clz	r4, r0
 8008d98:	0964      	lsrs	r4, r4, #5
 8008d9a:	4635      	mov	r5, r6
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	463a      	mov	r2, r7
 8008da0:	4616      	mov	r6, r2
 8008da2:	3201      	adds	r2, #1
 8008da4:	7830      	ldrb	r0, [r6, #0]
 8008da6:	f7ff ff9b 	bl	8008ce0 <__hexdig_fun>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d1f8      	bne.n	8008da0 <__gethex+0x94>
 8008dae:	9901      	ldr	r1, [sp, #4]
 8008db0:	4652      	mov	r2, sl
 8008db2:	4630      	mov	r0, r6
 8008db4:	f001 fa0c 	bl	800a1d0 <strncmp>
 8008db8:	b980      	cbnz	r0, 8008ddc <__gethex+0xd0>
 8008dba:	b94d      	cbnz	r5, 8008dd0 <__gethex+0xc4>
 8008dbc:	eb06 050a 	add.w	r5, r6, sl
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4616      	mov	r6, r2
 8008dc4:	3201      	adds	r2, #1
 8008dc6:	7830      	ldrb	r0, [r6, #0]
 8008dc8:	f7ff ff8a 	bl	8008ce0 <__hexdig_fun>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d1f8      	bne.n	8008dc2 <__gethex+0xb6>
 8008dd0:	1bad      	subs	r5, r5, r6
 8008dd2:	00ad      	lsls	r5, r5, #2
 8008dd4:	e004      	b.n	8008de0 <__gethex+0xd4>
 8008dd6:	2400      	movs	r4, #0
 8008dd8:	4625      	mov	r5, r4
 8008dda:	e7e0      	b.n	8008d9e <__gethex+0x92>
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	d1f7      	bne.n	8008dd0 <__gethex+0xc4>
 8008de0:	7833      	ldrb	r3, [r6, #0]
 8008de2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008de6:	2b50      	cmp	r3, #80	; 0x50
 8008de8:	d13b      	bne.n	8008e62 <__gethex+0x156>
 8008dea:	7873      	ldrb	r3, [r6, #1]
 8008dec:	2b2b      	cmp	r3, #43	; 0x2b
 8008dee:	d02c      	beq.n	8008e4a <__gethex+0x13e>
 8008df0:	2b2d      	cmp	r3, #45	; 0x2d
 8008df2:	d02e      	beq.n	8008e52 <__gethex+0x146>
 8008df4:	1c71      	adds	r1, r6, #1
 8008df6:	f04f 0900 	mov.w	r9, #0
 8008dfa:	7808      	ldrb	r0, [r1, #0]
 8008dfc:	f7ff ff70 	bl	8008ce0 <__hexdig_fun>
 8008e00:	1e43      	subs	r3, r0, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b18      	cmp	r3, #24
 8008e06:	d82c      	bhi.n	8008e62 <__gethex+0x156>
 8008e08:	f1a0 0210 	sub.w	r2, r0, #16
 8008e0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e10:	f7ff ff66 	bl	8008ce0 <__hexdig_fun>
 8008e14:	1e43      	subs	r3, r0, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b18      	cmp	r3, #24
 8008e1a:	d91d      	bls.n	8008e58 <__gethex+0x14c>
 8008e1c:	f1b9 0f00 	cmp.w	r9, #0
 8008e20:	d000      	beq.n	8008e24 <__gethex+0x118>
 8008e22:	4252      	negs	r2, r2
 8008e24:	4415      	add	r5, r2
 8008e26:	f8cb 1000 	str.w	r1, [fp]
 8008e2a:	b1e4      	cbz	r4, 8008e66 <__gethex+0x15a>
 8008e2c:	9b00      	ldr	r3, [sp, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bf14      	ite	ne
 8008e32:	2700      	movne	r7, #0
 8008e34:	2706      	moveq	r7, #6
 8008e36:	4638      	mov	r0, r7
 8008e38:	b009      	add	sp, #36	; 0x24
 8008e3a:	ecbd 8b02 	vpop	{d8}
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	463e      	mov	r6, r7
 8008e44:	4625      	mov	r5, r4
 8008e46:	2401      	movs	r4, #1
 8008e48:	e7ca      	b.n	8008de0 <__gethex+0xd4>
 8008e4a:	f04f 0900 	mov.w	r9, #0
 8008e4e:	1cb1      	adds	r1, r6, #2
 8008e50:	e7d3      	b.n	8008dfa <__gethex+0xee>
 8008e52:	f04f 0901 	mov.w	r9, #1
 8008e56:	e7fa      	b.n	8008e4e <__gethex+0x142>
 8008e58:	230a      	movs	r3, #10
 8008e5a:	fb03 0202 	mla	r2, r3, r2, r0
 8008e5e:	3a10      	subs	r2, #16
 8008e60:	e7d4      	b.n	8008e0c <__gethex+0x100>
 8008e62:	4631      	mov	r1, r6
 8008e64:	e7df      	b.n	8008e26 <__gethex+0x11a>
 8008e66:	1bf3      	subs	r3, r6, r7
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	2b07      	cmp	r3, #7
 8008e6e:	dc0b      	bgt.n	8008e88 <__gethex+0x17c>
 8008e70:	ee18 0a10 	vmov	r0, s16
 8008e74:	f000 fa7e 	bl	8009374 <_Balloc>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	b940      	cbnz	r0, 8008e8e <__gethex+0x182>
 8008e7c:	4b5d      	ldr	r3, [pc, #372]	; (8008ff4 <__gethex+0x2e8>)
 8008e7e:	4602      	mov	r2, r0
 8008e80:	21de      	movs	r1, #222	; 0xde
 8008e82:	485d      	ldr	r0, [pc, #372]	; (8008ff8 <__gethex+0x2ec>)
 8008e84:	f001 f9c6 	bl	800a214 <__assert_func>
 8008e88:	3101      	adds	r1, #1
 8008e8a:	105b      	asrs	r3, r3, #1
 8008e8c:	e7ee      	b.n	8008e6c <__gethex+0x160>
 8008e8e:	f100 0914 	add.w	r9, r0, #20
 8008e92:	f04f 0b00 	mov.w	fp, #0
 8008e96:	f1ca 0301 	rsb	r3, sl, #1
 8008e9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e9e:	f8cd b000 	str.w	fp, [sp]
 8008ea2:	9306      	str	r3, [sp, #24]
 8008ea4:	42b7      	cmp	r7, r6
 8008ea6:	d340      	bcc.n	8008f2a <__gethex+0x21e>
 8008ea8:	9802      	ldr	r0, [sp, #8]
 8008eaa:	9b00      	ldr	r3, [sp, #0]
 8008eac:	f840 3b04 	str.w	r3, [r0], #4
 8008eb0:	eba0 0009 	sub.w	r0, r0, r9
 8008eb4:	1080      	asrs	r0, r0, #2
 8008eb6:	0146      	lsls	r6, r0, #5
 8008eb8:	6120      	str	r0, [r4, #16]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 fb4c 	bl	8009558 <__hi0bits>
 8008ec0:	1a30      	subs	r0, r6, r0
 8008ec2:	f8d8 6000 	ldr.w	r6, [r8]
 8008ec6:	42b0      	cmp	r0, r6
 8008ec8:	dd63      	ble.n	8008f92 <__gethex+0x286>
 8008eca:	1b87      	subs	r7, r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f000 fef0 	bl	8009cb4 <__any_on>
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	b1a8      	cbz	r0, 8008f04 <__gethex+0x1f8>
 8008ed8:	1e7b      	subs	r3, r7, #1
 8008eda:	1159      	asrs	r1, r3, #5
 8008edc:	f003 021f 	and.w	r2, r3, #31
 8008ee0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008ee4:	f04f 0a01 	mov.w	sl, #1
 8008ee8:	fa0a f202 	lsl.w	r2, sl, r2
 8008eec:	420a      	tst	r2, r1
 8008eee:	d009      	beq.n	8008f04 <__gethex+0x1f8>
 8008ef0:	4553      	cmp	r3, sl
 8008ef2:	dd05      	ble.n	8008f00 <__gethex+0x1f4>
 8008ef4:	1eb9      	subs	r1, r7, #2
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fedc 	bl	8009cb4 <__any_on>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d145      	bne.n	8008f8c <__gethex+0x280>
 8008f00:	f04f 0a02 	mov.w	sl, #2
 8008f04:	4639      	mov	r1, r7
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7ff fe98 	bl	8008c3c <rshift>
 8008f0c:	443d      	add	r5, r7
 8008f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f12:	42ab      	cmp	r3, r5
 8008f14:	da4c      	bge.n	8008fb0 <__gethex+0x2a4>
 8008f16:	ee18 0a10 	vmov	r0, s16
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f000 fa6a 	bl	80093f4 <_Bfree>
 8008f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f22:	2300      	movs	r3, #0
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	27a3      	movs	r7, #163	; 0xa3
 8008f28:	e785      	b.n	8008e36 <__gethex+0x12a>
 8008f2a:	1e73      	subs	r3, r6, #1
 8008f2c:	9a05      	ldr	r2, [sp, #20]
 8008f2e:	9303      	str	r3, [sp, #12]
 8008f30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d019      	beq.n	8008f6c <__gethex+0x260>
 8008f38:	f1bb 0f20 	cmp.w	fp, #32
 8008f3c:	d107      	bne.n	8008f4e <__gethex+0x242>
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	9a00      	ldr	r2, [sp, #0]
 8008f42:	f843 2b04 	str.w	r2, [r3], #4
 8008f46:	9302      	str	r3, [sp, #8]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	469b      	mov	fp, r3
 8008f4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f52:	f7ff fec5 	bl	8008ce0 <__hexdig_fun>
 8008f56:	9b00      	ldr	r3, [sp, #0]
 8008f58:	f000 000f 	and.w	r0, r0, #15
 8008f5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f60:	4303      	orrs	r3, r0
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	f10b 0b04 	add.w	fp, fp, #4
 8008f68:	9b03      	ldr	r3, [sp, #12]
 8008f6a:	e00d      	b.n	8008f88 <__gethex+0x27c>
 8008f6c:	9b03      	ldr	r3, [sp, #12]
 8008f6e:	9a06      	ldr	r2, [sp, #24]
 8008f70:	4413      	add	r3, r2
 8008f72:	42bb      	cmp	r3, r7
 8008f74:	d3e0      	bcc.n	8008f38 <__gethex+0x22c>
 8008f76:	4618      	mov	r0, r3
 8008f78:	9901      	ldr	r1, [sp, #4]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	4652      	mov	r2, sl
 8008f7e:	f001 f927 	bl	800a1d0 <strncmp>
 8008f82:	9b07      	ldr	r3, [sp, #28]
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d1d7      	bne.n	8008f38 <__gethex+0x22c>
 8008f88:	461e      	mov	r6, r3
 8008f8a:	e78b      	b.n	8008ea4 <__gethex+0x198>
 8008f8c:	f04f 0a03 	mov.w	sl, #3
 8008f90:	e7b8      	b.n	8008f04 <__gethex+0x1f8>
 8008f92:	da0a      	bge.n	8008faa <__gethex+0x29e>
 8008f94:	1a37      	subs	r7, r6, r0
 8008f96:	4621      	mov	r1, r4
 8008f98:	ee18 0a10 	vmov	r0, s16
 8008f9c:	463a      	mov	r2, r7
 8008f9e:	f000 fc45 	bl	800982c <__lshift>
 8008fa2:	1bed      	subs	r5, r5, r7
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	f100 0914 	add.w	r9, r0, #20
 8008faa:	f04f 0a00 	mov.w	sl, #0
 8008fae:	e7ae      	b.n	8008f0e <__gethex+0x202>
 8008fb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fb4:	42a8      	cmp	r0, r5
 8008fb6:	dd72      	ble.n	800909e <__gethex+0x392>
 8008fb8:	1b45      	subs	r5, r0, r5
 8008fba:	42ae      	cmp	r6, r5
 8008fbc:	dc36      	bgt.n	800902c <__gethex+0x320>
 8008fbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d02a      	beq.n	800901c <__gethex+0x310>
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d02c      	beq.n	8009024 <__gethex+0x318>
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d11c      	bne.n	8009008 <__gethex+0x2fc>
 8008fce:	42ae      	cmp	r6, r5
 8008fd0:	d11a      	bne.n	8009008 <__gethex+0x2fc>
 8008fd2:	2e01      	cmp	r6, #1
 8008fd4:	d112      	bne.n	8008ffc <__gethex+0x2f0>
 8008fd6:	9a04      	ldr	r2, [sp, #16]
 8008fd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	f8c9 3000 	str.w	r3, [r9]
 8008fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008fe8:	2762      	movs	r7, #98	; 0x62
 8008fea:	601c      	str	r4, [r3, #0]
 8008fec:	e723      	b.n	8008e36 <__gethex+0x12a>
 8008fee:	bf00      	nop
 8008ff0:	0800b0e8 	.word	0x0800b0e8
 8008ff4:	0800b070 	.word	0x0800b070
 8008ff8:	0800b081 	.word	0x0800b081
 8008ffc:	1e71      	subs	r1, r6, #1
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 fe58 	bl	8009cb4 <__any_on>
 8009004:	2800      	cmp	r0, #0
 8009006:	d1e6      	bne.n	8008fd6 <__gethex+0x2ca>
 8009008:	ee18 0a10 	vmov	r0, s16
 800900c:	4621      	mov	r1, r4
 800900e:	f000 f9f1 	bl	80093f4 <_Bfree>
 8009012:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009014:	2300      	movs	r3, #0
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	2750      	movs	r7, #80	; 0x50
 800901a:	e70c      	b.n	8008e36 <__gethex+0x12a>
 800901c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f2      	bne.n	8009008 <__gethex+0x2fc>
 8009022:	e7d8      	b.n	8008fd6 <__gethex+0x2ca>
 8009024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1d5      	bne.n	8008fd6 <__gethex+0x2ca>
 800902a:	e7ed      	b.n	8009008 <__gethex+0x2fc>
 800902c:	1e6f      	subs	r7, r5, #1
 800902e:	f1ba 0f00 	cmp.w	sl, #0
 8009032:	d131      	bne.n	8009098 <__gethex+0x38c>
 8009034:	b127      	cbz	r7, 8009040 <__gethex+0x334>
 8009036:	4639      	mov	r1, r7
 8009038:	4620      	mov	r0, r4
 800903a:	f000 fe3b 	bl	8009cb4 <__any_on>
 800903e:	4682      	mov	sl, r0
 8009040:	117b      	asrs	r3, r7, #5
 8009042:	2101      	movs	r1, #1
 8009044:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009048:	f007 071f 	and.w	r7, r7, #31
 800904c:	fa01 f707 	lsl.w	r7, r1, r7
 8009050:	421f      	tst	r7, r3
 8009052:	4629      	mov	r1, r5
 8009054:	4620      	mov	r0, r4
 8009056:	bf18      	it	ne
 8009058:	f04a 0a02 	orrne.w	sl, sl, #2
 800905c:	1b76      	subs	r6, r6, r5
 800905e:	f7ff fded 	bl	8008c3c <rshift>
 8009062:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009066:	2702      	movs	r7, #2
 8009068:	f1ba 0f00 	cmp.w	sl, #0
 800906c:	d048      	beq.n	8009100 <__gethex+0x3f4>
 800906e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009072:	2b02      	cmp	r3, #2
 8009074:	d015      	beq.n	80090a2 <__gethex+0x396>
 8009076:	2b03      	cmp	r3, #3
 8009078:	d017      	beq.n	80090aa <__gethex+0x39e>
 800907a:	2b01      	cmp	r3, #1
 800907c:	d109      	bne.n	8009092 <__gethex+0x386>
 800907e:	f01a 0f02 	tst.w	sl, #2
 8009082:	d006      	beq.n	8009092 <__gethex+0x386>
 8009084:	f8d9 0000 	ldr.w	r0, [r9]
 8009088:	ea4a 0a00 	orr.w	sl, sl, r0
 800908c:	f01a 0f01 	tst.w	sl, #1
 8009090:	d10e      	bne.n	80090b0 <__gethex+0x3a4>
 8009092:	f047 0710 	orr.w	r7, r7, #16
 8009096:	e033      	b.n	8009100 <__gethex+0x3f4>
 8009098:	f04f 0a01 	mov.w	sl, #1
 800909c:	e7d0      	b.n	8009040 <__gethex+0x334>
 800909e:	2701      	movs	r7, #1
 80090a0:	e7e2      	b.n	8009068 <__gethex+0x35c>
 80090a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090a4:	f1c3 0301 	rsb	r3, r3, #1
 80090a8:	9315      	str	r3, [sp, #84]	; 0x54
 80090aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0f0      	beq.n	8009092 <__gethex+0x386>
 80090b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090b4:	f104 0314 	add.w	r3, r4, #20
 80090b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090c0:	f04f 0c00 	mov.w	ip, #0
 80090c4:	4618      	mov	r0, r3
 80090c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090ce:	d01c      	beq.n	800910a <__gethex+0x3fe>
 80090d0:	3201      	adds	r2, #1
 80090d2:	6002      	str	r2, [r0, #0]
 80090d4:	2f02      	cmp	r7, #2
 80090d6:	f104 0314 	add.w	r3, r4, #20
 80090da:	d13f      	bne.n	800915c <__gethex+0x450>
 80090dc:	f8d8 2000 	ldr.w	r2, [r8]
 80090e0:	3a01      	subs	r2, #1
 80090e2:	42b2      	cmp	r2, r6
 80090e4:	d10a      	bne.n	80090fc <__gethex+0x3f0>
 80090e6:	1171      	asrs	r1, r6, #5
 80090e8:	2201      	movs	r2, #1
 80090ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090ee:	f006 061f 	and.w	r6, r6, #31
 80090f2:	fa02 f606 	lsl.w	r6, r2, r6
 80090f6:	421e      	tst	r6, r3
 80090f8:	bf18      	it	ne
 80090fa:	4617      	movne	r7, r2
 80090fc:	f047 0720 	orr.w	r7, r7, #32
 8009100:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009102:	601c      	str	r4, [r3, #0]
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	601d      	str	r5, [r3, #0]
 8009108:	e695      	b.n	8008e36 <__gethex+0x12a>
 800910a:	4299      	cmp	r1, r3
 800910c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009110:	d8d8      	bhi.n	80090c4 <__gethex+0x3b8>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	459b      	cmp	fp, r3
 8009116:	db19      	blt.n	800914c <__gethex+0x440>
 8009118:	6861      	ldr	r1, [r4, #4]
 800911a:	ee18 0a10 	vmov	r0, s16
 800911e:	3101      	adds	r1, #1
 8009120:	f000 f928 	bl	8009374 <_Balloc>
 8009124:	4681      	mov	r9, r0
 8009126:	b918      	cbnz	r0, 8009130 <__gethex+0x424>
 8009128:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <__gethex+0x488>)
 800912a:	4602      	mov	r2, r0
 800912c:	2184      	movs	r1, #132	; 0x84
 800912e:	e6a8      	b.n	8008e82 <__gethex+0x176>
 8009130:	6922      	ldr	r2, [r4, #16]
 8009132:	3202      	adds	r2, #2
 8009134:	f104 010c 	add.w	r1, r4, #12
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	300c      	adds	r0, #12
 800913c:	f000 f90c 	bl	8009358 <memcpy>
 8009140:	4621      	mov	r1, r4
 8009142:	ee18 0a10 	vmov	r0, s16
 8009146:	f000 f955 	bl	80093f4 <_Bfree>
 800914a:	464c      	mov	r4, r9
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009154:	6122      	str	r2, [r4, #16]
 8009156:	2201      	movs	r2, #1
 8009158:	615a      	str	r2, [r3, #20]
 800915a:	e7bb      	b.n	80090d4 <__gethex+0x3c8>
 800915c:	6922      	ldr	r2, [r4, #16]
 800915e:	455a      	cmp	r2, fp
 8009160:	dd0b      	ble.n	800917a <__gethex+0x46e>
 8009162:	2101      	movs	r1, #1
 8009164:	4620      	mov	r0, r4
 8009166:	f7ff fd69 	bl	8008c3c <rshift>
 800916a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800916e:	3501      	adds	r5, #1
 8009170:	42ab      	cmp	r3, r5
 8009172:	f6ff aed0 	blt.w	8008f16 <__gethex+0x20a>
 8009176:	2701      	movs	r7, #1
 8009178:	e7c0      	b.n	80090fc <__gethex+0x3f0>
 800917a:	f016 061f 	ands.w	r6, r6, #31
 800917e:	d0fa      	beq.n	8009176 <__gethex+0x46a>
 8009180:	4453      	add	r3, sl
 8009182:	f1c6 0620 	rsb	r6, r6, #32
 8009186:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800918a:	f000 f9e5 	bl	8009558 <__hi0bits>
 800918e:	42b0      	cmp	r0, r6
 8009190:	dbe7      	blt.n	8009162 <__gethex+0x456>
 8009192:	e7f0      	b.n	8009176 <__gethex+0x46a>
 8009194:	0800b070 	.word	0x0800b070

08009198 <L_shift>:
 8009198:	f1c2 0208 	rsb	r2, r2, #8
 800919c:	0092      	lsls	r2, r2, #2
 800919e:	b570      	push	{r4, r5, r6, lr}
 80091a0:	f1c2 0620 	rsb	r6, r2, #32
 80091a4:	6843      	ldr	r3, [r0, #4]
 80091a6:	6804      	ldr	r4, [r0, #0]
 80091a8:	fa03 f506 	lsl.w	r5, r3, r6
 80091ac:	432c      	orrs	r4, r5
 80091ae:	40d3      	lsrs	r3, r2
 80091b0:	6004      	str	r4, [r0, #0]
 80091b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80091b6:	4288      	cmp	r0, r1
 80091b8:	d3f4      	bcc.n	80091a4 <L_shift+0xc>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}

080091bc <__match>:
 80091bc:	b530      	push	{r4, r5, lr}
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	3301      	adds	r3, #1
 80091c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c6:	b914      	cbnz	r4, 80091ce <__match+0x12>
 80091c8:	6003      	str	r3, [r0, #0]
 80091ca:	2001      	movs	r0, #1
 80091cc:	bd30      	pop	{r4, r5, pc}
 80091ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80091d6:	2d19      	cmp	r5, #25
 80091d8:	bf98      	it	ls
 80091da:	3220      	addls	r2, #32
 80091dc:	42a2      	cmp	r2, r4
 80091de:	d0f0      	beq.n	80091c2 <__match+0x6>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7f3      	b.n	80091cc <__match+0x10>

080091e4 <__hexnan>:
 80091e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	680b      	ldr	r3, [r1, #0]
 80091ea:	115e      	asrs	r6, r3, #5
 80091ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091f0:	f013 031f 	ands.w	r3, r3, #31
 80091f4:	b087      	sub	sp, #28
 80091f6:	bf18      	it	ne
 80091f8:	3604      	addne	r6, #4
 80091fa:	2500      	movs	r5, #0
 80091fc:	1f37      	subs	r7, r6, #4
 80091fe:	4690      	mov	r8, r2
 8009200:	6802      	ldr	r2, [r0, #0]
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	4682      	mov	sl, r0
 8009206:	f846 5c04 	str.w	r5, [r6, #-4]
 800920a:	46b9      	mov	r9, r7
 800920c:	463c      	mov	r4, r7
 800920e:	9502      	str	r5, [sp, #8]
 8009210:	46ab      	mov	fp, r5
 8009212:	7851      	ldrb	r1, [r2, #1]
 8009214:	1c53      	adds	r3, r2, #1
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	b341      	cbz	r1, 800926c <__hexnan+0x88>
 800921a:	4608      	mov	r0, r1
 800921c:	9205      	str	r2, [sp, #20]
 800921e:	9104      	str	r1, [sp, #16]
 8009220:	f7ff fd5e 	bl	8008ce0 <__hexdig_fun>
 8009224:	2800      	cmp	r0, #0
 8009226:	d14f      	bne.n	80092c8 <__hexnan+0xe4>
 8009228:	9904      	ldr	r1, [sp, #16]
 800922a:	9a05      	ldr	r2, [sp, #20]
 800922c:	2920      	cmp	r1, #32
 800922e:	d818      	bhi.n	8009262 <__hexnan+0x7e>
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	459b      	cmp	fp, r3
 8009234:	dd13      	ble.n	800925e <__hexnan+0x7a>
 8009236:	454c      	cmp	r4, r9
 8009238:	d206      	bcs.n	8009248 <__hexnan+0x64>
 800923a:	2d07      	cmp	r5, #7
 800923c:	dc04      	bgt.n	8009248 <__hexnan+0x64>
 800923e:	462a      	mov	r2, r5
 8009240:	4649      	mov	r1, r9
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff ffa8 	bl	8009198 <L_shift>
 8009248:	4544      	cmp	r4, r8
 800924a:	d950      	bls.n	80092ee <__hexnan+0x10a>
 800924c:	2300      	movs	r3, #0
 800924e:	f1a4 0904 	sub.w	r9, r4, #4
 8009252:	f844 3c04 	str.w	r3, [r4, #-4]
 8009256:	f8cd b008 	str.w	fp, [sp, #8]
 800925a:	464c      	mov	r4, r9
 800925c:	461d      	mov	r5, r3
 800925e:	9a03      	ldr	r2, [sp, #12]
 8009260:	e7d7      	b.n	8009212 <__hexnan+0x2e>
 8009262:	2929      	cmp	r1, #41	; 0x29
 8009264:	d156      	bne.n	8009314 <__hexnan+0x130>
 8009266:	3202      	adds	r2, #2
 8009268:	f8ca 2000 	str.w	r2, [sl]
 800926c:	f1bb 0f00 	cmp.w	fp, #0
 8009270:	d050      	beq.n	8009314 <__hexnan+0x130>
 8009272:	454c      	cmp	r4, r9
 8009274:	d206      	bcs.n	8009284 <__hexnan+0xa0>
 8009276:	2d07      	cmp	r5, #7
 8009278:	dc04      	bgt.n	8009284 <__hexnan+0xa0>
 800927a:	462a      	mov	r2, r5
 800927c:	4649      	mov	r1, r9
 800927e:	4620      	mov	r0, r4
 8009280:	f7ff ff8a 	bl	8009198 <L_shift>
 8009284:	4544      	cmp	r4, r8
 8009286:	d934      	bls.n	80092f2 <__hexnan+0x10e>
 8009288:	f1a8 0204 	sub.w	r2, r8, #4
 800928c:	4623      	mov	r3, r4
 800928e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009292:	f842 1f04 	str.w	r1, [r2, #4]!
 8009296:	429f      	cmp	r7, r3
 8009298:	d2f9      	bcs.n	800928e <__hexnan+0xaa>
 800929a:	1b3b      	subs	r3, r7, r4
 800929c:	f023 0303 	bic.w	r3, r3, #3
 80092a0:	3304      	adds	r3, #4
 80092a2:	3401      	adds	r4, #1
 80092a4:	3e03      	subs	r6, #3
 80092a6:	42b4      	cmp	r4, r6
 80092a8:	bf88      	it	hi
 80092aa:	2304      	movhi	r3, #4
 80092ac:	4443      	add	r3, r8
 80092ae:	2200      	movs	r2, #0
 80092b0:	f843 2b04 	str.w	r2, [r3], #4
 80092b4:	429f      	cmp	r7, r3
 80092b6:	d2fb      	bcs.n	80092b0 <__hexnan+0xcc>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	b91b      	cbnz	r3, 80092c4 <__hexnan+0xe0>
 80092bc:	4547      	cmp	r7, r8
 80092be:	d127      	bne.n	8009310 <__hexnan+0x12c>
 80092c0:	2301      	movs	r3, #1
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	2005      	movs	r0, #5
 80092c6:	e026      	b.n	8009316 <__hexnan+0x132>
 80092c8:	3501      	adds	r5, #1
 80092ca:	2d08      	cmp	r5, #8
 80092cc:	f10b 0b01 	add.w	fp, fp, #1
 80092d0:	dd06      	ble.n	80092e0 <__hexnan+0xfc>
 80092d2:	4544      	cmp	r4, r8
 80092d4:	d9c3      	bls.n	800925e <__hexnan+0x7a>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80092dc:	2501      	movs	r5, #1
 80092de:	3c04      	subs	r4, #4
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	f000 000f 	and.w	r0, r0, #15
 80092e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80092ea:	6022      	str	r2, [r4, #0]
 80092ec:	e7b7      	b.n	800925e <__hexnan+0x7a>
 80092ee:	2508      	movs	r5, #8
 80092f0:	e7b5      	b.n	800925e <__hexnan+0x7a>
 80092f2:	9b01      	ldr	r3, [sp, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0df      	beq.n	80092b8 <__hexnan+0xd4>
 80092f8:	f04f 32ff 	mov.w	r2, #4294967295
 80092fc:	f1c3 0320 	rsb	r3, r3, #32
 8009300:	fa22 f303 	lsr.w	r3, r2, r3
 8009304:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009308:	401a      	ands	r2, r3
 800930a:	f846 2c04 	str.w	r2, [r6, #-4]
 800930e:	e7d3      	b.n	80092b8 <__hexnan+0xd4>
 8009310:	3f04      	subs	r7, #4
 8009312:	e7d1      	b.n	80092b8 <__hexnan+0xd4>
 8009314:	2004      	movs	r0, #4
 8009316:	b007      	add	sp, #28
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800931c <_localeconv_r>:
 800931c:	4800      	ldr	r0, [pc, #0]	; (8009320 <_localeconv_r+0x4>)
 800931e:	4770      	bx	lr
 8009320:	20000170 	.word	0x20000170

08009324 <malloc>:
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <malloc+0xc>)
 8009326:	4601      	mov	r1, r0
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f000 bd67 	b.w	8009dfc <_malloc_r>
 800932e:	bf00      	nop
 8009330:	20000018 	.word	0x20000018

08009334 <__ascii_mbtowc>:
 8009334:	b082      	sub	sp, #8
 8009336:	b901      	cbnz	r1, 800933a <__ascii_mbtowc+0x6>
 8009338:	a901      	add	r1, sp, #4
 800933a:	b142      	cbz	r2, 800934e <__ascii_mbtowc+0x1a>
 800933c:	b14b      	cbz	r3, 8009352 <__ascii_mbtowc+0x1e>
 800933e:	7813      	ldrb	r3, [r2, #0]
 8009340:	600b      	str	r3, [r1, #0]
 8009342:	7812      	ldrb	r2, [r2, #0]
 8009344:	1e10      	subs	r0, r2, #0
 8009346:	bf18      	it	ne
 8009348:	2001      	movne	r0, #1
 800934a:	b002      	add	sp, #8
 800934c:	4770      	bx	lr
 800934e:	4610      	mov	r0, r2
 8009350:	e7fb      	b.n	800934a <__ascii_mbtowc+0x16>
 8009352:	f06f 0001 	mvn.w	r0, #1
 8009356:	e7f8      	b.n	800934a <__ascii_mbtowc+0x16>

08009358 <memcpy>:
 8009358:	440a      	add	r2, r1
 800935a:	4291      	cmp	r1, r2
 800935c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	4770      	bx	lr
 8009364:	b510      	push	{r4, lr}
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	4291      	cmp	r1, r2
 8009370:	d1f9      	bne.n	8009366 <memcpy+0xe>
 8009372:	bd10      	pop	{r4, pc}

08009374 <_Balloc>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	b976      	cbnz	r6, 800939c <_Balloc+0x28>
 800937e:	2010      	movs	r0, #16
 8009380:	f7ff ffd0 	bl	8009324 <malloc>
 8009384:	4602      	mov	r2, r0
 8009386:	6260      	str	r0, [r4, #36]	; 0x24
 8009388:	b920      	cbnz	r0, 8009394 <_Balloc+0x20>
 800938a:	4b18      	ldr	r3, [pc, #96]	; (80093ec <_Balloc+0x78>)
 800938c:	4818      	ldr	r0, [pc, #96]	; (80093f0 <_Balloc+0x7c>)
 800938e:	2166      	movs	r1, #102	; 0x66
 8009390:	f000 ff40 	bl	800a214 <__assert_func>
 8009394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009398:	6006      	str	r6, [r0, #0]
 800939a:	60c6      	str	r6, [r0, #12]
 800939c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800939e:	68f3      	ldr	r3, [r6, #12]
 80093a0:	b183      	cbz	r3, 80093c4 <_Balloc+0x50>
 80093a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093aa:	b9b8      	cbnz	r0, 80093dc <_Balloc+0x68>
 80093ac:	2101      	movs	r1, #1
 80093ae:	fa01 f605 	lsl.w	r6, r1, r5
 80093b2:	1d72      	adds	r2, r6, #5
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fc9d 	bl	8009cf6 <_calloc_r>
 80093bc:	b160      	cbz	r0, 80093d8 <_Balloc+0x64>
 80093be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c2:	e00e      	b.n	80093e2 <_Balloc+0x6e>
 80093c4:	2221      	movs	r2, #33	; 0x21
 80093c6:	2104      	movs	r1, #4
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fc94 	bl	8009cf6 <_calloc_r>
 80093ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093d0:	60f0      	str	r0, [r6, #12]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e4      	bne.n	80093a2 <_Balloc+0x2e>
 80093d8:	2000      	movs	r0, #0
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	6802      	ldr	r2, [r0, #0]
 80093de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e2:	2300      	movs	r3, #0
 80093e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e8:	e7f7      	b.n	80093da <_Balloc+0x66>
 80093ea:	bf00      	nop
 80093ec:	0800affe 	.word	0x0800affe
 80093f0:	0800b0fc 	.word	0x0800b0fc

080093f4 <_Bfree>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093f8:	4605      	mov	r5, r0
 80093fa:	460c      	mov	r4, r1
 80093fc:	b976      	cbnz	r6, 800941c <_Bfree+0x28>
 80093fe:	2010      	movs	r0, #16
 8009400:	f7ff ff90 	bl	8009324 <malloc>
 8009404:	4602      	mov	r2, r0
 8009406:	6268      	str	r0, [r5, #36]	; 0x24
 8009408:	b920      	cbnz	r0, 8009414 <_Bfree+0x20>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <_Bfree+0x3c>)
 800940c:	4809      	ldr	r0, [pc, #36]	; (8009434 <_Bfree+0x40>)
 800940e:	218a      	movs	r1, #138	; 0x8a
 8009410:	f000 ff00 	bl	800a214 <__assert_func>
 8009414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009418:	6006      	str	r6, [r0, #0]
 800941a:	60c6      	str	r6, [r0, #12]
 800941c:	b13c      	cbz	r4, 800942e <_Bfree+0x3a>
 800941e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009420:	6862      	ldr	r2, [r4, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009428:	6021      	str	r1, [r4, #0]
 800942a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	0800affe 	.word	0x0800affe
 8009434:	0800b0fc 	.word	0x0800b0fc

08009438 <__multadd>:
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	690d      	ldr	r5, [r1, #16]
 800943e:	4607      	mov	r7, r0
 8009440:	460c      	mov	r4, r1
 8009442:	461e      	mov	r6, r3
 8009444:	f101 0c14 	add.w	ip, r1, #20
 8009448:	2000      	movs	r0, #0
 800944a:	f8dc 3000 	ldr.w	r3, [ip]
 800944e:	b299      	uxth	r1, r3
 8009450:	fb02 6101 	mla	r1, r2, r1, r6
 8009454:	0c1e      	lsrs	r6, r3, #16
 8009456:	0c0b      	lsrs	r3, r1, #16
 8009458:	fb02 3306 	mla	r3, r2, r6, r3
 800945c:	b289      	uxth	r1, r1
 800945e:	3001      	adds	r0, #1
 8009460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009464:	4285      	cmp	r5, r0
 8009466:	f84c 1b04 	str.w	r1, [ip], #4
 800946a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800946e:	dcec      	bgt.n	800944a <__multadd+0x12>
 8009470:	b30e      	cbz	r6, 80094b6 <__multadd+0x7e>
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	42ab      	cmp	r3, r5
 8009476:	dc19      	bgt.n	80094ac <__multadd+0x74>
 8009478:	6861      	ldr	r1, [r4, #4]
 800947a:	4638      	mov	r0, r7
 800947c:	3101      	adds	r1, #1
 800947e:	f7ff ff79 	bl	8009374 <_Balloc>
 8009482:	4680      	mov	r8, r0
 8009484:	b928      	cbnz	r0, 8009492 <__multadd+0x5a>
 8009486:	4602      	mov	r2, r0
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <__multadd+0x84>)
 800948a:	480d      	ldr	r0, [pc, #52]	; (80094c0 <__multadd+0x88>)
 800948c:	21b5      	movs	r1, #181	; 0xb5
 800948e:	f000 fec1 	bl	800a214 <__assert_func>
 8009492:	6922      	ldr	r2, [r4, #16]
 8009494:	3202      	adds	r2, #2
 8009496:	f104 010c 	add.w	r1, r4, #12
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	300c      	adds	r0, #12
 800949e:	f7ff ff5b 	bl	8009358 <memcpy>
 80094a2:	4621      	mov	r1, r4
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ffa5 	bl	80093f4 <_Bfree>
 80094aa:	4644      	mov	r4, r8
 80094ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b0:	3501      	adds	r5, #1
 80094b2:	615e      	str	r6, [r3, #20]
 80094b4:	6125      	str	r5, [r4, #16]
 80094b6:	4620      	mov	r0, r4
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	0800b070 	.word	0x0800b070
 80094c0:	0800b0fc 	.word	0x0800b0fc

080094c4 <__s2b>:
 80094c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	4615      	mov	r5, r2
 80094cc:	461f      	mov	r7, r3
 80094ce:	2209      	movs	r2, #9
 80094d0:	3308      	adds	r3, #8
 80094d2:	4606      	mov	r6, r0
 80094d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094d8:	2100      	movs	r1, #0
 80094da:	2201      	movs	r2, #1
 80094dc:	429a      	cmp	r2, r3
 80094de:	db09      	blt.n	80094f4 <__s2b+0x30>
 80094e0:	4630      	mov	r0, r6
 80094e2:	f7ff ff47 	bl	8009374 <_Balloc>
 80094e6:	b940      	cbnz	r0, 80094fa <__s2b+0x36>
 80094e8:	4602      	mov	r2, r0
 80094ea:	4b19      	ldr	r3, [pc, #100]	; (8009550 <__s2b+0x8c>)
 80094ec:	4819      	ldr	r0, [pc, #100]	; (8009554 <__s2b+0x90>)
 80094ee:	21ce      	movs	r1, #206	; 0xce
 80094f0:	f000 fe90 	bl	800a214 <__assert_func>
 80094f4:	0052      	lsls	r2, r2, #1
 80094f6:	3101      	adds	r1, #1
 80094f8:	e7f0      	b.n	80094dc <__s2b+0x18>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	6143      	str	r3, [r0, #20]
 80094fe:	2d09      	cmp	r5, #9
 8009500:	f04f 0301 	mov.w	r3, #1
 8009504:	6103      	str	r3, [r0, #16]
 8009506:	dd16      	ble.n	8009536 <__s2b+0x72>
 8009508:	f104 0909 	add.w	r9, r4, #9
 800950c:	46c8      	mov	r8, r9
 800950e:	442c      	add	r4, r5
 8009510:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009514:	4601      	mov	r1, r0
 8009516:	3b30      	subs	r3, #48	; 0x30
 8009518:	220a      	movs	r2, #10
 800951a:	4630      	mov	r0, r6
 800951c:	f7ff ff8c 	bl	8009438 <__multadd>
 8009520:	45a0      	cmp	r8, r4
 8009522:	d1f5      	bne.n	8009510 <__s2b+0x4c>
 8009524:	f1a5 0408 	sub.w	r4, r5, #8
 8009528:	444c      	add	r4, r9
 800952a:	1b2d      	subs	r5, r5, r4
 800952c:	1963      	adds	r3, r4, r5
 800952e:	42bb      	cmp	r3, r7
 8009530:	db04      	blt.n	800953c <__s2b+0x78>
 8009532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009536:	340a      	adds	r4, #10
 8009538:	2509      	movs	r5, #9
 800953a:	e7f6      	b.n	800952a <__s2b+0x66>
 800953c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009540:	4601      	mov	r1, r0
 8009542:	3b30      	subs	r3, #48	; 0x30
 8009544:	220a      	movs	r2, #10
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ff76 	bl	8009438 <__multadd>
 800954c:	e7ee      	b.n	800952c <__s2b+0x68>
 800954e:	bf00      	nop
 8009550:	0800b070 	.word	0x0800b070
 8009554:	0800b0fc 	.word	0x0800b0fc

08009558 <__hi0bits>:
 8009558:	0c03      	lsrs	r3, r0, #16
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	b9d3      	cbnz	r3, 8009594 <__hi0bits+0x3c>
 800955e:	0400      	lsls	r0, r0, #16
 8009560:	2310      	movs	r3, #16
 8009562:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009566:	bf04      	itt	eq
 8009568:	0200      	lsleq	r0, r0, #8
 800956a:	3308      	addeq	r3, #8
 800956c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009570:	bf04      	itt	eq
 8009572:	0100      	lsleq	r0, r0, #4
 8009574:	3304      	addeq	r3, #4
 8009576:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800957a:	bf04      	itt	eq
 800957c:	0080      	lsleq	r0, r0, #2
 800957e:	3302      	addeq	r3, #2
 8009580:	2800      	cmp	r0, #0
 8009582:	db05      	blt.n	8009590 <__hi0bits+0x38>
 8009584:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009588:	f103 0301 	add.w	r3, r3, #1
 800958c:	bf08      	it	eq
 800958e:	2320      	moveq	r3, #32
 8009590:	4618      	mov	r0, r3
 8009592:	4770      	bx	lr
 8009594:	2300      	movs	r3, #0
 8009596:	e7e4      	b.n	8009562 <__hi0bits+0xa>

08009598 <__lo0bits>:
 8009598:	6803      	ldr	r3, [r0, #0]
 800959a:	f013 0207 	ands.w	r2, r3, #7
 800959e:	4601      	mov	r1, r0
 80095a0:	d00b      	beq.n	80095ba <__lo0bits+0x22>
 80095a2:	07da      	lsls	r2, r3, #31
 80095a4:	d423      	bmi.n	80095ee <__lo0bits+0x56>
 80095a6:	0798      	lsls	r0, r3, #30
 80095a8:	bf49      	itett	mi
 80095aa:	085b      	lsrmi	r3, r3, #1
 80095ac:	089b      	lsrpl	r3, r3, #2
 80095ae:	2001      	movmi	r0, #1
 80095b0:	600b      	strmi	r3, [r1, #0]
 80095b2:	bf5c      	itt	pl
 80095b4:	600b      	strpl	r3, [r1, #0]
 80095b6:	2002      	movpl	r0, #2
 80095b8:	4770      	bx	lr
 80095ba:	b298      	uxth	r0, r3
 80095bc:	b9a8      	cbnz	r0, 80095ea <__lo0bits+0x52>
 80095be:	0c1b      	lsrs	r3, r3, #16
 80095c0:	2010      	movs	r0, #16
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	b90a      	cbnz	r2, 80095ca <__lo0bits+0x32>
 80095c6:	3008      	adds	r0, #8
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	071a      	lsls	r2, r3, #28
 80095cc:	bf04      	itt	eq
 80095ce:	091b      	lsreq	r3, r3, #4
 80095d0:	3004      	addeq	r0, #4
 80095d2:	079a      	lsls	r2, r3, #30
 80095d4:	bf04      	itt	eq
 80095d6:	089b      	lsreq	r3, r3, #2
 80095d8:	3002      	addeq	r0, #2
 80095da:	07da      	lsls	r2, r3, #31
 80095dc:	d403      	bmi.n	80095e6 <__lo0bits+0x4e>
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	f100 0001 	add.w	r0, r0, #1
 80095e4:	d005      	beq.n	80095f2 <__lo0bits+0x5a>
 80095e6:	600b      	str	r3, [r1, #0]
 80095e8:	4770      	bx	lr
 80095ea:	4610      	mov	r0, r2
 80095ec:	e7e9      	b.n	80095c2 <__lo0bits+0x2a>
 80095ee:	2000      	movs	r0, #0
 80095f0:	4770      	bx	lr
 80095f2:	2020      	movs	r0, #32
 80095f4:	4770      	bx	lr
	...

080095f8 <__i2b>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	2101      	movs	r1, #1
 80095fe:	f7ff feb9 	bl	8009374 <_Balloc>
 8009602:	4602      	mov	r2, r0
 8009604:	b928      	cbnz	r0, 8009612 <__i2b+0x1a>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <__i2b+0x24>)
 8009608:	4805      	ldr	r0, [pc, #20]	; (8009620 <__i2b+0x28>)
 800960a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800960e:	f000 fe01 	bl	800a214 <__assert_func>
 8009612:	2301      	movs	r3, #1
 8009614:	6144      	str	r4, [r0, #20]
 8009616:	6103      	str	r3, [r0, #16]
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	0800b070 	.word	0x0800b070
 8009620:	0800b0fc 	.word	0x0800b0fc

08009624 <__multiply>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4691      	mov	r9, r2
 800962a:	690a      	ldr	r2, [r1, #16]
 800962c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009630:	429a      	cmp	r2, r3
 8009632:	bfb8      	it	lt
 8009634:	460b      	movlt	r3, r1
 8009636:	460c      	mov	r4, r1
 8009638:	bfbc      	itt	lt
 800963a:	464c      	movlt	r4, r9
 800963c:	4699      	movlt	r9, r3
 800963e:	6927      	ldr	r7, [r4, #16]
 8009640:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009644:	68a3      	ldr	r3, [r4, #8]
 8009646:	6861      	ldr	r1, [r4, #4]
 8009648:	eb07 060a 	add.w	r6, r7, sl
 800964c:	42b3      	cmp	r3, r6
 800964e:	b085      	sub	sp, #20
 8009650:	bfb8      	it	lt
 8009652:	3101      	addlt	r1, #1
 8009654:	f7ff fe8e 	bl	8009374 <_Balloc>
 8009658:	b930      	cbnz	r0, 8009668 <__multiply+0x44>
 800965a:	4602      	mov	r2, r0
 800965c:	4b44      	ldr	r3, [pc, #272]	; (8009770 <__multiply+0x14c>)
 800965e:	4845      	ldr	r0, [pc, #276]	; (8009774 <__multiply+0x150>)
 8009660:	f240 115d 	movw	r1, #349	; 0x15d
 8009664:	f000 fdd6 	bl	800a214 <__assert_func>
 8009668:	f100 0514 	add.w	r5, r0, #20
 800966c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009670:	462b      	mov	r3, r5
 8009672:	2200      	movs	r2, #0
 8009674:	4543      	cmp	r3, r8
 8009676:	d321      	bcc.n	80096bc <__multiply+0x98>
 8009678:	f104 0314 	add.w	r3, r4, #20
 800967c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009680:	f109 0314 	add.w	r3, r9, #20
 8009684:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009688:	9202      	str	r2, [sp, #8]
 800968a:	1b3a      	subs	r2, r7, r4
 800968c:	3a15      	subs	r2, #21
 800968e:	f022 0203 	bic.w	r2, r2, #3
 8009692:	3204      	adds	r2, #4
 8009694:	f104 0115 	add.w	r1, r4, #21
 8009698:	428f      	cmp	r7, r1
 800969a:	bf38      	it	cc
 800969c:	2204      	movcc	r2, #4
 800969e:	9201      	str	r2, [sp, #4]
 80096a0:	9a02      	ldr	r2, [sp, #8]
 80096a2:	9303      	str	r3, [sp, #12]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d80c      	bhi.n	80096c2 <__multiply+0x9e>
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	dd03      	ble.n	80096b4 <__multiply+0x90>
 80096ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d05a      	beq.n	800976a <__multiply+0x146>
 80096b4:	6106      	str	r6, [r0, #16]
 80096b6:	b005      	add	sp, #20
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	f843 2b04 	str.w	r2, [r3], #4
 80096c0:	e7d8      	b.n	8009674 <__multiply+0x50>
 80096c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80096c6:	f1ba 0f00 	cmp.w	sl, #0
 80096ca:	d024      	beq.n	8009716 <__multiply+0xf2>
 80096cc:	f104 0e14 	add.w	lr, r4, #20
 80096d0:	46a9      	mov	r9, r5
 80096d2:	f04f 0c00 	mov.w	ip, #0
 80096d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096da:	f8d9 1000 	ldr.w	r1, [r9]
 80096de:	fa1f fb82 	uxth.w	fp, r2
 80096e2:	b289      	uxth	r1, r1
 80096e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80096e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096ec:	f8d9 2000 	ldr.w	r2, [r9]
 80096f0:	4461      	add	r1, ip
 80096f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80096fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096fe:	b289      	uxth	r1, r1
 8009700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009704:	4577      	cmp	r7, lr
 8009706:	f849 1b04 	str.w	r1, [r9], #4
 800970a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800970e:	d8e2      	bhi.n	80096d6 <__multiply+0xb2>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	f845 c002 	str.w	ip, [r5, r2]
 8009716:	9a03      	ldr	r2, [sp, #12]
 8009718:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800971c:	3304      	adds	r3, #4
 800971e:	f1b9 0f00 	cmp.w	r9, #0
 8009722:	d020      	beq.n	8009766 <__multiply+0x142>
 8009724:	6829      	ldr	r1, [r5, #0]
 8009726:	f104 0c14 	add.w	ip, r4, #20
 800972a:	46ae      	mov	lr, r5
 800972c:	f04f 0a00 	mov.w	sl, #0
 8009730:	f8bc b000 	ldrh.w	fp, [ip]
 8009734:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009738:	fb09 220b 	mla	r2, r9, fp, r2
 800973c:	4492      	add	sl, r2
 800973e:	b289      	uxth	r1, r1
 8009740:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009744:	f84e 1b04 	str.w	r1, [lr], #4
 8009748:	f85c 2b04 	ldr.w	r2, [ip], #4
 800974c:	f8be 1000 	ldrh.w	r1, [lr]
 8009750:	0c12      	lsrs	r2, r2, #16
 8009752:	fb09 1102 	mla	r1, r9, r2, r1
 8009756:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800975a:	4567      	cmp	r7, ip
 800975c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009760:	d8e6      	bhi.n	8009730 <__multiply+0x10c>
 8009762:	9a01      	ldr	r2, [sp, #4]
 8009764:	50a9      	str	r1, [r5, r2]
 8009766:	3504      	adds	r5, #4
 8009768:	e79a      	b.n	80096a0 <__multiply+0x7c>
 800976a:	3e01      	subs	r6, #1
 800976c:	e79c      	b.n	80096a8 <__multiply+0x84>
 800976e:	bf00      	nop
 8009770:	0800b070 	.word	0x0800b070
 8009774:	0800b0fc 	.word	0x0800b0fc

08009778 <__pow5mult>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	4615      	mov	r5, r2
 800977e:	f012 0203 	ands.w	r2, r2, #3
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	d007      	beq.n	8009798 <__pow5mult+0x20>
 8009788:	4c25      	ldr	r4, [pc, #148]	; (8009820 <__pow5mult+0xa8>)
 800978a:	3a01      	subs	r2, #1
 800978c:	2300      	movs	r3, #0
 800978e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009792:	f7ff fe51 	bl	8009438 <__multadd>
 8009796:	4607      	mov	r7, r0
 8009798:	10ad      	asrs	r5, r5, #2
 800979a:	d03d      	beq.n	8009818 <__pow5mult+0xa0>
 800979c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979e:	b97c      	cbnz	r4, 80097c0 <__pow5mult+0x48>
 80097a0:	2010      	movs	r0, #16
 80097a2:	f7ff fdbf 	bl	8009324 <malloc>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6270      	str	r0, [r6, #36]	; 0x24
 80097aa:	b928      	cbnz	r0, 80097b8 <__pow5mult+0x40>
 80097ac:	4b1d      	ldr	r3, [pc, #116]	; (8009824 <__pow5mult+0xac>)
 80097ae:	481e      	ldr	r0, [pc, #120]	; (8009828 <__pow5mult+0xb0>)
 80097b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097b4:	f000 fd2e 	bl	800a214 <__assert_func>
 80097b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097bc:	6004      	str	r4, [r0, #0]
 80097be:	60c4      	str	r4, [r0, #12]
 80097c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097c8:	b94c      	cbnz	r4, 80097de <__pow5mult+0x66>
 80097ca:	f240 2171 	movw	r1, #625	; 0x271
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff12 	bl	80095f8 <__i2b>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097da:	4604      	mov	r4, r0
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	f04f 0900 	mov.w	r9, #0
 80097e2:	07eb      	lsls	r3, r5, #31
 80097e4:	d50a      	bpl.n	80097fc <__pow5mult+0x84>
 80097e6:	4639      	mov	r1, r7
 80097e8:	4622      	mov	r2, r4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7ff ff1a 	bl	8009624 <__multiply>
 80097f0:	4639      	mov	r1, r7
 80097f2:	4680      	mov	r8, r0
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff fdfd 	bl	80093f4 <_Bfree>
 80097fa:	4647      	mov	r7, r8
 80097fc:	106d      	asrs	r5, r5, #1
 80097fe:	d00b      	beq.n	8009818 <__pow5mult+0xa0>
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	b938      	cbnz	r0, 8009814 <__pow5mult+0x9c>
 8009804:	4622      	mov	r2, r4
 8009806:	4621      	mov	r1, r4
 8009808:	4630      	mov	r0, r6
 800980a:	f7ff ff0b 	bl	8009624 <__multiply>
 800980e:	6020      	str	r0, [r4, #0]
 8009810:	f8c0 9000 	str.w	r9, [r0]
 8009814:	4604      	mov	r4, r0
 8009816:	e7e4      	b.n	80097e2 <__pow5mult+0x6a>
 8009818:	4638      	mov	r0, r7
 800981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981e:	bf00      	nop
 8009820:	0800b248 	.word	0x0800b248
 8009824:	0800affe 	.word	0x0800affe
 8009828:	0800b0fc 	.word	0x0800b0fc

0800982c <__lshift>:
 800982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009830:	460c      	mov	r4, r1
 8009832:	6849      	ldr	r1, [r1, #4]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800983a:	68a3      	ldr	r3, [r4, #8]
 800983c:	4607      	mov	r7, r0
 800983e:	4691      	mov	r9, r2
 8009840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009844:	f108 0601 	add.w	r6, r8, #1
 8009848:	42b3      	cmp	r3, r6
 800984a:	db0b      	blt.n	8009864 <__lshift+0x38>
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff fd91 	bl	8009374 <_Balloc>
 8009852:	4605      	mov	r5, r0
 8009854:	b948      	cbnz	r0, 800986a <__lshift+0x3e>
 8009856:	4602      	mov	r2, r0
 8009858:	4b2a      	ldr	r3, [pc, #168]	; (8009904 <__lshift+0xd8>)
 800985a:	482b      	ldr	r0, [pc, #172]	; (8009908 <__lshift+0xdc>)
 800985c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009860:	f000 fcd8 	bl	800a214 <__assert_func>
 8009864:	3101      	adds	r1, #1
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	e7ee      	b.n	8009848 <__lshift+0x1c>
 800986a:	2300      	movs	r3, #0
 800986c:	f100 0114 	add.w	r1, r0, #20
 8009870:	f100 0210 	add.w	r2, r0, #16
 8009874:	4618      	mov	r0, r3
 8009876:	4553      	cmp	r3, sl
 8009878:	db37      	blt.n	80098ea <__lshift+0xbe>
 800987a:	6920      	ldr	r0, [r4, #16]
 800987c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009880:	f104 0314 	add.w	r3, r4, #20
 8009884:	f019 091f 	ands.w	r9, r9, #31
 8009888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800988c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009890:	d02f      	beq.n	80098f2 <__lshift+0xc6>
 8009892:	f1c9 0e20 	rsb	lr, r9, #32
 8009896:	468a      	mov	sl, r1
 8009898:	f04f 0c00 	mov.w	ip, #0
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	fa02 f209 	lsl.w	r2, r2, r9
 80098a2:	ea42 020c 	orr.w	r2, r2, ip
 80098a6:	f84a 2b04 	str.w	r2, [sl], #4
 80098aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ae:	4298      	cmp	r0, r3
 80098b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098b4:	d8f2      	bhi.n	800989c <__lshift+0x70>
 80098b6:	1b03      	subs	r3, r0, r4
 80098b8:	3b15      	subs	r3, #21
 80098ba:	f023 0303 	bic.w	r3, r3, #3
 80098be:	3304      	adds	r3, #4
 80098c0:	f104 0215 	add.w	r2, r4, #21
 80098c4:	4290      	cmp	r0, r2
 80098c6:	bf38      	it	cc
 80098c8:	2304      	movcc	r3, #4
 80098ca:	f841 c003 	str.w	ip, [r1, r3]
 80098ce:	f1bc 0f00 	cmp.w	ip, #0
 80098d2:	d001      	beq.n	80098d8 <__lshift+0xac>
 80098d4:	f108 0602 	add.w	r6, r8, #2
 80098d8:	3e01      	subs	r6, #1
 80098da:	4638      	mov	r0, r7
 80098dc:	612e      	str	r6, [r5, #16]
 80098de:	4621      	mov	r1, r4
 80098e0:	f7ff fd88 	bl	80093f4 <_Bfree>
 80098e4:	4628      	mov	r0, r5
 80098e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ee:	3301      	adds	r3, #1
 80098f0:	e7c1      	b.n	8009876 <__lshift+0x4a>
 80098f2:	3904      	subs	r1, #4
 80098f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80098fc:	4298      	cmp	r0, r3
 80098fe:	d8f9      	bhi.n	80098f4 <__lshift+0xc8>
 8009900:	e7ea      	b.n	80098d8 <__lshift+0xac>
 8009902:	bf00      	nop
 8009904:	0800b070 	.word	0x0800b070
 8009908:	0800b0fc 	.word	0x0800b0fc

0800990c <__mcmp>:
 800990c:	b530      	push	{r4, r5, lr}
 800990e:	6902      	ldr	r2, [r0, #16]
 8009910:	690c      	ldr	r4, [r1, #16]
 8009912:	1b12      	subs	r2, r2, r4
 8009914:	d10e      	bne.n	8009934 <__mcmp+0x28>
 8009916:	f100 0314 	add.w	r3, r0, #20
 800991a:	3114      	adds	r1, #20
 800991c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009920:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009924:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009928:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800992c:	42a5      	cmp	r5, r4
 800992e:	d003      	beq.n	8009938 <__mcmp+0x2c>
 8009930:	d305      	bcc.n	800993e <__mcmp+0x32>
 8009932:	2201      	movs	r2, #1
 8009934:	4610      	mov	r0, r2
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	4283      	cmp	r3, r0
 800993a:	d3f3      	bcc.n	8009924 <__mcmp+0x18>
 800993c:	e7fa      	b.n	8009934 <__mcmp+0x28>
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	e7f7      	b.n	8009934 <__mcmp+0x28>

08009944 <__mdiff>:
 8009944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	4606      	mov	r6, r0
 800994c:	4611      	mov	r1, r2
 800994e:	4620      	mov	r0, r4
 8009950:	4690      	mov	r8, r2
 8009952:	f7ff ffdb 	bl	800990c <__mcmp>
 8009956:	1e05      	subs	r5, r0, #0
 8009958:	d110      	bne.n	800997c <__mdiff+0x38>
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff fd09 	bl	8009374 <_Balloc>
 8009962:	b930      	cbnz	r0, 8009972 <__mdiff+0x2e>
 8009964:	4b3a      	ldr	r3, [pc, #232]	; (8009a50 <__mdiff+0x10c>)
 8009966:	4602      	mov	r2, r0
 8009968:	f240 2132 	movw	r1, #562	; 0x232
 800996c:	4839      	ldr	r0, [pc, #228]	; (8009a54 <__mdiff+0x110>)
 800996e:	f000 fc51 	bl	800a214 <__assert_func>
 8009972:	2301      	movs	r3, #1
 8009974:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800997c:	bfa4      	itt	ge
 800997e:	4643      	movge	r3, r8
 8009980:	46a0      	movge	r8, r4
 8009982:	4630      	mov	r0, r6
 8009984:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009988:	bfa6      	itte	ge
 800998a:	461c      	movge	r4, r3
 800998c:	2500      	movge	r5, #0
 800998e:	2501      	movlt	r5, #1
 8009990:	f7ff fcf0 	bl	8009374 <_Balloc>
 8009994:	b920      	cbnz	r0, 80099a0 <__mdiff+0x5c>
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <__mdiff+0x10c>)
 8009998:	4602      	mov	r2, r0
 800999a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800999e:	e7e5      	b.n	800996c <__mdiff+0x28>
 80099a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80099a4:	6926      	ldr	r6, [r4, #16]
 80099a6:	60c5      	str	r5, [r0, #12]
 80099a8:	f104 0914 	add.w	r9, r4, #20
 80099ac:	f108 0514 	add.w	r5, r8, #20
 80099b0:	f100 0e14 	add.w	lr, r0, #20
 80099b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80099b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099bc:	f108 0210 	add.w	r2, r8, #16
 80099c0:	46f2      	mov	sl, lr
 80099c2:	2100      	movs	r1, #0
 80099c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80099c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099cc:	fa1f f883 	uxth.w	r8, r3
 80099d0:	fa11 f18b 	uxtah	r1, r1, fp
 80099d4:	0c1b      	lsrs	r3, r3, #16
 80099d6:	eba1 0808 	sub.w	r8, r1, r8
 80099da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099e2:	fa1f f888 	uxth.w	r8, r8
 80099e6:	1419      	asrs	r1, r3, #16
 80099e8:	454e      	cmp	r6, r9
 80099ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099ee:	f84a 3b04 	str.w	r3, [sl], #4
 80099f2:	d8e7      	bhi.n	80099c4 <__mdiff+0x80>
 80099f4:	1b33      	subs	r3, r6, r4
 80099f6:	3b15      	subs	r3, #21
 80099f8:	f023 0303 	bic.w	r3, r3, #3
 80099fc:	3304      	adds	r3, #4
 80099fe:	3415      	adds	r4, #21
 8009a00:	42a6      	cmp	r6, r4
 8009a02:	bf38      	it	cc
 8009a04:	2304      	movcc	r3, #4
 8009a06:	441d      	add	r5, r3
 8009a08:	4473      	add	r3, lr
 8009a0a:	469e      	mov	lr, r3
 8009a0c:	462e      	mov	r6, r5
 8009a0e:	4566      	cmp	r6, ip
 8009a10:	d30e      	bcc.n	8009a30 <__mdiff+0xec>
 8009a12:	f10c 0203 	add.w	r2, ip, #3
 8009a16:	1b52      	subs	r2, r2, r5
 8009a18:	f022 0203 	bic.w	r2, r2, #3
 8009a1c:	3d03      	subs	r5, #3
 8009a1e:	45ac      	cmp	ip, r5
 8009a20:	bf38      	it	cc
 8009a22:	2200      	movcc	r2, #0
 8009a24:	441a      	add	r2, r3
 8009a26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009a2a:	b17b      	cbz	r3, 8009a4c <__mdiff+0x108>
 8009a2c:	6107      	str	r7, [r0, #16]
 8009a2e:	e7a3      	b.n	8009978 <__mdiff+0x34>
 8009a30:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a34:	fa11 f288 	uxtah	r2, r1, r8
 8009a38:	1414      	asrs	r4, r2, #16
 8009a3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a3e:	b292      	uxth	r2, r2
 8009a40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a44:	f84e 2b04 	str.w	r2, [lr], #4
 8009a48:	1421      	asrs	r1, r4, #16
 8009a4a:	e7e0      	b.n	8009a0e <__mdiff+0xca>
 8009a4c:	3f01      	subs	r7, #1
 8009a4e:	e7ea      	b.n	8009a26 <__mdiff+0xe2>
 8009a50:	0800b070 	.word	0x0800b070
 8009a54:	0800b0fc 	.word	0x0800b0fc

08009a58 <__ulp>:
 8009a58:	b082      	sub	sp, #8
 8009a5a:	ed8d 0b00 	vstr	d0, [sp]
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	4912      	ldr	r1, [pc, #72]	; (8009aac <__ulp+0x54>)
 8009a62:	4019      	ands	r1, r3
 8009a64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	dd05      	ble.n	8009a78 <__ulp+0x20>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	ec43 2b10 	vmov	d0, r2, r3
 8009a74:	b002      	add	sp, #8
 8009a76:	4770      	bx	lr
 8009a78:	4249      	negs	r1, r1
 8009a7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009a7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	da04      	bge.n	8009a96 <__ulp+0x3e>
 8009a8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009a90:	fa41 f300 	asr.w	r3, r1, r0
 8009a94:	e7ec      	b.n	8009a70 <__ulp+0x18>
 8009a96:	f1a0 0114 	sub.w	r1, r0, #20
 8009a9a:	291e      	cmp	r1, #30
 8009a9c:	bfda      	itte	le
 8009a9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009aa2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009aa6:	2101      	movgt	r1, #1
 8009aa8:	460a      	mov	r2, r1
 8009aaa:	e7e1      	b.n	8009a70 <__ulp+0x18>
 8009aac:	7ff00000 	.word	0x7ff00000

08009ab0 <__b2d>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	6905      	ldr	r5, [r0, #16]
 8009ab4:	f100 0714 	add.w	r7, r0, #20
 8009ab8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009abc:	1f2e      	subs	r6, r5, #4
 8009abe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7ff fd48 	bl	8009558 <__hi0bits>
 8009ac8:	f1c0 0320 	rsb	r3, r0, #32
 8009acc:	280a      	cmp	r0, #10
 8009ace:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009b4c <__b2d+0x9c>
 8009ad2:	600b      	str	r3, [r1, #0]
 8009ad4:	dc14      	bgt.n	8009b00 <__b2d+0x50>
 8009ad6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009ada:	fa24 f10e 	lsr.w	r1, r4, lr
 8009ade:	42b7      	cmp	r7, r6
 8009ae0:	ea41 030c 	orr.w	r3, r1, ip
 8009ae4:	bf34      	ite	cc
 8009ae6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009aea:	2100      	movcs	r1, #0
 8009aec:	3015      	adds	r0, #21
 8009aee:	fa04 f000 	lsl.w	r0, r4, r0
 8009af2:	fa21 f10e 	lsr.w	r1, r1, lr
 8009af6:	ea40 0201 	orr.w	r2, r0, r1
 8009afa:	ec43 2b10 	vmov	d0, r2, r3
 8009afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b00:	42b7      	cmp	r7, r6
 8009b02:	bf3a      	itte	cc
 8009b04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b08:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b0c:	2100      	movcs	r1, #0
 8009b0e:	380b      	subs	r0, #11
 8009b10:	d017      	beq.n	8009b42 <__b2d+0x92>
 8009b12:	f1c0 0c20 	rsb	ip, r0, #32
 8009b16:	fa04 f500 	lsl.w	r5, r4, r0
 8009b1a:	42be      	cmp	r6, r7
 8009b1c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009b20:	ea45 0504 	orr.w	r5, r5, r4
 8009b24:	bf8c      	ite	hi
 8009b26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b2a:	2400      	movls	r4, #0
 8009b2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009b30:	fa01 f000 	lsl.w	r0, r1, r0
 8009b34:	fa24 f40c 	lsr.w	r4, r4, ip
 8009b38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b3c:	ea40 0204 	orr.w	r2, r0, r4
 8009b40:	e7db      	b.n	8009afa <__b2d+0x4a>
 8009b42:	ea44 030c 	orr.w	r3, r4, ip
 8009b46:	460a      	mov	r2, r1
 8009b48:	e7d7      	b.n	8009afa <__b2d+0x4a>
 8009b4a:	bf00      	nop
 8009b4c:	3ff00000 	.word	0x3ff00000

08009b50 <__d2b>:
 8009b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4689      	mov	r9, r1
 8009b56:	2101      	movs	r1, #1
 8009b58:	ec57 6b10 	vmov	r6, r7, d0
 8009b5c:	4690      	mov	r8, r2
 8009b5e:	f7ff fc09 	bl	8009374 <_Balloc>
 8009b62:	4604      	mov	r4, r0
 8009b64:	b930      	cbnz	r0, 8009b74 <__d2b+0x24>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <__d2b+0xb0>)
 8009b6a:	4826      	ldr	r0, [pc, #152]	; (8009c04 <__d2b+0xb4>)
 8009b6c:	f240 310a 	movw	r1, #778	; 0x30a
 8009b70:	f000 fb50 	bl	800a214 <__assert_func>
 8009b74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b7c:	bb35      	cbnz	r5, 8009bcc <__d2b+0x7c>
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	d028      	beq.n	8009bd6 <__d2b+0x86>
 8009b84:	4668      	mov	r0, sp
 8009b86:	9600      	str	r6, [sp, #0]
 8009b88:	f7ff fd06 	bl	8009598 <__lo0bits>
 8009b8c:	9900      	ldr	r1, [sp, #0]
 8009b8e:	b300      	cbz	r0, 8009bd2 <__d2b+0x82>
 8009b90:	9a01      	ldr	r2, [sp, #4]
 8009b92:	f1c0 0320 	rsb	r3, r0, #32
 8009b96:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	40c2      	lsrs	r2, r0
 8009b9e:	6163      	str	r3, [r4, #20]
 8009ba0:	9201      	str	r2, [sp, #4]
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	61a3      	str	r3, [r4, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bf14      	ite	ne
 8009baa:	2202      	movne	r2, #2
 8009bac:	2201      	moveq	r2, #1
 8009bae:	6122      	str	r2, [r4, #16]
 8009bb0:	b1d5      	cbz	r5, 8009be8 <__d2b+0x98>
 8009bb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009bb6:	4405      	add	r5, r0
 8009bb8:	f8c9 5000 	str.w	r5, [r9]
 8009bbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bc0:	f8c8 0000 	str.w	r0, [r8]
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	b003      	add	sp, #12
 8009bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bd0:	e7d5      	b.n	8009b7e <__d2b+0x2e>
 8009bd2:	6161      	str	r1, [r4, #20]
 8009bd4:	e7e5      	b.n	8009ba2 <__d2b+0x52>
 8009bd6:	a801      	add	r0, sp, #4
 8009bd8:	f7ff fcde 	bl	8009598 <__lo0bits>
 8009bdc:	9b01      	ldr	r3, [sp, #4]
 8009bde:	6163      	str	r3, [r4, #20]
 8009be0:	2201      	movs	r2, #1
 8009be2:	6122      	str	r2, [r4, #16]
 8009be4:	3020      	adds	r0, #32
 8009be6:	e7e3      	b.n	8009bb0 <__d2b+0x60>
 8009be8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bf0:	f8c9 0000 	str.w	r0, [r9]
 8009bf4:	6918      	ldr	r0, [r3, #16]
 8009bf6:	f7ff fcaf 	bl	8009558 <__hi0bits>
 8009bfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bfe:	e7df      	b.n	8009bc0 <__d2b+0x70>
 8009c00:	0800b070 	.word	0x0800b070
 8009c04:	0800b0fc 	.word	0x0800b0fc

08009c08 <__ratio>:
 8009c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0c:	4688      	mov	r8, r1
 8009c0e:	4669      	mov	r1, sp
 8009c10:	4681      	mov	r9, r0
 8009c12:	f7ff ff4d 	bl	8009ab0 <__b2d>
 8009c16:	a901      	add	r1, sp, #4
 8009c18:	4640      	mov	r0, r8
 8009c1a:	ec55 4b10 	vmov	r4, r5, d0
 8009c1e:	f7ff ff47 	bl	8009ab0 <__b2d>
 8009c22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c2a:	eba3 0c02 	sub.w	ip, r3, r2
 8009c2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c32:	1a9b      	subs	r3, r3, r2
 8009c34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c38:	ec51 0b10 	vmov	r0, r1, d0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfd6      	itet	le
 8009c40:	460a      	movle	r2, r1
 8009c42:	462a      	movgt	r2, r5
 8009c44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c48:	468b      	mov	fp, r1
 8009c4a:	462f      	mov	r7, r5
 8009c4c:	bfd4      	ite	le
 8009c4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c56:	4620      	mov	r0, r4
 8009c58:	ee10 2a10 	vmov	r2, s0
 8009c5c:	465b      	mov	r3, fp
 8009c5e:	4639      	mov	r1, r7
 8009c60:	f7f6 ff34 	bl	8000acc <__aeabi_ddiv>
 8009c64:	ec41 0b10 	vmov	d0, r0, r1
 8009c68:	b003      	add	sp, #12
 8009c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c6e <__copybits>:
 8009c6e:	3901      	subs	r1, #1
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	1149      	asrs	r1, r1, #5
 8009c74:	6914      	ldr	r4, [r2, #16]
 8009c76:	3101      	adds	r1, #1
 8009c78:	f102 0314 	add.w	r3, r2, #20
 8009c7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c84:	1f05      	subs	r5, r0, #4
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	d30c      	bcc.n	8009ca4 <__copybits+0x36>
 8009c8a:	1aa3      	subs	r3, r4, r2
 8009c8c:	3b11      	subs	r3, #17
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	3211      	adds	r2, #17
 8009c94:	42a2      	cmp	r2, r4
 8009c96:	bf88      	it	hi
 8009c98:	2300      	movhi	r3, #0
 8009c9a:	4418      	add	r0, r3
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4288      	cmp	r0, r1
 8009ca0:	d305      	bcc.n	8009cae <__copybits+0x40>
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ca8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009cac:	e7eb      	b.n	8009c86 <__copybits+0x18>
 8009cae:	f840 3b04 	str.w	r3, [r0], #4
 8009cb2:	e7f4      	b.n	8009c9e <__copybits+0x30>

08009cb4 <__any_on>:
 8009cb4:	f100 0214 	add.w	r2, r0, #20
 8009cb8:	6900      	ldr	r0, [r0, #16]
 8009cba:	114b      	asrs	r3, r1, #5
 8009cbc:	4298      	cmp	r0, r3
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	db11      	blt.n	8009ce6 <__any_on+0x32>
 8009cc2:	dd0a      	ble.n	8009cda <__any_on+0x26>
 8009cc4:	f011 011f 	ands.w	r1, r1, #31
 8009cc8:	d007      	beq.n	8009cda <__any_on+0x26>
 8009cca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cce:	fa24 f001 	lsr.w	r0, r4, r1
 8009cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8009cd6:	428c      	cmp	r4, r1
 8009cd8:	d10b      	bne.n	8009cf2 <__any_on+0x3e>
 8009cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d803      	bhi.n	8009cea <__any_on+0x36>
 8009ce2:	2000      	movs	r0, #0
 8009ce4:	bd10      	pop	{r4, pc}
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	e7f7      	b.n	8009cda <__any_on+0x26>
 8009cea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d0f5      	beq.n	8009cde <__any_on+0x2a>
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	e7f6      	b.n	8009ce4 <__any_on+0x30>

08009cf6 <_calloc_r>:
 8009cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf8:	fba1 2402 	umull	r2, r4, r1, r2
 8009cfc:	b94c      	cbnz	r4, 8009d12 <_calloc_r+0x1c>
 8009cfe:	4611      	mov	r1, r2
 8009d00:	9201      	str	r2, [sp, #4]
 8009d02:	f000 f87b 	bl	8009dfc <_malloc_r>
 8009d06:	9a01      	ldr	r2, [sp, #4]
 8009d08:	4605      	mov	r5, r0
 8009d0a:	b930      	cbnz	r0, 8009d1a <_calloc_r+0x24>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	b003      	add	sp, #12
 8009d10:	bd30      	pop	{r4, r5, pc}
 8009d12:	220c      	movs	r2, #12
 8009d14:	6002      	str	r2, [r0, #0]
 8009d16:	2500      	movs	r5, #0
 8009d18:	e7f8      	b.n	8009d0c <_calloc_r+0x16>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	f7fc fbc0 	bl	80064a0 <memset>
 8009d20:	e7f4      	b.n	8009d0c <_calloc_r+0x16>
	...

08009d24 <_free_r>:
 8009d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d044      	beq.n	8009db4 <_free_r+0x90>
 8009d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2e:	9001      	str	r0, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f1a1 0404 	sub.w	r4, r1, #4
 8009d36:	bfb8      	it	lt
 8009d38:	18e4      	addlt	r4, r4, r3
 8009d3a:	f000 fab5 	bl	800a2a8 <__malloc_lock>
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <_free_r+0x94>)
 8009d40:	9801      	ldr	r0, [sp, #4]
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	b933      	cbnz	r3, 8009d54 <_free_r+0x30>
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6014      	str	r4, [r2, #0]
 8009d4a:	b003      	add	sp, #12
 8009d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d50:	f000 bab0 	b.w	800a2b4 <__malloc_unlock>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x46>
 8009d58:	6825      	ldr	r5, [r4, #0]
 8009d5a:	1961      	adds	r1, r4, r5
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf01      	itttt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	1949      	addeq	r1, r1, r5
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	e7ed      	b.n	8009d46 <_free_r+0x22>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b10b      	cbz	r3, 8009d74 <_free_r+0x50>
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x46>
 8009d74:	6811      	ldr	r1, [r2, #0]
 8009d76:	1855      	adds	r5, r2, r1
 8009d78:	42a5      	cmp	r5, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x70>
 8009d7c:	6824      	ldr	r4, [r4, #0]
 8009d7e:	4421      	add	r1, r4
 8009d80:	1854      	adds	r4, r2, r1
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	d1e0      	bne.n	8009d4a <_free_r+0x26>
 8009d88:	681c      	ldr	r4, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	6053      	str	r3, [r2, #4]
 8009d8e:	4421      	add	r1, r4
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	e7da      	b.n	8009d4a <_free_r+0x26>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x78>
 8009d96:	230c      	movs	r3, #12
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	e7d6      	b.n	8009d4a <_free_r+0x26>
 8009d9c:	6825      	ldr	r5, [r4, #0]
 8009d9e:	1961      	adds	r1, r4, r5
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf04      	itt	eq
 8009da4:	6819      	ldreq	r1, [r3, #0]
 8009da6:	685b      	ldreq	r3, [r3, #4]
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	bf04      	itt	eq
 8009dac:	1949      	addeq	r1, r1, r5
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	6054      	str	r4, [r2, #4]
 8009db2:	e7ca      	b.n	8009d4a <_free_r+0x26>
 8009db4:	b003      	add	sp, #12
 8009db6:	bd30      	pop	{r4, r5, pc}
 8009db8:	20001460 	.word	0x20001460

08009dbc <sbrk_aligned>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	4e0e      	ldr	r6, [pc, #56]	; (8009df8 <sbrk_aligned+0x3c>)
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	6831      	ldr	r1, [r6, #0]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	b911      	cbnz	r1, 8009dce <sbrk_aligned+0x12>
 8009dc8:	f000 f9f2 	bl	800a1b0 <_sbrk_r>
 8009dcc:	6030      	str	r0, [r6, #0]
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 f9ed 	bl	800a1b0 <_sbrk_r>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d00a      	beq.n	8009df0 <sbrk_aligned+0x34>
 8009dda:	1cc4      	adds	r4, r0, #3
 8009ddc:	f024 0403 	bic.w	r4, r4, #3
 8009de0:	42a0      	cmp	r0, r4
 8009de2:	d007      	beq.n	8009df4 <sbrk_aligned+0x38>
 8009de4:	1a21      	subs	r1, r4, r0
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f9e2 	bl	800a1b0 <_sbrk_r>
 8009dec:	3001      	adds	r0, #1
 8009dee:	d101      	bne.n	8009df4 <sbrk_aligned+0x38>
 8009df0:	f04f 34ff 	mov.w	r4, #4294967295
 8009df4:	4620      	mov	r0, r4
 8009df6:	bd70      	pop	{r4, r5, r6, pc}
 8009df8:	20001464 	.word	0x20001464

08009dfc <_malloc_r>:
 8009dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e00:	1ccd      	adds	r5, r1, #3
 8009e02:	f025 0503 	bic.w	r5, r5, #3
 8009e06:	3508      	adds	r5, #8
 8009e08:	2d0c      	cmp	r5, #12
 8009e0a:	bf38      	it	cc
 8009e0c:	250c      	movcc	r5, #12
 8009e0e:	2d00      	cmp	r5, #0
 8009e10:	4607      	mov	r7, r0
 8009e12:	db01      	blt.n	8009e18 <_malloc_r+0x1c>
 8009e14:	42a9      	cmp	r1, r5
 8009e16:	d905      	bls.n	8009e24 <_malloc_r+0x28>
 8009e18:	230c      	movs	r3, #12
 8009e1a:	603b      	str	r3, [r7, #0]
 8009e1c:	2600      	movs	r6, #0
 8009e1e:	4630      	mov	r0, r6
 8009e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e24:	4e2e      	ldr	r6, [pc, #184]	; (8009ee0 <_malloc_r+0xe4>)
 8009e26:	f000 fa3f 	bl	800a2a8 <__malloc_lock>
 8009e2a:	6833      	ldr	r3, [r6, #0]
 8009e2c:	461c      	mov	r4, r3
 8009e2e:	bb34      	cbnz	r4, 8009e7e <_malloc_r+0x82>
 8009e30:	4629      	mov	r1, r5
 8009e32:	4638      	mov	r0, r7
 8009e34:	f7ff ffc2 	bl	8009dbc <sbrk_aligned>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	d14d      	bne.n	8009eda <_malloc_r+0xde>
 8009e3e:	6834      	ldr	r4, [r6, #0]
 8009e40:	4626      	mov	r6, r4
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	d140      	bne.n	8009ec8 <_malloc_r+0xcc>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	eb04 0803 	add.w	r8, r4, r3
 8009e50:	f000 f9ae 	bl	800a1b0 <_sbrk_r>
 8009e54:	4580      	cmp	r8, r0
 8009e56:	d13a      	bne.n	8009ece <_malloc_r+0xd2>
 8009e58:	6821      	ldr	r1, [r4, #0]
 8009e5a:	3503      	adds	r5, #3
 8009e5c:	1a6d      	subs	r5, r5, r1
 8009e5e:	f025 0503 	bic.w	r5, r5, #3
 8009e62:	3508      	adds	r5, #8
 8009e64:	2d0c      	cmp	r5, #12
 8009e66:	bf38      	it	cc
 8009e68:	250c      	movcc	r5, #12
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff ffa5 	bl	8009dbc <sbrk_aligned>
 8009e72:	3001      	adds	r0, #1
 8009e74:	d02b      	beq.n	8009ece <_malloc_r+0xd2>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	442b      	add	r3, r5
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	e00e      	b.n	8009e9c <_malloc_r+0xa0>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	1b52      	subs	r2, r2, r5
 8009e82:	d41e      	bmi.n	8009ec2 <_malloc_r+0xc6>
 8009e84:	2a0b      	cmp	r2, #11
 8009e86:	d916      	bls.n	8009eb6 <_malloc_r+0xba>
 8009e88:	1961      	adds	r1, r4, r5
 8009e8a:	42a3      	cmp	r3, r4
 8009e8c:	6025      	str	r5, [r4, #0]
 8009e8e:	bf18      	it	ne
 8009e90:	6059      	strne	r1, [r3, #4]
 8009e92:	6863      	ldr	r3, [r4, #4]
 8009e94:	bf08      	it	eq
 8009e96:	6031      	streq	r1, [r6, #0]
 8009e98:	5162      	str	r2, [r4, r5]
 8009e9a:	604b      	str	r3, [r1, #4]
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	f104 060b 	add.w	r6, r4, #11
 8009ea2:	f000 fa07 	bl	800a2b4 <__malloc_unlock>
 8009ea6:	f026 0607 	bic.w	r6, r6, #7
 8009eaa:	1d23      	adds	r3, r4, #4
 8009eac:	1af2      	subs	r2, r6, r3
 8009eae:	d0b6      	beq.n	8009e1e <_malloc_r+0x22>
 8009eb0:	1b9b      	subs	r3, r3, r6
 8009eb2:	50a3      	str	r3, [r4, r2]
 8009eb4:	e7b3      	b.n	8009e1e <_malloc_r+0x22>
 8009eb6:	6862      	ldr	r2, [r4, #4]
 8009eb8:	42a3      	cmp	r3, r4
 8009eba:	bf0c      	ite	eq
 8009ebc:	6032      	streq	r2, [r6, #0]
 8009ebe:	605a      	strne	r2, [r3, #4]
 8009ec0:	e7ec      	b.n	8009e9c <_malloc_r+0xa0>
 8009ec2:	4623      	mov	r3, r4
 8009ec4:	6864      	ldr	r4, [r4, #4]
 8009ec6:	e7b2      	b.n	8009e2e <_malloc_r+0x32>
 8009ec8:	4634      	mov	r4, r6
 8009eca:	6876      	ldr	r6, [r6, #4]
 8009ecc:	e7b9      	b.n	8009e42 <_malloc_r+0x46>
 8009ece:	230c      	movs	r3, #12
 8009ed0:	603b      	str	r3, [r7, #0]
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f000 f9ee 	bl	800a2b4 <__malloc_unlock>
 8009ed8:	e7a1      	b.n	8009e1e <_malloc_r+0x22>
 8009eda:	6025      	str	r5, [r4, #0]
 8009edc:	e7de      	b.n	8009e9c <_malloc_r+0xa0>
 8009ede:	bf00      	nop
 8009ee0:	20001460 	.word	0x20001460

08009ee4 <__ssputs_r>:
 8009ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	688e      	ldr	r6, [r1, #8]
 8009eea:	429e      	cmp	r6, r3
 8009eec:	4682      	mov	sl, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	4690      	mov	r8, r2
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	d838      	bhi.n	8009f68 <__ssputs_r+0x84>
 8009ef6:	898a      	ldrh	r2, [r1, #12]
 8009ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009efc:	d032      	beq.n	8009f64 <__ssputs_r+0x80>
 8009efe:	6825      	ldr	r5, [r4, #0]
 8009f00:	6909      	ldr	r1, [r1, #16]
 8009f02:	eba5 0901 	sub.w	r9, r5, r1
 8009f06:	6965      	ldr	r5, [r4, #20]
 8009f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f10:	3301      	adds	r3, #1
 8009f12:	444b      	add	r3, r9
 8009f14:	106d      	asrs	r5, r5, #1
 8009f16:	429d      	cmp	r5, r3
 8009f18:	bf38      	it	cc
 8009f1a:	461d      	movcc	r5, r3
 8009f1c:	0553      	lsls	r3, r2, #21
 8009f1e:	d531      	bpl.n	8009f84 <__ssputs_r+0xa0>
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7ff ff6b 	bl	8009dfc <_malloc_r>
 8009f26:	4606      	mov	r6, r0
 8009f28:	b950      	cbnz	r0, 8009f40 <__ssputs_r+0x5c>
 8009f2a:	230c      	movs	r3, #12
 8009f2c:	f8ca 3000 	str.w	r3, [sl]
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f40:	6921      	ldr	r1, [r4, #16]
 8009f42:	464a      	mov	r2, r9
 8009f44:	f7ff fa08 	bl	8009358 <memcpy>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	6126      	str	r6, [r4, #16]
 8009f56:	6165      	str	r5, [r4, #20]
 8009f58:	444e      	add	r6, r9
 8009f5a:	eba5 0509 	sub.w	r5, r5, r9
 8009f5e:	6026      	str	r6, [r4, #0]
 8009f60:	60a5      	str	r5, [r4, #8]
 8009f62:	463e      	mov	r6, r7
 8009f64:	42be      	cmp	r6, r7
 8009f66:	d900      	bls.n	8009f6a <__ssputs_r+0x86>
 8009f68:	463e      	mov	r6, r7
 8009f6a:	6820      	ldr	r0, [r4, #0]
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	4641      	mov	r1, r8
 8009f70:	f000 f980 	bl	800a274 <memmove>
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	1b9b      	subs	r3, r3, r6
 8009f78:	60a3      	str	r3, [r4, #8]
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	4433      	add	r3, r6
 8009f7e:	6023      	str	r3, [r4, #0]
 8009f80:	2000      	movs	r0, #0
 8009f82:	e7db      	b.n	8009f3c <__ssputs_r+0x58>
 8009f84:	462a      	mov	r2, r5
 8009f86:	f000 f99b 	bl	800a2c0 <_realloc_r>
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1e1      	bne.n	8009f54 <__ssputs_r+0x70>
 8009f90:	6921      	ldr	r1, [r4, #16]
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7ff fec6 	bl	8009d24 <_free_r>
 8009f98:	e7c7      	b.n	8009f2a <__ssputs_r+0x46>
	...

08009f9c <_svfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	4698      	mov	r8, r3
 8009fa2:	898b      	ldrh	r3, [r1, #12]
 8009fa4:	061b      	lsls	r3, r3, #24
 8009fa6:	b09d      	sub	sp, #116	; 0x74
 8009fa8:	4607      	mov	r7, r0
 8009faa:	460d      	mov	r5, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	d50e      	bpl.n	8009fce <_svfiprintf_r+0x32>
 8009fb0:	690b      	ldr	r3, [r1, #16]
 8009fb2:	b963      	cbnz	r3, 8009fce <_svfiprintf_r+0x32>
 8009fb4:	2140      	movs	r1, #64	; 0x40
 8009fb6:	f7ff ff21 	bl	8009dfc <_malloc_r>
 8009fba:	6028      	str	r0, [r5, #0]
 8009fbc:	6128      	str	r0, [r5, #16]
 8009fbe:	b920      	cbnz	r0, 8009fca <_svfiprintf_r+0x2e>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e0d1      	b.n	800a16e <_svfiprintf_r+0x1d2>
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	616b      	str	r3, [r5, #20]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd2:	2320      	movs	r3, #32
 8009fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fdc:	2330      	movs	r3, #48	; 0x30
 8009fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a188 <_svfiprintf_r+0x1ec>
 8009fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fe6:	f04f 0901 	mov.w	r9, #1
 8009fea:	4623      	mov	r3, r4
 8009fec:	469a      	mov	sl, r3
 8009fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff2:	b10a      	cbz	r2, 8009ff8 <_svfiprintf_r+0x5c>
 8009ff4:	2a25      	cmp	r2, #37	; 0x25
 8009ff6:	d1f9      	bne.n	8009fec <_svfiprintf_r+0x50>
 8009ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ffc:	d00b      	beq.n	800a016 <_svfiprintf_r+0x7a>
 8009ffe:	465b      	mov	r3, fp
 800a000:	4622      	mov	r2, r4
 800a002:	4629      	mov	r1, r5
 800a004:	4638      	mov	r0, r7
 800a006:	f7ff ff6d 	bl	8009ee4 <__ssputs_r>
 800a00a:	3001      	adds	r0, #1
 800a00c:	f000 80aa 	beq.w	800a164 <_svfiprintf_r+0x1c8>
 800a010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a012:	445a      	add	r2, fp
 800a014:	9209      	str	r2, [sp, #36]	; 0x24
 800a016:	f89a 3000 	ldrb.w	r3, [sl]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80a2 	beq.w	800a164 <_svfiprintf_r+0x1c8>
 800a020:	2300      	movs	r3, #0
 800a022:	f04f 32ff 	mov.w	r2, #4294967295
 800a026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a02a:	f10a 0a01 	add.w	sl, sl, #1
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a036:	931a      	str	r3, [sp, #104]	; 0x68
 800a038:	4654      	mov	r4, sl
 800a03a:	2205      	movs	r2, #5
 800a03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a040:	4851      	ldr	r0, [pc, #324]	; (800a188 <_svfiprintf_r+0x1ec>)
 800a042:	f7f6 fa0d 	bl	8000460 <memchr>
 800a046:	9a04      	ldr	r2, [sp, #16]
 800a048:	b9d8      	cbnz	r0, 800a082 <_svfiprintf_r+0xe6>
 800a04a:	06d0      	lsls	r0, r2, #27
 800a04c:	bf44      	itt	mi
 800a04e:	2320      	movmi	r3, #32
 800a050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a054:	0711      	lsls	r1, r2, #28
 800a056:	bf44      	itt	mi
 800a058:	232b      	movmi	r3, #43	; 0x2b
 800a05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05e:	f89a 3000 	ldrb.w	r3, [sl]
 800a062:	2b2a      	cmp	r3, #42	; 0x2a
 800a064:	d015      	beq.n	800a092 <_svfiprintf_r+0xf6>
 800a066:	9a07      	ldr	r2, [sp, #28]
 800a068:	4654      	mov	r4, sl
 800a06a:	2000      	movs	r0, #0
 800a06c:	f04f 0c0a 	mov.w	ip, #10
 800a070:	4621      	mov	r1, r4
 800a072:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a076:	3b30      	subs	r3, #48	; 0x30
 800a078:	2b09      	cmp	r3, #9
 800a07a:	d94e      	bls.n	800a11a <_svfiprintf_r+0x17e>
 800a07c:	b1b0      	cbz	r0, 800a0ac <_svfiprintf_r+0x110>
 800a07e:	9207      	str	r2, [sp, #28]
 800a080:	e014      	b.n	800a0ac <_svfiprintf_r+0x110>
 800a082:	eba0 0308 	sub.w	r3, r0, r8
 800a086:	fa09 f303 	lsl.w	r3, r9, r3
 800a08a:	4313      	orrs	r3, r2
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	46a2      	mov	sl, r4
 800a090:	e7d2      	b.n	800a038 <_svfiprintf_r+0x9c>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	1d19      	adds	r1, r3, #4
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	9103      	str	r1, [sp, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	bfbb      	ittet	lt
 800a09e:	425b      	neglt	r3, r3
 800a0a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a4:	9307      	strge	r3, [sp, #28]
 800a0a6:	9307      	strlt	r3, [sp, #28]
 800a0a8:	bfb8      	it	lt
 800a0aa:	9204      	strlt	r2, [sp, #16]
 800a0ac:	7823      	ldrb	r3, [r4, #0]
 800a0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b0:	d10c      	bne.n	800a0cc <_svfiprintf_r+0x130>
 800a0b2:	7863      	ldrb	r3, [r4, #1]
 800a0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0b6:	d135      	bne.n	800a124 <_svfiprintf_r+0x188>
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	9203      	str	r2, [sp, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0c8:	3402      	adds	r4, #2
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a198 <_svfiprintf_r+0x1fc>
 800a0d0:	7821      	ldrb	r1, [r4, #0]
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	f7f6 f9c3 	bl	8000460 <memchr>
 800a0da:	b140      	cbz	r0, 800a0ee <_svfiprintf_r+0x152>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	eba0 000a 	sub.w	r0, r0, sl
 800a0e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	4303      	orrs	r3, r0
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f2:	4826      	ldr	r0, [pc, #152]	; (800a18c <_svfiprintf_r+0x1f0>)
 800a0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0f8:	2206      	movs	r2, #6
 800a0fa:	f7f6 f9b1 	bl	8000460 <memchr>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d038      	beq.n	800a174 <_svfiprintf_r+0x1d8>
 800a102:	4b23      	ldr	r3, [pc, #140]	; (800a190 <_svfiprintf_r+0x1f4>)
 800a104:	bb1b      	cbnz	r3, 800a14e <_svfiprintf_r+0x1b2>
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	3307      	adds	r3, #7
 800a10a:	f023 0307 	bic.w	r3, r3, #7
 800a10e:	3308      	adds	r3, #8
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a114:	4433      	add	r3, r6
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	e767      	b.n	8009fea <_svfiprintf_r+0x4e>
 800a11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a11e:	460c      	mov	r4, r1
 800a120:	2001      	movs	r0, #1
 800a122:	e7a5      	b.n	800a070 <_svfiprintf_r+0xd4>
 800a124:	2300      	movs	r3, #0
 800a126:	3401      	adds	r4, #1
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	4619      	mov	r1, r3
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	4620      	mov	r0, r4
 800a132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a136:	3a30      	subs	r2, #48	; 0x30
 800a138:	2a09      	cmp	r2, #9
 800a13a:	d903      	bls.n	800a144 <_svfiprintf_r+0x1a8>
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0c5      	beq.n	800a0cc <_svfiprintf_r+0x130>
 800a140:	9105      	str	r1, [sp, #20]
 800a142:	e7c3      	b.n	800a0cc <_svfiprintf_r+0x130>
 800a144:	fb0c 2101 	mla	r1, ip, r1, r2
 800a148:	4604      	mov	r4, r0
 800a14a:	2301      	movs	r3, #1
 800a14c:	e7f0      	b.n	800a130 <_svfiprintf_r+0x194>
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	462a      	mov	r2, r5
 800a154:	4b0f      	ldr	r3, [pc, #60]	; (800a194 <_svfiprintf_r+0x1f8>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	4638      	mov	r0, r7
 800a15a:	f7fc fa49 	bl	80065f0 <_printf_float>
 800a15e:	1c42      	adds	r2, r0, #1
 800a160:	4606      	mov	r6, r0
 800a162:	d1d6      	bne.n	800a112 <_svfiprintf_r+0x176>
 800a164:	89ab      	ldrh	r3, [r5, #12]
 800a166:	065b      	lsls	r3, r3, #25
 800a168:	f53f af2c 	bmi.w	8009fc4 <_svfiprintf_r+0x28>
 800a16c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a16e:	b01d      	add	sp, #116	; 0x74
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	ab03      	add	r3, sp, #12
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	462a      	mov	r2, r5
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <_svfiprintf_r+0x1f8>)
 800a17c:	a904      	add	r1, sp, #16
 800a17e:	4638      	mov	r0, r7
 800a180:	f7fc fcda 	bl	8006b38 <_printf_i>
 800a184:	e7eb      	b.n	800a15e <_svfiprintf_r+0x1c2>
 800a186:	bf00      	nop
 800a188:	0800b254 	.word	0x0800b254
 800a18c:	0800b25e 	.word	0x0800b25e
 800a190:	080065f1 	.word	0x080065f1
 800a194:	08009ee5 	.word	0x08009ee5
 800a198:	0800b25a 	.word	0x0800b25a
 800a19c:	00000000 	.word	0x00000000

0800a1a0 <nan>:
 800a1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1a8 <nan+0x8>
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	7ff80000 	.word	0x7ff80000

0800a1b0 <_sbrk_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4d06      	ldr	r5, [pc, #24]	; (800a1cc <_sbrk_r+0x1c>)
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	602b      	str	r3, [r5, #0]
 800a1bc:	f7f8 f87c 	bl	80022b8 <_sbrk>
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d102      	bne.n	800a1ca <_sbrk_r+0x1a>
 800a1c4:	682b      	ldr	r3, [r5, #0]
 800a1c6:	b103      	cbz	r3, 800a1ca <_sbrk_r+0x1a>
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	bd38      	pop	{r3, r4, r5, pc}
 800a1cc:	20001468 	.word	0x20001468

0800a1d0 <strncmp>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	b17a      	cbz	r2, 800a1f4 <strncmp+0x24>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	3901      	subs	r1, #1
 800a1d8:	1884      	adds	r4, r0, r2
 800a1da:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1e2:	4290      	cmp	r0, r2
 800a1e4:	d101      	bne.n	800a1ea <strncmp+0x1a>
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	d101      	bne.n	800a1ee <strncmp+0x1e>
 800a1ea:	1a80      	subs	r0, r0, r2
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1f3      	bne.n	800a1da <strncmp+0xa>
 800a1f2:	e7fa      	b.n	800a1ea <strncmp+0x1a>
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	e7f9      	b.n	800a1ec <strncmp+0x1c>

0800a1f8 <__ascii_wctomb>:
 800a1f8:	b149      	cbz	r1, 800a20e <__ascii_wctomb+0x16>
 800a1fa:	2aff      	cmp	r2, #255	; 0xff
 800a1fc:	bf85      	ittet	hi
 800a1fe:	238a      	movhi	r3, #138	; 0x8a
 800a200:	6003      	strhi	r3, [r0, #0]
 800a202:	700a      	strbls	r2, [r1, #0]
 800a204:	f04f 30ff 	movhi.w	r0, #4294967295
 800a208:	bf98      	it	ls
 800a20a:	2001      	movls	r0, #1
 800a20c:	4770      	bx	lr
 800a20e:	4608      	mov	r0, r1
 800a210:	4770      	bx	lr
	...

0800a214 <__assert_func>:
 800a214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a216:	4614      	mov	r4, r2
 800a218:	461a      	mov	r2, r3
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <__assert_func+0x2c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4605      	mov	r5, r0
 800a220:	68d8      	ldr	r0, [r3, #12]
 800a222:	b14c      	cbz	r4, 800a238 <__assert_func+0x24>
 800a224:	4b07      	ldr	r3, [pc, #28]	; (800a244 <__assert_func+0x30>)
 800a226:	9100      	str	r1, [sp, #0]
 800a228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a22c:	4906      	ldr	r1, [pc, #24]	; (800a248 <__assert_func+0x34>)
 800a22e:	462b      	mov	r3, r5
 800a230:	f000 f80e 	bl	800a250 <fiprintf>
 800a234:	f000 fa8c 	bl	800a750 <abort>
 800a238:	4b04      	ldr	r3, [pc, #16]	; (800a24c <__assert_func+0x38>)
 800a23a:	461c      	mov	r4, r3
 800a23c:	e7f3      	b.n	800a226 <__assert_func+0x12>
 800a23e:	bf00      	nop
 800a240:	20000018 	.word	0x20000018
 800a244:	0800b265 	.word	0x0800b265
 800a248:	0800b272 	.word	0x0800b272
 800a24c:	0800b2a0 	.word	0x0800b2a0

0800a250 <fiprintf>:
 800a250:	b40e      	push	{r1, r2, r3}
 800a252:	b503      	push	{r0, r1, lr}
 800a254:	4601      	mov	r1, r0
 800a256:	ab03      	add	r3, sp, #12
 800a258:	4805      	ldr	r0, [pc, #20]	; (800a270 <fiprintf+0x20>)
 800a25a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25e:	6800      	ldr	r0, [r0, #0]
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	f000 f885 	bl	800a370 <_vfiprintf_r>
 800a266:	b002      	add	sp, #8
 800a268:	f85d eb04 	ldr.w	lr, [sp], #4
 800a26c:	b003      	add	sp, #12
 800a26e:	4770      	bx	lr
 800a270:	20000018 	.word	0x20000018

0800a274 <memmove>:
 800a274:	4288      	cmp	r0, r1
 800a276:	b510      	push	{r4, lr}
 800a278:	eb01 0402 	add.w	r4, r1, r2
 800a27c:	d902      	bls.n	800a284 <memmove+0x10>
 800a27e:	4284      	cmp	r4, r0
 800a280:	4623      	mov	r3, r4
 800a282:	d807      	bhi.n	800a294 <memmove+0x20>
 800a284:	1e43      	subs	r3, r0, #1
 800a286:	42a1      	cmp	r1, r4
 800a288:	d008      	beq.n	800a29c <memmove+0x28>
 800a28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a28e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a292:	e7f8      	b.n	800a286 <memmove+0x12>
 800a294:	4402      	add	r2, r0
 800a296:	4601      	mov	r1, r0
 800a298:	428a      	cmp	r2, r1
 800a29a:	d100      	bne.n	800a29e <memmove+0x2a>
 800a29c:	bd10      	pop	{r4, pc}
 800a29e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2a6:	e7f7      	b.n	800a298 <memmove+0x24>

0800a2a8 <__malloc_lock>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__malloc_lock+0x8>)
 800a2aa:	f000 bc11 	b.w	800aad0 <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	2000146c 	.word	0x2000146c

0800a2b4 <__malloc_unlock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_unlock+0x8>)
 800a2b6:	f000 bc0c 	b.w	800aad2 <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	2000146c 	.word	0x2000146c

0800a2c0 <_realloc_r>:
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4680      	mov	r8, r0
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	460e      	mov	r6, r1
 800a2ca:	b921      	cbnz	r1, 800a2d6 <_realloc_r+0x16>
 800a2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	f7ff bd93 	b.w	8009dfc <_malloc_r>
 800a2d6:	b92a      	cbnz	r2, 800a2e4 <_realloc_r+0x24>
 800a2d8:	f7ff fd24 	bl	8009d24 <_free_r>
 800a2dc:	4625      	mov	r5, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	f000 fc5c 	bl	800aba0 <_malloc_usable_size_r>
 800a2e8:	4284      	cmp	r4, r0
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	d802      	bhi.n	800a2f4 <_realloc_r+0x34>
 800a2ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2f2:	d812      	bhi.n	800a31a <_realloc_r+0x5a>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	f7ff fd80 	bl	8009dfc <_malloc_r>
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0ed      	beq.n	800a2de <_realloc_r+0x1e>
 800a302:	42bc      	cmp	r4, r7
 800a304:	4622      	mov	r2, r4
 800a306:	4631      	mov	r1, r6
 800a308:	bf28      	it	cs
 800a30a:	463a      	movcs	r2, r7
 800a30c:	f7ff f824 	bl	8009358 <memcpy>
 800a310:	4631      	mov	r1, r6
 800a312:	4640      	mov	r0, r8
 800a314:	f7ff fd06 	bl	8009d24 <_free_r>
 800a318:	e7e1      	b.n	800a2de <_realloc_r+0x1e>
 800a31a:	4635      	mov	r5, r6
 800a31c:	e7df      	b.n	800a2de <_realloc_r+0x1e>

0800a31e <__sfputc_r>:
 800a31e:	6893      	ldr	r3, [r2, #8]
 800a320:	3b01      	subs	r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	b410      	push	{r4}
 800a326:	6093      	str	r3, [r2, #8]
 800a328:	da08      	bge.n	800a33c <__sfputc_r+0x1e>
 800a32a:	6994      	ldr	r4, [r2, #24]
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	db01      	blt.n	800a334 <__sfputc_r+0x16>
 800a330:	290a      	cmp	r1, #10
 800a332:	d103      	bne.n	800a33c <__sfputc_r+0x1e>
 800a334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a338:	f000 b94a 	b.w	800a5d0 <__swbuf_r>
 800a33c:	6813      	ldr	r3, [r2, #0]
 800a33e:	1c58      	adds	r0, r3, #1
 800a340:	6010      	str	r0, [r2, #0]
 800a342:	7019      	strb	r1, [r3, #0]
 800a344:	4608      	mov	r0, r1
 800a346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <__sfputs_r>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	4614      	mov	r4, r2
 800a354:	18d5      	adds	r5, r2, r3
 800a356:	42ac      	cmp	r4, r5
 800a358:	d101      	bne.n	800a35e <__sfputs_r+0x12>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e007      	b.n	800a36e <__sfputs_r+0x22>
 800a35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a362:	463a      	mov	r2, r7
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff ffda 	bl	800a31e <__sfputc_r>
 800a36a:	1c43      	adds	r3, r0, #1
 800a36c:	d1f3      	bne.n	800a356 <__sfputs_r+0xa>
 800a36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a370 <_vfiprintf_r>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	460d      	mov	r5, r1
 800a376:	b09d      	sub	sp, #116	; 0x74
 800a378:	4614      	mov	r4, r2
 800a37a:	4698      	mov	r8, r3
 800a37c:	4606      	mov	r6, r0
 800a37e:	b118      	cbz	r0, 800a388 <_vfiprintf_r+0x18>
 800a380:	6983      	ldr	r3, [r0, #24]
 800a382:	b90b      	cbnz	r3, 800a388 <_vfiprintf_r+0x18>
 800a384:	f000 fb06 	bl	800a994 <__sinit>
 800a388:	4b89      	ldr	r3, [pc, #548]	; (800a5b0 <_vfiprintf_r+0x240>)
 800a38a:	429d      	cmp	r5, r3
 800a38c:	d11b      	bne.n	800a3c6 <_vfiprintf_r+0x56>
 800a38e:	6875      	ldr	r5, [r6, #4]
 800a390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a392:	07d9      	lsls	r1, r3, #31
 800a394:	d405      	bmi.n	800a3a2 <_vfiprintf_r+0x32>
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	059a      	lsls	r2, r3, #22
 800a39a:	d402      	bmi.n	800a3a2 <_vfiprintf_r+0x32>
 800a39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39e:	f000 fb97 	bl	800aad0 <__retarget_lock_acquire_recursive>
 800a3a2:	89ab      	ldrh	r3, [r5, #12]
 800a3a4:	071b      	lsls	r3, r3, #28
 800a3a6:	d501      	bpl.n	800a3ac <_vfiprintf_r+0x3c>
 800a3a8:	692b      	ldr	r3, [r5, #16]
 800a3aa:	b9eb      	cbnz	r3, 800a3e8 <_vfiprintf_r+0x78>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f000 f960 	bl	800a674 <__swsetup_r>
 800a3b4:	b1c0      	cbz	r0, 800a3e8 <_vfiprintf_r+0x78>
 800a3b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b8:	07dc      	lsls	r4, r3, #31
 800a3ba:	d50e      	bpl.n	800a3da <_vfiprintf_r+0x6a>
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b01d      	add	sp, #116	; 0x74
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	4b7b      	ldr	r3, [pc, #492]	; (800a5b4 <_vfiprintf_r+0x244>)
 800a3c8:	429d      	cmp	r5, r3
 800a3ca:	d101      	bne.n	800a3d0 <_vfiprintf_r+0x60>
 800a3cc:	68b5      	ldr	r5, [r6, #8]
 800a3ce:	e7df      	b.n	800a390 <_vfiprintf_r+0x20>
 800a3d0:	4b79      	ldr	r3, [pc, #484]	; (800a5b8 <_vfiprintf_r+0x248>)
 800a3d2:	429d      	cmp	r5, r3
 800a3d4:	bf08      	it	eq
 800a3d6:	68f5      	ldreq	r5, [r6, #12]
 800a3d8:	e7da      	b.n	800a390 <_vfiprintf_r+0x20>
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	0598      	lsls	r0, r3, #22
 800a3de:	d4ed      	bmi.n	800a3bc <_vfiprintf_r+0x4c>
 800a3e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e2:	f000 fb76 	bl	800aad2 <__retarget_lock_release_recursive>
 800a3e6:	e7e9      	b.n	800a3bc <_vfiprintf_r+0x4c>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3f6:	2330      	movs	r3, #48	; 0x30
 800a3f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5bc <_vfiprintf_r+0x24c>
 800a3fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a400:	f04f 0901 	mov.w	r9, #1
 800a404:	4623      	mov	r3, r4
 800a406:	469a      	mov	sl, r3
 800a408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a40c:	b10a      	cbz	r2, 800a412 <_vfiprintf_r+0xa2>
 800a40e:	2a25      	cmp	r2, #37	; 0x25
 800a410:	d1f9      	bne.n	800a406 <_vfiprintf_r+0x96>
 800a412:	ebba 0b04 	subs.w	fp, sl, r4
 800a416:	d00b      	beq.n	800a430 <_vfiprintf_r+0xc0>
 800a418:	465b      	mov	r3, fp
 800a41a:	4622      	mov	r2, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	4630      	mov	r0, r6
 800a420:	f7ff ff94 	bl	800a34c <__sfputs_r>
 800a424:	3001      	adds	r0, #1
 800a426:	f000 80aa 	beq.w	800a57e <_vfiprintf_r+0x20e>
 800a42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a42c:	445a      	add	r2, fp
 800a42e:	9209      	str	r2, [sp, #36]	; 0x24
 800a430:	f89a 3000 	ldrb.w	r3, [sl]
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80a2 	beq.w	800a57e <_vfiprintf_r+0x20e>
 800a43a:	2300      	movs	r3, #0
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295
 800a440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a444:	f10a 0a01 	add.w	sl, sl, #1
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	9307      	str	r3, [sp, #28]
 800a44c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a450:	931a      	str	r3, [sp, #104]	; 0x68
 800a452:	4654      	mov	r4, sl
 800a454:	2205      	movs	r2, #5
 800a456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45a:	4858      	ldr	r0, [pc, #352]	; (800a5bc <_vfiprintf_r+0x24c>)
 800a45c:	f7f6 f800 	bl	8000460 <memchr>
 800a460:	9a04      	ldr	r2, [sp, #16]
 800a462:	b9d8      	cbnz	r0, 800a49c <_vfiprintf_r+0x12c>
 800a464:	06d1      	lsls	r1, r2, #27
 800a466:	bf44      	itt	mi
 800a468:	2320      	movmi	r3, #32
 800a46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46e:	0713      	lsls	r3, r2, #28
 800a470:	bf44      	itt	mi
 800a472:	232b      	movmi	r3, #43	; 0x2b
 800a474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a478:	f89a 3000 	ldrb.w	r3, [sl]
 800a47c:	2b2a      	cmp	r3, #42	; 0x2a
 800a47e:	d015      	beq.n	800a4ac <_vfiprintf_r+0x13c>
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	4654      	mov	r4, sl
 800a484:	2000      	movs	r0, #0
 800a486:	f04f 0c0a 	mov.w	ip, #10
 800a48a:	4621      	mov	r1, r4
 800a48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a490:	3b30      	subs	r3, #48	; 0x30
 800a492:	2b09      	cmp	r3, #9
 800a494:	d94e      	bls.n	800a534 <_vfiprintf_r+0x1c4>
 800a496:	b1b0      	cbz	r0, 800a4c6 <_vfiprintf_r+0x156>
 800a498:	9207      	str	r2, [sp, #28]
 800a49a:	e014      	b.n	800a4c6 <_vfiprintf_r+0x156>
 800a49c:	eba0 0308 	sub.w	r3, r0, r8
 800a4a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	46a2      	mov	sl, r4
 800a4aa:	e7d2      	b.n	800a452 <_vfiprintf_r+0xe2>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	1d19      	adds	r1, r3, #4
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	9103      	str	r1, [sp, #12]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfbb      	ittet	lt
 800a4b8:	425b      	neglt	r3, r3
 800a4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a4be:	9307      	strge	r3, [sp, #28]
 800a4c0:	9307      	strlt	r3, [sp, #28]
 800a4c2:	bfb8      	it	lt
 800a4c4:	9204      	strlt	r2, [sp, #16]
 800a4c6:	7823      	ldrb	r3, [r4, #0]
 800a4c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ca:	d10c      	bne.n	800a4e6 <_vfiprintf_r+0x176>
 800a4cc:	7863      	ldrb	r3, [r4, #1]
 800a4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d0:	d135      	bne.n	800a53e <_vfiprintf_r+0x1ce>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	1d1a      	adds	r2, r3, #4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	9203      	str	r2, [sp, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bfb8      	it	lt
 800a4de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e2:	3402      	adds	r4, #2
 800a4e4:	9305      	str	r3, [sp, #20]
 800a4e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5cc <_vfiprintf_r+0x25c>
 800a4ea:	7821      	ldrb	r1, [r4, #0]
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	f7f5 ffb6 	bl	8000460 <memchr>
 800a4f4:	b140      	cbz	r0, 800a508 <_vfiprintf_r+0x198>
 800a4f6:	2340      	movs	r3, #64	; 0x40
 800a4f8:	eba0 000a 	sub.w	r0, r0, sl
 800a4fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a500:	9b04      	ldr	r3, [sp, #16]
 800a502:	4303      	orrs	r3, r0
 800a504:	3401      	adds	r4, #1
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	482c      	ldr	r0, [pc, #176]	; (800a5c0 <_vfiprintf_r+0x250>)
 800a50e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a512:	2206      	movs	r2, #6
 800a514:	f7f5 ffa4 	bl	8000460 <memchr>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d03f      	beq.n	800a59c <_vfiprintf_r+0x22c>
 800a51c:	4b29      	ldr	r3, [pc, #164]	; (800a5c4 <_vfiprintf_r+0x254>)
 800a51e:	bb1b      	cbnz	r3, 800a568 <_vfiprintf_r+0x1f8>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	3307      	adds	r3, #7
 800a524:	f023 0307 	bic.w	r3, r3, #7
 800a528:	3308      	adds	r3, #8
 800a52a:	9303      	str	r3, [sp, #12]
 800a52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52e:	443b      	add	r3, r7
 800a530:	9309      	str	r3, [sp, #36]	; 0x24
 800a532:	e767      	b.n	800a404 <_vfiprintf_r+0x94>
 800a534:	fb0c 3202 	mla	r2, ip, r2, r3
 800a538:	460c      	mov	r4, r1
 800a53a:	2001      	movs	r0, #1
 800a53c:	e7a5      	b.n	800a48a <_vfiprintf_r+0x11a>
 800a53e:	2300      	movs	r3, #0
 800a540:	3401      	adds	r4, #1
 800a542:	9305      	str	r3, [sp, #20]
 800a544:	4619      	mov	r1, r3
 800a546:	f04f 0c0a 	mov.w	ip, #10
 800a54a:	4620      	mov	r0, r4
 800a54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a550:	3a30      	subs	r2, #48	; 0x30
 800a552:	2a09      	cmp	r2, #9
 800a554:	d903      	bls.n	800a55e <_vfiprintf_r+0x1ee>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0c5      	beq.n	800a4e6 <_vfiprintf_r+0x176>
 800a55a:	9105      	str	r1, [sp, #20]
 800a55c:	e7c3      	b.n	800a4e6 <_vfiprintf_r+0x176>
 800a55e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a562:	4604      	mov	r4, r0
 800a564:	2301      	movs	r3, #1
 800a566:	e7f0      	b.n	800a54a <_vfiprintf_r+0x1da>
 800a568:	ab03      	add	r3, sp, #12
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	462a      	mov	r2, r5
 800a56e:	4b16      	ldr	r3, [pc, #88]	; (800a5c8 <_vfiprintf_r+0x258>)
 800a570:	a904      	add	r1, sp, #16
 800a572:	4630      	mov	r0, r6
 800a574:	f7fc f83c 	bl	80065f0 <_printf_float>
 800a578:	4607      	mov	r7, r0
 800a57a:	1c78      	adds	r0, r7, #1
 800a57c:	d1d6      	bne.n	800a52c <_vfiprintf_r+0x1bc>
 800a57e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a580:	07d9      	lsls	r1, r3, #31
 800a582:	d405      	bmi.n	800a590 <_vfiprintf_r+0x220>
 800a584:	89ab      	ldrh	r3, [r5, #12]
 800a586:	059a      	lsls	r2, r3, #22
 800a588:	d402      	bmi.n	800a590 <_vfiprintf_r+0x220>
 800a58a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a58c:	f000 faa1 	bl	800aad2 <__retarget_lock_release_recursive>
 800a590:	89ab      	ldrh	r3, [r5, #12]
 800a592:	065b      	lsls	r3, r3, #25
 800a594:	f53f af12 	bmi.w	800a3bc <_vfiprintf_r+0x4c>
 800a598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a59a:	e711      	b.n	800a3c0 <_vfiprintf_r+0x50>
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <_vfiprintf_r+0x258>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7fc fac6 	bl	8006b38 <_printf_i>
 800a5ac:	e7e4      	b.n	800a578 <_vfiprintf_r+0x208>
 800a5ae:	bf00      	nop
 800a5b0:	0800b2c4 	.word	0x0800b2c4
 800a5b4:	0800b2e4 	.word	0x0800b2e4
 800a5b8:	0800b2a4 	.word	0x0800b2a4
 800a5bc:	0800b254 	.word	0x0800b254
 800a5c0:	0800b25e 	.word	0x0800b25e
 800a5c4:	080065f1 	.word	0x080065f1
 800a5c8:	0800a34d 	.word	0x0800a34d
 800a5cc:	0800b25a 	.word	0x0800b25a

0800a5d0 <__swbuf_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	460e      	mov	r6, r1
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	b118      	cbz	r0, 800a5e2 <__swbuf_r+0x12>
 800a5da:	6983      	ldr	r3, [r0, #24]
 800a5dc:	b90b      	cbnz	r3, 800a5e2 <__swbuf_r+0x12>
 800a5de:	f000 f9d9 	bl	800a994 <__sinit>
 800a5e2:	4b21      	ldr	r3, [pc, #132]	; (800a668 <__swbuf_r+0x98>)
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d12b      	bne.n	800a640 <__swbuf_r+0x70>
 800a5e8:	686c      	ldr	r4, [r5, #4]
 800a5ea:	69a3      	ldr	r3, [r4, #24]
 800a5ec:	60a3      	str	r3, [r4, #8]
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	071a      	lsls	r2, r3, #28
 800a5f2:	d52f      	bpl.n	800a654 <__swbuf_r+0x84>
 800a5f4:	6923      	ldr	r3, [r4, #16]
 800a5f6:	b36b      	cbz	r3, 800a654 <__swbuf_r+0x84>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	6820      	ldr	r0, [r4, #0]
 800a5fc:	1ac0      	subs	r0, r0, r3
 800a5fe:	6963      	ldr	r3, [r4, #20]
 800a600:	b2f6      	uxtb	r6, r6
 800a602:	4283      	cmp	r3, r0
 800a604:	4637      	mov	r7, r6
 800a606:	dc04      	bgt.n	800a612 <__swbuf_r+0x42>
 800a608:	4621      	mov	r1, r4
 800a60a:	4628      	mov	r0, r5
 800a60c:	f000 f92e 	bl	800a86c <_fflush_r>
 800a610:	bb30      	cbnz	r0, 800a660 <__swbuf_r+0x90>
 800a612:	68a3      	ldr	r3, [r4, #8]
 800a614:	3b01      	subs	r3, #1
 800a616:	60a3      	str	r3, [r4, #8]
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	1c5a      	adds	r2, r3, #1
 800a61c:	6022      	str	r2, [r4, #0]
 800a61e:	701e      	strb	r6, [r3, #0]
 800a620:	6963      	ldr	r3, [r4, #20]
 800a622:	3001      	adds	r0, #1
 800a624:	4283      	cmp	r3, r0
 800a626:	d004      	beq.n	800a632 <__swbuf_r+0x62>
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	07db      	lsls	r3, r3, #31
 800a62c:	d506      	bpl.n	800a63c <__swbuf_r+0x6c>
 800a62e:	2e0a      	cmp	r6, #10
 800a630:	d104      	bne.n	800a63c <__swbuf_r+0x6c>
 800a632:	4621      	mov	r1, r4
 800a634:	4628      	mov	r0, r5
 800a636:	f000 f919 	bl	800a86c <_fflush_r>
 800a63a:	b988      	cbnz	r0, 800a660 <__swbuf_r+0x90>
 800a63c:	4638      	mov	r0, r7
 800a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <__swbuf_r+0x9c>)
 800a642:	429c      	cmp	r4, r3
 800a644:	d101      	bne.n	800a64a <__swbuf_r+0x7a>
 800a646:	68ac      	ldr	r4, [r5, #8]
 800a648:	e7cf      	b.n	800a5ea <__swbuf_r+0x1a>
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <__swbuf_r+0xa0>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	bf08      	it	eq
 800a650:	68ec      	ldreq	r4, [r5, #12]
 800a652:	e7ca      	b.n	800a5ea <__swbuf_r+0x1a>
 800a654:	4621      	mov	r1, r4
 800a656:	4628      	mov	r0, r5
 800a658:	f000 f80c 	bl	800a674 <__swsetup_r>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d0cb      	beq.n	800a5f8 <__swbuf_r+0x28>
 800a660:	f04f 37ff 	mov.w	r7, #4294967295
 800a664:	e7ea      	b.n	800a63c <__swbuf_r+0x6c>
 800a666:	bf00      	nop
 800a668:	0800b2c4 	.word	0x0800b2c4
 800a66c:	0800b2e4 	.word	0x0800b2e4
 800a670:	0800b2a4 	.word	0x0800b2a4

0800a674 <__swsetup_r>:
 800a674:	4b32      	ldr	r3, [pc, #200]	; (800a740 <__swsetup_r+0xcc>)
 800a676:	b570      	push	{r4, r5, r6, lr}
 800a678:	681d      	ldr	r5, [r3, #0]
 800a67a:	4606      	mov	r6, r0
 800a67c:	460c      	mov	r4, r1
 800a67e:	b125      	cbz	r5, 800a68a <__swsetup_r+0x16>
 800a680:	69ab      	ldr	r3, [r5, #24]
 800a682:	b913      	cbnz	r3, 800a68a <__swsetup_r+0x16>
 800a684:	4628      	mov	r0, r5
 800a686:	f000 f985 	bl	800a994 <__sinit>
 800a68a:	4b2e      	ldr	r3, [pc, #184]	; (800a744 <__swsetup_r+0xd0>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d10f      	bne.n	800a6b0 <__swsetup_r+0x3c>
 800a690:	686c      	ldr	r4, [r5, #4]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a698:	0719      	lsls	r1, r3, #28
 800a69a:	d42c      	bmi.n	800a6f6 <__swsetup_r+0x82>
 800a69c:	06dd      	lsls	r5, r3, #27
 800a69e:	d411      	bmi.n	800a6c4 <__swsetup_r+0x50>
 800a6a0:	2309      	movs	r3, #9
 800a6a2:	6033      	str	r3, [r6, #0]
 800a6a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ae:	e03e      	b.n	800a72e <__swsetup_r+0xba>
 800a6b0:	4b25      	ldr	r3, [pc, #148]	; (800a748 <__swsetup_r+0xd4>)
 800a6b2:	429c      	cmp	r4, r3
 800a6b4:	d101      	bne.n	800a6ba <__swsetup_r+0x46>
 800a6b6:	68ac      	ldr	r4, [r5, #8]
 800a6b8:	e7eb      	b.n	800a692 <__swsetup_r+0x1e>
 800a6ba:	4b24      	ldr	r3, [pc, #144]	; (800a74c <__swsetup_r+0xd8>)
 800a6bc:	429c      	cmp	r4, r3
 800a6be:	bf08      	it	eq
 800a6c0:	68ec      	ldreq	r4, [r5, #12]
 800a6c2:	e7e6      	b.n	800a692 <__swsetup_r+0x1e>
 800a6c4:	0758      	lsls	r0, r3, #29
 800a6c6:	d512      	bpl.n	800a6ee <__swsetup_r+0x7a>
 800a6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ca:	b141      	cbz	r1, 800a6de <__swsetup_r+0x6a>
 800a6cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	d002      	beq.n	800a6da <__swsetup_r+0x66>
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff fb25 	bl	8009d24 <_free_r>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6de:	89a3      	ldrh	r3, [r4, #12]
 800a6e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6063      	str	r3, [r4, #4]
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	89a3      	ldrh	r3, [r4, #12]
 800a6f0:	f043 0308 	orr.w	r3, r3, #8
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	b94b      	cbnz	r3, 800a70e <__swsetup_r+0x9a>
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a704:	d003      	beq.n	800a70e <__swsetup_r+0x9a>
 800a706:	4621      	mov	r1, r4
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 fa09 	bl	800ab20 <__smakebuf_r>
 800a70e:	89a0      	ldrh	r0, [r4, #12]
 800a710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a714:	f010 0301 	ands.w	r3, r0, #1
 800a718:	d00a      	beq.n	800a730 <__swsetup_r+0xbc>
 800a71a:	2300      	movs	r3, #0
 800a71c:	60a3      	str	r3, [r4, #8]
 800a71e:	6963      	ldr	r3, [r4, #20]
 800a720:	425b      	negs	r3, r3
 800a722:	61a3      	str	r3, [r4, #24]
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	b943      	cbnz	r3, 800a73a <__swsetup_r+0xc6>
 800a728:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a72c:	d1ba      	bne.n	800a6a4 <__swsetup_r+0x30>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	0781      	lsls	r1, r0, #30
 800a732:	bf58      	it	pl
 800a734:	6963      	ldrpl	r3, [r4, #20]
 800a736:	60a3      	str	r3, [r4, #8]
 800a738:	e7f4      	b.n	800a724 <__swsetup_r+0xb0>
 800a73a:	2000      	movs	r0, #0
 800a73c:	e7f7      	b.n	800a72e <__swsetup_r+0xba>
 800a73e:	bf00      	nop
 800a740:	20000018 	.word	0x20000018
 800a744:	0800b2c4 	.word	0x0800b2c4
 800a748:	0800b2e4 	.word	0x0800b2e4
 800a74c:	0800b2a4 	.word	0x0800b2a4

0800a750 <abort>:
 800a750:	b508      	push	{r3, lr}
 800a752:	2006      	movs	r0, #6
 800a754:	f000 fa54 	bl	800ac00 <raise>
 800a758:	2001      	movs	r0, #1
 800a75a:	f7f7 fd35 	bl	80021c8 <_exit>
	...

0800a760 <__sflush_r>:
 800a760:	898a      	ldrh	r2, [r1, #12]
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	4605      	mov	r5, r0
 800a768:	0710      	lsls	r0, r2, #28
 800a76a:	460c      	mov	r4, r1
 800a76c:	d458      	bmi.n	800a820 <__sflush_r+0xc0>
 800a76e:	684b      	ldr	r3, [r1, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	dc05      	bgt.n	800a780 <__sflush_r+0x20>
 800a774:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	dc02      	bgt.n	800a780 <__sflush_r+0x20>
 800a77a:	2000      	movs	r0, #0
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a782:	2e00      	cmp	r6, #0
 800a784:	d0f9      	beq.n	800a77a <__sflush_r+0x1a>
 800a786:	2300      	movs	r3, #0
 800a788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a78c:	682f      	ldr	r7, [r5, #0]
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	d032      	beq.n	800a7f8 <__sflush_r+0x98>
 800a792:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	075a      	lsls	r2, r3, #29
 800a798:	d505      	bpl.n	800a7a6 <__sflush_r+0x46>
 800a79a:	6863      	ldr	r3, [r4, #4]
 800a79c:	1ac0      	subs	r0, r0, r3
 800a79e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a0:	b10b      	cbz	r3, 800a7a6 <__sflush_r+0x46>
 800a7a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7a4:	1ac0      	subs	r0, r0, r3
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ac:	6a21      	ldr	r1, [r4, #32]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b0      	blx	r6
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	d106      	bne.n	800a7c6 <__sflush_r+0x66>
 800a7b8:	6829      	ldr	r1, [r5, #0]
 800a7ba:	291d      	cmp	r1, #29
 800a7bc:	d82c      	bhi.n	800a818 <__sflush_r+0xb8>
 800a7be:	4a2a      	ldr	r2, [pc, #168]	; (800a868 <__sflush_r+0x108>)
 800a7c0:	40ca      	lsrs	r2, r1
 800a7c2:	07d6      	lsls	r6, r2, #31
 800a7c4:	d528      	bpl.n	800a818 <__sflush_r+0xb8>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	6062      	str	r2, [r4, #4]
 800a7ca:	04d9      	lsls	r1, r3, #19
 800a7cc:	6922      	ldr	r2, [r4, #16]
 800a7ce:	6022      	str	r2, [r4, #0]
 800a7d0:	d504      	bpl.n	800a7dc <__sflush_r+0x7c>
 800a7d2:	1c42      	adds	r2, r0, #1
 800a7d4:	d101      	bne.n	800a7da <__sflush_r+0x7a>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	b903      	cbnz	r3, 800a7dc <__sflush_r+0x7c>
 800a7da:	6560      	str	r0, [r4, #84]	; 0x54
 800a7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7de:	602f      	str	r7, [r5, #0]
 800a7e0:	2900      	cmp	r1, #0
 800a7e2:	d0ca      	beq.n	800a77a <__sflush_r+0x1a>
 800a7e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	d002      	beq.n	800a7f2 <__sflush_r+0x92>
 800a7ec:	4628      	mov	r0, r5
 800a7ee:	f7ff fa99 	bl	8009d24 <_free_r>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7f6:	e7c1      	b.n	800a77c <__sflush_r+0x1c>
 800a7f8:	6a21      	ldr	r1, [r4, #32]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b0      	blx	r6
 800a800:	1c41      	adds	r1, r0, #1
 800a802:	d1c7      	bne.n	800a794 <__sflush_r+0x34>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0c4      	beq.n	800a794 <__sflush_r+0x34>
 800a80a:	2b1d      	cmp	r3, #29
 800a80c:	d001      	beq.n	800a812 <__sflush_r+0xb2>
 800a80e:	2b16      	cmp	r3, #22
 800a810:	d101      	bne.n	800a816 <__sflush_r+0xb6>
 800a812:	602f      	str	r7, [r5, #0]
 800a814:	e7b1      	b.n	800a77a <__sflush_r+0x1a>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	e7ad      	b.n	800a77c <__sflush_r+0x1c>
 800a820:	690f      	ldr	r7, [r1, #16]
 800a822:	2f00      	cmp	r7, #0
 800a824:	d0a9      	beq.n	800a77a <__sflush_r+0x1a>
 800a826:	0793      	lsls	r3, r2, #30
 800a828:	680e      	ldr	r6, [r1, #0]
 800a82a:	bf08      	it	eq
 800a82c:	694b      	ldreq	r3, [r1, #20]
 800a82e:	600f      	str	r7, [r1, #0]
 800a830:	bf18      	it	ne
 800a832:	2300      	movne	r3, #0
 800a834:	eba6 0807 	sub.w	r8, r6, r7
 800a838:	608b      	str	r3, [r1, #8]
 800a83a:	f1b8 0f00 	cmp.w	r8, #0
 800a83e:	dd9c      	ble.n	800a77a <__sflush_r+0x1a>
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a844:	4643      	mov	r3, r8
 800a846:	463a      	mov	r2, r7
 800a848:	4628      	mov	r0, r5
 800a84a:	47b0      	blx	r6
 800a84c:	2800      	cmp	r0, #0
 800a84e:	dc06      	bgt.n	800a85e <__sflush_r+0xfe>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	e78e      	b.n	800a77c <__sflush_r+0x1c>
 800a85e:	4407      	add	r7, r0
 800a860:	eba8 0800 	sub.w	r8, r8, r0
 800a864:	e7e9      	b.n	800a83a <__sflush_r+0xda>
 800a866:	bf00      	nop
 800a868:	20400001 	.word	0x20400001

0800a86c <_fflush_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b913      	cbnz	r3, 800a87c <_fflush_r+0x10>
 800a876:	2500      	movs	r5, #0
 800a878:	4628      	mov	r0, r5
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	b118      	cbz	r0, 800a886 <_fflush_r+0x1a>
 800a87e:	6983      	ldr	r3, [r0, #24]
 800a880:	b90b      	cbnz	r3, 800a886 <_fflush_r+0x1a>
 800a882:	f000 f887 	bl	800a994 <__sinit>
 800a886:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <_fflush_r+0x6c>)
 800a888:	429c      	cmp	r4, r3
 800a88a:	d11b      	bne.n	800a8c4 <_fflush_r+0x58>
 800a88c:	686c      	ldr	r4, [r5, #4]
 800a88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d0ef      	beq.n	800a876 <_fflush_r+0xa>
 800a896:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a898:	07d0      	lsls	r0, r2, #31
 800a89a:	d404      	bmi.n	800a8a6 <_fflush_r+0x3a>
 800a89c:	0599      	lsls	r1, r3, #22
 800a89e:	d402      	bmi.n	800a8a6 <_fflush_r+0x3a>
 800a8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a2:	f000 f915 	bl	800aad0 <__retarget_lock_acquire_recursive>
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	f7ff ff59 	bl	800a760 <__sflush_r>
 800a8ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b0:	07da      	lsls	r2, r3, #31
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	d4e0      	bmi.n	800a878 <_fflush_r+0xc>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	059b      	lsls	r3, r3, #22
 800a8ba:	d4dd      	bmi.n	800a878 <_fflush_r+0xc>
 800a8bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8be:	f000 f908 	bl	800aad2 <__retarget_lock_release_recursive>
 800a8c2:	e7d9      	b.n	800a878 <_fflush_r+0xc>
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <_fflush_r+0x70>)
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	d101      	bne.n	800a8ce <_fflush_r+0x62>
 800a8ca:	68ac      	ldr	r4, [r5, #8]
 800a8cc:	e7df      	b.n	800a88e <_fflush_r+0x22>
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <_fflush_r+0x74>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	bf08      	it	eq
 800a8d4:	68ec      	ldreq	r4, [r5, #12]
 800a8d6:	e7da      	b.n	800a88e <_fflush_r+0x22>
 800a8d8:	0800b2c4 	.word	0x0800b2c4
 800a8dc:	0800b2e4 	.word	0x0800b2e4
 800a8e0:	0800b2a4 	.word	0x0800b2a4

0800a8e4 <std>:
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	e9c0 3300 	strd	r3, r3, [r0]
 800a8ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8f2:	6083      	str	r3, [r0, #8]
 800a8f4:	8181      	strh	r1, [r0, #12]
 800a8f6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8f8:	81c2      	strh	r2, [r0, #14]
 800a8fa:	6183      	str	r3, [r0, #24]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	2208      	movs	r2, #8
 800a900:	305c      	adds	r0, #92	; 0x5c
 800a902:	f7fb fdcd 	bl	80064a0 <memset>
 800a906:	4b05      	ldr	r3, [pc, #20]	; (800a91c <std+0x38>)
 800a908:	6263      	str	r3, [r4, #36]	; 0x24
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <std+0x3c>)
 800a90c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a90e:	4b05      	ldr	r3, [pc, #20]	; (800a924 <std+0x40>)
 800a910:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <std+0x44>)
 800a914:	6224      	str	r4, [r4, #32]
 800a916:	6323      	str	r3, [r4, #48]	; 0x30
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	bf00      	nop
 800a91c:	0800ac39 	.word	0x0800ac39
 800a920:	0800ac5b 	.word	0x0800ac5b
 800a924:	0800ac93 	.word	0x0800ac93
 800a928:	0800acb7 	.word	0x0800acb7

0800a92c <_cleanup_r>:
 800a92c:	4901      	ldr	r1, [pc, #4]	; (800a934 <_cleanup_r+0x8>)
 800a92e:	f000 b8af 	b.w	800aa90 <_fwalk_reent>
 800a932:	bf00      	nop
 800a934:	0800a86d 	.word	0x0800a86d

0800a938 <__sfmoreglue>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	2268      	movs	r2, #104	; 0x68
 800a93c:	1e4d      	subs	r5, r1, #1
 800a93e:	4355      	muls	r5, r2
 800a940:	460e      	mov	r6, r1
 800a942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a946:	f7ff fa59 	bl	8009dfc <_malloc_r>
 800a94a:	4604      	mov	r4, r0
 800a94c:	b140      	cbz	r0, 800a960 <__sfmoreglue+0x28>
 800a94e:	2100      	movs	r1, #0
 800a950:	e9c0 1600 	strd	r1, r6, [r0]
 800a954:	300c      	adds	r0, #12
 800a956:	60a0      	str	r0, [r4, #8]
 800a958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a95c:	f7fb fda0 	bl	80064a0 <memset>
 800a960:	4620      	mov	r0, r4
 800a962:	bd70      	pop	{r4, r5, r6, pc}

0800a964 <__sfp_lock_acquire>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__sfp_lock_acquire+0x8>)
 800a966:	f000 b8b3 	b.w	800aad0 <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	2000146d 	.word	0x2000146d

0800a970 <__sfp_lock_release>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__sfp_lock_release+0x8>)
 800a972:	f000 b8ae 	b.w	800aad2 <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	2000146d 	.word	0x2000146d

0800a97c <__sinit_lock_acquire>:
 800a97c:	4801      	ldr	r0, [pc, #4]	; (800a984 <__sinit_lock_acquire+0x8>)
 800a97e:	f000 b8a7 	b.w	800aad0 <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	2000146e 	.word	0x2000146e

0800a988 <__sinit_lock_release>:
 800a988:	4801      	ldr	r0, [pc, #4]	; (800a990 <__sinit_lock_release+0x8>)
 800a98a:	f000 b8a2 	b.w	800aad2 <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	2000146e 	.word	0x2000146e

0800a994 <__sinit>:
 800a994:	b510      	push	{r4, lr}
 800a996:	4604      	mov	r4, r0
 800a998:	f7ff fff0 	bl	800a97c <__sinit_lock_acquire>
 800a99c:	69a3      	ldr	r3, [r4, #24]
 800a99e:	b11b      	cbz	r3, 800a9a8 <__sinit+0x14>
 800a9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a4:	f7ff bff0 	b.w	800a988 <__sinit_lock_release>
 800a9a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9ac:	6523      	str	r3, [r4, #80]	; 0x50
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <__sinit+0x68>)
 800a9b0:	4a13      	ldr	r2, [pc, #76]	; (800aa00 <__sinit+0x6c>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	bf04      	itt	eq
 800a9ba:	2301      	moveq	r3, #1
 800a9bc:	61a3      	streq	r3, [r4, #24]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 f820 	bl	800aa04 <__sfp>
 800a9c4:	6060      	str	r0, [r4, #4]
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 f81c 	bl	800aa04 <__sfp>
 800a9cc:	60a0      	str	r0, [r4, #8]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 f818 	bl	800aa04 <__sfp>
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	60e0      	str	r0, [r4, #12]
 800a9d8:	2104      	movs	r1, #4
 800a9da:	6860      	ldr	r0, [r4, #4]
 800a9dc:	f7ff ff82 	bl	800a8e4 <std>
 800a9e0:	68a0      	ldr	r0, [r4, #8]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	2109      	movs	r1, #9
 800a9e6:	f7ff ff7d 	bl	800a8e4 <std>
 800a9ea:	68e0      	ldr	r0, [r4, #12]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	2112      	movs	r1, #18
 800a9f0:	f7ff ff78 	bl	800a8e4 <std>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	61a3      	str	r3, [r4, #24]
 800a9f8:	e7d2      	b.n	800a9a0 <__sinit+0xc>
 800a9fa:	bf00      	nop
 800a9fc:	0800ae60 	.word	0x0800ae60
 800aa00:	0800a92d 	.word	0x0800a92d

0800aa04 <__sfp>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	4607      	mov	r7, r0
 800aa08:	f7ff ffac 	bl	800a964 <__sfp_lock_acquire>
 800aa0c:	4b1e      	ldr	r3, [pc, #120]	; (800aa88 <__sfp+0x84>)
 800aa0e:	681e      	ldr	r6, [r3, #0]
 800aa10:	69b3      	ldr	r3, [r6, #24]
 800aa12:	b913      	cbnz	r3, 800aa1a <__sfp+0x16>
 800aa14:	4630      	mov	r0, r6
 800aa16:	f7ff ffbd 	bl	800a994 <__sinit>
 800aa1a:	3648      	adds	r6, #72	; 0x48
 800aa1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	d503      	bpl.n	800aa2c <__sfp+0x28>
 800aa24:	6833      	ldr	r3, [r6, #0]
 800aa26:	b30b      	cbz	r3, 800aa6c <__sfp+0x68>
 800aa28:	6836      	ldr	r6, [r6, #0]
 800aa2a:	e7f7      	b.n	800aa1c <__sfp+0x18>
 800aa2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa30:	b9d5      	cbnz	r5, 800aa68 <__sfp+0x64>
 800aa32:	4b16      	ldr	r3, [pc, #88]	; (800aa8c <__sfp+0x88>)
 800aa34:	60e3      	str	r3, [r4, #12]
 800aa36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa3a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa3c:	f000 f847 	bl	800aace <__retarget_lock_init_recursive>
 800aa40:	f7ff ff96 	bl	800a970 <__sfp_lock_release>
 800aa44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa4c:	6025      	str	r5, [r4, #0]
 800aa4e:	61a5      	str	r5, [r4, #24]
 800aa50:	2208      	movs	r2, #8
 800aa52:	4629      	mov	r1, r5
 800aa54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa58:	f7fb fd22 	bl	80064a0 <memset>
 800aa5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa64:	4620      	mov	r0, r4
 800aa66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa68:	3468      	adds	r4, #104	; 0x68
 800aa6a:	e7d9      	b.n	800aa20 <__sfp+0x1c>
 800aa6c:	2104      	movs	r1, #4
 800aa6e:	4638      	mov	r0, r7
 800aa70:	f7ff ff62 	bl	800a938 <__sfmoreglue>
 800aa74:	4604      	mov	r4, r0
 800aa76:	6030      	str	r0, [r6, #0]
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d1d5      	bne.n	800aa28 <__sfp+0x24>
 800aa7c:	f7ff ff78 	bl	800a970 <__sfp_lock_release>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	e7ee      	b.n	800aa64 <__sfp+0x60>
 800aa86:	bf00      	nop
 800aa88:	0800ae60 	.word	0x0800ae60
 800aa8c:	ffff0001 	.word	0xffff0001

0800aa90 <_fwalk_reent>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4606      	mov	r6, r0
 800aa96:	4688      	mov	r8, r1
 800aa98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa9c:	2700      	movs	r7, #0
 800aa9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaa2:	f1b9 0901 	subs.w	r9, r9, #1
 800aaa6:	d505      	bpl.n	800aab4 <_fwalk_reent+0x24>
 800aaa8:	6824      	ldr	r4, [r4, #0]
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	d1f7      	bne.n	800aa9e <_fwalk_reent+0xe>
 800aaae:	4638      	mov	r0, r7
 800aab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab4:	89ab      	ldrh	r3, [r5, #12]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d907      	bls.n	800aaca <_fwalk_reent+0x3a>
 800aaba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aabe:	3301      	adds	r3, #1
 800aac0:	d003      	beq.n	800aaca <_fwalk_reent+0x3a>
 800aac2:	4629      	mov	r1, r5
 800aac4:	4630      	mov	r0, r6
 800aac6:	47c0      	blx	r8
 800aac8:	4307      	orrs	r7, r0
 800aaca:	3568      	adds	r5, #104	; 0x68
 800aacc:	e7e9      	b.n	800aaa2 <_fwalk_reent+0x12>

0800aace <__retarget_lock_init_recursive>:
 800aace:	4770      	bx	lr

0800aad0 <__retarget_lock_acquire_recursive>:
 800aad0:	4770      	bx	lr

0800aad2 <__retarget_lock_release_recursive>:
 800aad2:	4770      	bx	lr

0800aad4 <__swhatbuf_r>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	460e      	mov	r6, r1
 800aad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aadc:	2900      	cmp	r1, #0
 800aade:	b096      	sub	sp, #88	; 0x58
 800aae0:	4614      	mov	r4, r2
 800aae2:	461d      	mov	r5, r3
 800aae4:	da08      	bge.n	800aaf8 <__swhatbuf_r+0x24>
 800aae6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	061a      	lsls	r2, r3, #24
 800aaf0:	d410      	bmi.n	800ab14 <__swhatbuf_r+0x40>
 800aaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf6:	e00e      	b.n	800ab16 <__swhatbuf_r+0x42>
 800aaf8:	466a      	mov	r2, sp
 800aafa:	f000 f903 	bl	800ad04 <_fstat_r>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	dbf1      	blt.n	800aae6 <__swhatbuf_r+0x12>
 800ab02:	9a01      	ldr	r2, [sp, #4]
 800ab04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab0c:	425a      	negs	r2, r3
 800ab0e:	415a      	adcs	r2, r3
 800ab10:	602a      	str	r2, [r5, #0]
 800ab12:	e7ee      	b.n	800aaf2 <__swhatbuf_r+0x1e>
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	2000      	movs	r0, #0
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	b016      	add	sp, #88	; 0x58
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab20 <__smakebuf_r>:
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab24:	079d      	lsls	r5, r3, #30
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	d507      	bpl.n	800ab3c <__smakebuf_r+0x1c>
 800ab2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	2301      	movs	r3, #1
 800ab36:	6163      	str	r3, [r4, #20]
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	ab01      	add	r3, sp, #4
 800ab3e:	466a      	mov	r2, sp
 800ab40:	f7ff ffc8 	bl	800aad4 <__swhatbuf_r>
 800ab44:	9900      	ldr	r1, [sp, #0]
 800ab46:	4605      	mov	r5, r0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff f957 	bl	8009dfc <_malloc_r>
 800ab4e:	b948      	cbnz	r0, 800ab64 <__smakebuf_r+0x44>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d4ef      	bmi.n	800ab38 <__smakebuf_r+0x18>
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7e3      	b.n	800ab2c <__smakebuf_r+0xc>
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <__smakebuf_r+0x7c>)
 800ab66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	9b00      	ldr	r3, [sp, #0]
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	6120      	str	r0, [r4, #16]
 800ab7a:	b15b      	cbz	r3, 800ab94 <__smakebuf_r+0x74>
 800ab7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 f8d1 	bl	800ad28 <_isatty_r>
 800ab86:	b128      	cbz	r0, 800ab94 <__smakebuf_r+0x74>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	89a0      	ldrh	r0, [r4, #12]
 800ab96:	4305      	orrs	r5, r0
 800ab98:	81a5      	strh	r5, [r4, #12]
 800ab9a:	e7cd      	b.n	800ab38 <__smakebuf_r+0x18>
 800ab9c:	0800a92d 	.word	0x0800a92d

0800aba0 <_malloc_usable_size_r>:
 800aba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba4:	1f18      	subs	r0, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfbc      	itt	lt
 800abaa:	580b      	ldrlt	r3, [r1, r0]
 800abac:	18c0      	addlt	r0, r0, r3
 800abae:	4770      	bx	lr

0800abb0 <_raise_r>:
 800abb0:	291f      	cmp	r1, #31
 800abb2:	b538      	push	{r3, r4, r5, lr}
 800abb4:	4604      	mov	r4, r0
 800abb6:	460d      	mov	r5, r1
 800abb8:	d904      	bls.n	800abc4 <_raise_r+0x14>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	f04f 30ff 	mov.w	r0, #4294967295
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abc6:	b112      	cbz	r2, 800abce <_raise_r+0x1e>
 800abc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abcc:	b94b      	cbnz	r3, 800abe2 <_raise_r+0x32>
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 f830 	bl	800ac34 <_getpid_r>
 800abd4:	462a      	mov	r2, r5
 800abd6:	4601      	mov	r1, r0
 800abd8:	4620      	mov	r0, r4
 800abda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abde:	f000 b817 	b.w	800ac10 <_kill_r>
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d00a      	beq.n	800abfc <_raise_r+0x4c>
 800abe6:	1c59      	adds	r1, r3, #1
 800abe8:	d103      	bne.n	800abf2 <_raise_r+0x42>
 800abea:	2316      	movs	r3, #22
 800abec:	6003      	str	r3, [r0, #0]
 800abee:	2001      	movs	r0, #1
 800abf0:	e7e7      	b.n	800abc2 <_raise_r+0x12>
 800abf2:	2400      	movs	r4, #0
 800abf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abf8:	4628      	mov	r0, r5
 800abfa:	4798      	blx	r3
 800abfc:	2000      	movs	r0, #0
 800abfe:	e7e0      	b.n	800abc2 <_raise_r+0x12>

0800ac00 <raise>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <raise+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f7ff bfd3 	b.w	800abb0 <_raise_r>
 800ac0a:	bf00      	nop
 800ac0c:	20000018 	.word	0x20000018

0800ac10 <_kill_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_kill_r+0x20>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	602b      	str	r3, [r5, #0]
 800ac1e:	f7f7 fac3 	bl	80021a8 <_kill>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d102      	bne.n	800ac2c <_kill_r+0x1c>
 800ac26:	682b      	ldr	r3, [r5, #0]
 800ac28:	b103      	cbz	r3, 800ac2c <_kill_r+0x1c>
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	bd38      	pop	{r3, r4, r5, pc}
 800ac2e:	bf00      	nop
 800ac30:	20001468 	.word	0x20001468

0800ac34 <_getpid_r>:
 800ac34:	f7f7 bab0 	b.w	8002198 <_getpid>

0800ac38 <__sread>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	f000 f894 	bl	800ad6c <_read_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	bfab      	itete	ge
 800ac48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac4c:	181b      	addge	r3, r3, r0
 800ac4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac52:	bfac      	ite	ge
 800ac54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac56:	81a3      	strhlt	r3, [r4, #12]
 800ac58:	bd10      	pop	{r4, pc}

0800ac5a <__swrite>:
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	461f      	mov	r7, r3
 800ac60:	898b      	ldrh	r3, [r1, #12]
 800ac62:	05db      	lsls	r3, r3, #23
 800ac64:	4605      	mov	r5, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4616      	mov	r6, r2
 800ac6a:	d505      	bpl.n	800ac78 <__swrite+0x1e>
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	2302      	movs	r3, #2
 800ac72:	2200      	movs	r2, #0
 800ac74:	f000 f868 	bl	800ad48 <_lseek_r>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	4632      	mov	r2, r6
 800ac86:	463b      	mov	r3, r7
 800ac88:	4628      	mov	r0, r5
 800ac8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	f000 b817 	b.w	800acc0 <_write_r>

0800ac92 <__sseek>:
 800ac92:	b510      	push	{r4, lr}
 800ac94:	460c      	mov	r4, r1
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 f855 	bl	800ad48 <_lseek_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	bf15      	itete	ne
 800aca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acae:	81a3      	strheq	r3, [r4, #12]
 800acb0:	bf18      	it	ne
 800acb2:	81a3      	strhne	r3, [r4, #12]
 800acb4:	bd10      	pop	{r4, pc}

0800acb6 <__sclose>:
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 b813 	b.w	800ace4 <_close_r>
	...

0800acc0 <_write_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d07      	ldr	r5, [pc, #28]	; (800ace0 <_write_r+0x20>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7f7 faa1 	bl	8002216 <_write>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_write_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_write_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	20001468 	.word	0x20001468

0800ace4 <_close_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d06      	ldr	r5, [pc, #24]	; (800ad00 <_close_r+0x1c>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f7 faad 	bl	800224e <_close>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_close_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_close_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20001468 	.word	0x20001468

0800ad04 <_fstat_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d07      	ldr	r5, [pc, #28]	; (800ad24 <_fstat_r+0x20>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	4611      	mov	r1, r2
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	f7f7 faa8 	bl	8002266 <_fstat>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	d102      	bne.n	800ad20 <_fstat_r+0x1c>
 800ad1a:	682b      	ldr	r3, [r5, #0]
 800ad1c:	b103      	cbz	r3, 800ad20 <_fstat_r+0x1c>
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	bf00      	nop
 800ad24:	20001468 	.word	0x20001468

0800ad28 <_isatty_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_isatty_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f7 faa7 	bl	8002286 <_isatty>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_isatty_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_isatty_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	20001468 	.word	0x20001468

0800ad48 <_lseek_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	; (800ad68 <_lseek_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7f7 faa0 	bl	800229c <_lseek>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_lseek_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_lseek_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20001468 	.word	0x20001468

0800ad6c <_read_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_read_r+0x20>)
 800ad70:	4604      	mov	r4, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7f7 fa2e 	bl	80021dc <_read>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_read_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_read_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20001468 	.word	0x20001468

0800ad90 <_init>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr

0800ad9c <_fini>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	bf00      	nop
 800ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada2:	bc08      	pop	{r3}
 800ada4:	469e      	mov	lr, r3
 800ada6:	4770      	bx	lr
