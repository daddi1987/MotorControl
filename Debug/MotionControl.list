
MotionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001518  20000074  080053f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000158c  080053f4  0002158c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001746c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e2e  00000000  00000000  00037510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  0003b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024db2  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6e5  00000000  00000000  00061d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8741  00000000  00000000  0007c41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b0c  00000000  00000000  00154bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005270 	.word	0x08005270

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005270 	.word	0x08005270

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000212:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000216:	491a      	ldr	r1, [pc, #104]	; (8000280 <__tx_DBGHandler+0x6>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000218:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800021c:	4819      	ldr	r0, [pc, #100]	; (8000284 <__tx_DBGHandler+0xa>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800021e:	4918      	ldr	r1, [pc, #96]	; (8000280 <__tx_DBGHandler+0x6>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000220:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000222:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <__tx_DBGHandler+0xe>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000226:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000228:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000232:	f241 0167 	movw	r1, #4199	; 0x1067
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000236:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000238:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800023c:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800023e:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000242:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000246:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 800024a:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800024e:	490f      	ldr	r1, [pc, #60]	; (800028c <__tx_DBGHandler+0x12>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000250:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000254:	4770      	bx	lr

08000256 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000256:	f7ff bffe 	b.w	8000256 <__tx_BadHandler>

0800025a <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 800025a:	f7ff bffe 	b.w	800025a <__tx_HardfaultHandler>

0800025e <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_SVCallHandler>

08000262 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000262:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000264:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000268:	4770      	bx	lr

0800026a <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800026c:	f000 f890 	bl	8000390 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000274:	4770      	bx	lr

08000276 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_NMIHandler>

0800027a <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 800027a:	f7ff bffe 	b.w	800027a <__tx_DBGHandler>
 800027e:	0000      	.short	0x0000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000280:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000284:	20000f44 	.word	0x20000f44
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000288:	e0001000 	.word	0xe0001000
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800028c:	40ff0000 	.word	0x40ff0000

08000290 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000290:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000296:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000298:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800029c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002b6:	f3bf 8f6f 	isb	sy

080002ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ba:	e7fe      	b.n	80002ba <__tx_wait_here>

080002bc <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002bc:	4821      	ldr	r0, [pc, #132]	; (8000344 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002c6:	b191      	cbz	r1, 80002ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002d6:	d101      	bne.n	80002dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002dc:	4c1b      	ldr	r4, [pc, #108]	; (800034c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002e8:	b10d      	cbz	r5, 80002ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ec:	6023      	str	r3, [r4, #0]

080002ee <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ee:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002f2:	b1b1      	cbz	r1, 8000322 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002f4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002f6:	b662      	cpsie	i

080002f8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002fa:	4c14      	ldr	r4, [pc, #80]	; (800034c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000302:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000304:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000306:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800030a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000312:	d101      	bne.n	8000318 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000314:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000318 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800033c:	e7dc      	b.n	80002f8 <__tx_ts_restore>

0800033e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800033e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000340:	20000fe0 	.word	0x20000fe0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000344:	20000f48 	.word	0x20000f48
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000348:	20000f4c 	.word	0x20000f4c
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800034c:	2000154c 	.word	0x2000154c

08000350 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000350:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000352:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000356:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800035a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800035e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000360:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000364:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000366:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000368:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800036a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800036c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800036e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000370:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000372:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000374:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000376:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000378:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800037c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000382:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000384:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800038a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800038c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800038e:	4770      	bx	lr

08000390 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000390:	4922      	ldr	r1, [pc, #136]	; (800041c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000392:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000394:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000398:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800039c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800039e:	b13a      	cbz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003a6:	b91a      	cbnz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003ae:	6018      	str	r0, [r3, #0]

080003b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003b0:	491d      	ldr	r1, [pc, #116]	; (8000428 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003b6:	b122      	cbz	r2, 80003c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003c0:	e008      	b.n	80003d4 <__tx_timer_done>

080003c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003cc:	d101      	bne.n	80003d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003d0:	6818      	ldr	r0, [r3, #0]

080003d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003d2:	6008      	str	r0, [r1, #0]

080003d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003d8:	b912      	cbnz	r2, 80003e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003da:	4914      	ldr	r1, [pc, #80]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003de:	b1d0      	cbz	r0, 8000416 <__tx_timer_nothing_expired>

080003e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003e4:	4911      	ldr	r1, [pc, #68]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003e8:	b108      	cbz	r0, 80003ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ea:	f003 fdc7 	bl	8003f7c <_tx_timer_expiration_process>

080003ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003f2:	b172      	cbz	r2, 8000412 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003f4:	f003 fca6 	bl	8003d44 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003fc:	b949      	cbnz	r1, 8000412 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000400:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000404:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800040c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800040e:	d000      	beq.n	8000412 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000410:	6002      	str	r2, [r0, #0]

08000412 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000412:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000416 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000416:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	20000fec 	.word	0x20000fec
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000420:	2000154c 	.word	0x2000154c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	20000ff0 	.word	0x20000ff0
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	2000107c 	.word	0x2000107c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800042c:	20001080 	.word	0x20001080
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000430:	20001078 	.word	0x20001078
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000434:	20001074 	.word	0x20001074
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000438:	20000fe0 	.word	0x20000fe0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800043c:	20000f48 	.word	0x20000f48
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000440:	20000f4c 	.word	0x20000f4c
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000444:	e000ed04 	.word	0xe000ed04
	...

08000450 <memchr>:
 8000450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000454:	2a10      	cmp	r2, #16
 8000456:	db2b      	blt.n	80004b0 <memchr+0x60>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	d008      	beq.n	8000470 <memchr+0x20>
 800045e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000462:	3a01      	subs	r2, #1
 8000464:	428b      	cmp	r3, r1
 8000466:	d02d      	beq.n	80004c4 <memchr+0x74>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	b342      	cbz	r2, 80004c0 <memchr+0x70>
 800046e:	d1f6      	bne.n	800045e <memchr+0xe>
 8000470:	b4f0      	push	{r4, r5, r6, r7}
 8000472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800047a:	f022 0407 	bic.w	r4, r2, #7
 800047e:	f07f 0700 	mvns.w	r7, #0
 8000482:	2300      	movs	r3, #0
 8000484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000488:	3c08      	subs	r4, #8
 800048a:	ea85 0501 	eor.w	r5, r5, r1
 800048e:	ea86 0601 	eor.w	r6, r6, r1
 8000492:	fa85 f547 	uadd8	r5, r5, r7
 8000496:	faa3 f587 	sel	r5, r3, r7
 800049a:	fa86 f647 	uadd8	r6, r6, r7
 800049e:	faa5 f687 	sel	r6, r5, r7
 80004a2:	b98e      	cbnz	r6, 80004c8 <memchr+0x78>
 80004a4:	d1ee      	bne.n	8000484 <memchr+0x34>
 80004a6:	bcf0      	pop	{r4, r5, r6, r7}
 80004a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004ac:	f002 0207 	and.w	r2, r2, #7
 80004b0:	b132      	cbz	r2, 80004c0 <memchr+0x70>
 80004b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004b6:	3a01      	subs	r2, #1
 80004b8:	ea83 0301 	eor.w	r3, r3, r1
 80004bc:	b113      	cbz	r3, 80004c4 <memchr+0x74>
 80004be:	d1f8      	bne.n	80004b2 <memchr+0x62>
 80004c0:	2000      	movs	r0, #0
 80004c2:	4770      	bx	lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4770      	bx	lr
 80004c8:	2d00      	cmp	r5, #0
 80004ca:	bf06      	itte	eq
 80004cc:	4635      	moveq	r5, r6
 80004ce:	3803      	subeq	r0, #3
 80004d0:	3807      	subne	r0, #7
 80004d2:	f015 0f01 	tst.w	r5, #1
 80004d6:	d107      	bne.n	80004e8 <memchr+0x98>
 80004d8:	3001      	adds	r0, #1
 80004da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004de:	bf02      	ittt	eq
 80004e0:	3001      	addeq	r0, #1
 80004e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004e6:	3001      	addeq	r0, #1
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	3801      	subs	r0, #1
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <__aeabi_uldivmod>:
 80004f0:	b953      	cbnz	r3, 8000508 <__aeabi_uldivmod+0x18>
 80004f2:	b94a      	cbnz	r2, 8000508 <__aeabi_uldivmod+0x18>
 80004f4:	2900      	cmp	r1, #0
 80004f6:	bf08      	it	eq
 80004f8:	2800      	cmpeq	r0, #0
 80004fa:	bf1c      	itt	ne
 80004fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000500:	f04f 30ff 	movne.w	r0, #4294967295
 8000504:	f000 b974 	b.w	80007f0 <__aeabi_idiv0>
 8000508:	f1ad 0c08 	sub.w	ip, sp, #8
 800050c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000510:	f000 f806 	bl	8000520 <__udivmoddi4>
 8000514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800051c:	b004      	add	sp, #16
 800051e:	4770      	bx	lr

08000520 <__udivmoddi4>:
 8000520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000524:	9d08      	ldr	r5, [sp, #32]
 8000526:	4604      	mov	r4, r0
 8000528:	468e      	mov	lr, r1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d14d      	bne.n	80005ca <__udivmoddi4+0xaa>
 800052e:	428a      	cmp	r2, r1
 8000530:	4694      	mov	ip, r2
 8000532:	d969      	bls.n	8000608 <__udivmoddi4+0xe8>
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	b152      	cbz	r2, 8000550 <__udivmoddi4+0x30>
 800053a:	fa01 f302 	lsl.w	r3, r1, r2
 800053e:	f1c2 0120 	rsb	r1, r2, #32
 8000542:	fa20 f101 	lsr.w	r1, r0, r1
 8000546:	fa0c fc02 	lsl.w	ip, ip, r2
 800054a:	ea41 0e03 	orr.w	lr, r1, r3
 800054e:	4094      	lsls	r4, r2
 8000550:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000554:	0c21      	lsrs	r1, r4, #16
 8000556:	fbbe f6f8 	udiv	r6, lr, r8
 800055a:	fa1f f78c 	uxth.w	r7, ip
 800055e:	fb08 e316 	mls	r3, r8, r6, lr
 8000562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000566:	fb06 f107 	mul.w	r1, r6, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d90a      	bls.n	8000584 <__udivmoddi4+0x64>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f106 30ff 	add.w	r0, r6, #4294967295
 8000576:	f080 811f 	bcs.w	80007b8 <__udivmoddi4+0x298>
 800057a:	4299      	cmp	r1, r3
 800057c:	f240 811c 	bls.w	80007b8 <__udivmoddi4+0x298>
 8000580:	3e02      	subs	r6, #2
 8000582:	4463      	add	r3, ip
 8000584:	1a5b      	subs	r3, r3, r1
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb3 f0f8 	udiv	r0, r3, r8
 800058c:	fb08 3310 	mls	r3, r8, r0, r3
 8000590:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000594:	fb00 f707 	mul.w	r7, r0, r7
 8000598:	42a7      	cmp	r7, r4
 800059a:	d90a      	bls.n	80005b2 <__udivmoddi4+0x92>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a4:	f080 810a 	bcs.w	80007bc <__udivmoddi4+0x29c>
 80005a8:	42a7      	cmp	r7, r4
 80005aa:	f240 8107 	bls.w	80007bc <__udivmoddi4+0x29c>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b6:	1be4      	subs	r4, r4, r7
 80005b8:	2600      	movs	r6, #0
 80005ba:	b11d      	cbz	r5, 80005c4 <__udivmoddi4+0xa4>
 80005bc:	40d4      	lsrs	r4, r2
 80005be:	2300      	movs	r3, #0
 80005c0:	e9c5 4300 	strd	r4, r3, [r5]
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d909      	bls.n	80005e2 <__udivmoddi4+0xc2>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	f000 80ef 	beq.w	80007b2 <__udivmoddi4+0x292>
 80005d4:	2600      	movs	r6, #0
 80005d6:	e9c5 0100 	strd	r0, r1, [r5]
 80005da:	4630      	mov	r0, r6
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	fab3 f683 	clz	r6, r3
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d14a      	bne.n	8000680 <__udivmoddi4+0x160>
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d302      	bcc.n	80005f4 <__udivmoddi4+0xd4>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f200 80f9 	bhi.w	80007e6 <__udivmoddi4+0x2c6>
 80005f4:	1a84      	subs	r4, r0, r2
 80005f6:	eb61 0303 	sbc.w	r3, r1, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	469e      	mov	lr, r3
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d0e0      	beq.n	80005c4 <__udivmoddi4+0xa4>
 8000602:	e9c5 4e00 	strd	r4, lr, [r5]
 8000606:	e7dd      	b.n	80005c4 <__udivmoddi4+0xa4>
 8000608:	b902      	cbnz	r2, 800060c <__udivmoddi4+0xec>
 800060a:	deff      	udf	#255	; 0xff
 800060c:	fab2 f282 	clz	r2, r2
 8000610:	2a00      	cmp	r2, #0
 8000612:	f040 8092 	bne.w	800073a <__udivmoddi4+0x21a>
 8000616:	eba1 010c 	sub.w	r1, r1, ip
 800061a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800061e:	fa1f fe8c 	uxth.w	lr, ip
 8000622:	2601      	movs	r6, #1
 8000624:	0c20      	lsrs	r0, r4, #16
 8000626:	fbb1 f3f7 	udiv	r3, r1, r7
 800062a:	fb07 1113 	mls	r1, r7, r3, r1
 800062e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000632:	fb0e f003 	mul.w	r0, lr, r3
 8000636:	4288      	cmp	r0, r1
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x12c>
 800063a:	eb1c 0101 	adds.w	r1, ip, r1
 800063e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000642:	d202      	bcs.n	800064a <__udivmoddi4+0x12a>
 8000644:	4288      	cmp	r0, r1
 8000646:	f200 80cb 	bhi.w	80007e0 <__udivmoddi4+0x2c0>
 800064a:	4643      	mov	r3, r8
 800064c:	1a09      	subs	r1, r1, r0
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb1 f0f7 	udiv	r0, r1, r7
 8000654:	fb07 1110 	mls	r1, r7, r0, r1
 8000658:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800065c:	fb0e fe00 	mul.w	lr, lr, r0
 8000660:	45a6      	cmp	lr, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x156>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f100 31ff 	add.w	r1, r0, #4294967295
 800066c:	d202      	bcs.n	8000674 <__udivmoddi4+0x154>
 800066e:	45a6      	cmp	lr, r4
 8000670:	f200 80bb 	bhi.w	80007ea <__udivmoddi4+0x2ca>
 8000674:	4608      	mov	r0, r1
 8000676:	eba4 040e 	sub.w	r4, r4, lr
 800067a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800067e:	e79c      	b.n	80005ba <__udivmoddi4+0x9a>
 8000680:	f1c6 0720 	rsb	r7, r6, #32
 8000684:	40b3      	lsls	r3, r6
 8000686:	fa22 fc07 	lsr.w	ip, r2, r7
 800068a:	ea4c 0c03 	orr.w	ip, ip, r3
 800068e:	fa20 f407 	lsr.w	r4, r0, r7
 8000692:	fa01 f306 	lsl.w	r3, r1, r6
 8000696:	431c      	orrs	r4, r3
 8000698:	40f9      	lsrs	r1, r7
 800069a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800069e:	fa00 f306 	lsl.w	r3, r0, r6
 80006a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006a6:	0c20      	lsrs	r0, r4, #16
 80006a8:	fa1f fe8c 	uxth.w	lr, ip
 80006ac:	fb09 1118 	mls	r1, r9, r8, r1
 80006b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b4:	fb08 f00e 	mul.w	r0, r8, lr
 80006b8:	4288      	cmp	r0, r1
 80006ba:	fa02 f206 	lsl.w	r2, r2, r6
 80006be:	d90b      	bls.n	80006d8 <__udivmoddi4+0x1b8>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006c8:	f080 8088 	bcs.w	80007dc <__udivmoddi4+0x2bc>
 80006cc:	4288      	cmp	r0, r1
 80006ce:	f240 8085 	bls.w	80007dc <__udivmoddi4+0x2bc>
 80006d2:	f1a8 0802 	sub.w	r8, r8, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	1a09      	subs	r1, r1, r0
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e0:	fb09 1110 	mls	r1, r9, r0, r1
 80006e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	458e      	cmp	lr, r1
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x1e2>
 80006f0:	eb1c 0101 	adds.w	r1, ip, r1
 80006f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006f8:	d26c      	bcs.n	80007d4 <__udivmoddi4+0x2b4>
 80006fa:	458e      	cmp	lr, r1
 80006fc:	d96a      	bls.n	80007d4 <__udivmoddi4+0x2b4>
 80006fe:	3802      	subs	r0, #2
 8000700:	4461      	add	r1, ip
 8000702:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000706:	fba0 9402 	umull	r9, r4, r0, r2
 800070a:	eba1 010e 	sub.w	r1, r1, lr
 800070e:	42a1      	cmp	r1, r4
 8000710:	46c8      	mov	r8, r9
 8000712:	46a6      	mov	lr, r4
 8000714:	d356      	bcc.n	80007c4 <__udivmoddi4+0x2a4>
 8000716:	d053      	beq.n	80007c0 <__udivmoddi4+0x2a0>
 8000718:	b15d      	cbz	r5, 8000732 <__udivmoddi4+0x212>
 800071a:	ebb3 0208 	subs.w	r2, r3, r8
 800071e:	eb61 010e 	sbc.w	r1, r1, lr
 8000722:	fa01 f707 	lsl.w	r7, r1, r7
 8000726:	fa22 f306 	lsr.w	r3, r2, r6
 800072a:	40f1      	lsrs	r1, r6
 800072c:	431f      	orrs	r7, r3
 800072e:	e9c5 7100 	strd	r7, r1, [r5]
 8000732:	2600      	movs	r6, #0
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	40d8      	lsrs	r0, r3
 8000740:	fa0c fc02 	lsl.w	ip, ip, r2
 8000744:	fa21 f303 	lsr.w	r3, r1, r3
 8000748:	4091      	lsls	r1, r2
 800074a:	4301      	orrs	r1, r0
 800074c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000750:	fa1f fe8c 	uxth.w	lr, ip
 8000754:	fbb3 f0f7 	udiv	r0, r3, r7
 8000758:	fb07 3610 	mls	r6, r7, r0, r3
 800075c:	0c0b      	lsrs	r3, r1, #16
 800075e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000762:	fb00 f60e 	mul.w	r6, r0, lr
 8000766:	429e      	cmp	r6, r3
 8000768:	fa04 f402 	lsl.w	r4, r4, r2
 800076c:	d908      	bls.n	8000780 <__udivmoddi4+0x260>
 800076e:	eb1c 0303 	adds.w	r3, ip, r3
 8000772:	f100 38ff 	add.w	r8, r0, #4294967295
 8000776:	d22f      	bcs.n	80007d8 <__udivmoddi4+0x2b8>
 8000778:	429e      	cmp	r6, r3
 800077a:	d92d      	bls.n	80007d8 <__udivmoddi4+0x2b8>
 800077c:	3802      	subs	r0, #2
 800077e:	4463      	add	r3, ip
 8000780:	1b9b      	subs	r3, r3, r6
 8000782:	b289      	uxth	r1, r1
 8000784:	fbb3 f6f7 	udiv	r6, r3, r7
 8000788:	fb07 3316 	mls	r3, r7, r6, r3
 800078c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000790:	fb06 f30e 	mul.w	r3, r6, lr
 8000794:	428b      	cmp	r3, r1
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x28a>
 8000798:	eb1c 0101 	adds.w	r1, ip, r1
 800079c:	f106 38ff 	add.w	r8, r6, #4294967295
 80007a0:	d216      	bcs.n	80007d0 <__udivmoddi4+0x2b0>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d914      	bls.n	80007d0 <__udivmoddi4+0x2b0>
 80007a6:	3e02      	subs	r6, #2
 80007a8:	4461      	add	r1, ip
 80007aa:	1ac9      	subs	r1, r1, r3
 80007ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007b0:	e738      	b.n	8000624 <__udivmoddi4+0x104>
 80007b2:	462e      	mov	r6, r5
 80007b4:	4628      	mov	r0, r5
 80007b6:	e705      	b.n	80005c4 <__udivmoddi4+0xa4>
 80007b8:	4606      	mov	r6, r0
 80007ba:	e6e3      	b.n	8000584 <__udivmoddi4+0x64>
 80007bc:	4618      	mov	r0, r3
 80007be:	e6f8      	b.n	80005b2 <__udivmoddi4+0x92>
 80007c0:	454b      	cmp	r3, r9
 80007c2:	d2a9      	bcs.n	8000718 <__udivmoddi4+0x1f8>
 80007c4:	ebb9 0802 	subs.w	r8, r9, r2
 80007c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007cc:	3801      	subs	r0, #1
 80007ce:	e7a3      	b.n	8000718 <__udivmoddi4+0x1f8>
 80007d0:	4646      	mov	r6, r8
 80007d2:	e7ea      	b.n	80007aa <__udivmoddi4+0x28a>
 80007d4:	4620      	mov	r0, r4
 80007d6:	e794      	b.n	8000702 <__udivmoddi4+0x1e2>
 80007d8:	4640      	mov	r0, r8
 80007da:	e7d1      	b.n	8000780 <__udivmoddi4+0x260>
 80007dc:	46d0      	mov	r8, sl
 80007de:	e77b      	b.n	80006d8 <__udivmoddi4+0x1b8>
 80007e0:	3b02      	subs	r3, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e732      	b.n	800064c <__udivmoddi4+0x12c>
 80007e6:	4630      	mov	r0, r6
 80007e8:	e709      	b.n	80005fe <__udivmoddi4+0xde>
 80007ea:	4464      	add	r4, ip
 80007ec:	3802      	subs	r0, #2
 80007ee:	e742      	b.n	8000676 <__udivmoddi4+0x156>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007fc:	2334      	movs	r3, #52	; 0x34
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <tx_application_define+0x34>)
 8000806:	4909      	ldr	r1, [pc, #36]	; (800082c <tx_application_define+0x38>)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <tx_application_define+0x3c>)
 800080a:	f003 feff 	bl	800460c <_txe_byte_pool_create>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <tx_application_define+0x3c>)
 8000816:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 f80b 	bl	8000834 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090
 800082c:	08005288 	.word	0x08005288
 8000830:	20000490 	.word	0x20000490

08000834 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af08      	add	r7, sp, #32
 800083a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1,"my_First_trade",my_Thread_entry_1,0x1234,thread_stack1,THREAD_STACK_SIZE,
 8000844:	23b0      	movs	r3, #176	; 0xb0
 8000846:	9306      	str	r3, [sp, #24]
 8000848:	2301      	movs	r3, #1
 800084a:	9305      	str	r3, [sp, #20]
 800084c:	2301      	movs	r3, #1
 800084e:	9304      	str	r3, [sp, #16]
 8000850:	230f      	movs	r3, #15
 8000852:	9303      	str	r3, [sp, #12]
 8000854:	230f      	movs	r3, #15
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <App_ThreadX_Init+0x74>)
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	f241 2334 	movw	r3, #4660	; 0x1234
 8000866:	4a11      	ldr	r2, [pc, #68]	; (80008ac <App_ThreadX_Init+0x78>)
 8000868:	4911      	ldr	r1, [pc, #68]	; (80008b0 <App_ThreadX_Init+0x7c>)
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <App_ThreadX_Init+0x80>)
 800086c:	f003 ff6e 	bl	800474c <_txe_thread_create>
   		  15,15,1,TX_AUTO_START);  //RICHIAMARE IL PRIMO TRADE
  tx_thread_create(&thread_ptr2,"my_Second_trade",my_Thread_entry_2,0x1234,thread_stack2,THREAD_STACK_SIZE,
 8000870:	23b0      	movs	r3, #176	; 0xb0
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	2301      	movs	r3, #1
 8000876:	9305      	str	r3, [sp, #20]
 8000878:	2301      	movs	r3, #1
 800087a:	9304      	str	r3, [sp, #16]
 800087c:	230f      	movs	r3, #15
 800087e:	9303      	str	r3, [sp, #12]
 8000880:	230f      	movs	r3, #15
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <App_ThreadX_Init+0x84>)
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	f241 2334 	movw	r3, #4660	; 0x1234
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <App_ThreadX_Init+0x88>)
 8000894:	490a      	ldr	r1, [pc, #40]	; (80008c0 <App_ThreadX_Init+0x8c>)
 8000896:	480b      	ldr	r0, [pc, #44]	; (80008c4 <App_ThreadX_Init+0x90>)
 8000898:	f003 ff58 	bl	800474c <_txe_thread_create>
   		  15,15,1,TX_AUTO_START);  //RICHIAMARE IL SECONDO TRADE
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200004c4 	.word	0x200004c4
 80008ac:	080008f5 	.word	0x080008f5
 80008b0:	0800529c 	.word	0x0800529c
 80008b4:	200008c4 	.word	0x200008c4
 80008b8:	20000974 	.word	0x20000974
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	080052ac 	.word	0x080052ac
 80008c4:	20000d74 	.word	0x20000d74

080008c8 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */
  sprintf(HEADER2, "Init ThreadX");
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <MX_ThreadX_Init+0x20>)
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <MX_ThreadX_Init+0x24>)
 80008d0:	f004 f860 	bl	8004994 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 80008d4:	2364      	movs	r3, #100	; 0x64
 80008d6:	220e      	movs	r2, #14
 80008d8:	4904      	ldr	r1, [pc, #16]	; (80008ec <MX_ThreadX_Init+0x24>)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_ThreadX_Init+0x28>)
 80008dc:	f001 ff39 	bl	8002752 <HAL_UART_Transmit>
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008e0:	f002 fc16 	bl	8003110 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	080052bc 	.word	0x080052bc
 80008ec:	20000e24 	.word	0x20000e24
 80008f0:	20000e48 	.word	0x20000e48

080008f4 <my_Thread_entry_1>:

/* USER CODE BEGIN 1 */
void my_Thread_entry_1(ULONG initial_input)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  Counter = Counter+1;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <my_Thread_entry_1+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a01      	ldr	r2, [pc, #4]	; (8000908 <my_Thread_entry_1+0x14>)
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e7f9      	b.n	80008fc <my_Thread_entry_1+0x8>
 8000908:	20000e44 	.word	0x20000e44

0800090c <my_Thread_entry_2>:
		  //Indispensable for Send Value without error to row empty
		  //HAL_Delay(1);
	}
}
void my_Thread_entry_2(ULONG initial_input)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	while(1)
	{
		  HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
 8000914:	2120      	movs	r1, #32
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <my_Thread_entry_2+0x4c>)
 8000918:	f000 fdeb 	bl	80014f2 <HAL_GPIO_TogglePin>
		  //HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, 0);
		  //HAL_Delay(1000);
		  //HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
		  //HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, 1);
		  //HAL_Delay(1000);
		  sprintf(MSG, "%d;Sx",Counter);
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <my_Thread_entry_2+0x50>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	461a      	mov	r2, r3
 8000922:	490f      	ldr	r1, [pc, #60]	; (8000960 <my_Thread_entry_2+0x54>)
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <my_Thread_entry_2+0x58>)
 8000926:	f004 f835 	bl	8004994 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	220a      	movs	r2, #10
 8000930:	490c      	ldr	r1, [pc, #48]	; (8000964 <my_Thread_entry_2+0x58>)
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <my_Thread_entry_2+0x5c>)
 8000934:	f001 ff0d 	bl	8002752 <HAL_UART_Transmit>
		  sprintf(CR,"\r\n");   											//Indispensable for Send Value without error to row empty
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <my_Thread_entry_2+0x60>)
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <my_Thread_entry_2+0x64>)
 800093c:	f004 f82a 	bl	8004994 <siprintf>
		  HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);
 8000940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000944:	2204      	movs	r2, #4
 8000946:	490a      	ldr	r1, [pc, #40]	; (8000970 <my_Thread_entry_2+0x64>)
 8000948:	4807      	ldr	r0, [pc, #28]	; (8000968 <my_Thread_entry_2+0x5c>)
 800094a:	f001 ff02 	bl	8002752 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f000 fb1b 	bl	8000f8c <HAL_Delay>
	{
 8000956:	e7dd      	b.n	8000914 <my_Thread_entry_2+0x8>
 8000958:	40020000 	.word	0x40020000
 800095c:	20000e44 	.word	0x20000e44
 8000960:	080052cc 	.word	0x080052cc
 8000964:	20000e34 	.word	0x20000e34
 8000968:	20000e48 	.word	0x20000e48
 800096c:	080052d4 	.word	0x080052d4
 8000970:	20000e40 	.word	0x20000e40

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 fac6 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f818 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 f8ae 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000984:	f000 f882 	bl	8000a8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized Serial Comunication \n");
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <main+0x30>)
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <main+0x34>)
 800098c:	f004 f802 	bl	8004994 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8000990:	2364      	movs	r3, #100	; 0x64
 8000992:	2223      	movs	r2, #35	; 0x23
 8000994:	4904      	ldr	r1, [pc, #16]	; (80009a8 <main+0x34>)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <main+0x38>)
 8000998:	f001 fedb 	bl	8002752 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800099c:	f7ff ff94 	bl	80008c8 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <main+0x2c>
 80009a2:	bf00      	nop
 80009a4:	080052d8 	.word	0x080052d8
 80009a8:	20000e8c 	.word	0x20000e8c
 80009ac:	20000e48 	.word	0x20000e48

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 ffe0 	bl	8004984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <SystemClock_Config+0xd4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a29      	ldr	r2, [pc, #164]	; (8000a84 <SystemClock_Config+0xd4>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f0:	2300      	movs	r3, #0
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <SystemClock_Config+0xd8>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a20:	2300      	movs	r3, #0
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a24:	2310      	movs	r3, #16
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f8ee 	bl	8001c20 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a4a:	f000 f8c9 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a64:	f107 0308 	add.w	r3, r7, #8
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fd5c 	bl	8001528 <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a76:	f000 f8b3 	bl	8000be0 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3750      	adds	r7, #80	; 0x50
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART2_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	f001 fdf8 	bl	80026b8 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f000 f887 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000e48 	.word	0x20000e48
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a2c      	ldr	r2, [pc, #176]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a25      	ldr	r2, [pc, #148]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b1f      	ldr	r3, [pc, #124]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_GPIO_Init+0xd0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_GPIO_Init+0xd4>)
 8000b6c:	f000 fca8 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_GPIO_Init+0xd8>)
 8000b88:	f000 fb06 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 8000b8c:	2320      	movs	r3, #32
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_GPIO_Init+0xd4>)
 8000ba4:	f000 faf8 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020800 	.word	0x40020800

08000bbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bce:	f000 f9bd 	bl	8000f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40001000 	.word	0x40001000

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(HEADER4, "Inside TradeMASTER");
 8000be8:	4905      	ldr	r1, [pc, #20]	; (8000c00 <Error_Handler+0x20>)
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <Error_Handler+0x24>)
 8000bec:	f003 fed2 	bl	8004994 <siprintf>
	  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	4903      	ldr	r1, [pc, #12]	; (8000c04 <Error_Handler+0x24>)
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <Error_Handler+0x28>)
 8000bf8:	f001 fdab 	bl	8002752 <HAL_UART_Transmit>
  {
 8000bfc:	e7f4      	b.n	8000be8 <Error_Handler+0x8>
 8000bfe:	bf00      	nop
 8000c00:	080052fc 	.word	0x080052fc
 8000c04:	20000eb0 	.word	0x20000eb0
 8000c08:	20000e48 	.word	0x20000e48

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f000 fa61 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <HAL_InitTick+0xe4>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 0310 	and.w	r3, r3, #16
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d18:	f107 0210 	add.w	r2, r7, #16
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fd1a 	bl	800175c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d103      	bne.n	8000d3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d32:	f000 fceb 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8000d36:	6378      	str	r0, [r7, #52]	; 0x34
 8000d38:	e004      	b.n	8000d44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d3a:	f000 fce7 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_InitTick+0xe8>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	; (8000ddc <HAL_InitTick+0xf0>)
 8000d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d78:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d7a:	f001 f9ef 	bl	800215c <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11b      	bne.n	8000dc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d8c:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <HAL_InitTick+0xec>)
 8000d8e:	f001 fa3f 	bl	8002210 <HAL_TIM_Base_Start_IT>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d111      	bne.n	8000dc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 f9eb 	bl	800117c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d808      	bhi.n	8000dbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2036      	movs	r0, #54	; 0x36
 8000db2:	f000 f9c7 	bl	8001144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db6:	4a0a      	ldr	r2, [pc, #40]	; (8000de0 <HAL_InitTick+0xf4>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	e002      	b.n	8000dc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3738      	adds	r7, #56	; 0x38
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	431bde83 	.word	0x431bde83
 8000dd8:	20000ec0 	.word	0x20000ec0
 8000ddc:	40001000 	.word	0x40001000
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM6_DAC_IRQHandler+0x10>)
 8000e16:	f001 fa6b 	bl	80022f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000ec0 	.word	0x20000ec0

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f003 fd6c 	bl	8004930 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000f08 	.word	0x20000f08
 8000e8c:	20001590 	.word	0x20001590

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed0:	4c0b      	ldr	r4, [pc, #44]	; (8000f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ede:	f7ff ffd7 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 fd2b 	bl	800493c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fd45 	bl	8000974 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ef8:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 8000efc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f00:	2000158c 	.word	0x2000158c

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f8fc 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f7ff fed8 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe66 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000f0c 	.word	0x20000f0c

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000f0c 	.word	0x20000f0c

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff61 	bl	800101c <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb1 	bl	80010c8 <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff80 	bl	8001074 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff54 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e165      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8154 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ae 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_GPIO_Init+0x304>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4d      	ldr	r2, [pc, #308]	; (80014a8 <HAL_GPIO_Init+0x310>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4c      	ldr	r2, [pc, #304]	; (80014ac <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x20a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x206>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x202>
 8001396:	2306      	movs	r3, #6
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139a:	2307      	movs	r3, #7
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x304>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x324>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae96 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001504:	887a      	ldrh	r2, [r7, #2]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	041a      	lsls	r2, r3, #16
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43d9      	mvns	r1, r3
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	400b      	ands	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	619a      	str	r2, [r3, #24]
}
 800151a:	bf00      	nop
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0cc      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d90c      	bls.n	8001564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b65      	ldr	r3, [pc, #404]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0b8      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d020      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800157c:	4b59      	ldr	r3, [pc, #356]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4a58      	ldr	r2, [pc, #352]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	494d      	ldr	r1, [pc, #308]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d044      	beq.n	8001648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d107      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e07f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d107      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	4b3f      	ldr	r3, [pc, #252]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e067      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001606:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f023 0203 	bic.w	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001618:	f7ff fcac 	bl	8000f74 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff fca8 	bl	8000f74 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e04f      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 020c 	and.w	r2, r3, #12
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	429a      	cmp	r2, r3
 8001646:	d1eb      	bne.n	8001620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d20c      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e032      	b.n	80016d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4916      	ldr	r1, [pc, #88]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	490e      	ldr	r1, [pc, #56]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ae:	f000 f887 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 80016b2:	4602      	mov	r2, r0
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	490a      	ldr	r1, [pc, #40]	; (80016e8 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	5ccb      	ldrb	r3, [r1, r3]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb0c 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08005324 	.word	0x08005324
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_GetHCLKFreq+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff0 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	08005334 	.word	0x08005334

08001734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001738:	f7ff ffdc 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	0b5b      	lsrs	r3, r3, #13
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	4903      	ldr	r1, [pc, #12]	; (8001758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40023800 	.word	0x40023800
 8001758:	08005334 	.word	0x08005334

0800175c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	220f      	movs	r2, #15
 800176a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_RCC_GetClockConfig+0x60>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 020f 	and.w	r2, r3, #15
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b0ae      	sub	sp, #184	; 0xb8
 80017c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e6:	4bcb      	ldr	r3, [pc, #812]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	f200 8206 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x440>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001831 	.word	0x08001831
 8001800:	08001c01 	.word	0x08001c01
 8001804:	08001c01 	.word	0x08001c01
 8001808:	08001c01 	.word	0x08001c01
 800180c:	08001839 	.word	0x08001839
 8001810:	08001c01 	.word	0x08001c01
 8001814:	08001c01 	.word	0x08001c01
 8001818:	08001c01 	.word	0x08001c01
 800181c:	08001841 	.word	0x08001841
 8001820:	08001c01 	.word	0x08001c01
 8001824:	08001c01 	.word	0x08001c01
 8001828:	08001c01 	.word	0x08001c01
 800182c:	08001a31 	.word	0x08001a31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001830:	4bb9      	ldr	r3, [pc, #740]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x358>)
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001836:	e1e7      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001838:	4bb8      	ldr	r3, [pc, #736]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x35c>)
 800183a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800183e:	e1e3      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001840:	4bb4      	ldr	r3, [pc, #720]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184c:	4bb1      	ldr	r3, [pc, #708]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d071      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001858:	4bae      	ldr	r3, [pc, #696]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	2200      	movs	r2, #0
 8001860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001864:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800186c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001870:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800187a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800187e:	4622      	mov	r2, r4
 8001880:	462b      	mov	r3, r5
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4621      	mov	r1, r4
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	6439      	str	r1, [r7, #64]	; 0x40
 800189c:	4629      	mov	r1, r5
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018b0:	4649      	mov	r1, r9
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4641      	mov	r1, r8
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4641      	mov	r1, r8
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4641      	mov	r1, r8
 80018c0:	1a51      	subs	r1, r2, r1
 80018c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80018c4:	4649      	mov	r1, r9
 80018c6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018d8:	4649      	mov	r1, r9
 80018da:	00cb      	lsls	r3, r1, #3
 80018dc:	4641      	mov	r1, r8
 80018de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018e2:	4641      	mov	r1, r8
 80018e4:	00ca      	lsls	r2, r1, #3
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	4603      	mov	r3, r0
 80018ec:	4622      	mov	r2, r4
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
 80018f2:	462b      	mov	r3, r5
 80018f4:	460a      	mov	r2, r1
 80018f6:	eb42 0303 	adc.w	r3, r2, r3
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001908:	4629      	mov	r1, r5
 800190a:	024b      	lsls	r3, r1, #9
 800190c:	4621      	mov	r1, r4
 800190e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001912:	4621      	mov	r1, r4
 8001914:	024a      	lsls	r2, r1, #9
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191e:	2200      	movs	r2, #0
 8001920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001928:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800192c:	f7fe fde0 	bl	80004f0 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800193a:	e067      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193c:	4b75      	ldr	r3, [pc, #468]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	2200      	movs	r2, #0
 8001944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001948:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800194c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001954:	67bb      	str	r3, [r7, #120]	; 0x78
 8001956:	2300      	movs	r3, #0
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c
 800195a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800195e:	4622      	mov	r2, r4
 8001960:	462b      	mov	r3, r5
 8001962:	f04f 0000 	mov.w	r0, #0
 8001966:	f04f 0100 	mov.w	r1, #0
 800196a:	0159      	lsls	r1, r3, #5
 800196c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001970:	0150      	lsls	r0, r2, #5
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4621      	mov	r1, r4
 8001978:	1a51      	subs	r1, r2, r1
 800197a:	62b9      	str	r1, [r7, #40]	; 0x28
 800197c:	4629      	mov	r1, r5
 800197e:	eb63 0301 	sbc.w	r3, r3, r1
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001990:	4649      	mov	r1, r9
 8001992:	018b      	lsls	r3, r1, #6
 8001994:	4641      	mov	r1, r8
 8001996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199a:	4641      	mov	r1, r8
 800199c:	018a      	lsls	r2, r1, #6
 800199e:	4641      	mov	r1, r8
 80019a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80019a4:	4649      	mov	r1, r9
 80019a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019be:	4692      	mov	sl, r2
 80019c0:	469b      	mov	fp, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	eb1a 0303 	adds.w	r3, sl, r3
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	462b      	mov	r3, r5
 80019cc:	eb4b 0303 	adc.w	r3, fp, r3
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019de:	4629      	mov	r1, r5
 80019e0:	028b      	lsls	r3, r1, #10
 80019e2:	4621      	mov	r1, r4
 80019e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019e8:	4621      	mov	r1, r4
 80019ea:	028a      	lsls	r2, r1, #10
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019f4:	2200      	movs	r2, #0
 80019f6:	673b      	str	r3, [r7, #112]	; 0x70
 80019f8:	677a      	str	r2, [r7, #116]	; 0x74
 80019fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019fe:	f7fe fd77 	bl	80004f0 <__aeabi_uldivmod>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4613      	mov	r3, r2
 8001a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a2e:	e0eb      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a30:	4b38      	ldr	r3, [pc, #224]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a3c:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d06b      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a48:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	2200      	movs	r2, #0
 8001a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a64:	4622      	mov	r2, r4
 8001a66:	462b      	mov	r3, r5
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	0159      	lsls	r1, r3, #5
 8001a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a76:	0150      	lsls	r0, r2, #5
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	1a51      	subs	r1, r2, r1
 8001a80:	61b9      	str	r1, [r7, #24]
 8001a82:	4629      	mov	r1, r5
 8001a84:	eb63 0301 	sbc.w	r3, r3, r1
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a96:	4659      	mov	r1, fp
 8001a98:	018b      	lsls	r3, r1, #6
 8001a9a:	4651      	mov	r1, sl
 8001a9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	018a      	lsls	r2, r1, #6
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	ebb2 0801 	subs.w	r8, r2, r1
 8001aaa:	4659      	mov	r1, fp
 8001aac:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac4:	4690      	mov	r8, r2
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	4623      	mov	r3, r4
 8001aca:	eb18 0303 	adds.w	r3, r8, r3
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	eb49 0303 	adc.w	r3, r9, r3
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	024b      	lsls	r3, r1, #9
 8001ae8:	4621      	mov	r1, r4
 8001aea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aee:	4621      	mov	r1, r4
 8001af0:	024a      	lsls	r2, r1, #9
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001afa:	2200      	movs	r2, #0
 8001afc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001afe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b04:	f7fe fcf4 	bl	80004f0 <__aeabi_uldivmod>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b12:	e065      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x420>
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b20:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	2200      	movs	r2, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b30:	653b      	str	r3, [r7, #80]	; 0x50
 8001b32:	2300      	movs	r3, #0
 8001b34:	657b      	str	r3, [r7, #84]	; 0x54
 8001b36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	464b      	mov	r3, r9
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4641      	mov	r1, r8
 8001b54:	1a51      	subs	r1, r2, r1
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	4649      	mov	r1, r9
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	018b      	lsls	r3, r1, #6
 8001b70:	4651      	mov	r1, sl
 8001b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b76:	4651      	mov	r1, sl
 8001b78:	018a      	lsls	r2, r1, #6
 8001b7a:	4651      	mov	r1, sl
 8001b7c:	1a54      	subs	r4, r2, r1
 8001b7e:	4659      	mov	r1, fp
 8001b80:	eb63 0501 	sbc.w	r5, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	00eb      	lsls	r3, r5, #3
 8001b8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b92:	00e2      	lsls	r2, r4, #3
 8001b94:	4614      	mov	r4, r2
 8001b96:	461d      	mov	r5, r3
 8001b98:	4643      	mov	r3, r8
 8001b9a:	18e3      	adds	r3, r4, r3
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	eb45 0303 	adc.w	r3, r5, r3
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	028b      	lsls	r3, r1, #10
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	028a      	lsls	r2, r1, #10
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc8:	2200      	movs	r2, #0
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bcc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bd2:	f7fe fc8d 	bl	80004f0 <__aeabi_uldivmod>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4613      	mov	r3, r2
 8001bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0f1b      	lsrs	r3, r3, #28
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bfe:	e003      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	37b8      	adds	r7, #184	; 0xb8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400

08001c20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e28d      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8083 	beq.w	8001d46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c40:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d019      	beq.n	8001c80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c4c:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c58:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c64:	d00c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x124>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d157      	bne.n	8001d44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e25a      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x90>
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7b      	ldr	r2, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xcc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xb4>
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a72      	ldr	r2, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xcc>
 8001cd4:	4b6f      	ldr	r3, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6e      	ldr	r2, [pc, #440]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b6c      	ldr	r3, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6b      	ldr	r2, [pc, #428]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f93e 	bl	8000f74 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff f93a 	bl	8000f74 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e21f      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xdc>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f92a 	bl	8000f74 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff f926 	bl	8000f74 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e20b      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x104>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06f      	beq.n	8001e32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d017      	beq.n	8001d8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x186>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1d3      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4937      	ldr	r1, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x278>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f8d3 	bl	8000f74 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f8cf 	bl	8000f74 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1b4      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4925      	ldr	r1, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x278>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f8b2 	bl	8000f74 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f8ae 	bl	8000f74 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e193      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d036      	beq.n	8001eac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCC_OscConfig+0x27c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f892 	bl	8000f74 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff f88e 	bl	8000f74 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e173      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x234>
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x27c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f87b 	bl	8000f74 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e00e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff f877 	bl	8000f74 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d907      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e15c      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b8a      	ldr	r3, [pc, #552]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ea      	bne.n	8001e82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8097 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b83      	ldr	r3, [pc, #524]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b7f      	ldr	r3, [pc, #508]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a7e      	ldr	r2, [pc, #504]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b79      	ldr	r3, [pc, #484]	; (80020d0 <HAL_RCC_OscConfig+0x4b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x4b0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCC_OscConfig+0x4b0>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7ff f837 	bl	8000f74 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7ff f833 	bl	8000f74 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e118      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x4b0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x31e>
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a65      	ldr	r2, [pc, #404]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x358>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x340>
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a60      	ldr	r2, [pc, #384]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	4b5e      	ldr	r3, [pc, #376]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x358>
 8001f60:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a59      	ldr	r2, [pc, #356]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a56      	ldr	r2, [pc, #344]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe fff8 	bl	8000f74 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe fff4 	bl	8000f74 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0d7      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ee      	beq.n	8001f88 <HAL_RCC_OscConfig+0x368>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7fe ffe2 	bl	8000f74 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ffde 	bl	8000f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0c1      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a3a      	ldr	r2, [pc, #232]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80ad 	beq.w	800214c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d060      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d145      	bne.n	8002092 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <HAL_RCC_OscConfig+0x4b4>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ffb2 	bl	8000f74 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ffae 	bl	8000f74 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e093      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	071b      	lsls	r3, r3, #28
 800205e:	491b      	ldr	r1, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_OscConfig+0x4b4>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe ff83 	bl	8000f74 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe ff7f 	bl	8000f74 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e064      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x452>
 8002090:	e05c      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <HAL_RCC_OscConfig+0x4b4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe ff6c 	bl	8000f74 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ff68 	bl	8000f74 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04d      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x480>
 80020be:	e045      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d107      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e040      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000
 80020d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_RCC_OscConfig+0x538>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d030      	beq.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d129      	bne.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d122      	bne.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002108:	4013      	ands	r3, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002110:	4293      	cmp	r3, r2
 8002112:	d119      	bne.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	3b01      	subs	r3, #1
 8002122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002124:	429a      	cmp	r2, r3
 8002126:	d10f      	bne.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e041      	b.n	80021f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f839 	bl	80021fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3304      	adds	r3, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f000 f9d8 	bl	8002550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d001      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e04e      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0201 	orr.w	r2, r2, #1
 800223e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a23      	ldr	r2, [pc, #140]	; (80022d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d022      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002252:	d01d      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d018      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d013      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x80>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_Base_Start_IT+0xdc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d010      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40000400 	.word	0x40000400
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40000c00 	.word	0x40000c00
 80022e4:	40010400 	.word	0x40010400
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40001800 	.word	0x40001800

080022f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0202 	mvn.w	r2, #2
 800231c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f8ee 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8e0 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8f1 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d122      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b04      	cmp	r3, #4
 8002366:	d11b      	bne.n	80023a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0204 	mvn.w	r2, #4
 8002370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8c4 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 800238c:	e005      	b.n	800239a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8b6 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f8c7 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d122      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d11b      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0208 	mvn.w	r2, #8
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2204      	movs	r2, #4
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f89a 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f88c 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f89d 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d122      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b10      	cmp	r3, #16
 800240e:	d11b      	bne.n	8002448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0210 	mvn.w	r2, #16
 8002418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2208      	movs	r2, #8
 800241e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f870 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002434:	e005      	b.n	8002442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f862 	bl	8002500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f873 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0201 	mvn.w	r2, #1
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fba4 	bl	8000bbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b80      	cmp	r3, #128	; 0x80
 8002480:	d10e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f902 	bl	80026a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f838 	bl	800253c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b20      	cmp	r3, #32
 80024d8:	d10e      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d107      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0220 	mvn.w	r2, #32
 80024f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8cc 	bl	8002690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a40      	ldr	r2, [pc, #256]	; (8002664 <TIM_Base_SetConfig+0x114>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d013      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256e:	d00f      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <TIM_Base_SetConfig+0x118>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00b      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3c      	ldr	r2, [pc, #240]	; (800266c <TIM_Base_SetConfig+0x11c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <TIM_Base_SetConfig+0x120>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d003      	beq.n	8002590 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <TIM_Base_SetConfig+0x124>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d108      	bne.n	80025a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a2f      	ldr	r2, [pc, #188]	; (8002664 <TIM_Base_SetConfig+0x114>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d02b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d027      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	; (8002668 <TIM_Base_SetConfig+0x118>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d023      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2b      	ldr	r2, [pc, #172]	; (800266c <TIM_Base_SetConfig+0x11c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <TIM_Base_SetConfig+0x120>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <TIM_Base_SetConfig+0x124>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d017      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a28      	ldr	r2, [pc, #160]	; (8002678 <TIM_Base_SetConfig+0x128>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <TIM_Base_SetConfig+0x12c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00f      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <TIM_Base_SetConfig+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00b      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a25      	ldr	r2, [pc, #148]	; (8002684 <TIM_Base_SetConfig+0x134>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a24      	ldr	r2, [pc, #144]	; (8002688 <TIM_Base_SetConfig+0x138>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a23      	ldr	r2, [pc, #140]	; (800268c <TIM_Base_SetConfig+0x13c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <TIM_Base_SetConfig+0x114>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <TIM_Base_SetConfig+0xf8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <TIM_Base_SetConfig+0x124>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d103      	bne.n	8002650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	615a      	str	r2, [r3, #20]
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010000 	.word	0x40010000
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800
 8002670:	40000c00 	.word	0x40000c00
 8002674:	40010400 	.word	0x40010400
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800
 8002684:	40001800 	.word	0x40001800
 8002688:	40001c00 	.word	0x40001c00
 800268c:	40002000 	.word	0x40002000

08002690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e03f      	b.n	800274a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fabc 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f929 	bl	8002954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b08a      	sub	sp, #40	; 0x28
 8002756:	af02      	add	r7, sp, #8
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	d17c      	bne.n	800286c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_Transmit+0x2c>
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e075      	b.n	800286e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_UART_Transmit+0x3e>
 800278c:	2302      	movs	r3, #2
 800278e:	e06e      	b.n	800286e <HAL_UART_Transmit+0x11c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fbe5 	bl	8000f74 <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c0:	d108      	bne.n	80027d4 <HAL_UART_Transmit+0x82>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e003      	b.n	80027dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027e4:	e02a      	b.n	800283c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 f840 	bl	8002876 <UART_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e036      	b.n	800286e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3302      	adds	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e007      	b.n	800282e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	3301      	adds	r3, #1
 800282c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cf      	bne.n	80027e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f810 	bl	8002876 <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b090      	sub	sp, #64	; 0x40
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002886:	e050      	b.n	800292a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288e:	d04c      	beq.n	800292a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002896:	f7fe fb6d 	bl	8000f74 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d241      	bcs.n	800292a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	330c      	adds	r3, #12
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	330c      	adds	r3, #12
 80028c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028c6:	637a      	str	r2, [r7, #52]	; 0x34
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e5      	bne.n	80028a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3314      	adds	r3, #20
 80028f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fa:	623a      	str	r2, [r7, #32]
 80028fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	69f9      	ldr	r1, [r7, #28]
 8002900:	6a3a      	ldr	r2, [r7, #32]
 8002902:	e841 2300 	strex	r3, r2, [r1]
 8002906:	61bb      	str	r3, [r7, #24]
   return(result);
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e5      	bne.n	80028da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e00f      	b.n	800294a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	429a      	cmp	r2, r3
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d09f      	beq.n	8002888 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3740      	adds	r7, #64	; 0x40
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b0c0      	sub	sp, #256	; 0x100
 800295a:	af00      	add	r7, sp, #0
 800295c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	ea40 0301 	orr.w	r3, r0, r1
 800297c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029ac:	f021 010c 	bic.w	r1, r1, #12
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029ba:	430b      	orrs	r3, r1
 80029bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	6999      	ldr	r1, [r3, #24]
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	ea40 0301 	orr.w	r3, r0, r1
 80029da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b8f      	ldr	r3, [pc, #572]	; (8002c20 <UART_SetConfig+0x2cc>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0xa0>
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b8d      	ldr	r3, [pc, #564]	; (8002c24 <UART_SetConfig+0x2d0>)
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d104      	bne.n	80029fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7fe fe9e 	bl	8001734 <HAL_RCC_GetPCLK2Freq>
 80029f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029fc:	e003      	b.n	8002a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7fe fe85 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8002a02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a10:	f040 810c 	bne.w	8002c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a26:	4622      	mov	r2, r4
 8002a28:	462b      	mov	r3, r5
 8002a2a:	1891      	adds	r1, r2, r2
 8002a2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a2e:	415b      	adcs	r3, r3
 8002a30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a36:	4621      	mov	r1, r4
 8002a38:	eb12 0801 	adds.w	r8, r2, r1
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb43 0901 	adc.w	r9, r3, r1
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a56:	4690      	mov	r8, r2
 8002a58:	4699      	mov	r9, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	eb18 0303 	adds.w	r3, r8, r3
 8002a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a64:	462b      	mov	r3, r5
 8002a66:	eb49 0303 	adc.w	r3, r9, r3
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a82:	460b      	mov	r3, r1
 8002a84:	18db      	adds	r3, r3, r3
 8002a86:	653b      	str	r3, [r7, #80]	; 0x50
 8002a88:	4613      	mov	r3, r2
 8002a8a:	eb42 0303 	adc.w	r3, r2, r3
 8002a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a98:	f7fd fd2a 	bl	80004f0 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <UART_SetConfig+0x2d4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002acc:	4641      	mov	r1, r8
 8002ace:	eb12 0a01 	adds.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aec:	4692      	mov	sl, r2
 8002aee:	469b      	mov	fp, r3
 8002af0:	4643      	mov	r3, r8
 8002af2:	eb1a 0303 	adds.w	r3, sl, r3
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002afa:	464b      	mov	r3, r9
 8002afc:	eb4b 0303 	adc.w	r3, fp, r3
 8002b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
 8002b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b2e:	f7fd fcdf 	bl	80004f0 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <UART_SetConfig+0x2d4>)
 8002b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2264      	movs	r2, #100	; 0x64
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b4e:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <UART_SetConfig+0x2d4>)
 8002b50:	fba3 2302 	umull	r2, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b5c:	441c      	add	r4, r3
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6339      	str	r1, [r7, #48]	; 0x30
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	eb42 0303 	adc.w	r3, r2, r3
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	18db      	adds	r3, r3, r3
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bda:	4613      	mov	r3, r2
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bea:	f7fd fc81 	bl	80004f0 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <UART_SetConfig+0x2d4>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2164      	movs	r1, #100	; 0x64
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	; 0x32
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <UART_SetConfig+0x2d4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4422      	add	r2, r4
 8002c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c1c:	e105      	b.n	8002e2a <UART_SetConfig+0x4d6>
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c3e:	4642      	mov	r2, r8
 8002c40:	464b      	mov	r3, r9
 8002c42:	1891      	adds	r1, r2, r2
 8002c44:	6239      	str	r1, [r7, #32]
 8002c46:	415b      	adcs	r3, r3
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4e:	4641      	mov	r1, r8
 8002c50:	1854      	adds	r4, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0501 	adc.w	r5, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	00eb      	lsls	r3, r5, #3
 8002c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	18e3      	adds	r3, r4, r3
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c74:	464b      	mov	r3, r9
 8002c76:	eb45 0303 	adc.w	r3, r5, r3
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	008b      	lsls	r3, r1, #2
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	008a      	lsls	r2, r1, #2
 8002ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cac:	f7fd fc20 	bl	80004f0 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <UART_SetConfig+0x4e4>)
 8002cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	011c      	lsls	r4, r3, #4
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	61b9      	str	r1, [r7, #24]
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	1851      	adds	r1, r2, r1
 8002ce4:	6139      	str	r1, [r7, #16]
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	414b      	adcs	r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	00cb      	lsls	r3, r1, #3
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d02:	4651      	mov	r1, sl
 8002d04:	00ca      	lsls	r2, r1, #3
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d14:	464b      	mov	r3, r9
 8002d16:	460a      	mov	r2, r1
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d4a:	f7fd fbd1 	bl	80004f0 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <UART_SetConfig+0x4e4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	; 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	4a34      	ldr	r2, [pc, #208]	; (8002e38 <UART_SetConfig+0x4e4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d72:	441c      	add	r4, r3
 8002d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d7c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d82:	4642      	mov	r2, r8
 8002d84:	464b      	mov	r3, r9
 8002d86:	1891      	adds	r1, r2, r2
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	415b      	adcs	r3, r3
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d92:	4641      	mov	r1, r8
 8002d94:	1851      	adds	r1, r2, r1
 8002d96:	6039      	str	r1, [r7, #0]
 8002d98:	4649      	mov	r1, r9
 8002d9a:	414b      	adcs	r3, r1
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002daa:	4659      	mov	r1, fp
 8002dac:	00cb      	lsls	r3, r1, #3
 8002dae:	4651      	mov	r1, sl
 8002db0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db4:	4651      	mov	r1, sl
 8002db6:	00ca      	lsls	r2, r1, #3
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dc4:	464b      	mov	r3, r9
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	eb42 0303 	adc.w	r3, r2, r3
 8002dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002dd8:	667a      	str	r2, [r7, #100]	; 0x64
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002de6:	4649      	mov	r1, r9
 8002de8:	008b      	lsls	r3, r1, #2
 8002dea:	4641      	mov	r1, r8
 8002dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df0:	4641      	mov	r1, r8
 8002df2:	008a      	lsls	r2, r1, #2
 8002df4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002df8:	f7fd fb7a 	bl	80004f0 <__aeabi_uldivmod>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <UART_SetConfig+0x4e4>)
 8002e02:	fba3 1302 	umull	r1, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2164      	movs	r1, #100	; 0x64
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <UART_SetConfig+0x4e4>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4422      	add	r2, r4
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e36:	bf00      	nop
 8002e38:	51eb851f 	.word	0x51eb851f

08002e3c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b096      	sub	sp, #88	; 0x58
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8002e4a:	2234      	movs	r2, #52	; 0x34
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f001 fd98 	bl	8004984 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f1a3 0208 	sub.w	r2, r3, #8
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3b04      	subs	r3, #4
 8002eae:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed8:	4a5d      	ldr	r2, [pc, #372]	; (8003050 <_tx_byte_pool_create+0x214>)
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8002eea:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002eec:	b672      	cpsid	i
#endif
    return(int_posture);
 8002eee:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <_tx_byte_pool_create+0x218>)
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002ef8:	4b57      	ldr	r3, [pc, #348]	; (8003058 <_tx_byte_pool_create+0x21c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002f00:	4a56      	ldr	r2, [pc, #344]	; (800305c <_tx_byte_pool_create+0x220>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
 8002f12:	e011      	b.n	8002f38 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002f14:	4b51      	ldr	r3, [pc, #324]	; (800305c <_tx_byte_pool_create+0x220>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <_tx_byte_pool_create+0x21c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a46      	ldr	r2, [pc, #280]	; (8003058 <_tx_byte_pool_create+0x21c>)
 8002f40:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 8002f42:	2300      	movs	r3, #0
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	68f9      	ldr	r1, [r7, #12]
 8002f4c:	2008      	movs	r0, #8
 8002f4e:	f001 fa71 	bl	8004434 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <_tx_byte_pool_create+0x224>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d06c      	beq.n	8003038 <_tx_byte_pool_create+0x1fc>
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <_tx_byte_pool_create+0x228>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d066      	beq.n	8003038 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002f6a:	f3ef 8305 	mrs	r3, IPSR
 8002f6e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <_tx_byte_pool_create+0x22c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	; (800306c <_tx_byte_pool_create+0x230>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <_tx_byte_pool_create+0x162>
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	e00e      	b.n	8002fbc <_tx_byte_pool_create+0x180>
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8002fa4:	d205      	bcs.n	8002fb2 <_tx_byte_pool_create+0x176>
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb0:	e004      	b.n	8002fbc <_tx_byte_pool_create+0x180>
 8002fb2:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8002fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2215      	movs	r2, #21
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	4b28      	ldr	r3, [pc, #160]	; (8003070 <_tx_byte_pool_create+0x234>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	611a      	str	r2, [r3, #16]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	615a      	str	r2, [r3, #20]
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	619a      	str	r2, [r3, #24]
 8002fe8:	f107 0214 	add.w	r2, r7, #20
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	61da      	str	r2, [r3, #28]
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	3320      	adds	r3, #32
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <_tx_byte_pool_create+0x238>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d314      	bcc.n	800302a <_tx_byte_pool_create+0x1ee>
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <_tx_byte_pool_create+0x23c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	4a16      	ldr	r2, [pc, #88]	; (8003060 <_tx_byte_pool_create+0x224>)
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <_tx_byte_pool_create+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003012:	621a      	str	r2, [r3, #32]
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <_tx_byte_pool_create+0x244>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <_tx_byte_pool_create+0x1fc>
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <_tx_byte_pool_create+0x244>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a16      	ldr	r2, [pc, #88]	; (800307c <_tx_byte_pool_create+0x240>)
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4610      	mov	r0, r2
 8003026:	4798      	blx	r3
 8003028:	e006      	b.n	8003038 <_tx_byte_pool_create+0x1fc>
 800302a:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <_tx_byte_pool_create+0x224>)
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <_tx_byte_pool_create+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003036:	621a      	str	r2, [r3, #32]
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3750      	adds	r7, #80	; 0x50
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	ffffeeee 	.word	0xffffeeee
 8003054:	42595445 	.word	0x42595445
 8003058:	20000f3c 	.word	0x20000f3c
 800305c:	20000f38 	.word	0x20000f38
 8003060:	20001564 	.word	0x20001564
 8003064:	20001568 	.word	0x20001568
 8003068:	2000000c 	.word	0x2000000c
 800306c:	20000f48 	.word	0x20000f48
 8003070:	e0001004 	.word	0xe0001004
 8003074:	20001560 	.word	0x20001560
 8003078:	2000155c 	.word	0x2000155c
 800307c:	20001550 	.word	0x20001550
 8003080:	2000156c 	.word	0x2000156c

08003084 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8003088:	f001 f9ae 	bl	80043e8 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800308c:	f000 f9ec 	bl	8003468 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8003090:	f000 ff96 	bl	8003fc0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <_tx_initialize_high_level+0x5c>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <_tx_initialize_high_level+0x60>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <_tx_initialize_high_level+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <_tx_initialize_high_level+0x68>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <_tx_initialize_high_level+0x6c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <_tx_initialize_high_level+0x70>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <_tx_initialize_high_level+0x74>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <_tx_initialize_high_level+0x78>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <_tx_initialize_high_level+0x7c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <_tx_initialize_high_level+0x80>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80030d0:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <_tx_initialize_high_level+0x84>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <_tx_initialize_high_level+0x88>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
#endif
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000f10 	.word	0x20000f10
 80030e4:	20000f14 	.word	0x20000f14
 80030e8:	20000f18 	.word	0x20000f18
 80030ec:	20000f1c 	.word	0x20000f1c
 80030f0:	20000f20 	.word	0x20000f20
 80030f4:	20000f24 	.word	0x20000f24
 80030f8:	20000f30 	.word	0x20000f30
 80030fc:	20000f34 	.word	0x20000f34
 8003100:	20000f38 	.word	0x20000f38
 8003104:	20000f3c 	.word	0x20000f3c
 8003108:	20000f28 	.word	0x20000f28
 800310c:	20000f2c 	.word	0x20000f2c

08003110 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <_tx_initialize_kernel_enter+0x48>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800311c:	d00c      	beq.n	8003138 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <_tx_initialize_kernel_enter+0x48>)
 8003120:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003124:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8003126:	f7fd f873 	bl	8000210 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800312a:	f7ff ffab 	bl	8003084 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <_tx_initialize_kernel_enter+0x4c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <_tx_initialize_kernel_enter+0x4c>)
 8003136:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <_tx_initialize_kernel_enter+0x48>)
 800313a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800313e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <_tx_initialize_kernel_enter+0x50>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fb55 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800314a:	4b03      	ldr	r3, [pc, #12]	; (8003158 <_tx_initialize_kernel_enter+0x48>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8003150:	f7fd f89e 	bl	8000290 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000000c 	.word	0x2000000c
 800315c:	20000fe0 	.word	0x20000fe0
 8003160:	20000f40 	.word	0x20000f40

08003164 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b09a      	sub	sp, #104	; 0x68
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8003172:	2300      	movs	r3, #0
 8003174:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8003176:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003178:	21ef      	movs	r1, #239	; 0xef
 800317a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800317c:	f001 fc02 	bl	8004984 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8003180:	22b0      	movs	r2, #176	; 0xb0
 8003182:	2100      	movs	r1, #0
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f001 fbfd 	bl	8004984 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031a0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031a6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031ba:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031c0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80031ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	3b01      	subs	r3, #1
 80031d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d4:	4413      	add	r3, r2
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031dc:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80031de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d007      	beq.n	80031f6 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80031f4:	e006      	b.n	8003204 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003200:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2203      	movs	r2, #3
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a86      	ldr	r2, [pc, #536]	; (8003428 <_tx_thread_create+0x2c4>)
 800320e:	655a      	str	r2, [r3, #84]	; 0x54
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8003216:	4985      	ldr	r1, [pc, #532]	; (800342c <_tx_thread_create+0x2c8>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f7fd f899 	bl	8000350 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8003224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8003228:	b672      	cpsid	i
    return(int_posture);
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800322c:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a7f      	ldr	r2, [pc, #508]	; (8003430 <_tx_thread_create+0x2cc>)
 8003232:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8003234:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <_tx_thread_create+0x2d0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800323c:	4a7e      	ldr	r2, [pc, #504]	; (8003438 <_tx_thread_create+0x2d4>)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8003252:	e016      	b.n	8003282 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8003254:	4b78      	ldr	r3, [pc, #480]	; (8003438 <_tx_thread_create+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 800325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800325c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003260:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8003262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800327e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <_tx_thread_create+0x2d0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a6a      	ldr	r2, [pc, #424]	; (8003434 <_tx_thread_create+0x2d0>)
 800328a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800328c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800328e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	68f9      	ldr	r1, [r7, #12]
 8003298:	2001      	movs	r0, #1
 800329a:	f001 f8cb 	bl	8004434 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800329e:	4b67      	ldr	r3, [pc, #412]	; (800343c <_tx_thread_create+0x2d8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d06b      	beq.n	8003382 <_tx_thread_create+0x21e>
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <_tx_thread_create+0x2dc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d065      	beq.n	8003382 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80032b6:	f3ef 8305 	mrs	r3, IPSR
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80032bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032be:	4b61      	ldr	r3, [pc, #388]	; (8003444 <_tx_thread_create+0x2e0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032c6:	4b60      	ldr	r3, [pc, #384]	; (8003448 <_tx_thread_create+0x2e4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	653b      	str	r3, [r7, #80]	; 0x50
 80032cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <_tx_thread_create+0x186>
 80032d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	657b      	str	r3, [r7, #84]	; 0x54
 80032d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	041a      	lsls	r2, r3, #16
 80032de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
 80032e8:	e00e      	b.n	8003308 <_tx_thread_create+0x1a4>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80032f0:	d205      	bcs.n	80032fe <_tx_thread_create+0x19a>
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	653b      	str	r3, [r7, #80]	; 0x50
 80032fc:	e004      	b.n	8003308 <_tx_thread_create+0x1a4>
 80032fe:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
 8003304:	2300      	movs	r3, #0
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
 8003308:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003316:	2264      	movs	r2, #100	; 0x64
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	4b4c      	ldr	r3, [pc, #304]	; (800344c <_tx_thread_create+0x2e8>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	611a      	str	r2, [r3, #16]
 8003328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800332c:	615a      	str	r2, [r3, #20]
 800332e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003332:	619a      	str	r2, [r3, #24]
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003338:	61da      	str	r2, [r3, #28]
 800333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333c:	3320      	adds	r3, #32
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <_tx_thread_create+0x2ec>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003346:	429a      	cmp	r2, r3
 8003348:	d314      	bcc.n	8003374 <_tx_thread_create+0x210>
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <_tx_thread_create+0x2f0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003350:	4a3a      	ldr	r2, [pc, #232]	; (800343c <_tx_thread_create+0x2d8>)
 8003352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <_tx_thread_create+0x2f4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800335c:	621a      	str	r2, [r3, #32]
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <_tx_thread_create+0x2f8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <_tx_thread_create+0x21e>
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <_tx_thread_create+0x2f8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <_tx_thread_create+0x2f4>)
 800336c:	6812      	ldr	r2, [r2, #0]
 800336e:	4610      	mov	r0, r2
 8003370:	4798      	blx	r3
 8003372:	e006      	b.n	8003382 <_tx_thread_create+0x21e>
 8003374:	4a31      	ldr	r2, [pc, #196]	; (800343c <_tx_thread_create+0x2d8>)
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b37      	ldr	r3, [pc, #220]	; (8003458 <_tx_thread_create+0x2f4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003380:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <_tx_thread_create+0x2fc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a35      	ldr	r2, [pc, #212]	; (8003460 <_tx_thread_create+0x2fc>)
 800338a:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800338c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d129      	bne.n	80033e6 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003392:	f3ef 8305 	mrs	r3, IPSR
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8003398:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800339a:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <_tx_thread_create+0x2e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80033a4:	d30d      	bcc.n	80033c2 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <_tx_thread_create+0x300>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80033ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80033b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
 80033c0:	e001      	b.n	80033c6 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f383 8810 	msr	PRIMASK, r3
}
 80033d0:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f90c 	bl	80035f0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80033d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01e      	beq.n	800341c <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e4:	e01a      	b.n	800341c <_tx_thread_create+0x2b8>
 80033e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033f2:	f3ef 8310 	mrs	r3, PRIMASK
 80033f6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80033f8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80033fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80033fc:	b672      	cpsid	i
    return(int_posture);
 80033fe:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8003402:	4b17      	ldr	r3, [pc, #92]	; (8003460 <_tx_thread_create+0x2fc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <_tx_thread_create+0x2fc>)
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	f383 8810 	msr	PRIMASK, r3
}
 8003416:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003418:	f000 f8b0 	bl	800357c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3760      	adds	r7, #96	; 0x60
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08003f05 	.word	0x08003f05
 800342c:	080034e5 	.word	0x080034e5
 8003430:	54485244 	.word	0x54485244
 8003434:	20000f54 	.word	0x20000f54
 8003438:	20000f50 	.word	0x20000f50
 800343c:	20001564 	.word	0x20001564
 8003440:	20001568 	.word	0x20001568
 8003444:	2000000c 	.word	0x2000000c
 8003448:	20000f48 	.word	0x20000f48
 800344c:	e0001004 	.word	0xe0001004
 8003450:	20001560 	.word	0x20001560
 8003454:	2000155c 	.word	0x2000155c
 8003458:	20001550 	.word	0x20001550
 800345c:	2000156c 	.word	0x2000156c
 8003460:	20000fe0 	.word	0x20000fe0
 8003464:	20000f4c 	.word	0x20000f4c

08003468 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <_tx_thread_initialize+0x54>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <_tx_thread_initialize+0x58>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <_tx_thread_initialize+0x5c>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <_tx_thread_initialize+0x60>)
 8003480:	2220      	movs	r2, #32
 8003482:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	2100      	movs	r1, #0
 8003488:	4810      	ldr	r0, [pc, #64]	; (80034cc <_tx_thread_initialize+0x64>)
 800348a:	f001 fa7b 	bl	8004984 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <_tx_thread_initialize+0x68>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8003494:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <_tx_thread_initialize+0x6c>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <_tx_thread_initialize+0x70>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <_tx_thread_initialize+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <_tx_thread_initialize+0x78>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 80034ae:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <_tx_thread_initialize+0x78>)
 80034b4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000f48 	.word	0x20000f48
 80034c0:	20000f4c 	.word	0x20000f4c
 80034c4:	20000f58 	.word	0x20000f58
 80034c8:	20000f5c 	.word	0x20000f5c
 80034cc:	20000f60 	.word	0x20000f60
 80034d0:	20000f50 	.word	0x20000f50
 80034d4:	20000f54 	.word	0x20000f54
 80034d8:	20000fe0 	.word	0x20000fe0
 80034dc:	20000fe4 	.word	0x20000fe4
 80034e0:	20000fe8 	.word	0x20000fe8

080034e4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <_tx_thread_shell_entry+0x8c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034f8:	4610      	mov	r0, r2
 80034fa:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <_tx_thread_shell_entry+0x90>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8003504:	4b1b      	ldr	r3, [pc, #108]	; (8003574 <_tx_thread_shell_entry+0x90>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69f8      	ldr	r0, [r7, #28]
 800350a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	607b      	str	r3, [r7, #4]
    return(posture);
 8003512:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003514:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003516:	b672      	cpsid	i
    return(int_posture);
 8003518:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800351a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2201      	movs	r2, #1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	2201      	movs	r2, #1
 8003526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	2200      	movs	r2, #0
 800352c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <_tx_thread_shell_entry+0x94>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	4a10      	ldr	r2, [pc, #64]	; (8003578 <_tx_thread_shell_entry+0x94>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f383 8810 	msr	PRIMASK, r3
}
 8003542:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8003544:	f3ef 8314 	mrs	r3, CONTROL
 8003548:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800354a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f383 8814 	msr	CONTROL, r3
}
 8003560:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8003562:	69f8      	ldr	r0, [r7, #28]
 8003564:	f000 f9fe 	bl	8003964 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8003568:	bf00      	nop
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000f48 	.word	0x20000f48
 8003574:	20000fe4 	.word	0x20000fe4
 8003578:	20000fe0 	.word	0x20000fe0

0800357c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <_tx_thread_system_preempt_check+0x64>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d121      	bne.n	80035d2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800358e:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <_tx_thread_system_preempt_check+0x68>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <_tx_thread_system_preempt_check+0x6c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d017      	beq.n	80035d2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <_tx_thread_system_preempt_check+0x70>)
 80035a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80035aa:	f3ef 8305 	mrs	r3, IPSR
 80035ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80035b0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	60fb      	str	r3, [r7, #12]
    return(posture);
 80035bc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80035be:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80035c0:	b662      	cpsie	i
}
 80035c2:	bf00      	nop
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80035d0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000fe0 	.word	0x20000fe0
 80035e4:	20000f48 	.word	0x20000f48
 80035e8:	20000f4c 	.word	0x20000f4c
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b09e      	sub	sp, #120	; 0x78
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80035f8:	2300      	movs	r3, #0
 80035fa:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8003604:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003606:	b672      	cpsid	i
    return(int_posture);
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800360a:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fdaf 	bl	800417c <_tx_timer_system_deactivate>
 800361e:	e002      	b.n	8003626 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 8003626:	4b8b      	ldr	r3, [pc, #556]	; (8003854 <_tx_thread_system_resume+0x264>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 800362c:	4b89      	ldr	r3, [pc, #548]	; (8003854 <_tx_thread_system_resume+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	663b      	str	r3, [r7, #96]	; 0x60
 8003632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003634:	2b00      	cmp	r3, #0
 8003636:	d06f      	beq.n	8003718 <_tx_thread_system_resume+0x128>
 8003638:	4b87      	ldr	r3, [pc, #540]	; (8003858 <_tx_thread_system_resume+0x268>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d069      	beq.n	8003718 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003644:	f3ef 8305 	mrs	r3, IPSR
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 800364a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364c:	4b83      	ldr	r3, [pc, #524]	; (800385c <_tx_thread_system_resume+0x26c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003654:	4b82      	ldr	r3, [pc, #520]	; (8003860 <_tx_thread_system_resume+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <_tx_thread_system_resume+0x88>
 8003660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	673b      	str	r3, [r7, #112]	; 0x70
 8003666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	041a      	lsls	r2, r3, #16
 800366c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003674:	673b      	str	r3, [r7, #112]	; 0x70
 8003676:	e00e      	b.n	8003696 <_tx_thread_system_resume+0xa6>
 8003678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800367a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800367e:	d205      	bcs.n	800368c <_tx_thread_system_resume+0x9c>
 8003680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003682:	673b      	str	r3, [r7, #112]	; 0x70
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800368a:	e004      	b.n	8003696 <_tx_thread_system_resume+0xa6>
 800368c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003692:	2300      	movs	r3, #0
 8003694:	673b      	str	r3, [r7, #112]	; 0x70
 8003696:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a4:	2201      	movs	r2, #1
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	4b6e      	ldr	r3, [pc, #440]	; (8003864 <_tx_thread_system_resume+0x274>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036bc:	615a      	str	r2, [r3, #20]
 80036be:	f107 020c 	add.w	r2, r7, #12
 80036c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036c4:	619a      	str	r2, [r3, #24]
 80036c6:	4b68      	ldr	r3, [pc, #416]	; (8003868 <_tx_thread_system_resume+0x278>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ce:	61da      	str	r2, [r3, #28]
 80036d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d2:	3320      	adds	r3, #32
 80036d4:	663b      	str	r3, [r7, #96]	; 0x60
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <_tx_thread_system_resume+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036dc:	429a      	cmp	r2, r3
 80036de:	d314      	bcc.n	800370a <_tx_thread_system_resume+0x11a>
 80036e0:	4b63      	ldr	r3, [pc, #396]	; (8003870 <_tx_thread_system_resume+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	663b      	str	r3, [r7, #96]	; 0x60
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <_tx_thread_system_resume+0x264>)
 80036e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <_tx_thread_system_resume+0x284>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036f2:	621a      	str	r2, [r3, #32]
 80036f4:	4b60      	ldr	r3, [pc, #384]	; (8003878 <_tx_thread_system_resume+0x288>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <_tx_thread_system_resume+0x128>
 80036fc:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <_tx_thread_system_resume+0x288>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5c      	ldr	r2, [pc, #368]	; (8003874 <_tx_thread_system_resume+0x284>)
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
 8003708:	e006      	b.n	8003718 <_tx_thread_system_resume+0x128>
 800370a:	4a52      	ldr	r2, [pc, #328]	; (8003854 <_tx_thread_system_resume+0x264>)
 800370c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	4b58      	ldr	r3, [pc, #352]	; (8003874 <_tx_thread_system_resume+0x284>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003716:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8003718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 800371e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003724:	4b55      	ldr	r3, [pc, #340]	; (800387c <_tx_thread_system_resume+0x28c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	3b01      	subs	r3, #1
 800372a:	4a54      	ldr	r2, [pc, #336]	; (800387c <_tx_thread_system_resume+0x28c>)
 800372c:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80b3 	bne.w	800389e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80c7 	beq.w	80038d0 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80a2 	bne.w	8003890 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003758:	4a49      	ldr	r2, [pc, #292]	; (8003880 <_tx_thread_system_resume+0x290>)
 800375a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8003762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003764:	2b00      	cmp	r3, #0
 8003766:	d164      	bne.n	8003832 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003768:	4945      	ldr	r1, [pc, #276]	; (8003880 <_tx_thread_system_resume+0x290>)
 800376a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800377e:	2201      	movs	r2, #1
 8003780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003788:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <_tx_thread_system_resume+0x294>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378e:	4313      	orrs	r3, r2
 8003790:	4a3c      	ldr	r2, [pc, #240]	; (8003884 <_tx_thread_system_resume+0x294>)
 8003792:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8003794:	4b3c      	ldr	r3, [pc, #240]	; (8003888 <_tx_thread_system_resume+0x298>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379a:	429a      	cmp	r2, r3
 800379c:	f080 8098 	bcs.w	80038d0 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80037a0:	4a39      	ldr	r2, [pc, #228]	; (8003888 <_tx_thread_system_resume+0x298>)
 80037a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a4:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80037a6:	4b30      	ldr	r3, [pc, #192]	; (8003868 <_tx_thread_system_resume+0x278>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80037b2:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <_tx_thread_system_resume+0x278>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e08a      	b.n	80038d0 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037c0:	429a      	cmp	r2, r3
 80037c2:	f080 8085 	bcs.w	80038d0 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <_tx_thread_system_resume+0x278>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 80037cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80037d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80037d8:	429a      	cmp	r2, r3
 80037da:	d104      	bne.n	80037e6 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <_tx_thread_system_resume+0x278>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e4:	61da      	str	r2, [r3, #28]
 80037e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	f383 8810 	msr	PRIMASK, r3
}
 80037f0:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <_tx_thread_system_resume+0x28c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 80037f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80a1 	bne.w	8003942 <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003800:	4b22      	ldr	r3, [pc, #136]	; (800388c <_tx_thread_system_resume+0x29c>)
 8003802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003806:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003808:	f3ef 8305 	mrs	r3, IPSR
 800380c:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 8098 	bne.w	8003946 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003816:	f3ef 8310 	mrs	r3, PRIMASK
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003820:	b662      	cpsie	i
}
 8003822:	bf00      	nop
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f383 8810 	msr	PRIMASK, r3
}
 800382e:	bf00      	nop
}
 8003830:	e089      	b.n	8003946 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8003832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800383e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e03e      	b.n	80038d0 <_tx_thread_system_resume+0x2e0>
 8003852:	bf00      	nop
 8003854:	20001564 	.word	0x20001564
 8003858:	20001568 	.word	0x20001568
 800385c:	2000000c 	.word	0x2000000c
 8003860:	20000f48 	.word	0x20000f48
 8003864:	e0001004 	.word	0xe0001004
 8003868:	20000f4c 	.word	0x20000f4c
 800386c:	20001560 	.word	0x20001560
 8003870:	2000155c 	.word	0x2000155c
 8003874:	20001550 	.word	0x20001550
 8003878:	2000156c 	.word	0x2000156c
 800387c:	20000fe0 	.word	0x20000fe0
 8003880:	20000f60 	.word	0x20000f60
 8003884:	20000f58 	.word	0x20000f58
 8003888:	20000f5c 	.word	0x20000f5c
 800388c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2203      	movs	r2, #3
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
 800389c:	e018      	b.n	80038d0 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d014      	beq.n	80038d0 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d010      	beq.n	80038d0 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
 80038c2:	e005      	b.n	80038d0 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2203      	movs	r2, #3
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 80038d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80038d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80038dc:	429a      	cmp	r2, r3
 80038de:	d104      	bne.n	80038ea <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80038e0:	4b1c      	ldr	r3, [pc, #112]	; (8003954 <_tx_thread_system_resume+0x364>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038e8:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <_tx_thread_system_resume+0x368>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	647b      	str	r3, [r7, #68]	; 0x44
 80038f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f383 8810 	msr	PRIMASK, r3
}
 80038fa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80038fc:	4b15      	ldr	r3, [pc, #84]	; (8003954 <_tx_thread_system_resume+0x364>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003902:	429a      	cmp	r2, r3
 8003904:	d022      	beq.n	800394c <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <_tx_thread_system_resume+0x36c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 800390c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11c      	bne.n	800394c <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <_tx_thread_system_resume+0x370>)
 8003914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003918:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800391a:	f3ef 8305 	mrs	r3, IPSR
 800391e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003920:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8003922:	2b00      	cmp	r3, #0
 8003924:	d111      	bne.n	800394a <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003926:	f3ef 8310 	mrs	r3, PRIMASK
 800392a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800392c:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800392e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003930:	b662      	cpsie	i
}
 8003932:	bf00      	nop
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	bf00      	nop
}
 8003940:	e003      	b.n	800394a <_tx_thread_system_resume+0x35a>
                                return;
 8003942:	bf00      	nop
 8003944:	e002      	b.n	800394c <_tx_thread_system_resume+0x35c>
 8003946:	bf00      	nop
 8003948:	e000      	b.n	800394c <_tx_thread_system_resume+0x35c>
 800394a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800394c:	3778      	adds	r7, #120	; 0x78
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000f4c 	.word	0x20000f4c
 8003958:	20000f48 	.word	0x20000f48
 800395c:	20000fe0 	.word	0x20000fe0
 8003960:	e000ed04 	.word	0xe000ed04

08003964 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0a4      	sub	sp, #144	; 0x90
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003972:	4b98      	ldr	r3, [pc, #608]	; (8003bd4 <_tx_thread_system_suspend+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800397a:	f3ef 8310 	mrs	r3, PRIMASK
 800397e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003984:	b672      	cpsid	i
    return(int_posture);
 8003986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003988:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003990:	429a      	cmp	r2, r3
 8003992:	d112      	bne.n	80039ba <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800399a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80039a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d004      	beq.n	80039b2 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	334c      	adds	r3, #76	; 0x4c
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fb83 	bl	80040b8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4a88      	ldr	r2, [pc, #544]	; (8003bd8 <_tx_thread_system_suspend+0x274>)
 80039b8:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80039ba:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <_tx_thread_system_suspend+0x278>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3b01      	subs	r3, #1
 80039c0:	4a86      	ldr	r2, [pc, #536]	; (8003bdc <_tx_thread_system_suspend+0x278>)
 80039c2:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	f040 817d 	bne.w	8003cc8 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 80039ce:	4b84      	ldr	r3, [pc, #528]	; (8003be0 <_tx_thread_system_suspend+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80039d4:	4b82      	ldr	r3, [pc, #520]	; (8003be0 <_tx_thread_system_suspend+0x27c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	673b      	str	r3, [r7, #112]	; 0x70
 80039da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d07c      	beq.n	8003ada <_tx_thread_system_suspend+0x176>
 80039e0:	4b80      	ldr	r3, [pc, #512]	; (8003be4 <_tx_thread_system_suspend+0x280>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d076      	beq.n	8003ada <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80039ec:	f3ef 8305 	mrs	r3, IPSR
 80039f0:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 80039f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f4:	4b7c      	ldr	r3, [pc, #496]	; (8003be8 <_tx_thread_system_suspend+0x284>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039fc:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <_tx_thread_system_suspend+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d110      	bne.n	8003a2c <_tx_thread_system_suspend+0xc8>
 8003a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	041a      	lsls	r2, r3, #16
 8003a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a2a:	e013      	b.n	8003a54 <_tx_thread_system_suspend+0xf0>
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003a32:	d208      	bcs.n	8003a46 <_tx_thread_system_suspend+0xe2>
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a44:	e006      	b.n	8003a54 <_tx_thread_system_suspend+0xf0>
 8003a46:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003a4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a66:	2202      	movs	r2, #2
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	4b60      	ldr	r3, [pc, #384]	; (8003bec <_tx_thread_system_suspend+0x288>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a76:	611a      	str	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7e:	615a      	str	r2, [r3, #20]
 8003a80:	f107 0208 	add.w	r2, r7, #8
 8003a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a86:	619a      	str	r2, [r3, #24]
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <_tx_thread_system_suspend+0x28c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a90:	61da      	str	r2, [r3, #28]
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	3320      	adds	r3, #32
 8003a96:	673b      	str	r3, [r7, #112]	; 0x70
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <_tx_thread_system_suspend+0x290>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d314      	bcc.n	8003acc <_tx_thread_system_suspend+0x168>
 8003aa2:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <_tx_thread_system_suspend+0x294>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa8:	4a4d      	ldr	r2, [pc, #308]	; (8003be0 <_tx_thread_system_suspend+0x27c>)
 8003aaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <_tx_thread_system_suspend+0x298>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ab4:	621a      	str	r2, [r3, #32]
 8003ab6:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <_tx_thread_system_suspend+0x29c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <_tx_thread_system_suspend+0x176>
 8003abe:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <_tx_thread_system_suspend+0x29c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4e      	ldr	r2, [pc, #312]	; (8003bfc <_tx_thread_system_suspend+0x298>)
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4798      	blx	r3
 8003aca:	e006      	b.n	8003ada <_tx_thread_system_suspend+0x176>
 8003acc:	4a44      	ldr	r2, [pc, #272]	; (8003be0 <_tx_thread_system_suspend+0x27c>)
 8003ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b4a      	ldr	r3, [pc, #296]	; (8003bfc <_tx_thread_system_suspend+0x298>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ad8:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8003ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8003ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8003afa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d016      	beq.n	8003b30 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8003b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b12:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a3b      	ldr	r2, [pc, #236]	; (8003c04 <_tx_thread_system_suspend+0x2a0>)
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	f040 8085 	bne.w	8003c2e <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4937      	ldr	r1, [pc, #220]	; (8003c04 <_tx_thread_system_suspend+0x2a0>)
 8003b28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b2e:	e07e      	b.n	8003c2e <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	4a34      	ldr	r2, [pc, #208]	; (8003c04 <_tx_thread_system_suspend+0x2a0>)
 8003b34:	2100      	movs	r1, #0
 8003b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8003b44:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <_tx_thread_system_suspend+0x2a4>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	4a2e      	ldr	r2, [pc, #184]	; (8003c08 <_tx_thread_system_suspend+0x2a4>)
 8003b50:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8003b52:	2300      	movs	r3, #0
 8003b54:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <_tx_thread_system_suspend+0x2a4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8003b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d158      	bne.n	8003c14 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003b62:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <_tx_thread_system_suspend+0x2a8>)
 8003b64:	2220      	movs	r2, #32
 8003b66:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8003b68:	4b21      	ldr	r3, [pc, #132]	; (8003bf0 <_tx_thread_system_suspend+0x28c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d102      	bne.n	8003b86 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8003b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
 8003b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <_tx_thread_system_suspend+0x278>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8003b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 80bf 	bne.w	8003d1e <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <_tx_thread_system_suspend+0x2ac>)
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003ba8:	f3ef 8305 	mrs	r3, IPSR
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10c      	bne.n	8003bce <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003bbe:	b662      	cpsie	i
}
 8003bc0:	bf00      	nop
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	bf00      	nop
}
 8003bce:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8003bd0:	e0a5      	b.n	8003d1e <_tx_thread_system_suspend+0x3ba>
 8003bd2:	bf00      	nop
 8003bd4:	20000f48 	.word	0x20000f48
 8003bd8:	2000154c 	.word	0x2000154c
 8003bdc:	20000fe0 	.word	0x20000fe0
 8003be0:	20001564 	.word	0x20001564
 8003be4:	20001568 	.word	0x20001568
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	e0001004 	.word	0xe0001004
 8003bf0:	20000f4c 	.word	0x20000f4c
 8003bf4:	20001560 	.word	0x20001560
 8003bf8:	2000155c 	.word	0x2000155c
 8003bfc:	20001550 	.word	0x20001550
 8003c00:	2000156c 	.word	0x2000156c
 8003c04:	20000f60 	.word	0x20000f60
 8003c08:	20000f58 	.word	0x20000f58
 8003c0c:	20000f5c 	.word	0x20000f5c
 8003c10:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8003c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c1e:	fab3 f383 	clz	r3, r3
 8003c22:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8003c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c28:	4413      	add	r3, r2
 8003c2a:	4a41      	ldr	r2, [pc, #260]	; (8003d30 <_tx_thread_system_suspend+0x3cc>)
 8003c2c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003c2e:	4b41      	ldr	r3, [pc, #260]	; (8003d34 <_tx_thread_system_suspend+0x3d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d139      	bne.n	8003cac <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <_tx_thread_system_suspend+0x3cc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <_tx_thread_system_suspend+0x3d4>)
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <_tx_thread_system_suspend+0x3d0>)
 8003c44:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8003c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d104      	bne.n	8003c62 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <_tx_thread_system_suspend+0x3d0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c60:	61da      	str	r2, [r3, #28]
 8003c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003c6e:	4b33      	ldr	r3, [pc, #204]	; (8003d3c <_tx_thread_system_suspend+0x3d8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8003c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d153      	bne.n	8003d22 <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <_tx_thread_system_suspend+0x3dc>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003c82:	f3ef 8305 	mrs	r3, IPSR
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10c      	bne.n	8003ca8 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003c98:	b662      	cpsie	i
}
 8003c9a:	bf00      	nop
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	bf00      	nop
}
 8003ca8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8003caa:	e03a      	b.n	8003d22 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8003cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d104      	bne.n	8003cc8 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8003cbe:	4b1d      	ldr	r3, [pc, #116]	; (8003d34 <_tx_thread_system_suspend+0x3d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc6:	61da      	str	r2, [r3, #28]
 8003cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <_tx_thread_system_suspend+0x3d0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d022      	beq.n	8003d26 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <_tx_thread_system_suspend+0x3d8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8003ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11c      	bne.n	8003d26 <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <_tx_thread_system_suspend+0x3dc>)
 8003cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003cf4:	f3ef 8305 	mrs	r3, IPSR
 8003cf8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003cfa:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	617b      	str	r3, [r7, #20]
    return(posture);
 8003d06:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8003d08:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003d0a:	b662      	cpsie	i
}
 8003d0c:	bf00      	nop
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f383 8810 	msr	PRIMASK, r3
}
 8003d18:	bf00      	nop
}
 8003d1a:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8003d1c:	e003      	b.n	8003d26 <_tx_thread_system_suspend+0x3c2>
                return;
 8003d1e:	bf00      	nop
 8003d20:	e002      	b.n	8003d28 <_tx_thread_system_suspend+0x3c4>
            return;
 8003d22:	bf00      	nop
 8003d24:	e000      	b.n	8003d28 <_tx_thread_system_suspend+0x3c4>
    return;
 8003d26:	bf00      	nop
}
 8003d28:	3790      	adds	r7, #144	; 0x90
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000f5c 	.word	0x20000f5c
 8003d34:	20000f4c 	.word	0x20000f4c
 8003d38:	20000f60 	.word	0x20000f60
 8003d3c:	20000fe0 	.word	0x20000fe0
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003d4a:	4b5f      	ldr	r3, [pc, #380]	; (8003ec8 <_tx_thread_time_slice+0x184>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d50:	f3ef 8310 	mrs	r3, PRIMASK
 8003d54:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003d56:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003d58:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003d5a:	b672      	cpsid	i
    return(int_posture);
 8003d5c:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003d60:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <_tx_thread_time_slice+0x188>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d024      	beq.n	8003db6 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d120      	bne.n	8003db6 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69d2      	ldr	r2, [r2, #28]
 8003d7a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	4a53      	ldr	r2, [pc, #332]	; (8003ed0 <_tx_thread_time_slice+0x18c>)
 8003d82:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d013      	beq.n	8003db6 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d10d      	bne.n	8003db6 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	6a12      	ldr	r2, [r2, #32]
 8003da2:	494c      	ldr	r1, [pc, #304]	; (8003ed4 <_tx_thread_time_slice+0x190>)
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003da8:	4b4b      	ldr	r3, [pc, #300]	; (8003ed8 <_tx_thread_time_slice+0x194>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a49      	ldr	r2, [pc, #292]	; (8003ed4 <_tx_thread_time_slice+0x190>)
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <_tx_thread_time_slice+0x198>)
 8003db4:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003db6:	f3ef 8305 	mrs	r3, IPSR
 8003dba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003dbc:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 8003dbe:	4b48      	ldr	r3, [pc, #288]	; (8003ee0 <_tx_thread_time_slice+0x19c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8003dc6:	4b47      	ldr	r3, [pc, #284]	; (8003ee4 <_tx_thread_time_slice+0x1a0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <_tx_thread_time_slice+0x1a4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d06d      	beq.n	8003eb4 <_tx_thread_time_slice+0x170>
 8003dd8:	4b44      	ldr	r3, [pc, #272]	; (8003eec <_tx_thread_time_slice+0x1a8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d067      	beq.n	8003eb4 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003de4:	f3ef 8305 	mrs	r3, IPSR
 8003de8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <_tx_thread_time_slice+0x19c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	4b34      	ldr	r3, [pc, #208]	; (8003ec8 <_tx_thread_time_slice+0x184>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <_tx_thread_time_slice+0xd4>
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	041a      	lsls	r2, r3, #16
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
 8003e16:	e00e      	b.n	8003e36 <_tx_thread_time_slice+0xf2>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003e1e:	d205      	bcs.n	8003e2c <_tx_thread_time_slice+0xe8>
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	e004      	b.n	8003e36 <_tx_thread_time_slice+0xf2>
 8003e2c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
 8003e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	2205      	movs	r2, #5
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <_tx_thread_time_slice+0x1ac>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <_tx_thread_time_slice+0x198>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	611a      	str	r2, [r3, #16]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5e:	615a      	str	r2, [r3, #20]
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	619a      	str	r2, [r3, #24]
 8003e66:	1d3a      	adds	r2, r7, #4
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	61da      	str	r2, [r3, #28]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	3320      	adds	r3, #32
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <_tx_thread_time_slice+0x1b0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d314      	bcc.n	8003ea6 <_tx_thread_time_slice+0x162>
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <_tx_thread_time_slice+0x1b4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	4a19      	ldr	r2, [pc, #100]	; (8003ee8 <_tx_thread_time_slice+0x1a4>)
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <_tx_thread_time_slice+0x1b8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <_tx_thread_time_slice+0x1bc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <_tx_thread_time_slice+0x170>
 8003e98:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <_tx_thread_time_slice+0x1bc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <_tx_thread_time_slice+0x1b8>)
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4798      	blx	r3
 8003ea4:	e006      	b.n	8003eb4 <_tx_thread_time_slice+0x170>
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <_tx_thread_time_slice+0x1a4>)
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b13      	ldr	r3, [pc, #76]	; (8003efc <_tx_thread_time_slice+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a3a      	ldr	r2, [r7, #32]
 8003eb2:	621a      	str	r2, [r3, #32]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8003ec0:	bf00      	nop
 8003ec2:	3738      	adds	r7, #56	; 0x38
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000f48 	.word	0x20000f48
 8003ecc:	20000ff0 	.word	0x20000ff0
 8003ed0:	2000154c 	.word	0x2000154c
 8003ed4:	20000f60 	.word	0x20000f60
 8003ed8:	20000f5c 	.word	0x20000f5c
 8003edc:	20000f4c 	.word	0x20000f4c
 8003ee0:	2000000c 	.word	0x2000000c
 8003ee4:	20000fe0 	.word	0x20000fe0
 8003ee8:	20001564 	.word	0x20001564
 8003eec:	20001568 	.word	0x20001568
 8003ef0:	e0001004 	.word	0xe0001004
 8003ef4:	20001560 	.word	0x20001560
 8003ef8:	2000155c 	.word	0x2000155c
 8003efc:	20001550 	.word	0x20001550
 8003f00:	2000156c 	.word	0x2000156c

08003f04 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f10:	f3ef 8310 	mrs	r3, PRIMASK
 8003f14:	617b      	str	r3, [r7, #20]
    return(posture);
 8003f16:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003f18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f1a:	b672      	cpsid	i
    return(int_posture);
 8003f1c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8003f1e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d10e      	bne.n	8003f46 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <_tx_thread_timeout+0x74>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <_tx_thread_timeout+0x74>)
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f40:	f7ff fb56 	bl	80035f0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003f44:	e013      	b.n	8003f6e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	69b9      	ldr	r1, [r7, #24]
 8003f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6c:	4798      	blx	r3
}
 8003f6e:	bf00      	nop
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000fe0 	.word	0x20000fe0

08003f7c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	607b      	str	r3, [r7, #4]
    return(posture);
 8003f88:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003f8a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f8c:	b672      	cpsid	i
    return(int_posture);
 8003f8e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8003f90:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <_tx_timer_expiration_process+0x3c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3301      	adds	r3, #1
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <_tx_timer_expiration_process+0x3c>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003fa8:	4804      	ldr	r0, [pc, #16]	; (8003fbc <_tx_timer_expiration_process+0x40>)
 8003faa:	f7ff fb21 	bl	80035f0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000fe0 	.word	0x20000fe0
 8003fbc:	20001090 	.word	0x20001090

08003fc0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003fc6:	4b28      	ldr	r3, [pc, #160]	; (8004068 <_tx_timer_initialize+0xa8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003fcc:	4b27      	ldr	r3, [pc, #156]	; (800406c <_tx_timer_initialize+0xac>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003fd2:	4b27      	ldr	r3, [pc, #156]	; (8004070 <_tx_timer_initialize+0xb0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003fd8:	4b26      	ldr	r3, [pc, #152]	; (8004074 <_tx_timer_initialize+0xb4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <_tx_timer_initialize+0xb8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4824      	ldr	r0, [pc, #144]	; (800407c <_tx_timer_initialize+0xbc>)
 8003fea:	f000 fccb 	bl	8004984 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8003fee:	4b24      	ldr	r3, [pc, #144]	; (8004080 <_tx_timer_initialize+0xc0>)
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <_tx_timer_initialize+0xbc>)
 8003ff2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <_tx_timer_initialize+0xc4>)
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <_tx_timer_initialize+0xbc>)
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <_tx_timer_initialize+0xc8>)
 8003ffc:	4a23      	ldr	r2, [pc, #140]	; (800408c <_tx_timer_initialize+0xcc>)
 8003ffe:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <_tx_timer_initialize+0xc8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3304      	adds	r3, #4
 8004006:	4a20      	ldr	r2, [pc, #128]	; (8004088 <_tx_timer_initialize+0xc8>)
 8004008:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800400a:	4b21      	ldr	r3, [pc, #132]	; (8004090 <_tx_timer_initialize+0xd0>)
 800400c:	4a21      	ldr	r2, [pc, #132]	; (8004094 <_tx_timer_initialize+0xd4>)
 800400e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <_tx_timer_initialize+0xd8>)
 8004012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004016:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004018:	4b20      	ldr	r3, [pc, #128]	; (800409c <_tx_timer_initialize+0xdc>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <_tx_timer_initialize+0xd0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1d      	ldr	r2, [pc, #116]	; (8004098 <_tx_timer_initialize+0xd8>)
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	491d      	ldr	r1, [pc, #116]	; (800409c <_tx_timer_initialize+0xdc>)
 8004028:	6809      	ldr	r1, [r1, #0]
 800402a:	481c      	ldr	r0, [pc, #112]	; (800409c <_tx_timer_initialize+0xdc>)
 800402c:	6800      	ldr	r0, [r0, #0]
 800402e:	2400      	movs	r4, #0
 8004030:	9405      	str	r4, [sp, #20]
 8004032:	2400      	movs	r4, #0
 8004034:	9404      	str	r4, [sp, #16]
 8004036:	9003      	str	r0, [sp, #12]
 8004038:	9102      	str	r1, [sp, #8]
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <_tx_timer_initialize+0xe0>)
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <_tx_timer_initialize+0xe4>)
 8004042:	4919      	ldr	r1, [pc, #100]	; (80040a8 <_tx_timer_initialize+0xe8>)
 8004044:	4819      	ldr	r0, [pc, #100]	; (80040ac <_tx_timer_initialize+0xec>)
 8004046:	f7ff f88d 	bl	8003164 <_tx_thread_create>
 800404a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e5      	bne.n	800401e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004052:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <_tx_timer_initialize+0xf0>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <_tx_timer_initialize+0xf4>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	bf00      	nop
 8004068:	20000fec 	.word	0x20000fec
 800406c:	2000154c 	.word	0x2000154c
 8004070:	20000ff0 	.word	0x20000ff0
 8004074:	20001080 	.word	0x20001080
 8004078:	2000108c 	.word	0x2000108c
 800407c:	20000ff4 	.word	0x20000ff4
 8004080:	20001074 	.word	0x20001074
 8004084:	2000107c 	.word	0x2000107c
 8004088:	20001078 	.word	0x20001078
 800408c:	20001070 	.word	0x20001070
 8004090:	20001140 	.word	0x20001140
 8004094:	2000114c 	.word	0x2000114c
 8004098:	20001144 	.word	0x20001144
 800409c:	20001148 	.word	0x20001148
 80040a0:	4154494d 	.word	0x4154494d
 80040a4:	080041ed 	.word	0x080041ed
 80040a8:	08005310 	.word	0x08005310
 80040ac:	20001090 	.word	0x20001090
 80040b0:	20001084 	.word	0x20001084
 80040b4:	20001088 	.word	0x20001088

080040b8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b089      	sub	sp, #36	; 0x24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04a      	beq.n	8004162 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d046      	beq.n	8004162 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d142      	bne.n	8004162 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d902      	bls.n	80040e8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80040e2:	231f      	movs	r3, #31
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e002      	b.n	80040ee <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <_tx_timer_system_activate+0xb8>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <_tx_timer_system_activate+0xbc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	429a      	cmp	r2, r3
 8004102:	d30b      	bcc.n	800411c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <_tx_timer_system_activate+0xbc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	109b      	asrs	r3, r3, #2
 800410e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <_tx_timer_system_activate+0xc0>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e011      	b.n	800415c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8004162:	bf00      	nop
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	2000107c 	.word	0x2000107c
 8004174:	20001078 	.word	0x20001078
 8004178:	20001074 	.word	0x20001074

0800417c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d026      	beq.n	80041de <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d108      	bne.n	80041b0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d117      	bne.n	80041d8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e013      	b.n	80041d8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d105      	bne.n	80041d8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
    }
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b098      	sub	sp, #96	; 0x60
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80041f4:	2300      	movs	r3, #0
 80041f6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a73      	ldr	r2, [pc, #460]	; (80043c8 <_tx_timer_thread_entry+0x1dc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f040 80de 	bne.w	80043be <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004202:	f3ef 8310 	mrs	r3, PRIMASK
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800420c:	b672      	cpsid	i
    return(int_posture);
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8004210:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8004212:	4b6e      	ldr	r3, [pc, #440]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f107 020c 	add.w	r2, r7, #12
 8004226:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8004228:	4b68      	ldr	r3, [pc, #416]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8004230:	4b66      	ldr	r3, [pc, #408]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3304      	adds	r3, #4
 8004236:	4a65      	ldr	r2, [pc, #404]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 8004238:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800423a:	4b64      	ldr	r3, [pc, #400]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b64      	ldr	r3, [pc, #400]	; (80043d0 <_tx_timer_thread_entry+0x1e4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d103      	bne.n	800424e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <_tx_timer_thread_entry+0x1e8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a60      	ldr	r2, [pc, #384]	; (80043cc <_tx_timer_thread_entry+0x1e0>)
 800424c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800424e:	4b62      	ldr	r3, [pc, #392]	; (80043d8 <_tx_timer_thread_entry+0x1ec>)
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	f383 8810 	msr	PRIMASK, r3
}
 800425e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800426a:	b672      	cpsid	i
    return(int_posture);
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800426e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8004270:	e07f      	b.n	8004372 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8004280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004284:	429a      	cmp	r2, r3
 8004286:	d102      	bne.n	800428e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e00e      	b.n	80042ac <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800428e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004298:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800429a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800429e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80042a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a2:	f107 020c 	add.w	r2, r7, #12
 80042a6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80042a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042aa:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d911      	bls.n	80042d8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80042b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	f107 0208 	add.w	r2, r7, #8
 80042ca:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	e01a      	b.n	800430e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80042d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80042e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	f107 0208 	add.w	r2, r7, #8
 80042fa:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80042fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004300:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	e002      	b.n	800430e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800430e:	4a33      	ldr	r2, [pc, #204]	; (80043dc <_tx_timer_thread_entry+0x1f0>)
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	f383 8810 	msr	PRIMASK, r3
}
 800431e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8004320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8004326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004328:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800432a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800432c:	f3ef 8310 	mrs	r3, PRIMASK
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004336:	b672      	cpsid	i
    return(int_posture);
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800433c:	4b27      	ldr	r3, [pc, #156]	; (80043dc <_tx_timer_thread_entry+0x1f0>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004346:	429a      	cmp	r2, r3
 8004348:	d105      	bne.n	8004356 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800434a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8004350:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004352:	f7ff feb1 	bl	80040b8 <_tx_timer_system_activate>
 8004356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004358:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f383 8810 	msr	PRIMASK, r3
}
 8004360:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004362:	f3ef 8310 	mrs	r3, PRIMASK
 8004366:	623b      	str	r3, [r7, #32]
    return(posture);
 8004368:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800436a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800436c:	b672      	cpsid	i
    return(int_posture);
 800436e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004370:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af7c 	bne.w	8004272 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800437a:	4b17      	ldr	r3, [pc, #92]	; (80043d8 <_tx_timer_thread_entry+0x1ec>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <_tx_timer_thread_entry+0x1f4>)
 8004384:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004388:	2203      	movs	r2, #3
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800438c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438e:	2201      	movs	r2, #1
 8004390:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8004392:	4b14      	ldr	r3, [pc, #80]	; (80043e4 <_tx_timer_thread_entry+0x1f8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <_tx_timer_thread_entry+0x1f8>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80043a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80043aa:	f7ff fadb 	bl	8003964 <_tx_thread_system_suspend>
 80043ae:	e728      	b.n	8004202 <_tx_timer_thread_entry+0x16>
 80043b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	bf00      	nop
            TX_DISABLE
 80043bc:	e721      	b.n	8004202 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80043be:	bf00      	nop
 80043c0:	3760      	adds	r7, #96	; 0x60
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	4154494d 	.word	0x4154494d
 80043cc:	2000107c 	.word	0x2000107c
 80043d0:	20001078 	.word	0x20001078
 80043d4:	20001074 	.word	0x20001074
 80043d8:	20001080 	.word	0x20001080
 80043dc:	2000108c 	.word	0x2000108c
 80043e0:	20001090 	.word	0x20001090
 80043e4:	20000fe0 	.word	0x20000fe0

080043e8 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <_tx_trace_initialize+0x34>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <_tx_trace_initialize+0x38>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <_tx_trace_initialize+0x3c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <_tx_trace_initialize+0x40>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <_tx_trace_initialize+0x44>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <_tx_trace_initialize+0x48>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20001550 	.word	0x20001550
 8004420:	20001554 	.word	0x20001554
 8004424:	20001558 	.word	0x20001558
 8004428:	2000155c 	.word	0x2000155c
 800442c:	20001560 	.word	0x20001560
 8004430:	20001564 	.word	0x20001564

08004434 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8004434:	b480      	push	{r7}
 8004436:	b08d      	sub	sp, #52	; 0x34
 8004438:	af00      	add	r7, sp, #0
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4603      	mov	r3, r0
 8004442:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8004444:	4b6d      	ldr	r3, [pc, #436]	; (80045fc <_tx_trace_object_register+0x1c8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80d0 	beq.w	80045ee <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 800444e:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <_tx_trace_object_register+0x1cc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8004454:	4b6b      	ldr	r3, [pc, #428]	; (8004604 <_tx_trace_object_register+0x1d0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80c8 	beq.w	80045ee <_tx_trace_object_register+0x1ba>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8004466:	4b68      	ldr	r3, [pc, #416]	; (8004608 <_tx_trace_object_register+0x1d4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800446c:	4b63      	ldr	r3, [pc, #396]	; (80045fc <_tx_trace_object_register+0x1c8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8004472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	461a      	mov	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d103      	bne.n	80044aa <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d02d      	beq.n	800450c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d11a      	bne.n	80044ee <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 80044b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d102      	bne.n	80044c6 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c4:	e013      	b.n	80044ee <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80044c6:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <_tx_trace_object_register+0x1c8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80044cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ce:	4613      	mov	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	461a      	mov	r2, r3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	3301      	adds	r3, #1
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 80044f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d301      	bcc.n	8004500 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 80044fc:	2300      	movs	r3, #0
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8004500:	4b41      	ldr	r3, [pc, #260]	; (8004608 <_tx_trace_object_register+0x1d4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004506:	429a      	cmp	r2, r3
 8004508:	d1b0      	bne.n	800446c <_tx_trace_object_register+0x38>
 800450a:	e000      	b.n	800450e <_tx_trace_object_register+0xda>
                    break;
 800450c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800450e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	429a      	cmp	r2, r3
 8004514:	d26b      	bcs.n	80045ee <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <_tx_trace_object_register+0x1d0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	4a39      	ldr	r2, [pc, #228]	; (8004604 <_tx_trace_object_register+0x1d0>)
 800451e:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	3301      	adds	r3, #1
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	429a      	cmp	r2, r3
 8004528:	d904      	bls.n	8004534 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	3301      	adds	r3, #1
 800452e:	4a36      	ldr	r2, [pc, #216]	; (8004608 <_tx_trace_object_register+0x1d4>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e002      	b.n	800453a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8004534:	4b34      	ldr	r3, [pc, #208]	; (8004608 <_tx_trace_object_register+0x1d4>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 800453a:	4b30      	ldr	r3, [pc, #192]	; (80045fc <_tx_trace_object_register+0x1c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8004540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	461a      	mov	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004572:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004578:	e014      	b.n	80045a4 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	4413      	add	r3, r2
 8004584:	61fb      	str	r3, [r7, #28]

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	7819      	ldrb	r1, [r3, #0]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	4413      	add	r3, r2
 8004590:	3310      	adds	r3, #16
 8004592:	460a      	mov	r2, r1
 8004594:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	3301      	adds	r3, #1
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b1e      	cmp	r3, #30
 80045a8:	d9e7      	bls.n	800457a <_tx_trace_object_register+0x146>
 80045aa:	e000      	b.n	80045ae <_tx_trace_object_register+0x17a>
                    {
                        break;
 80045ac:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	4413      	add	r3, r2
 80045b4:	3310      	adds	r3, #16
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d110      	bne.n	80045e2 <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 80045e0:	e005      	b.n	80045ee <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2200      	movs	r2, #0
 80045e6:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2200      	movs	r2, #0
 80045ec:	70da      	strb	r2, [r3, #3]
}
 80045ee:	bf00      	nop
 80045f0:	3734      	adds	r7, #52	; 0x34
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20001554 	.word	0x20001554
 8004600:	20001570 	.word	0x20001570
 8004604:	20001574 	.word	0x20001574
 8004608:	20001578 	.word	0x20001578

0800460c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b092      	sub	sp, #72	; 0x48
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800461a:	2300      	movs	r3, #0
 800461c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004624:	2302      	movs	r3, #2
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
 8004628:	e075      	b.n	8004716 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800462a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800462c:	2b34      	cmp	r3, #52	; 0x34
 800462e:	d002      	beq.n	8004636 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004630:	2302      	movs	r3, #2
 8004632:	647b      	str	r3, [r7, #68]	; 0x44
 8004634:	e06f      	b.n	8004716 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004636:	f3ef 8310 	mrs	r3, PRIMASK
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800463e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004640:	b672      	cpsid	i
    return(int_posture);
 8004642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004646:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <_txe_byte_pool_create+0x128>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	4a39      	ldr	r2, [pc, #228]	; (8004734 <_txe_byte_pool_create+0x128>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800465c:	4b36      	ldr	r3, [pc, #216]	; (8004738 <_txe_byte_pool_create+0x12c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	643b      	str	r3, [r7, #64]	; 0x40
 8004666:	e009      	b.n	800467c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	429a      	cmp	r2, r3
 800466e:	d00b      	beq.n	8004688 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8004670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004678:	3301      	adds	r3, #1
 800467a:	643b      	str	r3, [r7, #64]	; 0x40
 800467c:	4b2f      	ldr	r3, [pc, #188]	; (800473c <_txe_byte_pool_create+0x130>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004682:	429a      	cmp	r2, r3
 8004684:	d3f0      	bcc.n	8004668 <_txe_byte_pool_create+0x5c>
 8004686:	e000      	b.n	800468a <_txe_byte_pool_create+0x7e>
                break;
 8004688:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	623b      	str	r3, [r7, #32]
    return(posture);
 8004690:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004692:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004694:	b672      	cpsid	i
    return(int_posture);
 8004696:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800469a:	4b26      	ldr	r3, [pc, #152]	; (8004734 <_txe_byte_pool_create+0x128>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3b01      	subs	r3, #1
 80046a0:	4a24      	ldr	r2, [pc, #144]	; (8004734 <_txe_byte_pool_create+0x128>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80046b0:	f7fe ff64 	bl	800357c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d102      	bne.n	80046c2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80046bc:	2302      	movs	r3, #2
 80046be:	647b      	str	r3, [r7, #68]	; 0x44
 80046c0:	e029      	b.n	8004716 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80046c8:	2303      	movs	r3, #3
 80046ca:	647b      	str	r3, [r7, #68]	; 0x44
 80046cc:	e023      	b.n	8004716 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b63      	cmp	r3, #99	; 0x63
 80046d2:	d802      	bhi.n	80046da <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80046d4:	2305      	movs	r3, #5
 80046d6:	647b      	str	r3, [r7, #68]	; 0x44
 80046d8:	e01d      	b.n	8004716 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <_txe_byte_pool_create+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80046e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e2:	4a18      	ldr	r2, [pc, #96]	; (8004744 <_txe_byte_pool_create+0x138>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d101      	bne.n	80046ec <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80046e8:	2313      	movs	r3, #19
 80046ea:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80046f2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <_txe_byte_pool_create+0x13c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80046fe:	f3ef 8305 	mrs	r3, IPSR
 8004702:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004704:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <_txe_byte_pool_create+0x13c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4313      	orrs	r3, r2
 800470c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004710:	d201      	bcs.n	8004716 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004712:	2313      	movs	r3, #19
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7fe fb8a 	bl	8002e3c <_tx_byte_pool_create>
 8004728:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800472a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800472c:	4618      	mov	r0, r3
 800472e:	3748      	adds	r7, #72	; 0x48
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000fe0 	.word	0x20000fe0
 8004738:	20000f38 	.word	0x20000f38
 800473c:	20000f3c 	.word	0x20000f3c
 8004740:	20000f48 	.word	0x20000f48
 8004744:	20001090 	.word	0x20001090
 8004748:	2000000c 	.word	0x2000000c

0800474c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b09a      	sub	sp, #104	; 0x68
 8004750:	af06      	add	r7, sp, #24
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800475a:	2300      	movs	r3, #0
 800475c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004764:	230e      	movs	r3, #14
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	e0bb      	b.n	80048e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800476a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800476c:	2bb0      	cmp	r3, #176	; 0xb0
 800476e:	d002      	beq.n	8004776 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004770:	230e      	movs	r3, #14
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	e0b5      	b.n	80048e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004776:	f3ef 8310 	mrs	r3, PRIMASK
 800477a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004780:	b672      	cpsid	i
    return(int_posture);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004784:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004786:	4b64      	ldr	r3, [pc, #400]	; (8004918 <_txe_thread_create+0x1cc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a62      	ldr	r2, [pc, #392]	; (8004918 <_txe_thread_create+0x1cc>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800479c:	2300      	movs	r3, #0
 800479e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80047a0:	4b5e      	ldr	r3, [pc, #376]	; (800491c <_txe_thread_create+0x1d0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80047a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	3b01      	subs	r3, #1
 80047ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b0:	4413      	add	r3, r2
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	e02b      	b.n	8004816 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d101      	bne.n	80047ca <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80047c6:	2301      	movs	r3, #1
 80047c8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d028      	beq.n	8004822 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d308      	bcc.n	80047ec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80047da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d203      	bcs.n	80047ec <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80047e8:	2301      	movs	r3, #1
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d308      	bcc.n	8004808 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d203      	bcs.n	8004808 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004812:	3301      	adds	r3, #1
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
 8004816:	4b42      	ldr	r3, [pc, #264]	; (8004920 <_txe_thread_create+0x1d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481c:	429a      	cmp	r2, r3
 800481e:	d3ce      	bcc.n	80047be <_txe_thread_create+0x72>
 8004820:	e000      	b.n	8004824 <_txe_thread_create+0xd8>
                break;
 8004822:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	61fb      	str	r3, [r7, #28]
    return(posture);
 800482a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800482c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800482e:	b672      	cpsid	i
    return(int_posture);
 8004830:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004834:	4b38      	ldr	r3, [pc, #224]	; (8004918 <_txe_thread_create+0x1cc>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3b01      	subs	r3, #1
 800483a:	4a37      	ldr	r2, [pc, #220]	; (8004918 <_txe_thread_create+0x1cc>)
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004840:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800484a:	f7fe fe97 	bl	800357c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004852:	429a      	cmp	r2, r3
 8004854:	d102      	bne.n	800485c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8004856:	230e      	movs	r3, #14
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485a:	e042      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800485c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8004862:	2303      	movs	r3, #3
 8004864:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004866:	e03c      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800486e:	2303      	movs	r3, #3
 8004870:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004872:	e036      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8004874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004876:	2bc7      	cmp	r3, #199	; 0xc7
 8004878:	d802      	bhi.n	8004880 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800487a:	2305      	movs	r3, #5
 800487c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487e:	e030      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8004880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004882:	2b1f      	cmp	r3, #31
 8004884:	d902      	bls.n	800488c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8004886:	230f      	movs	r3, #15
 8004888:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488a:	e02a      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800488c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800488e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8004894:	2318      	movs	r3, #24
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	e023      	b.n	80048e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d902      	bls.n	80048a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80048a0:	2310      	movs	r3, #16
 80048a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a4:	e01d      	b.n	80048e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80048a6:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <_txe_thread_create+0x1d8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <_txe_thread_create+0x1dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80048b4:	2313      	movs	r3, #19
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048b8:	f3ef 8305 	mrs	r3, IPSR
 80048bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80048be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <_txe_thread_create+0x1e0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048ca:	f3ef 8305 	mrs	r3, IPSR
 80048ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80048d0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80048d2:	4b16      	ldr	r3, [pc, #88]	; (800492c <_txe_thread_create+0x1e0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80048dc:	d201      	bcs.n	80048e2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80048de:	2313      	movs	r3, #19
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d112      	bne.n	800490e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80048e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ea:	9305      	str	r3, [sp, #20]
 80048ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f2:	9303      	str	r3, [sp, #12]
 80048f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7fe fc2c 	bl	8003164 <_tx_thread_create>
 800490c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004910:	4618      	mov	r0, r3
 8004912:	3750      	adds	r7, #80	; 0x50
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000fe0 	.word	0x20000fe0
 800491c:	20000f50 	.word	0x20000f50
 8004920:	20000f54 	.word	0x20000f54
 8004924:	20000f48 	.word	0x20000f48
 8004928:	20001090 	.word	0x20001090
 800492c:	2000000c 	.word	0x2000000c

08004930 <__errno>:
 8004930:	4b01      	ldr	r3, [pc, #4]	; (8004938 <__errno+0x8>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	20000010 	.word	0x20000010

0800493c <__libc_init_array>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4d0d      	ldr	r5, [pc, #52]	; (8004974 <__libc_init_array+0x38>)
 8004940:	4c0d      	ldr	r4, [pc, #52]	; (8004978 <__libc_init_array+0x3c>)
 8004942:	1b64      	subs	r4, r4, r5
 8004944:	10a4      	asrs	r4, r4, #2
 8004946:	2600      	movs	r6, #0
 8004948:	42a6      	cmp	r6, r4
 800494a:	d109      	bne.n	8004960 <__libc_init_array+0x24>
 800494c:	4d0b      	ldr	r5, [pc, #44]	; (800497c <__libc_init_array+0x40>)
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <__libc_init_array+0x44>)
 8004950:	f000 fc8e 	bl	8005270 <_init>
 8004954:	1b64      	subs	r4, r4, r5
 8004956:	10a4      	asrs	r4, r4, #2
 8004958:	2600      	movs	r6, #0
 800495a:	42a6      	cmp	r6, r4
 800495c:	d105      	bne.n	800496a <__libc_init_array+0x2e>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	f855 3b04 	ldr.w	r3, [r5], #4
 8004964:	4798      	blx	r3
 8004966:	3601      	adds	r6, #1
 8004968:	e7ee      	b.n	8004948 <__libc_init_array+0xc>
 800496a:	f855 3b04 	ldr.w	r3, [r5], #4
 800496e:	4798      	blx	r3
 8004970:	3601      	adds	r6, #1
 8004972:	e7f2      	b.n	800495a <__libc_init_array+0x1e>
 8004974:	08005378 	.word	0x08005378
 8004978:	08005378 	.word	0x08005378
 800497c:	08005378 	.word	0x08005378
 8004980:	0800537c 	.word	0x0800537c

08004984 <memset>:
 8004984:	4402      	add	r2, r0
 8004986:	4603      	mov	r3, r0
 8004988:	4293      	cmp	r3, r2
 800498a:	d100      	bne.n	800498e <memset+0xa>
 800498c:	4770      	bx	lr
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	e7f9      	b.n	8004988 <memset+0x4>

08004994 <siprintf>:
 8004994:	b40e      	push	{r1, r2, r3}
 8004996:	b500      	push	{lr}
 8004998:	b09c      	sub	sp, #112	; 0x70
 800499a:	ab1d      	add	r3, sp, #116	; 0x74
 800499c:	9002      	str	r0, [sp, #8]
 800499e:	9006      	str	r0, [sp, #24]
 80049a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049a4:	4809      	ldr	r0, [pc, #36]	; (80049cc <siprintf+0x38>)
 80049a6:	9107      	str	r1, [sp, #28]
 80049a8:	9104      	str	r1, [sp, #16]
 80049aa:	4909      	ldr	r1, [pc, #36]	; (80049d0 <siprintf+0x3c>)
 80049ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b0:	9105      	str	r1, [sp, #20]
 80049b2:	6800      	ldr	r0, [r0, #0]
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	a902      	add	r1, sp, #8
 80049b8:	f000 f868 	bl	8004a8c <_svfiprintf_r>
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	b01c      	add	sp, #112	; 0x70
 80049c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c8:	b003      	add	sp, #12
 80049ca:	4770      	bx	lr
 80049cc:	20000010 	.word	0x20000010
 80049d0:	ffff0208 	.word	0xffff0208

080049d4 <__ssputs_r>:
 80049d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	688e      	ldr	r6, [r1, #8]
 80049da:	429e      	cmp	r6, r3
 80049dc:	4682      	mov	sl, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	4690      	mov	r8, r2
 80049e2:	461f      	mov	r7, r3
 80049e4:	d838      	bhi.n	8004a58 <__ssputs_r+0x84>
 80049e6:	898a      	ldrh	r2, [r1, #12]
 80049e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ec:	d032      	beq.n	8004a54 <__ssputs_r+0x80>
 80049ee:	6825      	ldr	r5, [r4, #0]
 80049f0:	6909      	ldr	r1, [r1, #16]
 80049f2:	eba5 0901 	sub.w	r9, r5, r1
 80049f6:	6965      	ldr	r5, [r4, #20]
 80049f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a00:	3301      	adds	r3, #1
 8004a02:	444b      	add	r3, r9
 8004a04:	106d      	asrs	r5, r5, #1
 8004a06:	429d      	cmp	r5, r3
 8004a08:	bf38      	it	cc
 8004a0a:	461d      	movcc	r5, r3
 8004a0c:	0553      	lsls	r3, r2, #21
 8004a0e:	d531      	bpl.n	8004a74 <__ssputs_r+0xa0>
 8004a10:	4629      	mov	r1, r5
 8004a12:	f000 fb63 	bl	80050dc <_malloc_r>
 8004a16:	4606      	mov	r6, r0
 8004a18:	b950      	cbnz	r0, 8004a30 <__ssputs_r+0x5c>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	f8ca 3000 	str.w	r3, [sl]
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a30:	6921      	ldr	r1, [r4, #16]
 8004a32:	464a      	mov	r2, r9
 8004a34:	f000 fabe 	bl	8004fb4 <memcpy>
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	81a3      	strh	r3, [r4, #12]
 8004a44:	6126      	str	r6, [r4, #16]
 8004a46:	6165      	str	r5, [r4, #20]
 8004a48:	444e      	add	r6, r9
 8004a4a:	eba5 0509 	sub.w	r5, r5, r9
 8004a4e:	6026      	str	r6, [r4, #0]
 8004a50:	60a5      	str	r5, [r4, #8]
 8004a52:	463e      	mov	r6, r7
 8004a54:	42be      	cmp	r6, r7
 8004a56:	d900      	bls.n	8004a5a <__ssputs_r+0x86>
 8004a58:	463e      	mov	r6, r7
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4641      	mov	r1, r8
 8004a60:	f000 fab6 	bl	8004fd0 <memmove>
 8004a64:	68a3      	ldr	r3, [r4, #8]
 8004a66:	1b9b      	subs	r3, r3, r6
 8004a68:	60a3      	str	r3, [r4, #8]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	4433      	add	r3, r6
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2000      	movs	r0, #0
 8004a72:	e7db      	b.n	8004a2c <__ssputs_r+0x58>
 8004a74:	462a      	mov	r2, r5
 8004a76:	f000 fba5 	bl	80051c4 <_realloc_r>
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d1e1      	bne.n	8004a44 <__ssputs_r+0x70>
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	4650      	mov	r0, sl
 8004a84:	f000 fabe 	bl	8005004 <_free_r>
 8004a88:	e7c7      	b.n	8004a1a <__ssputs_r+0x46>
	...

08004a8c <_svfiprintf_r>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	4698      	mov	r8, r3
 8004a92:	898b      	ldrh	r3, [r1, #12]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	b09d      	sub	sp, #116	; 0x74
 8004a98:	4607      	mov	r7, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	d50e      	bpl.n	8004abe <_svfiprintf_r+0x32>
 8004aa0:	690b      	ldr	r3, [r1, #16]
 8004aa2:	b963      	cbnz	r3, 8004abe <_svfiprintf_r+0x32>
 8004aa4:	2140      	movs	r1, #64	; 0x40
 8004aa6:	f000 fb19 	bl	80050dc <_malloc_r>
 8004aaa:	6028      	str	r0, [r5, #0]
 8004aac:	6128      	str	r0, [r5, #16]
 8004aae:	b920      	cbnz	r0, 8004aba <_svfiprintf_r+0x2e>
 8004ab0:	230c      	movs	r3, #12
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab8:	e0d1      	b.n	8004c5e <_svfiprintf_r+0x1d2>
 8004aba:	2340      	movs	r3, #64	; 0x40
 8004abc:	616b      	str	r3, [r5, #20]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004acc:	2330      	movs	r3, #48	; 0x30
 8004ace:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c78 <_svfiprintf_r+0x1ec>
 8004ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad6:	f04f 0901 	mov.w	r9, #1
 8004ada:	4623      	mov	r3, r4
 8004adc:	469a      	mov	sl, r3
 8004ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ae2:	b10a      	cbz	r2, 8004ae8 <_svfiprintf_r+0x5c>
 8004ae4:	2a25      	cmp	r2, #37	; 0x25
 8004ae6:	d1f9      	bne.n	8004adc <_svfiprintf_r+0x50>
 8004ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aec:	d00b      	beq.n	8004b06 <_svfiprintf_r+0x7a>
 8004aee:	465b      	mov	r3, fp
 8004af0:	4622      	mov	r2, r4
 8004af2:	4629      	mov	r1, r5
 8004af4:	4638      	mov	r0, r7
 8004af6:	f7ff ff6d 	bl	80049d4 <__ssputs_r>
 8004afa:	3001      	adds	r0, #1
 8004afc:	f000 80aa 	beq.w	8004c54 <_svfiprintf_r+0x1c8>
 8004b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b02:	445a      	add	r2, fp
 8004b04:	9209      	str	r2, [sp, #36]	; 0x24
 8004b06:	f89a 3000 	ldrb.w	r3, [sl]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a2 	beq.w	8004c54 <_svfiprintf_r+0x1c8>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f04f 32ff 	mov.w	r2, #4294967295
 8004b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b1a:	f10a 0a01 	add.w	sl, sl, #1
 8004b1e:	9304      	str	r3, [sp, #16]
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b26:	931a      	str	r3, [sp, #104]	; 0x68
 8004b28:	4654      	mov	r4, sl
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b30:	4851      	ldr	r0, [pc, #324]	; (8004c78 <_svfiprintf_r+0x1ec>)
 8004b32:	f7fb fc8d 	bl	8000450 <memchr>
 8004b36:	9a04      	ldr	r2, [sp, #16]
 8004b38:	b9d8      	cbnz	r0, 8004b72 <_svfiprintf_r+0xe6>
 8004b3a:	06d0      	lsls	r0, r2, #27
 8004b3c:	bf44      	itt	mi
 8004b3e:	2320      	movmi	r3, #32
 8004b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b44:	0711      	lsls	r1, r2, #28
 8004b46:	bf44      	itt	mi
 8004b48:	232b      	movmi	r3, #43	; 0x2b
 8004b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b52:	2b2a      	cmp	r3, #42	; 0x2a
 8004b54:	d015      	beq.n	8004b82 <_svfiprintf_r+0xf6>
 8004b56:	9a07      	ldr	r2, [sp, #28]
 8004b58:	4654      	mov	r4, sl
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f04f 0c0a 	mov.w	ip, #10
 8004b60:	4621      	mov	r1, r4
 8004b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b66:	3b30      	subs	r3, #48	; 0x30
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d94e      	bls.n	8004c0a <_svfiprintf_r+0x17e>
 8004b6c:	b1b0      	cbz	r0, 8004b9c <_svfiprintf_r+0x110>
 8004b6e:	9207      	str	r2, [sp, #28]
 8004b70:	e014      	b.n	8004b9c <_svfiprintf_r+0x110>
 8004b72:	eba0 0308 	sub.w	r3, r0, r8
 8004b76:	fa09 f303 	lsl.w	r3, r9, r3
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	9304      	str	r3, [sp, #16]
 8004b7e:	46a2      	mov	sl, r4
 8004b80:	e7d2      	b.n	8004b28 <_svfiprintf_r+0x9c>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1d19      	adds	r1, r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	9103      	str	r1, [sp, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfbb      	ittet	lt
 8004b8e:	425b      	neglt	r3, r3
 8004b90:	f042 0202 	orrlt.w	r2, r2, #2
 8004b94:	9307      	strge	r3, [sp, #28]
 8004b96:	9307      	strlt	r3, [sp, #28]
 8004b98:	bfb8      	it	lt
 8004b9a:	9204      	strlt	r2, [sp, #16]
 8004b9c:	7823      	ldrb	r3, [r4, #0]
 8004b9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba0:	d10c      	bne.n	8004bbc <_svfiprintf_r+0x130>
 8004ba2:	7863      	ldrb	r3, [r4, #1]
 8004ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba6:	d135      	bne.n	8004c14 <_svfiprintf_r+0x188>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	1d1a      	adds	r2, r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	9203      	str	r2, [sp, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bfb8      	it	lt
 8004bb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb8:	3402      	adds	r4, #2
 8004bba:	9305      	str	r3, [sp, #20]
 8004bbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c88 <_svfiprintf_r+0x1fc>
 8004bc0:	7821      	ldrb	r1, [r4, #0]
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	f7fb fc43 	bl	8000450 <memchr>
 8004bca:	b140      	cbz	r0, 8004bde <_svfiprintf_r+0x152>
 8004bcc:	2340      	movs	r3, #64	; 0x40
 8004bce:	eba0 000a 	sub.w	r0, r0, sl
 8004bd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	4303      	orrs	r3, r0
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9304      	str	r3, [sp, #16]
 8004bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be2:	4826      	ldr	r0, [pc, #152]	; (8004c7c <_svfiprintf_r+0x1f0>)
 8004be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be8:	2206      	movs	r2, #6
 8004bea:	f7fb fc31 	bl	8000450 <memchr>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d038      	beq.n	8004c64 <_svfiprintf_r+0x1d8>
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <_svfiprintf_r+0x1f4>)
 8004bf4:	bb1b      	cbnz	r3, 8004c3e <_svfiprintf_r+0x1b2>
 8004bf6:	9b03      	ldr	r3, [sp, #12]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	3308      	adds	r3, #8
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c04:	4433      	add	r3, r6
 8004c06:	9309      	str	r3, [sp, #36]	; 0x24
 8004c08:	e767      	b.n	8004ada <_svfiprintf_r+0x4e>
 8004c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c0e:	460c      	mov	r4, r1
 8004c10:	2001      	movs	r0, #1
 8004c12:	e7a5      	b.n	8004b60 <_svfiprintf_r+0xd4>
 8004c14:	2300      	movs	r3, #0
 8004c16:	3401      	adds	r4, #1
 8004c18:	9305      	str	r3, [sp, #20]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4620      	mov	r0, r4
 8004c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c26:	3a30      	subs	r2, #48	; 0x30
 8004c28:	2a09      	cmp	r2, #9
 8004c2a:	d903      	bls.n	8004c34 <_svfiprintf_r+0x1a8>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0c5      	beq.n	8004bbc <_svfiprintf_r+0x130>
 8004c30:	9105      	str	r1, [sp, #20]
 8004c32:	e7c3      	b.n	8004bbc <_svfiprintf_r+0x130>
 8004c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c38:	4604      	mov	r4, r0
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e7f0      	b.n	8004c20 <_svfiprintf_r+0x194>
 8004c3e:	ab03      	add	r3, sp, #12
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	462a      	mov	r2, r5
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c46:	a904      	add	r1, sp, #16
 8004c48:	4638      	mov	r0, r7
 8004c4a:	f3af 8000 	nop.w
 8004c4e:	1c42      	adds	r2, r0, #1
 8004c50:	4606      	mov	r6, r0
 8004c52:	d1d6      	bne.n	8004c02 <_svfiprintf_r+0x176>
 8004c54:	89ab      	ldrh	r3, [r5, #12]
 8004c56:	065b      	lsls	r3, r3, #25
 8004c58:	f53f af2c 	bmi.w	8004ab4 <_svfiprintf_r+0x28>
 8004c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5e:	b01d      	add	sp, #116	; 0x74
 8004c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <_svfiprintf_r+0x1f8>)
 8004c6c:	a904      	add	r1, sp, #16
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f000 f87a 	bl	8004d68 <_printf_i>
 8004c74:	e7eb      	b.n	8004c4e <_svfiprintf_r+0x1c2>
 8004c76:	bf00      	nop
 8004c78:	0800533c 	.word	0x0800533c
 8004c7c:	08005346 	.word	0x08005346
 8004c80:	00000000 	.word	0x00000000
 8004c84:	080049d5 	.word	0x080049d5
 8004c88:	08005342 	.word	0x08005342

08004c8c <_printf_common>:
 8004c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c90:	4616      	mov	r6, r2
 8004c92:	4699      	mov	r9, r3
 8004c94:	688a      	ldr	r2, [r1, #8]
 8004c96:	690b      	ldr	r3, [r1, #16]
 8004c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	bfb8      	it	lt
 8004ca0:	4613      	movlt	r3, r2
 8004ca2:	6033      	str	r3, [r6, #0]
 8004ca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca8:	4607      	mov	r7, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	b10a      	cbz	r2, 8004cb2 <_printf_common+0x26>
 8004cae:	3301      	adds	r3, #1
 8004cb0:	6033      	str	r3, [r6, #0]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	0699      	lsls	r1, r3, #26
 8004cb6:	bf42      	ittt	mi
 8004cb8:	6833      	ldrmi	r3, [r6, #0]
 8004cba:	3302      	addmi	r3, #2
 8004cbc:	6033      	strmi	r3, [r6, #0]
 8004cbe:	6825      	ldr	r5, [r4, #0]
 8004cc0:	f015 0506 	ands.w	r5, r5, #6
 8004cc4:	d106      	bne.n	8004cd4 <_printf_common+0x48>
 8004cc6:	f104 0a19 	add.w	sl, r4, #25
 8004cca:	68e3      	ldr	r3, [r4, #12]
 8004ccc:	6832      	ldr	r2, [r6, #0]
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	dc26      	bgt.n	8004d22 <_printf_common+0x96>
 8004cd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd8:	1e13      	subs	r3, r2, #0
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	bf18      	it	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	0692      	lsls	r2, r2, #26
 8004ce2:	d42b      	bmi.n	8004d3c <_printf_common+0xb0>
 8004ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4638      	mov	r0, r7
 8004cec:	47c0      	blx	r8
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d01e      	beq.n	8004d30 <_printf_common+0xa4>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	68e5      	ldr	r5, [r4, #12]
 8004cf6:	6832      	ldr	r2, [r6, #0]
 8004cf8:	f003 0306 	and.w	r3, r3, #6
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	bf08      	it	eq
 8004d00:	1aad      	subeq	r5, r5, r2
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	6922      	ldr	r2, [r4, #16]
 8004d06:	bf0c      	ite	eq
 8004d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d0c:	2500      	movne	r5, #0
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	bfc4      	itt	gt
 8004d12:	1a9b      	subgt	r3, r3, r2
 8004d14:	18ed      	addgt	r5, r5, r3
 8004d16:	2600      	movs	r6, #0
 8004d18:	341a      	adds	r4, #26
 8004d1a:	42b5      	cmp	r5, r6
 8004d1c:	d11a      	bne.n	8004d54 <_printf_common+0xc8>
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e008      	b.n	8004d34 <_printf_common+0xa8>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4652      	mov	r2, sl
 8004d26:	4649      	mov	r1, r9
 8004d28:	4638      	mov	r0, r7
 8004d2a:	47c0      	blx	r8
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d103      	bne.n	8004d38 <_printf_common+0xac>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d38:	3501      	adds	r5, #1
 8004d3a:	e7c6      	b.n	8004cca <_printf_common+0x3e>
 8004d3c:	18e1      	adds	r1, r4, r3
 8004d3e:	1c5a      	adds	r2, r3, #1
 8004d40:	2030      	movs	r0, #48	; 0x30
 8004d42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d46:	4422      	add	r2, r4
 8004d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d50:	3302      	adds	r3, #2
 8004d52:	e7c7      	b.n	8004ce4 <_printf_common+0x58>
 8004d54:	2301      	movs	r3, #1
 8004d56:	4622      	mov	r2, r4
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c0      	blx	r8
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d0e6      	beq.n	8004d30 <_printf_common+0xa4>
 8004d62:	3601      	adds	r6, #1
 8004d64:	e7d9      	b.n	8004d1a <_printf_common+0x8e>
	...

08004d68 <_printf_i>:
 8004d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d6c:	7e0f      	ldrb	r7, [r1, #24]
 8004d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d70:	2f78      	cmp	r7, #120	; 0x78
 8004d72:	4691      	mov	r9, r2
 8004d74:	4680      	mov	r8, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	469a      	mov	sl, r3
 8004d7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d7e:	d807      	bhi.n	8004d90 <_printf_i+0x28>
 8004d80:	2f62      	cmp	r7, #98	; 0x62
 8004d82:	d80a      	bhi.n	8004d9a <_printf_i+0x32>
 8004d84:	2f00      	cmp	r7, #0
 8004d86:	f000 80d8 	beq.w	8004f3a <_printf_i+0x1d2>
 8004d8a:	2f58      	cmp	r7, #88	; 0x58
 8004d8c:	f000 80a3 	beq.w	8004ed6 <_printf_i+0x16e>
 8004d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d98:	e03a      	b.n	8004e10 <_printf_i+0xa8>
 8004d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d9e:	2b15      	cmp	r3, #21
 8004da0:	d8f6      	bhi.n	8004d90 <_printf_i+0x28>
 8004da2:	a101      	add	r1, pc, #4	; (adr r1, 8004da8 <_printf_i+0x40>)
 8004da4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da8:	08004e01 	.word	0x08004e01
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004d91 	.word	0x08004d91
 8004db4:	08004d91 	.word	0x08004d91
 8004db8:	08004d91 	.word	0x08004d91
 8004dbc:	08004d91 	.word	0x08004d91
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d91 	.word	0x08004d91
 8004dc8:	08004d91 	.word	0x08004d91
 8004dcc:	08004d91 	.word	0x08004d91
 8004dd0:	08004d91 	.word	0x08004d91
 8004dd4:	08004f21 	.word	0x08004f21
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004f03 	.word	0x08004f03
 8004de0:	08004d91 	.word	0x08004d91
 8004de4:	08004d91 	.word	0x08004d91
 8004de8:	08004f43 	.word	0x08004f43
 8004dec:	08004d91 	.word	0x08004d91
 8004df0:	08004e45 	.word	0x08004e45
 8004df4:	08004d91 	.word	0x08004d91
 8004df8:	08004d91 	.word	0x08004d91
 8004dfc:	08004f0b 	.word	0x08004f0b
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	602a      	str	r2, [r5, #0]
 8004e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0a3      	b.n	8004f5c <_printf_i+0x1f4>
 8004e14:	6820      	ldr	r0, [r4, #0]
 8004e16:	6829      	ldr	r1, [r5, #0]
 8004e18:	0606      	lsls	r6, r0, #24
 8004e1a:	f101 0304 	add.w	r3, r1, #4
 8004e1e:	d50a      	bpl.n	8004e36 <_printf_i+0xce>
 8004e20:	680e      	ldr	r6, [r1, #0]
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	2e00      	cmp	r6, #0
 8004e26:	da03      	bge.n	8004e30 <_printf_i+0xc8>
 8004e28:	232d      	movs	r3, #45	; 0x2d
 8004e2a:	4276      	negs	r6, r6
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	485e      	ldr	r0, [pc, #376]	; (8004fac <_printf_i+0x244>)
 8004e32:	230a      	movs	r3, #10
 8004e34:	e019      	b.n	8004e6a <_printf_i+0x102>
 8004e36:	680e      	ldr	r6, [r1, #0]
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e3e:	bf18      	it	ne
 8004e40:	b236      	sxthne	r6, r6
 8004e42:	e7ef      	b.n	8004e24 <_printf_i+0xbc>
 8004e44:	682b      	ldr	r3, [r5, #0]
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	1d19      	adds	r1, r3, #4
 8004e4a:	6029      	str	r1, [r5, #0]
 8004e4c:	0601      	lsls	r1, r0, #24
 8004e4e:	d501      	bpl.n	8004e54 <_printf_i+0xec>
 8004e50:	681e      	ldr	r6, [r3, #0]
 8004e52:	e002      	b.n	8004e5a <_printf_i+0xf2>
 8004e54:	0646      	lsls	r6, r0, #25
 8004e56:	d5fb      	bpl.n	8004e50 <_printf_i+0xe8>
 8004e58:	881e      	ldrh	r6, [r3, #0]
 8004e5a:	4854      	ldr	r0, [pc, #336]	; (8004fac <_printf_i+0x244>)
 8004e5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e5e:	bf0c      	ite	eq
 8004e60:	2308      	moveq	r3, #8
 8004e62:	230a      	movne	r3, #10
 8004e64:	2100      	movs	r1, #0
 8004e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e6a:	6865      	ldr	r5, [r4, #4]
 8004e6c:	60a5      	str	r5, [r4, #8]
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	bfa2      	ittt	ge
 8004e72:	6821      	ldrge	r1, [r4, #0]
 8004e74:	f021 0104 	bicge.w	r1, r1, #4
 8004e78:	6021      	strge	r1, [r4, #0]
 8004e7a:	b90e      	cbnz	r6, 8004e80 <_printf_i+0x118>
 8004e7c:	2d00      	cmp	r5, #0
 8004e7e:	d04d      	beq.n	8004f1c <_printf_i+0x1b4>
 8004e80:	4615      	mov	r5, r2
 8004e82:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e86:	fb03 6711 	mls	r7, r3, r1, r6
 8004e8a:	5dc7      	ldrb	r7, [r0, r7]
 8004e8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e90:	4637      	mov	r7, r6
 8004e92:	42bb      	cmp	r3, r7
 8004e94:	460e      	mov	r6, r1
 8004e96:	d9f4      	bls.n	8004e82 <_printf_i+0x11a>
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d10b      	bne.n	8004eb4 <_printf_i+0x14c>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	07de      	lsls	r6, r3, #31
 8004ea0:	d508      	bpl.n	8004eb4 <_printf_i+0x14c>
 8004ea2:	6923      	ldr	r3, [r4, #16]
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4299      	cmp	r1, r3
 8004ea8:	bfde      	ittt	le
 8004eaa:	2330      	movle	r3, #48	; 0x30
 8004eac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eb4:	1b52      	subs	r2, r2, r5
 8004eb6:	6122      	str	r2, [r4, #16]
 8004eb8:	f8cd a000 	str.w	sl, [sp]
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	aa03      	add	r2, sp, #12
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	f7ff fee2 	bl	8004c8c <_printf_common>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d14c      	bne.n	8004f66 <_printf_i+0x1fe>
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	b004      	add	sp, #16
 8004ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed6:	4835      	ldr	r0, [pc, #212]	; (8004fac <_printf_i+0x244>)
 8004ed8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004edc:	6829      	ldr	r1, [r5, #0]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee4:	6029      	str	r1, [r5, #0]
 8004ee6:	061d      	lsls	r5, r3, #24
 8004ee8:	d514      	bpl.n	8004f14 <_printf_i+0x1ac>
 8004eea:	07df      	lsls	r7, r3, #31
 8004eec:	bf44      	itt	mi
 8004eee:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef2:	6023      	strmi	r3, [r4, #0]
 8004ef4:	b91e      	cbnz	r6, 8004efe <_printf_i+0x196>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f023 0320 	bic.w	r3, r3, #32
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2310      	movs	r3, #16
 8004f00:	e7b0      	b.n	8004e64 <_printf_i+0xfc>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	f043 0320 	orr.w	r3, r3, #32
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	2378      	movs	r3, #120	; 0x78
 8004f0c:	4828      	ldr	r0, [pc, #160]	; (8004fb0 <_printf_i+0x248>)
 8004f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f12:	e7e3      	b.n	8004edc <_printf_i+0x174>
 8004f14:	0659      	lsls	r1, r3, #25
 8004f16:	bf48      	it	mi
 8004f18:	b2b6      	uxthmi	r6, r6
 8004f1a:	e7e6      	b.n	8004eea <_printf_i+0x182>
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	e7bb      	b.n	8004e98 <_printf_i+0x130>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	6826      	ldr	r6, [r4, #0]
 8004f24:	6961      	ldr	r1, [r4, #20]
 8004f26:	1d18      	adds	r0, r3, #4
 8004f28:	6028      	str	r0, [r5, #0]
 8004f2a:	0635      	lsls	r5, r6, #24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	d501      	bpl.n	8004f34 <_printf_i+0x1cc>
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	e002      	b.n	8004f3a <_printf_i+0x1d2>
 8004f34:	0670      	lsls	r0, r6, #25
 8004f36:	d5fb      	bpl.n	8004f30 <_printf_i+0x1c8>
 8004f38:	8019      	strh	r1, [r3, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	4615      	mov	r5, r2
 8004f40:	e7ba      	b.n	8004eb8 <_printf_i+0x150>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	1d1a      	adds	r2, r3, #4
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	681d      	ldr	r5, [r3, #0]
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7fb fa7e 	bl	8000450 <memchr>
 8004f54:	b108      	cbz	r0, 8004f5a <_printf_i+0x1f2>
 8004f56:	1b40      	subs	r0, r0, r5
 8004f58:	6060      	str	r0, [r4, #4]
 8004f5a:	6863      	ldr	r3, [r4, #4]
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f64:	e7a8      	b.n	8004eb8 <_printf_i+0x150>
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d0ab      	beq.n	8004ecc <_printf_i+0x164>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	079b      	lsls	r3, r3, #30
 8004f78:	d413      	bmi.n	8004fa2 <_printf_i+0x23a>
 8004f7a:	68e0      	ldr	r0, [r4, #12]
 8004f7c:	9b03      	ldr	r3, [sp, #12]
 8004f7e:	4298      	cmp	r0, r3
 8004f80:	bfb8      	it	lt
 8004f82:	4618      	movlt	r0, r3
 8004f84:	e7a4      	b.n	8004ed0 <_printf_i+0x168>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4632      	mov	r2, r6
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d09b      	beq.n	8004ecc <_printf_i+0x164>
 8004f94:	3501      	adds	r5, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	9903      	ldr	r1, [sp, #12]
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	42ab      	cmp	r3, r5
 8004f9e:	dcf2      	bgt.n	8004f86 <_printf_i+0x21e>
 8004fa0:	e7eb      	b.n	8004f7a <_printf_i+0x212>
 8004fa2:	2500      	movs	r5, #0
 8004fa4:	f104 0619 	add.w	r6, r4, #25
 8004fa8:	e7f5      	b.n	8004f96 <_printf_i+0x22e>
 8004faa:	bf00      	nop
 8004fac:	0800534d 	.word	0x0800534d
 8004fb0:	0800535e 	.word	0x0800535e

08004fb4 <memcpy>:
 8004fb4:	440a      	add	r2, r1
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fbc:	d100      	bne.n	8004fc0 <memcpy+0xc>
 8004fbe:	4770      	bx	lr
 8004fc0:	b510      	push	{r4, lr}
 8004fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fca:	4291      	cmp	r1, r2
 8004fcc:	d1f9      	bne.n	8004fc2 <memcpy+0xe>
 8004fce:	bd10      	pop	{r4, pc}

08004fd0 <memmove>:
 8004fd0:	4288      	cmp	r0, r1
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	eb01 0402 	add.w	r4, r1, r2
 8004fd8:	d902      	bls.n	8004fe0 <memmove+0x10>
 8004fda:	4284      	cmp	r4, r0
 8004fdc:	4623      	mov	r3, r4
 8004fde:	d807      	bhi.n	8004ff0 <memmove+0x20>
 8004fe0:	1e43      	subs	r3, r0, #1
 8004fe2:	42a1      	cmp	r1, r4
 8004fe4:	d008      	beq.n	8004ff8 <memmove+0x28>
 8004fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fee:	e7f8      	b.n	8004fe2 <memmove+0x12>
 8004ff0:	4402      	add	r2, r0
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	428a      	cmp	r2, r1
 8004ff6:	d100      	bne.n	8004ffa <memmove+0x2a>
 8004ff8:	bd10      	pop	{r4, pc}
 8004ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005002:	e7f7      	b.n	8004ff4 <memmove+0x24>

08005004 <_free_r>:
 8005004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005006:	2900      	cmp	r1, #0
 8005008:	d044      	beq.n	8005094 <_free_r+0x90>
 800500a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800500e:	9001      	str	r0, [sp, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	f1a1 0404 	sub.w	r4, r1, #4
 8005016:	bfb8      	it	lt
 8005018:	18e4      	addlt	r4, r4, r3
 800501a:	f000 f913 	bl	8005244 <__malloc_lock>
 800501e:	4a1e      	ldr	r2, [pc, #120]	; (8005098 <_free_r+0x94>)
 8005020:	9801      	ldr	r0, [sp, #4]
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	b933      	cbnz	r3, 8005034 <_free_r+0x30>
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6014      	str	r4, [r2, #0]
 800502a:	b003      	add	sp, #12
 800502c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005030:	f000 b90e 	b.w	8005250 <__malloc_unlock>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d908      	bls.n	800504a <_free_r+0x46>
 8005038:	6825      	ldr	r5, [r4, #0]
 800503a:	1961      	adds	r1, r4, r5
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1949      	addeq	r1, r1, r5
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	e7ed      	b.n	8005026 <_free_r+0x22>
 800504a:	461a      	mov	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b10b      	cbz	r3, 8005054 <_free_r+0x50>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d9fa      	bls.n	800504a <_free_r+0x46>
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	1855      	adds	r5, r2, r1
 8005058:	42a5      	cmp	r5, r4
 800505a:	d10b      	bne.n	8005074 <_free_r+0x70>
 800505c:	6824      	ldr	r4, [r4, #0]
 800505e:	4421      	add	r1, r4
 8005060:	1854      	adds	r4, r2, r1
 8005062:	42a3      	cmp	r3, r4
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	d1e0      	bne.n	800502a <_free_r+0x26>
 8005068:	681c      	ldr	r4, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	4421      	add	r1, r4
 8005070:	6011      	str	r1, [r2, #0]
 8005072:	e7da      	b.n	800502a <_free_r+0x26>
 8005074:	d902      	bls.n	800507c <_free_r+0x78>
 8005076:	230c      	movs	r3, #12
 8005078:	6003      	str	r3, [r0, #0]
 800507a:	e7d6      	b.n	800502a <_free_r+0x26>
 800507c:	6825      	ldr	r5, [r4, #0]
 800507e:	1961      	adds	r1, r4, r5
 8005080:	428b      	cmp	r3, r1
 8005082:	bf04      	itt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	bf04      	itt	eq
 800508c:	1949      	addeq	r1, r1, r5
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	6054      	str	r4, [r2, #4]
 8005092:	e7ca      	b.n	800502a <_free_r+0x26>
 8005094:	b003      	add	sp, #12
 8005096:	bd30      	pop	{r4, r5, pc}
 8005098:	2000157c 	.word	0x2000157c

0800509c <sbrk_aligned>:
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4e0e      	ldr	r6, [pc, #56]	; (80050d8 <sbrk_aligned+0x3c>)
 80050a0:	460c      	mov	r4, r1
 80050a2:	6831      	ldr	r1, [r6, #0]
 80050a4:	4605      	mov	r5, r0
 80050a6:	b911      	cbnz	r1, 80050ae <sbrk_aligned+0x12>
 80050a8:	f000 f8bc 	bl	8005224 <_sbrk_r>
 80050ac:	6030      	str	r0, [r6, #0]
 80050ae:	4621      	mov	r1, r4
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 f8b7 	bl	8005224 <_sbrk_r>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d00a      	beq.n	80050d0 <sbrk_aligned+0x34>
 80050ba:	1cc4      	adds	r4, r0, #3
 80050bc:	f024 0403 	bic.w	r4, r4, #3
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d007      	beq.n	80050d4 <sbrk_aligned+0x38>
 80050c4:	1a21      	subs	r1, r4, r0
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f8ac 	bl	8005224 <_sbrk_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d101      	bne.n	80050d4 <sbrk_aligned+0x38>
 80050d0:	f04f 34ff 	mov.w	r4, #4294967295
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	20001580 	.word	0x20001580

080050dc <_malloc_r>:
 80050dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e0:	1ccd      	adds	r5, r1, #3
 80050e2:	f025 0503 	bic.w	r5, r5, #3
 80050e6:	3508      	adds	r5, #8
 80050e8:	2d0c      	cmp	r5, #12
 80050ea:	bf38      	it	cc
 80050ec:	250c      	movcc	r5, #12
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	4607      	mov	r7, r0
 80050f2:	db01      	blt.n	80050f8 <_malloc_r+0x1c>
 80050f4:	42a9      	cmp	r1, r5
 80050f6:	d905      	bls.n	8005104 <_malloc_r+0x28>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	2600      	movs	r6, #0
 80050fe:	4630      	mov	r0, r6
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	4e2e      	ldr	r6, [pc, #184]	; (80051c0 <_malloc_r+0xe4>)
 8005106:	f000 f89d 	bl	8005244 <__malloc_lock>
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	461c      	mov	r4, r3
 800510e:	bb34      	cbnz	r4, 800515e <_malloc_r+0x82>
 8005110:	4629      	mov	r1, r5
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ffc2 	bl	800509c <sbrk_aligned>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	4604      	mov	r4, r0
 800511c:	d14d      	bne.n	80051ba <_malloc_r+0xde>
 800511e:	6834      	ldr	r4, [r6, #0]
 8005120:	4626      	mov	r6, r4
 8005122:	2e00      	cmp	r6, #0
 8005124:	d140      	bne.n	80051a8 <_malloc_r+0xcc>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	4631      	mov	r1, r6
 800512a:	4638      	mov	r0, r7
 800512c:	eb04 0803 	add.w	r8, r4, r3
 8005130:	f000 f878 	bl	8005224 <_sbrk_r>
 8005134:	4580      	cmp	r8, r0
 8005136:	d13a      	bne.n	80051ae <_malloc_r+0xd2>
 8005138:	6821      	ldr	r1, [r4, #0]
 800513a:	3503      	adds	r5, #3
 800513c:	1a6d      	subs	r5, r5, r1
 800513e:	f025 0503 	bic.w	r5, r5, #3
 8005142:	3508      	adds	r5, #8
 8005144:	2d0c      	cmp	r5, #12
 8005146:	bf38      	it	cc
 8005148:	250c      	movcc	r5, #12
 800514a:	4629      	mov	r1, r5
 800514c:	4638      	mov	r0, r7
 800514e:	f7ff ffa5 	bl	800509c <sbrk_aligned>
 8005152:	3001      	adds	r0, #1
 8005154:	d02b      	beq.n	80051ae <_malloc_r+0xd2>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	442b      	add	r3, r5
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	e00e      	b.n	800517c <_malloc_r+0xa0>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	1b52      	subs	r2, r2, r5
 8005162:	d41e      	bmi.n	80051a2 <_malloc_r+0xc6>
 8005164:	2a0b      	cmp	r2, #11
 8005166:	d916      	bls.n	8005196 <_malloc_r+0xba>
 8005168:	1961      	adds	r1, r4, r5
 800516a:	42a3      	cmp	r3, r4
 800516c:	6025      	str	r5, [r4, #0]
 800516e:	bf18      	it	ne
 8005170:	6059      	strne	r1, [r3, #4]
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	bf08      	it	eq
 8005176:	6031      	streq	r1, [r6, #0]
 8005178:	5162      	str	r2, [r4, r5]
 800517a:	604b      	str	r3, [r1, #4]
 800517c:	4638      	mov	r0, r7
 800517e:	f104 060b 	add.w	r6, r4, #11
 8005182:	f000 f865 	bl	8005250 <__malloc_unlock>
 8005186:	f026 0607 	bic.w	r6, r6, #7
 800518a:	1d23      	adds	r3, r4, #4
 800518c:	1af2      	subs	r2, r6, r3
 800518e:	d0b6      	beq.n	80050fe <_malloc_r+0x22>
 8005190:	1b9b      	subs	r3, r3, r6
 8005192:	50a3      	str	r3, [r4, r2]
 8005194:	e7b3      	b.n	80050fe <_malloc_r+0x22>
 8005196:	6862      	ldr	r2, [r4, #4]
 8005198:	42a3      	cmp	r3, r4
 800519a:	bf0c      	ite	eq
 800519c:	6032      	streq	r2, [r6, #0]
 800519e:	605a      	strne	r2, [r3, #4]
 80051a0:	e7ec      	b.n	800517c <_malloc_r+0xa0>
 80051a2:	4623      	mov	r3, r4
 80051a4:	6864      	ldr	r4, [r4, #4]
 80051a6:	e7b2      	b.n	800510e <_malloc_r+0x32>
 80051a8:	4634      	mov	r4, r6
 80051aa:	6876      	ldr	r6, [r6, #4]
 80051ac:	e7b9      	b.n	8005122 <_malloc_r+0x46>
 80051ae:	230c      	movs	r3, #12
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4638      	mov	r0, r7
 80051b4:	f000 f84c 	bl	8005250 <__malloc_unlock>
 80051b8:	e7a1      	b.n	80050fe <_malloc_r+0x22>
 80051ba:	6025      	str	r5, [r4, #0]
 80051bc:	e7de      	b.n	800517c <_malloc_r+0xa0>
 80051be:	bf00      	nop
 80051c0:	2000157c 	.word	0x2000157c

080051c4 <_realloc_r>:
 80051c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c8:	4680      	mov	r8, r0
 80051ca:	4614      	mov	r4, r2
 80051cc:	460e      	mov	r6, r1
 80051ce:	b921      	cbnz	r1, 80051da <_realloc_r+0x16>
 80051d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4611      	mov	r1, r2
 80051d6:	f7ff bf81 	b.w	80050dc <_malloc_r>
 80051da:	b92a      	cbnz	r2, 80051e8 <_realloc_r+0x24>
 80051dc:	f7ff ff12 	bl	8005004 <_free_r>
 80051e0:	4625      	mov	r5, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e8:	f000 f838 	bl	800525c <_malloc_usable_size_r>
 80051ec:	4284      	cmp	r4, r0
 80051ee:	4607      	mov	r7, r0
 80051f0:	d802      	bhi.n	80051f8 <_realloc_r+0x34>
 80051f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051f6:	d812      	bhi.n	800521e <_realloc_r+0x5a>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff ff6e 	bl	80050dc <_malloc_r>
 8005200:	4605      	mov	r5, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	d0ed      	beq.n	80051e2 <_realloc_r+0x1e>
 8005206:	42bc      	cmp	r4, r7
 8005208:	4622      	mov	r2, r4
 800520a:	4631      	mov	r1, r6
 800520c:	bf28      	it	cs
 800520e:	463a      	movcs	r2, r7
 8005210:	f7ff fed0 	bl	8004fb4 <memcpy>
 8005214:	4631      	mov	r1, r6
 8005216:	4640      	mov	r0, r8
 8005218:	f7ff fef4 	bl	8005004 <_free_r>
 800521c:	e7e1      	b.n	80051e2 <_realloc_r+0x1e>
 800521e:	4635      	mov	r5, r6
 8005220:	e7df      	b.n	80051e2 <_realloc_r+0x1e>
	...

08005224 <_sbrk_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4d06      	ldr	r5, [pc, #24]	; (8005240 <_sbrk_r+0x1c>)
 8005228:	2300      	movs	r3, #0
 800522a:	4604      	mov	r4, r0
 800522c:	4608      	mov	r0, r1
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	f7fb fdf8 	bl	8000e24 <_sbrk>
 8005234:	1c43      	adds	r3, r0, #1
 8005236:	d102      	bne.n	800523e <_sbrk_r+0x1a>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	b103      	cbz	r3, 800523e <_sbrk_r+0x1a>
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20001584 	.word	0x20001584

08005244 <__malloc_lock>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__malloc_lock+0x8>)
 8005246:	f000 b811 	b.w	800526c <__retarget_lock_acquire_recursive>
 800524a:	bf00      	nop
 800524c:	20001588 	.word	0x20001588

08005250 <__malloc_unlock>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__malloc_unlock+0x8>)
 8005252:	f000 b80c 	b.w	800526e <__retarget_lock_release_recursive>
 8005256:	bf00      	nop
 8005258:	20001588 	.word	0x20001588

0800525c <_malloc_usable_size_r>:
 800525c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005260:	1f18      	subs	r0, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	bfbc      	itt	lt
 8005266:	580b      	ldrlt	r3, [r1, r0]
 8005268:	18c0      	addlt	r0, r0, r3
 800526a:	4770      	bx	lr

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
