
MotionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800aa78  0800aa78  0001aa78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afdc  0800afdc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe4  0800afe4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe4  0800afe4  0001afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800afec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001238  200001ec  0800b1d8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  0800b1d8  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019390  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d1  00000000  00000000  000395ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0003d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  0003e928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d9c  00000000  00000000  0003f748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be69  00000000  00000000  000654e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad9a  00000000  00000000  0008134d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c0e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d8  00000000  00000000  0015c138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa60 	.word	0x0800aa60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800aa60 	.word	0x0800aa60

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000212:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000216:	491a      	ldr	r1, [pc, #104]	; (8000280 <__tx_DBGHandler+0x6>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000218:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800021c:	4819      	ldr	r0, [pc, #100]	; (8000284 <__tx_DBGHandler+0xa>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800021e:	4918      	ldr	r1, [pc, #96]	; (8000280 <__tx_DBGHandler+0x6>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000220:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000222:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <__tx_DBGHandler+0xe>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000226:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000228:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000232:	f240 5177 	movw	r1, #1399	; 0x577
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000236:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000238:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800023c:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800023e:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000242:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000246:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 800024a:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800024e:	490f      	ldr	r1, [pc, #60]	; (800028c <__tx_DBGHandler+0x12>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000250:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000254:	4770      	bx	lr

08000256 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000256:	f7ff bffe 	b.w	8000256 <__tx_BadHandler>

0800025a <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 800025a:	f7ff bffe 	b.w	800025a <__tx_HardfaultHandler>

0800025e <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_SVCallHandler>

08000262 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000262:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000264:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000268:	4770      	bx	lr

0800026a <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800026c:	f000 f890 	bl	8000390 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000274:	4770      	bx	lr

08000276 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_NMIHandler>

0800027a <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 800027a:	f7ff bffe 	b.w	800027a <__tx_DBGHandler>
 800027e:	0000      	.short	0x0000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000280:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000284:	20000ddc 	.word	0x20000ddc
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000288:	e0001000 	.word	0xe0001000
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800028c:	40ff0000 	.word	0x40ff0000

08000290 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000290:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000296:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000298:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800029c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002b6:	f3bf 8f6f 	isb	sy

080002ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ba:	e7fe      	b.n	80002ba <__tx_wait_here>

080002bc <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002bc:	4821      	ldr	r0, [pc, #132]	; (8000344 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002c6:	b191      	cbz	r1, 80002ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002d6:	d101      	bne.n	80002dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002dc:	4c1b      	ldr	r4, [pc, #108]	; (800034c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002e8:	b10d      	cbz	r5, 80002ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ec:	6023      	str	r3, [r4, #0]

080002ee <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ee:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002f2:	b1b1      	cbz	r1, 8000322 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002f4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002f6:	b662      	cpsie	i

080002f8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002fa:	4c14      	ldr	r4, [pc, #80]	; (800034c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000302:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000304:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000306:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800030a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000312:	d101      	bne.n	8000318 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000314:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000318 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800033c:	e7dc      	b.n	80002f8 <__tx_ts_restore>

0800033e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800033e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000340:	20000e78 	.word	0x20000e78
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000344:	20000de0 	.word	0x20000de0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000348:	20000de4 	.word	0x20000de4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800034c:	200013e4 	.word	0x200013e4

08000350 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000350:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000352:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000356:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800035a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800035e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000360:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000364:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000366:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000368:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800036a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800036c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800036e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000370:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000372:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000374:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000376:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000378:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800037c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000382:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000384:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800038a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800038c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800038e:	4770      	bx	lr

08000390 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000390:	4922      	ldr	r1, [pc, #136]	; (800041c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000392:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000394:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000398:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800039c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800039e:	b13a      	cbz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003a6:	b91a      	cbnz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003ae:	6018      	str	r0, [r3, #0]

080003b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003b0:	491d      	ldr	r1, [pc, #116]	; (8000428 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003b6:	b122      	cbz	r2, 80003c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003c0:	e008      	b.n	80003d4 <__tx_timer_done>

080003c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003cc:	d101      	bne.n	80003d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003d0:	6818      	ldr	r0, [r3, #0]

080003d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003d2:	6008      	str	r0, [r1, #0]

080003d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003d8:	b912      	cbnz	r2, 80003e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003da:	4914      	ldr	r1, [pc, #80]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003de:	b1d0      	cbz	r0, 8000416 <__tx_timer_nothing_expired>

080003e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003e4:	4911      	ldr	r1, [pc, #68]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003e8:	b108      	cbz	r0, 80003ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ea:	f005 f9bd 	bl	8005768 <_tx_timer_expiration_process>

080003ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003f2:	b172      	cbz	r2, 8000412 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003f4:	f005 f89c 	bl	8005530 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003fc:	b949      	cbnz	r1, 8000412 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000400:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000404:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800040c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800040e:	d000      	beq.n	8000412 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000410:	6002      	str	r2, [r0, #0]

08000412 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000412:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000416 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000416:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	20000e84 	.word	0x20000e84
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000420:	200013e4 	.word	0x200013e4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	20000e88 	.word	0x20000e88
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	20000f14 	.word	0x20000f14
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800042c:	20000f18 	.word	0x20000f18
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000430:	20000f10 	.word	0x20000f10
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000434:	20000f0c 	.word	0x20000f0c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000438:	20000e78 	.word	0x20000e78
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800043c:	20000de0 	.word	0x20000de0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000440:	20000de4 	.word	0x20000de4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <strlen>:
 8000448:	4603      	mov	r3, r0
 800044a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800044e:	2a00      	cmp	r2, #0
 8000450:	d1fb      	bne.n	800044a <strlen+0x2>
 8000452:	1a18      	subs	r0, r3, r0
 8000454:	3801      	subs	r0, #1
 8000456:	4770      	bx	lr
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__aeabi_drsub>:
 8000500:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e002      	b.n	800050c <__adddf3>
 8000506:	bf00      	nop

08000508 <__aeabi_dsub>:
 8000508:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800050c <__adddf3>:
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000512:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	bf1f      	itttt	ne
 8000522:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000526:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800052e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000532:	f000 80e2 	beq.w	80006fa <__adddf3+0x1ee>
 8000536:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800053e:	bfb8      	it	lt
 8000540:	426d      	neglt	r5, r5
 8000542:	dd0c      	ble.n	800055e <__adddf3+0x52>
 8000544:	442c      	add	r4, r5
 8000546:	ea80 0202 	eor.w	r2, r0, r2
 800054a:	ea81 0303 	eor.w	r3, r1, r3
 800054e:	ea82 0000 	eor.w	r0, r2, r0
 8000552:	ea83 0101 	eor.w	r1, r3, r1
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	2d36      	cmp	r5, #54	; 0x36
 8000560:	bf88      	it	hi
 8000562:	bd30      	pophi	{r4, r5, pc}
 8000564:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000568:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800056c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000570:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x70>
 8000576:	4240      	negs	r0, r0
 8000578:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000580:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000584:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x84>
 800058a:	4252      	negs	r2, r2
 800058c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000590:	ea94 0f05 	teq	r4, r5
 8000594:	f000 80a7 	beq.w	80006e6 <__adddf3+0x1da>
 8000598:	f1a4 0401 	sub.w	r4, r4, #1
 800059c:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a0:	db0d      	blt.n	80005be <__adddf3+0xb2>
 80005a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005a6:	fa22 f205 	lsr.w	r2, r2, r5
 80005aa:	1880      	adds	r0, r0, r2
 80005ac:	f141 0100 	adc.w	r1, r1, #0
 80005b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b4:	1880      	adds	r0, r0, r2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	4159      	adcs	r1, r3
 80005bc:	e00e      	b.n	80005dc <__adddf3+0xd0>
 80005be:	f1a5 0520 	sub.w	r5, r5, #32
 80005c2:	f10e 0e20 	add.w	lr, lr, #32
 80005c6:	2a01      	cmp	r2, #1
 80005c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005cc:	bf28      	it	cs
 80005ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	18c0      	adds	r0, r0, r3
 80005d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	d507      	bpl.n	80005f2 <__adddf3+0xe6>
 80005e2:	f04f 0e00 	mov.w	lr, #0
 80005e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005f6:	d31b      	bcc.n	8000630 <__adddf3+0x124>
 80005f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005fc:	d30c      	bcc.n	8000618 <__adddf3+0x10c>
 80005fe:	0849      	lsrs	r1, r1, #1
 8000600:	ea5f 0030 	movs.w	r0, r0, rrx
 8000604:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000608:	f104 0401 	add.w	r4, r4, #1
 800060c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000610:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000614:	f080 809a 	bcs.w	800074c <__adddf3+0x240>
 8000618:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	ea41 0105 	orr.w	r1, r1, r5
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000634:	4140      	adcs	r0, r0
 8000636:	eb41 0101 	adc.w	r1, r1, r1
 800063a:	3c01      	subs	r4, #1
 800063c:	bf28      	it	cs
 800063e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000642:	d2e9      	bcs.n	8000618 <__adddf3+0x10c>
 8000644:	f091 0f00 	teq	r1, #0
 8000648:	bf04      	itt	eq
 800064a:	4601      	moveq	r1, r0
 800064c:	2000      	moveq	r0, #0
 800064e:	fab1 f381 	clz	r3, r1
 8000652:	bf08      	it	eq
 8000654:	3320      	addeq	r3, #32
 8000656:	f1a3 030b 	sub.w	r3, r3, #11
 800065a:	f1b3 0220 	subs.w	r2, r3, #32
 800065e:	da0c      	bge.n	800067a <__adddf3+0x16e>
 8000660:	320c      	adds	r2, #12
 8000662:	dd08      	ble.n	8000676 <__adddf3+0x16a>
 8000664:	f102 0c14 	add.w	ip, r2, #20
 8000668:	f1c2 020c 	rsb	r2, r2, #12
 800066c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000670:	fa21 f102 	lsr.w	r1, r1, r2
 8000674:	e00c      	b.n	8000690 <__adddf3+0x184>
 8000676:	f102 0214 	add.w	r2, r2, #20
 800067a:	bfd8      	it	le
 800067c:	f1c2 0c20 	rsble	ip, r2, #32
 8000680:	fa01 f102 	lsl.w	r1, r1, r2
 8000684:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000688:	bfdc      	itt	le
 800068a:	ea41 010c 	orrle.w	r1, r1, ip
 800068e:	4090      	lslle	r0, r2
 8000690:	1ae4      	subs	r4, r4, r3
 8000692:	bfa2      	ittt	ge
 8000694:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000698:	4329      	orrge	r1, r5
 800069a:	bd30      	popge	{r4, r5, pc}
 800069c:	ea6f 0404 	mvn.w	r4, r4
 80006a0:	3c1f      	subs	r4, #31
 80006a2:	da1c      	bge.n	80006de <__adddf3+0x1d2>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc0e      	bgt.n	80006c6 <__adddf3+0x1ba>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0220 	rsb	r2, r4, #32
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f302 	lsl.w	r3, r1, r2
 80006b8:	ea40 0003 	orr.w	r0, r0, r3
 80006bc:	fa21 f304 	lsr.w	r3, r1, r4
 80006c0:	ea45 0103 	orr.w	r1, r5, r3
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	f1c4 040c 	rsb	r4, r4, #12
 80006ca:	f1c4 0220 	rsb	r2, r4, #32
 80006ce:	fa20 f002 	lsr.w	r0, r0, r2
 80006d2:	fa01 f304 	lsl.w	r3, r1, r4
 80006d6:	ea40 0003 	orr.w	r0, r0, r3
 80006da:	4629      	mov	r1, r5
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	fa21 f004 	lsr.w	r0, r1, r4
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	f094 0f00 	teq	r4, #0
 80006ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ee:	bf06      	itte	eq
 80006f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f4:	3401      	addeq	r4, #1
 80006f6:	3d01      	subne	r5, #1
 80006f8:	e74e      	b.n	8000598 <__adddf3+0x8c>
 80006fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006fe:	bf18      	it	ne
 8000700:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000704:	d029      	beq.n	800075a <__adddf3+0x24e>
 8000706:	ea94 0f05 	teq	r4, r5
 800070a:	bf08      	it	eq
 800070c:	ea90 0f02 	teqeq	r0, r2
 8000710:	d005      	beq.n	800071e <__adddf3+0x212>
 8000712:	ea54 0c00 	orrs.w	ip, r4, r0
 8000716:	bf04      	itt	eq
 8000718:	4619      	moveq	r1, r3
 800071a:	4610      	moveq	r0, r2
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea91 0f03 	teq	r1, r3
 8000722:	bf1e      	ittt	ne
 8000724:	2100      	movne	r1, #0
 8000726:	2000      	movne	r0, #0
 8000728:	bd30      	popne	{r4, r5, pc}
 800072a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800072e:	d105      	bne.n	800073c <__adddf3+0x230>
 8000730:	0040      	lsls	r0, r0, #1
 8000732:	4149      	adcs	r1, r1
 8000734:	bf28      	it	cs
 8000736:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd30      	pop	{r4, r5, pc}
 800073c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000740:	bf3c      	itt	cc
 8000742:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000746:	bd30      	popcc	{r4, r5, pc}
 8000748:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800074c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd30      	pop	{r4, r5, pc}
 800075a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800075e:	bf1a      	itte	ne
 8000760:	4619      	movne	r1, r3
 8000762:	4610      	movne	r0, r2
 8000764:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000768:	bf1c      	itt	ne
 800076a:	460b      	movne	r3, r1
 800076c:	4602      	movne	r2, r0
 800076e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000772:	bf06      	itte	eq
 8000774:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000778:	ea91 0f03 	teqeq	r1, r3
 800077c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	bf00      	nop

08000784 <__aeabi_ui2d>:
 8000784:	f090 0f00 	teq	r0, #0
 8000788:	bf04      	itt	eq
 800078a:	2100      	moveq	r1, #0
 800078c:	4770      	bxeq	lr
 800078e:	b530      	push	{r4, r5, lr}
 8000790:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000794:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000798:	f04f 0500 	mov.w	r5, #0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e750      	b.n	8000644 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_i2d>:
 80007a4:	f090 0f00 	teq	r0, #0
 80007a8:	bf04      	itt	eq
 80007aa:	2100      	moveq	r1, #0
 80007ac:	4770      	bxeq	lr
 80007ae:	b530      	push	{r4, r5, lr}
 80007b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007bc:	bf48      	it	mi
 80007be:	4240      	negmi	r0, r0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e73e      	b.n	8000644 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_f2d>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007d6:	bf1f      	itttt	ne
 80007d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e4:	4770      	bxne	lr
 80007e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ea:	bf08      	it	eq
 80007ec:	4770      	bxeq	lr
 80007ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f2:	bf04      	itt	eq
 80007f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007f8:	4770      	bxeq	lr
 80007fa:	b530      	push	{r4, r5, lr}
 80007fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000800:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000808:	e71c      	b.n	8000644 <__adddf3+0x138>
 800080a:	bf00      	nop

0800080c <__aeabi_ul2d>:
 800080c:	ea50 0201 	orrs.w	r2, r0, r1
 8000810:	bf08      	it	eq
 8000812:	4770      	bxeq	lr
 8000814:	b530      	push	{r4, r5, lr}
 8000816:	f04f 0500 	mov.w	r5, #0
 800081a:	e00a      	b.n	8000832 <__aeabi_l2d+0x16>

0800081c <__aeabi_l2d>:
 800081c:	ea50 0201 	orrs.w	r2, r0, r1
 8000820:	bf08      	it	eq
 8000822:	4770      	bxeq	lr
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082a:	d502      	bpl.n	8000832 <__aeabi_l2d+0x16>
 800082c:	4240      	negs	r0, r0
 800082e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000832:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000836:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800083e:	f43f aed8 	beq.w	80005f2 <__adddf3+0xe6>
 8000842:	f04f 0203 	mov.w	r2, #3
 8000846:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084a:	bf18      	it	ne
 800084c:	3203      	addne	r2, #3
 800084e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000852:	bf18      	it	ne
 8000854:	3203      	addne	r2, #3
 8000856:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085a:	f1c2 0320 	rsb	r3, r2, #32
 800085e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000862:	fa20 f002 	lsr.w	r0, r0, r2
 8000866:	fa01 fe03 	lsl.w	lr, r1, r3
 800086a:	ea40 000e 	orr.w	r0, r0, lr
 800086e:	fa21 f102 	lsr.w	r1, r1, r2
 8000872:	4414      	add	r4, r2
 8000874:	e6bd      	b.n	80005f2 <__adddf3+0xe6>
 8000876:	bf00      	nop

08000878 <__aeabi_dmul>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000882:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000886:	bf1d      	ittte	ne
 8000888:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800088c:	ea94 0f0c 	teqne	r4, ip
 8000890:	ea95 0f0c 	teqne	r5, ip
 8000894:	f000 f8de 	bleq	8000a54 <__aeabi_dmul+0x1dc>
 8000898:	442c      	add	r4, r5
 800089a:	ea81 0603 	eor.w	r6, r1, r3
 800089e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008aa:	bf18      	it	ne
 80008ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008b8:	d038      	beq.n	800092c <__aeabi_dmul+0xb4>
 80008ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80008be:	f04f 0500 	mov.w	r5, #0
 80008c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008ce:	f04f 0600 	mov.w	r6, #0
 80008d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008d6:	f09c 0f00 	teq	ip, #0
 80008da:	bf18      	it	ne
 80008dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80008e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008ec:	d204      	bcs.n	80008f8 <__aeabi_dmul+0x80>
 80008ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008f2:	416d      	adcs	r5, r5
 80008f4:	eb46 0606 	adc.w	r6, r6, r6
 80008f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000900:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000904:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000908:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800090c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000910:	bf88      	it	hi
 8000912:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000916:	d81e      	bhi.n	8000956 <__aeabi_dmul+0xde>
 8000918:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800091c:	bf08      	it	eq
 800091e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000930:	ea46 0101 	orr.w	r1, r6, r1
 8000934:	ea40 0002 	orr.w	r0, r0, r2
 8000938:	ea81 0103 	eor.w	r1, r1, r3
 800093c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000940:	bfc2      	ittt	gt
 8000942:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094a:	bd70      	popgt	{r4, r5, r6, pc}
 800094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000950:	f04f 0e00 	mov.w	lr, #0
 8000954:	3c01      	subs	r4, #1
 8000956:	f300 80ab 	bgt.w	8000ab0 <__aeabi_dmul+0x238>
 800095a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800095e:	bfde      	ittt	le
 8000960:	2000      	movle	r0, #0
 8000962:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000966:	bd70      	pople	{r4, r5, r6, pc}
 8000968:	f1c4 0400 	rsb	r4, r4, #0
 800096c:	3c20      	subs	r4, #32
 800096e:	da35      	bge.n	80009dc <__aeabi_dmul+0x164>
 8000970:	340c      	adds	r4, #12
 8000972:	dc1b      	bgt.n	80009ac <__aeabi_dmul+0x134>
 8000974:	f104 0414 	add.w	r4, r4, #20
 8000978:	f1c4 0520 	rsb	r5, r4, #32
 800097c:	fa00 f305 	lsl.w	r3, r0, r5
 8000980:	fa20 f004 	lsr.w	r0, r0, r4
 8000984:	fa01 f205 	lsl.w	r2, r1, r5
 8000988:	ea40 0002 	orr.w	r0, r0, r2
 800098c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000998:	fa21 f604 	lsr.w	r6, r1, r4
 800099c:	eb42 0106 	adc.w	r1, r2, r6
 80009a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a4:	bf08      	it	eq
 80009a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f1c4 040c 	rsb	r4, r4, #12
 80009b0:	f1c4 0520 	rsb	r5, r4, #32
 80009b4:	fa00 f304 	lsl.w	r3, r0, r4
 80009b8:	fa20 f005 	lsr.w	r0, r0, r5
 80009bc:	fa01 f204 	lsl.w	r2, r1, r4
 80009c0:	ea40 0002 	orr.w	r0, r0, r2
 80009c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009cc:	f141 0100 	adc.w	r1, r1, #0
 80009d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d4:	bf08      	it	eq
 80009d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f1c4 0520 	rsb	r5, r4, #32
 80009e0:	fa00 f205 	lsl.w	r2, r0, r5
 80009e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009e8:	fa20 f304 	lsr.w	r3, r0, r4
 80009ec:	fa01 f205 	lsl.w	r2, r1, r5
 80009f0:	ea43 0302 	orr.w	r3, r3, r2
 80009f4:	fa21 f004 	lsr.w	r0, r1, r4
 80009f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000a00:	ea20 0002 	bic.w	r0, r0, r2
 8000a04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a0c:	bf08      	it	eq
 8000a0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	f094 0f00 	teq	r4, #0
 8000a18:	d10f      	bne.n	8000a3a <__aeabi_dmul+0x1c2>
 8000a1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a1e:	0040      	lsls	r0, r0, #1
 8000a20:	eb41 0101 	adc.w	r1, r1, r1
 8000a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a28:	bf08      	it	eq
 8000a2a:	3c01      	subeq	r4, #1
 8000a2c:	d0f7      	beq.n	8000a1e <__aeabi_dmul+0x1a6>
 8000a2e:	ea41 0106 	orr.w	r1, r1, r6
 8000a32:	f095 0f00 	teq	r5, #0
 8000a36:	bf18      	it	ne
 8000a38:	4770      	bxne	lr
 8000a3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a3e:	0052      	lsls	r2, r2, #1
 8000a40:	eb43 0303 	adc.w	r3, r3, r3
 8000a44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a48:	bf08      	it	eq
 8000a4a:	3d01      	subeq	r5, #1
 8000a4c:	d0f7      	beq.n	8000a3e <__aeabi_dmul+0x1c6>
 8000a4e:	ea43 0306 	orr.w	r3, r3, r6
 8000a52:	4770      	bx	lr
 8000a54:	ea94 0f0c 	teq	r4, ip
 8000a58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5c:	bf18      	it	ne
 8000a5e:	ea95 0f0c 	teqne	r5, ip
 8000a62:	d00c      	beq.n	8000a7e <__aeabi_dmul+0x206>
 8000a64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a6e:	d1d1      	bne.n	8000a14 <__aeabi_dmul+0x19c>
 8000a70:	ea81 0103 	eor.w	r1, r1, r3
 8000a74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a82:	bf06      	itte	eq
 8000a84:	4610      	moveq	r0, r2
 8000a86:	4619      	moveq	r1, r3
 8000a88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a8c:	d019      	beq.n	8000ac2 <__aeabi_dmul+0x24a>
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dmul+0x222>
 8000a94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a98:	d113      	bne.n	8000ac2 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	d105      	bne.n	8000aac <__aeabi_dmul+0x234>
 8000aa0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000aa4:	bf1c      	itt	ne
 8000aa6:	4610      	movne	r0, r2
 8000aa8:	4619      	movne	r1, r3
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dmul+0x24a>
 8000aac:	ea81 0103 	eor.w	r1, r1, r3
 8000ab0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ab4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	bd70      	pop	{r4, r5, r6, pc}
 8000ac2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000ac6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000aca:	bd70      	pop	{r4, r5, r6, pc}

08000acc <__aeabi_ddiv>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ad2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000ad6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ada:	bf1d      	ittte	ne
 8000adc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ae0:	ea94 0f0c 	teqne	r4, ip
 8000ae4:	ea95 0f0c 	teqne	r5, ip
 8000ae8:	f000 f8a7 	bleq	8000c3a <__aeabi_ddiv+0x16e>
 8000aec:	eba4 0405 	sub.w	r4, r4, r5
 8000af0:	ea81 0e03 	eor.w	lr, r1, r3
 8000af4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000afc:	f000 8088 	beq.w	8000c10 <__aeabi_ddiv+0x144>
 8000b00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b24:	429d      	cmp	r5, r3
 8000b26:	bf08      	it	eq
 8000b28:	4296      	cmpeq	r6, r2
 8000b2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b32:	d202      	bcs.n	8000b3a <__aeabi_ddiv+0x6e>
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3a:	1ab6      	subs	r6, r6, r2
 8000b3c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b56:	bf22      	ittt	cs
 8000b58:	1ab6      	subcs	r6, r6, r2
 8000b5a:	4675      	movcs	r5, lr
 8000b5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6e:	bf22      	ittt	cs
 8000b70:	1ab6      	subcs	r6, r6, r2
 8000b72:	4675      	movcs	r5, lr
 8000b74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b86:	bf22      	ittt	cs
 8000b88:	1ab6      	subcs	r6, r6, r2
 8000b8a:	4675      	movcs	r5, lr
 8000b8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b9e:	bf22      	ittt	cs
 8000ba0:	1ab6      	subcs	r6, r6, r2
 8000ba2:	4675      	movcs	r5, lr
 8000ba4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ba8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bac:	d018      	beq.n	8000be0 <__aeabi_ddiv+0x114>
 8000bae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bca:	d1c0      	bne.n	8000b4e <__aeabi_ddiv+0x82>
 8000bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd0:	d10b      	bne.n	8000bea <__aeabi_ddiv+0x11e>
 8000bd2:	ea41 0100 	orr.w	r1, r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bde:	e7b6      	b.n	8000b4e <__aeabi_ddiv+0x82>
 8000be0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000be4:	bf04      	itt	eq
 8000be6:	4301      	orreq	r1, r0
 8000be8:	2000      	moveq	r0, #0
 8000bea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bee:	bf88      	it	hi
 8000bf0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bf4:	f63f aeaf 	bhi.w	8000956 <__aeabi_dmul+0xde>
 8000bf8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bfc:	bf04      	itt	eq
 8000bfe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c06:	f150 0000 	adcs.w	r0, r0, #0
 8000c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c1c:	bfc2      	ittt	gt
 8000c1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c26:	bd70      	popgt	{r4, r5, r6, pc}
 8000c28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2c:	f04f 0e00 	mov.w	lr, #0
 8000c30:	3c01      	subs	r4, #1
 8000c32:	e690      	b.n	8000956 <__aeabi_dmul+0xde>
 8000c34:	ea45 0e06 	orr.w	lr, r5, r6
 8000c38:	e68d      	b.n	8000956 <__aeabi_dmul+0xde>
 8000c3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c3e:	ea94 0f0c 	teq	r4, ip
 8000c42:	bf08      	it	eq
 8000c44:	ea95 0f0c 	teqeq	r5, ip
 8000c48:	f43f af3b 	beq.w	8000ac2 <__aeabi_dmul+0x24a>
 8000c4c:	ea94 0f0c 	teq	r4, ip
 8000c50:	d10a      	bne.n	8000c68 <__aeabi_ddiv+0x19c>
 8000c52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c56:	f47f af34 	bne.w	8000ac2 <__aeabi_dmul+0x24a>
 8000c5a:	ea95 0f0c 	teq	r5, ip
 8000c5e:	f47f af25 	bne.w	8000aac <__aeabi_dmul+0x234>
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	e72c      	b.n	8000ac2 <__aeabi_dmul+0x24a>
 8000c68:	ea95 0f0c 	teq	r5, ip
 8000c6c:	d106      	bne.n	8000c7c <__aeabi_ddiv+0x1b0>
 8000c6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c72:	f43f aefd 	beq.w	8000a70 <__aeabi_dmul+0x1f8>
 8000c76:	4610      	mov	r0, r2
 8000c78:	4619      	mov	r1, r3
 8000c7a:	e722      	b.n	8000ac2 <__aeabi_dmul+0x24a>
 8000c7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c86:	f47f aec5 	bne.w	8000a14 <__aeabi_dmul+0x19c>
 8000c8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c8e:	f47f af0d 	bne.w	8000aac <__aeabi_dmul+0x234>
 8000c92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c96:	f47f aeeb 	bne.w	8000a70 <__aeabi_dmul+0x1f8>
 8000c9a:	e712      	b.n	8000ac2 <__aeabi_dmul+0x24a>

08000c9c <__gedf2>:
 8000c9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca0:	e006      	b.n	8000cb0 <__cmpdf2+0x4>
 8000ca2:	bf00      	nop

08000ca4 <__ledf2>:
 8000ca4:	f04f 0c01 	mov.w	ip, #1
 8000ca8:	e002      	b.n	8000cb0 <__cmpdf2+0x4>
 8000caa:	bf00      	nop

08000cac <__cmpdf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc0:	bf18      	it	ne
 8000cc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cc6:	d01b      	beq.n	8000d00 <__cmpdf2+0x54>
 8000cc8:	b001      	add	sp, #4
 8000cca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cce:	bf0c      	ite	eq
 8000cd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cd4:	ea91 0f03 	teqne	r1, r3
 8000cd8:	bf02      	ittt	eq
 8000cda:	ea90 0f02 	teqeq	r0, r2
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	4770      	bxeq	lr
 8000ce2:	f110 0f00 	cmn.w	r0, #0
 8000ce6:	ea91 0f03 	teq	r1, r3
 8000cea:	bf58      	it	pl
 8000cec:	4299      	cmppl	r1, r3
 8000cee:	bf08      	it	eq
 8000cf0:	4290      	cmpeq	r0, r2
 8000cf2:	bf2c      	ite	cs
 8000cf4:	17d8      	asrcs	r0, r3, #31
 8000cf6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cfa:	f040 0001 	orr.w	r0, r0, #1
 8000cfe:	4770      	bx	lr
 8000d00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d08:	d102      	bne.n	8000d10 <__cmpdf2+0x64>
 8000d0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d0e:	d107      	bne.n	8000d20 <__cmpdf2+0x74>
 8000d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d18:	d1d6      	bne.n	8000cc8 <__cmpdf2+0x1c>
 8000d1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d1e:	d0d3      	beq.n	8000cc8 <__cmpdf2+0x1c>
 8000d20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_cdrcmple>:
 8000d28:	4684      	mov	ip, r0
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	468c      	mov	ip, r1
 8000d30:	4619      	mov	r1, r3
 8000d32:	4663      	mov	r3, ip
 8000d34:	e000      	b.n	8000d38 <__aeabi_cdcmpeq>
 8000d36:	bf00      	nop

08000d38 <__aeabi_cdcmpeq>:
 8000d38:	b501      	push	{r0, lr}
 8000d3a:	f7ff ffb7 	bl	8000cac <__cmpdf2>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	bf48      	it	mi
 8000d42:	f110 0f00 	cmnmi.w	r0, #0
 8000d46:	bd01      	pop	{r0, pc}

08000d48 <__aeabi_dcmpeq>:
 8000d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d4c:	f7ff fff4 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d50:	bf0c      	ite	eq
 8000d52:	2001      	moveq	r0, #1
 8000d54:	2000      	movne	r0, #0
 8000d56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5a:	bf00      	nop

08000d5c <__aeabi_dcmplt>:
 8000d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d60:	f7ff ffea 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d64:	bf34      	ite	cc
 8000d66:	2001      	movcc	r0, #1
 8000d68:	2000      	movcs	r0, #0
 8000d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6e:	bf00      	nop

08000d70 <__aeabi_dcmple>:
 8000d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d74:	f7ff ffe0 	bl	8000d38 <__aeabi_cdcmpeq>
 8000d78:	bf94      	ite	ls
 8000d7a:	2001      	movls	r0, #1
 8000d7c:	2000      	movhi	r0, #0
 8000d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d82:	bf00      	nop

08000d84 <__aeabi_dcmpge>:
 8000d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d88:	f7ff ffce 	bl	8000d28 <__aeabi_cdrcmple>
 8000d8c:	bf94      	ite	ls
 8000d8e:	2001      	movls	r0, #1
 8000d90:	2000      	movhi	r0, #0
 8000d92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d96:	bf00      	nop

08000d98 <__aeabi_dcmpgt>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff ffc4 	bl	8000d28 <__aeabi_cdrcmple>
 8000da0:	bf34      	ite	cc
 8000da2:	2001      	movcc	r0, #1
 8000da4:	2000      	movcs	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmpun>:
 8000dac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000db0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db4:	d102      	bne.n	8000dbc <__aeabi_dcmpun+0x10>
 8000db6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dba:	d10a      	bne.n	8000dd2 <__aeabi_dcmpun+0x26>
 8000dbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dc4:	d102      	bne.n	8000dcc <__aeabi_dcmpun+0x20>
 8000dc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dca:	d102      	bne.n	8000dd2 <__aeabi_dcmpun+0x26>
 8000dcc:	f04f 0000 	mov.w	r0, #0
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0001 	mov.w	r0, #1
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_d2iz>:
 8000dd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ddc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000de0:	d215      	bcs.n	8000e0e <__aeabi_d2iz+0x36>
 8000de2:	d511      	bpl.n	8000e08 <__aeabi_d2iz+0x30>
 8000de4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dec:	d912      	bls.n	8000e14 <__aeabi_d2iz+0x3c>
 8000dee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000e02:	bf18      	it	ne
 8000e04:	4240      	negne	r0, r0
 8000e06:	4770      	bx	lr
 8000e08:	f04f 0000 	mov.w	r0, #0
 8000e0c:	4770      	bx	lr
 8000e0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e12:	d105      	bne.n	8000e20 <__aeabi_d2iz+0x48>
 8000e14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e18:	bf08      	it	eq
 8000e1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bx	lr
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <__aeabi_d2uiz>:
 8000e28:	004a      	lsls	r2, r1, #1
 8000e2a:	d211      	bcs.n	8000e50 <__aeabi_d2uiz+0x28>
 8000e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e30:	d211      	bcs.n	8000e56 <__aeabi_d2uiz+0x2e>
 8000e32:	d50d      	bpl.n	8000e50 <__aeabi_d2uiz+0x28>
 8000e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e3c:	d40e      	bmi.n	8000e5c <__aeabi_d2uiz+0x34>
 8000e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e4e:	4770      	bx	lr
 8000e50:	f04f 0000 	mov.w	r0, #0
 8000e54:	4770      	bx	lr
 8000e56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e5a:	d102      	bne.n	8000e62 <__aeabi_d2uiz+0x3a>
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_d2f>:
 8000e68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e70:	bf24      	itt	cs
 8000e72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e7a:	d90d      	bls.n	8000e98 <__aeabi_d2f+0x30>
 8000e7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e90:	bf08      	it	eq
 8000e92:	f020 0001 	biceq.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e9c:	d121      	bne.n	8000ee2 <__aeabi_d2f+0x7a>
 8000e9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ea2:	bfbc      	itt	lt
 8000ea4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ea8:	4770      	bxlt	lr
 8000eaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000eae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000eb2:	f1c2 0218 	rsb	r2, r2, #24
 8000eb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000eba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ebe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ec2:	bf18      	it	ne
 8000ec4:	f040 0001 	orrne.w	r0, r0, #1
 8000ec8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ecc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ed0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ed4:	ea40 000c 	orr.w	r0, r0, ip
 8000ed8:	fa23 f302 	lsr.w	r3, r3, r2
 8000edc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ee0:	e7cc      	b.n	8000e7c <__aeabi_d2f+0x14>
 8000ee2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ee6:	d107      	bne.n	8000ef8 <__aeabi_d2f+0x90>
 8000ee8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000eec:	bf1e      	ittt	ne
 8000eee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ef2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ef6:	4770      	bxne	lr
 8000ef8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000efc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_uldivmod>:
 8000f08:	b953      	cbnz	r3, 8000f20 <__aeabi_uldivmod+0x18>
 8000f0a:	b94a      	cbnz	r2, 8000f20 <__aeabi_uldivmod+0x18>
 8000f0c:	2900      	cmp	r1, #0
 8000f0e:	bf08      	it	eq
 8000f10:	2800      	cmpeq	r0, #0
 8000f12:	bf1c      	itt	ne
 8000f14:	f04f 31ff 	movne.w	r1, #4294967295
 8000f18:	f04f 30ff 	movne.w	r0, #4294967295
 8000f1c:	f000 b9aa 	b.w	8001274 <__aeabi_idiv0>
 8000f20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f28:	f000 f83c 	bl	8000fa4 <__udivmoddi4>
 8000f2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	f7ff ff0b 	bl	8000d5c <__aeabi_dcmplt>
 8000f46:	b928      	cbnz	r0, 8000f54 <__aeabi_d2lz+0x1c>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b80a 	b.w	8000f68 <__aeabi_d2ulz>
 8000f54:	4620      	mov	r0, r4
 8000f56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f5a:	f000 f805 	bl	8000f68 <__aeabi_d2ulz>
 8000f5e:	4240      	negs	r0, r0
 8000f60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop

08000f68 <__aeabi_d2ulz>:
 8000f68:	b5d0      	push	{r4, r6, r7, lr}
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__aeabi_d2ulz+0x34>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4606      	mov	r6, r0
 8000f70:	460f      	mov	r7, r1
 8000f72:	f7ff fc81 	bl	8000878 <__aeabi_dmul>
 8000f76:	f7ff ff57 	bl	8000e28 <__aeabi_d2uiz>
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	f7ff fc02 	bl	8000784 <__aeabi_ui2d>
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <__aeabi_d2ulz+0x38>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	f7ff fc78 	bl	8000878 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	4639      	mov	r1, r7
 8000f90:	f7ff faba 	bl	8000508 <__aeabi_dsub>
 8000f94:	f7ff ff48 	bl	8000e28 <__aeabi_d2uiz>
 8000f98:	4621      	mov	r1, r4
 8000f9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f9c:	3df00000 	.word	0x3df00000
 8000fa0:	41f00000 	.word	0x41f00000

08000fa4 <__udivmoddi4>:
 8000fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa8:	9d08      	ldr	r5, [sp, #32]
 8000faa:	4604      	mov	r4, r0
 8000fac:	468e      	mov	lr, r1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d14d      	bne.n	800104e <__udivmoddi4+0xaa>
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	d969      	bls.n	800108c <__udivmoddi4+0xe8>
 8000fb8:	fab2 f282 	clz	r2, r2
 8000fbc:	b152      	cbz	r2, 8000fd4 <__udivmoddi4+0x30>
 8000fbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000fc2:	f1c2 0120 	rsb	r1, r2, #32
 8000fc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000fca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fce:	ea41 0e03 	orr.w	lr, r1, r3
 8000fd2:	4094      	lsls	r4, r2
 8000fd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd8:	0c21      	lsrs	r1, r4, #16
 8000fda:	fbbe f6f8 	udiv	r6, lr, r8
 8000fde:	fa1f f78c 	uxth.w	r7, ip
 8000fe2:	fb08 e316 	mls	r3, r8, r6, lr
 8000fe6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000fea:	fb06 f107 	mul.w	r1, r6, r7
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d90a      	bls.n	8001008 <__udivmoddi4+0x64>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ffa:	f080 811f 	bcs.w	800123c <__udivmoddi4+0x298>
 8000ffe:	4299      	cmp	r1, r3
 8001000:	f240 811c 	bls.w	800123c <__udivmoddi4+0x298>
 8001004:	3e02      	subs	r6, #2
 8001006:	4463      	add	r3, ip
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	b2a4      	uxth	r4, r4
 800100c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001010:	fb08 3310 	mls	r3, r8, r0, r3
 8001014:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001018:	fb00 f707 	mul.w	r7, r0, r7
 800101c:	42a7      	cmp	r7, r4
 800101e:	d90a      	bls.n	8001036 <__udivmoddi4+0x92>
 8001020:	eb1c 0404 	adds.w	r4, ip, r4
 8001024:	f100 33ff 	add.w	r3, r0, #4294967295
 8001028:	f080 810a 	bcs.w	8001240 <__udivmoddi4+0x29c>
 800102c:	42a7      	cmp	r7, r4
 800102e:	f240 8107 	bls.w	8001240 <__udivmoddi4+0x29c>
 8001032:	4464      	add	r4, ip
 8001034:	3802      	subs	r0, #2
 8001036:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800103a:	1be4      	subs	r4, r4, r7
 800103c:	2600      	movs	r6, #0
 800103e:	b11d      	cbz	r5, 8001048 <__udivmoddi4+0xa4>
 8001040:	40d4      	lsrs	r4, r2
 8001042:	2300      	movs	r3, #0
 8001044:	e9c5 4300 	strd	r4, r3, [r5]
 8001048:	4631      	mov	r1, r6
 800104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104e:	428b      	cmp	r3, r1
 8001050:	d909      	bls.n	8001066 <__udivmoddi4+0xc2>
 8001052:	2d00      	cmp	r5, #0
 8001054:	f000 80ef 	beq.w	8001236 <__udivmoddi4+0x292>
 8001058:	2600      	movs	r6, #0
 800105a:	e9c5 0100 	strd	r0, r1, [r5]
 800105e:	4630      	mov	r0, r6
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	fab3 f683 	clz	r6, r3
 800106a:	2e00      	cmp	r6, #0
 800106c:	d14a      	bne.n	8001104 <__udivmoddi4+0x160>
 800106e:	428b      	cmp	r3, r1
 8001070:	d302      	bcc.n	8001078 <__udivmoddi4+0xd4>
 8001072:	4282      	cmp	r2, r0
 8001074:	f200 80f9 	bhi.w	800126a <__udivmoddi4+0x2c6>
 8001078:	1a84      	subs	r4, r0, r2
 800107a:	eb61 0303 	sbc.w	r3, r1, r3
 800107e:	2001      	movs	r0, #1
 8001080:	469e      	mov	lr, r3
 8001082:	2d00      	cmp	r5, #0
 8001084:	d0e0      	beq.n	8001048 <__udivmoddi4+0xa4>
 8001086:	e9c5 4e00 	strd	r4, lr, [r5]
 800108a:	e7dd      	b.n	8001048 <__udivmoddi4+0xa4>
 800108c:	b902      	cbnz	r2, 8001090 <__udivmoddi4+0xec>
 800108e:	deff      	udf	#255	; 0xff
 8001090:	fab2 f282 	clz	r2, r2
 8001094:	2a00      	cmp	r2, #0
 8001096:	f040 8092 	bne.w	80011be <__udivmoddi4+0x21a>
 800109a:	eba1 010c 	sub.w	r1, r1, ip
 800109e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010a2:	fa1f fe8c 	uxth.w	lr, ip
 80010a6:	2601      	movs	r6, #1
 80010a8:	0c20      	lsrs	r0, r4, #16
 80010aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ae:	fb07 1113 	mls	r1, r7, r3, r1
 80010b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010b6:	fb0e f003 	mul.w	r0, lr, r3
 80010ba:	4288      	cmp	r0, r1
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x12c>
 80010be:	eb1c 0101 	adds.w	r1, ip, r1
 80010c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x12a>
 80010c8:	4288      	cmp	r0, r1
 80010ca:	f200 80cb 	bhi.w	8001264 <__udivmoddi4+0x2c0>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1a09      	subs	r1, r1, r0
 80010d2:	b2a4      	uxth	r4, r4
 80010d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80010d8:	fb07 1110 	mls	r1, r7, r0, r1
 80010dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010e0:	fb0e fe00 	mul.w	lr, lr, r0
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	d908      	bls.n	80010fa <__udivmoddi4+0x156>
 80010e8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f0:	d202      	bcs.n	80010f8 <__udivmoddi4+0x154>
 80010f2:	45a6      	cmp	lr, r4
 80010f4:	f200 80bb 	bhi.w	800126e <__udivmoddi4+0x2ca>
 80010f8:	4608      	mov	r0, r1
 80010fa:	eba4 040e 	sub.w	r4, r4, lr
 80010fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x9a>
 8001104:	f1c6 0720 	rsb	r7, r6, #32
 8001108:	40b3      	lsls	r3, r6
 800110a:	fa22 fc07 	lsr.w	ip, r2, r7
 800110e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001112:	fa20 f407 	lsr.w	r4, r0, r7
 8001116:	fa01 f306 	lsl.w	r3, r1, r6
 800111a:	431c      	orrs	r4, r3
 800111c:	40f9      	lsrs	r1, r7
 800111e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001122:	fa00 f306 	lsl.w	r3, r0, r6
 8001126:	fbb1 f8f9 	udiv	r8, r1, r9
 800112a:	0c20      	lsrs	r0, r4, #16
 800112c:	fa1f fe8c 	uxth.w	lr, ip
 8001130:	fb09 1118 	mls	r1, r9, r8, r1
 8001134:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001138:	fb08 f00e 	mul.w	r0, r8, lr
 800113c:	4288      	cmp	r0, r1
 800113e:	fa02 f206 	lsl.w	r2, r2, r6
 8001142:	d90b      	bls.n	800115c <__udivmoddi4+0x1b8>
 8001144:	eb1c 0101 	adds.w	r1, ip, r1
 8001148:	f108 3aff 	add.w	sl, r8, #4294967295
 800114c:	f080 8088 	bcs.w	8001260 <__udivmoddi4+0x2bc>
 8001150:	4288      	cmp	r0, r1
 8001152:	f240 8085 	bls.w	8001260 <__udivmoddi4+0x2bc>
 8001156:	f1a8 0802 	sub.w	r8, r8, #2
 800115a:	4461      	add	r1, ip
 800115c:	1a09      	subs	r1, r1, r0
 800115e:	b2a4      	uxth	r4, r4
 8001160:	fbb1 f0f9 	udiv	r0, r1, r9
 8001164:	fb09 1110 	mls	r1, r9, r0, r1
 8001168:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800116c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001170:	458e      	cmp	lr, r1
 8001172:	d908      	bls.n	8001186 <__udivmoddi4+0x1e2>
 8001174:	eb1c 0101 	adds.w	r1, ip, r1
 8001178:	f100 34ff 	add.w	r4, r0, #4294967295
 800117c:	d26c      	bcs.n	8001258 <__udivmoddi4+0x2b4>
 800117e:	458e      	cmp	lr, r1
 8001180:	d96a      	bls.n	8001258 <__udivmoddi4+0x2b4>
 8001182:	3802      	subs	r0, #2
 8001184:	4461      	add	r1, ip
 8001186:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800118a:	fba0 9402 	umull	r9, r4, r0, r2
 800118e:	eba1 010e 	sub.w	r1, r1, lr
 8001192:	42a1      	cmp	r1, r4
 8001194:	46c8      	mov	r8, r9
 8001196:	46a6      	mov	lr, r4
 8001198:	d356      	bcc.n	8001248 <__udivmoddi4+0x2a4>
 800119a:	d053      	beq.n	8001244 <__udivmoddi4+0x2a0>
 800119c:	b15d      	cbz	r5, 80011b6 <__udivmoddi4+0x212>
 800119e:	ebb3 0208 	subs.w	r2, r3, r8
 80011a2:	eb61 010e 	sbc.w	r1, r1, lr
 80011a6:	fa01 f707 	lsl.w	r7, r1, r7
 80011aa:	fa22 f306 	lsr.w	r3, r2, r6
 80011ae:	40f1      	lsrs	r1, r6
 80011b0:	431f      	orrs	r7, r3
 80011b2:	e9c5 7100 	strd	r7, r1, [r5]
 80011b6:	2600      	movs	r6, #0
 80011b8:	4631      	mov	r1, r6
 80011ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011be:	f1c2 0320 	rsb	r3, r2, #32
 80011c2:	40d8      	lsrs	r0, r3
 80011c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c8:	fa21 f303 	lsr.w	r3, r1, r3
 80011cc:	4091      	lsls	r1, r2
 80011ce:	4301      	orrs	r1, r0
 80011d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d4:	fa1f fe8c 	uxth.w	lr, ip
 80011d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80011dc:	fb07 3610 	mls	r6, r7, r0, r3
 80011e0:	0c0b      	lsrs	r3, r1, #16
 80011e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011e6:	fb00 f60e 	mul.w	r6, r0, lr
 80011ea:	429e      	cmp	r6, r3
 80011ec:	fa04 f402 	lsl.w	r4, r4, r2
 80011f0:	d908      	bls.n	8001204 <__udivmoddi4+0x260>
 80011f2:	eb1c 0303 	adds.w	r3, ip, r3
 80011f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80011fa:	d22f      	bcs.n	800125c <__udivmoddi4+0x2b8>
 80011fc:	429e      	cmp	r6, r3
 80011fe:	d92d      	bls.n	800125c <__udivmoddi4+0x2b8>
 8001200:	3802      	subs	r0, #2
 8001202:	4463      	add	r3, ip
 8001204:	1b9b      	subs	r3, r3, r6
 8001206:	b289      	uxth	r1, r1
 8001208:	fbb3 f6f7 	udiv	r6, r3, r7
 800120c:	fb07 3316 	mls	r3, r7, r6, r3
 8001210:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001214:	fb06 f30e 	mul.w	r3, r6, lr
 8001218:	428b      	cmp	r3, r1
 800121a:	d908      	bls.n	800122e <__udivmoddi4+0x28a>
 800121c:	eb1c 0101 	adds.w	r1, ip, r1
 8001220:	f106 38ff 	add.w	r8, r6, #4294967295
 8001224:	d216      	bcs.n	8001254 <__udivmoddi4+0x2b0>
 8001226:	428b      	cmp	r3, r1
 8001228:	d914      	bls.n	8001254 <__udivmoddi4+0x2b0>
 800122a:	3e02      	subs	r6, #2
 800122c:	4461      	add	r1, ip
 800122e:	1ac9      	subs	r1, r1, r3
 8001230:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001234:	e738      	b.n	80010a8 <__udivmoddi4+0x104>
 8001236:	462e      	mov	r6, r5
 8001238:	4628      	mov	r0, r5
 800123a:	e705      	b.n	8001048 <__udivmoddi4+0xa4>
 800123c:	4606      	mov	r6, r0
 800123e:	e6e3      	b.n	8001008 <__udivmoddi4+0x64>
 8001240:	4618      	mov	r0, r3
 8001242:	e6f8      	b.n	8001036 <__udivmoddi4+0x92>
 8001244:	454b      	cmp	r3, r9
 8001246:	d2a9      	bcs.n	800119c <__udivmoddi4+0x1f8>
 8001248:	ebb9 0802 	subs.w	r8, r9, r2
 800124c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001250:	3801      	subs	r0, #1
 8001252:	e7a3      	b.n	800119c <__udivmoddi4+0x1f8>
 8001254:	4646      	mov	r6, r8
 8001256:	e7ea      	b.n	800122e <__udivmoddi4+0x28a>
 8001258:	4620      	mov	r0, r4
 800125a:	e794      	b.n	8001186 <__udivmoddi4+0x1e2>
 800125c:	4640      	mov	r0, r8
 800125e:	e7d1      	b.n	8001204 <__udivmoddi4+0x260>
 8001260:	46d0      	mov	r8, sl
 8001262:	e77b      	b.n	800115c <__udivmoddi4+0x1b8>
 8001264:	3b02      	subs	r3, #2
 8001266:	4461      	add	r1, ip
 8001268:	e732      	b.n	80010d0 <__udivmoddi4+0x12c>
 800126a:	4630      	mov	r0, r6
 800126c:	e709      	b.n	8001082 <__udivmoddi4+0xde>
 800126e:	4464      	add	r4, ip
 8001270:	3802      	subs	r0, #2
 8001272:	e742      	b.n	80010fa <__udivmoddi4+0x156>

08001274 <__aeabi_idiv0>:
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop

08001278 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001280:	2334      	movs	r3, #52	; 0x34
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <tx_application_define+0x34>)
 800128a:	4909      	ldr	r1, [pc, #36]	; (80012b0 <tx_application_define+0x38>)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <tx_application_define+0x3c>)
 800128e:	f004 fdb3 	bl	8005df8 <_txe_byte_pool_create>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <tx_application_define+0x3c>)
 800129a:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f80b 	bl	80012b8 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000208 	.word	0x20000208
 80012b0:	0800aa78 	.word	0x0800aa78
 80012b4:	20000608 	.word	0x20000608

080012b8 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af08      	add	r7, sp, #32
 80012be:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1,"my_First_trade",my_Thread_entry_1,0x1234,thread_stack1,THREAD_STACK_SIZE,
 80012c8:	23b0      	movs	r3, #176	; 0xb0
 80012ca:	9306      	str	r3, [sp, #24]
 80012cc:	2301      	movs	r3, #1
 80012ce:	9305      	str	r3, [sp, #20]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9304      	str	r3, [sp, #16]
 80012d4:	2303      	movs	r3, #3
 80012d6:	9303      	str	r3, [sp, #12]
 80012d8:	2303      	movs	r3, #3
 80012da:	9302      	str	r3, [sp, #8]
 80012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <App_ThreadX_Init+0x48>)
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	f241 2334 	movw	r3, #4660	; 0x1234
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <App_ThreadX_Init+0x4c>)
 80012ec:	4906      	ldr	r1, [pc, #24]	; (8001308 <App_ThreadX_Init+0x50>)
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <App_ThreadX_Init+0x54>)
 80012f0:	f004 fe22 	bl	8005f38 <_txe_thread_create>
     	  */
  (void)byte_pool;

  /* USER CODE END App_ThreadX_Init */

  return ret;
 80012f4:	68fb      	ldr	r3, [r7, #12]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000063c 	.word	0x2000063c
 8001304:	0800133d 	.word	0x0800133d
 8001308:	0800aa8c 	.word	0x0800aa8c
 800130c:	20000a3c 	.word	0x20000a3c

08001310 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */
  sprintf(HEADER2, "Init ThreadX");
 8001314:	4906      	ldr	r1, [pc, #24]	; (8001330 <MX_ThreadX_Init+0x20>)
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <MX_ThreadX_Init+0x24>)
 8001318:	f005 fdb2 	bl	8006e80 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	220e      	movs	r2, #14
 8001320:	4904      	ldr	r1, [pc, #16]	; (8001334 <MX_ThreadX_Init+0x24>)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_ThreadX_Init+0x28>)
 8001324:	f002 fe0b 	bl	8003f3e <HAL_UART_Transmit>
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001328:	f003 fae8 	bl	80048fc <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800aa9c 	.word	0x0800aa9c
 8001334:	20000aec 	.word	0x20000aec
 8001338:	20000c88 	.word	0x20000c88

0800133c <my_Thread_entry_1>:

/* USER CODE BEGIN 1 */
void my_Thread_entry_1(ULONG initial_input)
{
 800133c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001340:	b08d      	sub	sp, #52	; 0x34
 8001342:	af08      	add	r7, sp, #32
 8001344:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if(TickSerial == true)
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <my_Thread_entry_1+0xbc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0fb      	beq.n	8001346 <my_Thread_entry_1+0xa>
					{
					  TickSerial = false;
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <my_Thread_entry_1+0xbc>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
					  if (SerialTX >= ThransholdSerialTX)
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <my_Thread_entry_1+0xc0>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b29      	ldr	r3, [pc, #164]	; (8001400 <my_Thread_entry_1+0xc4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d308      	bcc.n	8001372 <my_Thread_entry_1+0x36>
					  {
						  SerialTX = 0;
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <my_Thread_entry_1+0xc0>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
						  SerialTX++;
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <my_Thread_entry_1+0xc0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <my_Thread_entry_1+0xc0>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e004      	b.n	800137c <my_Thread_entry_1+0x40>
					  }
					  else
					  {
						  SerialTX++;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <my_Thread_entry_1+0xc0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <my_Thread_entry_1+0xc0>)
 800137a:	6013      	str	r3, [r2, #0]
					  }
						  sprintf(MSG,"Px,%d;%d;%d;%.3f;%.3f;%.3f;Sx",SerialTX,Counter,EncoderCount,
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <my_Thread_entry_1+0xc0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <my_Thread_entry_1+0xc8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	6079      	str	r1, [r7, #4]
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <my_Thread_entry_1+0xcc>)
 800138a:	681e      	ldr	r6, [r3, #0]
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <my_Thread_entry_1+0xd0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fa19 	bl	80007c8 <__aeabi_f2d>
 8001396:	4604      	mov	r4, r0
 8001398:	460d      	mov	r5, r1
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <my_Thread_entry_1+0xd4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fa12 	bl	80007c8 <__aeabi_f2d>
 80013a4:	4680      	mov	r8, r0
 80013a6:	4689      	mov	r9, r1
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <my_Thread_entry_1+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fa0b 	bl	80007c8 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013ba:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80013be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80013c2:	9600      	str	r6, [sp, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4913      	ldr	r1, [pc, #76]	; (8001418 <my_Thread_entry_1+0xdc>)
 80013ca:	4814      	ldr	r0, [pc, #80]	; (800141c <my_Thread_entry_1+0xe0>)
 80013cc:	f005 fd58 	bl	8006e80 <siprintf>
								  ActualPosition,ActualSpeedRPM,ActualSpeed);
						  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 80013d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d4:	2256      	movs	r2, #86	; 0x56
 80013d6:	4911      	ldr	r1, [pc, #68]	; (800141c <my_Thread_entry_1+0xe0>)
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <my_Thread_entry_1+0xe4>)
 80013da:	f002 fdb0 	bl	8003f3e <HAL_UART_Transmit>
						  sprintf(CR,"\r\n");   // sprintf(CR,"\r\n"); 	//Ritorno a capo e a destra
 80013de:	4911      	ldr	r1, [pc, #68]	; (8001424 <my_Thread_entry_1+0xe8>)
 80013e0:	4811      	ldr	r0, [pc, #68]	; (8001428 <my_Thread_entry_1+0xec>)
 80013e2:	f005 fd4d 	bl	8006e80 <siprintf>
						  HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);
 80013e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ea:	2204      	movs	r2, #4
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <my_Thread_entry_1+0xec>)
 80013ee:	480c      	ldr	r0, [pc, #48]	; (8001420 <my_Thread_entry_1+0xe4>)
 80013f0:	f002 fda5 	bl	8003f3e <HAL_UART_Transmit>
		if(TickSerial == true)
 80013f4:	e7a7      	b.n	8001346 <my_Thread_entry_1+0xa>
 80013f6:	bf00      	nop
 80013f8:	20000d00 	.word	0x20000d00
 80013fc:	20000b64 	.word	0x20000b64
 8001400:	20000000 	.word	0x20000000
 8001404:	20000b58 	.word	0x20000b58
 8001408:	20000d04 	.word	0x20000d04
 800140c:	20000d4c 	.word	0x20000d4c
 8001410:	20000d50 	.word	0x20000d50
 8001414:	20000d54 	.word	0x20000d54
 8001418:	0800aaac 	.word	0x0800aaac
 800141c:	20000afc 	.word	0x20000afc
 8001420:	20000c88 	.word	0x20000c88
 8001424:	0800aacc 	.word	0x0800aacc
 8001428:	20000b54 	.word	0x20000b54

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f000 ff80 	bl	8002334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001434:	f000 f822 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001438:	f000 f9c6 	bl	80017c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800143c:	f000 f99a 	bl	8001774 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001440:	f000 f912 	bl	8001668 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001444:	f000 f948 	bl	80016d8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001448:	f000 f96e 	bl	8001728 <MX_TIM11_Init>
  MX_TIM1_Init();
 800144c:	f000 f8b8 	bl	80015c0 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001450:	f000 f882 	bl	8001558 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized Serial Comunication \n");
 8001454:	4906      	ldr	r1, [pc, #24]	; (8001470 <main+0x44>)
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <main+0x48>)
 8001458:	f005 fd12 	bl	8006e80 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	2223      	movs	r2, #35	; 0x23
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <main+0x48>)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <main+0x4c>)
 8001464:	f002 fd6b 	bl	8003f3e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001468:	f7ff ff52 	bl	8001310 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800146c:	e7fe      	b.n	800146c <main+0x40>
 800146e:	bf00      	nop
 8001470:	0800aad0 	.word	0x0800aad0
 8001474:	20000ccc 	.word	0x20000ccc
 8001478:	20000c88 	.word	0x20000c88

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2234      	movs	r2, #52	; 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f004 fe70 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <SystemClock_Config+0xd4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <SystemClock_Config+0xd4>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <SystemClock_Config+0xd4>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <SystemClock_Config+0xd8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <SystemClock_Config+0xd8>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <SystemClock_Config+0xd8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f0:	2310      	movs	r3, #16
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fdaa 	bl	8003064 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001516:	f000 fa49 	bl	80019ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fa18 	bl	800296c <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001542:	f000 fa33 	bl	80019ac <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3750      	adds	r7, #80	; 0x50
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2006      	movs	r0, #6
 8001562:	f000 ffe1 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001566:	2006      	movs	r0, #6
 8001568:	f000 fffa 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2007      	movs	r0, #7
 8001572:	f000 ffd9 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001576:	2007      	movs	r0, #7
 8001578:	f000 fff2 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2019      	movs	r0, #25
 8001582:	f000 ffd1 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001586:	2019      	movs	r0, #25
 8001588:	f000 ffea 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	201a      	movs	r0, #26
 8001592:	f000 ffc9 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001596:	201a      	movs	r0, #26
 8001598:	f000 ffe2 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2028      	movs	r0, #40	; 0x28
 80015a2:	f000 ffc1 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015a6:	2028      	movs	r0, #40	; 0x28
 80015a8:	f000 ffda 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2037      	movs	r0, #55	; 0x37
 80015b2:	f000 ffb9 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015b6:	2037      	movs	r0, #55	; 0x37
 80015b8:	f000 ffd2 	bl	8002560 <HAL_NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	463b      	mov	r3, r7
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_TIM1_Init+0xa4>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015e4:	2229      	movs	r2, #41	; 0x29
 80015e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM1_Init+0xa0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_TIM1_Init+0xa0>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <MX_TIM1_Init+0xa0>)
 800160a:	f001 ffc9 	bl	80035a0 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001614:	f000 f9ca 	bl	80019ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <MX_TIM1_Init+0xa0>)
 8001626:	f002 f983 	bl	8003930 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001630:	f000 f9bc 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM1_Init+0xa0>)
 8001642:	f002 fb9f 	bl	8003d84 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800164c:	f000 f9ae 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Start Timer
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM1_Init+0xa0>)
 8001652:	f001 fff5 	bl	8003640 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000b68 	.word	0x20000b68
 8001664:	40010000 	.word	0x40010000

08001668 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_TIM7_Init+0x68>)
 8001678:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <MX_TIM7_Init+0x6c>)
 800167a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_TIM7_Init+0x68>)
 800167e:	2201      	movs	r2, #1
 8001680:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_TIM7_Init+0x68>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2099;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_TIM7_Init+0x68>)
 800168a:	f640 0233 	movw	r2, #2099	; 0x833
 800168e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_TIM7_Init+0x68>)
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_TIM7_Init+0x68>)
 8001698:	f001 ff82 	bl	80035a0 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80016a2:	f000 f983 	bl	80019ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM7_Init+0x68>)
 80016b4:	f002 fb66 	bl	8003d84 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80016be:	f000 f975 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM7_Init+0x68>)
 80016c4:	f001 ffbc 	bl	8003640 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000bb0 	.word	0x20000bb0
 80016d4:	40001400 	.word	0x40001400

080016d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_TIM10_Init+0x48>)
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <MX_TIM10_Init+0x4c>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000;
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_TIM10_Init+0x48>)
 80016e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <MX_TIM10_Init+0x48>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 839;
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_TIM10_Init+0x48>)
 80016f2:	f240 3247 	movw	r2, #839	; 0x347
 80016f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_TIM10_Init+0x48>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_TIM10_Init+0x48>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_TIM10_Init+0x48>)
 8001706:	f001 ff4b 	bl	80035a0 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001710:	f000 f94c 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  HAL_TIM_Base_Start_IT(&htim10); // Start Timer
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <MX_TIM10_Init+0x48>)
 8001716:	f001 ff93 	bl	8003640 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000bf8 	.word	0x20000bf8
 8001724:	40014400 	.word	0x40014400

08001728 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_TIM11_Init+0x44>)
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <MX_TIM11_Init+0x48>)
 8001730:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1000;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_TIM11_Init+0x44>)
 8001734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001738:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_TIM11_Init+0x44>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 83;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_TIM11_Init+0x44>)
 8001742:	2253      	movs	r2, #83	; 0x53
 8001744:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_TIM11_Init+0x44>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_TIM11_Init+0x44>)
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_TIM11_Init+0x44>)
 8001754:	f001 ff24 	bl	80035a0 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800175e:	f000 f925 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  HAL_TIM_Base_Start_IT(&htim11); // Start Timer
 8001762:	4802      	ldr	r0, [pc, #8]	; (800176c <MX_TIM11_Init+0x44>)
 8001764:	f001 ff6c 	bl	8003640 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM11_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000c40 	.word	0x20000c40
 8001770:	40014800 	.word	0x40014800

08001774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <MX_USART2_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART2_UART_Init+0x4c>)
 80017ac:	f002 fb7a 	bl	8003ea4 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 f8f9 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000c88 	.word	0x20000c88
 80017c4:	40004400 	.word	0x40004400

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <MX_GPIO_Init+0x104>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a39      	ldr	r2, [pc, #228]	; (80018cc <MX_GPIO_Init+0x104>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <MX_GPIO_Init+0x104>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <MX_GPIO_Init+0x104>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <MX_GPIO_Init+0x104>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <MX_GPIO_Init+0x104>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <MX_GPIO_Init+0x104>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <MX_GPIO_Init+0x104>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <MX_GPIO_Init+0x104>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <MX_GPIO_Init+0x104>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <MX_GPIO_Init+0x104>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_GPIO_Init+0x104>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2120      	movs	r1, #32
 8001852:	481f      	ldr	r0, [pc, #124]	; (80018d0 <MX_GPIO_Init+0x108>)
 8001854:	f001 f83e 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <MX_GPIO_Init+0x10c>)
 8001870:	f000 fe84 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direction_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direction_Pin;
 8001874:	2303      	movs	r3, #3
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001878:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4811      	ldr	r0, [pc, #68]	; (80018d0 <MX_GPIO_Init+0x108>)
 800188a:	f000 fe77 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 800188e:	2320      	movs	r3, #32
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <MX_GPIO_Init+0x108>)
 80018a6:	f000 fe69 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Index_Pin */
  GPIO_InitStruct.Pin = Encoder_Index_Pin;
 80018aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder_Index_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_GPIO_Init+0x108>)
 80018c0:	f000 fe5c 	bl	800257c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020800 	.word	0x40020800

080018d8 <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 80018d8:	b598      	push	{r3, r4, r7, lr}
 80018da:	af00      	add	r7, sp, #0
		return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direction_Pin) << 1)
 80018dc:	2102      	movs	r1, #2
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <rot_get_state+0x28>)
 80018e0:	f000 ffe0 	bl	80028a4 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	005b      	lsls	r3, r3, #1
	                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 80018e8:	b25c      	sxtb	r4, r3
 80018ea:	2101      	movs	r1, #1
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <rot_get_state+0x28>)
 80018ee:	f000 ffd9 	bl	80028a4 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4323      	orrs	r3, r4
 80018f8:	b25b      	sxtb	r3, r3
		return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direction_Pin) << 1)
 80018fa:	b2db      	uxtb	r3, r3
	}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd98      	pop	{r3, r4, r7, pc}
 8001900:	40020000 	.word	0x40020000

08001904 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direction_Pin) {
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d002      	beq.n	800191a <HAL_GPIO_EXTI_Callback+0x16>
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d10e      	bne.n	8001938 <HAL_GPIO_EXTI_Callback+0x34>
			rot_new_state = rot_get_state();
 800191a:	f7ff ffdd 	bl	80018d8 <rot_get_state>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001924:	701a      	strb	r2, [r3, #0]
			EncoderFeadBack(rot_old_state,rot_new_state);
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <HAL_GPIO_EXTI_Callback+0x40>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_GPIO_EXTI_Callback+0x3c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f000 f890 	bl	8001a58 <EncoderFeadBack>
		}
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000d08 	.word	0x20000d08
 8001944:	20000d09 	.word	0x20000d09

08001948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d102      	bne.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800195a:	f000 fd0d 	bl	8002378 <HAL_IncTick>
  }
  else if (htim->Instance == TIM11) {
    DiagnosticMotor();
    }
  /* USER CODE END Callback 1 */
}
 800195e:	e017      	b.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM7) {
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d102      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0x28>
	Motion();
 800196a:	f000 f835 	bl	80019d8 <Motion>
}
 800196e:	e00f      	b.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM10) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d103      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x3a>
  	TickSerial = true;
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
}
 8001980:	e006      	b.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if (htim->Instance == TIM11) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x48>
    DiagnosticMotor();
 800198c:	f000 f856 	bl	8001a3c <DiagnosticMotor>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40001000 	.word	0x40001000
 800199c:	40001400 	.word	0x40001400
 80019a0:	40014400 	.word	0x40014400
 80019a4:	20000d00 	.word	0x20000d00
 80019a8:	40014800 	.word	0x40014800

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(HEADER4, "Inside TradeMASTER");
 80019b4:	4905      	ldr	r1, [pc, #20]	; (80019cc <Error_Handler+0x20>)
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <Error_Handler+0x24>)
 80019b8:	f005 fa62 	bl	8006e80 <siprintf>
	  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 80019bc:	2364      	movs	r3, #100	; 0x64
 80019be:	2210      	movs	r2, #16
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <Error_Handler+0x24>)
 80019c2:	4804      	ldr	r0, [pc, #16]	; (80019d4 <Error_Handler+0x28>)
 80019c4:	f002 fabb 	bl	8003f3e <HAL_UART_Transmit>
  {
 80019c8:	e7f4      	b.n	80019b4 <Error_Handler+0x8>
 80019ca:	bf00      	nop
 80019cc:	0800aaf4 	.word	0x0800aaf4
 80019d0:	20000cf0 	.word	0x20000cf0
 80019d4:	20000c88 	.word	0x20000c88

080019d8 <Motion>:
float ActualSpeedRPM = 0;
float ActualSpeed = 0;


void Motion(void)      // THIS VOID RUN AT 20Khz
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	  Counter++;
 80019dc:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <Motion+0x40>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <Motion+0x40>)
 80019e4:	6013      	str	r3, [r2, #0]
	  if(TickSerial == true)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <Motion+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <Motion+0x1e>
	  {
		  CouterSerial = Counter;
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <Motion+0x40>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <Motion+0x48>)
 80019f4:	6013      	str	r3, [r2, #0]
	  }

	  //--------------------GET SENSOR VALUES------------------------------

	  ActualPosition = KinematicPositionUnit;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <Motion+0x4c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <Motion+0x50>)
 80019fc:	6013      	str	r3, [r2, #0]
	  ActualSpeedRPM = EncoderSpeedRPM;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <Motion+0x54>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <Motion+0x58>)
 8001a04:	6013      	str	r3, [r2, #0]
	  ActualSpeed = EncoderSpeedUnit;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <Motion+0x5c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <Motion+0x60>)
 8001a0c:	6013      	str	r3, [r2, #0]


}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	20000b58 	.word	0x20000b58
 8001a1c:	20000d00 	.word	0x20000d00
 8001a20:	20000b5c 	.word	0x20000b5c
 8001a24:	20000d0c 	.word	0x20000d0c
 8001a28:	20000d4c 	.word	0x20000d4c
 8001a2c:	20000d14 	.word	0x20000d14
 8001a30:	20000d50 	.word	0x20000d50
 8001a34:	20000d18 	.word	0x20000d18
 8001a38:	20000d54 	.word	0x20000d54

08001a3c <DiagnosticMotor>:
void DiagnosticMotor(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	  CounterDiag++;
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <DiagnosticMotor+0x18>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <DiagnosticMotor+0x18>)
 8001a48:	6013      	str	r3, [r2, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000b60 	.word	0x20000b60

08001a58 <EncoderFeadBack>:

void EncoderFeadBack (rot_old_state, rot_new_state)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d108      	bne.n	8001a7a <EncoderFeadBack+0x22>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d105      	bne.n	8001a7a <EncoderFeadBack+0x22>
			EncoderCount++;
 8001a6e:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <EncoderFeadBack+0xec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a33      	ldr	r2, [pc, #204]	; (8001b44 <EncoderFeadBack+0xec>)
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e052      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d108      	bne.n	8001a92 <EncoderFeadBack+0x3a>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <EncoderFeadBack+0x3a>
			EncoderCount++;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <EncoderFeadBack+0xec>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a2d      	ldr	r2, [pc, #180]	; (8001b44 <EncoderFeadBack+0xec>)
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e046      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d108      	bne.n	8001aaa <EncoderFeadBack+0x52>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <EncoderFeadBack+0x52>
			EncoderCount++;
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <EncoderFeadBack+0xec>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	4a27      	ldr	r2, [pc, #156]	; (8001b44 <EncoderFeadBack+0xec>)
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e03a      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <EncoderFeadBack+0x6a>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d105      	bne.n	8001ac2 <EncoderFeadBack+0x6a>
			EncoderCount++;
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <EncoderFeadBack+0xec>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <EncoderFeadBack+0xec>)
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	e02e      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d108      	bne.n	8001ada <EncoderFeadBack+0x82>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d105      	bne.n	8001ada <EncoderFeadBack+0x82>
			EncoderCount--;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <EncoderFeadBack+0xec>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <EncoderFeadBack+0xec>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e022      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <EncoderFeadBack+0x9a>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <EncoderFeadBack+0x9a>
			EncoderCount--;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <EncoderFeadBack+0xec>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <EncoderFeadBack+0xec>)
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e016      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d108      	bne.n	8001b0a <EncoderFeadBack+0xb2>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d105      	bne.n	8001b0a <EncoderFeadBack+0xb2>
			EncoderCount--;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <EncoderFeadBack+0xec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <EncoderFeadBack+0xec>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e00a      	b.n	8001b20 <EncoderFeadBack+0xc8>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d107      	bne.n	8001b20 <EncoderFeadBack+0xc8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d104      	bne.n	8001b20 <EncoderFeadBack+0xc8>
			EncoderCount--;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <EncoderFeadBack+0xec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <EncoderFeadBack+0xec>)
 8001b1e:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	607b      	str	r3, [r7, #4]
		Calculate_Rotation(EncoderPulse,RevoluctionFactor,EncoderCount);
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <EncoderFeadBack+0xf0>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <EncoderFeadBack+0xf4>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <EncoderFeadBack+0xec>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f000 f80b 	bl	8001b50 <Calculate_Rotation>
	}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000d04 	.word	0x20000d04
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	20000006 	.word	0x20000006

08001b50 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet,uint16_t EncoderCountSet)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	80bb      	strh	r3, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	807b      	strh	r3, [r7, #2]
	EncoderPosition = EncoderCountSet/4.0;   // Single Event Encoder 1*4 in Single Counter
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fe1d 	bl	80007a4 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b86      	ldr	r3, [pc, #536]	; (8001d88 <Calculate_Rotation+0x238>)
 8001b70:	f7fe ffac 	bl	8000acc <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f92c 	bl	8000dd8 <__aeabi_d2iz>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a82      	ldr	r2, [pc, #520]	; (8001d8c <Calculate_Rotation+0x23c>)
 8001b84:	6013      	str	r3, [r2, #0]
	EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 8001b86:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <Calculate_Rotation+0x23c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <Calculate_Rotation+0x240>)
 8001b94:	edc3 7a00 	vstr	s15, [r3]
	PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 8001b98:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <Calculate_Rotation+0x240>)
 8001b9a:	edd3 6a00 	vldr	s13, [r3]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bac:	4b79      	ldr	r3, [pc, #484]	; (8001d94 <Calculate_Rotation+0x244>)
 8001bae:	edc3 7a00 	vstr	s15, [r3]
	KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <Calculate_Rotation+0x244>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc6:	4b74      	ldr	r3, [pc, #464]	; (8001d98 <Calculate_Rotation+0x248>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]

	TM1_Currentvalue = __HAL_TIM_GET_COUNTER(&htim1); // Get current time (microseconds)
 8001bcc:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <Calculate_Rotation+0x24c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <Calculate_Rotation+0x250>)
 8001bd6:	801a      	strh	r2, [r3, #0]

	if(TM1_Currentvalue >= TM1_OldValue)
 8001bd8:	4b71      	ldr	r3, [pc, #452]	; (8001da0 <Calculate_Rotation+0x250>)
 8001bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b70      	ldr	r3, [pc, #448]	; (8001da4 <Calculate_Rotation+0x254>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f0c0 80c0 	bcc.w	8001d6a <Calculate_Rotation+0x21a>
		{
		TM1_DiffCaunter = (TM1_Currentvalue - TM1_OldValue); // Calculate time from count to count
 8001bea:	4b6d      	ldr	r3, [pc, #436]	; (8001da0 <Calculate_Rotation+0x250>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <Calculate_Rotation+0x254>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <Calculate_Rotation+0x258>)
 8001bfa:	6013      	str	r3, [r2, #0]
	if (FilterSpeedEnable == 1)  //  CutOff Low-Pass Filter
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	; (8001dac <Calculate_Rotation+0x25c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d16c      	bne.n	8001cde <Calculate_Rotation+0x18e>
	{
		//GetConstantFilter();        DA INSERIRE //////////////////////////////////////////////////////////
		EncoderSpeedRPSToFiler = ((1000000.0/TM1_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <Calculate_Rotation+0x258>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fdbb 	bl	8000784 <__aeabi_ui2d>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	a15b      	add	r1, pc, #364	; (adr r1, 8001d80 <Calculate_Rotation+0x230>)
 8001c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c18:	f7fe ff58 	bl	8000acc <__aeabi_ddiv>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	461d      	mov	r5, r3
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fdbb 	bl	80007a4 <__aeabi_i2d>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe ff49 	bl	8000acc <__aeabi_ddiv>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7ff f911 	bl	8000e68 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a59      	ldr	r2, [pc, #356]	; (8001db0 <Calculate_Rotation+0x260>)
 8001c4a:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPS = ((b_i*RPSSpeedFilter) + (a_i*EncoderSpeedRPSToFiler) + (a_i*RPSSpeedFilterPrev));
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <Calculate_Rotation+0x264>)
 8001c4e:	ed93 7a00 	vldr	s14, [r3]
 8001c52:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <Calculate_Rotation+0x268>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <Calculate_Rotation+0x26c>)
 8001c5e:	edd3 6a00 	vldr	s13, [r3]
 8001c62:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <Calculate_Rotation+0x260>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <Calculate_Rotation+0x26c>)
 8001c72:	edd3 6a00 	vldr	s13, [r3]
 8001c76:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <Calculate_Rotation+0x270>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <Calculate_Rotation+0x274>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 8001c8a:	4b4e      	ldr	r3, [pc, #312]	; (8001dc4 <Calculate_Rotation+0x274>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001dc8 <Calculate_Rotation+0x278>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <Calculate_Rotation+0x27c>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	ee07 3a90 	vmov	s15, r3
 8001ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca8:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <Calculate_Rotation+0x27c>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <Calculate_Rotation+0x280>)
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
		TM1_OldValue = TM1_Currentvalue; // Save to old value
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <Calculate_Rotation+0x250>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b38      	ldr	r3, [pc, #224]	; (8001da4 <Calculate_Rotation+0x254>)
 8001cc2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Green_Led_Pin);
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	4843      	ldr	r0, [pc, #268]	; (8001dd4 <Calculate_Rotation+0x284>)
 8001cc8:	f000 fe1d 	bl	8002906 <HAL_GPIO_TogglePin>
		RPSSpeedFilterPrev = EncoderSpeedRPSToFiler;
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <Calculate_Rotation+0x260>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a3b      	ldr	r2, [pc, #236]	; (8001dc0 <Calculate_Rotation+0x270>)
 8001cd2:	6013      	str	r3, [r2, #0]
		RPSSpeedFilter = EncoderSpeedRPS;
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <Calculate_Rotation+0x274>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a37      	ldr	r2, [pc, #220]	; (8001db8 <Calculate_Rotation+0x268>)
 8001cda:	6013      	str	r3, [r2, #0]
else
{
	TM1_OldValue = TM1_Currentvalue;
}

}
 8001cdc:	e04b      	b.n	8001d76 <Calculate_Rotation+0x226>
		EncoderSpeedRPS = ((1000000.0/TM1_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <Calculate_Rotation+0x258>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fd4e 	bl	8000784 <__aeabi_ui2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	a124      	add	r1, pc, #144	; (adr r1, 8001d80 <Calculate_Rotation+0x230>)
 8001cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf2:	f7fe feeb 	bl	8000acc <__aeabi_ddiv>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4614      	mov	r4, r2
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fd4e 	bl	80007a4 <__aeabi_i2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	4629      	mov	r1, r5
 8001d10:	f7fe fedc 	bl	8000acc <__aeabi_ddiv>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7ff f8a4 	bl	8000e68 <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a28      	ldr	r2, [pc, #160]	; (8001dc4 <Calculate_Rotation+0x274>)
 8001d24:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <Calculate_Rotation+0x274>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001dc8 <Calculate_Rotation+0x278>
 8001d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <Calculate_Rotation+0x27c>)
 8001d36:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <Calculate_Rotation+0x27c>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <Calculate_Rotation+0x280>)
 8001d50:	edc3 7a00 	vstr	s15, [r3]
		TM1_OldValue = TM1_Currentvalue; // Save to old value
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <Calculate_Rotation+0x250>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <Calculate_Rotation+0x254>)
 8001d5e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Green_Led_Pin);
 8001d60:	2120      	movs	r1, #32
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <Calculate_Rotation+0x284>)
 8001d64:	f000 fdcf 	bl	8002906 <HAL_GPIO_TogglePin>
}
 8001d68:	e005      	b.n	8001d76 <Calculate_Rotation+0x226>
	TM1_OldValue = TM1_Currentvalue;
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <Calculate_Rotation+0x250>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <Calculate_Rotation+0x254>)
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	00000000 	.word	0x00000000
 8001d84:	412e8480 	.word	0x412e8480
 8001d88:	40100000 	.word	0x40100000
 8001d8c:	20000d24 	.word	0x20000d24
 8001d90:	20000d28 	.word	0x20000d28
 8001d94:	20000d2c 	.word	0x20000d2c
 8001d98:	20000d0c 	.word	0x20000d0c
 8001d9c:	20000b68 	.word	0x20000b68
 8001da0:	20000d48 	.word	0x20000d48
 8001da4:	20000d20 	.word	0x20000d20
 8001da8:	20000d1c 	.word	0x20000d1c
 8001dac:	20000d30 	.word	0x20000d30
 8001db0:	20000d3c 	.word	0x20000d3c
 8001db4:	20000d40 	.word	0x20000d40
 8001db8:	20000d34 	.word	0x20000d34
 8001dbc:	20000d44 	.word	0x20000d44
 8001dc0:	20000d38 	.word	0x20000d38
 8001dc4:	20000d10 	.word	0x20000d10
 8001dc8:	42700000 	.word	0x42700000
 8001dcc:	20000d14 	.word	0x20000d14
 8001dd0:	20000d18 	.word	0x20000d18
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_MspInit+0x4c>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_TIM_Base_MspInit+0xb4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001e56:	e03a      	b.n	8001ece <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <HAL_TIM_Base_MspInit+0xbc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10e      	bne.n	8001e80 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
}
 8001e7e:	e026      	b.n	8001ece <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	e012      	b.n	8001ece <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_TIM_Base_MspInit+0xc4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d10d      	bne.n	8001ece <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <HAL_TIM_Base_MspInit+0xb8>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40001400 	.word	0x40001400
 8001ee8:	40014400 	.word	0x40014400
 8001eec:	40014800 	.word	0x40014800

08001ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_UART_MspInit+0x84>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12b      	bne.n	8001f6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_UART_MspInit+0x88>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5a:	2307      	movs	r3, #7
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_UART_MspInit+0x8c>)
 8001f66:	f000 fb09 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40004400 	.word	0x40004400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <HAL_InitTick+0xe4>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_InitTick+0xe4>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_InitTick+0xe4>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fac:	f107 0210 	add.w	r2, r7, #16
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fdf2 	bl	8002ba0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fc6:	f000 fdc3 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8001fca:	6378      	str	r0, [r7, #52]	; 0x34
 8001fcc:	e004      	b.n	8001fd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fce:	f000 fdbf 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_InitTick+0xe8>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <HAL_InitTick+0xec>)
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_InitTick+0xf0>)
 8001fea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_InitTick+0xec>)
 8001fee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ff2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ff4:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_InitTick+0xec>)
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_InitTick+0xec>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_InitTick+0xec>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_InitTick+0xec>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <HAL_InitTick+0xec>)
 800200e:	f001 fac7 	bl	80035a0 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800201c:	2b00      	cmp	r3, #0
 800201e:	d11b      	bne.n	8002058 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <HAL_InitTick+0xec>)
 8002022:	f001 fb0d 	bl	8003640 <HAL_TIM_Base_Start_IT>
 8002026:	4603      	mov	r3, r0
 8002028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800202c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002030:	2b00      	cmp	r3, #0
 8002032:	d111      	bne.n	8002058 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002034:	2036      	movs	r0, #54	; 0x36
 8002036:	f000 fa93 	bl	8002560 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d808      	bhi.n	8002052 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2036      	movs	r0, #54	; 0x36
 8002046:	f000 fa6f 	bl	8002528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_InitTick+0xf4>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e002      	b.n	8002058 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800205c:	4618      	mov	r0, r3
 800205e:	3738      	adds	r7, #56	; 0x38
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	431bde83 	.word	0x431bde83
 800206c:	20000d58 	.word	0x20000d58
 8002070:	40001000 	.word	0x40001000
 8002074:	2000000c 	.word	0x2000000c

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800207c:	e7fe      	b.n	800207c <NMI_Handler+0x4>

0800207e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002082:	e7fe      	b.n	8002082 <HardFault_Handler+0x4>

08002084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <MemManage_Handler+0x4>

0800208a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <BusFault_Handler+0x4>

08002090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <UsageFault_Handler+0x4>

08002096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 80020a8:	2001      	movs	r0, #1
 80020aa:	f000 fc47 	bl	800293c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direction_Pin);
 80020b6:	2002      	movs	r0, #2
 80020b8:	f000 fc40 	bl	800293c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80020c6:	f001 fb2b 	bl	8003720 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020cc:	f001 fb28 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000b68 	.word	0x20000b68
 80020d8:	20000bf8 	.word	0x20000bf8

080020dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80020e2:	f001 fb1d 	bl	8003720 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80020e6:	4803      	ldr	r0, [pc, #12]	; (80020f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80020e8:	f001 fb1a 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000b68 	.word	0x20000b68
 80020f4:	20000c40 	.word	0x20000c40

080020f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002100:	f000 fc1c 	bl	800293c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM6_DAC_IRQHandler+0x10>)
 800210e:	f001 fb07 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000d58 	.word	0x20000d58

0800211c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <TIM7_IRQHandler+0x10>)
 8002122:	f001 fafd 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000bb0 	.word	0x20000bb0

08002130 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_kill>:

int _kill(int pid, int sig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800214a:	f003 ffe7 	bl	800611c <__errno>
 800214e:	4603      	mov	r3, r0
 8002150:	2216      	movs	r2, #22
 8002152:	601a      	str	r2, [r3, #0]
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_exit>:

void _exit (int status)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ffe7 	bl	8002140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002172:	e7fe      	b.n	8002172 <_exit+0x12>

08002174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
  }

  return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e009      	b.n	80021d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	60ba      	str	r2, [r7, #8]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	429a      	cmp	r2, r3
 80021da:	dbf1      	blt.n	80021c0 <_write+0x12>
  }
  return len;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_close>:

int _close(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220e:	605a      	str	r2, [r3, #4]
  return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <_isatty>:

int _isatty(int file)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002258:	4a14      	ldr	r2, [pc, #80]	; (80022ac <_sbrk+0x5c>)
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <_sbrk+0x60>)
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <_sbrk+0x64>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d102      	bne.n	8002272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <_sbrk+0x64>)
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <_sbrk+0x68>)
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	429a      	cmp	r2, r3
 800227e:	d207      	bcs.n	8002290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002280:	f003 ff4c 	bl	800611c <__errno>
 8002284:	4603      	mov	r3, r0
 8002286:	220c      	movs	r2, #12
 8002288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228a:	f04f 33ff 	mov.w	r3, #4294967295
 800228e:	e009      	b.n	80022a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <_sbrk+0x64>)
 80022a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20020000 	.word	0x20020000
 80022b0:	00000400 	.word	0x00000400
 80022b4:	20000da0 	.word	0x20000da0
 80022b8:	20001428 	.word	0x20001428

080022bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <SystemInit+0x20>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	4a05      	ldr	r2, [pc, #20]	; (80022dc <SystemInit+0x20>)
 80022c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002318 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022e6:	490e      	ldr	r1, [pc, #56]	; (8002320 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022e8:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022ec:	e002      	b.n	80022f4 <LoopCopyDataInit>

080022ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f2:	3304      	adds	r3, #4

080022f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f8:	d3f9      	bcc.n	80022ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fa:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022fc:	4c0b      	ldr	r4, [pc, #44]	; (800232c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002300:	e001      	b.n	8002306 <LoopFillZerobss>

08002302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002304:	3204      	adds	r2, #4

08002306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002308:	d3fb      	bcc.n	8002302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800230a:	f7ff ffd7 	bl	80022bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230e:	f003 ff0b 	bl	8006128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002312:	f7ff f88b 	bl	800142c <main>
  bx  lr    
 8002316:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800231c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002320:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002324:	0800afec 	.word	0x0800afec
  ldr r2, =_sbss
 8002328:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800232c:	20001424 	.word	0x20001424

08002330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002330:	e7fe      	b.n	8002330 <ADC_IRQHandler>
	...

08002334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <HAL_Init+0x40>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_Init+0x40>)
 800234a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_Init+0x40>)
 8002356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235c:	2003      	movs	r0, #3
 800235e:	f000 f8d8 	bl	8002512 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002362:	200f      	movs	r0, #15
 8002364:	f7ff fe0c 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002368:	f7ff fd36 	bl	8001dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00

08002378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x20>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_IncTick+0x24>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_IncTick+0x24>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20000010 	.word	0x20000010
 800239c:	20000da4 	.word	0x20000da4

080023a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return uwTick;
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_GetTick+0x14>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000da4 	.word	0x20000da4

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4c 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253a:	f7ff ff61 	bl	8002400 <__NVIC_GetPriorityGrouping>
 800253e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	6978      	ldr	r0, [r7, #20]
 8002546:	f7ff ffb1 	bl	80024ac <NVIC_EncodePriority>
 800254a:	4602      	mov	r2, r0
 800254c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff80 	bl	8002458 <__NVIC_SetPriority>
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff54 	bl	800241c <__NVIC_EnableIRQ>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e165      	b.n	8002864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002598:	2201      	movs	r2, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 8154 	bne.w	800285e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d005      	beq.n	80025ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d130      	bne.n	8002630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	2203      	movs	r2, #3
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80ae 	beq.w	800285e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	4b5d      	ldr	r3, [pc, #372]	; (800287c <HAL_GPIO_Init+0x300>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a5c      	ldr	r2, [pc, #368]	; (800287c <HAL_GPIO_Init+0x300>)
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b5a      	ldr	r3, [pc, #360]	; (800287c <HAL_GPIO_Init+0x300>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_GPIO_Init+0x304>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x308>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x21a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x30c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x216>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4d      	ldr	r2, [pc, #308]	; (800288c <HAL_GPIO_Init+0x310>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x212>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <HAL_GPIO_Init+0x314>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x20e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <HAL_GPIO_Init+0x318>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x20a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_GPIO_Init+0x31c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x206>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a49      	ldr	r2, [pc, #292]	; (800289c <HAL_GPIO_Init+0x320>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x202>
 800277a:	2306      	movs	r3, #6
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 800277e:	2307      	movs	r3, #7
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x21c>
 8002796:	2300      	movs	r3, #0
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a8:	4935      	ldr	r1, [pc, #212]	; (8002880 <HAL_GPIO_Init+0x304>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b6:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_GPIO_Init+0x324>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027da:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_GPIO_Init+0x324>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_GPIO_Init+0x324>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <HAL_GPIO_Init+0x324>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280a:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_GPIO_Init+0x324>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_GPIO_Init+0x324>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_GPIO_Init+0x324>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002858:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_GPIO_Init+0x324>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f ae96 	bls.w	8002598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3724      	adds	r7, #36	; 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40013800 	.word	0x40013800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40021400 	.word	0x40021400
 800289c:	40021800 	.word	0x40021800
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002918:	887a      	ldrh	r2, [r7, #2]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	041a      	lsls	r2, r3, #16
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43d9      	mvns	r1, r3
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	400b      	ands	r3, r1
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	619a      	str	r2, [r3, #24]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ffd2 	bl	8001904 <HAL_GPIO_EXTI_Callback>
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40013c00 	.word	0x40013c00

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cc      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002980:	4b68      	ldr	r3, [pc, #416]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d90c      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0b8      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d044      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d119      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e07f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d109      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e06f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e067      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f023 0203 	bic.w	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4934      	ldr	r1, [pc, #208]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a5c:	f7ff fca0 	bl	80023a0 <HAL_GetTick>
 8002a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a64:	f7ff fc9c 	bl	80023a0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e04f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 020c 	and.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1eb      	bne.n	8002a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d20c      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e032      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002af2:	f000 f887 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490a      	ldr	r1, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fa34 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40023c00 	.word	0x40023c00
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	0800ab1c 	.word	0x0800ab1c
 8002b30:	20000008 	.word	0x20000008
 8002b34:	2000000c 	.word	0x2000000c

08002b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000008 	.word	0x20000008

08002b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b54:	f7ff fff0 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0a9b      	lsrs	r3, r3, #10
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	0800ab2c 	.word	0x0800ab2c

08002b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	f7ff ffdc 	bl	8002b38 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0b5b      	lsrs	r3, r3, #13
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800ab2c 	.word	0x0800ab2c

08002ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	220f      	movs	r2, #15
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_GetClockConfig+0x5c>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <HAL_RCC_GetClockConfig+0x60>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	601a      	str	r2, [r3, #0]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40023c00 	.word	0x40023c00

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0ae      	sub	sp, #184	; 0xb8
 8002c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c2a:	4bcb      	ldr	r3, [pc, #812]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	f200 8206 	bhi.w	8003044 <HAL_RCC_GetSysClockFreq+0x440>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c75 	.word	0x08002c75
 8002c44:	08003045 	.word	0x08003045
 8002c48:	08003045 	.word	0x08003045
 8002c4c:	08003045 	.word	0x08003045
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08003045 	.word	0x08003045
 8002c58:	08003045 	.word	0x08003045
 8002c5c:	08003045 	.word	0x08003045
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08003045 	.word	0x08003045
 8002c68:	08003045 	.word	0x08003045
 8002c6c:	08003045 	.word	0x08003045
 8002c70:	08002e75 	.word	0x08002e75
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4bb9      	ldr	r3, [pc, #740]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c7a:	e1e7      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7c:	4bb8      	ldr	r3, [pc, #736]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c82:	e1e3      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4bb4      	ldr	r3, [pc, #720]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c90:	4bb1      	ldr	r3, [pc, #708]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d071      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9c:	4bae      	ldr	r3, [pc, #696]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ca8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	462b      	mov	r3, r5
 8002cc6:	f04f 0000 	mov.w	r0, #0
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	0159      	lsls	r1, r3, #5
 8002cd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd4:	0150      	lsls	r0, r2, #5
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4621      	mov	r1, r4
 8002cdc:	1a51      	subs	r1, r2, r1
 8002cde:	6439      	str	r1, [r7, #64]	; 0x40
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	018b      	lsls	r3, r1, #6
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cfe:	4641      	mov	r1, r8
 8002d00:	018a      	lsls	r2, r1, #6
 8002d02:	4641      	mov	r1, r8
 8002d04:	1a51      	subs	r1, r2, r1
 8002d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d08:	4649      	mov	r1, r9
 8002d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	00cb      	lsls	r3, r1, #3
 8002d20:	4641      	mov	r1, r8
 8002d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d26:	4641      	mov	r1, r8
 8002d28:	00ca      	lsls	r2, r1, #3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4622      	mov	r2, r4
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
 8002d36:	462b      	mov	r3, r5
 8002d38:	460a      	mov	r2, r1
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	024b      	lsls	r3, r1, #9
 8002d50:	4621      	mov	r1, r4
 8002d52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d56:	4621      	mov	r1, r4
 8002d58:	024a      	lsls	r2, r1, #9
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d62:	2200      	movs	r2, #0
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d70:	f7fe f8ca 	bl	8000f08 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d7e:	e067      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d80:	4b75      	ldr	r3, [pc, #468]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d8c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d9e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4641      	mov	r1, r8
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4641      	mov	r1, r8
 8002de4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e02:	4692      	mov	sl, r2
 8002e04:	469b      	mov	fp, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	eb1a 0303 	adds.w	r3, sl, r3
 8002e0c:	623b      	str	r3, [r7, #32]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	eb4b 0303 	adc.w	r3, fp, r3
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e38:	2200      	movs	r2, #0
 8002e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e42:	f7fe f861 	bl	8000f08 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e72:	e0eb      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e74:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e80:	4b35      	ldr	r3, [pc, #212]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d06b      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	2200      	movs	r2, #0
 8002e94:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	462b      	mov	r3, r5
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	1a51      	subs	r1, r2, r1
 8002ec4:	61b9      	str	r1, [r7, #24]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002eda:	4659      	mov	r1, fp
 8002edc:	018b      	lsls	r3, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	018a      	lsls	r2, r1, #6
 8002ee8:	4651      	mov	r1, sl
 8002eea:	ebb2 0801 	subs.w	r8, r2, r1
 8002eee:	4659      	mov	r1, fp
 8002ef0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f08:	4690      	mov	r8, r2
 8002f0a:	4699      	mov	r9, r3
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	eb18 0303 	adds.w	r3, r8, r3
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	462b      	mov	r3, r5
 8002f16:	eb49 0303 	adc.w	r3, r9, r3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f28:	4629      	mov	r1, r5
 8002f2a:	024b      	lsls	r3, r1, #9
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f32:	4621      	mov	r1, r4
 8002f34:	024a      	lsls	r2, r1, #9
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f3e:	2200      	movs	r2, #0
 8002f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f44:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f48:	f7fd ffde 	bl	8000f08 <__aeabi_uldivmod>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4613      	mov	r3, r2
 8002f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f56:	e065      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x420>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	00f42400 	.word	0x00f42400
 8002f60:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f64:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_GetSysClockFreq+0x458>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	4611      	mov	r1, r2
 8002f70:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
 8002f76:	2300      	movs	r3, #0
 8002f78:	657b      	str	r3, [r7, #84]	; 0x54
 8002f7a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f7e:	4642      	mov	r2, r8
 8002f80:	464b      	mov	r3, r9
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	0159      	lsls	r1, r3, #5
 8002f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f90:	0150      	lsls	r0, r2, #5
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4641      	mov	r1, r8
 8002f98:	1a51      	subs	r1, r2, r1
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fb0:	4659      	mov	r1, fp
 8002fb2:	018b      	lsls	r3, r1, #6
 8002fb4:	4651      	mov	r1, sl
 8002fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fba:	4651      	mov	r1, sl
 8002fbc:	018a      	lsls	r2, r1, #6
 8002fbe:	4651      	mov	r1, sl
 8002fc0:	1a54      	subs	r4, r2, r1
 8002fc2:	4659      	mov	r1, fp
 8002fc4:	eb63 0501 	sbc.w	r5, r3, r1
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	00eb      	lsls	r3, r5, #3
 8002fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd6:	00e2      	lsls	r2, r4, #3
 8002fd8:	4614      	mov	r4, r2
 8002fda:	461d      	mov	r5, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	18e3      	adds	r3, r4, r3
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	eb45 0303 	adc.w	r3, r5, r3
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	028b      	lsls	r3, r1, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003000:	4621      	mov	r1, r4
 8003002:	028a      	lsls	r2, r1, #10
 8003004:	4610      	mov	r0, r2
 8003006:	4619      	mov	r1, r3
 8003008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300c:	2200      	movs	r2, #0
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003010:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003012:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003016:	f7fd ff77 	bl	8000f08 <__aeabi_uldivmod>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4613      	mov	r3, r2
 8003020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_RCC_GetSysClockFreq+0x458>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	0f1b      	lsrs	r3, r3, #28
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003042:	e003      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800304a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003050:	4618      	mov	r0, r3
 8003052:	37b8      	adds	r7, #184	; 0xb8
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400

08003064 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e28d      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8083 	beq.w	800318a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003084:	4b94      	ldr	r3, [pc, #592]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b04      	cmp	r3, #4
 800308e:	d019      	beq.n	80030c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003090:	4b91      	ldr	r3, [pc, #580]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003098:	2b08      	cmp	r3, #8
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800309c:	4b8e      	ldr	r3, [pc, #568]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a8:	d00c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030aa:	4b8b      	ldr	r3, [pc, #556]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d112      	bne.n	80030dc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b88      	ldr	r3, [pc, #544]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c2:	d10b      	bne.n	80030dc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	4b84      	ldr	r3, [pc, #528]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d05b      	beq.n	8003188 <HAL_RCC_OscConfig+0x124>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d157      	bne.n	8003188 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e25a      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d106      	bne.n	80030f4 <HAL_RCC_OscConfig+0x90>
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7b      	ldr	r2, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xcc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0xb4>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a72      	ldr	r2, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xcc>
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff f932 	bl	80023a0 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff f92e 	bl	80023a0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e21f      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xdc>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7ff f91e 	bl	80023a0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003168:	f7ff f91a 	bl	80023a0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e20b      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x104>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06f      	beq.n	8003276 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003196:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d017      	beq.n	80031d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x186>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1d3      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7ff f8c7 	bl	80023a0 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003216:	f7ff f8c3 	bl	80023a0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1b4      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x278>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff f8a6 	bl	80023a0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003258:	f7ff f8a2 	bl	80023a0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e193      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_RCC_OscConfig+0x27c>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7ff f886 	bl	80023a0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003298:	f7ff f882 	bl	80023a0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e173      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x234>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7ff f86f 	bl	80023a0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032c6:	f7ff f86b 	bl	80023a0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e15c      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b8a      	ldr	r3, [pc, #552]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7f      	ldr	r3, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a7e      	ldr	r2, [pc, #504]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b79      	ldr	r3, [pc, #484]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a75      	ldr	r2, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7ff f82b 	bl	80023a0 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7ff f827 	bl	80023a0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e118      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x4b0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x31e>
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x358>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x340>
 800338a:	4b61      	ldr	r3, [pc, #388]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	4b5e      	ldr	r3, [pc, #376]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5d      	ldr	r2, [pc, #372]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x358>
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a59      	ldr	r2, [pc, #356]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	4b57      	ldr	r3, [pc, #348]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe ffec 	bl	80023a0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe ffe8 	bl	80023a0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0d7      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b4b      	ldr	r3, [pc, #300]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x368>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f0:	f7fe ffd6 	bl	80023a0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe ffd2 	bl	80023a0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0c1      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b3b      	ldr	r3, [pc, #236]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ad 	beq.w	8003590 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d060      	beq.n	8003504 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d145      	bne.n	80034d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b33      	ldr	r3, [pc, #204]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fe ffa6 	bl	80023a0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe ffa2 	bl	80023a0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e093      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	071b      	lsls	r3, r3, #28
 80034a2:	491b      	ldr	r1, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fe ff77 	bl	80023a0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe ff73 	bl	80023a0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e064      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x452>
 80034d4:	e05c      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_OscConfig+0x4b4>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe ff60 	bl	80023a0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe ff5c 	bl	80023a0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04d      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_OscConfig+0x4ac>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x480>
 8003502:	e045      	b.n	8003590 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e040      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
 8003510:	40023800 	.word	0x40023800
 8003514:	40007000 	.word	0x40007000
 8003518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x538>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d030      	beq.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d129      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d122      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003554:	4293      	cmp	r3, r2
 8003556:	d119      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	085b      	lsrs	r3, r3, #1
 8003564:	3b01      	subs	r3, #1
 8003566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d10f      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e041      	b.n	8003636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fc2e 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fa96 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04e      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_TIM_Base_Start_IT+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d01d      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIM_Base_Start_IT+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_TIM_Base_Start_IT+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d122      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0202 	mvn.w	r2, #2
 800374c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9b5 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003768:	e005      	b.n	8003776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9a7 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f9b8 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f98b 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f97d 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f98e 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0208 	mvn.w	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2204      	movs	r2, #4
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f961 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f953 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f964 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b10      	cmp	r3, #16
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b10      	cmp	r3, #16
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0210 	mvn.w	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2208      	movs	r2, #8
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f937 	bl	8003ad2 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f929 	bl	8003abe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f93a 	bl	8003ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0201 	mvn.w	r2, #1
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe f852 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fae0 	bl	8003e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8ff 	bl	8003afa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0220 	mvn.w	r2, #32
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 faaa 	bl	8003e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_TIM_ConfigClockSource+0x1c>
 8003948:	2302      	movs	r3, #2
 800394a:	e0b4      	b.n	8003ab6 <HAL_TIM_ConfigClockSource+0x186>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003984:	d03e      	beq.n	8003a04 <HAL_TIM_ConfigClockSource+0xd4>
 8003986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398a:	f200 8087 	bhi.w	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 800398e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003992:	f000 8086 	beq.w	8003aa2 <HAL_TIM_ConfigClockSource+0x172>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	d87f      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 800399c:	2b70      	cmp	r3, #112	; 0x70
 800399e:	d01a      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xa6>
 80039a0:	2b70      	cmp	r3, #112	; 0x70
 80039a2:	d87b      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b60      	cmp	r3, #96	; 0x60
 80039a6:	d050      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0x11a>
 80039a8:	2b60      	cmp	r3, #96	; 0x60
 80039aa:	d877      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b50      	cmp	r3, #80	; 0x50
 80039ae:	d03c      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xfa>
 80039b0:	2b50      	cmp	r3, #80	; 0x50
 80039b2:	d873      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d058      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x13a>
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d86f      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d064      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x15a>
 80039c0:	2b30      	cmp	r3, #48	; 0x30
 80039c2:	d86b      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d060      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x15a>
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d867      	bhi.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05c      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d05a      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x15a>
 80039d4:	e062      	b.n	8003a9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 f9ad 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
      break;
 8003a02:	e04f      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	6899      	ldr	r1, [r3, #8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f000 f996 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a26:	609a      	str	r2, [r3, #8]
      break;
 8003a28:	e03c      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f000 f90a 	bl	8003c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2150      	movs	r1, #80	; 0x50
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f963 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 8003a48:	e02c      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6859      	ldr	r1, [r3, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f000 f929 	bl	8003cae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2160      	movs	r1, #96	; 0x60
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f953 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 8003a68:	e01c      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 f8ea 	bl	8003c50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f943 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 8003a88:	e00c      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f000 f93a 	bl	8003d0e <TIM_ITRx_SetConfig>
      break;
 8003a9a:	e003      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a40      	ldr	r2, [pc, #256]	; (8003c24 <TIM_Base_SetConfig+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d013      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d00f      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3d      	ldr	r2, [pc, #244]	; (8003c28 <TIM_Base_SetConfig+0x118>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <TIM_Base_SetConfig+0x11c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3b      	ldr	r2, [pc, #236]	; (8003c30 <TIM_Base_SetConfig+0x120>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_Base_SetConfig+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3a      	ldr	r2, [pc, #232]	; (8003c34 <TIM_Base_SetConfig+0x124>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d108      	bne.n	8003b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a2f      	ldr	r2, [pc, #188]	; (8003c24 <TIM_Base_SetConfig+0x114>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b70:	d027      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2c      	ldr	r2, [pc, #176]	; (8003c28 <TIM_Base_SetConfig+0x118>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d023      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <TIM_Base_SetConfig+0x11c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01f      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <TIM_Base_SetConfig+0x120>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d01b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a29      	ldr	r2, [pc, #164]	; (8003c34 <TIM_Base_SetConfig+0x124>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d017      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a28      	ldr	r2, [pc, #160]	; (8003c38 <TIM_Base_SetConfig+0x128>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00f      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a26      	ldr	r2, [pc, #152]	; (8003c40 <TIM_Base_SetConfig+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a25      	ldr	r2, [pc, #148]	; (8003c44 <TIM_Base_SetConfig+0x134>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <TIM_Base_SetConfig+0x138>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a23      	ldr	r2, [pc, #140]	; (8003c4c <TIM_Base_SetConfig+0x13c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <TIM_Base_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_Base_SetConfig+0xf8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <TIM_Base_SetConfig+0x124>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d103      	bne.n	8003c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	615a      	str	r2, [r3, #20]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40010400 	.word	0x40010400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	40001800 	.word	0x40001800
 8003c48:	40001c00 	.word	0x40001c00
 8003c4c:	40002000 	.word	0x40002000

08003c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0201 	bic.w	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 030a 	bic.w	r3, r3, #10
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b087      	sub	sp, #28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f023 0210 	bic.w	r2, r3, #16
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	031b      	lsls	r3, r3, #12
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f043 0307 	orr.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e05a      	b.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2202      	movs	r2, #2
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a21      	ldr	r2, [pc, #132]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d01d      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a17      	ldr	r2, [pc, #92]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10c      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40010000 	.word	0x40010000
 8003e64:	40000400 	.word	0x40000400
 8003e68:	40000800 	.word	0x40000800
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40010400 	.word	0x40010400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40001800 	.word	0x40001800

08003e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e03f      	b.n	8003f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe f810 	bl	8001ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f929 	bl	8004140 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b08a      	sub	sp, #40	; 0x28
 8003f42:	af02      	add	r7, sp, #8
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d17c      	bne.n	8004058 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d002      	beq.n	8003f6a <HAL_UART_Transmit+0x2c>
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e075      	b.n	800405a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_UART_Transmit+0x3e>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e06e      	b.n	800405a <HAL_UART_Transmit+0x11c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2221      	movs	r2, #33	; 0x21
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f92:	f7fe fa05 	bl	80023a0 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	88fa      	ldrh	r2, [r7, #6]
 8003fa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d108      	bne.n	8003fc0 <HAL_UART_Transmit+0x82>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d104      	bne.n	8003fc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fd0:	e02a      	b.n	8004028 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2180      	movs	r1, #128	; 0x80
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f840 	bl	8004062 <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e036      	b.n	800405a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004000:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3302      	adds	r3, #2
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e007      	b.n	800401a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	781a      	ldrb	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1cf      	bne.n	8003fd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	2140      	movs	r1, #64	; 0x40
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f810 	bl	8004062 <UART_WaitOnFlagUntilTimeout>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e006      	b.n	800405a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	e000      	b.n	800405a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004058:	2302      	movs	r3, #2
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b090      	sub	sp, #64	; 0x40
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004072:	e050      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d04c      	beq.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800407c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <UART_WaitOnFlagUntilTimeout+0x30>
 8004082:	f7fe f98d 	bl	80023a0 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408e:	429a      	cmp	r2, r3
 8004090:	d241      	bcs.n	8004116 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b2:	637a      	str	r2, [r7, #52]	; 0x34
 80040b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e5      	bne.n	8004092 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	613b      	str	r3, [r7, #16]
   return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040e6:	623a      	str	r2, [r7, #32]
 80040e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	69f9      	ldr	r1, [r7, #28]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e00f      	b.n	8004136 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	bf0c      	ite	eq
 8004126:	2301      	moveq	r3, #1
 8004128:	2300      	movne	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	429a      	cmp	r2, r3
 8004132:	d09f      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3740      	adds	r7, #64	; 0x40
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004144:	b0c0      	sub	sp, #256	; 0x100
 8004146:	af00      	add	r7, sp, #0
 8004148:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	68d9      	ldr	r1, [r3, #12]
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	ea40 0301 	orr.w	r3, r0, r1
 8004168:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	431a      	orrs	r2, r3
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004198:	f021 010c 	bic.w	r1, r1, #12
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041a6:	430b      	orrs	r3, r1
 80041a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	6999      	ldr	r1, [r3, #24]
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	ea40 0301 	orr.w	r3, r0, r1
 80041c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8f      	ldr	r3, [pc, #572]	; (800440c <UART_SetConfig+0x2cc>)
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d005      	beq.n	80041e0 <UART_SetConfig+0xa0>
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b8d      	ldr	r3, [pc, #564]	; (8004410 <UART_SetConfig+0x2d0>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d104      	bne.n	80041ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e0:	f7fe fcca 	bl	8002b78 <HAL_RCC_GetPCLK2Freq>
 80041e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e8:	e003      	b.n	80041f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ea:	f7fe fcb1 	bl	8002b50 <HAL_RCC_GetPCLK1Freq>
 80041ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fc:	f040 810c 	bne.w	8004418 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004204:	2200      	movs	r2, #0
 8004206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800420a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800420e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	1891      	adds	r1, r2, r2
 8004218:	65b9      	str	r1, [r7, #88]	; 0x58
 800421a:	415b      	adcs	r3, r3
 800421c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800421e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004222:	4621      	mov	r1, r4
 8004224:	eb12 0801 	adds.w	r8, r2, r1
 8004228:	4629      	mov	r1, r5
 800422a:	eb43 0901 	adc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004250:	462b      	mov	r3, r5
 8004252:	eb49 0303 	adc.w	r3, r9, r3
 8004256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004266:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800426a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800426e:	460b      	mov	r3, r1
 8004270:	18db      	adds	r3, r3, r3
 8004272:	653b      	str	r3, [r7, #80]	; 0x50
 8004274:	4613      	mov	r3, r2
 8004276:	eb42 0303 	adc.w	r3, r2, r3
 800427a:	657b      	str	r3, [r7, #84]	; 0x54
 800427c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004280:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004284:	f7fc fe40 	bl	8000f08 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <UART_SetConfig+0x2d4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	011c      	lsls	r4, r3, #4
 8004296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800429a:	2200      	movs	r2, #0
 800429c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	1891      	adds	r1, r2, r2
 80042ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80042b0:	415b      	adcs	r3, r3
 80042b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b8:	4641      	mov	r1, r8
 80042ba:	eb12 0a01 	adds.w	sl, r2, r1
 80042be:	4649      	mov	r1, r9
 80042c0:	eb43 0b01 	adc.w	fp, r3, r1
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d8:	4692      	mov	sl, r2
 80042da:	469b      	mov	fp, r3
 80042dc:	4643      	mov	r3, r8
 80042de:	eb1a 0303 	adds.w	r3, sl, r3
 80042e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042e6:	464b      	mov	r3, r9
 80042e8:	eb4b 0303 	adc.w	r3, fp, r3
 80042ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004300:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004304:	460b      	mov	r3, r1
 8004306:	18db      	adds	r3, r3, r3
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
 800430a:	4613      	mov	r3, r2
 800430c:	eb42 0303 	adc.w	r3, r2, r3
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
 8004312:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004316:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800431a:	f7fc fdf5 	bl	8000f08 <__aeabi_uldivmod>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4611      	mov	r1, r2
 8004324:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <UART_SetConfig+0x2d4>)
 8004326:	fba3 2301 	umull	r2, r3, r3, r1
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	2264      	movs	r2, #100	; 0x64
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	1acb      	subs	r3, r1, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <UART_SetConfig+0x2d4>)
 800433c:	fba3 2302 	umull	r2, r3, r3, r2
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004348:	441c      	add	r4, r3
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004354:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004358:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	63b9      	str	r1, [r7, #56]	; 0x38
 8004364:	415b      	adcs	r3, r3
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800436c:	4641      	mov	r1, r8
 800436e:	1851      	adds	r1, r2, r1
 8004370:	6339      	str	r1, [r7, #48]	; 0x30
 8004372:	4649      	mov	r1, r9
 8004374:	414b      	adcs	r3, r1
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004384:	4659      	mov	r1, fp
 8004386:	00cb      	lsls	r3, r1, #3
 8004388:	4651      	mov	r1, sl
 800438a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800438e:	4651      	mov	r1, sl
 8004390:	00ca      	lsls	r2, r1, #3
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	4603      	mov	r3, r0
 8004398:	4642      	mov	r2, r8
 800439a:	189b      	adds	r3, r3, r2
 800439c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043a0:	464b      	mov	r3, r9
 80043a2:	460a      	mov	r2, r1
 80043a4:	eb42 0303 	adc.w	r3, r2, r3
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043c0:	460b      	mov	r3, r1
 80043c2:	18db      	adds	r3, r3, r3
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c6:	4613      	mov	r3, r2
 80043c8:	eb42 0303 	adc.w	r3, r2, r3
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043d6:	f7fc fd97 	bl	8000f08 <__aeabi_uldivmod>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <UART_SetConfig+0x2d4>)
 80043e0:	fba3 1302 	umull	r1, r3, r3, r2
 80043e4:	095b      	lsrs	r3, r3, #5
 80043e6:	2164      	movs	r1, #100	; 0x64
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3332      	adds	r3, #50	; 0x32
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <UART_SetConfig+0x2d4>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	f003 0207 	and.w	r2, r3, #7
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4422      	add	r2, r4
 8004406:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004408:	e105      	b.n	8004616 <UART_SetConfig+0x4d6>
 800440a:	bf00      	nop
 800440c:	40011000 	.word	0x40011000
 8004410:	40011400 	.word	0x40011400
 8004414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800442a:	4642      	mov	r2, r8
 800442c:	464b      	mov	r3, r9
 800442e:	1891      	adds	r1, r2, r2
 8004430:	6239      	str	r1, [r7, #32]
 8004432:	415b      	adcs	r3, r3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443a:	4641      	mov	r1, r8
 800443c:	1854      	adds	r4, r2, r1
 800443e:	4649      	mov	r1, r9
 8004440:	eb43 0501 	adc.w	r5, r3, r1
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	00eb      	lsls	r3, r5, #3
 800444e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004452:	00e2      	lsls	r2, r4, #3
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	4643      	mov	r3, r8
 800445a:	18e3      	adds	r3, r4, r3
 800445c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004460:	464b      	mov	r3, r9
 8004462:	eb45 0303 	adc.w	r3, r5, r3
 8004466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004486:	4629      	mov	r1, r5
 8004488:	008b      	lsls	r3, r1, #2
 800448a:	4621      	mov	r1, r4
 800448c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004490:	4621      	mov	r1, r4
 8004492:	008a      	lsls	r2, r1, #2
 8004494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004498:	f7fc fd36 	bl	8000f08 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b60      	ldr	r3, [pc, #384]	; (8004624 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 2302 	umull	r2, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	011c      	lsls	r4, r3, #4
 80044aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	1891      	adds	r1, r2, r2
 80044c2:	61b9      	str	r1, [r7, #24]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	61fb      	str	r3, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	4641      	mov	r1, r8
 80044ce:	1851      	adds	r1, r2, r1
 80044d0:	6139      	str	r1, [r7, #16]
 80044d2:	4649      	mov	r1, r9
 80044d4:	414b      	adcs	r3, r1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e4:	4659      	mov	r1, fp
 80044e6:	00cb      	lsls	r3, r1, #3
 80044e8:	4651      	mov	r1, sl
 80044ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ee:	4651      	mov	r1, sl
 80044f0:	00ca      	lsls	r2, r1, #3
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	4642      	mov	r2, r8
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004500:	464b      	mov	r3, r9
 8004502:	460a      	mov	r2, r1
 8004504:	eb42 0303 	adc.w	r3, r2, r3
 8004508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	67bb      	str	r3, [r7, #120]	; 0x78
 8004516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004524:	4649      	mov	r1, r9
 8004526:	008b      	lsls	r3, r1, #2
 8004528:	4641      	mov	r1, r8
 800452a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800452e:	4641      	mov	r1, r8
 8004530:	008a      	lsls	r2, r1, #2
 8004532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004536:	f7fc fce7 	bl	8000f08 <__aeabi_uldivmod>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4b39      	ldr	r3, [pc, #228]	; (8004624 <UART_SetConfig+0x4e4>)
 8004540:	fba3 1302 	umull	r1, r3, r3, r2
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	fb01 f303 	mul.w	r3, r1, r3
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	3332      	adds	r3, #50	; 0x32
 8004552:	4a34      	ldr	r2, [pc, #208]	; (8004624 <UART_SetConfig+0x4e4>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800455e:	441c      	add	r4, r3
 8004560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004564:	2200      	movs	r2, #0
 8004566:	673b      	str	r3, [r7, #112]	; 0x70
 8004568:	677a      	str	r2, [r7, #116]	; 0x74
 800456a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800456e:	4642      	mov	r2, r8
 8004570:	464b      	mov	r3, r9
 8004572:	1891      	adds	r1, r2, r2
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	415b      	adcs	r3, r3
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800457e:	4641      	mov	r1, r8
 8004580:	1851      	adds	r1, r2, r1
 8004582:	6039      	str	r1, [r7, #0]
 8004584:	4649      	mov	r1, r9
 8004586:	414b      	adcs	r3, r1
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004596:	4659      	mov	r1, fp
 8004598:	00cb      	lsls	r3, r1, #3
 800459a:	4651      	mov	r1, sl
 800459c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a0:	4651      	mov	r1, sl
 80045a2:	00ca      	lsls	r2, r1, #3
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	4603      	mov	r3, r0
 80045aa:	4642      	mov	r2, r8
 80045ac:	189b      	adds	r3, r3, r2
 80045ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b0:	464b      	mov	r3, r9
 80045b2:	460a      	mov	r2, r1
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	663b      	str	r3, [r7, #96]	; 0x60
 80045c4:	667a      	str	r2, [r7, #100]	; 0x64
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045d2:	4649      	mov	r1, r9
 80045d4:	008b      	lsls	r3, r1, #2
 80045d6:	4641      	mov	r1, r8
 80045d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045dc:	4641      	mov	r1, r8
 80045de:	008a      	lsls	r2, r1, #2
 80045e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045e4:	f7fc fc90 	bl	8000f08 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <UART_SetConfig+0x4e4>)
 80045ee:	fba3 1302 	umull	r1, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2164      	movs	r1, #100	; 0x64
 80045f6:	fb01 f303 	mul.w	r3, r1, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	3332      	adds	r3, #50	; 0x32
 8004600:	4a08      	ldr	r2, [pc, #32]	; (8004624 <UART_SetConfig+0x4e4>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4422      	add	r2, r4
 8004614:	609a      	str	r2, [r3, #8]
}
 8004616:	bf00      	nop
 8004618:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004622:	bf00      	nop
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b096      	sub	sp, #88	; 0x58
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004636:	2234      	movs	r2, #52	; 0x34
 8004638:	2100      	movs	r1, #0
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f001 fd98 	bl	8006170 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f1a3 0208 	sub.w	r2, r3, #8
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2202      	movs	r2, #2
 8004674:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4413      	add	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3b04      	subs	r3, #4
 8004686:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8004690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004694:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3b04      	subs	r3, #4
 800469a:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80046aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3304      	adds	r3, #4
 80046bc:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80046c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c4:	4a5d      	ldr	r2, [pc, #372]	; (800483c <_tx_byte_pool_create+0x214>)
 80046c6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80046d6:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80046d8:	b672      	cpsid	i
#endif
    return(int_posture);
 80046da:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80046dc:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a57      	ldr	r2, [pc, #348]	; (8004840 <_tx_byte_pool_create+0x218>)
 80046e2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80046e4:	4b57      	ldr	r3, [pc, #348]	; (8004844 <_tx_byte_pool_create+0x21c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80046ec:	4a56      	ldr	r2, [pc, #344]	; (8004848 <_tx_byte_pool_create+0x220>)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
 80046fe:	e011      	b.n	8004724 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8004700:	4b51      	ldr	r3, [pc, #324]	; (8004848 <_tx_byte_pool_create+0x220>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800470c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8004724:	4b47      	ldr	r3, [pc, #284]	; (8004844 <_tx_byte_pool_create+0x21c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a46      	ldr	r2, [pc, #280]	; (8004844 <_tx_byte_pool_create+0x21c>)
 800472c:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 800472e:	2300      	movs	r3, #0
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	2008      	movs	r0, #8
 800473a:	f001 fa71 	bl	8005c20 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 800473e:	4b43      	ldr	r3, [pc, #268]	; (800484c <_tx_byte_pool_create+0x224>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d06c      	beq.n	8004824 <_tx_byte_pool_create+0x1fc>
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <_tx_byte_pool_create+0x228>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d066      	beq.n	8004824 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004756:	f3ef 8305 	mrs	r3, IPSR
 800475a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	4b3d      	ldr	r3, [pc, #244]	; (8004854 <_tx_byte_pool_create+0x22c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4313      	orrs	r3, r2
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <_tx_byte_pool_create+0x230>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10b      	bne.n	800478a <_tx_byte_pool_create+0x162>
 8004772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004780:	4313      	orrs	r3, r2
 8004782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004788:	e00e      	b.n	80047a8 <_tx_byte_pool_create+0x180>
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004790:	d205      	bcs.n	800479e <_tx_byte_pool_create+0x176>
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004796:	f04f 33ff 	mov.w	r3, #4294967295
 800479a:	64bb      	str	r3, [r7, #72]	; 0x48
 800479c:	e004      	b.n	80047a8 <_tx_byte_pool_create+0x180>
 800479e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80047a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a4:	2300      	movs	r3, #0
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b2:	605a      	str	r2, [r3, #4]
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2215      	movs	r2, #21
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <_tx_byte_pool_create+0x234>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	611a      	str	r2, [r3, #16]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	615a      	str	r2, [r3, #20]
 80047ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	619a      	str	r2, [r3, #24]
 80047d4:	f107 0214 	add.w	r2, r7, #20
 80047d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047da:	61da      	str	r2, [r3, #28]
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	3320      	adds	r3, #32
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e2:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <_tx_byte_pool_create+0x238>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d314      	bcc.n	8004816 <_tx_byte_pool_create+0x1ee>
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <_tx_byte_pool_create+0x23c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <_tx_byte_pool_create+0x224>)
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <_tx_byte_pool_create+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	621a      	str	r2, [r3, #32]
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <_tx_byte_pool_create+0x244>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <_tx_byte_pool_create+0x1fc>
 8004808:	4b18      	ldr	r3, [pc, #96]	; (800486c <_tx_byte_pool_create+0x244>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a16      	ldr	r2, [pc, #88]	; (8004868 <_tx_byte_pool_create+0x240>)
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
 8004814:	e006      	b.n	8004824 <_tx_byte_pool_create+0x1fc>
 8004816:	4a0d      	ldr	r2, [pc, #52]	; (800484c <_tx_byte_pool_create+0x224>)
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <_tx_byte_pool_create+0x240>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004822:	621a      	str	r2, [r3, #32]
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	f383 8810 	msr	PRIMASK, r3
}
 800482e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3750      	adds	r7, #80	; 0x50
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	ffffeeee 	.word	0xffffeeee
 8004840:	42595445 	.word	0x42595445
 8004844:	20000dd4 	.word	0x20000dd4
 8004848:	20000dd0 	.word	0x20000dd0
 800484c:	200013fc 	.word	0x200013fc
 8004850:	20001400 	.word	0x20001400
 8004854:	20000014 	.word	0x20000014
 8004858:	20000de0 	.word	0x20000de0
 800485c:	e0001004 	.word	0xe0001004
 8004860:	200013f8 	.word	0x200013f8
 8004864:	200013f4 	.word	0x200013f4
 8004868:	200013e8 	.word	0x200013e8
 800486c:	20001404 	.word	0x20001404

08004870 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8004874:	f001 f9ae 	bl	8005bd4 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004878:	f000 f9ec 	bl	8004c54 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800487c:	f000 ff96 	bl	80057ac <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <_tx_initialize_high_level+0x5c>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <_tx_initialize_high_level+0x60>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <_tx_initialize_high_level+0x64>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <_tx_initialize_high_level+0x68>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004898:	4b10      	ldr	r3, [pc, #64]	; (80048dc <_tx_initialize_high_level+0x6c>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <_tx_initialize_high_level+0x70>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <_tx_initialize_high_level+0x74>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <_tx_initialize_high_level+0x78>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80048b0:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <_tx_initialize_high_level+0x7c>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <_tx_initialize_high_level+0x80>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <_tx_initialize_high_level+0x84>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <_tx_initialize_high_level+0x88>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
#endif
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000da8 	.word	0x20000da8
 80048d0:	20000dac 	.word	0x20000dac
 80048d4:	20000db0 	.word	0x20000db0
 80048d8:	20000db4 	.word	0x20000db4
 80048dc:	20000db8 	.word	0x20000db8
 80048e0:	20000dbc 	.word	0x20000dbc
 80048e4:	20000dc8 	.word	0x20000dc8
 80048e8:	20000dcc 	.word	0x20000dcc
 80048ec:	20000dd0 	.word	0x20000dd0
 80048f0:	20000dd4 	.word	0x20000dd4
 80048f4:	20000dc0 	.word	0x20000dc0
 80048f8:	20000dc4 	.word	0x20000dc4

080048fc <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004900:	4b10      	ldr	r3, [pc, #64]	; (8004944 <_tx_initialize_kernel_enter+0x48>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004908:	d00c      	beq.n	8004924 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <_tx_initialize_kernel_enter+0x48>)
 800490c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004910:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004912:	f7fb fc7d 	bl	8000210 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8004916:	f7ff ffab 	bl	8004870 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <_tx_initialize_kernel_enter+0x4c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	4a09      	ldr	r2, [pc, #36]	; (8004948 <_tx_initialize_kernel_enter+0x4c>)
 8004922:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <_tx_initialize_kernel_enter+0x48>)
 8004926:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800492a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <_tx_initialize_kernel_enter+0x50>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc fca1 	bl	8001278 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <_tx_initialize_kernel_enter+0x48>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800493c:	f7fb fca8 	bl	8000290 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004940:	bf00      	nop
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000014 	.word	0x20000014
 8004948:	20000e78 	.word	0x20000e78
 800494c:	20000dd8 	.word	0x20000dd8

08004950 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b09a      	sub	sp, #104	; 0x68
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800495e:	2300      	movs	r3, #0
 8004960:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004962:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004964:	21ef      	movs	r1, #239	; 0xef
 8004966:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004968:	f001 fc02 	bl	8006170 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800496c:	22b0      	movs	r2, #176	; 0xb0
 800496e:	2100      	movs	r1, #0
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f001 fbfd 	bl	8006170 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800498c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004992:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004998:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800499e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049a6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049ac:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80049b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	3b01      	subs	r3, #1
 80049be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c0:	4413      	add	r3, r2
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80049ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d007      	beq.n	80049e2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80049e0:	e006      	b.n	80049f0 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2203      	movs	r2, #3
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a86      	ldr	r2, [pc, #536]	; (8004c14 <_tx_thread_create+0x2c4>)
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004a02:	4985      	ldr	r1, [pc, #532]	; (8004c18 <_tx_thread_create+0x2c8>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb fca3 	bl	8000350 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a14:	b672      	cpsid	i
    return(int_posture);
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a7f      	ldr	r2, [pc, #508]	; (8004c1c <_tx_thread_create+0x2cc>)
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004a20:	4b7f      	ldr	r3, [pc, #508]	; (8004c20 <_tx_thread_create+0x2d0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004a28:	4a7e      	ldr	r2, [pc, #504]	; (8004c24 <_tx_thread_create+0x2d4>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004a3e:	e016      	b.n	8004a6e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <_tx_thread_create+0x2d4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4c:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004a6e:	4b6c      	ldr	r3, [pc, #432]	; (8004c20 <_tx_thread_create+0x2d0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	4a6a      	ldr	r2, [pc, #424]	; (8004c20 <_tx_thread_create+0x2d0>)
 8004a76:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8004a78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	2001      	movs	r0, #1
 8004a86:	f001 f8cb 	bl	8005c20 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8004a8a:	4b67      	ldr	r3, [pc, #412]	; (8004c28 <_tx_thread_create+0x2d8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d06b      	beq.n	8004b6e <_tx_thread_create+0x21e>
 8004a96:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <_tx_thread_create+0x2dc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d065      	beq.n	8004b6e <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aa2:	f3ef 8305 	mrs	r3, IPSR
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aaa:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <_tx_thread_create+0x2e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab2:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <_tx_thread_create+0x2e4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <_tx_thread_create+0x186>
 8004abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad4:	e00e      	b.n	8004af4 <_tx_thread_create+0x1a4>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004adc:	d205      	bcs.n	8004aea <_tx_thread_create+0x19a>
 8004ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae8:	e004      	b.n	8004af4 <_tx_thread_create+0x1a4>
 8004aea:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
 8004af0:	2300      	movs	r3, #0
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
 8004af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	2264      	movs	r2, #100	; 0x64
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <_tx_thread_create+0x2e8>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b12:	611a      	str	r2, [r3, #16]
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b18:	615a      	str	r2, [r3, #20]
 8004b1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1e:	619a      	str	r2, [r3, #24]
 8004b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b24:	61da      	str	r2, [r3, #28]
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	3320      	adds	r3, #32
 8004b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2c:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <_tx_thread_create+0x2ec>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d314      	bcc.n	8004b60 <_tx_thread_create+0x210>
 8004b36:	4b42      	ldr	r3, [pc, #264]	; (8004c40 <_tx_thread_create+0x2f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3c:	4a3a      	ldr	r2, [pc, #232]	; (8004c28 <_tx_thread_create+0x2d8>)
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <_tx_thread_create+0x2f4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b48:	621a      	str	r2, [r3, #32]
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <_tx_thread_create+0x2f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <_tx_thread_create+0x21e>
 8004b52:	4b3d      	ldr	r3, [pc, #244]	; (8004c48 <_tx_thread_create+0x2f8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3b      	ldr	r2, [pc, #236]	; (8004c44 <_tx_thread_create+0x2f4>)
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4798      	blx	r3
 8004b5e:	e006      	b.n	8004b6e <_tx_thread_create+0x21e>
 8004b60:	4a31      	ldr	r2, [pc, #196]	; (8004c28 <_tx_thread_create+0x2d8>)
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <_tx_thread_create+0x2f4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6c:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004b6e:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <_tx_thread_create+0x2fc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <_tx_thread_create+0x2fc>)
 8004b76:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d129      	bne.n	8004bd2 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004b7e:	f3ef 8305 	mrs	r3, IPSR
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004b86:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <_tx_thread_create+0x2e0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004b90:	d30d      	bcc.n	8004bae <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <_tx_thread_create+0x300>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bac:	e001      	b.n	8004bb2 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f90c 	bl	8004ddc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01e      	beq.n	8004c08 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bd0:	e01a      	b.n	8004c08 <_tx_thread_create+0x2b8>
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f383 8810 	msr	PRIMASK, r3
}
 8004bdc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004be4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004be6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004be8:	b672      	cpsid	i
    return(int_posture);
 8004bea:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004bec:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004bee:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <_tx_thread_create+0x2fc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <_tx_thread_create+0x2fc>)
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004c04:	f000 f8b0 	bl	8004d68 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3760      	adds	r7, #96	; 0x60
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	080056f1 	.word	0x080056f1
 8004c18:	08004cd1 	.word	0x08004cd1
 8004c1c:	54485244 	.word	0x54485244
 8004c20:	20000dec 	.word	0x20000dec
 8004c24:	20000de8 	.word	0x20000de8
 8004c28:	200013fc 	.word	0x200013fc
 8004c2c:	20001400 	.word	0x20001400
 8004c30:	20000014 	.word	0x20000014
 8004c34:	20000de0 	.word	0x20000de0
 8004c38:	e0001004 	.word	0xe0001004
 8004c3c:	200013f8 	.word	0x200013f8
 8004c40:	200013f4 	.word	0x200013f4
 8004c44:	200013e8 	.word	0x200013e8
 8004c48:	20001404 	.word	0x20001404
 8004c4c:	20000e78 	.word	0x20000e78
 8004c50:	20000de4 	.word	0x20000de4

08004c54 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004c58:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <_tx_thread_initialize+0x54>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <_tx_thread_initialize+0x58>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <_tx_thread_initialize+0x5c>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <_tx_thread_initialize+0x60>)
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	2100      	movs	r1, #0
 8004c74:	4810      	ldr	r0, [pc, #64]	; (8004cb8 <_tx_thread_initialize+0x64>)
 8004c76:	f001 fa7b 	bl	8006170 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <_tx_thread_initialize+0x68>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <_tx_thread_initialize+0x6c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <_tx_thread_initialize+0x70>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004c8c:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <_tx_thread_initialize+0x74>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <_tx_thread_initialize+0x78>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 8004c9a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8004c9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <_tx_thread_initialize+0x78>)
 8004ca0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000de0 	.word	0x20000de0
 8004cac:	20000de4 	.word	0x20000de4
 8004cb0:	20000df0 	.word	0x20000df0
 8004cb4:	20000df4 	.word	0x20000df4
 8004cb8:	20000df8 	.word	0x20000df8
 8004cbc:	20000de8 	.word	0x20000de8
 8004cc0:	20000dec 	.word	0x20000dec
 8004cc4:	20000e78 	.word	0x20000e78
 8004cc8:	20000e7c 	.word	0x20000e7c
 8004ccc:	20000e80 	.word	0x20000e80

08004cd0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004cd6:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <_tx_thread_shell_entry+0x8c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <_tx_thread_shell_entry+0x90>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <_tx_thread_shell_entry+0x90>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69f8      	ldr	r0, [r7, #28]
 8004cf6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfc:	607b      	str	r3, [r7, #4]
    return(posture);
 8004cfe:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004d00:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d02:	b672      	cpsid	i
    return(int_posture);
 8004d04:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004d06:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2201      	movs	r2, #1
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	2200      	movs	r2, #0
 8004d18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <_tx_thread_shell_entry+0x94>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <_tx_thread_shell_entry+0x94>)
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f383 8810 	msr	PRIMASK, r3
}
 8004d2e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8004d30:	f3ef 8314 	mrs	r3, CONTROL
 8004d34:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8004d36:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f383 8814 	msr	CONTROL, r3
}
 8004d4c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004d4e:	69f8      	ldr	r0, [r7, #28]
 8004d50:	f000 f9fe 	bl	8005150 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004d54:	bf00      	nop
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000de0 	.word	0x20000de0
 8004d60:	20000e7c 	.word	0x20000e7c
 8004d64:	20000e78 	.word	0x20000e78

08004d68 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d6e:	4b17      	ldr	r3, [pc, #92]	; (8004dcc <_tx_thread_system_preempt_check+0x64>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d121      	bne.n	8004dbe <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <_tx_thread_system_preempt_check+0x68>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <_tx_thread_system_preempt_check+0x6c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d017      	beq.n	8004dbe <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <_tx_thread_system_preempt_check+0x70>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d96:	f3ef 8305 	mrs	r3, IPSR
 8004d9a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004d9c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10c      	bne.n	8004dbc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004da8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004daa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004dac:	b662      	cpsie	i
}
 8004dae:	bf00      	nop
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004dbc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004dbe:	bf00      	nop
 8004dc0:	3724      	adds	r7, #36	; 0x24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000e78 	.word	0x20000e78
 8004dd0:	20000de0 	.word	0x20000de0
 8004dd4:	20000de4 	.word	0x20000de4
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b09e      	sub	sp, #120	; 0x78
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8004de4:	2300      	movs	r3, #0
 8004de6:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004de8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004df2:	b672      	cpsid	i
    return(int_posture);
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004df6:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	334c      	adds	r3, #76	; 0x4c
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fdaf 	bl	8005968 <_tx_timer_system_deactivate>
 8004e0a:	e002      	b.n	8004e12 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 8004e12:	4b8b      	ldr	r3, [pc, #556]	; (8005040 <_tx_thread_system_resume+0x264>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8004e18:	4b89      	ldr	r3, [pc, #548]	; (8005040 <_tx_thread_system_resume+0x264>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d06f      	beq.n	8004f04 <_tx_thread_system_resume+0x128>
 8004e24:	4b87      	ldr	r3, [pc, #540]	; (8005044 <_tx_thread_system_resume+0x268>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d069      	beq.n	8004f04 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004e30:	f3ef 8305 	mrs	r3, IPSR
 8004e34:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 8004e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e38:	4b83      	ldr	r3, [pc, #524]	; (8005048 <_tx_thread_system_resume+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e40:	4b82      	ldr	r3, [pc, #520]	; (800504c <_tx_thread_system_resume+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <_tx_thread_system_resume+0x88>
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	673b      	str	r3, [r7, #112]	; 0x70
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	041a      	lsls	r2, r3, #16
 8004e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e60:	673b      	str	r3, [r7, #112]	; 0x70
 8004e62:	e00e      	b.n	8004e82 <_tx_thread_system_resume+0xa6>
 8004e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e66:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004e6a:	d205      	bcs.n	8004e78 <_tx_thread_system_resume+0x9c>
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e76:	e004      	b.n	8004e82 <_tx_thread_system_resume+0xa6>
 8004e78:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8004e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7e:	2300      	movs	r3, #0
 8004e80:	673b      	str	r3, [r7, #112]	; 0x70
 8004e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e90:	2201      	movs	r2, #1
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	4b6e      	ldr	r3, [pc, #440]	; (8005050 <_tx_thread_system_resume+0x274>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea8:	615a      	str	r2, [r3, #20]
 8004eaa:	f107 020c 	add.w	r2, r7, #12
 8004eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	4b68      	ldr	r3, [pc, #416]	; (8005054 <_tx_thread_system_resume+0x278>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eba:	61da      	str	r2, [r3, #28]
 8004ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ebe:	3320      	adds	r3, #32
 8004ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec2:	4b65      	ldr	r3, [pc, #404]	; (8005058 <_tx_thread_system_resume+0x27c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d314      	bcc.n	8004ef6 <_tx_thread_system_resume+0x11a>
 8004ecc:	4b63      	ldr	r3, [pc, #396]	; (800505c <_tx_thread_system_resume+0x280>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed2:	4a5b      	ldr	r2, [pc, #364]	; (8005040 <_tx_thread_system_resume+0x264>)
 8004ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	4b61      	ldr	r3, [pc, #388]	; (8005060 <_tx_thread_system_resume+0x284>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	621a      	str	r2, [r3, #32]
 8004ee0:	4b60      	ldr	r3, [pc, #384]	; (8005064 <_tx_thread_system_resume+0x288>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00d      	beq.n	8004f04 <_tx_thread_system_resume+0x128>
 8004ee8:	4b5e      	ldr	r3, [pc, #376]	; (8005064 <_tx_thread_system_resume+0x288>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5c      	ldr	r2, [pc, #368]	; (8005060 <_tx_thread_system_resume+0x284>)
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
 8004ef4:	e006      	b.n	8004f04 <_tx_thread_system_resume+0x128>
 8004ef6:	4a52      	ldr	r2, [pc, #328]	; (8005040 <_tx_thread_system_resume+0x264>)
 8004ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	4b58      	ldr	r3, [pc, #352]	; (8005060 <_tx_thread_system_resume+0x284>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f02:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8004f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8004f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004f10:	4b55      	ldr	r3, [pc, #340]	; (8005068 <_tx_thread_system_resume+0x28c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	4a54      	ldr	r2, [pc, #336]	; (8005068 <_tx_thread_system_resume+0x28c>)
 8004f18:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80b3 	bne.w	800508a <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80c7 	beq.w	80050bc <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 80a2 	bne.w	800507c <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8004f44:	4a49      	ldr	r2, [pc, #292]	; (800506c <_tx_thread_system_resume+0x290>)
 8004f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4c:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d164      	bne.n	800501e <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004f54:	4945      	ldr	r1, [pc, #276]	; (800506c <_tx_thread_system_resume+0x290>)
 8004f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004f74:	4b3e      	ldr	r3, [pc, #248]	; (8005070 <_tx_thread_system_resume+0x294>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <_tx_thread_system_resume+0x294>)
 8004f7e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004f80:	4b3c      	ldr	r3, [pc, #240]	; (8005074 <_tx_thread_system_resume+0x298>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f86:	429a      	cmp	r2, r3
 8004f88:	f080 8098 	bcs.w	80050bc <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004f8c:	4a39      	ldr	r2, [pc, #228]	; (8005074 <_tx_thread_system_resume+0x298>)
 8004f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f90:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004f92:	4b30      	ldr	r3, [pc, #192]	; (8005054 <_tx_thread_system_resume+0x278>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <_tx_thread_system_resume+0x278>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e08a      	b.n	80050bc <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004faa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fac:	429a      	cmp	r2, r3
 8004fae:	f080 8085 	bcs.w	80050bc <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <_tx_thread_system_resume+0x278>)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8004fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8004fc8:	4b22      	ldr	r3, [pc, #136]	; (8005054 <_tx_thread_system_resume+0x278>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd0:	61da      	str	r2, [r3, #28]
 8004fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <_tx_thread_system_resume+0x28c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f040 80a1 	bne.w	800512e <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <_tx_thread_system_resume+0x29c>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004ff4:	f3ef 8305 	mrs	r3, IPSR
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f040 8098 	bne.w	8005132 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 800500c:	b662      	cpsie	i
}
 800500e:	bf00      	nop
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	bf00      	nop
}
 800501c:	e089      	b.n	8005132 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800501e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8005024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005034:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e03e      	b.n	80050bc <_tx_thread_system_resume+0x2e0>
 800503e:	bf00      	nop
 8005040:	200013fc 	.word	0x200013fc
 8005044:	20001400 	.word	0x20001400
 8005048:	20000014 	.word	0x20000014
 800504c:	20000de0 	.word	0x20000de0
 8005050:	e0001004 	.word	0xe0001004
 8005054:	20000de4 	.word	0x20000de4
 8005058:	200013f8 	.word	0x200013f8
 800505c:	200013f4 	.word	0x200013f4
 8005060:	200013e8 	.word	0x200013e8
 8005064:	20001404 	.word	0x20001404
 8005068:	20000e78 	.word	0x20000e78
 800506c:	20000df8 	.word	0x20000df8
 8005070:	20000df0 	.word	0x20000df0
 8005074:	20000df4 	.word	0x20000df4
 8005078:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2203      	movs	r2, #3
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
 8005088:	e018      	b.n	80050bc <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508e:	2b01      	cmp	r3, #1
 8005090:	d014      	beq.n	80050bc <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	2b02      	cmp	r3, #2
 8005098:	d010      	beq.n	80050bc <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	; 0x30
 80050ae:	e005      	b.n	80050bc <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 80050bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80050c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d104      	bne.n	80050d6 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <_tx_thread_system_resume+0x364>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d4:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80050d6:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <_tx_thread_system_resume+0x368>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050de:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f383 8810 	msr	PRIMASK, r3
}
 80050e6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <_tx_thread_system_resume+0x364>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d022      	beq.n	8005138 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <_tx_thread_system_resume+0x36c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 80050f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11c      	bne.n	8005138 <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80050fe:	4b13      	ldr	r3, [pc, #76]	; (800514c <_tx_thread_system_resume+0x370>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800510c:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 800510e:	2b00      	cmp	r3, #0
 8005110:	d111      	bne.n	8005136 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005112:	f3ef 8310 	mrs	r3, PRIMASK
 8005116:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005118:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 800511a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800511c:	b662      	cpsie	i
}
 800511e:	bf00      	nop
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f383 8810 	msr	PRIMASK, r3
}
 800512a:	bf00      	nop
}
 800512c:	e003      	b.n	8005136 <_tx_thread_system_resume+0x35a>
                                return;
 800512e:	bf00      	nop
 8005130:	e002      	b.n	8005138 <_tx_thread_system_resume+0x35c>
 8005132:	bf00      	nop
 8005134:	e000      	b.n	8005138 <_tx_thread_system_resume+0x35c>
 8005136:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8005138:	3778      	adds	r7, #120	; 0x78
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000de4 	.word	0x20000de4
 8005144:	20000de0 	.word	0x20000de0
 8005148:	20000e78 	.word	0x20000e78
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b0a4      	sub	sp, #144	; 0x90
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800515e:	4b98      	ldr	r3, [pc, #608]	; (80053c0 <_tx_thread_system_suspend+0x270>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005166:	f3ef 8310 	mrs	r3, PRIMASK
 800516a:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 800516c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 800516e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005170:	b672      	cpsid	i
    return(int_posture);
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8005174:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800517c:	429a      	cmp	r2, r3
 800517e:	d112      	bne.n	80051a6 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8005186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005188:	2b00      	cmp	r3, #0
 800518a:	d008      	beq.n	800519e <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800518c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d004      	beq.n	800519e <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	334c      	adds	r3, #76	; 0x4c
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fb83 	bl	80058a4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	4a88      	ldr	r2, [pc, #544]	; (80053c4 <_tx_thread_system_suspend+0x274>)
 80051a4:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80051a6:	4b88      	ldr	r3, [pc, #544]	; (80053c8 <_tx_thread_system_suspend+0x278>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	4a86      	ldr	r2, [pc, #536]	; (80053c8 <_tx_thread_system_suspend+0x278>)
 80051ae:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f040 817d 	bne.w	80054b4 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 80051ba:	4b84      	ldr	r3, [pc, #528]	; (80053cc <_tx_thread_system_suspend+0x27c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80051c0:	4b82      	ldr	r3, [pc, #520]	; (80053cc <_tx_thread_system_suspend+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	673b      	str	r3, [r7, #112]	; 0x70
 80051c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d07c      	beq.n	80052c6 <_tx_thread_system_suspend+0x176>
 80051cc:	4b80      	ldr	r3, [pc, #512]	; (80053d0 <_tx_thread_system_suspend+0x280>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d076      	beq.n	80052c6 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 80051de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e0:	4b7c      	ldr	r3, [pc, #496]	; (80053d4 <_tx_thread_system_suspend+0x284>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e8:	4b75      	ldr	r3, [pc, #468]	; (80053c0 <_tx_thread_system_suspend+0x270>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d110      	bne.n	8005218 <_tx_thread_system_suspend+0xc8>
 80051f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	041a      	lsls	r2, r3, #16
 8005208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800520c:	4313      	orrs	r3, r2
 800520e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005216:	e013      	b.n	8005240 <_tx_thread_system_suspend+0xf0>
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800521e:	d208      	bcs.n	8005232 <_tx_thread_system_suspend+0xe2>
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005228:	f04f 33ff 	mov.w	r3, #4294967295
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005230:	e006      	b.n	8005240 <_tx_thread_system_suspend+0xf0>
 8005232:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8005236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005240:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800524e:	605a      	str	r2, [r3, #4]
 8005250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005252:	2202      	movs	r2, #2
 8005254:	609a      	str	r2, [r3, #8]
 8005256:	4b60      	ldr	r3, [pc, #384]	; (80053d8 <_tx_thread_system_suspend+0x288>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005262:	611a      	str	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800526a:	615a      	str	r2, [r3, #20]
 800526c:	f107 0208 	add.w	r2, r7, #8
 8005270:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005272:	619a      	str	r2, [r3, #24]
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <_tx_thread_system_suspend+0x28c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800527c:	61da      	str	r2, [r3, #28]
 800527e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005280:	3320      	adds	r3, #32
 8005282:	673b      	str	r3, [r7, #112]	; 0x70
 8005284:	4b56      	ldr	r3, [pc, #344]	; (80053e0 <_tx_thread_system_suspend+0x290>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d314      	bcc.n	80052b8 <_tx_thread_system_suspend+0x168>
 800528e:	4b55      	ldr	r3, [pc, #340]	; (80053e4 <_tx_thread_system_suspend+0x294>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	673b      	str	r3, [r7, #112]	; 0x70
 8005294:	4a4d      	ldr	r2, [pc, #308]	; (80053cc <_tx_thread_system_suspend+0x27c>)
 8005296:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	4b53      	ldr	r3, [pc, #332]	; (80053e8 <_tx_thread_system_suspend+0x298>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052a0:	621a      	str	r2, [r3, #32]
 80052a2:	4b52      	ldr	r3, [pc, #328]	; (80053ec <_tx_thread_system_suspend+0x29c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <_tx_thread_system_suspend+0x176>
 80052aa:	4b50      	ldr	r3, [pc, #320]	; (80053ec <_tx_thread_system_suspend+0x29c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a4e      	ldr	r2, [pc, #312]	; (80053e8 <_tx_thread_system_suspend+0x298>)
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	4610      	mov	r0, r2
 80052b4:	4798      	blx	r3
 80052b6:	e006      	b.n	80052c6 <_tx_thread_system_suspend+0x176>
 80052b8:	4a44      	ldr	r2, [pc, #272]	; (80053cc <_tx_thread_system_suspend+0x27c>)
 80052ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	4b4a      	ldr	r3, [pc, #296]	; (80053e8 <_tx_thread_system_suspend+0x298>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80052c4:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 80052c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 80052cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80052e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d016      	beq.n	800531c <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80052f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80052fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052fe:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a3b      	ldr	r2, [pc, #236]	; (80053f0 <_tx_thread_system_suspend+0x2a0>)
 8005304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	f040 8085 	bne.w	800541a <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4937      	ldr	r1, [pc, #220]	; (80053f0 <_tx_thread_system_suspend+0x2a0>)
 8005314:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800531a:	e07e      	b.n	800541a <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a34      	ldr	r2, [pc, #208]	; (80053f0 <_tx_thread_system_suspend+0x2a0>)
 8005320:	2100      	movs	r1, #0
 8005322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2201      	movs	r2, #1
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005330:	4b30      	ldr	r3, [pc, #192]	; (80053f4 <_tx_thread_system_suspend+0x2a4>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	43db      	mvns	r3, r3
 8005338:	4013      	ands	r3, r2
 800533a:	4a2e      	ldr	r2, [pc, #184]	; (80053f4 <_tx_thread_system_suspend+0x2a4>)
 800533c:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800533e:	2300      	movs	r3, #0
 8005340:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005342:	4b2c      	ldr	r3, [pc, #176]	; (80053f4 <_tx_thread_system_suspend+0x2a4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8005348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d158      	bne.n	8005400 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800534e:	4b2a      	ldr	r3, [pc, #168]	; (80053f8 <_tx_thread_system_suspend+0x2a8>)
 8005350:	2220      	movs	r2, #32
 8005352:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <_tx_thread_system_suspend+0x28c>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 800535a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8005360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005368:	429a      	cmp	r2, r3
 800536a:	d102      	bne.n	8005372 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
 8005372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005378:	f383 8810 	msr	PRIMASK, r3
}
 800537c:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <_tx_thread_system_suspend+0x278>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8005384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 80bf 	bne.w	800550a <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <_tx_thread_system_suspend+0x2ac>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005394:	f3ef 8305 	mrs	r3, IPSR
 8005398:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800539a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10c      	bne.n	80053ba <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053a0:	f3ef 8310 	mrs	r3, PRIMASK
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80053a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80053a8:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80053aa:	b662      	cpsie	i
}
 80053ac:	bf00      	nop
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	bf00      	nop
}
 80053ba:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80053bc:	e0a5      	b.n	800550a <_tx_thread_system_suspend+0x3ba>
 80053be:	bf00      	nop
 80053c0:	20000de0 	.word	0x20000de0
 80053c4:	200013e4 	.word	0x200013e4
 80053c8:	20000e78 	.word	0x20000e78
 80053cc:	200013fc 	.word	0x200013fc
 80053d0:	20001400 	.word	0x20001400
 80053d4:	20000014 	.word	0x20000014
 80053d8:	e0001004 	.word	0xe0001004
 80053dc:	20000de4 	.word	0x20000de4
 80053e0:	200013f8 	.word	0x200013f8
 80053e4:	200013f4 	.word	0x200013f4
 80053e8:	200013e8 	.word	0x200013e8
 80053ec:	20001404 	.word	0x20001404
 80053f0:	20000df8 	.word	0x20000df8
 80053f4:	20000df0 	.word	0x20000df0
 80053f8:	20000df4 	.word	0x20000df4
 80053fc:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800540a:	fab3 f383 	clz	r3, r3
 800540e:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005414:	4413      	add	r3, r2
 8005416:	4a41      	ldr	r2, [pc, #260]	; (800551c <_tx_thread_system_suspend+0x3cc>)
 8005418:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <_tx_thread_system_suspend+0x3d0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d139      	bne.n	8005498 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005424:	4b3d      	ldr	r3, [pc, #244]	; (800551c <_tx_thread_system_suspend+0x3cc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <_tx_thread_system_suspend+0x3d4>)
 800542a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542e:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <_tx_thread_system_suspend+0x3d0>)
 8005430:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8005432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8005438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005440:	429a      	cmp	r2, r3
 8005442:	d104      	bne.n	800544e <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8005444:	4b36      	ldr	r3, [pc, #216]	; (8005520 <_tx_thread_system_suspend+0x3d0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544c:	61da      	str	r2, [r3, #28]
 800544e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005450:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <_tx_thread_system_suspend+0x3d8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8005460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005462:	2b00      	cmp	r3, #0
 8005464:	d153      	bne.n	800550e <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <_tx_thread_system_suspend+0x3dc>)
 8005468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800546e:	f3ef 8305 	mrs	r3, IPSR
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10c      	bne.n	8005494 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800547a:	f3ef 8310 	mrs	r3, PRIMASK
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005484:	b662      	cpsie	i
}
 8005486:	bf00      	nop
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	f383 8810 	msr	PRIMASK, r3
}
 8005492:	bf00      	nop
}
 8005494:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8005496:	e03a      	b.n	800550e <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8005498:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 800549e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d104      	bne.n	80054b4 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <_tx_thread_system_suspend+0x3d0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b2:	61da      	str	r2, [r3, #28]
 80054b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f383 8810 	msr	PRIMASK, r3
}
 80054be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <_tx_thread_system_suspend+0x3d0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d022      	beq.n	8005512 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80054cc:	4b16      	ldr	r3, [pc, #88]	; (8005528 <_tx_thread_system_suspend+0x3d8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 80054d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11c      	bne.n	8005512 <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80054d8:	4b14      	ldr	r3, [pc, #80]	; (800552c <_tx_thread_system_suspend+0x3dc>)
 80054da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054de:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80054e0:	f3ef 8305 	mrs	r3, IPSR
 80054e4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80054e6:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10c      	bne.n	8005506 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054ec:	f3ef 8310 	mrs	r3, PRIMASK
 80054f0:	617b      	str	r3, [r7, #20]
    return(posture);
 80054f2:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80054f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80054f6:	b662      	cpsie	i
}
 80054f8:	bf00      	nop
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f383 8810 	msr	PRIMASK, r3
}
 8005504:	bf00      	nop
}
 8005506:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8005508:	e003      	b.n	8005512 <_tx_thread_system_suspend+0x3c2>
                return;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <_tx_thread_system_suspend+0x3c4>
            return;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <_tx_thread_system_suspend+0x3c4>
    return;
 8005512:	bf00      	nop
}
 8005514:	3790      	adds	r7, #144	; 0x90
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000df4 	.word	0x20000df4
 8005520:	20000de4 	.word	0x20000de4
 8005524:	20000df8 	.word	0x20000df8
 8005528:	20000e78 	.word	0x20000e78
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005536:	4b5f      	ldr	r3, [pc, #380]	; (80056b4 <_tx_thread_time_slice+0x184>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800553c:	f3ef 8310 	mrs	r3, PRIMASK
 8005540:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005542:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005544:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005546:	b672      	cpsid	i
    return(int_posture);
 8005548:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800554c:	4b5a      	ldr	r3, [pc, #360]	; (80056b8 <_tx_thread_time_slice+0x188>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d024      	beq.n	80055a2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555c:	2b00      	cmp	r3, #0
 800555e:	d120      	bne.n	80055a2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69d2      	ldr	r2, [r2, #28]
 8005566:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	4a53      	ldr	r2, [pc, #332]	; (80056bc <_tx_thread_time_slice+0x18c>)
 800556e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1a      	ldr	r2, [r3, #32]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d013      	beq.n	80055a2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	429a      	cmp	r2, r3
 8005584:	d10d      	bne.n	80055a2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	6a12      	ldr	r2, [r2, #32]
 800558e:	494c      	ldr	r1, [pc, #304]	; (80056c0 <_tx_thread_time_slice+0x190>)
 8005590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005594:	4b4b      	ldr	r3, [pc, #300]	; (80056c4 <_tx_thread_time_slice+0x194>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a49      	ldr	r2, [pc, #292]	; (80056c0 <_tx_thread_time_slice+0x190>)
 800559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559e:	4a4a      	ldr	r2, [pc, #296]	; (80056c8 <_tx_thread_time_slice+0x198>)
 80055a0:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055a2:	f3ef 8305 	mrs	r3, IPSR
 80055a6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80055a8:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 80055aa:	4b48      	ldr	r3, [pc, #288]	; (80056cc <_tx_thread_time_slice+0x19c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 80055b2:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <_tx_thread_time_slice+0x1a0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 80055b8:	4b46      	ldr	r3, [pc, #280]	; (80056d4 <_tx_thread_time_slice+0x1a4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d06d      	beq.n	80056a0 <_tx_thread_time_slice+0x170>
 80055c4:	4b44      	ldr	r3, [pc, #272]	; (80056d8 <_tx_thread_time_slice+0x1a8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d067      	beq.n	80056a0 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055d0:	f3ef 8305 	mrs	r3, IPSR
 80055d4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4b3c      	ldr	r3, [pc, #240]	; (80056cc <_tx_thread_time_slice+0x19c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	4b34      	ldr	r3, [pc, #208]	; (80056b4 <_tx_thread_time_slice+0x184>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	633b      	str	r3, [r7, #48]	; 0x30
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <_tx_thread_time_slice+0xd4>
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	637b      	str	r3, [r7, #52]	; 0x34
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f6:	041a      	lsls	r2, r3, #16
 80055f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	e00e      	b.n	8005622 <_tx_thread_time_slice+0xf2>
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800560a:	d205      	bcs.n	8005618 <_tx_thread_time_slice+0xe8>
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
 8005610:	f04f 33ff 	mov.w	r3, #4294967295
 8005614:	633b      	str	r3, [r7, #48]	; 0x30
 8005616:	e004      	b.n	8005622 <_tx_thread_time_slice+0xf2>
 8005618:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 800561c:	633b      	str	r3, [r7, #48]	; 0x30
 800561e:	2300      	movs	r3, #0
 8005620:	637b      	str	r3, [r7, #52]	; 0x34
 8005622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562c:	605a      	str	r2, [r3, #4]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	2205      	movs	r2, #5
 8005632:	609a      	str	r2, [r3, #8]
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <_tx_thread_time_slice+0x1ac>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <_tx_thread_time_slice+0x198>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	611a      	str	r2, [r3, #16]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564a:	615a      	str	r2, [r3, #20]
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	619a      	str	r2, [r3, #24]
 8005652:	1d3a      	adds	r2, r7, #4
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	61da      	str	r2, [r3, #28]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	3320      	adds	r3, #32
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <_tx_thread_time_slice+0x1b0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a3a      	ldr	r2, [r7, #32]
 8005664:	429a      	cmp	r2, r3
 8005666:	d314      	bcc.n	8005692 <_tx_thread_time_slice+0x162>
 8005668:	4b1e      	ldr	r3, [pc, #120]	; (80056e4 <_tx_thread_time_slice+0x1b4>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	623b      	str	r3, [r7, #32]
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <_tx_thread_time_slice+0x1a4>)
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <_tx_thread_time_slice+0x1b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	621a      	str	r2, [r3, #32]
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <_tx_thread_time_slice+0x1bc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <_tx_thread_time_slice+0x170>
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <_tx_thread_time_slice+0x1bc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <_tx_thread_time_slice+0x1b8>)
 800568a:	6812      	ldr	r2, [r2, #0]
 800568c:	4610      	mov	r0, r2
 800568e:	4798      	blx	r3
 8005690:	e006      	b.n	80056a0 <_tx_thread_time_slice+0x170>
 8005692:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <_tx_thread_time_slice+0x1a4>)
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <_tx_thread_time_slice+0x1b8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	621a      	str	r2, [r3, #32]
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80056ac:	bf00      	nop
 80056ae:	3738      	adds	r7, #56	; 0x38
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000de0 	.word	0x20000de0
 80056b8:	20000e88 	.word	0x20000e88
 80056bc:	200013e4 	.word	0x200013e4
 80056c0:	20000df8 	.word	0x20000df8
 80056c4:	20000df4 	.word	0x20000df4
 80056c8:	20000de4 	.word	0x20000de4
 80056cc:	20000014 	.word	0x20000014
 80056d0:	20000e78 	.word	0x20000e78
 80056d4:	200013fc 	.word	0x200013fc
 80056d8:	20001400 	.word	0x20001400
 80056dc:	e0001004 	.word	0xe0001004
 80056e0:	200013f8 	.word	0x200013f8
 80056e4:	200013f4 	.word	0x200013f4
 80056e8:	200013e8 	.word	0x200013e8
 80056ec:	20001404 	.word	0x20001404

080056f0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	617b      	str	r3, [r7, #20]
    return(posture);
 8005702:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005704:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005706:	b672      	cpsid	i
    return(int_posture);
 8005708:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800570a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b04      	cmp	r3, #4
 8005712:	d10e      	bne.n	8005732 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <_tx_thread_timeout+0x74>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	4a12      	ldr	r2, [pc, #72]	; (8005764 <_tx_thread_timeout+0x74>)
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f383 8810 	msr	PRIMASK, r3
}
 8005728:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800572a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800572c:	f7ff fb56 	bl	8004ddc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005730:	e013      	b.n	800575a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005736:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005758:	4798      	blx	r3
}
 800575a:	bf00      	nop
 800575c:	3728      	adds	r7, #40	; 0x28
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000e78 	.word	0x20000e78

08005768 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800576e:	f3ef 8310 	mrs	r3, PRIMASK
 8005772:	607b      	str	r3, [r7, #4]
    return(posture);
 8005774:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005776:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005778:	b672      	cpsid	i
    return(int_posture);
 800577a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800577c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800577e:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <_tx_timer_expiration_process+0x3c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	4a07      	ldr	r2, [pc, #28]	; (80057a4 <_tx_timer_expiration_process+0x3c>)
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005794:	4804      	ldr	r0, [pc, #16]	; (80057a8 <_tx_timer_expiration_process+0x40>)
 8005796:	f7ff fb21 	bl	8004ddc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000e78 	.word	0x20000e78
 80057a8:	20000f28 	.word	0x20000f28

080057ac <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80057b2:	4b28      	ldr	r3, [pc, #160]	; (8005854 <_tx_timer_initialize+0xa8>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80057b8:	4b27      	ldr	r3, [pc, #156]	; (8005858 <_tx_timer_initialize+0xac>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80057be:	4b27      	ldr	r3, [pc, #156]	; (800585c <_tx_timer_initialize+0xb0>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80057c4:	4b26      	ldr	r3, [pc, #152]	; (8005860 <_tx_timer_initialize+0xb4>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <_tx_timer_initialize+0xb8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80057d0:	2280      	movs	r2, #128	; 0x80
 80057d2:	2100      	movs	r1, #0
 80057d4:	4824      	ldr	r0, [pc, #144]	; (8005868 <_tx_timer_initialize+0xbc>)
 80057d6:	f000 fccb 	bl	8006170 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <_tx_timer_initialize+0xc0>)
 80057dc:	4a22      	ldr	r2, [pc, #136]	; (8005868 <_tx_timer_initialize+0xbc>)
 80057de:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80057e0:	4b23      	ldr	r3, [pc, #140]	; (8005870 <_tx_timer_initialize+0xc4>)
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <_tx_timer_initialize+0xbc>)
 80057e4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80057e6:	4b23      	ldr	r3, [pc, #140]	; (8005874 <_tx_timer_initialize+0xc8>)
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <_tx_timer_initialize+0xcc>)
 80057ea:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <_tx_timer_initialize+0xc8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3304      	adds	r3, #4
 80057f2:	4a20      	ldr	r2, [pc, #128]	; (8005874 <_tx_timer_initialize+0xc8>)
 80057f4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80057f6:	4b21      	ldr	r3, [pc, #132]	; (800587c <_tx_timer_initialize+0xd0>)
 80057f8:	4a21      	ldr	r2, [pc, #132]	; (8005880 <_tx_timer_initialize+0xd4>)
 80057fa:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80057fc:	4b21      	ldr	r3, [pc, #132]	; (8005884 <_tx_timer_initialize+0xd8>)
 80057fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005802:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005804:	4b20      	ldr	r3, [pc, #128]	; (8005888 <_tx_timer_initialize+0xdc>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800580a:	4b1c      	ldr	r3, [pc, #112]	; (800587c <_tx_timer_initialize+0xd0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <_tx_timer_initialize+0xd8>)
 8005810:	6812      	ldr	r2, [r2, #0]
 8005812:	491d      	ldr	r1, [pc, #116]	; (8005888 <_tx_timer_initialize+0xdc>)
 8005814:	6809      	ldr	r1, [r1, #0]
 8005816:	481c      	ldr	r0, [pc, #112]	; (8005888 <_tx_timer_initialize+0xdc>)
 8005818:	6800      	ldr	r0, [r0, #0]
 800581a:	2400      	movs	r4, #0
 800581c:	9405      	str	r4, [sp, #20]
 800581e:	2400      	movs	r4, #0
 8005820:	9404      	str	r4, [sp, #16]
 8005822:	9003      	str	r0, [sp, #12]
 8005824:	9102      	str	r1, [sp, #8]
 8005826:	9201      	str	r2, [sp, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	4b18      	ldr	r3, [pc, #96]	; (800588c <_tx_timer_initialize+0xe0>)
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <_tx_timer_initialize+0xe4>)
 800582e:	4919      	ldr	r1, [pc, #100]	; (8005894 <_tx_timer_initialize+0xe8>)
 8005830:	4819      	ldr	r0, [pc, #100]	; (8005898 <_tx_timer_initialize+0xec>)
 8005832:	f7ff f88d 	bl	8004950 <_tx_thread_create>
 8005836:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e5      	bne.n	800580a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <_tx_timer_initialize+0xf0>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8005844:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <_tx_timer_initialize+0xf4>)
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}
 8005852:	bf00      	nop
 8005854:	20000e84 	.word	0x20000e84
 8005858:	200013e4 	.word	0x200013e4
 800585c:	20000e88 	.word	0x20000e88
 8005860:	20000f18 	.word	0x20000f18
 8005864:	20000f24 	.word	0x20000f24
 8005868:	20000e8c 	.word	0x20000e8c
 800586c:	20000f0c 	.word	0x20000f0c
 8005870:	20000f14 	.word	0x20000f14
 8005874:	20000f10 	.word	0x20000f10
 8005878:	20000f08 	.word	0x20000f08
 800587c:	20000fd8 	.word	0x20000fd8
 8005880:	20000fe4 	.word	0x20000fe4
 8005884:	20000fdc 	.word	0x20000fdc
 8005888:	20000fe0 	.word	0x20000fe0
 800588c:	4154494d 	.word	0x4154494d
 8005890:	080059d9 	.word	0x080059d9
 8005894:	0800ab08 	.word	0x0800ab08
 8005898:	20000f28 	.word	0x20000f28
 800589c:	20000f1c 	.word	0x20000f1c
 80058a0:	20000f20 	.word	0x20000f20

080058a4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	; 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d04a      	beq.n	800594e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058be:	d046      	beq.n	800594e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d142      	bne.n	800594e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d902      	bls.n	80058d4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80058ce:	231f      	movs	r3, #31
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	e002      	b.n	80058da <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80058da:	4b20      	ldr	r3, [pc, #128]	; (800595c <_tx_timer_system_activate+0xb8>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <_tx_timer_system_activate+0xbc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d30b      	bcc.n	8005908 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <_tx_timer_system_activate+0xbc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	109b      	asrs	r3, r3, #2
 80058fa:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80058fc:	4b19      	ldr	r3, [pc, #100]	; (8005964 <_tx_timer_system_activate+0xc0>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e011      	b.n	8005948 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800594e:	bf00      	nop
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000f14 	.word	0x20000f14
 8005960:	20000f10 	.word	0x20000f10
 8005964:	20000f0c 	.word	0x20000f0c

08005968 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d026      	beq.n	80059ca <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	429a      	cmp	r2, r3
 8005988:	d108      	bne.n	800599c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	429a      	cmp	r2, r3
 8005992:	d117      	bne.n	80059c4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e013      	b.n	80059c4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d105      	bne.n	80059c4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	619a      	str	r2, [r3, #24]
    }
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b098      	sub	sp, #96	; 0x60
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80059e0:	2300      	movs	r3, #0
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a73      	ldr	r2, [pc, #460]	; (8005bb4 <_tx_timer_thread_entry+0x1dc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f040 80de 	bne.w	8005baa <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80059ee:	f3ef 8310 	mrs	r3, PRIMASK
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80059f8:	b672      	cpsid	i
    return(int_posture);
 80059fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80059fe:	4b6e      	ldr	r3, [pc, #440]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f107 020c 	add.w	r2, r7, #12
 8005a12:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005a14:	4b68      	ldr	r3, [pc, #416]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4a65      	ldr	r2, [pc, #404]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a24:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005a26:	4b64      	ldr	r3, [pc, #400]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b64      	ldr	r3, [pc, #400]	; (8005bbc <_tx_timer_thread_entry+0x1e4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d103      	bne.n	8005a3a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <_tx_timer_thread_entry+0x1e8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a60      	ldr	r2, [pc, #384]	; (8005bb8 <_tx_timer_thread_entry+0x1e0>)
 8005a38:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005a3a:	4b62      	ldr	r3, [pc, #392]	; (8005bc4 <_tx_timer_thread_entry+0x1ec>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a50:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a56:	b672      	cpsid	i
    return(int_posture);
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005a5c:	e07f      	b.n	8005b5e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005a6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d102      	bne.n	8005a7a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e00e      	b.n	8005a98 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a84:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a8a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	f107 020c 	add.w	r2, r7, #12
 8005a92:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a96:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d911      	bls.n	8005ac4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	f107 0208 	add.w	r2, r7, #8
 8005ab6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005abc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	e01a      	b.n	8005afa <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae2:	f107 0208 	add.w	r2, r7, #8
 8005ae6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aec:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	60bb      	str	r3, [r7, #8]
 8005af2:	e002      	b.n	8005afa <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005afa:	4a33      	ldr	r2, [pc, #204]	; (8005bc8 <_tx_timer_thread_entry+0x1f0>)
 8005afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	f383 8810 	msr	PRIMASK, r3
}
 8005b0a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8005b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8005b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b14:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005b16:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b22:	b672      	cpsid	i
    return(int_posture);
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005b26:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <_tx_timer_thread_entry+0x1f0>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d105      	bne.n	8005b42 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005b3c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005b3e:	f7ff feb1 	bl	80058a4 <_tx_timer_system_activate>
 8005b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f383 8810 	msr	PRIMASK, r3
}
 8005b4c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b52:	623b      	str	r3, [r7, #32]
    return(posture);
 8005b54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005b56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b58:	b672      	cpsid	i
    return(int_posture);
 8005b5a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af7c 	bne.w	8005a5e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005b66:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <_tx_timer_thread_entry+0x1ec>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005b6e:	4b17      	ldr	r3, [pc, #92]	; (8005bcc <_tx_timer_thread_entry+0x1f4>)
 8005b70:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b74:	2203      	movs	r2, #3
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <_tx_timer_thread_entry+0x1f8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <_tx_timer_thread_entry+0x1f8>)
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f383 8810 	msr	PRIMASK, r3
}
 8005b92:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005b94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005b96:	f7ff fadb 	bl	8005150 <_tx_thread_system_suspend>
 8005b9a:	e728      	b.n	80059ee <_tx_timer_thread_entry+0x16>
 8005b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b9e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f383 8810 	msr	PRIMASK, r3
}
 8005ba6:	bf00      	nop
            TX_DISABLE
 8005ba8:	e721      	b.n	80059ee <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005baa:	bf00      	nop
 8005bac:	3760      	adds	r7, #96	; 0x60
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	4154494d 	.word	0x4154494d
 8005bb8:	20000f14 	.word	0x20000f14
 8005bbc:	20000f10 	.word	0x20000f10
 8005bc0:	20000f0c 	.word	0x20000f0c
 8005bc4:	20000f18 	.word	0x20000f18
 8005bc8:	20000f24 	.word	0x20000f24
 8005bcc:	20000f28 	.word	0x20000f28
 8005bd0:	20000e78 	.word	0x20000e78

08005bd4 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <_tx_trace_initialize+0x34>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <_tx_trace_initialize+0x38>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8005be4:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <_tx_trace_initialize+0x3c>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <_tx_trace_initialize+0x40>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8005bf0:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <_tx_trace_initialize+0x44>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <_tx_trace_initialize+0x48>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200013e8 	.word	0x200013e8
 8005c0c:	200013ec 	.word	0x200013ec
 8005c10:	200013f0 	.word	0x200013f0
 8005c14:	200013f4 	.word	0x200013f4
 8005c18:	200013f8 	.word	0x200013f8
 8005c1c:	200013fc 	.word	0x200013fc

08005c20 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b08d      	sub	sp, #52	; 0x34
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8005c30:	4b6d      	ldr	r3, [pc, #436]	; (8005de8 <_tx_trace_object_register+0x1c8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80d0 	beq.w	8005dda <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 8005c3a:	4b6c      	ldr	r3, [pc, #432]	; (8005dec <_tx_trace_object_register+0x1cc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8005c40:	4b6b      	ldr	r3, [pc, #428]	; (8005df0 <_tx_trace_object_register+0x1d0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80c8 	beq.w	8005dda <_tx_trace_object_register+0x1ba>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 8005c52:	4b68      	ldr	r3, [pc, #416]	; (8005df4 <_tx_trace_object_register+0x1d4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005c58:	4b63      	ldr	r3, [pc, #396]	; (8005de8 <_tx_trace_object_register+0x1c8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8005c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c60:	4613      	mov	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	011b      	lsls	r3, r3, #4
 8005c68:	461a      	mov	r2, r3
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d103      	bne.n	8005c96 <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d02d      	beq.n	8005cf8 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11a      	bne.n	8005cda <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d102      	bne.n	8005cb2 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb0:	e013      	b.n	8005cda <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005cb2:	4b4d      	ldr	r3, [pc, #308]	; (8005de8 <_tx_trace_object_register+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cba:	4613      	mov	r3, r2
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	4413      	add	r3, r2
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	3301      	adds	r3, #1
 8005cde:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8005ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d301      	bcc.n	8005cec <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8005cec:	4b41      	ldr	r3, [pc, #260]	; (8005df4 <_tx_trace_object_register+0x1d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d1b0      	bne.n	8005c58 <_tx_trace_object_register+0x38>
 8005cf6:	e000      	b.n	8005cfa <_tx_trace_object_register+0xda>
                    break;
 8005cf8:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 8005cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d26b      	bcs.n	8005dda <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8005d02:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <_tx_trace_object_register+0x1d0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <_tx_trace_object_register+0x1d0>)
 8005d0a:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	3301      	adds	r3, #1
 8005d10:	6a3a      	ldr	r2, [r7, #32]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d904      	bls.n	8005d20 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a36      	ldr	r2, [pc, #216]	; (8005df4 <_tx_trace_object_register+0x1d4>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e002      	b.n	8005d26 <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8005d20:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <_tx_trace_object_register+0x1d4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8005d26:	4b30      	ldr	r3, [pc, #192]	; (8005de8 <_tx_trace_object_register+0x1c8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	4613      	mov	r3, r2
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4413      	add	r3, r2
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	461a      	mov	r2, r3
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d5e:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d64:	e014      	b.n	8005d90 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	4413      	add	r3, r2
 8005d70:	61fb      	str	r3, [r7, #28]

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	7819      	ldrb	r1, [r3, #0]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	460a      	mov	r2, r1
 8005d80:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d006      	beq.n	8005d98 <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	2b1e      	cmp	r3, #30
 8005d94:	d9e7      	bls.n	8005d66 <_tx_trace_object_register+0x146>
 8005d96:	e000      	b.n	8005d9a <_tx_trace_object_register+0x17a>
                    {
                        break;
 8005d98:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	4413      	add	r3, r2
 8005da0:	3310      	adds	r3, #16
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d110      	bne.n	8005dce <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	0a1b      	lsrs	r3, r3, #8
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8005dcc:	e005      	b.n	8005dda <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	70da      	strb	r2, [r3, #3]
}
 8005dda:	bf00      	nop
 8005ddc:	3734      	adds	r7, #52	; 0x34
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	200013ec 	.word	0x200013ec
 8005dec:	20001408 	.word	0x20001408
 8005df0:	2000140c 	.word	0x2000140c
 8005df4:	20001410 	.word	0x20001410

08005df8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b092      	sub	sp, #72	; 0x48
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005e06:	2300      	movs	r3, #0
 8005e08:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005e10:	2302      	movs	r3, #2
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	e075      	b.n	8005f02 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	2b34      	cmp	r3, #52	; 0x34
 8005e1a:	d002      	beq.n	8005e22 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	e06f      	b.n	8005f02 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e22:	f3ef 8310 	mrs	r3, PRIMASK
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e2c:	b672      	cpsid	i
    return(int_posture);
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005e30:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005e32:	4b3b      	ldr	r3, [pc, #236]	; (8005f20 <_txe_byte_pool_create+0x128>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	4a39      	ldr	r2, [pc, #228]	; (8005f20 <_txe_byte_pool_create+0x128>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	f383 8810 	msr	PRIMASK, r3
}
 8005e46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8005e48:	4b36      	ldr	r3, [pc, #216]	; (8005f24 <_txe_byte_pool_create+0x12c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
 8005e52:	e009      	b.n	8005e68 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d00b      	beq.n	8005e74 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e64:	3301      	adds	r3, #1
 8005e66:	643b      	str	r3, [r7, #64]	; 0x40
 8005e68:	4b2f      	ldr	r3, [pc, #188]	; (8005f28 <_txe_byte_pool_create+0x130>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3f0      	bcc.n	8005e54 <_txe_byte_pool_create+0x5c>
 8005e72:	e000      	b.n	8005e76 <_txe_byte_pool_create+0x7e>
                break;
 8005e74:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e76:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7a:	623b      	str	r3, [r7, #32]
    return(posture);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005e7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e80:	b672      	cpsid	i
    return(int_posture);
 8005e82:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005e84:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005e86:	4b26      	ldr	r3, [pc, #152]	; (8005f20 <_txe_byte_pool_create+0x128>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <_txe_byte_pool_create+0x128>)
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f383 8810 	msr	PRIMASK, r3
}
 8005e9a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005e9c:	f7fe ff64 	bl	8004d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d102      	bne.n	8005eae <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8005eac:	e029      	b.n	8005f02 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb8:	e023      	b.n	8005f02 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b63      	cmp	r3, #99	; 0x63
 8005ebe:	d802      	bhi.n	8005ec6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005ec0:	2305      	movs	r3, #5
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec4:	e01d      	b.n	8005f02 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005ec6:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <_txe_byte_pool_create+0x134>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ece:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <_txe_byte_pool_create+0x138>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d101      	bne.n	8005ed8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005ed4:	2313      	movs	r3, #19
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ed8:	f3ef 8305 	mrs	r3, IPSR
 8005edc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005ede:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005ee0:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <_txe_byte_pool_create+0x13c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00b      	beq.n	8005f02 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005eea:	f3ef 8305 	mrs	r3, IPSR
 8005eee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005ef0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <_txe_byte_pool_create+0x13c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005efc:	d201      	bcs.n	8005f02 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005efe:	2313      	movs	r3, #19
 8005f00:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7fe fb8a 	bl	8004628 <_tx_byte_pool_create>
 8005f14:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3748      	adds	r7, #72	; 0x48
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000e78 	.word	0x20000e78
 8005f24:	20000dd0 	.word	0x20000dd0
 8005f28:	20000dd4 	.word	0x20000dd4
 8005f2c:	20000de0 	.word	0x20000de0
 8005f30:	20000f28 	.word	0x20000f28
 8005f34:	20000014 	.word	0x20000014

08005f38 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b09a      	sub	sp, #104	; 0x68
 8005f3c:	af06      	add	r7, sp, #24
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005f46:	2300      	movs	r3, #0
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005f50:	230e      	movs	r3, #14
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f54:	e0bb      	b.n	80060ce <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8005f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f58:	2bb0      	cmp	r3, #176	; 0xb0
 8005f5a:	d002      	beq.n	8005f62 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005f5c:	230e      	movs	r3, #14
 8005f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f60:	e0b5      	b.n	80060ce <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f62:	f3ef 8310 	mrs	r3, PRIMASK
 8005f66:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f6c:	b672      	cpsid	i
    return(int_posture);
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005f72:	4b64      	ldr	r3, [pc, #400]	; (8006104 <_txe_thread_create+0x1cc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	4a62      	ldr	r2, [pc, #392]	; (8006104 <_txe_thread_create+0x1cc>)
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	f383 8810 	msr	PRIMASK, r3
}
 8005f86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8005f8c:	4b5e      	ldr	r3, [pc, #376]	; (8006108 <_txe_thread_create+0x1d0>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f94:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8005f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f9c:	4413      	add	r3, r2
 8005f9e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	e02b      	b.n	8006002 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d101      	bne.n	8005fb6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d028      	beq.n	800600e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d308      	bcc.n	8005fd8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d203      	bcs.n	8005fd8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d308      	bcc.n	8005ff4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d203      	bcs.n	8005ff4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005fec:	2300      	movs	r3, #0
 8005fee:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffa:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffe:	3301      	adds	r3, #1
 8006000:	647b      	str	r3, [r7, #68]	; 0x44
 8006002:	4b42      	ldr	r3, [pc, #264]	; (800610c <_txe_thread_create+0x1d4>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006008:	429a      	cmp	r2, r3
 800600a:	d3ce      	bcc.n	8005faa <_txe_thread_create+0x72>
 800600c:	e000      	b.n	8006010 <_txe_thread_create+0xd8>
                break;
 800600e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006010:	f3ef 8310 	mrs	r3, PRIMASK
 8006014:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006016:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006018:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800601a:	b672      	cpsid	i
    return(int_posture);
 800601c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006020:	4b38      	ldr	r3, [pc, #224]	; (8006104 <_txe_thread_create+0x1cc>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3b01      	subs	r3, #1
 8006026:	4a37      	ldr	r2, [pc, #220]	; (8006104 <_txe_thread_create+0x1cc>)
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f383 8810 	msr	PRIMASK, r3
}
 8006034:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006036:	f7fe fe97 	bl	8004d68 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603e:	429a      	cmp	r2, r3
 8006040:	d102      	bne.n	8006048 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8006042:	230e      	movs	r3, #14
 8006044:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006046:	e042      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8006048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800604e:	2303      	movs	r3, #3
 8006050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006052:	e03c      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d102      	bne.n	8006060 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800605a:	2303      	movs	r3, #3
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800605e:	e036      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8006060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006062:	2bc7      	cmp	r3, #199	; 0xc7
 8006064:	d802      	bhi.n	800606c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8006066:	2305      	movs	r3, #5
 8006068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800606a:	e030      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800606c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606e:	2b1f      	cmp	r3, #31
 8006070:	d902      	bls.n	8006078 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8006072:	230f      	movs	r3, #15
 8006074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006076:	e02a      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8006078:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800607a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800607c:	429a      	cmp	r2, r3
 800607e:	d902      	bls.n	8006086 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8006080:	2318      	movs	r3, #24
 8006082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006084:	e023      	b.n	80060ce <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8006086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d902      	bls.n	8006092 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800608c:	2310      	movs	r3, #16
 800608e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006090:	e01d      	b.n	80060ce <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8006092:	4b1f      	ldr	r3, [pc, #124]	; (8006110 <_txe_thread_create+0x1d8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <_txe_thread_create+0x1dc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d101      	bne.n	80060a4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80060a0:	2313      	movs	r3, #19
 80060a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060a4:	f3ef 8305 	mrs	r3, IPSR
 80060a8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80060aa:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <_txe_thread_create+0x1e0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80060b6:	f3ef 8305 	mrs	r3, IPSR
 80060ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80060bc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <_txe_thread_create+0x1e0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80060c8:	d201      	bcs.n	80060ce <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80060ca:	2313      	movs	r3, #19
 80060cc:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d112      	bne.n	80060fa <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	9305      	str	r3, [sp, #20]
 80060d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060de:	9303      	str	r3, [sp, #12]
 80060e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7fe fc2c 	bl	8004950 <_tx_thread_create>
 80060f8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80060fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3750      	adds	r7, #80	; 0x50
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000e78 	.word	0x20000e78
 8006108:	20000de8 	.word	0x20000de8
 800610c:	20000dec 	.word	0x20000dec
 8006110:	20000de0 	.word	0x20000de0
 8006114:	20000f28 	.word	0x20000f28
 8006118:	20000014 	.word	0x20000014

0800611c <__errno>:
 800611c:	4b01      	ldr	r3, [pc, #4]	; (8006124 <__errno+0x8>)
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000018 	.word	0x20000018

08006128 <__libc_init_array>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	4d0d      	ldr	r5, [pc, #52]	; (8006160 <__libc_init_array+0x38>)
 800612c:	4c0d      	ldr	r4, [pc, #52]	; (8006164 <__libc_init_array+0x3c>)
 800612e:	1b64      	subs	r4, r4, r5
 8006130:	10a4      	asrs	r4, r4, #2
 8006132:	2600      	movs	r6, #0
 8006134:	42a6      	cmp	r6, r4
 8006136:	d109      	bne.n	800614c <__libc_init_array+0x24>
 8006138:	4d0b      	ldr	r5, [pc, #44]	; (8006168 <__libc_init_array+0x40>)
 800613a:	4c0c      	ldr	r4, [pc, #48]	; (800616c <__libc_init_array+0x44>)
 800613c:	f004 fc90 	bl	800aa60 <_init>
 8006140:	1b64      	subs	r4, r4, r5
 8006142:	10a4      	asrs	r4, r4, #2
 8006144:	2600      	movs	r6, #0
 8006146:	42a6      	cmp	r6, r4
 8006148:	d105      	bne.n	8006156 <__libc_init_array+0x2e>
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006150:	4798      	blx	r3
 8006152:	3601      	adds	r6, #1
 8006154:	e7ee      	b.n	8006134 <__libc_init_array+0xc>
 8006156:	f855 3b04 	ldr.w	r3, [r5], #4
 800615a:	4798      	blx	r3
 800615c:	3601      	adds	r6, #1
 800615e:	e7f2      	b.n	8006146 <__libc_init_array+0x1e>
 8006160:	0800afe4 	.word	0x0800afe4
 8006164:	0800afe4 	.word	0x0800afe4
 8006168:	0800afe4 	.word	0x0800afe4
 800616c:	0800afe8 	.word	0x0800afe8

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <__cvt>:
 8006180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	ec55 4b10 	vmov	r4, r5, d0
 8006188:	2d00      	cmp	r5, #0
 800618a:	460e      	mov	r6, r1
 800618c:	4619      	mov	r1, r3
 800618e:	462b      	mov	r3, r5
 8006190:	bfbb      	ittet	lt
 8006192:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006196:	461d      	movlt	r5, r3
 8006198:	2300      	movge	r3, #0
 800619a:	232d      	movlt	r3, #45	; 0x2d
 800619c:	700b      	strb	r3, [r1, #0]
 800619e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061a4:	4691      	mov	r9, r2
 80061a6:	f023 0820 	bic.w	r8, r3, #32
 80061aa:	bfbc      	itt	lt
 80061ac:	4622      	movlt	r2, r4
 80061ae:	4614      	movlt	r4, r2
 80061b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061b4:	d005      	beq.n	80061c2 <__cvt+0x42>
 80061b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061ba:	d100      	bne.n	80061be <__cvt+0x3e>
 80061bc:	3601      	adds	r6, #1
 80061be:	2102      	movs	r1, #2
 80061c0:	e000      	b.n	80061c4 <__cvt+0x44>
 80061c2:	2103      	movs	r1, #3
 80061c4:	ab03      	add	r3, sp, #12
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	ab02      	add	r3, sp, #8
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	ec45 4b10 	vmov	d0, r4, r5
 80061d0:	4653      	mov	r3, sl
 80061d2:	4632      	mov	r2, r6
 80061d4:	f001 fdac 	bl	8007d30 <_dtoa_r>
 80061d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061dc:	4607      	mov	r7, r0
 80061de:	d102      	bne.n	80061e6 <__cvt+0x66>
 80061e0:	f019 0f01 	tst.w	r9, #1
 80061e4:	d022      	beq.n	800622c <__cvt+0xac>
 80061e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061ea:	eb07 0906 	add.w	r9, r7, r6
 80061ee:	d110      	bne.n	8006212 <__cvt+0x92>
 80061f0:	783b      	ldrb	r3, [r7, #0]
 80061f2:	2b30      	cmp	r3, #48	; 0x30
 80061f4:	d10a      	bne.n	800620c <__cvt+0x8c>
 80061f6:	2200      	movs	r2, #0
 80061f8:	2300      	movs	r3, #0
 80061fa:	4620      	mov	r0, r4
 80061fc:	4629      	mov	r1, r5
 80061fe:	f7fa fda3 	bl	8000d48 <__aeabi_dcmpeq>
 8006202:	b918      	cbnz	r0, 800620c <__cvt+0x8c>
 8006204:	f1c6 0601 	rsb	r6, r6, #1
 8006208:	f8ca 6000 	str.w	r6, [sl]
 800620c:	f8da 3000 	ldr.w	r3, [sl]
 8006210:	4499      	add	r9, r3
 8006212:	2200      	movs	r2, #0
 8006214:	2300      	movs	r3, #0
 8006216:	4620      	mov	r0, r4
 8006218:	4629      	mov	r1, r5
 800621a:	f7fa fd95 	bl	8000d48 <__aeabi_dcmpeq>
 800621e:	b108      	cbz	r0, 8006224 <__cvt+0xa4>
 8006220:	f8cd 900c 	str.w	r9, [sp, #12]
 8006224:	2230      	movs	r2, #48	; 0x30
 8006226:	9b03      	ldr	r3, [sp, #12]
 8006228:	454b      	cmp	r3, r9
 800622a:	d307      	bcc.n	800623c <__cvt+0xbc>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006230:	1bdb      	subs	r3, r3, r7
 8006232:	4638      	mov	r0, r7
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	b004      	add	sp, #16
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	9103      	str	r1, [sp, #12]
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	e7f0      	b.n	8006226 <__cvt+0xa6>

08006244 <__exponent>:
 8006244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006246:	4603      	mov	r3, r0
 8006248:	2900      	cmp	r1, #0
 800624a:	bfb8      	it	lt
 800624c:	4249      	neglt	r1, r1
 800624e:	f803 2b02 	strb.w	r2, [r3], #2
 8006252:	bfb4      	ite	lt
 8006254:	222d      	movlt	r2, #45	; 0x2d
 8006256:	222b      	movge	r2, #43	; 0x2b
 8006258:	2909      	cmp	r1, #9
 800625a:	7042      	strb	r2, [r0, #1]
 800625c:	dd2a      	ble.n	80062b4 <__exponent+0x70>
 800625e:	f10d 0407 	add.w	r4, sp, #7
 8006262:	46a4      	mov	ip, r4
 8006264:	270a      	movs	r7, #10
 8006266:	46a6      	mov	lr, r4
 8006268:	460a      	mov	r2, r1
 800626a:	fb91 f6f7 	sdiv	r6, r1, r7
 800626e:	fb07 1516 	mls	r5, r7, r6, r1
 8006272:	3530      	adds	r5, #48	; 0x30
 8006274:	2a63      	cmp	r2, #99	; 0x63
 8006276:	f104 34ff 	add.w	r4, r4, #4294967295
 800627a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800627e:	4631      	mov	r1, r6
 8006280:	dcf1      	bgt.n	8006266 <__exponent+0x22>
 8006282:	3130      	adds	r1, #48	; 0x30
 8006284:	f1ae 0502 	sub.w	r5, lr, #2
 8006288:	f804 1c01 	strb.w	r1, [r4, #-1]
 800628c:	1c44      	adds	r4, r0, #1
 800628e:	4629      	mov	r1, r5
 8006290:	4561      	cmp	r1, ip
 8006292:	d30a      	bcc.n	80062aa <__exponent+0x66>
 8006294:	f10d 0209 	add.w	r2, sp, #9
 8006298:	eba2 020e 	sub.w	r2, r2, lr
 800629c:	4565      	cmp	r5, ip
 800629e:	bf88      	it	hi
 80062a0:	2200      	movhi	r2, #0
 80062a2:	4413      	add	r3, r2
 80062a4:	1a18      	subs	r0, r3, r0
 80062a6:	b003      	add	sp, #12
 80062a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062b2:	e7ed      	b.n	8006290 <__exponent+0x4c>
 80062b4:	2330      	movs	r3, #48	; 0x30
 80062b6:	3130      	adds	r1, #48	; 0x30
 80062b8:	7083      	strb	r3, [r0, #2]
 80062ba:	70c1      	strb	r1, [r0, #3]
 80062bc:	1d03      	adds	r3, r0, #4
 80062be:	e7f1      	b.n	80062a4 <__exponent+0x60>

080062c0 <_printf_float>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ed2d 8b02 	vpush	{d8}
 80062c8:	b08d      	sub	sp, #52	; 0x34
 80062ca:	460c      	mov	r4, r1
 80062cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062d0:	4616      	mov	r6, r2
 80062d2:	461f      	mov	r7, r3
 80062d4:	4605      	mov	r5, r0
 80062d6:	f002 fe89 	bl	8008fec <_localeconv_r>
 80062da:	f8d0 a000 	ldr.w	sl, [r0]
 80062de:	4650      	mov	r0, sl
 80062e0:	f7fa f8b2 	bl	8000448 <strlen>
 80062e4:	2300      	movs	r3, #0
 80062e6:	930a      	str	r3, [sp, #40]	; 0x28
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062f4:	3307      	adds	r3, #7
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	f103 0208 	add.w	r2, r3, #8
 80062fe:	f8c8 2000 	str.w	r2, [r8]
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800630a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800630e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006312:	9307      	str	r3, [sp, #28]
 8006314:	f8cd 8018 	str.w	r8, [sp, #24]
 8006318:	ee08 0a10 	vmov	s16, r0
 800631c:	4b9f      	ldr	r3, [pc, #636]	; (800659c <_printf_float+0x2dc>)
 800631e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006322:	f04f 32ff 	mov.w	r2, #4294967295
 8006326:	f7fa fd41 	bl	8000dac <__aeabi_dcmpun>
 800632a:	bb88      	cbnz	r0, 8006390 <_printf_float+0xd0>
 800632c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006330:	4b9a      	ldr	r3, [pc, #616]	; (800659c <_printf_float+0x2dc>)
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	f7fa fd1b 	bl	8000d70 <__aeabi_dcmple>
 800633a:	bb48      	cbnz	r0, 8006390 <_printf_float+0xd0>
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7fa fd0a 	bl	8000d5c <__aeabi_dcmplt>
 8006348:	b110      	cbz	r0, 8006350 <_printf_float+0x90>
 800634a:	232d      	movs	r3, #45	; 0x2d
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	4b93      	ldr	r3, [pc, #588]	; (80065a0 <_printf_float+0x2e0>)
 8006352:	4894      	ldr	r0, [pc, #592]	; (80065a4 <_printf_float+0x2e4>)
 8006354:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006358:	bf94      	ite	ls
 800635a:	4698      	movls	r8, r3
 800635c:	4680      	movhi	r8, r0
 800635e:	2303      	movs	r3, #3
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	9b05      	ldr	r3, [sp, #20]
 8006364:	f023 0204 	bic.w	r2, r3, #4
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	f04f 0900 	mov.w	r9, #0
 800636e:	9700      	str	r7, [sp, #0]
 8006370:	4633      	mov	r3, r6
 8006372:	aa0b      	add	r2, sp, #44	; 0x2c
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f9d8 	bl	800672c <_printf_common>
 800637c:	3001      	adds	r0, #1
 800637e:	f040 8090 	bne.w	80064a2 <_printf_float+0x1e2>
 8006382:	f04f 30ff 	mov.w	r0, #4294967295
 8006386:	b00d      	add	sp, #52	; 0x34
 8006388:	ecbd 8b02 	vpop	{d8}
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006390:	4642      	mov	r2, r8
 8006392:	464b      	mov	r3, r9
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa fd08 	bl	8000dac <__aeabi_dcmpun>
 800639c:	b140      	cbz	r0, 80063b0 <_printf_float+0xf0>
 800639e:	464b      	mov	r3, r9
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bfbc      	itt	lt
 80063a4:	232d      	movlt	r3, #45	; 0x2d
 80063a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063aa:	487f      	ldr	r0, [pc, #508]	; (80065a8 <_printf_float+0x2e8>)
 80063ac:	4b7f      	ldr	r3, [pc, #508]	; (80065ac <_printf_float+0x2ec>)
 80063ae:	e7d1      	b.n	8006354 <_printf_float+0x94>
 80063b0:	6863      	ldr	r3, [r4, #4]
 80063b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063b6:	9206      	str	r2, [sp, #24]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	d13f      	bne.n	800643c <_printf_float+0x17c>
 80063bc:	2306      	movs	r3, #6
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	9b05      	ldr	r3, [sp, #20]
 80063c2:	6861      	ldr	r1, [r4, #4]
 80063c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063c8:	2300      	movs	r3, #0
 80063ca:	9303      	str	r3, [sp, #12]
 80063cc:	ab0a      	add	r3, sp, #40	; 0x28
 80063ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063d2:	ab09      	add	r3, sp, #36	; 0x24
 80063d4:	ec49 8b10 	vmov	d0, r8, r9
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7ff fecd 	bl	8006180 <__cvt>
 80063e6:	9b06      	ldr	r3, [sp, #24]
 80063e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063ea:	2b47      	cmp	r3, #71	; 0x47
 80063ec:	4680      	mov	r8, r0
 80063ee:	d108      	bne.n	8006402 <_printf_float+0x142>
 80063f0:	1cc8      	adds	r0, r1, #3
 80063f2:	db02      	blt.n	80063fa <_printf_float+0x13a>
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	4299      	cmp	r1, r3
 80063f8:	dd41      	ble.n	800647e <_printf_float+0x1be>
 80063fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80063fe:	fa5f fb8b 	uxtb.w	fp, fp
 8006402:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006406:	d820      	bhi.n	800644a <_printf_float+0x18a>
 8006408:	3901      	subs	r1, #1
 800640a:	465a      	mov	r2, fp
 800640c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006410:	9109      	str	r1, [sp, #36]	; 0x24
 8006412:	f7ff ff17 	bl	8006244 <__exponent>
 8006416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006418:	1813      	adds	r3, r2, r0
 800641a:	2a01      	cmp	r2, #1
 800641c:	4681      	mov	r9, r0
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	dc02      	bgt.n	8006428 <_printf_float+0x168>
 8006422:	6822      	ldr	r2, [r4, #0]
 8006424:	07d2      	lsls	r2, r2, #31
 8006426:	d501      	bpl.n	800642c <_printf_float+0x16c>
 8006428:	3301      	adds	r3, #1
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006430:	2b00      	cmp	r3, #0
 8006432:	d09c      	beq.n	800636e <_printf_float+0xae>
 8006434:	232d      	movs	r3, #45	; 0x2d
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	e798      	b.n	800636e <_printf_float+0xae>
 800643c:	9a06      	ldr	r2, [sp, #24]
 800643e:	2a47      	cmp	r2, #71	; 0x47
 8006440:	d1be      	bne.n	80063c0 <_printf_float+0x100>
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1bc      	bne.n	80063c0 <_printf_float+0x100>
 8006446:	2301      	movs	r3, #1
 8006448:	e7b9      	b.n	80063be <_printf_float+0xfe>
 800644a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800644e:	d118      	bne.n	8006482 <_printf_float+0x1c2>
 8006450:	2900      	cmp	r1, #0
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	dd0b      	ble.n	800646e <_printf_float+0x1ae>
 8006456:	6121      	str	r1, [r4, #16]
 8006458:	b913      	cbnz	r3, 8006460 <_printf_float+0x1a0>
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	07d0      	lsls	r0, r2, #31
 800645e:	d502      	bpl.n	8006466 <_printf_float+0x1a6>
 8006460:	3301      	adds	r3, #1
 8006462:	440b      	add	r3, r1
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	65a1      	str	r1, [r4, #88]	; 0x58
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	e7de      	b.n	800642c <_printf_float+0x16c>
 800646e:	b913      	cbnz	r3, 8006476 <_printf_float+0x1b6>
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	07d2      	lsls	r2, r2, #31
 8006474:	d501      	bpl.n	800647a <_printf_float+0x1ba>
 8006476:	3302      	adds	r3, #2
 8006478:	e7f4      	b.n	8006464 <_printf_float+0x1a4>
 800647a:	2301      	movs	r3, #1
 800647c:	e7f2      	b.n	8006464 <_printf_float+0x1a4>
 800647e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006484:	4299      	cmp	r1, r3
 8006486:	db05      	blt.n	8006494 <_printf_float+0x1d4>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	6121      	str	r1, [r4, #16]
 800648c:	07d8      	lsls	r0, r3, #31
 800648e:	d5ea      	bpl.n	8006466 <_printf_float+0x1a6>
 8006490:	1c4b      	adds	r3, r1, #1
 8006492:	e7e7      	b.n	8006464 <_printf_float+0x1a4>
 8006494:	2900      	cmp	r1, #0
 8006496:	bfd4      	ite	le
 8006498:	f1c1 0202 	rsble	r2, r1, #2
 800649c:	2201      	movgt	r2, #1
 800649e:	4413      	add	r3, r2
 80064a0:	e7e0      	b.n	8006464 <_printf_float+0x1a4>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	055a      	lsls	r2, r3, #21
 80064a6:	d407      	bmi.n	80064b8 <_printf_float+0x1f8>
 80064a8:	6923      	ldr	r3, [r4, #16]
 80064aa:	4642      	mov	r2, r8
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	d12c      	bne.n	8006510 <_printf_float+0x250>
 80064b6:	e764      	b.n	8006382 <_printf_float+0xc2>
 80064b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064bc:	f240 80e0 	bls.w	8006680 <_printf_float+0x3c0>
 80064c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	f7fa fc3e 	bl	8000d48 <__aeabi_dcmpeq>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d034      	beq.n	800653a <_printf_float+0x27a>
 80064d0:	4a37      	ldr	r2, [pc, #220]	; (80065b0 <_printf_float+0x2f0>)
 80064d2:	2301      	movs	r3, #1
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af51 	beq.w	8006382 <_printf_float+0xc2>
 80064e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064e4:	429a      	cmp	r2, r3
 80064e6:	db02      	blt.n	80064ee <_printf_float+0x22e>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07d8      	lsls	r0, r3, #31
 80064ec:	d510      	bpl.n	8006510 <_printf_float+0x250>
 80064ee:	ee18 3a10 	vmov	r3, s16
 80064f2:	4652      	mov	r2, sl
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	f43f af41 	beq.w	8006382 <_printf_float+0xc2>
 8006500:	f04f 0800 	mov.w	r8, #0
 8006504:	f104 091a 	add.w	r9, r4, #26
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	4543      	cmp	r3, r8
 800650e:	dc09      	bgt.n	8006524 <_printf_float+0x264>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	079b      	lsls	r3, r3, #30
 8006514:	f100 8105 	bmi.w	8006722 <_printf_float+0x462>
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800651c:	4298      	cmp	r0, r3
 800651e:	bfb8      	it	lt
 8006520:	4618      	movlt	r0, r3
 8006522:	e730      	b.n	8006386 <_printf_float+0xc6>
 8006524:	2301      	movs	r3, #1
 8006526:	464a      	mov	r2, r9
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	47b8      	blx	r7
 800652e:	3001      	adds	r0, #1
 8006530:	f43f af27 	beq.w	8006382 <_printf_float+0xc2>
 8006534:	f108 0801 	add.w	r8, r8, #1
 8006538:	e7e6      	b.n	8006508 <_printf_float+0x248>
 800653a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	dc39      	bgt.n	80065b4 <_printf_float+0x2f4>
 8006540:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <_printf_float+0x2f0>)
 8006542:	2301      	movs	r3, #1
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	f43f af19 	beq.w	8006382 <_printf_float+0xc2>
 8006550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006554:	4313      	orrs	r3, r2
 8006556:	d102      	bne.n	800655e <_printf_float+0x29e>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	d5d8      	bpl.n	8006510 <_printf_float+0x250>
 800655e:	ee18 3a10 	vmov	r3, s16
 8006562:	4652      	mov	r2, sl
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	f43f af09 	beq.w	8006382 <_printf_float+0xc2>
 8006570:	f04f 0900 	mov.w	r9, #0
 8006574:	f104 0a1a 	add.w	sl, r4, #26
 8006578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657a:	425b      	negs	r3, r3
 800657c:	454b      	cmp	r3, r9
 800657e:	dc01      	bgt.n	8006584 <_printf_float+0x2c4>
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	e792      	b.n	80064aa <_printf_float+0x1ea>
 8006584:	2301      	movs	r3, #1
 8006586:	4652      	mov	r2, sl
 8006588:	4631      	mov	r1, r6
 800658a:	4628      	mov	r0, r5
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f aef7 	beq.w	8006382 <_printf_float+0xc2>
 8006594:	f109 0901 	add.w	r9, r9, #1
 8006598:	e7ee      	b.n	8006578 <_printf_float+0x2b8>
 800659a:	bf00      	nop
 800659c:	7fefffff 	.word	0x7fefffff
 80065a0:	0800ab38 	.word	0x0800ab38
 80065a4:	0800ab3c 	.word	0x0800ab3c
 80065a8:	0800ab44 	.word	0x0800ab44
 80065ac:	0800ab40 	.word	0x0800ab40
 80065b0:	0800ab48 	.word	0x0800ab48
 80065b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065b8:	429a      	cmp	r2, r3
 80065ba:	bfa8      	it	ge
 80065bc:	461a      	movge	r2, r3
 80065be:	2a00      	cmp	r2, #0
 80065c0:	4691      	mov	r9, r2
 80065c2:	dc37      	bgt.n	8006634 <_printf_float+0x374>
 80065c4:	f04f 0b00 	mov.w	fp, #0
 80065c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065cc:	f104 021a 	add.w	r2, r4, #26
 80065d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	eba3 0309 	sub.w	r3, r3, r9
 80065d8:	455b      	cmp	r3, fp
 80065da:	dc33      	bgt.n	8006644 <_printf_float+0x384>
 80065dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e0:	429a      	cmp	r2, r3
 80065e2:	db3b      	blt.n	800665c <_printf_float+0x39c>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	07da      	lsls	r2, r3, #31
 80065e8:	d438      	bmi.n	800665c <_printf_float+0x39c>
 80065ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ec:	9a05      	ldr	r2, [sp, #20]
 80065ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065f0:	1a9a      	subs	r2, r3, r2
 80065f2:	eba3 0901 	sub.w	r9, r3, r1
 80065f6:	4591      	cmp	r9, r2
 80065f8:	bfa8      	it	ge
 80065fa:	4691      	movge	r9, r2
 80065fc:	f1b9 0f00 	cmp.w	r9, #0
 8006600:	dc35      	bgt.n	800666e <_printf_float+0x3ae>
 8006602:	f04f 0800 	mov.w	r8, #0
 8006606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800660a:	f104 0a1a 	add.w	sl, r4, #26
 800660e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	eba3 0309 	sub.w	r3, r3, r9
 8006618:	4543      	cmp	r3, r8
 800661a:	f77f af79 	ble.w	8006510 <_printf_float+0x250>
 800661e:	2301      	movs	r3, #1
 8006620:	4652      	mov	r2, sl
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	47b8      	blx	r7
 8006628:	3001      	adds	r0, #1
 800662a:	f43f aeaa 	beq.w	8006382 <_printf_float+0xc2>
 800662e:	f108 0801 	add.w	r8, r8, #1
 8006632:	e7ec      	b.n	800660e <_printf_float+0x34e>
 8006634:	4613      	mov	r3, r2
 8006636:	4631      	mov	r1, r6
 8006638:	4642      	mov	r2, r8
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	d1c0      	bne.n	80065c4 <_printf_float+0x304>
 8006642:	e69e      	b.n	8006382 <_printf_float+0xc2>
 8006644:	2301      	movs	r3, #1
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	9205      	str	r2, [sp, #20]
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f ae97 	beq.w	8006382 <_printf_float+0xc2>
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	f10b 0b01 	add.w	fp, fp, #1
 800665a:	e7b9      	b.n	80065d0 <_printf_float+0x310>
 800665c:	ee18 3a10 	vmov	r3, s16
 8006660:	4652      	mov	r2, sl
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	d1be      	bne.n	80065ea <_printf_float+0x32a>
 800666c:	e689      	b.n	8006382 <_printf_float+0xc2>
 800666e:	9a05      	ldr	r2, [sp, #20]
 8006670:	464b      	mov	r3, r9
 8006672:	4442      	add	r2, r8
 8006674:	4631      	mov	r1, r6
 8006676:	4628      	mov	r0, r5
 8006678:	47b8      	blx	r7
 800667a:	3001      	adds	r0, #1
 800667c:	d1c1      	bne.n	8006602 <_printf_float+0x342>
 800667e:	e680      	b.n	8006382 <_printf_float+0xc2>
 8006680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006682:	2a01      	cmp	r2, #1
 8006684:	dc01      	bgt.n	800668a <_printf_float+0x3ca>
 8006686:	07db      	lsls	r3, r3, #31
 8006688:	d538      	bpl.n	80066fc <_printf_float+0x43c>
 800668a:	2301      	movs	r3, #1
 800668c:	4642      	mov	r2, r8
 800668e:	4631      	mov	r1, r6
 8006690:	4628      	mov	r0, r5
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f ae74 	beq.w	8006382 <_printf_float+0xc2>
 800669a:	ee18 3a10 	vmov	r3, s16
 800669e:	4652      	mov	r2, sl
 80066a0:	4631      	mov	r1, r6
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b8      	blx	r7
 80066a6:	3001      	adds	r0, #1
 80066a8:	f43f ae6b 	beq.w	8006382 <_printf_float+0xc2>
 80066ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066b0:	2200      	movs	r2, #0
 80066b2:	2300      	movs	r3, #0
 80066b4:	f7fa fb48 	bl	8000d48 <__aeabi_dcmpeq>
 80066b8:	b9d8      	cbnz	r0, 80066f2 <_printf_float+0x432>
 80066ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066bc:	f108 0201 	add.w	r2, r8, #1
 80066c0:	3b01      	subs	r3, #1
 80066c2:	4631      	mov	r1, r6
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b8      	blx	r7
 80066c8:	3001      	adds	r0, #1
 80066ca:	d10e      	bne.n	80066ea <_printf_float+0x42a>
 80066cc:	e659      	b.n	8006382 <_printf_float+0xc2>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4652      	mov	r2, sl
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f ae52 	beq.w	8006382 <_printf_float+0xc2>
 80066de:	f108 0801 	add.w	r8, r8, #1
 80066e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	4543      	cmp	r3, r8
 80066e8:	dcf1      	bgt.n	80066ce <_printf_float+0x40e>
 80066ea:	464b      	mov	r3, r9
 80066ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066f0:	e6dc      	b.n	80064ac <_printf_float+0x1ec>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	f104 0a1a 	add.w	sl, r4, #26
 80066fa:	e7f2      	b.n	80066e2 <_printf_float+0x422>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4642      	mov	r2, r8
 8006700:	e7df      	b.n	80066c2 <_printf_float+0x402>
 8006702:	2301      	movs	r3, #1
 8006704:	464a      	mov	r2, r9
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae38 	beq.w	8006382 <_printf_float+0xc2>
 8006712:	f108 0801 	add.w	r8, r8, #1
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800671a:	1a5b      	subs	r3, r3, r1
 800671c:	4543      	cmp	r3, r8
 800671e:	dcf0      	bgt.n	8006702 <_printf_float+0x442>
 8006720:	e6fa      	b.n	8006518 <_printf_float+0x258>
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	f104 0919 	add.w	r9, r4, #25
 800672a:	e7f4      	b.n	8006716 <_printf_float+0x456>

0800672c <_printf_common>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	4616      	mov	r6, r2
 8006732:	4699      	mov	r9, r3
 8006734:	688a      	ldr	r2, [r1, #8]
 8006736:	690b      	ldr	r3, [r1, #16]
 8006738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800673c:	4293      	cmp	r3, r2
 800673e:	bfb8      	it	lt
 8006740:	4613      	movlt	r3, r2
 8006742:	6033      	str	r3, [r6, #0]
 8006744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006748:	4607      	mov	r7, r0
 800674a:	460c      	mov	r4, r1
 800674c:	b10a      	cbz	r2, 8006752 <_printf_common+0x26>
 800674e:	3301      	adds	r3, #1
 8006750:	6033      	str	r3, [r6, #0]
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	0699      	lsls	r1, r3, #26
 8006756:	bf42      	ittt	mi
 8006758:	6833      	ldrmi	r3, [r6, #0]
 800675a:	3302      	addmi	r3, #2
 800675c:	6033      	strmi	r3, [r6, #0]
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	f015 0506 	ands.w	r5, r5, #6
 8006764:	d106      	bne.n	8006774 <_printf_common+0x48>
 8006766:	f104 0a19 	add.w	sl, r4, #25
 800676a:	68e3      	ldr	r3, [r4, #12]
 800676c:	6832      	ldr	r2, [r6, #0]
 800676e:	1a9b      	subs	r3, r3, r2
 8006770:	42ab      	cmp	r3, r5
 8006772:	dc26      	bgt.n	80067c2 <_printf_common+0x96>
 8006774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006778:	1e13      	subs	r3, r2, #0
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	bf18      	it	ne
 800677e:	2301      	movne	r3, #1
 8006780:	0692      	lsls	r2, r2, #26
 8006782:	d42b      	bmi.n	80067dc <_printf_common+0xb0>
 8006784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006788:	4649      	mov	r1, r9
 800678a:	4638      	mov	r0, r7
 800678c:	47c0      	blx	r8
 800678e:	3001      	adds	r0, #1
 8006790:	d01e      	beq.n	80067d0 <_printf_common+0xa4>
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	68e5      	ldr	r5, [r4, #12]
 8006796:	6832      	ldr	r2, [r6, #0]
 8006798:	f003 0306 	and.w	r3, r3, #6
 800679c:	2b04      	cmp	r3, #4
 800679e:	bf08      	it	eq
 80067a0:	1aad      	subeq	r5, r5, r2
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	bf0c      	ite	eq
 80067a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067ac:	2500      	movne	r5, #0
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bfc4      	itt	gt
 80067b2:	1a9b      	subgt	r3, r3, r2
 80067b4:	18ed      	addgt	r5, r5, r3
 80067b6:	2600      	movs	r6, #0
 80067b8:	341a      	adds	r4, #26
 80067ba:	42b5      	cmp	r5, r6
 80067bc:	d11a      	bne.n	80067f4 <_printf_common+0xc8>
 80067be:	2000      	movs	r0, #0
 80067c0:	e008      	b.n	80067d4 <_printf_common+0xa8>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4652      	mov	r2, sl
 80067c6:	4649      	mov	r1, r9
 80067c8:	4638      	mov	r0, r7
 80067ca:	47c0      	blx	r8
 80067cc:	3001      	adds	r0, #1
 80067ce:	d103      	bne.n	80067d8 <_printf_common+0xac>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d8:	3501      	adds	r5, #1
 80067da:	e7c6      	b.n	800676a <_printf_common+0x3e>
 80067dc:	18e1      	adds	r1, r4, r3
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	2030      	movs	r0, #48	; 0x30
 80067e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067e6:	4422      	add	r2, r4
 80067e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f0:	3302      	adds	r3, #2
 80067f2:	e7c7      	b.n	8006784 <_printf_common+0x58>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4622      	mov	r2, r4
 80067f8:	4649      	mov	r1, r9
 80067fa:	4638      	mov	r0, r7
 80067fc:	47c0      	blx	r8
 80067fe:	3001      	adds	r0, #1
 8006800:	d0e6      	beq.n	80067d0 <_printf_common+0xa4>
 8006802:	3601      	adds	r6, #1
 8006804:	e7d9      	b.n	80067ba <_printf_common+0x8e>
	...

08006808 <_printf_i>:
 8006808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	7e0f      	ldrb	r7, [r1, #24]
 800680e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006810:	2f78      	cmp	r7, #120	; 0x78
 8006812:	4691      	mov	r9, r2
 8006814:	4680      	mov	r8, r0
 8006816:	460c      	mov	r4, r1
 8006818:	469a      	mov	sl, r3
 800681a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800681e:	d807      	bhi.n	8006830 <_printf_i+0x28>
 8006820:	2f62      	cmp	r7, #98	; 0x62
 8006822:	d80a      	bhi.n	800683a <_printf_i+0x32>
 8006824:	2f00      	cmp	r7, #0
 8006826:	f000 80d8 	beq.w	80069da <_printf_i+0x1d2>
 800682a:	2f58      	cmp	r7, #88	; 0x58
 800682c:	f000 80a3 	beq.w	8006976 <_printf_i+0x16e>
 8006830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006838:	e03a      	b.n	80068b0 <_printf_i+0xa8>
 800683a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800683e:	2b15      	cmp	r3, #21
 8006840:	d8f6      	bhi.n	8006830 <_printf_i+0x28>
 8006842:	a101      	add	r1, pc, #4	; (adr r1, 8006848 <_printf_i+0x40>)
 8006844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006848:	080068a1 	.word	0x080068a1
 800684c:	080068b5 	.word	0x080068b5
 8006850:	08006831 	.word	0x08006831
 8006854:	08006831 	.word	0x08006831
 8006858:	08006831 	.word	0x08006831
 800685c:	08006831 	.word	0x08006831
 8006860:	080068b5 	.word	0x080068b5
 8006864:	08006831 	.word	0x08006831
 8006868:	08006831 	.word	0x08006831
 800686c:	08006831 	.word	0x08006831
 8006870:	08006831 	.word	0x08006831
 8006874:	080069c1 	.word	0x080069c1
 8006878:	080068e5 	.word	0x080068e5
 800687c:	080069a3 	.word	0x080069a3
 8006880:	08006831 	.word	0x08006831
 8006884:	08006831 	.word	0x08006831
 8006888:	080069e3 	.word	0x080069e3
 800688c:	08006831 	.word	0x08006831
 8006890:	080068e5 	.word	0x080068e5
 8006894:	08006831 	.word	0x08006831
 8006898:	08006831 	.word	0x08006831
 800689c:	080069ab 	.word	0x080069ab
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	1d1a      	adds	r2, r3, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	602a      	str	r2, [r5, #0]
 80068a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0a3      	b.n	80069fc <_printf_i+0x1f4>
 80068b4:	6820      	ldr	r0, [r4, #0]
 80068b6:	6829      	ldr	r1, [r5, #0]
 80068b8:	0606      	lsls	r6, r0, #24
 80068ba:	f101 0304 	add.w	r3, r1, #4
 80068be:	d50a      	bpl.n	80068d6 <_printf_i+0xce>
 80068c0:	680e      	ldr	r6, [r1, #0]
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	2e00      	cmp	r6, #0
 80068c6:	da03      	bge.n	80068d0 <_printf_i+0xc8>
 80068c8:	232d      	movs	r3, #45	; 0x2d
 80068ca:	4276      	negs	r6, r6
 80068cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d0:	485e      	ldr	r0, [pc, #376]	; (8006a4c <_printf_i+0x244>)
 80068d2:	230a      	movs	r3, #10
 80068d4:	e019      	b.n	800690a <_printf_i+0x102>
 80068d6:	680e      	ldr	r6, [r1, #0]
 80068d8:	602b      	str	r3, [r5, #0]
 80068da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068de:	bf18      	it	ne
 80068e0:	b236      	sxthne	r6, r6
 80068e2:	e7ef      	b.n	80068c4 <_printf_i+0xbc>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	6820      	ldr	r0, [r4, #0]
 80068e8:	1d19      	adds	r1, r3, #4
 80068ea:	6029      	str	r1, [r5, #0]
 80068ec:	0601      	lsls	r1, r0, #24
 80068ee:	d501      	bpl.n	80068f4 <_printf_i+0xec>
 80068f0:	681e      	ldr	r6, [r3, #0]
 80068f2:	e002      	b.n	80068fa <_printf_i+0xf2>
 80068f4:	0646      	lsls	r6, r0, #25
 80068f6:	d5fb      	bpl.n	80068f0 <_printf_i+0xe8>
 80068f8:	881e      	ldrh	r6, [r3, #0]
 80068fa:	4854      	ldr	r0, [pc, #336]	; (8006a4c <_printf_i+0x244>)
 80068fc:	2f6f      	cmp	r7, #111	; 0x6f
 80068fe:	bf0c      	ite	eq
 8006900:	2308      	moveq	r3, #8
 8006902:	230a      	movne	r3, #10
 8006904:	2100      	movs	r1, #0
 8006906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800690a:	6865      	ldr	r5, [r4, #4]
 800690c:	60a5      	str	r5, [r4, #8]
 800690e:	2d00      	cmp	r5, #0
 8006910:	bfa2      	ittt	ge
 8006912:	6821      	ldrge	r1, [r4, #0]
 8006914:	f021 0104 	bicge.w	r1, r1, #4
 8006918:	6021      	strge	r1, [r4, #0]
 800691a:	b90e      	cbnz	r6, 8006920 <_printf_i+0x118>
 800691c:	2d00      	cmp	r5, #0
 800691e:	d04d      	beq.n	80069bc <_printf_i+0x1b4>
 8006920:	4615      	mov	r5, r2
 8006922:	fbb6 f1f3 	udiv	r1, r6, r3
 8006926:	fb03 6711 	mls	r7, r3, r1, r6
 800692a:	5dc7      	ldrb	r7, [r0, r7]
 800692c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006930:	4637      	mov	r7, r6
 8006932:	42bb      	cmp	r3, r7
 8006934:	460e      	mov	r6, r1
 8006936:	d9f4      	bls.n	8006922 <_printf_i+0x11a>
 8006938:	2b08      	cmp	r3, #8
 800693a:	d10b      	bne.n	8006954 <_printf_i+0x14c>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	07de      	lsls	r6, r3, #31
 8006940:	d508      	bpl.n	8006954 <_printf_i+0x14c>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	6861      	ldr	r1, [r4, #4]
 8006946:	4299      	cmp	r1, r3
 8006948:	bfde      	ittt	le
 800694a:	2330      	movle	r3, #48	; 0x30
 800694c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006950:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006954:	1b52      	subs	r2, r2, r5
 8006956:	6122      	str	r2, [r4, #16]
 8006958:	f8cd a000 	str.w	sl, [sp]
 800695c:	464b      	mov	r3, r9
 800695e:	aa03      	add	r2, sp, #12
 8006960:	4621      	mov	r1, r4
 8006962:	4640      	mov	r0, r8
 8006964:	f7ff fee2 	bl	800672c <_printf_common>
 8006968:	3001      	adds	r0, #1
 800696a:	d14c      	bne.n	8006a06 <_printf_i+0x1fe>
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	b004      	add	sp, #16
 8006972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006976:	4835      	ldr	r0, [pc, #212]	; (8006a4c <_printf_i+0x244>)
 8006978:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800697c:	6829      	ldr	r1, [r5, #0]
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	f851 6b04 	ldr.w	r6, [r1], #4
 8006984:	6029      	str	r1, [r5, #0]
 8006986:	061d      	lsls	r5, r3, #24
 8006988:	d514      	bpl.n	80069b4 <_printf_i+0x1ac>
 800698a:	07df      	lsls	r7, r3, #31
 800698c:	bf44      	itt	mi
 800698e:	f043 0320 	orrmi.w	r3, r3, #32
 8006992:	6023      	strmi	r3, [r4, #0]
 8006994:	b91e      	cbnz	r6, 800699e <_printf_i+0x196>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f023 0320 	bic.w	r3, r3, #32
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	2310      	movs	r3, #16
 80069a0:	e7b0      	b.n	8006904 <_printf_i+0xfc>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	f043 0320 	orr.w	r3, r3, #32
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	2378      	movs	r3, #120	; 0x78
 80069ac:	4828      	ldr	r0, [pc, #160]	; (8006a50 <_printf_i+0x248>)
 80069ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069b2:	e7e3      	b.n	800697c <_printf_i+0x174>
 80069b4:	0659      	lsls	r1, r3, #25
 80069b6:	bf48      	it	mi
 80069b8:	b2b6      	uxthmi	r6, r6
 80069ba:	e7e6      	b.n	800698a <_printf_i+0x182>
 80069bc:	4615      	mov	r5, r2
 80069be:	e7bb      	b.n	8006938 <_printf_i+0x130>
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	6826      	ldr	r6, [r4, #0]
 80069c4:	6961      	ldr	r1, [r4, #20]
 80069c6:	1d18      	adds	r0, r3, #4
 80069c8:	6028      	str	r0, [r5, #0]
 80069ca:	0635      	lsls	r5, r6, #24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	d501      	bpl.n	80069d4 <_printf_i+0x1cc>
 80069d0:	6019      	str	r1, [r3, #0]
 80069d2:	e002      	b.n	80069da <_printf_i+0x1d2>
 80069d4:	0670      	lsls	r0, r6, #25
 80069d6:	d5fb      	bpl.n	80069d0 <_printf_i+0x1c8>
 80069d8:	8019      	strh	r1, [r3, #0]
 80069da:	2300      	movs	r3, #0
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	4615      	mov	r5, r2
 80069e0:	e7ba      	b.n	8006958 <_printf_i+0x150>
 80069e2:	682b      	ldr	r3, [r5, #0]
 80069e4:	1d1a      	adds	r2, r3, #4
 80069e6:	602a      	str	r2, [r5, #0]
 80069e8:	681d      	ldr	r5, [r3, #0]
 80069ea:	6862      	ldr	r2, [r4, #4]
 80069ec:	2100      	movs	r1, #0
 80069ee:	4628      	mov	r0, r5
 80069f0:	f7f9 fd36 	bl	8000460 <memchr>
 80069f4:	b108      	cbz	r0, 80069fa <_printf_i+0x1f2>
 80069f6:	1b40      	subs	r0, r0, r5
 80069f8:	6060      	str	r0, [r4, #4]
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	2300      	movs	r3, #0
 8006a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a04:	e7a8      	b.n	8006958 <_printf_i+0x150>
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	462a      	mov	r2, r5
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	47d0      	blx	sl
 8006a10:	3001      	adds	r0, #1
 8006a12:	d0ab      	beq.n	800696c <_printf_i+0x164>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	d413      	bmi.n	8006a42 <_printf_i+0x23a>
 8006a1a:	68e0      	ldr	r0, [r4, #12]
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	4298      	cmp	r0, r3
 8006a20:	bfb8      	it	lt
 8006a22:	4618      	movlt	r0, r3
 8006a24:	e7a4      	b.n	8006970 <_printf_i+0x168>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	47d0      	blx	sl
 8006a30:	3001      	adds	r0, #1
 8006a32:	d09b      	beq.n	800696c <_printf_i+0x164>
 8006a34:	3501      	adds	r5, #1
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	9903      	ldr	r1, [sp, #12]
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dcf2      	bgt.n	8006a26 <_printf_i+0x21e>
 8006a40:	e7eb      	b.n	8006a1a <_printf_i+0x212>
 8006a42:	2500      	movs	r5, #0
 8006a44:	f104 0619 	add.w	r6, r4, #25
 8006a48:	e7f5      	b.n	8006a36 <_printf_i+0x22e>
 8006a4a:	bf00      	nop
 8006a4c:	0800ab4a 	.word	0x0800ab4a
 8006a50:	0800ab5b 	.word	0x0800ab5b

08006a54 <_scanf_float>:
 8006a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	4617      	mov	r7, r2
 8006a5c:	9303      	str	r3, [sp, #12]
 8006a5e:	688b      	ldr	r3, [r1, #8]
 8006a60:	1e5a      	subs	r2, r3, #1
 8006a62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a66:	bf83      	ittte	hi
 8006a68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a6c:	195b      	addhi	r3, r3, r5
 8006a6e:	9302      	strhi	r3, [sp, #8]
 8006a70:	2300      	movls	r3, #0
 8006a72:	bf86      	itte	hi
 8006a74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a78:	608b      	strhi	r3, [r1, #8]
 8006a7a:	9302      	strls	r3, [sp, #8]
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	468b      	mov	fp, r1
 8006a80:	2500      	movs	r5, #0
 8006a82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a86:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a8e:	4680      	mov	r8, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	465e      	mov	r6, fp
 8006a94:	46aa      	mov	sl, r5
 8006a96:	46a9      	mov	r9, r5
 8006a98:	9501      	str	r5, [sp, #4]
 8006a9a:	68a2      	ldr	r2, [r4, #8]
 8006a9c:	b152      	cbz	r2, 8006ab4 <_scanf_float+0x60>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b4e      	cmp	r3, #78	; 0x4e
 8006aa4:	d864      	bhi.n	8006b70 <_scanf_float+0x11c>
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d83c      	bhi.n	8006b24 <_scanf_float+0xd0>
 8006aaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006aae:	b2c8      	uxtb	r0, r1
 8006ab0:	280e      	cmp	r0, #14
 8006ab2:	d93a      	bls.n	8006b2a <_scanf_float+0xd6>
 8006ab4:	f1b9 0f00 	cmp.w	r9, #0
 8006ab8:	d003      	beq.n	8006ac2 <_scanf_float+0x6e>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac0:	6023      	str	r3, [r4, #0]
 8006ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ac6:	f1ba 0f01 	cmp.w	sl, #1
 8006aca:	f200 8113 	bhi.w	8006cf4 <_scanf_float+0x2a0>
 8006ace:	455e      	cmp	r6, fp
 8006ad0:	f200 8105 	bhi.w	8006cde <_scanf_float+0x28a>
 8006ad4:	2501      	movs	r5, #1
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	b007      	add	sp, #28
 8006ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ade:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ae2:	2a0d      	cmp	r2, #13
 8006ae4:	d8e6      	bhi.n	8006ab4 <_scanf_float+0x60>
 8006ae6:	a101      	add	r1, pc, #4	; (adr r1, 8006aec <_scanf_float+0x98>)
 8006ae8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006aec:	08006c2b 	.word	0x08006c2b
 8006af0:	08006ab5 	.word	0x08006ab5
 8006af4:	08006ab5 	.word	0x08006ab5
 8006af8:	08006ab5 	.word	0x08006ab5
 8006afc:	08006c8b 	.word	0x08006c8b
 8006b00:	08006c63 	.word	0x08006c63
 8006b04:	08006ab5 	.word	0x08006ab5
 8006b08:	08006ab5 	.word	0x08006ab5
 8006b0c:	08006c39 	.word	0x08006c39
 8006b10:	08006ab5 	.word	0x08006ab5
 8006b14:	08006ab5 	.word	0x08006ab5
 8006b18:	08006ab5 	.word	0x08006ab5
 8006b1c:	08006ab5 	.word	0x08006ab5
 8006b20:	08006bf1 	.word	0x08006bf1
 8006b24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b28:	e7db      	b.n	8006ae2 <_scanf_float+0x8e>
 8006b2a:	290e      	cmp	r1, #14
 8006b2c:	d8c2      	bhi.n	8006ab4 <_scanf_float+0x60>
 8006b2e:	a001      	add	r0, pc, #4	; (adr r0, 8006b34 <_scanf_float+0xe0>)
 8006b30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b34:	08006be3 	.word	0x08006be3
 8006b38:	08006ab5 	.word	0x08006ab5
 8006b3c:	08006be3 	.word	0x08006be3
 8006b40:	08006c77 	.word	0x08006c77
 8006b44:	08006ab5 	.word	0x08006ab5
 8006b48:	08006b91 	.word	0x08006b91
 8006b4c:	08006bcd 	.word	0x08006bcd
 8006b50:	08006bcd 	.word	0x08006bcd
 8006b54:	08006bcd 	.word	0x08006bcd
 8006b58:	08006bcd 	.word	0x08006bcd
 8006b5c:	08006bcd 	.word	0x08006bcd
 8006b60:	08006bcd 	.word	0x08006bcd
 8006b64:	08006bcd 	.word	0x08006bcd
 8006b68:	08006bcd 	.word	0x08006bcd
 8006b6c:	08006bcd 	.word	0x08006bcd
 8006b70:	2b6e      	cmp	r3, #110	; 0x6e
 8006b72:	d809      	bhi.n	8006b88 <_scanf_float+0x134>
 8006b74:	2b60      	cmp	r3, #96	; 0x60
 8006b76:	d8b2      	bhi.n	8006ade <_scanf_float+0x8a>
 8006b78:	2b54      	cmp	r3, #84	; 0x54
 8006b7a:	d077      	beq.n	8006c6c <_scanf_float+0x218>
 8006b7c:	2b59      	cmp	r3, #89	; 0x59
 8006b7e:	d199      	bne.n	8006ab4 <_scanf_float+0x60>
 8006b80:	2d07      	cmp	r5, #7
 8006b82:	d197      	bne.n	8006ab4 <_scanf_float+0x60>
 8006b84:	2508      	movs	r5, #8
 8006b86:	e029      	b.n	8006bdc <_scanf_float+0x188>
 8006b88:	2b74      	cmp	r3, #116	; 0x74
 8006b8a:	d06f      	beq.n	8006c6c <_scanf_float+0x218>
 8006b8c:	2b79      	cmp	r3, #121	; 0x79
 8006b8e:	e7f6      	b.n	8006b7e <_scanf_float+0x12a>
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	05c8      	lsls	r0, r1, #23
 8006b94:	d51a      	bpl.n	8006bcc <_scanf_float+0x178>
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b9c:	6021      	str	r1, [r4, #0]
 8006b9e:	f109 0901 	add.w	r9, r9, #1
 8006ba2:	b11b      	cbz	r3, 8006bac <_scanf_float+0x158>
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	3201      	adds	r2, #1
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	60a2      	str	r2, [r4, #8]
 8006bac:	68a3      	ldr	r3, [r4, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	6923      	ldr	r3, [r4, #16]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	607b      	str	r3, [r7, #4]
 8006bc0:	f340 8084 	ble.w	8006ccc <_scanf_float+0x278>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	e766      	b.n	8006a9a <_scanf_float+0x46>
 8006bcc:	eb1a 0f05 	cmn.w	sl, r5
 8006bd0:	f47f af70 	bne.w	8006ab4 <_scanf_float+0x60>
 8006bd4:	6822      	ldr	r2, [r4, #0]
 8006bd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	f806 3b01 	strb.w	r3, [r6], #1
 8006be0:	e7e4      	b.n	8006bac <_scanf_float+0x158>
 8006be2:	6822      	ldr	r2, [r4, #0]
 8006be4:	0610      	lsls	r0, r2, #24
 8006be6:	f57f af65 	bpl.w	8006ab4 <_scanf_float+0x60>
 8006bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bee:	e7f4      	b.n	8006bda <_scanf_float+0x186>
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	d10e      	bne.n	8006c14 <_scanf_float+0x1c0>
 8006bf6:	f1b9 0f00 	cmp.w	r9, #0
 8006bfa:	d10e      	bne.n	8006c1a <_scanf_float+0x1c6>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c06:	d108      	bne.n	8006c1a <_scanf_float+0x1c6>
 8006c08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c0c:	6022      	str	r2, [r4, #0]
 8006c0e:	f04f 0a01 	mov.w	sl, #1
 8006c12:	e7e3      	b.n	8006bdc <_scanf_float+0x188>
 8006c14:	f1ba 0f02 	cmp.w	sl, #2
 8006c18:	d055      	beq.n	8006cc6 <_scanf_float+0x272>
 8006c1a:	2d01      	cmp	r5, #1
 8006c1c:	d002      	beq.n	8006c24 <_scanf_float+0x1d0>
 8006c1e:	2d04      	cmp	r5, #4
 8006c20:	f47f af48 	bne.w	8006ab4 <_scanf_float+0x60>
 8006c24:	3501      	adds	r5, #1
 8006c26:	b2ed      	uxtb	r5, r5
 8006c28:	e7d8      	b.n	8006bdc <_scanf_float+0x188>
 8006c2a:	f1ba 0f01 	cmp.w	sl, #1
 8006c2e:	f47f af41 	bne.w	8006ab4 <_scanf_float+0x60>
 8006c32:	f04f 0a02 	mov.w	sl, #2
 8006c36:	e7d1      	b.n	8006bdc <_scanf_float+0x188>
 8006c38:	b97d      	cbnz	r5, 8006c5a <_scanf_float+0x206>
 8006c3a:	f1b9 0f00 	cmp.w	r9, #0
 8006c3e:	f47f af3c 	bne.w	8006aba <_scanf_float+0x66>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c4c:	f47f af39 	bne.w	8006ac2 <_scanf_float+0x6e>
 8006c50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c54:	6022      	str	r2, [r4, #0]
 8006c56:	2501      	movs	r5, #1
 8006c58:	e7c0      	b.n	8006bdc <_scanf_float+0x188>
 8006c5a:	2d03      	cmp	r5, #3
 8006c5c:	d0e2      	beq.n	8006c24 <_scanf_float+0x1d0>
 8006c5e:	2d05      	cmp	r5, #5
 8006c60:	e7de      	b.n	8006c20 <_scanf_float+0x1cc>
 8006c62:	2d02      	cmp	r5, #2
 8006c64:	f47f af26 	bne.w	8006ab4 <_scanf_float+0x60>
 8006c68:	2503      	movs	r5, #3
 8006c6a:	e7b7      	b.n	8006bdc <_scanf_float+0x188>
 8006c6c:	2d06      	cmp	r5, #6
 8006c6e:	f47f af21 	bne.w	8006ab4 <_scanf_float+0x60>
 8006c72:	2507      	movs	r5, #7
 8006c74:	e7b2      	b.n	8006bdc <_scanf_float+0x188>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	0591      	lsls	r1, r2, #22
 8006c7a:	f57f af1b 	bpl.w	8006ab4 <_scanf_float+0x60>
 8006c7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c88:	e7a8      	b.n	8006bdc <_scanf_float+0x188>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c94:	d006      	beq.n	8006ca4 <_scanf_float+0x250>
 8006c96:	0550      	lsls	r0, r2, #21
 8006c98:	f57f af0c 	bpl.w	8006ab4 <_scanf_float+0x60>
 8006c9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ca0:	f43f af0f 	beq.w	8006ac2 <_scanf_float+0x6e>
 8006ca4:	0591      	lsls	r1, r2, #22
 8006ca6:	bf58      	it	pl
 8006ca8:	9901      	ldrpl	r1, [sp, #4]
 8006caa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cae:	bf58      	it	pl
 8006cb0:	eba9 0101 	subpl.w	r1, r9, r1
 8006cb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cb8:	bf58      	it	pl
 8006cba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cbe:	6022      	str	r2, [r4, #0]
 8006cc0:	f04f 0900 	mov.w	r9, #0
 8006cc4:	e78a      	b.n	8006bdc <_scanf_float+0x188>
 8006cc6:	f04f 0a03 	mov.w	sl, #3
 8006cca:	e787      	b.n	8006bdc <_scanf_float+0x188>
 8006ccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4798      	blx	r3
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	f43f aedf 	beq.w	8006a9a <_scanf_float+0x46>
 8006cdc:	e6ea      	b.n	8006ab4 <_scanf_float+0x60>
 8006cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4798      	blx	r3
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	e6ec      	b.n	8006ace <_scanf_float+0x7a>
 8006cf4:	1e6b      	subs	r3, r5, #1
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d825      	bhi.n	8006d46 <_scanf_float+0x2f2>
 8006cfa:	2d02      	cmp	r5, #2
 8006cfc:	d836      	bhi.n	8006d6c <_scanf_float+0x318>
 8006cfe:	455e      	cmp	r6, fp
 8006d00:	f67f aee8 	bls.w	8006ad4 <_scanf_float+0x80>
 8006d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d0c:	463a      	mov	r2, r7
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4798      	blx	r3
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	6123      	str	r3, [r4, #16]
 8006d18:	e7f1      	b.n	8006cfe <_scanf_float+0x2aa>
 8006d1a:	9802      	ldr	r0, [sp, #8]
 8006d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	463a      	mov	r2, r7
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4798      	blx	r3
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d36:	fa5f fa8a 	uxtb.w	sl, sl
 8006d3a:	f1ba 0f02 	cmp.w	sl, #2
 8006d3e:	d1ec      	bne.n	8006d1a <_scanf_float+0x2c6>
 8006d40:	3d03      	subs	r5, #3
 8006d42:	b2ed      	uxtb	r5, r5
 8006d44:	1b76      	subs	r6, r6, r5
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	05da      	lsls	r2, r3, #23
 8006d4a:	d52f      	bpl.n	8006dac <_scanf_float+0x358>
 8006d4c:	055b      	lsls	r3, r3, #21
 8006d4e:	d510      	bpl.n	8006d72 <_scanf_float+0x31e>
 8006d50:	455e      	cmp	r6, fp
 8006d52:	f67f aebf 	bls.w	8006ad4 <_scanf_float+0x80>
 8006d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d5e:	463a      	mov	r2, r7
 8006d60:	4640      	mov	r0, r8
 8006d62:	4798      	blx	r3
 8006d64:	6923      	ldr	r3, [r4, #16]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	6123      	str	r3, [r4, #16]
 8006d6a:	e7f1      	b.n	8006d50 <_scanf_float+0x2fc>
 8006d6c:	46aa      	mov	sl, r5
 8006d6e:	9602      	str	r6, [sp, #8]
 8006d70:	e7df      	b.n	8006d32 <_scanf_float+0x2de>
 8006d72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d76:	6923      	ldr	r3, [r4, #16]
 8006d78:	2965      	cmp	r1, #101	; 0x65
 8006d7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	d00c      	beq.n	8006da0 <_scanf_float+0x34c>
 8006d86:	2945      	cmp	r1, #69	; 0x45
 8006d88:	d00a      	beq.n	8006da0 <_scanf_float+0x34c>
 8006d8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d8e:	463a      	mov	r2, r7
 8006d90:	4640      	mov	r0, r8
 8006d92:	4798      	blx	r3
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	1eb5      	subs	r5, r6, #2
 8006d9e:	6123      	str	r3, [r4, #16]
 8006da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006da4:	463a      	mov	r2, r7
 8006da6:	4640      	mov	r0, r8
 8006da8:	4798      	blx	r3
 8006daa:	462e      	mov	r6, r5
 8006dac:	6825      	ldr	r5, [r4, #0]
 8006dae:	f015 0510 	ands.w	r5, r5, #16
 8006db2:	d159      	bne.n	8006e68 <_scanf_float+0x414>
 8006db4:	7035      	strb	r5, [r6, #0]
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc0:	d11b      	bne.n	8006dfa <_scanf_float+0x3a6>
 8006dc2:	9b01      	ldr	r3, [sp, #4]
 8006dc4:	454b      	cmp	r3, r9
 8006dc6:	eba3 0209 	sub.w	r2, r3, r9
 8006dca:	d123      	bne.n	8006e14 <_scanf_float+0x3c0>
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4659      	mov	r1, fp
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	f000 fe97 	bl	8007b04 <_strtod_r>
 8006dd6:	6822      	ldr	r2, [r4, #0]
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	f012 0f02 	tst.w	r2, #2
 8006dde:	ec57 6b10 	vmov	r6, r7, d0
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	d021      	beq.n	8006e2a <_scanf_float+0x3d6>
 8006de6:	9903      	ldr	r1, [sp, #12]
 8006de8:	1d1a      	adds	r2, r3, #4
 8006dea:	600a      	str	r2, [r1, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	e9c3 6700 	strd	r6, r7, [r3]
 8006df2:	68e3      	ldr	r3, [r4, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60e3      	str	r3, [r4, #12]
 8006df8:	e66d      	b.n	8006ad6 <_scanf_float+0x82>
 8006dfa:	9b04      	ldr	r3, [sp, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0e5      	beq.n	8006dcc <_scanf_float+0x378>
 8006e00:	9905      	ldr	r1, [sp, #20]
 8006e02:	230a      	movs	r3, #10
 8006e04:	462a      	mov	r2, r5
 8006e06:	3101      	adds	r1, #1
 8006e08:	4640      	mov	r0, r8
 8006e0a:	f000 ff03 	bl	8007c14 <_strtol_r>
 8006e0e:	9b04      	ldr	r3, [sp, #16]
 8006e10:	9e05      	ldr	r6, [sp, #20]
 8006e12:	1ac2      	subs	r2, r0, r3
 8006e14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e18:	429e      	cmp	r6, r3
 8006e1a:	bf28      	it	cs
 8006e1c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e20:	4912      	ldr	r1, [pc, #72]	; (8006e6c <_scanf_float+0x418>)
 8006e22:	4630      	mov	r0, r6
 8006e24:	f000 f82c 	bl	8006e80 <siprintf>
 8006e28:	e7d0      	b.n	8006dcc <_scanf_float+0x378>
 8006e2a:	9903      	ldr	r1, [sp, #12]
 8006e2c:	f012 0f04 	tst.w	r2, #4
 8006e30:	f103 0204 	add.w	r2, r3, #4
 8006e34:	600a      	str	r2, [r1, #0]
 8006e36:	d1d9      	bne.n	8006dec <_scanf_float+0x398>
 8006e38:	f8d3 8000 	ldr.w	r8, [r3]
 8006e3c:	ee10 2a10 	vmov	r2, s0
 8006e40:	ee10 0a10 	vmov	r0, s0
 8006e44:	463b      	mov	r3, r7
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 ffb0 	bl	8000dac <__aeabi_dcmpun>
 8006e4c:	b128      	cbz	r0, 8006e5a <_scanf_float+0x406>
 8006e4e:	4808      	ldr	r0, [pc, #32]	; (8006e70 <_scanf_float+0x41c>)
 8006e50:	f000 f810 	bl	8006e74 <nanf>
 8006e54:	ed88 0a00 	vstr	s0, [r8]
 8006e58:	e7cb      	b.n	8006df2 <_scanf_float+0x39e>
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	f7fa f803 	bl	8000e68 <__aeabi_d2f>
 8006e62:	f8c8 0000 	str.w	r0, [r8]
 8006e66:	e7c4      	b.n	8006df2 <_scanf_float+0x39e>
 8006e68:	2500      	movs	r5, #0
 8006e6a:	e634      	b.n	8006ad6 <_scanf_float+0x82>
 8006e6c:	0800ab6c 	.word	0x0800ab6c
 8006e70:	0800af78 	.word	0x0800af78

08006e74 <nanf>:
 8006e74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e7c <nanf+0x8>
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	7fc00000 	.word	0x7fc00000

08006e80 <siprintf>:
 8006e80:	b40e      	push	{r1, r2, r3}
 8006e82:	b500      	push	{lr}
 8006e84:	b09c      	sub	sp, #112	; 0x70
 8006e86:	ab1d      	add	r3, sp, #116	; 0x74
 8006e88:	9002      	str	r0, [sp, #8]
 8006e8a:	9006      	str	r0, [sp, #24]
 8006e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e90:	4809      	ldr	r0, [pc, #36]	; (8006eb8 <siprintf+0x38>)
 8006e92:	9107      	str	r1, [sp, #28]
 8006e94:	9104      	str	r1, [sp, #16]
 8006e96:	4909      	ldr	r1, [pc, #36]	; (8006ebc <siprintf+0x3c>)
 8006e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9c:	9105      	str	r1, [sp, #20]
 8006e9e:	6800      	ldr	r0, [r0, #0]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	a902      	add	r1, sp, #8
 8006ea4:	f002 fee2 	bl	8009c6c <_svfiprintf_r>
 8006ea8:	9b02      	ldr	r3, [sp, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	701a      	strb	r2, [r3, #0]
 8006eae:	b01c      	add	sp, #112	; 0x70
 8006eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb4:	b003      	add	sp, #12
 8006eb6:	4770      	bx	lr
 8006eb8:	20000018 	.word	0x20000018
 8006ebc:	ffff0208 	.word	0xffff0208

08006ec0 <sulp>:
 8006ec0:	b570      	push	{r4, r5, r6, lr}
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	ec45 4b10 	vmov	d0, r4, r5
 8006eca:	4616      	mov	r6, r2
 8006ecc:	f002 fc2c 	bl	8009728 <__ulp>
 8006ed0:	ec51 0b10 	vmov	r0, r1, d0
 8006ed4:	b17e      	cbz	r6, 8006ef6 <sulp+0x36>
 8006ed6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006eda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd09      	ble.n	8006ef6 <sulp+0x36>
 8006ee2:	051b      	lsls	r3, r3, #20
 8006ee4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ee8:	2400      	movs	r4, #0
 8006eea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f7f9 fcc1 	bl	8000878 <__aeabi_dmul>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}

08006ef8 <_strtod_l>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	ed2d 8b02 	vpush	{d8}
 8006f00:	b09d      	sub	sp, #116	; 0x74
 8006f02:	461f      	mov	r7, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	9318      	str	r3, [sp, #96]	; 0x60
 8006f08:	4ba2      	ldr	r3, [pc, #648]	; (8007194 <_strtod_l+0x29c>)
 8006f0a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	4604      	mov	r4, r0
 8006f12:	4618      	mov	r0, r3
 8006f14:	4688      	mov	r8, r1
 8006f16:	f7f9 fa97 	bl	8000448 <strlen>
 8006f1a:	f04f 0a00 	mov.w	sl, #0
 8006f1e:	4605      	mov	r5, r0
 8006f20:	f04f 0b00 	mov.w	fp, #0
 8006f24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	2a2b      	cmp	r2, #43	; 0x2b
 8006f2e:	d04e      	beq.n	8006fce <_strtod_l+0xd6>
 8006f30:	d83b      	bhi.n	8006faa <_strtod_l+0xb2>
 8006f32:	2a0d      	cmp	r2, #13
 8006f34:	d834      	bhi.n	8006fa0 <_strtod_l+0xa8>
 8006f36:	2a08      	cmp	r2, #8
 8006f38:	d834      	bhi.n	8006fa4 <_strtod_l+0xac>
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d03e      	beq.n	8006fbc <_strtod_l+0xc4>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	930a      	str	r3, [sp, #40]	; 0x28
 8006f42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f44:	7833      	ldrb	r3, [r6, #0]
 8006f46:	2b30      	cmp	r3, #48	; 0x30
 8006f48:	f040 80b0 	bne.w	80070ac <_strtod_l+0x1b4>
 8006f4c:	7873      	ldrb	r3, [r6, #1]
 8006f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f52:	2b58      	cmp	r3, #88	; 0x58
 8006f54:	d168      	bne.n	8007028 <_strtod_l+0x130>
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	ab18      	add	r3, sp, #96	; 0x60
 8006f5c:	9702      	str	r7, [sp, #8]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4a8d      	ldr	r2, [pc, #564]	; (8007198 <_strtod_l+0x2a0>)
 8006f62:	ab19      	add	r3, sp, #100	; 0x64
 8006f64:	a917      	add	r1, sp, #92	; 0x5c
 8006f66:	4620      	mov	r0, r4
 8006f68:	f001 fd38 	bl	80089dc <__gethex>
 8006f6c:	f010 0707 	ands.w	r7, r0, #7
 8006f70:	4605      	mov	r5, r0
 8006f72:	d005      	beq.n	8006f80 <_strtod_l+0x88>
 8006f74:	2f06      	cmp	r7, #6
 8006f76:	d12c      	bne.n	8006fd2 <_strtod_l+0xda>
 8006f78:	3601      	adds	r6, #1
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 8590 	bne.w	8007aa8 <_strtod_l+0xbb0>
 8006f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8a:	b1eb      	cbz	r3, 8006fc8 <_strtod_l+0xd0>
 8006f8c:	4652      	mov	r2, sl
 8006f8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f92:	ec43 2b10 	vmov	d0, r2, r3
 8006f96:	b01d      	add	sp, #116	; 0x74
 8006f98:	ecbd 8b02 	vpop	{d8}
 8006f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa0:	2a20      	cmp	r2, #32
 8006fa2:	d1cc      	bne.n	8006f3e <_strtod_l+0x46>
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006fa8:	e7be      	b.n	8006f28 <_strtod_l+0x30>
 8006faa:	2a2d      	cmp	r2, #45	; 0x2d
 8006fac:	d1c7      	bne.n	8006f3e <_strtod_l+0x46>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1c2      	bne.n	8006f42 <_strtod_l+0x4a>
 8006fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fbe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 856e 	bne.w	8007aa4 <_strtod_l+0xbac>
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	e7e1      	b.n	8006f92 <_strtod_l+0x9a>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	e7ee      	b.n	8006fb0 <_strtod_l+0xb8>
 8006fd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fd4:	b13a      	cbz	r2, 8006fe6 <_strtod_l+0xee>
 8006fd6:	2135      	movs	r1, #53	; 0x35
 8006fd8:	a81a      	add	r0, sp, #104	; 0x68
 8006fda:	f002 fcb0 	bl	800993e <__copybits>
 8006fde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f002 f86f 	bl	80090c4 <_Bfree>
 8006fe6:	3f01      	subs	r7, #1
 8006fe8:	2f04      	cmp	r7, #4
 8006fea:	d806      	bhi.n	8006ffa <_strtod_l+0x102>
 8006fec:	e8df f007 	tbb	[pc, r7]
 8006ff0:	1714030a 	.word	0x1714030a
 8006ff4:	0a          	.byte	0x0a
 8006ff5:	00          	.byte	0x00
 8006ff6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006ffa:	0728      	lsls	r0, r5, #28
 8006ffc:	d5c0      	bpl.n	8006f80 <_strtod_l+0x88>
 8006ffe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007002:	e7bd      	b.n	8006f80 <_strtod_l+0x88>
 8007004:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800700a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800700e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007012:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007016:	e7f0      	b.n	8006ffa <_strtod_l+0x102>
 8007018:	f8df b180 	ldr.w	fp, [pc, #384]	; 800719c <_strtod_l+0x2a4>
 800701c:	e7ed      	b.n	8006ffa <_strtod_l+0x102>
 800701e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007022:	f04f 3aff 	mov.w	sl, #4294967295
 8007026:	e7e8      	b.n	8006ffa <_strtod_l+0x102>
 8007028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	9217      	str	r2, [sp, #92]	; 0x5c
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	2b30      	cmp	r3, #48	; 0x30
 8007032:	d0f9      	beq.n	8007028 <_strtod_l+0x130>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0a3      	beq.n	8006f80 <_strtod_l+0x88>
 8007038:	2301      	movs	r3, #1
 800703a:	f04f 0900 	mov.w	r9, #0
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007042:	9308      	str	r3, [sp, #32]
 8007044:	f8cd 901c 	str.w	r9, [sp, #28]
 8007048:	464f      	mov	r7, r9
 800704a:	220a      	movs	r2, #10
 800704c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800704e:	7806      	ldrb	r6, [r0, #0]
 8007050:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007054:	b2d9      	uxtb	r1, r3
 8007056:	2909      	cmp	r1, #9
 8007058:	d92a      	bls.n	80070b0 <_strtod_l+0x1b8>
 800705a:	9905      	ldr	r1, [sp, #20]
 800705c:	462a      	mov	r2, r5
 800705e:	f002 ff1f 	bl	8009ea0 <strncmp>
 8007062:	b398      	cbz	r0, 80070cc <_strtod_l+0x1d4>
 8007064:	2000      	movs	r0, #0
 8007066:	4632      	mov	r2, r6
 8007068:	463d      	mov	r5, r7
 800706a:	9005      	str	r0, [sp, #20]
 800706c:	4603      	mov	r3, r0
 800706e:	2a65      	cmp	r2, #101	; 0x65
 8007070:	d001      	beq.n	8007076 <_strtod_l+0x17e>
 8007072:	2a45      	cmp	r2, #69	; 0x45
 8007074:	d118      	bne.n	80070a8 <_strtod_l+0x1b0>
 8007076:	b91d      	cbnz	r5, 8007080 <_strtod_l+0x188>
 8007078:	9a04      	ldr	r2, [sp, #16]
 800707a:	4302      	orrs	r2, r0
 800707c:	d09e      	beq.n	8006fbc <_strtod_l+0xc4>
 800707e:	2500      	movs	r5, #0
 8007080:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007084:	f108 0201 	add.w	r2, r8, #1
 8007088:	9217      	str	r2, [sp, #92]	; 0x5c
 800708a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800708e:	2a2b      	cmp	r2, #43	; 0x2b
 8007090:	d075      	beq.n	800717e <_strtod_l+0x286>
 8007092:	2a2d      	cmp	r2, #45	; 0x2d
 8007094:	d07b      	beq.n	800718e <_strtod_l+0x296>
 8007096:	f04f 0c00 	mov.w	ip, #0
 800709a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800709e:	2909      	cmp	r1, #9
 80070a0:	f240 8082 	bls.w	80071a8 <_strtod_l+0x2b0>
 80070a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070a8:	2600      	movs	r6, #0
 80070aa:	e09d      	b.n	80071e8 <_strtod_l+0x2f0>
 80070ac:	2300      	movs	r3, #0
 80070ae:	e7c4      	b.n	800703a <_strtod_l+0x142>
 80070b0:	2f08      	cmp	r7, #8
 80070b2:	bfd8      	it	le
 80070b4:	9907      	ldrle	r1, [sp, #28]
 80070b6:	f100 0001 	add.w	r0, r0, #1
 80070ba:	bfda      	itte	le
 80070bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80070c0:	9307      	strle	r3, [sp, #28]
 80070c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80070c6:	3701      	adds	r7, #1
 80070c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80070ca:	e7bf      	b.n	800704c <_strtod_l+0x154>
 80070cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ce:	195a      	adds	r2, r3, r5
 80070d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80070d2:	5d5a      	ldrb	r2, [r3, r5]
 80070d4:	2f00      	cmp	r7, #0
 80070d6:	d037      	beq.n	8007148 <_strtod_l+0x250>
 80070d8:	9005      	str	r0, [sp, #20]
 80070da:	463d      	mov	r5, r7
 80070dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d912      	bls.n	800710a <_strtod_l+0x212>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e7c2      	b.n	800706e <_strtod_l+0x176>
 80070e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80070ee:	785a      	ldrb	r2, [r3, #1]
 80070f0:	3001      	adds	r0, #1
 80070f2:	2a30      	cmp	r2, #48	; 0x30
 80070f4:	d0f8      	beq.n	80070e8 <_strtod_l+0x1f0>
 80070f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	f200 84d9 	bhi.w	8007ab2 <_strtod_l+0xbba>
 8007100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007102:	9005      	str	r0, [sp, #20]
 8007104:	2000      	movs	r0, #0
 8007106:	9308      	str	r3, [sp, #32]
 8007108:	4605      	mov	r5, r0
 800710a:	3a30      	subs	r2, #48	; 0x30
 800710c:	f100 0301 	add.w	r3, r0, #1
 8007110:	d014      	beq.n	800713c <_strtod_l+0x244>
 8007112:	9905      	ldr	r1, [sp, #20]
 8007114:	4419      	add	r1, r3
 8007116:	9105      	str	r1, [sp, #20]
 8007118:	462b      	mov	r3, r5
 800711a:	eb00 0e05 	add.w	lr, r0, r5
 800711e:	210a      	movs	r1, #10
 8007120:	4573      	cmp	r3, lr
 8007122:	d113      	bne.n	800714c <_strtod_l+0x254>
 8007124:	182b      	adds	r3, r5, r0
 8007126:	2b08      	cmp	r3, #8
 8007128:	f105 0501 	add.w	r5, r5, #1
 800712c:	4405      	add	r5, r0
 800712e:	dc1c      	bgt.n	800716a <_strtod_l+0x272>
 8007130:	9907      	ldr	r1, [sp, #28]
 8007132:	230a      	movs	r3, #10
 8007134:	fb03 2301 	mla	r3, r3, r1, r2
 8007138:	9307      	str	r3, [sp, #28]
 800713a:	2300      	movs	r3, #0
 800713c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800713e:	1c51      	adds	r1, r2, #1
 8007140:	9117      	str	r1, [sp, #92]	; 0x5c
 8007142:	7852      	ldrb	r2, [r2, #1]
 8007144:	4618      	mov	r0, r3
 8007146:	e7c9      	b.n	80070dc <_strtod_l+0x1e4>
 8007148:	4638      	mov	r0, r7
 800714a:	e7d2      	b.n	80070f2 <_strtod_l+0x1fa>
 800714c:	2b08      	cmp	r3, #8
 800714e:	dc04      	bgt.n	800715a <_strtod_l+0x262>
 8007150:	9e07      	ldr	r6, [sp, #28]
 8007152:	434e      	muls	r6, r1
 8007154:	9607      	str	r6, [sp, #28]
 8007156:	3301      	adds	r3, #1
 8007158:	e7e2      	b.n	8007120 <_strtod_l+0x228>
 800715a:	f103 0c01 	add.w	ip, r3, #1
 800715e:	f1bc 0f10 	cmp.w	ip, #16
 8007162:	bfd8      	it	le
 8007164:	fb01 f909 	mulle.w	r9, r1, r9
 8007168:	e7f5      	b.n	8007156 <_strtod_l+0x25e>
 800716a:	2d10      	cmp	r5, #16
 800716c:	bfdc      	itt	le
 800716e:	230a      	movle	r3, #10
 8007170:	fb03 2909 	mlale	r9, r3, r9, r2
 8007174:	e7e1      	b.n	800713a <_strtod_l+0x242>
 8007176:	2300      	movs	r3, #0
 8007178:	9305      	str	r3, [sp, #20]
 800717a:	2301      	movs	r3, #1
 800717c:	e77c      	b.n	8007078 <_strtod_l+0x180>
 800717e:	f04f 0c00 	mov.w	ip, #0
 8007182:	f108 0202 	add.w	r2, r8, #2
 8007186:	9217      	str	r2, [sp, #92]	; 0x5c
 8007188:	f898 2002 	ldrb.w	r2, [r8, #2]
 800718c:	e785      	b.n	800709a <_strtod_l+0x1a2>
 800718e:	f04f 0c01 	mov.w	ip, #1
 8007192:	e7f6      	b.n	8007182 <_strtod_l+0x28a>
 8007194:	0800adc0 	.word	0x0800adc0
 8007198:	0800ab74 	.word	0x0800ab74
 800719c:	7ff00000 	.word	0x7ff00000
 80071a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071a2:	1c51      	adds	r1, r2, #1
 80071a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80071a6:	7852      	ldrb	r2, [r2, #1]
 80071a8:	2a30      	cmp	r2, #48	; 0x30
 80071aa:	d0f9      	beq.n	80071a0 <_strtod_l+0x2a8>
 80071ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80071b0:	2908      	cmp	r1, #8
 80071b2:	f63f af79 	bhi.w	80070a8 <_strtod_l+0x1b0>
 80071b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80071ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071bc:	9206      	str	r2, [sp, #24]
 80071be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071c0:	1c51      	adds	r1, r2, #1
 80071c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80071c4:	7852      	ldrb	r2, [r2, #1]
 80071c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80071ca:	2e09      	cmp	r6, #9
 80071cc:	d937      	bls.n	800723e <_strtod_l+0x346>
 80071ce:	9e06      	ldr	r6, [sp, #24]
 80071d0:	1b89      	subs	r1, r1, r6
 80071d2:	2908      	cmp	r1, #8
 80071d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80071d8:	dc02      	bgt.n	80071e0 <_strtod_l+0x2e8>
 80071da:	4576      	cmp	r6, lr
 80071dc:	bfa8      	it	ge
 80071de:	4676      	movge	r6, lr
 80071e0:	f1bc 0f00 	cmp.w	ip, #0
 80071e4:	d000      	beq.n	80071e8 <_strtod_l+0x2f0>
 80071e6:	4276      	negs	r6, r6
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	d14d      	bne.n	8007288 <_strtod_l+0x390>
 80071ec:	9904      	ldr	r1, [sp, #16]
 80071ee:	4301      	orrs	r1, r0
 80071f0:	f47f aec6 	bne.w	8006f80 <_strtod_l+0x88>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f aee1 	bne.w	8006fbc <_strtod_l+0xc4>
 80071fa:	2a69      	cmp	r2, #105	; 0x69
 80071fc:	d027      	beq.n	800724e <_strtod_l+0x356>
 80071fe:	dc24      	bgt.n	800724a <_strtod_l+0x352>
 8007200:	2a49      	cmp	r2, #73	; 0x49
 8007202:	d024      	beq.n	800724e <_strtod_l+0x356>
 8007204:	2a4e      	cmp	r2, #78	; 0x4e
 8007206:	f47f aed9 	bne.w	8006fbc <_strtod_l+0xc4>
 800720a:	499f      	ldr	r1, [pc, #636]	; (8007488 <_strtod_l+0x590>)
 800720c:	a817      	add	r0, sp, #92	; 0x5c
 800720e:	f001 fe3d 	bl	8008e8c <__match>
 8007212:	2800      	cmp	r0, #0
 8007214:	f43f aed2 	beq.w	8006fbc <_strtod_l+0xc4>
 8007218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b28      	cmp	r3, #40	; 0x28
 800721e:	d12d      	bne.n	800727c <_strtod_l+0x384>
 8007220:	499a      	ldr	r1, [pc, #616]	; (800748c <_strtod_l+0x594>)
 8007222:	aa1a      	add	r2, sp, #104	; 0x68
 8007224:	a817      	add	r0, sp, #92	; 0x5c
 8007226:	f001 fe45 	bl	8008eb4 <__hexnan>
 800722a:	2805      	cmp	r0, #5
 800722c:	d126      	bne.n	800727c <_strtod_l+0x384>
 800722e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007230:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007234:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007238:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800723c:	e6a0      	b.n	8006f80 <_strtod_l+0x88>
 800723e:	210a      	movs	r1, #10
 8007240:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007244:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007248:	e7b9      	b.n	80071be <_strtod_l+0x2c6>
 800724a:	2a6e      	cmp	r2, #110	; 0x6e
 800724c:	e7db      	b.n	8007206 <_strtod_l+0x30e>
 800724e:	4990      	ldr	r1, [pc, #576]	; (8007490 <_strtod_l+0x598>)
 8007250:	a817      	add	r0, sp, #92	; 0x5c
 8007252:	f001 fe1b 	bl	8008e8c <__match>
 8007256:	2800      	cmp	r0, #0
 8007258:	f43f aeb0 	beq.w	8006fbc <_strtod_l+0xc4>
 800725c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800725e:	498d      	ldr	r1, [pc, #564]	; (8007494 <_strtod_l+0x59c>)
 8007260:	3b01      	subs	r3, #1
 8007262:	a817      	add	r0, sp, #92	; 0x5c
 8007264:	9317      	str	r3, [sp, #92]	; 0x5c
 8007266:	f001 fe11 	bl	8008e8c <__match>
 800726a:	b910      	cbnz	r0, 8007272 <_strtod_l+0x37a>
 800726c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800726e:	3301      	adds	r3, #1
 8007270:	9317      	str	r3, [sp, #92]	; 0x5c
 8007272:	f8df b230 	ldr.w	fp, [pc, #560]	; 80074a4 <_strtod_l+0x5ac>
 8007276:	f04f 0a00 	mov.w	sl, #0
 800727a:	e681      	b.n	8006f80 <_strtod_l+0x88>
 800727c:	4886      	ldr	r0, [pc, #536]	; (8007498 <_strtod_l+0x5a0>)
 800727e:	f002 fdf7 	bl	8009e70 <nan>
 8007282:	ec5b ab10 	vmov	sl, fp, d0
 8007286:	e67b      	b.n	8006f80 <_strtod_l+0x88>
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	9807      	ldr	r0, [sp, #28]
 800728c:	1af3      	subs	r3, r6, r3
 800728e:	2f00      	cmp	r7, #0
 8007290:	bf08      	it	eq
 8007292:	462f      	moveq	r7, r5
 8007294:	2d10      	cmp	r5, #16
 8007296:	9306      	str	r3, [sp, #24]
 8007298:	46a8      	mov	r8, r5
 800729a:	bfa8      	it	ge
 800729c:	f04f 0810 	movge.w	r8, #16
 80072a0:	f7f9 fa70 	bl	8000784 <__aeabi_ui2d>
 80072a4:	2d09      	cmp	r5, #9
 80072a6:	4682      	mov	sl, r0
 80072a8:	468b      	mov	fp, r1
 80072aa:	dd13      	ble.n	80072d4 <_strtod_l+0x3dc>
 80072ac:	4b7b      	ldr	r3, [pc, #492]	; (800749c <_strtod_l+0x5a4>)
 80072ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072b6:	f7f9 fadf 	bl	8000878 <__aeabi_dmul>
 80072ba:	4682      	mov	sl, r0
 80072bc:	4648      	mov	r0, r9
 80072be:	468b      	mov	fp, r1
 80072c0:	f7f9 fa60 	bl	8000784 <__aeabi_ui2d>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4650      	mov	r0, sl
 80072ca:	4659      	mov	r1, fp
 80072cc:	f7f9 f91e 	bl	800050c <__adddf3>
 80072d0:	4682      	mov	sl, r0
 80072d2:	468b      	mov	fp, r1
 80072d4:	2d0f      	cmp	r5, #15
 80072d6:	dc38      	bgt.n	800734a <_strtod_l+0x452>
 80072d8:	9b06      	ldr	r3, [sp, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f43f ae50 	beq.w	8006f80 <_strtod_l+0x88>
 80072e0:	dd24      	ble.n	800732c <_strtod_l+0x434>
 80072e2:	2b16      	cmp	r3, #22
 80072e4:	dc0b      	bgt.n	80072fe <_strtod_l+0x406>
 80072e6:	496d      	ldr	r1, [pc, #436]	; (800749c <_strtod_l+0x5a4>)
 80072e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f0:	4652      	mov	r2, sl
 80072f2:	465b      	mov	r3, fp
 80072f4:	f7f9 fac0 	bl	8000878 <__aeabi_dmul>
 80072f8:	4682      	mov	sl, r0
 80072fa:	468b      	mov	fp, r1
 80072fc:	e640      	b.n	8006f80 <_strtod_l+0x88>
 80072fe:	9a06      	ldr	r2, [sp, #24]
 8007300:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007304:	4293      	cmp	r3, r2
 8007306:	db20      	blt.n	800734a <_strtod_l+0x452>
 8007308:	4c64      	ldr	r4, [pc, #400]	; (800749c <_strtod_l+0x5a4>)
 800730a:	f1c5 050f 	rsb	r5, r5, #15
 800730e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007312:	4652      	mov	r2, sl
 8007314:	465b      	mov	r3, fp
 8007316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800731a:	f7f9 faad 	bl	8000878 <__aeabi_dmul>
 800731e:	9b06      	ldr	r3, [sp, #24]
 8007320:	1b5d      	subs	r5, r3, r5
 8007322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007326:	e9d4 2300 	ldrd	r2, r3, [r4]
 800732a:	e7e3      	b.n	80072f4 <_strtod_l+0x3fc>
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	3316      	adds	r3, #22
 8007330:	db0b      	blt.n	800734a <_strtod_l+0x452>
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	1b9e      	subs	r6, r3, r6
 8007336:	4b59      	ldr	r3, [pc, #356]	; (800749c <_strtod_l+0x5a4>)
 8007338:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800733c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007340:	4650      	mov	r0, sl
 8007342:	4659      	mov	r1, fp
 8007344:	f7f9 fbc2 	bl	8000acc <__aeabi_ddiv>
 8007348:	e7d6      	b.n	80072f8 <_strtod_l+0x400>
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	eba5 0808 	sub.w	r8, r5, r8
 8007350:	4498      	add	r8, r3
 8007352:	f1b8 0f00 	cmp.w	r8, #0
 8007356:	dd74      	ble.n	8007442 <_strtod_l+0x54a>
 8007358:	f018 030f 	ands.w	r3, r8, #15
 800735c:	d00a      	beq.n	8007374 <_strtod_l+0x47c>
 800735e:	494f      	ldr	r1, [pc, #316]	; (800749c <_strtod_l+0x5a4>)
 8007360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007364:	4652      	mov	r2, sl
 8007366:	465b      	mov	r3, fp
 8007368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800736c:	f7f9 fa84 	bl	8000878 <__aeabi_dmul>
 8007370:	4682      	mov	sl, r0
 8007372:	468b      	mov	fp, r1
 8007374:	f038 080f 	bics.w	r8, r8, #15
 8007378:	d04f      	beq.n	800741a <_strtod_l+0x522>
 800737a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800737e:	dd22      	ble.n	80073c6 <_strtod_l+0x4ce>
 8007380:	2500      	movs	r5, #0
 8007382:	462e      	mov	r6, r5
 8007384:	9507      	str	r5, [sp, #28]
 8007386:	9505      	str	r5, [sp, #20]
 8007388:	2322      	movs	r3, #34	; 0x22
 800738a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80074a4 <_strtod_l+0x5ac>
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	f04f 0a00 	mov.w	sl, #0
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f43f adf2 	beq.w	8006f80 <_strtod_l+0x88>
 800739c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800739e:	4620      	mov	r0, r4
 80073a0:	f001 fe90 	bl	80090c4 <_Bfree>
 80073a4:	9905      	ldr	r1, [sp, #20]
 80073a6:	4620      	mov	r0, r4
 80073a8:	f001 fe8c 	bl	80090c4 <_Bfree>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4620      	mov	r0, r4
 80073b0:	f001 fe88 	bl	80090c4 <_Bfree>
 80073b4:	9907      	ldr	r1, [sp, #28]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f001 fe84 	bl	80090c4 <_Bfree>
 80073bc:	4629      	mov	r1, r5
 80073be:	4620      	mov	r0, r4
 80073c0:	f001 fe80 	bl	80090c4 <_Bfree>
 80073c4:	e5dc      	b.n	8006f80 <_strtod_l+0x88>
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <_strtod_l+0x5a8>)
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	2300      	movs	r3, #0
 80073cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	4699      	mov	r9, r3
 80073d6:	f1b8 0f01 	cmp.w	r8, #1
 80073da:	dc21      	bgt.n	8007420 <_strtod_l+0x528>
 80073dc:	b10b      	cbz	r3, 80073e2 <_strtod_l+0x4ea>
 80073de:	4682      	mov	sl, r0
 80073e0:	468b      	mov	fp, r1
 80073e2:	4b2f      	ldr	r3, [pc, #188]	; (80074a0 <_strtod_l+0x5a8>)
 80073e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80073f4:	f7f9 fa40 	bl	8000878 <__aeabi_dmul>
 80073f8:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <_strtod_l+0x5ac>)
 80073fa:	460a      	mov	r2, r1
 80073fc:	400b      	ands	r3, r1
 80073fe:	492a      	ldr	r1, [pc, #168]	; (80074a8 <_strtod_l+0x5b0>)
 8007400:	428b      	cmp	r3, r1
 8007402:	4682      	mov	sl, r0
 8007404:	d8bc      	bhi.n	8007380 <_strtod_l+0x488>
 8007406:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800740a:	428b      	cmp	r3, r1
 800740c:	bf86      	itte	hi
 800740e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80074ac <_strtod_l+0x5b4>
 8007412:	f04f 3aff 	movhi.w	sl, #4294967295
 8007416:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800741a:	2300      	movs	r3, #0
 800741c:	9304      	str	r3, [sp, #16]
 800741e:	e084      	b.n	800752a <_strtod_l+0x632>
 8007420:	f018 0f01 	tst.w	r8, #1
 8007424:	d005      	beq.n	8007432 <_strtod_l+0x53a>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f9 fa24 	bl	8000878 <__aeabi_dmul>
 8007430:	2301      	movs	r3, #1
 8007432:	9a04      	ldr	r2, [sp, #16]
 8007434:	3208      	adds	r2, #8
 8007436:	f109 0901 	add.w	r9, r9, #1
 800743a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800743e:	9204      	str	r2, [sp, #16]
 8007440:	e7c9      	b.n	80073d6 <_strtod_l+0x4de>
 8007442:	d0ea      	beq.n	800741a <_strtod_l+0x522>
 8007444:	f1c8 0800 	rsb	r8, r8, #0
 8007448:	f018 020f 	ands.w	r2, r8, #15
 800744c:	d00a      	beq.n	8007464 <_strtod_l+0x56c>
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <_strtod_l+0x5a4>)
 8007450:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007454:	4650      	mov	r0, sl
 8007456:	4659      	mov	r1, fp
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f9 fb36 	bl	8000acc <__aeabi_ddiv>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007468:	d0d7      	beq.n	800741a <_strtod_l+0x522>
 800746a:	f1b8 0f1f 	cmp.w	r8, #31
 800746e:	dd1f      	ble.n	80074b0 <_strtod_l+0x5b8>
 8007470:	2500      	movs	r5, #0
 8007472:	462e      	mov	r6, r5
 8007474:	9507      	str	r5, [sp, #28]
 8007476:	9505      	str	r5, [sp, #20]
 8007478:	2322      	movs	r3, #34	; 0x22
 800747a:	f04f 0a00 	mov.w	sl, #0
 800747e:	f04f 0b00 	mov.w	fp, #0
 8007482:	6023      	str	r3, [r4, #0]
 8007484:	e786      	b.n	8007394 <_strtod_l+0x49c>
 8007486:	bf00      	nop
 8007488:	0800ab45 	.word	0x0800ab45
 800748c:	0800ab88 	.word	0x0800ab88
 8007490:	0800ab3d 	.word	0x0800ab3d
 8007494:	0800accc 	.word	0x0800accc
 8007498:	0800af78 	.word	0x0800af78
 800749c:	0800ae58 	.word	0x0800ae58
 80074a0:	0800ae30 	.word	0x0800ae30
 80074a4:	7ff00000 	.word	0x7ff00000
 80074a8:	7ca00000 	.word	0x7ca00000
 80074ac:	7fefffff 	.word	0x7fefffff
 80074b0:	f018 0310 	ands.w	r3, r8, #16
 80074b4:	bf18      	it	ne
 80074b6:	236a      	movne	r3, #106	; 0x6a
 80074b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007868 <_strtod_l+0x970>
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	4650      	mov	r0, sl
 80074c0:	4659      	mov	r1, fp
 80074c2:	2300      	movs	r3, #0
 80074c4:	f018 0f01 	tst.w	r8, #1
 80074c8:	d004      	beq.n	80074d4 <_strtod_l+0x5dc>
 80074ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074ce:	f7f9 f9d3 	bl	8000878 <__aeabi_dmul>
 80074d2:	2301      	movs	r3, #1
 80074d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80074d8:	f109 0908 	add.w	r9, r9, #8
 80074dc:	d1f2      	bne.n	80074c4 <_strtod_l+0x5cc>
 80074de:	b10b      	cbz	r3, 80074e4 <_strtod_l+0x5ec>
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	9b04      	ldr	r3, [sp, #16]
 80074e6:	b1c3      	cbz	r3, 800751a <_strtod_l+0x622>
 80074e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80074ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	4659      	mov	r1, fp
 80074f4:	dd11      	ble.n	800751a <_strtod_l+0x622>
 80074f6:	2b1f      	cmp	r3, #31
 80074f8:	f340 8124 	ble.w	8007744 <_strtod_l+0x84c>
 80074fc:	2b34      	cmp	r3, #52	; 0x34
 80074fe:	bfde      	ittt	le
 8007500:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007504:	f04f 33ff 	movle.w	r3, #4294967295
 8007508:	fa03 f202 	lslle.w	r2, r3, r2
 800750c:	f04f 0a00 	mov.w	sl, #0
 8007510:	bfcc      	ite	gt
 8007512:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007516:	ea02 0b01 	andle.w	fp, r2, r1
 800751a:	2200      	movs	r2, #0
 800751c:	2300      	movs	r3, #0
 800751e:	4650      	mov	r0, sl
 8007520:	4659      	mov	r1, fp
 8007522:	f7f9 fc11 	bl	8000d48 <__aeabi_dcmpeq>
 8007526:	2800      	cmp	r0, #0
 8007528:	d1a2      	bne.n	8007470 <_strtod_l+0x578>
 800752a:	9b07      	ldr	r3, [sp, #28]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	9908      	ldr	r1, [sp, #32]
 8007530:	462b      	mov	r3, r5
 8007532:	463a      	mov	r2, r7
 8007534:	4620      	mov	r0, r4
 8007536:	f001 fe2d 	bl	8009194 <__s2b>
 800753a:	9007      	str	r0, [sp, #28]
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f af1f 	beq.w	8007380 <_strtod_l+0x488>
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	1b9e      	subs	r6, r3, r6
 8007546:	9b06      	ldr	r3, [sp, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bfb4      	ite	lt
 800754c:	4633      	movlt	r3, r6
 800754e:	2300      	movge	r3, #0
 8007550:	930c      	str	r3, [sp, #48]	; 0x30
 8007552:	9b06      	ldr	r3, [sp, #24]
 8007554:	2500      	movs	r5, #0
 8007556:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800755a:	9312      	str	r3, [sp, #72]	; 0x48
 800755c:	462e      	mov	r6, r5
 800755e:	9b07      	ldr	r3, [sp, #28]
 8007560:	4620      	mov	r0, r4
 8007562:	6859      	ldr	r1, [r3, #4]
 8007564:	f001 fd6e 	bl	8009044 <_Balloc>
 8007568:	9005      	str	r0, [sp, #20]
 800756a:	2800      	cmp	r0, #0
 800756c:	f43f af0c 	beq.w	8007388 <_strtod_l+0x490>
 8007570:	9b07      	ldr	r3, [sp, #28]
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	3202      	adds	r2, #2
 8007576:	f103 010c 	add.w	r1, r3, #12
 800757a:	0092      	lsls	r2, r2, #2
 800757c:	300c      	adds	r0, #12
 800757e:	f001 fd53 	bl	8009028 <memcpy>
 8007582:	ec4b ab10 	vmov	d0, sl, fp
 8007586:	aa1a      	add	r2, sp, #104	; 0x68
 8007588:	a919      	add	r1, sp, #100	; 0x64
 800758a:	4620      	mov	r0, r4
 800758c:	f002 f948 	bl	8009820 <__d2b>
 8007590:	ec4b ab18 	vmov	d8, sl, fp
 8007594:	9018      	str	r0, [sp, #96]	; 0x60
 8007596:	2800      	cmp	r0, #0
 8007598:	f43f aef6 	beq.w	8007388 <_strtod_l+0x490>
 800759c:	2101      	movs	r1, #1
 800759e:	4620      	mov	r0, r4
 80075a0:	f001 fe92 	bl	80092c8 <__i2b>
 80075a4:	4606      	mov	r6, r0
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f43f aeee 	beq.w	8007388 <_strtod_l+0x490>
 80075ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075ae:	9904      	ldr	r1, [sp, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfab      	itete	ge
 80075b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80075b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80075b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80075ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80075be:	bfac      	ite	ge
 80075c0:	eb03 0902 	addge.w	r9, r3, r2
 80075c4:	1ad7      	sublt	r7, r2, r3
 80075c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80075c8:	eba3 0801 	sub.w	r8, r3, r1
 80075cc:	4490      	add	r8, r2
 80075ce:	4ba1      	ldr	r3, [pc, #644]	; (8007854 <_strtod_l+0x95c>)
 80075d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80075d4:	4598      	cmp	r8, r3
 80075d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075da:	f280 80c7 	bge.w	800776c <_strtod_l+0x874>
 80075de:	eba3 0308 	sub.w	r3, r3, r8
 80075e2:	2b1f      	cmp	r3, #31
 80075e4:	eba2 0203 	sub.w	r2, r2, r3
 80075e8:	f04f 0101 	mov.w	r1, #1
 80075ec:	f300 80b1 	bgt.w	8007752 <_strtod_l+0x85a>
 80075f0:	fa01 f303 	lsl.w	r3, r1, r3
 80075f4:	930d      	str	r3, [sp, #52]	; 0x34
 80075f6:	2300      	movs	r3, #0
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	eb09 0802 	add.w	r8, r9, r2
 80075fe:	9b04      	ldr	r3, [sp, #16]
 8007600:	45c1      	cmp	r9, r8
 8007602:	4417      	add	r7, r2
 8007604:	441f      	add	r7, r3
 8007606:	464b      	mov	r3, r9
 8007608:	bfa8      	it	ge
 800760a:	4643      	movge	r3, r8
 800760c:	42bb      	cmp	r3, r7
 800760e:	bfa8      	it	ge
 8007610:	463b      	movge	r3, r7
 8007612:	2b00      	cmp	r3, #0
 8007614:	bfc2      	ittt	gt
 8007616:	eba8 0803 	subgt.w	r8, r8, r3
 800761a:	1aff      	subgt	r7, r7, r3
 800761c:	eba9 0903 	subgt.w	r9, r9, r3
 8007620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	dd17      	ble.n	8007656 <_strtod_l+0x75e>
 8007626:	4631      	mov	r1, r6
 8007628:	461a      	mov	r2, r3
 800762a:	4620      	mov	r0, r4
 800762c:	f001 ff0c 	bl	8009448 <__pow5mult>
 8007630:	4606      	mov	r6, r0
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f aea8 	beq.w	8007388 <_strtod_l+0x490>
 8007638:	4601      	mov	r1, r0
 800763a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800763c:	4620      	mov	r0, r4
 800763e:	f001 fe59 	bl	80092f4 <__multiply>
 8007642:	900b      	str	r0, [sp, #44]	; 0x2c
 8007644:	2800      	cmp	r0, #0
 8007646:	f43f ae9f 	beq.w	8007388 <_strtod_l+0x490>
 800764a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800764c:	4620      	mov	r0, r4
 800764e:	f001 fd39 	bl	80090c4 <_Bfree>
 8007652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007654:	9318      	str	r3, [sp, #96]	; 0x60
 8007656:	f1b8 0f00 	cmp.w	r8, #0
 800765a:	f300 808c 	bgt.w	8007776 <_strtod_l+0x87e>
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	dd08      	ble.n	8007676 <_strtod_l+0x77e>
 8007664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007666:	9905      	ldr	r1, [sp, #20]
 8007668:	4620      	mov	r0, r4
 800766a:	f001 feed 	bl	8009448 <__pow5mult>
 800766e:	9005      	str	r0, [sp, #20]
 8007670:	2800      	cmp	r0, #0
 8007672:	f43f ae89 	beq.w	8007388 <_strtod_l+0x490>
 8007676:	2f00      	cmp	r7, #0
 8007678:	dd08      	ble.n	800768c <_strtod_l+0x794>
 800767a:	9905      	ldr	r1, [sp, #20]
 800767c:	463a      	mov	r2, r7
 800767e:	4620      	mov	r0, r4
 8007680:	f001 ff3c 	bl	80094fc <__lshift>
 8007684:	9005      	str	r0, [sp, #20]
 8007686:	2800      	cmp	r0, #0
 8007688:	f43f ae7e 	beq.w	8007388 <_strtod_l+0x490>
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	dd08      	ble.n	80076a4 <_strtod_l+0x7ac>
 8007692:	4631      	mov	r1, r6
 8007694:	464a      	mov	r2, r9
 8007696:	4620      	mov	r0, r4
 8007698:	f001 ff30 	bl	80094fc <__lshift>
 800769c:	4606      	mov	r6, r0
 800769e:	2800      	cmp	r0, #0
 80076a0:	f43f ae72 	beq.w	8007388 <_strtod_l+0x490>
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076a8:	4620      	mov	r0, r4
 80076aa:	f001 ffb3 	bl	8009614 <__mdiff>
 80076ae:	4605      	mov	r5, r0
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f43f ae69 	beq.w	8007388 <_strtod_l+0x490>
 80076b6:	68c3      	ldr	r3, [r0, #12]
 80076b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80076ba:	2300      	movs	r3, #0
 80076bc:	60c3      	str	r3, [r0, #12]
 80076be:	4631      	mov	r1, r6
 80076c0:	f001 ff8c 	bl	80095dc <__mcmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	da60      	bge.n	800778a <_strtod_l+0x892>
 80076c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ca:	ea53 030a 	orrs.w	r3, r3, sl
 80076ce:	f040 8082 	bne.w	80077d6 <_strtod_l+0x8de>
 80076d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d17d      	bne.n	80077d6 <_strtod_l+0x8de>
 80076da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076de:	0d1b      	lsrs	r3, r3, #20
 80076e0:	051b      	lsls	r3, r3, #20
 80076e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076e6:	d976      	bls.n	80077d6 <_strtod_l+0x8de>
 80076e8:	696b      	ldr	r3, [r5, #20]
 80076ea:	b913      	cbnz	r3, 80076f2 <_strtod_l+0x7fa>
 80076ec:	692b      	ldr	r3, [r5, #16]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	dd71      	ble.n	80077d6 <_strtod_l+0x8de>
 80076f2:	4629      	mov	r1, r5
 80076f4:	2201      	movs	r2, #1
 80076f6:	4620      	mov	r0, r4
 80076f8:	f001 ff00 	bl	80094fc <__lshift>
 80076fc:	4631      	mov	r1, r6
 80076fe:	4605      	mov	r5, r0
 8007700:	f001 ff6c 	bl	80095dc <__mcmp>
 8007704:	2800      	cmp	r0, #0
 8007706:	dd66      	ble.n	80077d6 <_strtod_l+0x8de>
 8007708:	9904      	ldr	r1, [sp, #16]
 800770a:	4a53      	ldr	r2, [pc, #332]	; (8007858 <_strtod_l+0x960>)
 800770c:	465b      	mov	r3, fp
 800770e:	2900      	cmp	r1, #0
 8007710:	f000 8081 	beq.w	8007816 <_strtod_l+0x91e>
 8007714:	ea02 010b 	and.w	r1, r2, fp
 8007718:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800771c:	dc7b      	bgt.n	8007816 <_strtod_l+0x91e>
 800771e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007722:	f77f aea9 	ble.w	8007478 <_strtod_l+0x580>
 8007726:	4b4d      	ldr	r3, [pc, #308]	; (800785c <_strtod_l+0x964>)
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	2200      	movs	r2, #0
 800772e:	f7f9 f8a3 	bl	8000878 <__aeabi_dmul>
 8007732:	460b      	mov	r3, r1
 8007734:	4303      	orrs	r3, r0
 8007736:	bf08      	it	eq
 8007738:	2322      	moveq	r3, #34	; 0x22
 800773a:	4682      	mov	sl, r0
 800773c:	468b      	mov	fp, r1
 800773e:	bf08      	it	eq
 8007740:	6023      	streq	r3, [r4, #0]
 8007742:	e62b      	b.n	800739c <_strtod_l+0x4a4>
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	ea03 0a0a 	and.w	sl, r3, sl
 8007750:	e6e3      	b.n	800751a <_strtod_l+0x622>
 8007752:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007756:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800775a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800775e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007762:	fa01 f308 	lsl.w	r3, r1, r8
 8007766:	9308      	str	r3, [sp, #32]
 8007768:	910d      	str	r1, [sp, #52]	; 0x34
 800776a:	e746      	b.n	80075fa <_strtod_l+0x702>
 800776c:	2300      	movs	r3, #0
 800776e:	9308      	str	r3, [sp, #32]
 8007770:	2301      	movs	r3, #1
 8007772:	930d      	str	r3, [sp, #52]	; 0x34
 8007774:	e741      	b.n	80075fa <_strtod_l+0x702>
 8007776:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007778:	4642      	mov	r2, r8
 800777a:	4620      	mov	r0, r4
 800777c:	f001 febe 	bl	80094fc <__lshift>
 8007780:	9018      	str	r0, [sp, #96]	; 0x60
 8007782:	2800      	cmp	r0, #0
 8007784:	f47f af6b 	bne.w	800765e <_strtod_l+0x766>
 8007788:	e5fe      	b.n	8007388 <_strtod_l+0x490>
 800778a:	465f      	mov	r7, fp
 800778c:	d16e      	bne.n	800786c <_strtod_l+0x974>
 800778e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007790:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007794:	b342      	cbz	r2, 80077e8 <_strtod_l+0x8f0>
 8007796:	4a32      	ldr	r2, [pc, #200]	; (8007860 <_strtod_l+0x968>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d128      	bne.n	80077ee <_strtod_l+0x8f6>
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	4651      	mov	r1, sl
 80077a0:	b1eb      	cbz	r3, 80077de <_strtod_l+0x8e6>
 80077a2:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <_strtod_l+0x960>)
 80077a4:	403b      	ands	r3, r7
 80077a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	d819      	bhi.n	80077e4 <_strtod_l+0x8ec>
 80077b0:	0d1b      	lsrs	r3, r3, #20
 80077b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	4299      	cmp	r1, r3
 80077bc:	d117      	bne.n	80077ee <_strtod_l+0x8f6>
 80077be:	4b29      	ldr	r3, [pc, #164]	; (8007864 <_strtod_l+0x96c>)
 80077c0:	429f      	cmp	r7, r3
 80077c2:	d102      	bne.n	80077ca <_strtod_l+0x8d2>
 80077c4:	3101      	adds	r1, #1
 80077c6:	f43f addf 	beq.w	8007388 <_strtod_l+0x490>
 80077ca:	4b23      	ldr	r3, [pc, #140]	; (8007858 <_strtod_l+0x960>)
 80077cc:	403b      	ands	r3, r7
 80077ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80077d2:	f04f 0a00 	mov.w	sl, #0
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1a4      	bne.n	8007726 <_strtod_l+0x82e>
 80077dc:	e5de      	b.n	800739c <_strtod_l+0x4a4>
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	e7ea      	b.n	80077ba <_strtod_l+0x8c2>
 80077e4:	4613      	mov	r3, r2
 80077e6:	e7e8      	b.n	80077ba <_strtod_l+0x8c2>
 80077e8:	ea53 030a 	orrs.w	r3, r3, sl
 80077ec:	d08c      	beq.n	8007708 <_strtod_l+0x810>
 80077ee:	9b08      	ldr	r3, [sp, #32]
 80077f0:	b1db      	cbz	r3, 800782a <_strtod_l+0x932>
 80077f2:	423b      	tst	r3, r7
 80077f4:	d0ef      	beq.n	80077d6 <_strtod_l+0x8de>
 80077f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	4650      	mov	r0, sl
 80077fc:	4659      	mov	r1, fp
 80077fe:	b1c3      	cbz	r3, 8007832 <_strtod_l+0x93a>
 8007800:	f7ff fb5e 	bl	8006ec0 <sulp>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	ec51 0b18 	vmov	r0, r1, d8
 800780c:	f7f8 fe7e 	bl	800050c <__adddf3>
 8007810:	4682      	mov	sl, r0
 8007812:	468b      	mov	fp, r1
 8007814:	e7df      	b.n	80077d6 <_strtod_l+0x8de>
 8007816:	4013      	ands	r3, r2
 8007818:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800781c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007820:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007824:	f04f 3aff 	mov.w	sl, #4294967295
 8007828:	e7d5      	b.n	80077d6 <_strtod_l+0x8de>
 800782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782c:	ea13 0f0a 	tst.w	r3, sl
 8007830:	e7e0      	b.n	80077f4 <_strtod_l+0x8fc>
 8007832:	f7ff fb45 	bl	8006ec0 <sulp>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	ec51 0b18 	vmov	r0, r1, d8
 800783e:	f7f8 fe63 	bl	8000508 <__aeabi_dsub>
 8007842:	2200      	movs	r2, #0
 8007844:	2300      	movs	r3, #0
 8007846:	4682      	mov	sl, r0
 8007848:	468b      	mov	fp, r1
 800784a:	f7f9 fa7d 	bl	8000d48 <__aeabi_dcmpeq>
 800784e:	2800      	cmp	r0, #0
 8007850:	d0c1      	beq.n	80077d6 <_strtod_l+0x8de>
 8007852:	e611      	b.n	8007478 <_strtod_l+0x580>
 8007854:	fffffc02 	.word	0xfffffc02
 8007858:	7ff00000 	.word	0x7ff00000
 800785c:	39500000 	.word	0x39500000
 8007860:	000fffff 	.word	0x000fffff
 8007864:	7fefffff 	.word	0x7fefffff
 8007868:	0800aba0 	.word	0x0800aba0
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	f002 f832 	bl	80098d8 <__ratio>
 8007874:	ec59 8b10 	vmov	r8, r9, d0
 8007878:	ee10 0a10 	vmov	r0, s0
 800787c:	2200      	movs	r2, #0
 800787e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007882:	4649      	mov	r1, r9
 8007884:	f7f9 fa74 	bl	8000d70 <__aeabi_dcmple>
 8007888:	2800      	cmp	r0, #0
 800788a:	d07a      	beq.n	8007982 <_strtod_l+0xa8a>
 800788c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d04a      	beq.n	8007928 <_strtod_l+0xa30>
 8007892:	4b95      	ldr	r3, [pc, #596]	; (8007ae8 <_strtod_l+0xbf0>)
 8007894:	2200      	movs	r2, #0
 8007896:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800789a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ae8 <_strtod_l+0xbf0>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	4b92      	ldr	r3, [pc, #584]	; (8007aec <_strtod_l+0xbf4>)
 80078a4:	403b      	ands	r3, r7
 80078a6:	930d      	str	r3, [sp, #52]	; 0x34
 80078a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078aa:	4b91      	ldr	r3, [pc, #580]	; (8007af0 <_strtod_l+0xbf8>)
 80078ac:	429a      	cmp	r2, r3
 80078ae:	f040 80b0 	bne.w	8007a12 <_strtod_l+0xb1a>
 80078b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80078ba:	ec4b ab10 	vmov	d0, sl, fp
 80078be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078c2:	f001 ff31 	bl	8009728 <__ulp>
 80078c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078ca:	ec53 2b10 	vmov	r2, r3, d0
 80078ce:	f7f8 ffd3 	bl	8000878 <__aeabi_dmul>
 80078d2:	4652      	mov	r2, sl
 80078d4:	465b      	mov	r3, fp
 80078d6:	f7f8 fe19 	bl	800050c <__adddf3>
 80078da:	460b      	mov	r3, r1
 80078dc:	4983      	ldr	r1, [pc, #524]	; (8007aec <_strtod_l+0xbf4>)
 80078de:	4a85      	ldr	r2, [pc, #532]	; (8007af4 <_strtod_l+0xbfc>)
 80078e0:	4019      	ands	r1, r3
 80078e2:	4291      	cmp	r1, r2
 80078e4:	4682      	mov	sl, r0
 80078e6:	d960      	bls.n	80079aa <_strtod_l+0xab2>
 80078e8:	ee18 3a90 	vmov	r3, s17
 80078ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d104      	bne.n	80078fe <_strtod_l+0xa06>
 80078f4:	ee18 3a10 	vmov	r3, s16
 80078f8:	3301      	adds	r3, #1
 80078fa:	f43f ad45 	beq.w	8007388 <_strtod_l+0x490>
 80078fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007b00 <_strtod_l+0xc08>
 8007902:	f04f 3aff 	mov.w	sl, #4294967295
 8007906:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007908:	4620      	mov	r0, r4
 800790a:	f001 fbdb 	bl	80090c4 <_Bfree>
 800790e:	9905      	ldr	r1, [sp, #20]
 8007910:	4620      	mov	r0, r4
 8007912:	f001 fbd7 	bl	80090c4 <_Bfree>
 8007916:	4631      	mov	r1, r6
 8007918:	4620      	mov	r0, r4
 800791a:	f001 fbd3 	bl	80090c4 <_Bfree>
 800791e:	4629      	mov	r1, r5
 8007920:	4620      	mov	r0, r4
 8007922:	f001 fbcf 	bl	80090c4 <_Bfree>
 8007926:	e61a      	b.n	800755e <_strtod_l+0x666>
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	d11b      	bne.n	8007966 <_strtod_l+0xa6e>
 800792e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007932:	b9f3      	cbnz	r3, 8007972 <_strtod_l+0xa7a>
 8007934:	4b6c      	ldr	r3, [pc, #432]	; (8007ae8 <_strtod_l+0xbf0>)
 8007936:	2200      	movs	r2, #0
 8007938:	4640      	mov	r0, r8
 800793a:	4649      	mov	r1, r9
 800793c:	f7f9 fa0e 	bl	8000d5c <__aeabi_dcmplt>
 8007940:	b9d0      	cbnz	r0, 8007978 <_strtod_l+0xa80>
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	4b6c      	ldr	r3, [pc, #432]	; (8007af8 <_strtod_l+0xc00>)
 8007948:	2200      	movs	r2, #0
 800794a:	f7f8 ff95 	bl	8000878 <__aeabi_dmul>
 800794e:	4680      	mov	r8, r0
 8007950:	4689      	mov	r9, r1
 8007952:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007956:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800795a:	9315      	str	r3, [sp, #84]	; 0x54
 800795c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007960:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007964:	e79d      	b.n	80078a2 <_strtod_l+0x9aa>
 8007966:	f1ba 0f01 	cmp.w	sl, #1
 800796a:	d102      	bne.n	8007972 <_strtod_l+0xa7a>
 800796c:	2f00      	cmp	r7, #0
 800796e:	f43f ad83 	beq.w	8007478 <_strtod_l+0x580>
 8007972:	4b62      	ldr	r3, [pc, #392]	; (8007afc <_strtod_l+0xc04>)
 8007974:	2200      	movs	r2, #0
 8007976:	e78e      	b.n	8007896 <_strtod_l+0x99e>
 8007978:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007af8 <_strtod_l+0xc00>
 800797c:	f04f 0800 	mov.w	r8, #0
 8007980:	e7e7      	b.n	8007952 <_strtod_l+0xa5a>
 8007982:	4b5d      	ldr	r3, [pc, #372]	; (8007af8 <_strtod_l+0xc00>)
 8007984:	4640      	mov	r0, r8
 8007986:	4649      	mov	r1, r9
 8007988:	2200      	movs	r2, #0
 800798a:	f7f8 ff75 	bl	8000878 <__aeabi_dmul>
 800798e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007990:	4680      	mov	r8, r0
 8007992:	4689      	mov	r9, r1
 8007994:	b933      	cbnz	r3, 80079a4 <_strtod_l+0xaac>
 8007996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800799a:	900e      	str	r0, [sp, #56]	; 0x38
 800799c:	930f      	str	r3, [sp, #60]	; 0x3c
 800799e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80079a2:	e7dd      	b.n	8007960 <_strtod_l+0xa68>
 80079a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80079a8:	e7f9      	b.n	800799e <_strtod_l+0xaa6>
 80079aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1a8      	bne.n	8007906 <_strtod_l+0xa0e>
 80079b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079ba:	0d1b      	lsrs	r3, r3, #20
 80079bc:	051b      	lsls	r3, r3, #20
 80079be:	429a      	cmp	r2, r3
 80079c0:	d1a1      	bne.n	8007906 <_strtod_l+0xa0e>
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f9 fab7 	bl	8000f38 <__aeabi_d2lz>
 80079ca:	f7f8 ff27 	bl	800081c <__aeabi_l2d>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f8 fd97 	bl	8000508 <__aeabi_dsub>
 80079da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079e0:	ea43 030a 	orr.w	r3, r3, sl
 80079e4:	4313      	orrs	r3, r2
 80079e6:	4680      	mov	r8, r0
 80079e8:	4689      	mov	r9, r1
 80079ea:	d055      	beq.n	8007a98 <_strtod_l+0xba0>
 80079ec:	a336      	add	r3, pc, #216	; (adr r3, 8007ac8 <_strtod_l+0xbd0>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f9 f9b3 	bl	8000d5c <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	f47f acd0 	bne.w	800739c <_strtod_l+0x4a4>
 80079fc:	a334      	add	r3, pc, #208	; (adr r3, 8007ad0 <_strtod_l+0xbd8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f9 f9c7 	bl	8000d98 <__aeabi_dcmpgt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f af7b 	beq.w	8007906 <_strtod_l+0xa0e>
 8007a10:	e4c4      	b.n	800739c <_strtod_l+0x4a4>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	b333      	cbz	r3, 8007a64 <_strtod_l+0xb6c>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a1c:	d822      	bhi.n	8007a64 <_strtod_l+0xb6c>
 8007a1e:	a32e      	add	r3, pc, #184	; (adr r3, 8007ad8 <_strtod_l+0xbe0>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f9 f9a2 	bl	8000d70 <__aeabi_dcmple>
 8007a2c:	b1a0      	cbz	r0, 8007a58 <_strtod_l+0xb60>
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	f7f9 f9f9 	bl	8000e28 <__aeabi_d2uiz>
 8007a36:	2801      	cmp	r0, #1
 8007a38:	bf38      	it	cc
 8007a3a:	2001      	movcc	r0, #1
 8007a3c:	f7f8 fea2 	bl	8000784 <__aeabi_ui2d>
 8007a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a42:	4680      	mov	r8, r0
 8007a44:	4689      	mov	r9, r1
 8007a46:	bb23      	cbnz	r3, 8007a92 <_strtod_l+0xb9a>
 8007a48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a4c:	9010      	str	r0, [sp, #64]	; 0x40
 8007a4e:	9311      	str	r3, [sp, #68]	; 0x44
 8007a50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	9309      	str	r3, [sp, #36]	; 0x24
 8007a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a68:	eeb0 0a48 	vmov.f32	s0, s16
 8007a6c:	eef0 0a68 	vmov.f32	s1, s17
 8007a70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007a74:	f001 fe58 	bl	8009728 <__ulp>
 8007a78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a7c:	ec53 2b10 	vmov	r2, r3, d0
 8007a80:	f7f8 fefa 	bl	8000878 <__aeabi_dmul>
 8007a84:	ec53 2b18 	vmov	r2, r3, d8
 8007a88:	f7f8 fd40 	bl	800050c <__adddf3>
 8007a8c:	4682      	mov	sl, r0
 8007a8e:	468b      	mov	fp, r1
 8007a90:	e78d      	b.n	80079ae <_strtod_l+0xab6>
 8007a92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a96:	e7db      	b.n	8007a50 <_strtod_l+0xb58>
 8007a98:	a311      	add	r3, pc, #68	; (adr r3, 8007ae0 <_strtod_l+0xbe8>)
 8007a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9e:	f7f9 f95d 	bl	8000d5c <__aeabi_dcmplt>
 8007aa2:	e7b2      	b.n	8007a0a <_strtod_l+0xb12>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	f7ff ba6b 	b.w	8006f88 <_strtod_l+0x90>
 8007ab2:	2a65      	cmp	r2, #101	; 0x65
 8007ab4:	f43f ab5f 	beq.w	8007176 <_strtod_l+0x27e>
 8007ab8:	2a45      	cmp	r2, #69	; 0x45
 8007aba:	f43f ab5c 	beq.w	8007176 <_strtod_l+0x27e>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f7ff bb94 	b.w	80071ec <_strtod_l+0x2f4>
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	94a03595 	.word	0x94a03595
 8007acc:	3fdfffff 	.word	0x3fdfffff
 8007ad0:	35afe535 	.word	0x35afe535
 8007ad4:	3fe00000 	.word	0x3fe00000
 8007ad8:	ffc00000 	.word	0xffc00000
 8007adc:	41dfffff 	.word	0x41dfffff
 8007ae0:	94a03595 	.word	0x94a03595
 8007ae4:	3fcfffff 	.word	0x3fcfffff
 8007ae8:	3ff00000 	.word	0x3ff00000
 8007aec:	7ff00000 	.word	0x7ff00000
 8007af0:	7fe00000 	.word	0x7fe00000
 8007af4:	7c9fffff 	.word	0x7c9fffff
 8007af8:	3fe00000 	.word	0x3fe00000
 8007afc:	bff00000 	.word	0xbff00000
 8007b00:	7fefffff 	.word	0x7fefffff

08007b04 <_strtod_r>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	; (8007b0c <_strtod_r+0x8>)
 8007b06:	f7ff b9f7 	b.w	8006ef8 <_strtod_l>
 8007b0a:	bf00      	nop
 8007b0c:	20000080 	.word	0x20000080

08007b10 <_strtol_l.constprop.0>:
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b16:	d001      	beq.n	8007b1c <_strtol_l.constprop.0+0xc>
 8007b18:	2b24      	cmp	r3, #36	; 0x24
 8007b1a:	d906      	bls.n	8007b2a <_strtol_l.constprop.0+0x1a>
 8007b1c:	f7fe fafe 	bl	800611c <__errno>
 8007b20:	2316      	movs	r3, #22
 8007b22:	6003      	str	r3, [r0, #0]
 8007b24:	2000      	movs	r0, #0
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007c10 <_strtol_l.constprop.0+0x100>
 8007b2e:	460d      	mov	r5, r1
 8007b30:	462e      	mov	r6, r5
 8007b32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b36:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007b3a:	f017 0708 	ands.w	r7, r7, #8
 8007b3e:	d1f7      	bne.n	8007b30 <_strtol_l.constprop.0+0x20>
 8007b40:	2c2d      	cmp	r4, #45	; 0x2d
 8007b42:	d132      	bne.n	8007baa <_strtol_l.constprop.0+0x9a>
 8007b44:	782c      	ldrb	r4, [r5, #0]
 8007b46:	2701      	movs	r7, #1
 8007b48:	1cb5      	adds	r5, r6, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d05b      	beq.n	8007c06 <_strtol_l.constprop.0+0xf6>
 8007b4e:	2b10      	cmp	r3, #16
 8007b50:	d109      	bne.n	8007b66 <_strtol_l.constprop.0+0x56>
 8007b52:	2c30      	cmp	r4, #48	; 0x30
 8007b54:	d107      	bne.n	8007b66 <_strtol_l.constprop.0+0x56>
 8007b56:	782c      	ldrb	r4, [r5, #0]
 8007b58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b5c:	2c58      	cmp	r4, #88	; 0x58
 8007b5e:	d14d      	bne.n	8007bfc <_strtol_l.constprop.0+0xec>
 8007b60:	786c      	ldrb	r4, [r5, #1]
 8007b62:	2310      	movs	r3, #16
 8007b64:	3502      	adds	r5, #2
 8007b66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b6e:	f04f 0c00 	mov.w	ip, #0
 8007b72:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b76:	4666      	mov	r6, ip
 8007b78:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b80:	f1be 0f09 	cmp.w	lr, #9
 8007b84:	d816      	bhi.n	8007bb4 <_strtol_l.constprop.0+0xa4>
 8007b86:	4674      	mov	r4, lr
 8007b88:	42a3      	cmp	r3, r4
 8007b8a:	dd24      	ble.n	8007bd6 <_strtol_l.constprop.0+0xc6>
 8007b8c:	f1bc 0f00 	cmp.w	ip, #0
 8007b90:	db1e      	blt.n	8007bd0 <_strtol_l.constprop.0+0xc0>
 8007b92:	45b1      	cmp	r9, r6
 8007b94:	d31c      	bcc.n	8007bd0 <_strtol_l.constprop.0+0xc0>
 8007b96:	d101      	bne.n	8007b9c <_strtol_l.constprop.0+0x8c>
 8007b98:	45a2      	cmp	sl, r4
 8007b9a:	db19      	blt.n	8007bd0 <_strtol_l.constprop.0+0xc0>
 8007b9c:	fb06 4603 	mla	r6, r6, r3, r4
 8007ba0:	f04f 0c01 	mov.w	ip, #1
 8007ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ba8:	e7e8      	b.n	8007b7c <_strtol_l.constprop.0+0x6c>
 8007baa:	2c2b      	cmp	r4, #43	; 0x2b
 8007bac:	bf04      	itt	eq
 8007bae:	782c      	ldrbeq	r4, [r5, #0]
 8007bb0:	1cb5      	addeq	r5, r6, #2
 8007bb2:	e7ca      	b.n	8007b4a <_strtol_l.constprop.0+0x3a>
 8007bb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007bb8:	f1be 0f19 	cmp.w	lr, #25
 8007bbc:	d801      	bhi.n	8007bc2 <_strtol_l.constprop.0+0xb2>
 8007bbe:	3c37      	subs	r4, #55	; 0x37
 8007bc0:	e7e2      	b.n	8007b88 <_strtol_l.constprop.0+0x78>
 8007bc2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007bc6:	f1be 0f19 	cmp.w	lr, #25
 8007bca:	d804      	bhi.n	8007bd6 <_strtol_l.constprop.0+0xc6>
 8007bcc:	3c57      	subs	r4, #87	; 0x57
 8007bce:	e7db      	b.n	8007b88 <_strtol_l.constprop.0+0x78>
 8007bd0:	f04f 3cff 	mov.w	ip, #4294967295
 8007bd4:	e7e6      	b.n	8007ba4 <_strtol_l.constprop.0+0x94>
 8007bd6:	f1bc 0f00 	cmp.w	ip, #0
 8007bda:	da05      	bge.n	8007be8 <_strtol_l.constprop.0+0xd8>
 8007bdc:	2322      	movs	r3, #34	; 0x22
 8007bde:	6003      	str	r3, [r0, #0]
 8007be0:	4646      	mov	r6, r8
 8007be2:	b942      	cbnz	r2, 8007bf6 <_strtol_l.constprop.0+0xe6>
 8007be4:	4630      	mov	r0, r6
 8007be6:	e79e      	b.n	8007b26 <_strtol_l.constprop.0+0x16>
 8007be8:	b107      	cbz	r7, 8007bec <_strtol_l.constprop.0+0xdc>
 8007bea:	4276      	negs	r6, r6
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d0f9      	beq.n	8007be4 <_strtol_l.constprop.0+0xd4>
 8007bf0:	f1bc 0f00 	cmp.w	ip, #0
 8007bf4:	d000      	beq.n	8007bf8 <_strtol_l.constprop.0+0xe8>
 8007bf6:	1e69      	subs	r1, r5, #1
 8007bf8:	6011      	str	r1, [r2, #0]
 8007bfa:	e7f3      	b.n	8007be4 <_strtol_l.constprop.0+0xd4>
 8007bfc:	2430      	movs	r4, #48	; 0x30
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1b1      	bne.n	8007b66 <_strtol_l.constprop.0+0x56>
 8007c02:	2308      	movs	r3, #8
 8007c04:	e7af      	b.n	8007b66 <_strtol_l.constprop.0+0x56>
 8007c06:	2c30      	cmp	r4, #48	; 0x30
 8007c08:	d0a5      	beq.n	8007b56 <_strtol_l.constprop.0+0x46>
 8007c0a:	230a      	movs	r3, #10
 8007c0c:	e7ab      	b.n	8007b66 <_strtol_l.constprop.0+0x56>
 8007c0e:	bf00      	nop
 8007c10:	0800abc9 	.word	0x0800abc9

08007c14 <_strtol_r>:
 8007c14:	f7ff bf7c 	b.w	8007b10 <_strtol_l.constprop.0>

08007c18 <quorem>:
 8007c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	6903      	ldr	r3, [r0, #16]
 8007c1e:	690c      	ldr	r4, [r1, #16]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	4607      	mov	r7, r0
 8007c24:	f2c0 8081 	blt.w	8007d2a <quorem+0x112>
 8007c28:	3c01      	subs	r4, #1
 8007c2a:	f101 0814 	add.w	r8, r1, #20
 8007c2e:	f100 0514 	add.w	r5, r0, #20
 8007c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c40:	3301      	adds	r3, #1
 8007c42:	429a      	cmp	r2, r3
 8007c44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c50:	d331      	bcc.n	8007cb6 <quorem+0x9e>
 8007c52:	f04f 0e00 	mov.w	lr, #0
 8007c56:	4640      	mov	r0, r8
 8007c58:	46ac      	mov	ip, r5
 8007c5a:	46f2      	mov	sl, lr
 8007c5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c60:	b293      	uxth	r3, r2
 8007c62:	fb06 e303 	mla	r3, r6, r3, lr
 8007c66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c70:	f8dc a000 	ldr.w	sl, [ip]
 8007c74:	0c12      	lsrs	r2, r2, #16
 8007c76:	fa13 f38a 	uxtah	r3, r3, sl
 8007c7a:	fb06 e202 	mla	r2, r6, r2, lr
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	9b00      	ldr	r3, [sp, #0]
 8007c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c86:	b292      	uxth	r2, r2
 8007c88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c90:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c94:	4581      	cmp	r9, r0
 8007c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ca2:	d2db      	bcs.n	8007c5c <quorem+0x44>
 8007ca4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ca8:	b92b      	cbnz	r3, 8007cb6 <quorem+0x9e>
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	d32e      	bcc.n	8007d12 <quorem+0xfa>
 8007cb4:	613c      	str	r4, [r7, #16]
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	f001 fc90 	bl	80095dc <__mcmp>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	db24      	blt.n	8007d0a <quorem+0xf2>
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f04f 0c00 	mov.w	ip, #0
 8007cc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ccc:	f8d0 e000 	ldr.w	lr, [r0]
 8007cd0:	b293      	uxth	r3, r2
 8007cd2:	ebac 0303 	sub.w	r3, ip, r3
 8007cd6:	0c12      	lsrs	r2, r2, #16
 8007cd8:	fa13 f38e 	uxtah	r3, r3, lr
 8007cdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ce0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cea:	45c1      	cmp	r9, r8
 8007cec:	f840 3b04 	str.w	r3, [r0], #4
 8007cf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cf4:	d2e8      	bcs.n	8007cc8 <quorem+0xb0>
 8007cf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfe:	b922      	cbnz	r2, 8007d0a <quorem+0xf2>
 8007d00:	3b04      	subs	r3, #4
 8007d02:	429d      	cmp	r5, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	d30a      	bcc.n	8007d1e <quorem+0x106>
 8007d08:	613c      	str	r4, [r7, #16]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	b003      	add	sp, #12
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d1cc      	bne.n	8007cb4 <quorem+0x9c>
 8007d1a:	3c01      	subs	r4, #1
 8007d1c:	e7c7      	b.n	8007cae <quorem+0x96>
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d1f0      	bne.n	8007d08 <quorem+0xf0>
 8007d26:	3c01      	subs	r4, #1
 8007d28:	e7eb      	b.n	8007d02 <quorem+0xea>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e7ee      	b.n	8007d0c <quorem+0xf4>
	...

08007d30 <_dtoa_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	ed2d 8b04 	vpush	{d8-d9}
 8007d38:	ec57 6b10 	vmov	r6, r7, d0
 8007d3c:	b093      	sub	sp, #76	; 0x4c
 8007d3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d44:	9106      	str	r1, [sp, #24]
 8007d46:	ee10 aa10 	vmov	sl, s0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d50:	46bb      	mov	fp, r7
 8007d52:	b975      	cbnz	r5, 8007d72 <_dtoa_r+0x42>
 8007d54:	2010      	movs	r0, #16
 8007d56:	f001 f94d 	bl	8008ff4 <malloc>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d5e:	b920      	cbnz	r0, 8007d6a <_dtoa_r+0x3a>
 8007d60:	4ba7      	ldr	r3, [pc, #668]	; (8008000 <_dtoa_r+0x2d0>)
 8007d62:	21ea      	movs	r1, #234	; 0xea
 8007d64:	48a7      	ldr	r0, [pc, #668]	; (8008004 <_dtoa_r+0x2d4>)
 8007d66:	f002 f8bd 	bl	8009ee4 <__assert_func>
 8007d6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d6e:	6005      	str	r5, [r0, #0]
 8007d70:	60c5      	str	r5, [r0, #12]
 8007d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	b151      	cbz	r1, 8007d8e <_dtoa_r+0x5e>
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	604a      	str	r2, [r1, #4]
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4093      	lsls	r3, r2
 8007d80:	608b      	str	r3, [r1, #8]
 8007d82:	4620      	mov	r0, r4
 8007d84:	f001 f99e 	bl	80090c4 <_Bfree>
 8007d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	1e3b      	subs	r3, r7, #0
 8007d90:	bfaa      	itet	ge
 8007d92:	2300      	movge	r3, #0
 8007d94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d98:	f8c8 3000 	strge.w	r3, [r8]
 8007d9c:	4b9a      	ldr	r3, [pc, #616]	; (8008008 <_dtoa_r+0x2d8>)
 8007d9e:	bfbc      	itt	lt
 8007da0:	2201      	movlt	r2, #1
 8007da2:	f8c8 2000 	strlt.w	r2, [r8]
 8007da6:	ea33 030b 	bics.w	r3, r3, fp
 8007daa:	d11b      	bne.n	8007de4 <_dtoa_r+0xb4>
 8007dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007db8:	4333      	orrs	r3, r6
 8007dba:	f000 8592 	beq.w	80088e2 <_dtoa_r+0xbb2>
 8007dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc0:	b963      	cbnz	r3, 8007ddc <_dtoa_r+0xac>
 8007dc2:	4b92      	ldr	r3, [pc, #584]	; (800800c <_dtoa_r+0x2dc>)
 8007dc4:	e022      	b.n	8007e0c <_dtoa_r+0xdc>
 8007dc6:	4b92      	ldr	r3, [pc, #584]	; (8008010 <_dtoa_r+0x2e0>)
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	9801      	ldr	r0, [sp, #4]
 8007dd2:	b013      	add	sp, #76	; 0x4c
 8007dd4:	ecbd 8b04 	vpop	{d8-d9}
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4b8b      	ldr	r3, [pc, #556]	; (800800c <_dtoa_r+0x2dc>)
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	3303      	adds	r3, #3
 8007de2:	e7f3      	b.n	8007dcc <_dtoa_r+0x9c>
 8007de4:	2200      	movs	r2, #0
 8007de6:	2300      	movs	r3, #0
 8007de8:	4650      	mov	r0, sl
 8007dea:	4659      	mov	r1, fp
 8007dec:	f7f8 ffac 	bl	8000d48 <__aeabi_dcmpeq>
 8007df0:	ec4b ab19 	vmov	d9, sl, fp
 8007df4:	4680      	mov	r8, r0
 8007df6:	b158      	cbz	r0, 8007e10 <_dtoa_r+0xe0>
 8007df8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 856b 	beq.w	80088dc <_dtoa_r+0xbac>
 8007e06:	4883      	ldr	r0, [pc, #524]	; (8008014 <_dtoa_r+0x2e4>)
 8007e08:	6018      	str	r0, [r3, #0]
 8007e0a:	1e43      	subs	r3, r0, #1
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	e7df      	b.n	8007dd0 <_dtoa_r+0xa0>
 8007e10:	ec4b ab10 	vmov	d0, sl, fp
 8007e14:	aa10      	add	r2, sp, #64	; 0x40
 8007e16:	a911      	add	r1, sp, #68	; 0x44
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f001 fd01 	bl	8009820 <__d2b>
 8007e1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007e22:	ee08 0a10 	vmov	s16, r0
 8007e26:	2d00      	cmp	r5, #0
 8007e28:	f000 8084 	beq.w	8007f34 <_dtoa_r+0x204>
 8007e2c:	ee19 3a90 	vmov	r3, s19
 8007e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e38:	4656      	mov	r6, sl
 8007e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007e46:	4b74      	ldr	r3, [pc, #464]	; (8008018 <_dtoa_r+0x2e8>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 fb5b 	bl	8000508 <__aeabi_dsub>
 8007e52:	a365      	add	r3, pc, #404	; (adr r3, 8007fe8 <_dtoa_r+0x2b8>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fd0e 	bl	8000878 <__aeabi_dmul>
 8007e5c:	a364      	add	r3, pc, #400	; (adr r3, 8007ff0 <_dtoa_r+0x2c0>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 fb53 	bl	800050c <__adddf3>
 8007e66:	4606      	mov	r6, r0
 8007e68:	4628      	mov	r0, r5
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	f7f8 fc9a 	bl	80007a4 <__aeabi_i2d>
 8007e70:	a361      	add	r3, pc, #388	; (adr r3, 8007ff8 <_dtoa_r+0x2c8>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fcff 	bl	8000878 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fb43 	bl	800050c <__adddf3>
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 ffa5 	bl	8000dd8 <__aeabi_d2iz>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	9000      	str	r0, [sp, #0]
 8007e92:	2300      	movs	r3, #0
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 ff60 	bl	8000d5c <__aeabi_dcmplt>
 8007e9c:	b150      	cbz	r0, 8007eb4 <_dtoa_r+0x184>
 8007e9e:	9800      	ldr	r0, [sp, #0]
 8007ea0:	f7f8 fc80 	bl	80007a4 <__aeabi_i2d>
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	f7f8 ff4e 	bl	8000d48 <__aeabi_dcmpeq>
 8007eac:	b910      	cbnz	r0, 8007eb4 <_dtoa_r+0x184>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	9b00      	ldr	r3, [sp, #0]
 8007eb6:	2b16      	cmp	r3, #22
 8007eb8:	d85a      	bhi.n	8007f70 <_dtoa_r+0x240>
 8007eba:	9a00      	ldr	r2, [sp, #0]
 8007ebc:	4b57      	ldr	r3, [pc, #348]	; (800801c <_dtoa_r+0x2ec>)
 8007ebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	ec51 0b19 	vmov	r0, r1, d9
 8007eca:	f7f8 ff47 	bl	8000d5c <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d050      	beq.n	8007f74 <_dtoa_r+0x244>
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ede:	1b5d      	subs	r5, r3, r5
 8007ee0:	1e6b      	subs	r3, r5, #1
 8007ee2:	9305      	str	r3, [sp, #20]
 8007ee4:	bf45      	ittet	mi
 8007ee6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007eea:	9304      	strmi	r3, [sp, #16]
 8007eec:	2300      	movpl	r3, #0
 8007eee:	2300      	movmi	r3, #0
 8007ef0:	bf4c      	ite	mi
 8007ef2:	9305      	strmi	r3, [sp, #20]
 8007ef4:	9304      	strpl	r3, [sp, #16]
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	db3d      	blt.n	8007f78 <_dtoa_r+0x248>
 8007efc:	9b05      	ldr	r3, [sp, #20]
 8007efe:	9a00      	ldr	r2, [sp, #0]
 8007f00:	920a      	str	r2, [sp, #40]	; 0x28
 8007f02:	4413      	add	r3, r2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9307      	str	r3, [sp, #28]
 8007f0a:	9b06      	ldr	r3, [sp, #24]
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	f200 8089 	bhi.w	8008024 <_dtoa_r+0x2f4>
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	bfc4      	itt	gt
 8007f16:	3b04      	subgt	r3, #4
 8007f18:	9306      	strgt	r3, [sp, #24]
 8007f1a:	9b06      	ldr	r3, [sp, #24]
 8007f1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f20:	bfcc      	ite	gt
 8007f22:	2500      	movgt	r5, #0
 8007f24:	2501      	movle	r5, #1
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	f200 8087 	bhi.w	800803a <_dtoa_r+0x30a>
 8007f2c:	e8df f003 	tbb	[pc, r3]
 8007f30:	59383a2d 	.word	0x59383a2d
 8007f34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007f38:	441d      	add	r5, r3
 8007f3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	bfc1      	itttt	gt
 8007f42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007f4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f52:	bfda      	itte	le
 8007f54:	f1c3 0320 	rsble	r3, r3, #32
 8007f58:	fa06 f003 	lslle.w	r0, r6, r3
 8007f5c:	4318      	orrgt	r0, r3
 8007f5e:	f7f8 fc11 	bl	8000784 <__aeabi_ui2d>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4606      	mov	r6, r0
 8007f66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f6a:	3d01      	subs	r5, #1
 8007f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f6e:	e76a      	b.n	8007e46 <_dtoa_r+0x116>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e7b2      	b.n	8007eda <_dtoa_r+0x1aa>
 8007f74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007f76:	e7b1      	b.n	8007edc <_dtoa_r+0x1ac>
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	9a00      	ldr	r2, [sp, #0]
 8007f7c:	1a9b      	subs	r3, r3, r2
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	4253      	negs	r3, r2
 8007f82:	9307      	str	r3, [sp, #28]
 8007f84:	2300      	movs	r3, #0
 8007f86:	930a      	str	r3, [sp, #40]	; 0x28
 8007f88:	e7bf      	b.n	8007f0a <_dtoa_r+0x1da>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	9308      	str	r3, [sp, #32]
 8007f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dc55      	bgt.n	8008040 <_dtoa_r+0x310>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9e:	e00c      	b.n	8007fba <_dtoa_r+0x28a>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7f3      	b.n	8007f8c <_dtoa_r+0x25c>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	9308      	str	r3, [sp, #32]
 8007faa:	9b00      	ldr	r3, [sp, #0]
 8007fac:	4413      	add	r3, r2
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	9303      	str	r3, [sp, #12]
 8007fb6:	bfb8      	it	lt
 8007fb8:	2301      	movlt	r3, #1
 8007fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	6042      	str	r2, [r0, #4]
 8007fc0:	2204      	movs	r2, #4
 8007fc2:	f102 0614 	add.w	r6, r2, #20
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	6841      	ldr	r1, [r0, #4]
 8007fca:	d93d      	bls.n	8008048 <_dtoa_r+0x318>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f001 f839 	bl	8009044 <_Balloc>
 8007fd2:	9001      	str	r0, [sp, #4]
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d13b      	bne.n	8008050 <_dtoa_r+0x320>
 8007fd8:	4b11      	ldr	r3, [pc, #68]	; (8008020 <_dtoa_r+0x2f0>)
 8007fda:	4602      	mov	r2, r0
 8007fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fe0:	e6c0      	b.n	8007d64 <_dtoa_r+0x34>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7df      	b.n	8007fa6 <_dtoa_r+0x276>
 8007fe6:	bf00      	nop
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	0800acd6 	.word	0x0800acd6
 8008004:	0800aced 	.word	0x0800aced
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800acd2 	.word	0x0800acd2
 8008010:	0800acc9 	.word	0x0800acc9
 8008014:	0800ab49 	.word	0x0800ab49
 8008018:	3ff80000 	.word	0x3ff80000
 800801c:	0800ae58 	.word	0x0800ae58
 8008020:	0800ad48 	.word	0x0800ad48
 8008024:	2501      	movs	r5, #1
 8008026:	2300      	movs	r3, #0
 8008028:	9306      	str	r3, [sp, #24]
 800802a:	9508      	str	r5, [sp, #32]
 800802c:	f04f 33ff 	mov.w	r3, #4294967295
 8008030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	2312      	movs	r3, #18
 8008038:	e7b0      	b.n	8007f9c <_dtoa_r+0x26c>
 800803a:	2301      	movs	r3, #1
 800803c:	9308      	str	r3, [sp, #32]
 800803e:	e7f5      	b.n	800802c <_dtoa_r+0x2fc>
 8008040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008046:	e7b8      	b.n	8007fba <_dtoa_r+0x28a>
 8008048:	3101      	adds	r1, #1
 800804a:	6041      	str	r1, [r0, #4]
 800804c:	0052      	lsls	r2, r2, #1
 800804e:	e7b8      	b.n	8007fc2 <_dtoa_r+0x292>
 8008050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008052:	9a01      	ldr	r2, [sp, #4]
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	2b0e      	cmp	r3, #14
 800805a:	f200 809d 	bhi.w	8008198 <_dtoa_r+0x468>
 800805e:	2d00      	cmp	r5, #0
 8008060:	f000 809a 	beq.w	8008198 <_dtoa_r+0x468>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	dd32      	ble.n	80080d0 <_dtoa_r+0x3a0>
 800806a:	4ab7      	ldr	r2, [pc, #732]	; (8008348 <_dtoa_r+0x618>)
 800806c:	f003 030f 	and.w	r3, r3, #15
 8008070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008074:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008078:	9b00      	ldr	r3, [sp, #0]
 800807a:	05d8      	lsls	r0, r3, #23
 800807c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008080:	d516      	bpl.n	80080b0 <_dtoa_r+0x380>
 8008082:	4bb2      	ldr	r3, [pc, #712]	; (800834c <_dtoa_r+0x61c>)
 8008084:	ec51 0b19 	vmov	r0, r1, d9
 8008088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800808c:	f7f8 fd1e 	bl	8000acc <__aeabi_ddiv>
 8008090:	f007 070f 	and.w	r7, r7, #15
 8008094:	4682      	mov	sl, r0
 8008096:	468b      	mov	fp, r1
 8008098:	2503      	movs	r5, #3
 800809a:	4eac      	ldr	r6, [pc, #688]	; (800834c <_dtoa_r+0x61c>)
 800809c:	b957      	cbnz	r7, 80080b4 <_dtoa_r+0x384>
 800809e:	4642      	mov	r2, r8
 80080a0:	464b      	mov	r3, r9
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 fd11 	bl	8000acc <__aeabi_ddiv>
 80080aa:	4682      	mov	sl, r0
 80080ac:	468b      	mov	fp, r1
 80080ae:	e028      	b.n	8008102 <_dtoa_r+0x3d2>
 80080b0:	2502      	movs	r5, #2
 80080b2:	e7f2      	b.n	800809a <_dtoa_r+0x36a>
 80080b4:	07f9      	lsls	r1, r7, #31
 80080b6:	d508      	bpl.n	80080ca <_dtoa_r+0x39a>
 80080b8:	4640      	mov	r0, r8
 80080ba:	4649      	mov	r1, r9
 80080bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080c0:	f7f8 fbda 	bl	8000878 <__aeabi_dmul>
 80080c4:	3501      	adds	r5, #1
 80080c6:	4680      	mov	r8, r0
 80080c8:	4689      	mov	r9, r1
 80080ca:	107f      	asrs	r7, r7, #1
 80080cc:	3608      	adds	r6, #8
 80080ce:	e7e5      	b.n	800809c <_dtoa_r+0x36c>
 80080d0:	f000 809b 	beq.w	800820a <_dtoa_r+0x4da>
 80080d4:	9b00      	ldr	r3, [sp, #0]
 80080d6:	4f9d      	ldr	r7, [pc, #628]	; (800834c <_dtoa_r+0x61c>)
 80080d8:	425e      	negs	r6, r3
 80080da:	4b9b      	ldr	r3, [pc, #620]	; (8008348 <_dtoa_r+0x618>)
 80080dc:	f006 020f 	and.w	r2, r6, #15
 80080e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	ec51 0b19 	vmov	r0, r1, d9
 80080ec:	f7f8 fbc4 	bl	8000878 <__aeabi_dmul>
 80080f0:	1136      	asrs	r6, r6, #4
 80080f2:	4682      	mov	sl, r0
 80080f4:	468b      	mov	fp, r1
 80080f6:	2300      	movs	r3, #0
 80080f8:	2502      	movs	r5, #2
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d17a      	bne.n	80081f4 <_dtoa_r+0x4c4>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1d3      	bne.n	80080aa <_dtoa_r+0x37a>
 8008102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8082 	beq.w	800820e <_dtoa_r+0x4de>
 800810a:	4b91      	ldr	r3, [pc, #580]	; (8008350 <_dtoa_r+0x620>)
 800810c:	2200      	movs	r2, #0
 800810e:	4650      	mov	r0, sl
 8008110:	4659      	mov	r1, fp
 8008112:	f7f8 fe23 	bl	8000d5c <__aeabi_dcmplt>
 8008116:	2800      	cmp	r0, #0
 8008118:	d079      	beq.n	800820e <_dtoa_r+0x4de>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d076      	beq.n	800820e <_dtoa_r+0x4de>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd36      	ble.n	8008194 <_dtoa_r+0x464>
 8008126:	9b00      	ldr	r3, [sp, #0]
 8008128:	4650      	mov	r0, sl
 800812a:	4659      	mov	r1, fp
 800812c:	1e5f      	subs	r7, r3, #1
 800812e:	2200      	movs	r2, #0
 8008130:	4b88      	ldr	r3, [pc, #544]	; (8008354 <_dtoa_r+0x624>)
 8008132:	f7f8 fba1 	bl	8000878 <__aeabi_dmul>
 8008136:	9e02      	ldr	r6, [sp, #8]
 8008138:	4682      	mov	sl, r0
 800813a:	468b      	mov	fp, r1
 800813c:	3501      	adds	r5, #1
 800813e:	4628      	mov	r0, r5
 8008140:	f7f8 fb30 	bl	80007a4 <__aeabi_i2d>
 8008144:	4652      	mov	r2, sl
 8008146:	465b      	mov	r3, fp
 8008148:	f7f8 fb96 	bl	8000878 <__aeabi_dmul>
 800814c:	4b82      	ldr	r3, [pc, #520]	; (8008358 <_dtoa_r+0x628>)
 800814e:	2200      	movs	r2, #0
 8008150:	f7f8 f9dc 	bl	800050c <__adddf3>
 8008154:	46d0      	mov	r8, sl
 8008156:	46d9      	mov	r9, fp
 8008158:	4682      	mov	sl, r0
 800815a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800815e:	2e00      	cmp	r6, #0
 8008160:	d158      	bne.n	8008214 <_dtoa_r+0x4e4>
 8008162:	4b7e      	ldr	r3, [pc, #504]	; (800835c <_dtoa_r+0x62c>)
 8008164:	2200      	movs	r2, #0
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 f9cd 	bl	8000508 <__aeabi_dsub>
 800816e:	4652      	mov	r2, sl
 8008170:	465b      	mov	r3, fp
 8008172:	4680      	mov	r8, r0
 8008174:	4689      	mov	r9, r1
 8008176:	f7f8 fe0f 	bl	8000d98 <__aeabi_dcmpgt>
 800817a:	2800      	cmp	r0, #0
 800817c:	f040 8295 	bne.w	80086aa <_dtoa_r+0x97a>
 8008180:	4652      	mov	r2, sl
 8008182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 fde7 	bl	8000d5c <__aeabi_dcmplt>
 800818e:	2800      	cmp	r0, #0
 8008190:	f040 8289 	bne.w	80086a6 <_dtoa_r+0x976>
 8008194:	ec5b ab19 	vmov	sl, fp, d9
 8008198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800819a:	2b00      	cmp	r3, #0
 800819c:	f2c0 8148 	blt.w	8008430 <_dtoa_r+0x700>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	2a0e      	cmp	r2, #14
 80081a4:	f300 8144 	bgt.w	8008430 <_dtoa_r+0x700>
 80081a8:	4b67      	ldr	r3, [pc, #412]	; (8008348 <_dtoa_r+0x618>)
 80081aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f280 80d5 	bge.w	8008364 <_dtoa_r+0x634>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f300 80d1 	bgt.w	8008364 <_dtoa_r+0x634>
 80081c2:	f040 826f 	bne.w	80086a4 <_dtoa_r+0x974>
 80081c6:	4b65      	ldr	r3, [pc, #404]	; (800835c <_dtoa_r+0x62c>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 fb53 	bl	8000878 <__aeabi_dmul>
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	f7f8 fdd5 	bl	8000d84 <__aeabi_dcmpge>
 80081da:	9e03      	ldr	r6, [sp, #12]
 80081dc:	4637      	mov	r7, r6
 80081de:	2800      	cmp	r0, #0
 80081e0:	f040 8245 	bne.w	800866e <_dtoa_r+0x93e>
 80081e4:	9d01      	ldr	r5, [sp, #4]
 80081e6:	2331      	movs	r3, #49	; 0x31
 80081e8:	f805 3b01 	strb.w	r3, [r5], #1
 80081ec:	9b00      	ldr	r3, [sp, #0]
 80081ee:	3301      	adds	r3, #1
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	e240      	b.n	8008676 <_dtoa_r+0x946>
 80081f4:	07f2      	lsls	r2, r6, #31
 80081f6:	d505      	bpl.n	8008204 <_dtoa_r+0x4d4>
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f7f8 fb3c 	bl	8000878 <__aeabi_dmul>
 8008200:	3501      	adds	r5, #1
 8008202:	2301      	movs	r3, #1
 8008204:	1076      	asrs	r6, r6, #1
 8008206:	3708      	adds	r7, #8
 8008208:	e777      	b.n	80080fa <_dtoa_r+0x3ca>
 800820a:	2502      	movs	r5, #2
 800820c:	e779      	b.n	8008102 <_dtoa_r+0x3d2>
 800820e:	9f00      	ldr	r7, [sp, #0]
 8008210:	9e03      	ldr	r6, [sp, #12]
 8008212:	e794      	b.n	800813e <_dtoa_r+0x40e>
 8008214:	9901      	ldr	r1, [sp, #4]
 8008216:	4b4c      	ldr	r3, [pc, #304]	; (8008348 <_dtoa_r+0x618>)
 8008218:	4431      	add	r1, r6
 800821a:	910d      	str	r1, [sp, #52]	; 0x34
 800821c:	9908      	ldr	r1, [sp, #32]
 800821e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008226:	2900      	cmp	r1, #0
 8008228:	d043      	beq.n	80082b2 <_dtoa_r+0x582>
 800822a:	494d      	ldr	r1, [pc, #308]	; (8008360 <_dtoa_r+0x630>)
 800822c:	2000      	movs	r0, #0
 800822e:	f7f8 fc4d 	bl	8000acc <__aeabi_ddiv>
 8008232:	4652      	mov	r2, sl
 8008234:	465b      	mov	r3, fp
 8008236:	f7f8 f967 	bl	8000508 <__aeabi_dsub>
 800823a:	9d01      	ldr	r5, [sp, #4]
 800823c:	4682      	mov	sl, r0
 800823e:	468b      	mov	fp, r1
 8008240:	4649      	mov	r1, r9
 8008242:	4640      	mov	r0, r8
 8008244:	f7f8 fdc8 	bl	8000dd8 <__aeabi_d2iz>
 8008248:	4606      	mov	r6, r0
 800824a:	f7f8 faab 	bl	80007a4 <__aeabi_i2d>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4640      	mov	r0, r8
 8008254:	4649      	mov	r1, r9
 8008256:	f7f8 f957 	bl	8000508 <__aeabi_dsub>
 800825a:	3630      	adds	r6, #48	; 0x30
 800825c:	f805 6b01 	strb.w	r6, [r5], #1
 8008260:	4652      	mov	r2, sl
 8008262:	465b      	mov	r3, fp
 8008264:	4680      	mov	r8, r0
 8008266:	4689      	mov	r9, r1
 8008268:	f7f8 fd78 	bl	8000d5c <__aeabi_dcmplt>
 800826c:	2800      	cmp	r0, #0
 800826e:	d163      	bne.n	8008338 <_dtoa_r+0x608>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	4936      	ldr	r1, [pc, #216]	; (8008350 <_dtoa_r+0x620>)
 8008276:	2000      	movs	r0, #0
 8008278:	f7f8 f946 	bl	8000508 <__aeabi_dsub>
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	f7f8 fd6c 	bl	8000d5c <__aeabi_dcmplt>
 8008284:	2800      	cmp	r0, #0
 8008286:	f040 80b5 	bne.w	80083f4 <_dtoa_r+0x6c4>
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	429d      	cmp	r5, r3
 800828e:	d081      	beq.n	8008194 <_dtoa_r+0x464>
 8008290:	4b30      	ldr	r3, [pc, #192]	; (8008354 <_dtoa_r+0x624>)
 8008292:	2200      	movs	r2, #0
 8008294:	4650      	mov	r0, sl
 8008296:	4659      	mov	r1, fp
 8008298:	f7f8 faee 	bl	8000878 <__aeabi_dmul>
 800829c:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <_dtoa_r+0x624>)
 800829e:	4682      	mov	sl, r0
 80082a0:	468b      	mov	fp, r1
 80082a2:	4640      	mov	r0, r8
 80082a4:	4649      	mov	r1, r9
 80082a6:	2200      	movs	r2, #0
 80082a8:	f7f8 fae6 	bl	8000878 <__aeabi_dmul>
 80082ac:	4680      	mov	r8, r0
 80082ae:	4689      	mov	r9, r1
 80082b0:	e7c6      	b.n	8008240 <_dtoa_r+0x510>
 80082b2:	4650      	mov	r0, sl
 80082b4:	4659      	mov	r1, fp
 80082b6:	f7f8 fadf 	bl	8000878 <__aeabi_dmul>
 80082ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082bc:	9d01      	ldr	r5, [sp, #4]
 80082be:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c0:	4682      	mov	sl, r0
 80082c2:	468b      	mov	fp, r1
 80082c4:	4649      	mov	r1, r9
 80082c6:	4640      	mov	r0, r8
 80082c8:	f7f8 fd86 	bl	8000dd8 <__aeabi_d2iz>
 80082cc:	4606      	mov	r6, r0
 80082ce:	f7f8 fa69 	bl	80007a4 <__aeabi_i2d>
 80082d2:	3630      	adds	r6, #48	; 0x30
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f8 f914 	bl	8000508 <__aeabi_dsub>
 80082e0:	f805 6b01 	strb.w	r6, [r5], #1
 80082e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082e6:	429d      	cmp	r5, r3
 80082e8:	4680      	mov	r8, r0
 80082ea:	4689      	mov	r9, r1
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	d124      	bne.n	800833c <_dtoa_r+0x60c>
 80082f2:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <_dtoa_r+0x630>)
 80082f4:	4650      	mov	r0, sl
 80082f6:	4659      	mov	r1, fp
 80082f8:	f7f8 f908 	bl	800050c <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fd48 	bl	8000d98 <__aeabi_dcmpgt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d173      	bne.n	80083f4 <_dtoa_r+0x6c4>
 800830c:	4652      	mov	r2, sl
 800830e:	465b      	mov	r3, fp
 8008310:	4913      	ldr	r1, [pc, #76]	; (8008360 <_dtoa_r+0x630>)
 8008312:	2000      	movs	r0, #0
 8008314:	f7f8 f8f8 	bl	8000508 <__aeabi_dsub>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 fd1c 	bl	8000d5c <__aeabi_dcmplt>
 8008324:	2800      	cmp	r0, #0
 8008326:	f43f af35 	beq.w	8008194 <_dtoa_r+0x464>
 800832a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800832c:	1e6b      	subs	r3, r5, #1
 800832e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008334:	2b30      	cmp	r3, #48	; 0x30
 8008336:	d0f8      	beq.n	800832a <_dtoa_r+0x5fa>
 8008338:	9700      	str	r7, [sp, #0]
 800833a:	e049      	b.n	80083d0 <_dtoa_r+0x6a0>
 800833c:	4b05      	ldr	r3, [pc, #20]	; (8008354 <_dtoa_r+0x624>)
 800833e:	f7f8 fa9b 	bl	8000878 <__aeabi_dmul>
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	e7bd      	b.n	80082c4 <_dtoa_r+0x594>
 8008348:	0800ae58 	.word	0x0800ae58
 800834c:	0800ae30 	.word	0x0800ae30
 8008350:	3ff00000 	.word	0x3ff00000
 8008354:	40240000 	.word	0x40240000
 8008358:	401c0000 	.word	0x401c0000
 800835c:	40140000 	.word	0x40140000
 8008360:	3fe00000 	.word	0x3fe00000
 8008364:	9d01      	ldr	r5, [sp, #4]
 8008366:	4656      	mov	r6, sl
 8008368:	465f      	mov	r7, fp
 800836a:	4642      	mov	r2, r8
 800836c:	464b      	mov	r3, r9
 800836e:	4630      	mov	r0, r6
 8008370:	4639      	mov	r1, r7
 8008372:	f7f8 fbab 	bl	8000acc <__aeabi_ddiv>
 8008376:	f7f8 fd2f 	bl	8000dd8 <__aeabi_d2iz>
 800837a:	4682      	mov	sl, r0
 800837c:	f7f8 fa12 	bl	80007a4 <__aeabi_i2d>
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	f7f8 fa78 	bl	8000878 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008394:	f7f8 f8b8 	bl	8000508 <__aeabi_dsub>
 8008398:	f805 6b01 	strb.w	r6, [r5], #1
 800839c:	9e01      	ldr	r6, [sp, #4]
 800839e:	9f03      	ldr	r7, [sp, #12]
 80083a0:	1bae      	subs	r6, r5, r6
 80083a2:	42b7      	cmp	r7, r6
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	d135      	bne.n	8008416 <_dtoa_r+0x6e6>
 80083aa:	f7f8 f8af 	bl	800050c <__adddf3>
 80083ae:	4642      	mov	r2, r8
 80083b0:	464b      	mov	r3, r9
 80083b2:	4606      	mov	r6, r0
 80083b4:	460f      	mov	r7, r1
 80083b6:	f7f8 fcef 	bl	8000d98 <__aeabi_dcmpgt>
 80083ba:	b9d0      	cbnz	r0, 80083f2 <_dtoa_r+0x6c2>
 80083bc:	4642      	mov	r2, r8
 80083be:	464b      	mov	r3, r9
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f8 fcc0 	bl	8000d48 <__aeabi_dcmpeq>
 80083c8:	b110      	cbz	r0, 80083d0 <_dtoa_r+0x6a0>
 80083ca:	f01a 0f01 	tst.w	sl, #1
 80083ce:	d110      	bne.n	80083f2 <_dtoa_r+0x6c2>
 80083d0:	4620      	mov	r0, r4
 80083d2:	ee18 1a10 	vmov	r1, s16
 80083d6:	f000 fe75 	bl	80090c4 <_Bfree>
 80083da:	2300      	movs	r3, #0
 80083dc:	9800      	ldr	r0, [sp, #0]
 80083de:	702b      	strb	r3, [r5, #0]
 80083e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e2:	3001      	adds	r0, #1
 80083e4:	6018      	str	r0, [r3, #0]
 80083e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f43f acf1 	beq.w	8007dd0 <_dtoa_r+0xa0>
 80083ee:	601d      	str	r5, [r3, #0]
 80083f0:	e4ee      	b.n	8007dd0 <_dtoa_r+0xa0>
 80083f2:	9f00      	ldr	r7, [sp, #0]
 80083f4:	462b      	mov	r3, r5
 80083f6:	461d      	mov	r5, r3
 80083f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083fc:	2a39      	cmp	r2, #57	; 0x39
 80083fe:	d106      	bne.n	800840e <_dtoa_r+0x6de>
 8008400:	9a01      	ldr	r2, [sp, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d1f7      	bne.n	80083f6 <_dtoa_r+0x6c6>
 8008406:	9901      	ldr	r1, [sp, #4]
 8008408:	2230      	movs	r2, #48	; 0x30
 800840a:	3701      	adds	r7, #1
 800840c:	700a      	strb	r2, [r1, #0]
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	3201      	adds	r2, #1
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e790      	b.n	8008338 <_dtoa_r+0x608>
 8008416:	4ba6      	ldr	r3, [pc, #664]	; (80086b0 <_dtoa_r+0x980>)
 8008418:	2200      	movs	r2, #0
 800841a:	f7f8 fa2d 	bl	8000878 <__aeabi_dmul>
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	f7f8 fc8f 	bl	8000d48 <__aeabi_dcmpeq>
 800842a:	2800      	cmp	r0, #0
 800842c:	d09d      	beq.n	800836a <_dtoa_r+0x63a>
 800842e:	e7cf      	b.n	80083d0 <_dtoa_r+0x6a0>
 8008430:	9a08      	ldr	r2, [sp, #32]
 8008432:	2a00      	cmp	r2, #0
 8008434:	f000 80d7 	beq.w	80085e6 <_dtoa_r+0x8b6>
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2a01      	cmp	r2, #1
 800843c:	f300 80ba 	bgt.w	80085b4 <_dtoa_r+0x884>
 8008440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008442:	2a00      	cmp	r2, #0
 8008444:	f000 80b2 	beq.w	80085ac <_dtoa_r+0x87c>
 8008448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800844c:	9e07      	ldr	r6, [sp, #28]
 800844e:	9d04      	ldr	r5, [sp, #16]
 8008450:	9a04      	ldr	r2, [sp, #16]
 8008452:	441a      	add	r2, r3
 8008454:	9204      	str	r2, [sp, #16]
 8008456:	9a05      	ldr	r2, [sp, #20]
 8008458:	2101      	movs	r1, #1
 800845a:	441a      	add	r2, r3
 800845c:	4620      	mov	r0, r4
 800845e:	9205      	str	r2, [sp, #20]
 8008460:	f000 ff32 	bl	80092c8 <__i2b>
 8008464:	4607      	mov	r7, r0
 8008466:	2d00      	cmp	r5, #0
 8008468:	dd0c      	ble.n	8008484 <_dtoa_r+0x754>
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd09      	ble.n	8008484 <_dtoa_r+0x754>
 8008470:	42ab      	cmp	r3, r5
 8008472:	9a04      	ldr	r2, [sp, #16]
 8008474:	bfa8      	it	ge
 8008476:	462b      	movge	r3, r5
 8008478:	1ad2      	subs	r2, r2, r3
 800847a:	9204      	str	r2, [sp, #16]
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	1aed      	subs	r5, r5, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	9b07      	ldr	r3, [sp, #28]
 8008486:	b31b      	cbz	r3, 80084d0 <_dtoa_r+0x7a0>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 80af 	beq.w	80085ee <_dtoa_r+0x8be>
 8008490:	2e00      	cmp	r6, #0
 8008492:	dd13      	ble.n	80084bc <_dtoa_r+0x78c>
 8008494:	4639      	mov	r1, r7
 8008496:	4632      	mov	r2, r6
 8008498:	4620      	mov	r0, r4
 800849a:	f000 ffd5 	bl	8009448 <__pow5mult>
 800849e:	ee18 2a10 	vmov	r2, s16
 80084a2:	4601      	mov	r1, r0
 80084a4:	4607      	mov	r7, r0
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 ff24 	bl	80092f4 <__multiply>
 80084ac:	ee18 1a10 	vmov	r1, s16
 80084b0:	4680      	mov	r8, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 fe06 	bl	80090c4 <_Bfree>
 80084b8:	ee08 8a10 	vmov	s16, r8
 80084bc:	9b07      	ldr	r3, [sp, #28]
 80084be:	1b9a      	subs	r2, r3, r6
 80084c0:	d006      	beq.n	80084d0 <_dtoa_r+0x7a0>
 80084c2:	ee18 1a10 	vmov	r1, s16
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 ffbe 	bl	8009448 <__pow5mult>
 80084cc:	ee08 0a10 	vmov	s16, r0
 80084d0:	2101      	movs	r1, #1
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fef8 	bl	80092c8 <__i2b>
 80084d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	4606      	mov	r6, r0
 80084de:	f340 8088 	ble.w	80085f2 <_dtoa_r+0x8c2>
 80084e2:	461a      	mov	r2, r3
 80084e4:	4601      	mov	r1, r0
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ffae 	bl	8009448 <__pow5mult>
 80084ec:	9b06      	ldr	r3, [sp, #24]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	4606      	mov	r6, r0
 80084f2:	f340 8081 	ble.w	80085f8 <_dtoa_r+0x8c8>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	6933      	ldr	r3, [r6, #16]
 80084fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008500:	6918      	ldr	r0, [r3, #16]
 8008502:	f000 fe91 	bl	8009228 <__hi0bits>
 8008506:	f1c0 0020 	rsb	r0, r0, #32
 800850a:	9b05      	ldr	r3, [sp, #20]
 800850c:	4418      	add	r0, r3
 800850e:	f010 001f 	ands.w	r0, r0, #31
 8008512:	f000 8092 	beq.w	800863a <_dtoa_r+0x90a>
 8008516:	f1c0 0320 	rsb	r3, r0, #32
 800851a:	2b04      	cmp	r3, #4
 800851c:	f340 808a 	ble.w	8008634 <_dtoa_r+0x904>
 8008520:	f1c0 001c 	rsb	r0, r0, #28
 8008524:	9b04      	ldr	r3, [sp, #16]
 8008526:	4403      	add	r3, r0
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	9b05      	ldr	r3, [sp, #20]
 800852c:	4403      	add	r3, r0
 800852e:	4405      	add	r5, r0
 8008530:	9305      	str	r3, [sp, #20]
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	dd07      	ble.n	8008548 <_dtoa_r+0x818>
 8008538:	ee18 1a10 	vmov	r1, s16
 800853c:	461a      	mov	r2, r3
 800853e:	4620      	mov	r0, r4
 8008540:	f000 ffdc 	bl	80094fc <__lshift>
 8008544:	ee08 0a10 	vmov	s16, r0
 8008548:	9b05      	ldr	r3, [sp, #20]
 800854a:	2b00      	cmp	r3, #0
 800854c:	dd05      	ble.n	800855a <_dtoa_r+0x82a>
 800854e:	4631      	mov	r1, r6
 8008550:	461a      	mov	r2, r3
 8008552:	4620      	mov	r0, r4
 8008554:	f000 ffd2 	bl	80094fc <__lshift>
 8008558:	4606      	mov	r6, r0
 800855a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855c:	2b00      	cmp	r3, #0
 800855e:	d06e      	beq.n	800863e <_dtoa_r+0x90e>
 8008560:	ee18 0a10 	vmov	r0, s16
 8008564:	4631      	mov	r1, r6
 8008566:	f001 f839 	bl	80095dc <__mcmp>
 800856a:	2800      	cmp	r0, #0
 800856c:	da67      	bge.n	800863e <_dtoa_r+0x90e>
 800856e:	9b00      	ldr	r3, [sp, #0]
 8008570:	3b01      	subs	r3, #1
 8008572:	ee18 1a10 	vmov	r1, s16
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	220a      	movs	r2, #10
 800857a:	2300      	movs	r3, #0
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fdc3 	bl	8009108 <__multadd>
 8008582:	9b08      	ldr	r3, [sp, #32]
 8008584:	ee08 0a10 	vmov	s16, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 81b1 	beq.w	80088f0 <_dtoa_r+0xbc0>
 800858e:	2300      	movs	r3, #0
 8008590:	4639      	mov	r1, r7
 8008592:	220a      	movs	r2, #10
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fdb7 	bl	8009108 <__multadd>
 800859a:	9b02      	ldr	r3, [sp, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	4607      	mov	r7, r0
 80085a0:	f300 808e 	bgt.w	80086c0 <_dtoa_r+0x990>
 80085a4:	9b06      	ldr	r3, [sp, #24]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	dc51      	bgt.n	800864e <_dtoa_r+0x91e>
 80085aa:	e089      	b.n	80086c0 <_dtoa_r+0x990>
 80085ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085b2:	e74b      	b.n	800844c <_dtoa_r+0x71c>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	1e5e      	subs	r6, r3, #1
 80085b8:	9b07      	ldr	r3, [sp, #28]
 80085ba:	42b3      	cmp	r3, r6
 80085bc:	bfbf      	itttt	lt
 80085be:	9b07      	ldrlt	r3, [sp, #28]
 80085c0:	9607      	strlt	r6, [sp, #28]
 80085c2:	1af2      	sublt	r2, r6, r3
 80085c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085c6:	bfb6      	itet	lt
 80085c8:	189b      	addlt	r3, r3, r2
 80085ca:	1b9e      	subge	r6, r3, r6
 80085cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	bfb8      	it	lt
 80085d2:	2600      	movlt	r6, #0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfb7      	itett	lt
 80085d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80085dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80085e0:	1a9d      	sublt	r5, r3, r2
 80085e2:	2300      	movlt	r3, #0
 80085e4:	e734      	b.n	8008450 <_dtoa_r+0x720>
 80085e6:	9e07      	ldr	r6, [sp, #28]
 80085e8:	9d04      	ldr	r5, [sp, #16]
 80085ea:	9f08      	ldr	r7, [sp, #32]
 80085ec:	e73b      	b.n	8008466 <_dtoa_r+0x736>
 80085ee:	9a07      	ldr	r2, [sp, #28]
 80085f0:	e767      	b.n	80084c2 <_dtoa_r+0x792>
 80085f2:	9b06      	ldr	r3, [sp, #24]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	dc18      	bgt.n	800862a <_dtoa_r+0x8fa>
 80085f8:	f1ba 0f00 	cmp.w	sl, #0
 80085fc:	d115      	bne.n	800862a <_dtoa_r+0x8fa>
 80085fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008602:	b993      	cbnz	r3, 800862a <_dtoa_r+0x8fa>
 8008604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008608:	0d1b      	lsrs	r3, r3, #20
 800860a:	051b      	lsls	r3, r3, #20
 800860c:	b183      	cbz	r3, 8008630 <_dtoa_r+0x900>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	3301      	adds	r3, #1
 8008612:	9304      	str	r3, [sp, #16]
 8008614:	9b05      	ldr	r3, [sp, #20]
 8008616:	3301      	adds	r3, #1
 8008618:	9305      	str	r3, [sp, #20]
 800861a:	f04f 0801 	mov.w	r8, #1
 800861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f af6a 	bne.w	80084fa <_dtoa_r+0x7ca>
 8008626:	2001      	movs	r0, #1
 8008628:	e76f      	b.n	800850a <_dtoa_r+0x7da>
 800862a:	f04f 0800 	mov.w	r8, #0
 800862e:	e7f6      	b.n	800861e <_dtoa_r+0x8ee>
 8008630:	4698      	mov	r8, r3
 8008632:	e7f4      	b.n	800861e <_dtoa_r+0x8ee>
 8008634:	f43f af7d 	beq.w	8008532 <_dtoa_r+0x802>
 8008638:	4618      	mov	r0, r3
 800863a:	301c      	adds	r0, #28
 800863c:	e772      	b.n	8008524 <_dtoa_r+0x7f4>
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dc37      	bgt.n	80086b4 <_dtoa_r+0x984>
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	2b02      	cmp	r3, #2
 8008648:	dd34      	ble.n	80086b4 <_dtoa_r+0x984>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	9302      	str	r3, [sp, #8]
 800864e:	9b02      	ldr	r3, [sp, #8]
 8008650:	b96b      	cbnz	r3, 800866e <_dtoa_r+0x93e>
 8008652:	4631      	mov	r1, r6
 8008654:	2205      	movs	r2, #5
 8008656:	4620      	mov	r0, r4
 8008658:	f000 fd56 	bl	8009108 <__multadd>
 800865c:	4601      	mov	r1, r0
 800865e:	4606      	mov	r6, r0
 8008660:	ee18 0a10 	vmov	r0, s16
 8008664:	f000 ffba 	bl	80095dc <__mcmp>
 8008668:	2800      	cmp	r0, #0
 800866a:	f73f adbb 	bgt.w	80081e4 <_dtoa_r+0x4b4>
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	9d01      	ldr	r5, [sp, #4]
 8008672:	43db      	mvns	r3, r3
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	4631      	mov	r1, r6
 800867c:	4620      	mov	r0, r4
 800867e:	f000 fd21 	bl	80090c4 <_Bfree>
 8008682:	2f00      	cmp	r7, #0
 8008684:	f43f aea4 	beq.w	80083d0 <_dtoa_r+0x6a0>
 8008688:	f1b8 0f00 	cmp.w	r8, #0
 800868c:	d005      	beq.n	800869a <_dtoa_r+0x96a>
 800868e:	45b8      	cmp	r8, r7
 8008690:	d003      	beq.n	800869a <_dtoa_r+0x96a>
 8008692:	4641      	mov	r1, r8
 8008694:	4620      	mov	r0, r4
 8008696:	f000 fd15 	bl	80090c4 <_Bfree>
 800869a:	4639      	mov	r1, r7
 800869c:	4620      	mov	r0, r4
 800869e:	f000 fd11 	bl	80090c4 <_Bfree>
 80086a2:	e695      	b.n	80083d0 <_dtoa_r+0x6a0>
 80086a4:	2600      	movs	r6, #0
 80086a6:	4637      	mov	r7, r6
 80086a8:	e7e1      	b.n	800866e <_dtoa_r+0x93e>
 80086aa:	9700      	str	r7, [sp, #0]
 80086ac:	4637      	mov	r7, r6
 80086ae:	e599      	b.n	80081e4 <_dtoa_r+0x4b4>
 80086b0:	40240000 	.word	0x40240000
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80ca 	beq.w	8008850 <_dtoa_r+0xb20>
 80086bc:	9b03      	ldr	r3, [sp, #12]
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	dd05      	ble.n	80086d0 <_dtoa_r+0x9a0>
 80086c4:	4639      	mov	r1, r7
 80086c6:	462a      	mov	r2, r5
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 ff17 	bl	80094fc <__lshift>
 80086ce:	4607      	mov	r7, r0
 80086d0:	f1b8 0f00 	cmp.w	r8, #0
 80086d4:	d05b      	beq.n	800878e <_dtoa_r+0xa5e>
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fcb3 	bl	8009044 <_Balloc>
 80086de:	4605      	mov	r5, r0
 80086e0:	b928      	cbnz	r0, 80086ee <_dtoa_r+0x9be>
 80086e2:	4b87      	ldr	r3, [pc, #540]	; (8008900 <_dtoa_r+0xbd0>)
 80086e4:	4602      	mov	r2, r0
 80086e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086ea:	f7ff bb3b 	b.w	8007d64 <_dtoa_r+0x34>
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	3202      	adds	r2, #2
 80086f2:	0092      	lsls	r2, r2, #2
 80086f4:	f107 010c 	add.w	r1, r7, #12
 80086f8:	300c      	adds	r0, #12
 80086fa:	f000 fc95 	bl	8009028 <memcpy>
 80086fe:	2201      	movs	r2, #1
 8008700:	4629      	mov	r1, r5
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fefa 	bl	80094fc <__lshift>
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	f103 0901 	add.w	r9, r3, #1
 800870e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008712:	4413      	add	r3, r2
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	f00a 0301 	and.w	r3, sl, #1
 800871a:	46b8      	mov	r8, r7
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	4607      	mov	r7, r0
 8008720:	4631      	mov	r1, r6
 8008722:	ee18 0a10 	vmov	r0, s16
 8008726:	f7ff fa77 	bl	8007c18 <quorem>
 800872a:	4641      	mov	r1, r8
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008732:	ee18 0a10 	vmov	r0, s16
 8008736:	f000 ff51 	bl	80095dc <__mcmp>
 800873a:	463a      	mov	r2, r7
 800873c:	9003      	str	r0, [sp, #12]
 800873e:	4631      	mov	r1, r6
 8008740:	4620      	mov	r0, r4
 8008742:	f000 ff67 	bl	8009614 <__mdiff>
 8008746:	68c2      	ldr	r2, [r0, #12]
 8008748:	f109 3bff 	add.w	fp, r9, #4294967295
 800874c:	4605      	mov	r5, r0
 800874e:	bb02      	cbnz	r2, 8008792 <_dtoa_r+0xa62>
 8008750:	4601      	mov	r1, r0
 8008752:	ee18 0a10 	vmov	r0, s16
 8008756:	f000 ff41 	bl	80095dc <__mcmp>
 800875a:	4602      	mov	r2, r0
 800875c:	4629      	mov	r1, r5
 800875e:	4620      	mov	r0, r4
 8008760:	9207      	str	r2, [sp, #28]
 8008762:	f000 fcaf 	bl	80090c4 <_Bfree>
 8008766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800876a:	ea43 0102 	orr.w	r1, r3, r2
 800876e:	9b04      	ldr	r3, [sp, #16]
 8008770:	430b      	orrs	r3, r1
 8008772:	464d      	mov	r5, r9
 8008774:	d10f      	bne.n	8008796 <_dtoa_r+0xa66>
 8008776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800877a:	d02a      	beq.n	80087d2 <_dtoa_r+0xaa2>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	dd02      	ble.n	8008788 <_dtoa_r+0xa58>
 8008782:	9b02      	ldr	r3, [sp, #8]
 8008784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008788:	f88b a000 	strb.w	sl, [fp]
 800878c:	e775      	b.n	800867a <_dtoa_r+0x94a>
 800878e:	4638      	mov	r0, r7
 8008790:	e7ba      	b.n	8008708 <_dtoa_r+0x9d8>
 8008792:	2201      	movs	r2, #1
 8008794:	e7e2      	b.n	800875c <_dtoa_r+0xa2c>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	2b00      	cmp	r3, #0
 800879a:	db04      	blt.n	80087a6 <_dtoa_r+0xa76>
 800879c:	9906      	ldr	r1, [sp, #24]
 800879e:	430b      	orrs	r3, r1
 80087a0:	9904      	ldr	r1, [sp, #16]
 80087a2:	430b      	orrs	r3, r1
 80087a4:	d122      	bne.n	80087ec <_dtoa_r+0xabc>
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	ddee      	ble.n	8008788 <_dtoa_r+0xa58>
 80087aa:	ee18 1a10 	vmov	r1, s16
 80087ae:	2201      	movs	r2, #1
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fea3 	bl	80094fc <__lshift>
 80087b6:	4631      	mov	r1, r6
 80087b8:	ee08 0a10 	vmov	s16, r0
 80087bc:	f000 ff0e 	bl	80095dc <__mcmp>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	dc03      	bgt.n	80087cc <_dtoa_r+0xa9c>
 80087c4:	d1e0      	bne.n	8008788 <_dtoa_r+0xa58>
 80087c6:	f01a 0f01 	tst.w	sl, #1
 80087ca:	d0dd      	beq.n	8008788 <_dtoa_r+0xa58>
 80087cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087d0:	d1d7      	bne.n	8008782 <_dtoa_r+0xa52>
 80087d2:	2339      	movs	r3, #57	; 0x39
 80087d4:	f88b 3000 	strb.w	r3, [fp]
 80087d8:	462b      	mov	r3, r5
 80087da:	461d      	mov	r5, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087e2:	2a39      	cmp	r2, #57	; 0x39
 80087e4:	d071      	beq.n	80088ca <_dtoa_r+0xb9a>
 80087e6:	3201      	adds	r2, #1
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e746      	b.n	800867a <_dtoa_r+0x94a>
 80087ec:	2a00      	cmp	r2, #0
 80087ee:	dd07      	ble.n	8008800 <_dtoa_r+0xad0>
 80087f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80087f4:	d0ed      	beq.n	80087d2 <_dtoa_r+0xaa2>
 80087f6:	f10a 0301 	add.w	r3, sl, #1
 80087fa:	f88b 3000 	strb.w	r3, [fp]
 80087fe:	e73c      	b.n	800867a <_dtoa_r+0x94a>
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008806:	4599      	cmp	r9, r3
 8008808:	d047      	beq.n	800889a <_dtoa_r+0xb6a>
 800880a:	ee18 1a10 	vmov	r1, s16
 800880e:	2300      	movs	r3, #0
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fc78 	bl	8009108 <__multadd>
 8008818:	45b8      	cmp	r8, r7
 800881a:	ee08 0a10 	vmov	s16, r0
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	f04f 020a 	mov.w	r2, #10
 8008826:	4641      	mov	r1, r8
 8008828:	4620      	mov	r0, r4
 800882a:	d106      	bne.n	800883a <_dtoa_r+0xb0a>
 800882c:	f000 fc6c 	bl	8009108 <__multadd>
 8008830:	4680      	mov	r8, r0
 8008832:	4607      	mov	r7, r0
 8008834:	f109 0901 	add.w	r9, r9, #1
 8008838:	e772      	b.n	8008720 <_dtoa_r+0x9f0>
 800883a:	f000 fc65 	bl	8009108 <__multadd>
 800883e:	4639      	mov	r1, r7
 8008840:	4680      	mov	r8, r0
 8008842:	2300      	movs	r3, #0
 8008844:	220a      	movs	r2, #10
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fc5e 	bl	8009108 <__multadd>
 800884c:	4607      	mov	r7, r0
 800884e:	e7f1      	b.n	8008834 <_dtoa_r+0xb04>
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	9302      	str	r3, [sp, #8]
 8008854:	9d01      	ldr	r5, [sp, #4]
 8008856:	ee18 0a10 	vmov	r0, s16
 800885a:	4631      	mov	r1, r6
 800885c:	f7ff f9dc 	bl	8007c18 <quorem>
 8008860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008864:	9b01      	ldr	r3, [sp, #4]
 8008866:	f805 ab01 	strb.w	sl, [r5], #1
 800886a:	1aea      	subs	r2, r5, r3
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	4293      	cmp	r3, r2
 8008870:	dd09      	ble.n	8008886 <_dtoa_r+0xb56>
 8008872:	ee18 1a10 	vmov	r1, s16
 8008876:	2300      	movs	r3, #0
 8008878:	220a      	movs	r2, #10
 800887a:	4620      	mov	r0, r4
 800887c:	f000 fc44 	bl	8009108 <__multadd>
 8008880:	ee08 0a10 	vmov	s16, r0
 8008884:	e7e7      	b.n	8008856 <_dtoa_r+0xb26>
 8008886:	9b02      	ldr	r3, [sp, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfc8      	it	gt
 800888c:	461d      	movgt	r5, r3
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	bfd8      	it	le
 8008892:	2501      	movle	r5, #1
 8008894:	441d      	add	r5, r3
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	ee18 1a10 	vmov	r1, s16
 800889e:	2201      	movs	r2, #1
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fe2b 	bl	80094fc <__lshift>
 80088a6:	4631      	mov	r1, r6
 80088a8:	ee08 0a10 	vmov	s16, r0
 80088ac:	f000 fe96 	bl	80095dc <__mcmp>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	dc91      	bgt.n	80087d8 <_dtoa_r+0xaa8>
 80088b4:	d102      	bne.n	80088bc <_dtoa_r+0xb8c>
 80088b6:	f01a 0f01 	tst.w	sl, #1
 80088ba:	d18d      	bne.n	80087d8 <_dtoa_r+0xaa8>
 80088bc:	462b      	mov	r3, r5
 80088be:	461d      	mov	r5, r3
 80088c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c4:	2a30      	cmp	r2, #48	; 0x30
 80088c6:	d0fa      	beq.n	80088be <_dtoa_r+0xb8e>
 80088c8:	e6d7      	b.n	800867a <_dtoa_r+0x94a>
 80088ca:	9a01      	ldr	r2, [sp, #4]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d184      	bne.n	80087da <_dtoa_r+0xaaa>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9300      	str	r3, [sp, #0]
 80088d6:	2331      	movs	r3, #49	; 0x31
 80088d8:	7013      	strb	r3, [r2, #0]
 80088da:	e6ce      	b.n	800867a <_dtoa_r+0x94a>
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <_dtoa_r+0xbd4>)
 80088de:	f7ff ba95 	b.w	8007e0c <_dtoa_r+0xdc>
 80088e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f aa6e 	bne.w	8007dc6 <_dtoa_r+0x96>
 80088ea:	4b07      	ldr	r3, [pc, #28]	; (8008908 <_dtoa_r+0xbd8>)
 80088ec:	f7ff ba8e 	b.w	8007e0c <_dtoa_r+0xdc>
 80088f0:	9b02      	ldr	r3, [sp, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	dcae      	bgt.n	8008854 <_dtoa_r+0xb24>
 80088f6:	9b06      	ldr	r3, [sp, #24]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f73f aea8 	bgt.w	800864e <_dtoa_r+0x91e>
 80088fe:	e7a9      	b.n	8008854 <_dtoa_r+0xb24>
 8008900:	0800ad48 	.word	0x0800ad48
 8008904:	0800ab48 	.word	0x0800ab48
 8008908:	0800acc9 	.word	0x0800acc9

0800890c <rshift>:
 800890c:	6903      	ldr	r3, [r0, #16]
 800890e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008916:	ea4f 1261 	mov.w	r2, r1, asr #5
 800891a:	f100 0414 	add.w	r4, r0, #20
 800891e:	dd45      	ble.n	80089ac <rshift+0xa0>
 8008920:	f011 011f 	ands.w	r1, r1, #31
 8008924:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008928:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800892c:	d10c      	bne.n	8008948 <rshift+0x3c>
 800892e:	f100 0710 	add.w	r7, r0, #16
 8008932:	4629      	mov	r1, r5
 8008934:	42b1      	cmp	r1, r6
 8008936:	d334      	bcc.n	80089a2 <rshift+0x96>
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	1eea      	subs	r2, r5, #3
 800893e:	4296      	cmp	r6, r2
 8008940:	bf38      	it	cc
 8008942:	2300      	movcc	r3, #0
 8008944:	4423      	add	r3, r4
 8008946:	e015      	b.n	8008974 <rshift+0x68>
 8008948:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800894c:	f1c1 0820 	rsb	r8, r1, #32
 8008950:	40cf      	lsrs	r7, r1
 8008952:	f105 0e04 	add.w	lr, r5, #4
 8008956:	46a1      	mov	r9, r4
 8008958:	4576      	cmp	r6, lr
 800895a:	46f4      	mov	ip, lr
 800895c:	d815      	bhi.n	800898a <rshift+0x7e>
 800895e:	1a9a      	subs	r2, r3, r2
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	3a04      	subs	r2, #4
 8008964:	3501      	adds	r5, #1
 8008966:	42ae      	cmp	r6, r5
 8008968:	bf38      	it	cc
 800896a:	2200      	movcc	r2, #0
 800896c:	18a3      	adds	r3, r4, r2
 800896e:	50a7      	str	r7, [r4, r2]
 8008970:	b107      	cbz	r7, 8008974 <rshift+0x68>
 8008972:	3304      	adds	r3, #4
 8008974:	1b1a      	subs	r2, r3, r4
 8008976:	42a3      	cmp	r3, r4
 8008978:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800897c:	bf08      	it	eq
 800897e:	2300      	moveq	r3, #0
 8008980:	6102      	str	r2, [r0, #16]
 8008982:	bf08      	it	eq
 8008984:	6143      	streq	r3, [r0, #20]
 8008986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800898a:	f8dc c000 	ldr.w	ip, [ip]
 800898e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008992:	ea4c 0707 	orr.w	r7, ip, r7
 8008996:	f849 7b04 	str.w	r7, [r9], #4
 800899a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800899e:	40cf      	lsrs	r7, r1
 80089a0:	e7da      	b.n	8008958 <rshift+0x4c>
 80089a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80089a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80089aa:	e7c3      	b.n	8008934 <rshift+0x28>
 80089ac:	4623      	mov	r3, r4
 80089ae:	e7e1      	b.n	8008974 <rshift+0x68>

080089b0 <__hexdig_fun>:
 80089b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d802      	bhi.n	80089be <__hexdig_fun+0xe>
 80089b8:	3820      	subs	r0, #32
 80089ba:	b2c0      	uxtb	r0, r0
 80089bc:	4770      	bx	lr
 80089be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d801      	bhi.n	80089ca <__hexdig_fun+0x1a>
 80089c6:	3847      	subs	r0, #71	; 0x47
 80089c8:	e7f7      	b.n	80089ba <__hexdig_fun+0xa>
 80089ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d801      	bhi.n	80089d6 <__hexdig_fun+0x26>
 80089d2:	3827      	subs	r0, #39	; 0x27
 80089d4:	e7f1      	b.n	80089ba <__hexdig_fun+0xa>
 80089d6:	2000      	movs	r0, #0
 80089d8:	4770      	bx	lr
	...

080089dc <__gethex>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	ed2d 8b02 	vpush	{d8}
 80089e4:	b089      	sub	sp, #36	; 0x24
 80089e6:	ee08 0a10 	vmov	s16, r0
 80089ea:	9304      	str	r3, [sp, #16]
 80089ec:	4bb4      	ldr	r3, [pc, #720]	; (8008cc0 <__gethex+0x2e4>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	4618      	mov	r0, r3
 80089f4:	468b      	mov	fp, r1
 80089f6:	4690      	mov	r8, r2
 80089f8:	f7f7 fd26 	bl	8000448 <strlen>
 80089fc:	9b01      	ldr	r3, [sp, #4]
 80089fe:	f8db 2000 	ldr.w	r2, [fp]
 8008a02:	4403      	add	r3, r0
 8008a04:	4682      	mov	sl, r0
 8008a06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	1c93      	adds	r3, r2, #2
 8008a0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a16:	32fe      	adds	r2, #254	; 0xfe
 8008a18:	18d1      	adds	r1, r2, r3
 8008a1a:	461f      	mov	r7, r3
 8008a1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a20:	9100      	str	r1, [sp, #0]
 8008a22:	2830      	cmp	r0, #48	; 0x30
 8008a24:	d0f8      	beq.n	8008a18 <__gethex+0x3c>
 8008a26:	f7ff ffc3 	bl	80089b0 <__hexdig_fun>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d13a      	bne.n	8008aa6 <__gethex+0xca>
 8008a30:	9901      	ldr	r1, [sp, #4]
 8008a32:	4652      	mov	r2, sl
 8008a34:	4638      	mov	r0, r7
 8008a36:	f001 fa33 	bl	8009ea0 <strncmp>
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d168      	bne.n	8008b12 <__gethex+0x136>
 8008a40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a44:	eb07 060a 	add.w	r6, r7, sl
 8008a48:	f7ff ffb2 	bl	80089b0 <__hexdig_fun>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d062      	beq.n	8008b16 <__gethex+0x13a>
 8008a50:	4633      	mov	r3, r6
 8008a52:	7818      	ldrb	r0, [r3, #0]
 8008a54:	2830      	cmp	r0, #48	; 0x30
 8008a56:	461f      	mov	r7, r3
 8008a58:	f103 0301 	add.w	r3, r3, #1
 8008a5c:	d0f9      	beq.n	8008a52 <__gethex+0x76>
 8008a5e:	f7ff ffa7 	bl	80089b0 <__hexdig_fun>
 8008a62:	2301      	movs	r3, #1
 8008a64:	fab0 f480 	clz	r4, r0
 8008a68:	0964      	lsrs	r4, r4, #5
 8008a6a:	4635      	mov	r5, r6
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	463a      	mov	r2, r7
 8008a70:	4616      	mov	r6, r2
 8008a72:	3201      	adds	r2, #1
 8008a74:	7830      	ldrb	r0, [r6, #0]
 8008a76:	f7ff ff9b 	bl	80089b0 <__hexdig_fun>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d1f8      	bne.n	8008a70 <__gethex+0x94>
 8008a7e:	9901      	ldr	r1, [sp, #4]
 8008a80:	4652      	mov	r2, sl
 8008a82:	4630      	mov	r0, r6
 8008a84:	f001 fa0c 	bl	8009ea0 <strncmp>
 8008a88:	b980      	cbnz	r0, 8008aac <__gethex+0xd0>
 8008a8a:	b94d      	cbnz	r5, 8008aa0 <__gethex+0xc4>
 8008a8c:	eb06 050a 	add.w	r5, r6, sl
 8008a90:	462a      	mov	r2, r5
 8008a92:	4616      	mov	r6, r2
 8008a94:	3201      	adds	r2, #1
 8008a96:	7830      	ldrb	r0, [r6, #0]
 8008a98:	f7ff ff8a 	bl	80089b0 <__hexdig_fun>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d1f8      	bne.n	8008a92 <__gethex+0xb6>
 8008aa0:	1bad      	subs	r5, r5, r6
 8008aa2:	00ad      	lsls	r5, r5, #2
 8008aa4:	e004      	b.n	8008ab0 <__gethex+0xd4>
 8008aa6:	2400      	movs	r4, #0
 8008aa8:	4625      	mov	r5, r4
 8008aaa:	e7e0      	b.n	8008a6e <__gethex+0x92>
 8008aac:	2d00      	cmp	r5, #0
 8008aae:	d1f7      	bne.n	8008aa0 <__gethex+0xc4>
 8008ab0:	7833      	ldrb	r3, [r6, #0]
 8008ab2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ab6:	2b50      	cmp	r3, #80	; 0x50
 8008ab8:	d13b      	bne.n	8008b32 <__gethex+0x156>
 8008aba:	7873      	ldrb	r3, [r6, #1]
 8008abc:	2b2b      	cmp	r3, #43	; 0x2b
 8008abe:	d02c      	beq.n	8008b1a <__gethex+0x13e>
 8008ac0:	2b2d      	cmp	r3, #45	; 0x2d
 8008ac2:	d02e      	beq.n	8008b22 <__gethex+0x146>
 8008ac4:	1c71      	adds	r1, r6, #1
 8008ac6:	f04f 0900 	mov.w	r9, #0
 8008aca:	7808      	ldrb	r0, [r1, #0]
 8008acc:	f7ff ff70 	bl	80089b0 <__hexdig_fun>
 8008ad0:	1e43      	subs	r3, r0, #1
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b18      	cmp	r3, #24
 8008ad6:	d82c      	bhi.n	8008b32 <__gethex+0x156>
 8008ad8:	f1a0 0210 	sub.w	r2, r0, #16
 8008adc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ae0:	f7ff ff66 	bl	80089b0 <__hexdig_fun>
 8008ae4:	1e43      	subs	r3, r0, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b18      	cmp	r3, #24
 8008aea:	d91d      	bls.n	8008b28 <__gethex+0x14c>
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	d000      	beq.n	8008af4 <__gethex+0x118>
 8008af2:	4252      	negs	r2, r2
 8008af4:	4415      	add	r5, r2
 8008af6:	f8cb 1000 	str.w	r1, [fp]
 8008afa:	b1e4      	cbz	r4, 8008b36 <__gethex+0x15a>
 8008afc:	9b00      	ldr	r3, [sp, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	bf14      	ite	ne
 8008b02:	2700      	movne	r7, #0
 8008b04:	2706      	moveq	r7, #6
 8008b06:	4638      	mov	r0, r7
 8008b08:	b009      	add	sp, #36	; 0x24
 8008b0a:	ecbd 8b02 	vpop	{d8}
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	463e      	mov	r6, r7
 8008b14:	4625      	mov	r5, r4
 8008b16:	2401      	movs	r4, #1
 8008b18:	e7ca      	b.n	8008ab0 <__gethex+0xd4>
 8008b1a:	f04f 0900 	mov.w	r9, #0
 8008b1e:	1cb1      	adds	r1, r6, #2
 8008b20:	e7d3      	b.n	8008aca <__gethex+0xee>
 8008b22:	f04f 0901 	mov.w	r9, #1
 8008b26:	e7fa      	b.n	8008b1e <__gethex+0x142>
 8008b28:	230a      	movs	r3, #10
 8008b2a:	fb03 0202 	mla	r2, r3, r2, r0
 8008b2e:	3a10      	subs	r2, #16
 8008b30:	e7d4      	b.n	8008adc <__gethex+0x100>
 8008b32:	4631      	mov	r1, r6
 8008b34:	e7df      	b.n	8008af6 <__gethex+0x11a>
 8008b36:	1bf3      	subs	r3, r6, r7
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	2b07      	cmp	r3, #7
 8008b3e:	dc0b      	bgt.n	8008b58 <__gethex+0x17c>
 8008b40:	ee18 0a10 	vmov	r0, s16
 8008b44:	f000 fa7e 	bl	8009044 <_Balloc>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	b940      	cbnz	r0, 8008b5e <__gethex+0x182>
 8008b4c:	4b5d      	ldr	r3, [pc, #372]	; (8008cc4 <__gethex+0x2e8>)
 8008b4e:	4602      	mov	r2, r0
 8008b50:	21de      	movs	r1, #222	; 0xde
 8008b52:	485d      	ldr	r0, [pc, #372]	; (8008cc8 <__gethex+0x2ec>)
 8008b54:	f001 f9c6 	bl	8009ee4 <__assert_func>
 8008b58:	3101      	adds	r1, #1
 8008b5a:	105b      	asrs	r3, r3, #1
 8008b5c:	e7ee      	b.n	8008b3c <__gethex+0x160>
 8008b5e:	f100 0914 	add.w	r9, r0, #20
 8008b62:	f04f 0b00 	mov.w	fp, #0
 8008b66:	f1ca 0301 	rsb	r3, sl, #1
 8008b6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b6e:	f8cd b000 	str.w	fp, [sp]
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	42b7      	cmp	r7, r6
 8008b76:	d340      	bcc.n	8008bfa <__gethex+0x21e>
 8008b78:	9802      	ldr	r0, [sp, #8]
 8008b7a:	9b00      	ldr	r3, [sp, #0]
 8008b7c:	f840 3b04 	str.w	r3, [r0], #4
 8008b80:	eba0 0009 	sub.w	r0, r0, r9
 8008b84:	1080      	asrs	r0, r0, #2
 8008b86:	0146      	lsls	r6, r0, #5
 8008b88:	6120      	str	r0, [r4, #16]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 fb4c 	bl	8009228 <__hi0bits>
 8008b90:	1a30      	subs	r0, r6, r0
 8008b92:	f8d8 6000 	ldr.w	r6, [r8]
 8008b96:	42b0      	cmp	r0, r6
 8008b98:	dd63      	ble.n	8008c62 <__gethex+0x286>
 8008b9a:	1b87      	subs	r7, r0, r6
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 fef0 	bl	8009984 <__any_on>
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	b1a8      	cbz	r0, 8008bd4 <__gethex+0x1f8>
 8008ba8:	1e7b      	subs	r3, r7, #1
 8008baa:	1159      	asrs	r1, r3, #5
 8008bac:	f003 021f 	and.w	r2, r3, #31
 8008bb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bb4:	f04f 0a01 	mov.w	sl, #1
 8008bb8:	fa0a f202 	lsl.w	r2, sl, r2
 8008bbc:	420a      	tst	r2, r1
 8008bbe:	d009      	beq.n	8008bd4 <__gethex+0x1f8>
 8008bc0:	4553      	cmp	r3, sl
 8008bc2:	dd05      	ble.n	8008bd0 <__gethex+0x1f4>
 8008bc4:	1eb9      	subs	r1, r7, #2
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fedc 	bl	8009984 <__any_on>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d145      	bne.n	8008c5c <__gethex+0x280>
 8008bd0:	f04f 0a02 	mov.w	sl, #2
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7ff fe98 	bl	800890c <rshift>
 8008bdc:	443d      	add	r5, r7
 8008bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008be2:	42ab      	cmp	r3, r5
 8008be4:	da4c      	bge.n	8008c80 <__gethex+0x2a4>
 8008be6:	ee18 0a10 	vmov	r0, s16
 8008bea:	4621      	mov	r1, r4
 8008bec:	f000 fa6a 	bl	80090c4 <_Bfree>
 8008bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6013      	str	r3, [r2, #0]
 8008bf6:	27a3      	movs	r7, #163	; 0xa3
 8008bf8:	e785      	b.n	8008b06 <__gethex+0x12a>
 8008bfa:	1e73      	subs	r3, r6, #1
 8008bfc:	9a05      	ldr	r2, [sp, #20]
 8008bfe:	9303      	str	r3, [sp, #12]
 8008c00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d019      	beq.n	8008c3c <__gethex+0x260>
 8008c08:	f1bb 0f20 	cmp.w	fp, #32
 8008c0c:	d107      	bne.n	8008c1e <__gethex+0x242>
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	9a00      	ldr	r2, [sp, #0]
 8008c12:	f843 2b04 	str.w	r2, [r3], #4
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	469b      	mov	fp, r3
 8008c1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c22:	f7ff fec5 	bl	80089b0 <__hexdig_fun>
 8008c26:	9b00      	ldr	r3, [sp, #0]
 8008c28:	f000 000f 	and.w	r0, r0, #15
 8008c2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c30:	4303      	orrs	r3, r0
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	f10b 0b04 	add.w	fp, fp, #4
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	e00d      	b.n	8008c58 <__gethex+0x27c>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	9a06      	ldr	r2, [sp, #24]
 8008c40:	4413      	add	r3, r2
 8008c42:	42bb      	cmp	r3, r7
 8008c44:	d3e0      	bcc.n	8008c08 <__gethex+0x22c>
 8008c46:	4618      	mov	r0, r3
 8008c48:	9901      	ldr	r1, [sp, #4]
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	f001 f927 	bl	8009ea0 <strncmp>
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1d7      	bne.n	8008c08 <__gethex+0x22c>
 8008c58:	461e      	mov	r6, r3
 8008c5a:	e78b      	b.n	8008b74 <__gethex+0x198>
 8008c5c:	f04f 0a03 	mov.w	sl, #3
 8008c60:	e7b8      	b.n	8008bd4 <__gethex+0x1f8>
 8008c62:	da0a      	bge.n	8008c7a <__gethex+0x29e>
 8008c64:	1a37      	subs	r7, r6, r0
 8008c66:	4621      	mov	r1, r4
 8008c68:	ee18 0a10 	vmov	r0, s16
 8008c6c:	463a      	mov	r2, r7
 8008c6e:	f000 fc45 	bl	80094fc <__lshift>
 8008c72:	1bed      	subs	r5, r5, r7
 8008c74:	4604      	mov	r4, r0
 8008c76:	f100 0914 	add.w	r9, r0, #20
 8008c7a:	f04f 0a00 	mov.w	sl, #0
 8008c7e:	e7ae      	b.n	8008bde <__gethex+0x202>
 8008c80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c84:	42a8      	cmp	r0, r5
 8008c86:	dd72      	ble.n	8008d6e <__gethex+0x392>
 8008c88:	1b45      	subs	r5, r0, r5
 8008c8a:	42ae      	cmp	r6, r5
 8008c8c:	dc36      	bgt.n	8008cfc <__gethex+0x320>
 8008c8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d02a      	beq.n	8008cec <__gethex+0x310>
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d02c      	beq.n	8008cf4 <__gethex+0x318>
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d11c      	bne.n	8008cd8 <__gethex+0x2fc>
 8008c9e:	42ae      	cmp	r6, r5
 8008ca0:	d11a      	bne.n	8008cd8 <__gethex+0x2fc>
 8008ca2:	2e01      	cmp	r6, #1
 8008ca4:	d112      	bne.n	8008ccc <__gethex+0x2f0>
 8008ca6:	9a04      	ldr	r2, [sp, #16]
 8008ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	f8c9 3000 	str.w	r3, [r9]
 8008cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cb8:	2762      	movs	r7, #98	; 0x62
 8008cba:	601c      	str	r4, [r3, #0]
 8008cbc:	e723      	b.n	8008b06 <__gethex+0x12a>
 8008cbe:	bf00      	nop
 8008cc0:	0800adc0 	.word	0x0800adc0
 8008cc4:	0800ad48 	.word	0x0800ad48
 8008cc8:	0800ad59 	.word	0x0800ad59
 8008ccc:	1e71      	subs	r1, r6, #1
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fe58 	bl	8009984 <__any_on>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1e6      	bne.n	8008ca6 <__gethex+0x2ca>
 8008cd8:	ee18 0a10 	vmov	r0, s16
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f000 f9f1 	bl	80090c4 <_Bfree>
 8008ce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	2750      	movs	r7, #80	; 0x50
 8008cea:	e70c      	b.n	8008b06 <__gethex+0x12a>
 8008cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f2      	bne.n	8008cd8 <__gethex+0x2fc>
 8008cf2:	e7d8      	b.n	8008ca6 <__gethex+0x2ca>
 8008cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1d5      	bne.n	8008ca6 <__gethex+0x2ca>
 8008cfa:	e7ed      	b.n	8008cd8 <__gethex+0x2fc>
 8008cfc:	1e6f      	subs	r7, r5, #1
 8008cfe:	f1ba 0f00 	cmp.w	sl, #0
 8008d02:	d131      	bne.n	8008d68 <__gethex+0x38c>
 8008d04:	b127      	cbz	r7, 8008d10 <__gethex+0x334>
 8008d06:	4639      	mov	r1, r7
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fe3b 	bl	8009984 <__any_on>
 8008d0e:	4682      	mov	sl, r0
 8008d10:	117b      	asrs	r3, r7, #5
 8008d12:	2101      	movs	r1, #1
 8008d14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d18:	f007 071f 	and.w	r7, r7, #31
 8008d1c:	fa01 f707 	lsl.w	r7, r1, r7
 8008d20:	421f      	tst	r7, r3
 8008d22:	4629      	mov	r1, r5
 8008d24:	4620      	mov	r0, r4
 8008d26:	bf18      	it	ne
 8008d28:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d2c:	1b76      	subs	r6, r6, r5
 8008d2e:	f7ff fded 	bl	800890c <rshift>
 8008d32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d36:	2702      	movs	r7, #2
 8008d38:	f1ba 0f00 	cmp.w	sl, #0
 8008d3c:	d048      	beq.n	8008dd0 <__gethex+0x3f4>
 8008d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d015      	beq.n	8008d72 <__gethex+0x396>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d017      	beq.n	8008d7a <__gethex+0x39e>
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d109      	bne.n	8008d62 <__gethex+0x386>
 8008d4e:	f01a 0f02 	tst.w	sl, #2
 8008d52:	d006      	beq.n	8008d62 <__gethex+0x386>
 8008d54:	f8d9 0000 	ldr.w	r0, [r9]
 8008d58:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d5c:	f01a 0f01 	tst.w	sl, #1
 8008d60:	d10e      	bne.n	8008d80 <__gethex+0x3a4>
 8008d62:	f047 0710 	orr.w	r7, r7, #16
 8008d66:	e033      	b.n	8008dd0 <__gethex+0x3f4>
 8008d68:	f04f 0a01 	mov.w	sl, #1
 8008d6c:	e7d0      	b.n	8008d10 <__gethex+0x334>
 8008d6e:	2701      	movs	r7, #1
 8008d70:	e7e2      	b.n	8008d38 <__gethex+0x35c>
 8008d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d74:	f1c3 0301 	rsb	r3, r3, #1
 8008d78:	9315      	str	r3, [sp, #84]	; 0x54
 8008d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0f0      	beq.n	8008d62 <__gethex+0x386>
 8008d80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d84:	f104 0314 	add.w	r3, r4, #20
 8008d88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d90:	f04f 0c00 	mov.w	ip, #0
 8008d94:	4618      	mov	r0, r3
 8008d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d9e:	d01c      	beq.n	8008dda <__gethex+0x3fe>
 8008da0:	3201      	adds	r2, #1
 8008da2:	6002      	str	r2, [r0, #0]
 8008da4:	2f02      	cmp	r7, #2
 8008da6:	f104 0314 	add.w	r3, r4, #20
 8008daa:	d13f      	bne.n	8008e2c <__gethex+0x450>
 8008dac:	f8d8 2000 	ldr.w	r2, [r8]
 8008db0:	3a01      	subs	r2, #1
 8008db2:	42b2      	cmp	r2, r6
 8008db4:	d10a      	bne.n	8008dcc <__gethex+0x3f0>
 8008db6:	1171      	asrs	r1, r6, #5
 8008db8:	2201      	movs	r2, #1
 8008dba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dbe:	f006 061f 	and.w	r6, r6, #31
 8008dc2:	fa02 f606 	lsl.w	r6, r2, r6
 8008dc6:	421e      	tst	r6, r3
 8008dc8:	bf18      	it	ne
 8008dca:	4617      	movne	r7, r2
 8008dcc:	f047 0720 	orr.w	r7, r7, #32
 8008dd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dd2:	601c      	str	r4, [r3, #0]
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	601d      	str	r5, [r3, #0]
 8008dd8:	e695      	b.n	8008b06 <__gethex+0x12a>
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008de0:	d8d8      	bhi.n	8008d94 <__gethex+0x3b8>
 8008de2:	68a3      	ldr	r3, [r4, #8]
 8008de4:	459b      	cmp	fp, r3
 8008de6:	db19      	blt.n	8008e1c <__gethex+0x440>
 8008de8:	6861      	ldr	r1, [r4, #4]
 8008dea:	ee18 0a10 	vmov	r0, s16
 8008dee:	3101      	adds	r1, #1
 8008df0:	f000 f928 	bl	8009044 <_Balloc>
 8008df4:	4681      	mov	r9, r0
 8008df6:	b918      	cbnz	r0, 8008e00 <__gethex+0x424>
 8008df8:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <__gethex+0x488>)
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	2184      	movs	r1, #132	; 0x84
 8008dfe:	e6a8      	b.n	8008b52 <__gethex+0x176>
 8008e00:	6922      	ldr	r2, [r4, #16]
 8008e02:	3202      	adds	r2, #2
 8008e04:	f104 010c 	add.w	r1, r4, #12
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	300c      	adds	r0, #12
 8008e0c:	f000 f90c 	bl	8009028 <memcpy>
 8008e10:	4621      	mov	r1, r4
 8008e12:	ee18 0a10 	vmov	r0, s16
 8008e16:	f000 f955 	bl	80090c4 <_Bfree>
 8008e1a:	464c      	mov	r4, r9
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e24:	6122      	str	r2, [r4, #16]
 8008e26:	2201      	movs	r2, #1
 8008e28:	615a      	str	r2, [r3, #20]
 8008e2a:	e7bb      	b.n	8008da4 <__gethex+0x3c8>
 8008e2c:	6922      	ldr	r2, [r4, #16]
 8008e2e:	455a      	cmp	r2, fp
 8008e30:	dd0b      	ble.n	8008e4a <__gethex+0x46e>
 8008e32:	2101      	movs	r1, #1
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff fd69 	bl	800890c <rshift>
 8008e3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e3e:	3501      	adds	r5, #1
 8008e40:	42ab      	cmp	r3, r5
 8008e42:	f6ff aed0 	blt.w	8008be6 <__gethex+0x20a>
 8008e46:	2701      	movs	r7, #1
 8008e48:	e7c0      	b.n	8008dcc <__gethex+0x3f0>
 8008e4a:	f016 061f 	ands.w	r6, r6, #31
 8008e4e:	d0fa      	beq.n	8008e46 <__gethex+0x46a>
 8008e50:	4453      	add	r3, sl
 8008e52:	f1c6 0620 	rsb	r6, r6, #32
 8008e56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e5a:	f000 f9e5 	bl	8009228 <__hi0bits>
 8008e5e:	42b0      	cmp	r0, r6
 8008e60:	dbe7      	blt.n	8008e32 <__gethex+0x456>
 8008e62:	e7f0      	b.n	8008e46 <__gethex+0x46a>
 8008e64:	0800ad48 	.word	0x0800ad48

08008e68 <L_shift>:
 8008e68:	f1c2 0208 	rsb	r2, r2, #8
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	b570      	push	{r4, r5, r6, lr}
 8008e70:	f1c2 0620 	rsb	r6, r2, #32
 8008e74:	6843      	ldr	r3, [r0, #4]
 8008e76:	6804      	ldr	r4, [r0, #0]
 8008e78:	fa03 f506 	lsl.w	r5, r3, r6
 8008e7c:	432c      	orrs	r4, r5
 8008e7e:	40d3      	lsrs	r3, r2
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e86:	4288      	cmp	r0, r1
 8008e88:	d3f4      	bcc.n	8008e74 <L_shift+0xc>
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}

08008e8c <__match>:
 8008e8c:	b530      	push	{r4, r5, lr}
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e96:	b914      	cbnz	r4, 8008e9e <__match+0x12>
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	bd30      	pop	{r4, r5, pc}
 8008e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ea2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ea6:	2d19      	cmp	r5, #25
 8008ea8:	bf98      	it	ls
 8008eaa:	3220      	addls	r2, #32
 8008eac:	42a2      	cmp	r2, r4
 8008eae:	d0f0      	beq.n	8008e92 <__match+0x6>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	e7f3      	b.n	8008e9c <__match+0x10>

08008eb4 <__hexnan>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	115e      	asrs	r6, r3, #5
 8008ebc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ec0:	f013 031f 	ands.w	r3, r3, #31
 8008ec4:	b087      	sub	sp, #28
 8008ec6:	bf18      	it	ne
 8008ec8:	3604      	addne	r6, #4
 8008eca:	2500      	movs	r5, #0
 8008ecc:	1f37      	subs	r7, r6, #4
 8008ece:	4690      	mov	r8, r2
 8008ed0:	6802      	ldr	r2, [r0, #0]
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eda:	46b9      	mov	r9, r7
 8008edc:	463c      	mov	r4, r7
 8008ede:	9502      	str	r5, [sp, #8]
 8008ee0:	46ab      	mov	fp, r5
 8008ee2:	7851      	ldrb	r1, [r2, #1]
 8008ee4:	1c53      	adds	r3, r2, #1
 8008ee6:	9303      	str	r3, [sp, #12]
 8008ee8:	b341      	cbz	r1, 8008f3c <__hexnan+0x88>
 8008eea:	4608      	mov	r0, r1
 8008eec:	9205      	str	r2, [sp, #20]
 8008eee:	9104      	str	r1, [sp, #16]
 8008ef0:	f7ff fd5e 	bl	80089b0 <__hexdig_fun>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d14f      	bne.n	8008f98 <__hexnan+0xe4>
 8008ef8:	9904      	ldr	r1, [sp, #16]
 8008efa:	9a05      	ldr	r2, [sp, #20]
 8008efc:	2920      	cmp	r1, #32
 8008efe:	d818      	bhi.n	8008f32 <__hexnan+0x7e>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	459b      	cmp	fp, r3
 8008f04:	dd13      	ble.n	8008f2e <__hexnan+0x7a>
 8008f06:	454c      	cmp	r4, r9
 8008f08:	d206      	bcs.n	8008f18 <__hexnan+0x64>
 8008f0a:	2d07      	cmp	r5, #7
 8008f0c:	dc04      	bgt.n	8008f18 <__hexnan+0x64>
 8008f0e:	462a      	mov	r2, r5
 8008f10:	4649      	mov	r1, r9
 8008f12:	4620      	mov	r0, r4
 8008f14:	f7ff ffa8 	bl	8008e68 <L_shift>
 8008f18:	4544      	cmp	r4, r8
 8008f1a:	d950      	bls.n	8008fbe <__hexnan+0x10a>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f1a4 0904 	sub.w	r9, r4, #4
 8008f22:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f26:	f8cd b008 	str.w	fp, [sp, #8]
 8008f2a:	464c      	mov	r4, r9
 8008f2c:	461d      	mov	r5, r3
 8008f2e:	9a03      	ldr	r2, [sp, #12]
 8008f30:	e7d7      	b.n	8008ee2 <__hexnan+0x2e>
 8008f32:	2929      	cmp	r1, #41	; 0x29
 8008f34:	d156      	bne.n	8008fe4 <__hexnan+0x130>
 8008f36:	3202      	adds	r2, #2
 8008f38:	f8ca 2000 	str.w	r2, [sl]
 8008f3c:	f1bb 0f00 	cmp.w	fp, #0
 8008f40:	d050      	beq.n	8008fe4 <__hexnan+0x130>
 8008f42:	454c      	cmp	r4, r9
 8008f44:	d206      	bcs.n	8008f54 <__hexnan+0xa0>
 8008f46:	2d07      	cmp	r5, #7
 8008f48:	dc04      	bgt.n	8008f54 <__hexnan+0xa0>
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff ff8a 	bl	8008e68 <L_shift>
 8008f54:	4544      	cmp	r4, r8
 8008f56:	d934      	bls.n	8008fc2 <__hexnan+0x10e>
 8008f58:	f1a8 0204 	sub.w	r2, r8, #4
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f62:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f66:	429f      	cmp	r7, r3
 8008f68:	d2f9      	bcs.n	8008f5e <__hexnan+0xaa>
 8008f6a:	1b3b      	subs	r3, r7, r4
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	3304      	adds	r3, #4
 8008f72:	3401      	adds	r4, #1
 8008f74:	3e03      	subs	r6, #3
 8008f76:	42b4      	cmp	r4, r6
 8008f78:	bf88      	it	hi
 8008f7a:	2304      	movhi	r3, #4
 8008f7c:	4443      	add	r3, r8
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f843 2b04 	str.w	r2, [r3], #4
 8008f84:	429f      	cmp	r7, r3
 8008f86:	d2fb      	bcs.n	8008f80 <__hexnan+0xcc>
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	b91b      	cbnz	r3, 8008f94 <__hexnan+0xe0>
 8008f8c:	4547      	cmp	r7, r8
 8008f8e:	d127      	bne.n	8008fe0 <__hexnan+0x12c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	2005      	movs	r0, #5
 8008f96:	e026      	b.n	8008fe6 <__hexnan+0x132>
 8008f98:	3501      	adds	r5, #1
 8008f9a:	2d08      	cmp	r5, #8
 8008f9c:	f10b 0b01 	add.w	fp, fp, #1
 8008fa0:	dd06      	ble.n	8008fb0 <__hexnan+0xfc>
 8008fa2:	4544      	cmp	r4, r8
 8008fa4:	d9c3      	bls.n	8008f2e <__hexnan+0x7a>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fac:	2501      	movs	r5, #1
 8008fae:	3c04      	subs	r4, #4
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	f000 000f 	and.w	r0, r0, #15
 8008fb6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	e7b7      	b.n	8008f2e <__hexnan+0x7a>
 8008fbe:	2508      	movs	r5, #8
 8008fc0:	e7b5      	b.n	8008f2e <__hexnan+0x7a>
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0df      	beq.n	8008f88 <__hexnan+0xd4>
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	f1c3 0320 	rsb	r3, r3, #32
 8008fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fd8:	401a      	ands	r2, r3
 8008fda:	f846 2c04 	str.w	r2, [r6, #-4]
 8008fde:	e7d3      	b.n	8008f88 <__hexnan+0xd4>
 8008fe0:	3f04      	subs	r7, #4
 8008fe2:	e7d1      	b.n	8008f88 <__hexnan+0xd4>
 8008fe4:	2004      	movs	r0, #4
 8008fe6:	b007      	add	sp, #28
 8008fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fec <_localeconv_r>:
 8008fec:	4800      	ldr	r0, [pc, #0]	; (8008ff0 <_localeconv_r+0x4>)
 8008fee:	4770      	bx	lr
 8008ff0:	20000170 	.word	0x20000170

08008ff4 <malloc>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <malloc+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f000 bd67 	b.w	8009acc <_malloc_r>
 8008ffe:	bf00      	nop
 8009000:	20000018 	.word	0x20000018

08009004 <__ascii_mbtowc>:
 8009004:	b082      	sub	sp, #8
 8009006:	b901      	cbnz	r1, 800900a <__ascii_mbtowc+0x6>
 8009008:	a901      	add	r1, sp, #4
 800900a:	b142      	cbz	r2, 800901e <__ascii_mbtowc+0x1a>
 800900c:	b14b      	cbz	r3, 8009022 <__ascii_mbtowc+0x1e>
 800900e:	7813      	ldrb	r3, [r2, #0]
 8009010:	600b      	str	r3, [r1, #0]
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	1e10      	subs	r0, r2, #0
 8009016:	bf18      	it	ne
 8009018:	2001      	movne	r0, #1
 800901a:	b002      	add	sp, #8
 800901c:	4770      	bx	lr
 800901e:	4610      	mov	r0, r2
 8009020:	e7fb      	b.n	800901a <__ascii_mbtowc+0x16>
 8009022:	f06f 0001 	mvn.w	r0, #1
 8009026:	e7f8      	b.n	800901a <__ascii_mbtowc+0x16>

08009028 <memcpy>:
 8009028:	440a      	add	r2, r1
 800902a:	4291      	cmp	r1, r2
 800902c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009030:	d100      	bne.n	8009034 <memcpy+0xc>
 8009032:	4770      	bx	lr
 8009034:	b510      	push	{r4, lr}
 8009036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800903e:	4291      	cmp	r1, r2
 8009040:	d1f9      	bne.n	8009036 <memcpy+0xe>
 8009042:	bd10      	pop	{r4, pc}

08009044 <_Balloc>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	b976      	cbnz	r6, 800906c <_Balloc+0x28>
 800904e:	2010      	movs	r0, #16
 8009050:	f7ff ffd0 	bl	8008ff4 <malloc>
 8009054:	4602      	mov	r2, r0
 8009056:	6260      	str	r0, [r4, #36]	; 0x24
 8009058:	b920      	cbnz	r0, 8009064 <_Balloc+0x20>
 800905a:	4b18      	ldr	r3, [pc, #96]	; (80090bc <_Balloc+0x78>)
 800905c:	4818      	ldr	r0, [pc, #96]	; (80090c0 <_Balloc+0x7c>)
 800905e:	2166      	movs	r1, #102	; 0x66
 8009060:	f000 ff40 	bl	8009ee4 <__assert_func>
 8009064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009068:	6006      	str	r6, [r0, #0]
 800906a:	60c6      	str	r6, [r0, #12]
 800906c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800906e:	68f3      	ldr	r3, [r6, #12]
 8009070:	b183      	cbz	r3, 8009094 <_Balloc+0x50>
 8009072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800907a:	b9b8      	cbnz	r0, 80090ac <_Balloc+0x68>
 800907c:	2101      	movs	r1, #1
 800907e:	fa01 f605 	lsl.w	r6, r1, r5
 8009082:	1d72      	adds	r2, r6, #5
 8009084:	0092      	lsls	r2, r2, #2
 8009086:	4620      	mov	r0, r4
 8009088:	f000 fc9d 	bl	80099c6 <_calloc_r>
 800908c:	b160      	cbz	r0, 80090a8 <_Balloc+0x64>
 800908e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009092:	e00e      	b.n	80090b2 <_Balloc+0x6e>
 8009094:	2221      	movs	r2, #33	; 0x21
 8009096:	2104      	movs	r1, #4
 8009098:	4620      	mov	r0, r4
 800909a:	f000 fc94 	bl	80099c6 <_calloc_r>
 800909e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a0:	60f0      	str	r0, [r6, #12]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d1e4      	bne.n	8009072 <_Balloc+0x2e>
 80090a8:	2000      	movs	r0, #0
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	6802      	ldr	r2, [r0, #0]
 80090ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090b2:	2300      	movs	r3, #0
 80090b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090b8:	e7f7      	b.n	80090aa <_Balloc+0x66>
 80090ba:	bf00      	nop
 80090bc:	0800acd6 	.word	0x0800acd6
 80090c0:	0800add4 	.word	0x0800add4

080090c4 <_Bfree>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b976      	cbnz	r6, 80090ec <_Bfree+0x28>
 80090ce:	2010      	movs	r0, #16
 80090d0:	f7ff ff90 	bl	8008ff4 <malloc>
 80090d4:	4602      	mov	r2, r0
 80090d6:	6268      	str	r0, [r5, #36]	; 0x24
 80090d8:	b920      	cbnz	r0, 80090e4 <_Bfree+0x20>
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <_Bfree+0x3c>)
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <_Bfree+0x40>)
 80090de:	218a      	movs	r1, #138	; 0x8a
 80090e0:	f000 ff00 	bl	8009ee4 <__assert_func>
 80090e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e8:	6006      	str	r6, [r0, #0]
 80090ea:	60c6      	str	r6, [r0, #12]
 80090ec:	b13c      	cbz	r4, 80090fe <_Bfree+0x3a>
 80090ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090f0:	6862      	ldr	r2, [r4, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090f8:	6021      	str	r1, [r4, #0]
 80090fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	0800acd6 	.word	0x0800acd6
 8009104:	0800add4 	.word	0x0800add4

08009108 <__multadd>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	690d      	ldr	r5, [r1, #16]
 800910e:	4607      	mov	r7, r0
 8009110:	460c      	mov	r4, r1
 8009112:	461e      	mov	r6, r3
 8009114:	f101 0c14 	add.w	ip, r1, #20
 8009118:	2000      	movs	r0, #0
 800911a:	f8dc 3000 	ldr.w	r3, [ip]
 800911e:	b299      	uxth	r1, r3
 8009120:	fb02 6101 	mla	r1, r2, r1, r6
 8009124:	0c1e      	lsrs	r6, r3, #16
 8009126:	0c0b      	lsrs	r3, r1, #16
 8009128:	fb02 3306 	mla	r3, r2, r6, r3
 800912c:	b289      	uxth	r1, r1
 800912e:	3001      	adds	r0, #1
 8009130:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009134:	4285      	cmp	r5, r0
 8009136:	f84c 1b04 	str.w	r1, [ip], #4
 800913a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800913e:	dcec      	bgt.n	800911a <__multadd+0x12>
 8009140:	b30e      	cbz	r6, 8009186 <__multadd+0x7e>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	42ab      	cmp	r3, r5
 8009146:	dc19      	bgt.n	800917c <__multadd+0x74>
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	4638      	mov	r0, r7
 800914c:	3101      	adds	r1, #1
 800914e:	f7ff ff79 	bl	8009044 <_Balloc>
 8009152:	4680      	mov	r8, r0
 8009154:	b928      	cbnz	r0, 8009162 <__multadd+0x5a>
 8009156:	4602      	mov	r2, r0
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <__multadd+0x84>)
 800915a:	480d      	ldr	r0, [pc, #52]	; (8009190 <__multadd+0x88>)
 800915c:	21b5      	movs	r1, #181	; 0xb5
 800915e:	f000 fec1 	bl	8009ee4 <__assert_func>
 8009162:	6922      	ldr	r2, [r4, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	f104 010c 	add.w	r1, r4, #12
 800916a:	0092      	lsls	r2, r2, #2
 800916c:	300c      	adds	r0, #12
 800916e:	f7ff ff5b 	bl	8009028 <memcpy>
 8009172:	4621      	mov	r1, r4
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff ffa5 	bl	80090c4 <_Bfree>
 800917a:	4644      	mov	r4, r8
 800917c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009180:	3501      	adds	r5, #1
 8009182:	615e      	str	r6, [r3, #20]
 8009184:	6125      	str	r5, [r4, #16]
 8009186:	4620      	mov	r0, r4
 8009188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800918c:	0800ad48 	.word	0x0800ad48
 8009190:	0800add4 	.word	0x0800add4

08009194 <__s2b>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	4615      	mov	r5, r2
 800919c:	461f      	mov	r7, r3
 800919e:	2209      	movs	r2, #9
 80091a0:	3308      	adds	r3, #8
 80091a2:	4606      	mov	r6, r0
 80091a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80091a8:	2100      	movs	r1, #0
 80091aa:	2201      	movs	r2, #1
 80091ac:	429a      	cmp	r2, r3
 80091ae:	db09      	blt.n	80091c4 <__s2b+0x30>
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ff47 	bl	8009044 <_Balloc>
 80091b6:	b940      	cbnz	r0, 80091ca <__s2b+0x36>
 80091b8:	4602      	mov	r2, r0
 80091ba:	4b19      	ldr	r3, [pc, #100]	; (8009220 <__s2b+0x8c>)
 80091bc:	4819      	ldr	r0, [pc, #100]	; (8009224 <__s2b+0x90>)
 80091be:	21ce      	movs	r1, #206	; 0xce
 80091c0:	f000 fe90 	bl	8009ee4 <__assert_func>
 80091c4:	0052      	lsls	r2, r2, #1
 80091c6:	3101      	adds	r1, #1
 80091c8:	e7f0      	b.n	80091ac <__s2b+0x18>
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	6143      	str	r3, [r0, #20]
 80091ce:	2d09      	cmp	r5, #9
 80091d0:	f04f 0301 	mov.w	r3, #1
 80091d4:	6103      	str	r3, [r0, #16]
 80091d6:	dd16      	ble.n	8009206 <__s2b+0x72>
 80091d8:	f104 0909 	add.w	r9, r4, #9
 80091dc:	46c8      	mov	r8, r9
 80091de:	442c      	add	r4, r5
 80091e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091e4:	4601      	mov	r1, r0
 80091e6:	3b30      	subs	r3, #48	; 0x30
 80091e8:	220a      	movs	r2, #10
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ff8c 	bl	8009108 <__multadd>
 80091f0:	45a0      	cmp	r8, r4
 80091f2:	d1f5      	bne.n	80091e0 <__s2b+0x4c>
 80091f4:	f1a5 0408 	sub.w	r4, r5, #8
 80091f8:	444c      	add	r4, r9
 80091fa:	1b2d      	subs	r5, r5, r4
 80091fc:	1963      	adds	r3, r4, r5
 80091fe:	42bb      	cmp	r3, r7
 8009200:	db04      	blt.n	800920c <__s2b+0x78>
 8009202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009206:	340a      	adds	r4, #10
 8009208:	2509      	movs	r5, #9
 800920a:	e7f6      	b.n	80091fa <__s2b+0x66>
 800920c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009210:	4601      	mov	r1, r0
 8009212:	3b30      	subs	r3, #48	; 0x30
 8009214:	220a      	movs	r2, #10
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff76 	bl	8009108 <__multadd>
 800921c:	e7ee      	b.n	80091fc <__s2b+0x68>
 800921e:	bf00      	nop
 8009220:	0800ad48 	.word	0x0800ad48
 8009224:	0800add4 	.word	0x0800add4

08009228 <__hi0bits>:
 8009228:	0c03      	lsrs	r3, r0, #16
 800922a:	041b      	lsls	r3, r3, #16
 800922c:	b9d3      	cbnz	r3, 8009264 <__hi0bits+0x3c>
 800922e:	0400      	lsls	r0, r0, #16
 8009230:	2310      	movs	r3, #16
 8009232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009236:	bf04      	itt	eq
 8009238:	0200      	lsleq	r0, r0, #8
 800923a:	3308      	addeq	r3, #8
 800923c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009240:	bf04      	itt	eq
 8009242:	0100      	lsleq	r0, r0, #4
 8009244:	3304      	addeq	r3, #4
 8009246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800924a:	bf04      	itt	eq
 800924c:	0080      	lsleq	r0, r0, #2
 800924e:	3302      	addeq	r3, #2
 8009250:	2800      	cmp	r0, #0
 8009252:	db05      	blt.n	8009260 <__hi0bits+0x38>
 8009254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009258:	f103 0301 	add.w	r3, r3, #1
 800925c:	bf08      	it	eq
 800925e:	2320      	moveq	r3, #32
 8009260:	4618      	mov	r0, r3
 8009262:	4770      	bx	lr
 8009264:	2300      	movs	r3, #0
 8009266:	e7e4      	b.n	8009232 <__hi0bits+0xa>

08009268 <__lo0bits>:
 8009268:	6803      	ldr	r3, [r0, #0]
 800926a:	f013 0207 	ands.w	r2, r3, #7
 800926e:	4601      	mov	r1, r0
 8009270:	d00b      	beq.n	800928a <__lo0bits+0x22>
 8009272:	07da      	lsls	r2, r3, #31
 8009274:	d423      	bmi.n	80092be <__lo0bits+0x56>
 8009276:	0798      	lsls	r0, r3, #30
 8009278:	bf49      	itett	mi
 800927a:	085b      	lsrmi	r3, r3, #1
 800927c:	089b      	lsrpl	r3, r3, #2
 800927e:	2001      	movmi	r0, #1
 8009280:	600b      	strmi	r3, [r1, #0]
 8009282:	bf5c      	itt	pl
 8009284:	600b      	strpl	r3, [r1, #0]
 8009286:	2002      	movpl	r0, #2
 8009288:	4770      	bx	lr
 800928a:	b298      	uxth	r0, r3
 800928c:	b9a8      	cbnz	r0, 80092ba <__lo0bits+0x52>
 800928e:	0c1b      	lsrs	r3, r3, #16
 8009290:	2010      	movs	r0, #16
 8009292:	b2da      	uxtb	r2, r3
 8009294:	b90a      	cbnz	r2, 800929a <__lo0bits+0x32>
 8009296:	3008      	adds	r0, #8
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	071a      	lsls	r2, r3, #28
 800929c:	bf04      	itt	eq
 800929e:	091b      	lsreq	r3, r3, #4
 80092a0:	3004      	addeq	r0, #4
 80092a2:	079a      	lsls	r2, r3, #30
 80092a4:	bf04      	itt	eq
 80092a6:	089b      	lsreq	r3, r3, #2
 80092a8:	3002      	addeq	r0, #2
 80092aa:	07da      	lsls	r2, r3, #31
 80092ac:	d403      	bmi.n	80092b6 <__lo0bits+0x4e>
 80092ae:	085b      	lsrs	r3, r3, #1
 80092b0:	f100 0001 	add.w	r0, r0, #1
 80092b4:	d005      	beq.n	80092c2 <__lo0bits+0x5a>
 80092b6:	600b      	str	r3, [r1, #0]
 80092b8:	4770      	bx	lr
 80092ba:	4610      	mov	r0, r2
 80092bc:	e7e9      	b.n	8009292 <__lo0bits+0x2a>
 80092be:	2000      	movs	r0, #0
 80092c0:	4770      	bx	lr
 80092c2:	2020      	movs	r0, #32
 80092c4:	4770      	bx	lr
	...

080092c8 <__i2b>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	2101      	movs	r1, #1
 80092ce:	f7ff feb9 	bl	8009044 <_Balloc>
 80092d2:	4602      	mov	r2, r0
 80092d4:	b928      	cbnz	r0, 80092e2 <__i2b+0x1a>
 80092d6:	4b05      	ldr	r3, [pc, #20]	; (80092ec <__i2b+0x24>)
 80092d8:	4805      	ldr	r0, [pc, #20]	; (80092f0 <__i2b+0x28>)
 80092da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092de:	f000 fe01 	bl	8009ee4 <__assert_func>
 80092e2:	2301      	movs	r3, #1
 80092e4:	6144      	str	r4, [r0, #20]
 80092e6:	6103      	str	r3, [r0, #16]
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	bf00      	nop
 80092ec:	0800ad48 	.word	0x0800ad48
 80092f0:	0800add4 	.word	0x0800add4

080092f4 <__multiply>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	4691      	mov	r9, r2
 80092fa:	690a      	ldr	r2, [r1, #16]
 80092fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009300:	429a      	cmp	r2, r3
 8009302:	bfb8      	it	lt
 8009304:	460b      	movlt	r3, r1
 8009306:	460c      	mov	r4, r1
 8009308:	bfbc      	itt	lt
 800930a:	464c      	movlt	r4, r9
 800930c:	4699      	movlt	r9, r3
 800930e:	6927      	ldr	r7, [r4, #16]
 8009310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009314:	68a3      	ldr	r3, [r4, #8]
 8009316:	6861      	ldr	r1, [r4, #4]
 8009318:	eb07 060a 	add.w	r6, r7, sl
 800931c:	42b3      	cmp	r3, r6
 800931e:	b085      	sub	sp, #20
 8009320:	bfb8      	it	lt
 8009322:	3101      	addlt	r1, #1
 8009324:	f7ff fe8e 	bl	8009044 <_Balloc>
 8009328:	b930      	cbnz	r0, 8009338 <__multiply+0x44>
 800932a:	4602      	mov	r2, r0
 800932c:	4b44      	ldr	r3, [pc, #272]	; (8009440 <__multiply+0x14c>)
 800932e:	4845      	ldr	r0, [pc, #276]	; (8009444 <__multiply+0x150>)
 8009330:	f240 115d 	movw	r1, #349	; 0x15d
 8009334:	f000 fdd6 	bl	8009ee4 <__assert_func>
 8009338:	f100 0514 	add.w	r5, r0, #20
 800933c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009340:	462b      	mov	r3, r5
 8009342:	2200      	movs	r2, #0
 8009344:	4543      	cmp	r3, r8
 8009346:	d321      	bcc.n	800938c <__multiply+0x98>
 8009348:	f104 0314 	add.w	r3, r4, #20
 800934c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009350:	f109 0314 	add.w	r3, r9, #20
 8009354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009358:	9202      	str	r2, [sp, #8]
 800935a:	1b3a      	subs	r2, r7, r4
 800935c:	3a15      	subs	r2, #21
 800935e:	f022 0203 	bic.w	r2, r2, #3
 8009362:	3204      	adds	r2, #4
 8009364:	f104 0115 	add.w	r1, r4, #21
 8009368:	428f      	cmp	r7, r1
 800936a:	bf38      	it	cc
 800936c:	2204      	movcc	r2, #4
 800936e:	9201      	str	r2, [sp, #4]
 8009370:	9a02      	ldr	r2, [sp, #8]
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	429a      	cmp	r2, r3
 8009376:	d80c      	bhi.n	8009392 <__multiply+0x9e>
 8009378:	2e00      	cmp	r6, #0
 800937a:	dd03      	ble.n	8009384 <__multiply+0x90>
 800937c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009380:	2b00      	cmp	r3, #0
 8009382:	d05a      	beq.n	800943a <__multiply+0x146>
 8009384:	6106      	str	r6, [r0, #16]
 8009386:	b005      	add	sp, #20
 8009388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938c:	f843 2b04 	str.w	r2, [r3], #4
 8009390:	e7d8      	b.n	8009344 <__multiply+0x50>
 8009392:	f8b3 a000 	ldrh.w	sl, [r3]
 8009396:	f1ba 0f00 	cmp.w	sl, #0
 800939a:	d024      	beq.n	80093e6 <__multiply+0xf2>
 800939c:	f104 0e14 	add.w	lr, r4, #20
 80093a0:	46a9      	mov	r9, r5
 80093a2:	f04f 0c00 	mov.w	ip, #0
 80093a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093aa:	f8d9 1000 	ldr.w	r1, [r9]
 80093ae:	fa1f fb82 	uxth.w	fp, r2
 80093b2:	b289      	uxth	r1, r1
 80093b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80093b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093bc:	f8d9 2000 	ldr.w	r2, [r9]
 80093c0:	4461      	add	r1, ip
 80093c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80093ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093ce:	b289      	uxth	r1, r1
 80093d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093d4:	4577      	cmp	r7, lr
 80093d6:	f849 1b04 	str.w	r1, [r9], #4
 80093da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093de:	d8e2      	bhi.n	80093a6 <__multiply+0xb2>
 80093e0:	9a01      	ldr	r2, [sp, #4]
 80093e2:	f845 c002 	str.w	ip, [r5, r2]
 80093e6:	9a03      	ldr	r2, [sp, #12]
 80093e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093ec:	3304      	adds	r3, #4
 80093ee:	f1b9 0f00 	cmp.w	r9, #0
 80093f2:	d020      	beq.n	8009436 <__multiply+0x142>
 80093f4:	6829      	ldr	r1, [r5, #0]
 80093f6:	f104 0c14 	add.w	ip, r4, #20
 80093fa:	46ae      	mov	lr, r5
 80093fc:	f04f 0a00 	mov.w	sl, #0
 8009400:	f8bc b000 	ldrh.w	fp, [ip]
 8009404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009408:	fb09 220b 	mla	r2, r9, fp, r2
 800940c:	4492      	add	sl, r2
 800940e:	b289      	uxth	r1, r1
 8009410:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009414:	f84e 1b04 	str.w	r1, [lr], #4
 8009418:	f85c 2b04 	ldr.w	r2, [ip], #4
 800941c:	f8be 1000 	ldrh.w	r1, [lr]
 8009420:	0c12      	lsrs	r2, r2, #16
 8009422:	fb09 1102 	mla	r1, r9, r2, r1
 8009426:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800942a:	4567      	cmp	r7, ip
 800942c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009430:	d8e6      	bhi.n	8009400 <__multiply+0x10c>
 8009432:	9a01      	ldr	r2, [sp, #4]
 8009434:	50a9      	str	r1, [r5, r2]
 8009436:	3504      	adds	r5, #4
 8009438:	e79a      	b.n	8009370 <__multiply+0x7c>
 800943a:	3e01      	subs	r6, #1
 800943c:	e79c      	b.n	8009378 <__multiply+0x84>
 800943e:	bf00      	nop
 8009440:	0800ad48 	.word	0x0800ad48
 8009444:	0800add4 	.word	0x0800add4

08009448 <__pow5mult>:
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944c:	4615      	mov	r5, r2
 800944e:	f012 0203 	ands.w	r2, r2, #3
 8009452:	4606      	mov	r6, r0
 8009454:	460f      	mov	r7, r1
 8009456:	d007      	beq.n	8009468 <__pow5mult+0x20>
 8009458:	4c25      	ldr	r4, [pc, #148]	; (80094f0 <__pow5mult+0xa8>)
 800945a:	3a01      	subs	r2, #1
 800945c:	2300      	movs	r3, #0
 800945e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009462:	f7ff fe51 	bl	8009108 <__multadd>
 8009466:	4607      	mov	r7, r0
 8009468:	10ad      	asrs	r5, r5, #2
 800946a:	d03d      	beq.n	80094e8 <__pow5mult+0xa0>
 800946c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800946e:	b97c      	cbnz	r4, 8009490 <__pow5mult+0x48>
 8009470:	2010      	movs	r0, #16
 8009472:	f7ff fdbf 	bl	8008ff4 <malloc>
 8009476:	4602      	mov	r2, r0
 8009478:	6270      	str	r0, [r6, #36]	; 0x24
 800947a:	b928      	cbnz	r0, 8009488 <__pow5mult+0x40>
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <__pow5mult+0xac>)
 800947e:	481e      	ldr	r0, [pc, #120]	; (80094f8 <__pow5mult+0xb0>)
 8009480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009484:	f000 fd2e 	bl	8009ee4 <__assert_func>
 8009488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800948c:	6004      	str	r4, [r0, #0]
 800948e:	60c4      	str	r4, [r0, #12]
 8009490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009498:	b94c      	cbnz	r4, 80094ae <__pow5mult+0x66>
 800949a:	f240 2171 	movw	r1, #625	; 0x271
 800949e:	4630      	mov	r0, r6
 80094a0:	f7ff ff12 	bl	80092c8 <__i2b>
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80094aa:	4604      	mov	r4, r0
 80094ac:	6003      	str	r3, [r0, #0]
 80094ae:	f04f 0900 	mov.w	r9, #0
 80094b2:	07eb      	lsls	r3, r5, #31
 80094b4:	d50a      	bpl.n	80094cc <__pow5mult+0x84>
 80094b6:	4639      	mov	r1, r7
 80094b8:	4622      	mov	r2, r4
 80094ba:	4630      	mov	r0, r6
 80094bc:	f7ff ff1a 	bl	80092f4 <__multiply>
 80094c0:	4639      	mov	r1, r7
 80094c2:	4680      	mov	r8, r0
 80094c4:	4630      	mov	r0, r6
 80094c6:	f7ff fdfd 	bl	80090c4 <_Bfree>
 80094ca:	4647      	mov	r7, r8
 80094cc:	106d      	asrs	r5, r5, #1
 80094ce:	d00b      	beq.n	80094e8 <__pow5mult+0xa0>
 80094d0:	6820      	ldr	r0, [r4, #0]
 80094d2:	b938      	cbnz	r0, 80094e4 <__pow5mult+0x9c>
 80094d4:	4622      	mov	r2, r4
 80094d6:	4621      	mov	r1, r4
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff ff0b 	bl	80092f4 <__multiply>
 80094de:	6020      	str	r0, [r4, #0]
 80094e0:	f8c0 9000 	str.w	r9, [r0]
 80094e4:	4604      	mov	r4, r0
 80094e6:	e7e4      	b.n	80094b2 <__pow5mult+0x6a>
 80094e8:	4638      	mov	r0, r7
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	bf00      	nop
 80094f0:	0800af20 	.word	0x0800af20
 80094f4:	0800acd6 	.word	0x0800acd6
 80094f8:	0800add4 	.word	0x0800add4

080094fc <__lshift>:
 80094fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	460c      	mov	r4, r1
 8009502:	6849      	ldr	r1, [r1, #4]
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800950a:	68a3      	ldr	r3, [r4, #8]
 800950c:	4607      	mov	r7, r0
 800950e:	4691      	mov	r9, r2
 8009510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009514:	f108 0601 	add.w	r6, r8, #1
 8009518:	42b3      	cmp	r3, r6
 800951a:	db0b      	blt.n	8009534 <__lshift+0x38>
 800951c:	4638      	mov	r0, r7
 800951e:	f7ff fd91 	bl	8009044 <_Balloc>
 8009522:	4605      	mov	r5, r0
 8009524:	b948      	cbnz	r0, 800953a <__lshift+0x3e>
 8009526:	4602      	mov	r2, r0
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <__lshift+0xd8>)
 800952a:	482b      	ldr	r0, [pc, #172]	; (80095d8 <__lshift+0xdc>)
 800952c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009530:	f000 fcd8 	bl	8009ee4 <__assert_func>
 8009534:	3101      	adds	r1, #1
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	e7ee      	b.n	8009518 <__lshift+0x1c>
 800953a:	2300      	movs	r3, #0
 800953c:	f100 0114 	add.w	r1, r0, #20
 8009540:	f100 0210 	add.w	r2, r0, #16
 8009544:	4618      	mov	r0, r3
 8009546:	4553      	cmp	r3, sl
 8009548:	db37      	blt.n	80095ba <__lshift+0xbe>
 800954a:	6920      	ldr	r0, [r4, #16]
 800954c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009550:	f104 0314 	add.w	r3, r4, #20
 8009554:	f019 091f 	ands.w	r9, r9, #31
 8009558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800955c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009560:	d02f      	beq.n	80095c2 <__lshift+0xc6>
 8009562:	f1c9 0e20 	rsb	lr, r9, #32
 8009566:	468a      	mov	sl, r1
 8009568:	f04f 0c00 	mov.w	ip, #0
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	fa02 f209 	lsl.w	r2, r2, r9
 8009572:	ea42 020c 	orr.w	r2, r2, ip
 8009576:	f84a 2b04 	str.w	r2, [sl], #4
 800957a:	f853 2b04 	ldr.w	r2, [r3], #4
 800957e:	4298      	cmp	r0, r3
 8009580:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009584:	d8f2      	bhi.n	800956c <__lshift+0x70>
 8009586:	1b03      	subs	r3, r0, r4
 8009588:	3b15      	subs	r3, #21
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	3304      	adds	r3, #4
 8009590:	f104 0215 	add.w	r2, r4, #21
 8009594:	4290      	cmp	r0, r2
 8009596:	bf38      	it	cc
 8009598:	2304      	movcc	r3, #4
 800959a:	f841 c003 	str.w	ip, [r1, r3]
 800959e:	f1bc 0f00 	cmp.w	ip, #0
 80095a2:	d001      	beq.n	80095a8 <__lshift+0xac>
 80095a4:	f108 0602 	add.w	r6, r8, #2
 80095a8:	3e01      	subs	r6, #1
 80095aa:	4638      	mov	r0, r7
 80095ac:	612e      	str	r6, [r5, #16]
 80095ae:	4621      	mov	r1, r4
 80095b0:	f7ff fd88 	bl	80090c4 <_Bfree>
 80095b4:	4628      	mov	r0, r5
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80095be:	3301      	adds	r3, #1
 80095c0:	e7c1      	b.n	8009546 <__lshift+0x4a>
 80095c2:	3904      	subs	r1, #4
 80095c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095cc:	4298      	cmp	r0, r3
 80095ce:	d8f9      	bhi.n	80095c4 <__lshift+0xc8>
 80095d0:	e7ea      	b.n	80095a8 <__lshift+0xac>
 80095d2:	bf00      	nop
 80095d4:	0800ad48 	.word	0x0800ad48
 80095d8:	0800add4 	.word	0x0800add4

080095dc <__mcmp>:
 80095dc:	b530      	push	{r4, r5, lr}
 80095de:	6902      	ldr	r2, [r0, #16]
 80095e0:	690c      	ldr	r4, [r1, #16]
 80095e2:	1b12      	subs	r2, r2, r4
 80095e4:	d10e      	bne.n	8009604 <__mcmp+0x28>
 80095e6:	f100 0314 	add.w	r3, r0, #20
 80095ea:	3114      	adds	r1, #20
 80095ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095fc:	42a5      	cmp	r5, r4
 80095fe:	d003      	beq.n	8009608 <__mcmp+0x2c>
 8009600:	d305      	bcc.n	800960e <__mcmp+0x32>
 8009602:	2201      	movs	r2, #1
 8009604:	4610      	mov	r0, r2
 8009606:	bd30      	pop	{r4, r5, pc}
 8009608:	4283      	cmp	r3, r0
 800960a:	d3f3      	bcc.n	80095f4 <__mcmp+0x18>
 800960c:	e7fa      	b.n	8009604 <__mcmp+0x28>
 800960e:	f04f 32ff 	mov.w	r2, #4294967295
 8009612:	e7f7      	b.n	8009604 <__mcmp+0x28>

08009614 <__mdiff>:
 8009614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009618:	460c      	mov	r4, r1
 800961a:	4606      	mov	r6, r0
 800961c:	4611      	mov	r1, r2
 800961e:	4620      	mov	r0, r4
 8009620:	4690      	mov	r8, r2
 8009622:	f7ff ffdb 	bl	80095dc <__mcmp>
 8009626:	1e05      	subs	r5, r0, #0
 8009628:	d110      	bne.n	800964c <__mdiff+0x38>
 800962a:	4629      	mov	r1, r5
 800962c:	4630      	mov	r0, r6
 800962e:	f7ff fd09 	bl	8009044 <_Balloc>
 8009632:	b930      	cbnz	r0, 8009642 <__mdiff+0x2e>
 8009634:	4b3a      	ldr	r3, [pc, #232]	; (8009720 <__mdiff+0x10c>)
 8009636:	4602      	mov	r2, r0
 8009638:	f240 2132 	movw	r1, #562	; 0x232
 800963c:	4839      	ldr	r0, [pc, #228]	; (8009724 <__mdiff+0x110>)
 800963e:	f000 fc51 	bl	8009ee4 <__assert_func>
 8009642:	2301      	movs	r3, #1
 8009644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964c:	bfa4      	itt	ge
 800964e:	4643      	movge	r3, r8
 8009650:	46a0      	movge	r8, r4
 8009652:	4630      	mov	r0, r6
 8009654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009658:	bfa6      	itte	ge
 800965a:	461c      	movge	r4, r3
 800965c:	2500      	movge	r5, #0
 800965e:	2501      	movlt	r5, #1
 8009660:	f7ff fcf0 	bl	8009044 <_Balloc>
 8009664:	b920      	cbnz	r0, 8009670 <__mdiff+0x5c>
 8009666:	4b2e      	ldr	r3, [pc, #184]	; (8009720 <__mdiff+0x10c>)
 8009668:	4602      	mov	r2, r0
 800966a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800966e:	e7e5      	b.n	800963c <__mdiff+0x28>
 8009670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009674:	6926      	ldr	r6, [r4, #16]
 8009676:	60c5      	str	r5, [r0, #12]
 8009678:	f104 0914 	add.w	r9, r4, #20
 800967c:	f108 0514 	add.w	r5, r8, #20
 8009680:	f100 0e14 	add.w	lr, r0, #20
 8009684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800968c:	f108 0210 	add.w	r2, r8, #16
 8009690:	46f2      	mov	sl, lr
 8009692:	2100      	movs	r1, #0
 8009694:	f859 3b04 	ldr.w	r3, [r9], #4
 8009698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800969c:	fa1f f883 	uxth.w	r8, r3
 80096a0:	fa11 f18b 	uxtah	r1, r1, fp
 80096a4:	0c1b      	lsrs	r3, r3, #16
 80096a6:	eba1 0808 	sub.w	r8, r1, r8
 80096aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096b2:	fa1f f888 	uxth.w	r8, r8
 80096b6:	1419      	asrs	r1, r3, #16
 80096b8:	454e      	cmp	r6, r9
 80096ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096be:	f84a 3b04 	str.w	r3, [sl], #4
 80096c2:	d8e7      	bhi.n	8009694 <__mdiff+0x80>
 80096c4:	1b33      	subs	r3, r6, r4
 80096c6:	3b15      	subs	r3, #21
 80096c8:	f023 0303 	bic.w	r3, r3, #3
 80096cc:	3304      	adds	r3, #4
 80096ce:	3415      	adds	r4, #21
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	bf38      	it	cc
 80096d4:	2304      	movcc	r3, #4
 80096d6:	441d      	add	r5, r3
 80096d8:	4473      	add	r3, lr
 80096da:	469e      	mov	lr, r3
 80096dc:	462e      	mov	r6, r5
 80096de:	4566      	cmp	r6, ip
 80096e0:	d30e      	bcc.n	8009700 <__mdiff+0xec>
 80096e2:	f10c 0203 	add.w	r2, ip, #3
 80096e6:	1b52      	subs	r2, r2, r5
 80096e8:	f022 0203 	bic.w	r2, r2, #3
 80096ec:	3d03      	subs	r5, #3
 80096ee:	45ac      	cmp	ip, r5
 80096f0:	bf38      	it	cc
 80096f2:	2200      	movcc	r2, #0
 80096f4:	441a      	add	r2, r3
 80096f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096fa:	b17b      	cbz	r3, 800971c <__mdiff+0x108>
 80096fc:	6107      	str	r7, [r0, #16]
 80096fe:	e7a3      	b.n	8009648 <__mdiff+0x34>
 8009700:	f856 8b04 	ldr.w	r8, [r6], #4
 8009704:	fa11 f288 	uxtah	r2, r1, r8
 8009708:	1414      	asrs	r4, r2, #16
 800970a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800970e:	b292      	uxth	r2, r2
 8009710:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009714:	f84e 2b04 	str.w	r2, [lr], #4
 8009718:	1421      	asrs	r1, r4, #16
 800971a:	e7e0      	b.n	80096de <__mdiff+0xca>
 800971c:	3f01      	subs	r7, #1
 800971e:	e7ea      	b.n	80096f6 <__mdiff+0xe2>
 8009720:	0800ad48 	.word	0x0800ad48
 8009724:	0800add4 	.word	0x0800add4

08009728 <__ulp>:
 8009728:	b082      	sub	sp, #8
 800972a:	ed8d 0b00 	vstr	d0, [sp]
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	4912      	ldr	r1, [pc, #72]	; (800977c <__ulp+0x54>)
 8009732:	4019      	ands	r1, r3
 8009734:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009738:	2900      	cmp	r1, #0
 800973a:	dd05      	ble.n	8009748 <__ulp+0x20>
 800973c:	2200      	movs	r2, #0
 800973e:	460b      	mov	r3, r1
 8009740:	ec43 2b10 	vmov	d0, r2, r3
 8009744:	b002      	add	sp, #8
 8009746:	4770      	bx	lr
 8009748:	4249      	negs	r1, r1
 800974a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800974e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	da04      	bge.n	8009766 <__ulp+0x3e>
 800975c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009760:	fa41 f300 	asr.w	r3, r1, r0
 8009764:	e7ec      	b.n	8009740 <__ulp+0x18>
 8009766:	f1a0 0114 	sub.w	r1, r0, #20
 800976a:	291e      	cmp	r1, #30
 800976c:	bfda      	itte	le
 800976e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009772:	fa20 f101 	lsrle.w	r1, r0, r1
 8009776:	2101      	movgt	r1, #1
 8009778:	460a      	mov	r2, r1
 800977a:	e7e1      	b.n	8009740 <__ulp+0x18>
 800977c:	7ff00000 	.word	0x7ff00000

08009780 <__b2d>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	6905      	ldr	r5, [r0, #16]
 8009784:	f100 0714 	add.w	r7, r0, #20
 8009788:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800978c:	1f2e      	subs	r6, r5, #4
 800978e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff fd48 	bl	8009228 <__hi0bits>
 8009798:	f1c0 0320 	rsb	r3, r0, #32
 800979c:	280a      	cmp	r0, #10
 800979e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800981c <__b2d+0x9c>
 80097a2:	600b      	str	r3, [r1, #0]
 80097a4:	dc14      	bgt.n	80097d0 <__b2d+0x50>
 80097a6:	f1c0 0e0b 	rsb	lr, r0, #11
 80097aa:	fa24 f10e 	lsr.w	r1, r4, lr
 80097ae:	42b7      	cmp	r7, r6
 80097b0:	ea41 030c 	orr.w	r3, r1, ip
 80097b4:	bf34      	ite	cc
 80097b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097ba:	2100      	movcs	r1, #0
 80097bc:	3015      	adds	r0, #21
 80097be:	fa04 f000 	lsl.w	r0, r4, r0
 80097c2:	fa21 f10e 	lsr.w	r1, r1, lr
 80097c6:	ea40 0201 	orr.w	r2, r0, r1
 80097ca:	ec43 2b10 	vmov	d0, r2, r3
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d0:	42b7      	cmp	r7, r6
 80097d2:	bf3a      	itte	cc
 80097d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80097dc:	2100      	movcs	r1, #0
 80097de:	380b      	subs	r0, #11
 80097e0:	d017      	beq.n	8009812 <__b2d+0x92>
 80097e2:	f1c0 0c20 	rsb	ip, r0, #32
 80097e6:	fa04 f500 	lsl.w	r5, r4, r0
 80097ea:	42be      	cmp	r6, r7
 80097ec:	fa21 f40c 	lsr.w	r4, r1, ip
 80097f0:	ea45 0504 	orr.w	r5, r5, r4
 80097f4:	bf8c      	ite	hi
 80097f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80097fa:	2400      	movls	r4, #0
 80097fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009800:	fa01 f000 	lsl.w	r0, r1, r0
 8009804:	fa24 f40c 	lsr.w	r4, r4, ip
 8009808:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800980c:	ea40 0204 	orr.w	r2, r0, r4
 8009810:	e7db      	b.n	80097ca <__b2d+0x4a>
 8009812:	ea44 030c 	orr.w	r3, r4, ip
 8009816:	460a      	mov	r2, r1
 8009818:	e7d7      	b.n	80097ca <__b2d+0x4a>
 800981a:	bf00      	nop
 800981c:	3ff00000 	.word	0x3ff00000

08009820 <__d2b>:
 8009820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4689      	mov	r9, r1
 8009826:	2101      	movs	r1, #1
 8009828:	ec57 6b10 	vmov	r6, r7, d0
 800982c:	4690      	mov	r8, r2
 800982e:	f7ff fc09 	bl	8009044 <_Balloc>
 8009832:	4604      	mov	r4, r0
 8009834:	b930      	cbnz	r0, 8009844 <__d2b+0x24>
 8009836:	4602      	mov	r2, r0
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <__d2b+0xb0>)
 800983a:	4826      	ldr	r0, [pc, #152]	; (80098d4 <__d2b+0xb4>)
 800983c:	f240 310a 	movw	r1, #778	; 0x30a
 8009840:	f000 fb50 	bl	8009ee4 <__assert_func>
 8009844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800984c:	bb35      	cbnz	r5, 800989c <__d2b+0x7c>
 800984e:	2e00      	cmp	r6, #0
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	d028      	beq.n	80098a6 <__d2b+0x86>
 8009854:	4668      	mov	r0, sp
 8009856:	9600      	str	r6, [sp, #0]
 8009858:	f7ff fd06 	bl	8009268 <__lo0bits>
 800985c:	9900      	ldr	r1, [sp, #0]
 800985e:	b300      	cbz	r0, 80098a2 <__d2b+0x82>
 8009860:	9a01      	ldr	r2, [sp, #4]
 8009862:	f1c0 0320 	rsb	r3, r0, #32
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	430b      	orrs	r3, r1
 800986c:	40c2      	lsrs	r2, r0
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	9201      	str	r2, [sp, #4]
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	61a3      	str	r3, [r4, #24]
 8009876:	2b00      	cmp	r3, #0
 8009878:	bf14      	ite	ne
 800987a:	2202      	movne	r2, #2
 800987c:	2201      	moveq	r2, #1
 800987e:	6122      	str	r2, [r4, #16]
 8009880:	b1d5      	cbz	r5, 80098b8 <__d2b+0x98>
 8009882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009886:	4405      	add	r5, r0
 8009888:	f8c9 5000 	str.w	r5, [r9]
 800988c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009890:	f8c8 0000 	str.w	r0, [r8]
 8009894:	4620      	mov	r0, r4
 8009896:	b003      	add	sp, #12
 8009898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800989c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a0:	e7d5      	b.n	800984e <__d2b+0x2e>
 80098a2:	6161      	str	r1, [r4, #20]
 80098a4:	e7e5      	b.n	8009872 <__d2b+0x52>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f7ff fcde 	bl	8009268 <__lo0bits>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	2201      	movs	r2, #1
 80098b2:	6122      	str	r2, [r4, #16]
 80098b4:	3020      	adds	r0, #32
 80098b6:	e7e3      	b.n	8009880 <__d2b+0x60>
 80098b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c0:	f8c9 0000 	str.w	r0, [r9]
 80098c4:	6918      	ldr	r0, [r3, #16]
 80098c6:	f7ff fcaf 	bl	8009228 <__hi0bits>
 80098ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ce:	e7df      	b.n	8009890 <__d2b+0x70>
 80098d0:	0800ad48 	.word	0x0800ad48
 80098d4:	0800add4 	.word	0x0800add4

080098d8 <__ratio>:
 80098d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4688      	mov	r8, r1
 80098de:	4669      	mov	r1, sp
 80098e0:	4681      	mov	r9, r0
 80098e2:	f7ff ff4d 	bl	8009780 <__b2d>
 80098e6:	a901      	add	r1, sp, #4
 80098e8:	4640      	mov	r0, r8
 80098ea:	ec55 4b10 	vmov	r4, r5, d0
 80098ee:	f7ff ff47 	bl	8009780 <__b2d>
 80098f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098fa:	eba3 0c02 	sub.w	ip, r3, r2
 80098fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009908:	ec51 0b10 	vmov	r0, r1, d0
 800990c:	2b00      	cmp	r3, #0
 800990e:	bfd6      	itet	le
 8009910:	460a      	movle	r2, r1
 8009912:	462a      	movgt	r2, r5
 8009914:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009918:	468b      	mov	fp, r1
 800991a:	462f      	mov	r7, r5
 800991c:	bfd4      	ite	le
 800991e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009922:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009926:	4620      	mov	r0, r4
 8009928:	ee10 2a10 	vmov	r2, s0
 800992c:	465b      	mov	r3, fp
 800992e:	4639      	mov	r1, r7
 8009930:	f7f7 f8cc 	bl	8000acc <__aeabi_ddiv>
 8009934:	ec41 0b10 	vmov	d0, r0, r1
 8009938:	b003      	add	sp, #12
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800993e <__copybits>:
 800993e:	3901      	subs	r1, #1
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	1149      	asrs	r1, r1, #5
 8009944:	6914      	ldr	r4, [r2, #16]
 8009946:	3101      	adds	r1, #1
 8009948:	f102 0314 	add.w	r3, r2, #20
 800994c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009950:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009954:	1f05      	subs	r5, r0, #4
 8009956:	42a3      	cmp	r3, r4
 8009958:	d30c      	bcc.n	8009974 <__copybits+0x36>
 800995a:	1aa3      	subs	r3, r4, r2
 800995c:	3b11      	subs	r3, #17
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	3211      	adds	r2, #17
 8009964:	42a2      	cmp	r2, r4
 8009966:	bf88      	it	hi
 8009968:	2300      	movhi	r3, #0
 800996a:	4418      	add	r0, r3
 800996c:	2300      	movs	r3, #0
 800996e:	4288      	cmp	r0, r1
 8009970:	d305      	bcc.n	800997e <__copybits+0x40>
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	f853 6b04 	ldr.w	r6, [r3], #4
 8009978:	f845 6f04 	str.w	r6, [r5, #4]!
 800997c:	e7eb      	b.n	8009956 <__copybits+0x18>
 800997e:	f840 3b04 	str.w	r3, [r0], #4
 8009982:	e7f4      	b.n	800996e <__copybits+0x30>

08009984 <__any_on>:
 8009984:	f100 0214 	add.w	r2, r0, #20
 8009988:	6900      	ldr	r0, [r0, #16]
 800998a:	114b      	asrs	r3, r1, #5
 800998c:	4298      	cmp	r0, r3
 800998e:	b510      	push	{r4, lr}
 8009990:	db11      	blt.n	80099b6 <__any_on+0x32>
 8009992:	dd0a      	ble.n	80099aa <__any_on+0x26>
 8009994:	f011 011f 	ands.w	r1, r1, #31
 8009998:	d007      	beq.n	80099aa <__any_on+0x26>
 800999a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800999e:	fa24 f001 	lsr.w	r0, r4, r1
 80099a2:	fa00 f101 	lsl.w	r1, r0, r1
 80099a6:	428c      	cmp	r4, r1
 80099a8:	d10b      	bne.n	80099c2 <__any_on+0x3e>
 80099aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d803      	bhi.n	80099ba <__any_on+0x36>
 80099b2:	2000      	movs	r0, #0
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	4603      	mov	r3, r0
 80099b8:	e7f7      	b.n	80099aa <__any_on+0x26>
 80099ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099be:	2900      	cmp	r1, #0
 80099c0:	d0f5      	beq.n	80099ae <__any_on+0x2a>
 80099c2:	2001      	movs	r0, #1
 80099c4:	e7f6      	b.n	80099b4 <__any_on+0x30>

080099c6 <_calloc_r>:
 80099c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099c8:	fba1 2402 	umull	r2, r4, r1, r2
 80099cc:	b94c      	cbnz	r4, 80099e2 <_calloc_r+0x1c>
 80099ce:	4611      	mov	r1, r2
 80099d0:	9201      	str	r2, [sp, #4]
 80099d2:	f000 f87b 	bl	8009acc <_malloc_r>
 80099d6:	9a01      	ldr	r2, [sp, #4]
 80099d8:	4605      	mov	r5, r0
 80099da:	b930      	cbnz	r0, 80099ea <_calloc_r+0x24>
 80099dc:	4628      	mov	r0, r5
 80099de:	b003      	add	sp, #12
 80099e0:	bd30      	pop	{r4, r5, pc}
 80099e2:	220c      	movs	r2, #12
 80099e4:	6002      	str	r2, [r0, #0]
 80099e6:	2500      	movs	r5, #0
 80099e8:	e7f8      	b.n	80099dc <_calloc_r+0x16>
 80099ea:	4621      	mov	r1, r4
 80099ec:	f7fc fbc0 	bl	8006170 <memset>
 80099f0:	e7f4      	b.n	80099dc <_calloc_r+0x16>
	...

080099f4 <_free_r>:
 80099f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d044      	beq.n	8009a84 <_free_r+0x90>
 80099fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fe:	9001      	str	r0, [sp, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f1a1 0404 	sub.w	r4, r1, #4
 8009a06:	bfb8      	it	lt
 8009a08:	18e4      	addlt	r4, r4, r3
 8009a0a:	f000 fab5 	bl	8009f78 <__malloc_lock>
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <_free_r+0x94>)
 8009a10:	9801      	ldr	r0, [sp, #4]
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	b933      	cbnz	r3, 8009a24 <_free_r+0x30>
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	6014      	str	r4, [r2, #0]
 8009a1a:	b003      	add	sp, #12
 8009a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a20:	f000 bab0 	b.w	8009f84 <__malloc_unlock>
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	d908      	bls.n	8009a3a <_free_r+0x46>
 8009a28:	6825      	ldr	r5, [r4, #0]
 8009a2a:	1961      	adds	r1, r4, r5
 8009a2c:	428b      	cmp	r3, r1
 8009a2e:	bf01      	itttt	eq
 8009a30:	6819      	ldreq	r1, [r3, #0]
 8009a32:	685b      	ldreq	r3, [r3, #4]
 8009a34:	1949      	addeq	r1, r1, r5
 8009a36:	6021      	streq	r1, [r4, #0]
 8009a38:	e7ed      	b.n	8009a16 <_free_r+0x22>
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	b10b      	cbz	r3, 8009a44 <_free_r+0x50>
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d9fa      	bls.n	8009a3a <_free_r+0x46>
 8009a44:	6811      	ldr	r1, [r2, #0]
 8009a46:	1855      	adds	r5, r2, r1
 8009a48:	42a5      	cmp	r5, r4
 8009a4a:	d10b      	bne.n	8009a64 <_free_r+0x70>
 8009a4c:	6824      	ldr	r4, [r4, #0]
 8009a4e:	4421      	add	r1, r4
 8009a50:	1854      	adds	r4, r2, r1
 8009a52:	42a3      	cmp	r3, r4
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	d1e0      	bne.n	8009a1a <_free_r+0x26>
 8009a58:	681c      	ldr	r4, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	6053      	str	r3, [r2, #4]
 8009a5e:	4421      	add	r1, r4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	e7da      	b.n	8009a1a <_free_r+0x26>
 8009a64:	d902      	bls.n	8009a6c <_free_r+0x78>
 8009a66:	230c      	movs	r3, #12
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	e7d6      	b.n	8009a1a <_free_r+0x26>
 8009a6c:	6825      	ldr	r5, [r4, #0]
 8009a6e:	1961      	adds	r1, r4, r5
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf04      	itt	eq
 8009a74:	6819      	ldreq	r1, [r3, #0]
 8009a76:	685b      	ldreq	r3, [r3, #4]
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	bf04      	itt	eq
 8009a7c:	1949      	addeq	r1, r1, r5
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	6054      	str	r4, [r2, #4]
 8009a82:	e7ca      	b.n	8009a1a <_free_r+0x26>
 8009a84:	b003      	add	sp, #12
 8009a86:	bd30      	pop	{r4, r5, pc}
 8009a88:	20001414 	.word	0x20001414

08009a8c <sbrk_aligned>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	4e0e      	ldr	r6, [pc, #56]	; (8009ac8 <sbrk_aligned+0x3c>)
 8009a90:	460c      	mov	r4, r1
 8009a92:	6831      	ldr	r1, [r6, #0]
 8009a94:	4605      	mov	r5, r0
 8009a96:	b911      	cbnz	r1, 8009a9e <sbrk_aligned+0x12>
 8009a98:	f000 f9f2 	bl	8009e80 <_sbrk_r>
 8009a9c:	6030      	str	r0, [r6, #0]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 f9ed 	bl	8009e80 <_sbrk_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d00a      	beq.n	8009ac0 <sbrk_aligned+0x34>
 8009aaa:	1cc4      	adds	r4, r0, #3
 8009aac:	f024 0403 	bic.w	r4, r4, #3
 8009ab0:	42a0      	cmp	r0, r4
 8009ab2:	d007      	beq.n	8009ac4 <sbrk_aligned+0x38>
 8009ab4:	1a21      	subs	r1, r4, r0
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 f9e2 	bl	8009e80 <_sbrk_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	d101      	bne.n	8009ac4 <sbrk_aligned+0x38>
 8009ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	20001418 	.word	0x20001418

08009acc <_malloc_r>:
 8009acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	1ccd      	adds	r5, r1, #3
 8009ad2:	f025 0503 	bic.w	r5, r5, #3
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2d0c      	cmp	r5, #12
 8009ada:	bf38      	it	cc
 8009adc:	250c      	movcc	r5, #12
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	db01      	blt.n	8009ae8 <_malloc_r+0x1c>
 8009ae4:	42a9      	cmp	r1, r5
 8009ae6:	d905      	bls.n	8009af4 <_malloc_r+0x28>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	2600      	movs	r6, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	4e2e      	ldr	r6, [pc, #184]	; (8009bb0 <_malloc_r+0xe4>)
 8009af6:	f000 fa3f 	bl	8009f78 <__malloc_lock>
 8009afa:	6833      	ldr	r3, [r6, #0]
 8009afc:	461c      	mov	r4, r3
 8009afe:	bb34      	cbnz	r4, 8009b4e <_malloc_r+0x82>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ffc2 	bl	8009a8c <sbrk_aligned>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	d14d      	bne.n	8009baa <_malloc_r+0xde>
 8009b0e:	6834      	ldr	r4, [r6, #0]
 8009b10:	4626      	mov	r6, r4
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	d140      	bne.n	8009b98 <_malloc_r+0xcc>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	eb04 0803 	add.w	r8, r4, r3
 8009b20:	f000 f9ae 	bl	8009e80 <_sbrk_r>
 8009b24:	4580      	cmp	r8, r0
 8009b26:	d13a      	bne.n	8009b9e <_malloc_r+0xd2>
 8009b28:	6821      	ldr	r1, [r4, #0]
 8009b2a:	3503      	adds	r5, #3
 8009b2c:	1a6d      	subs	r5, r5, r1
 8009b2e:	f025 0503 	bic.w	r5, r5, #3
 8009b32:	3508      	adds	r5, #8
 8009b34:	2d0c      	cmp	r5, #12
 8009b36:	bf38      	it	cc
 8009b38:	250c      	movcc	r5, #12
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa5 	bl	8009a8c <sbrk_aligned>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d02b      	beq.n	8009b9e <_malloc_r+0xd2>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	442b      	add	r3, r5
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	e00e      	b.n	8009b6c <_malloc_r+0xa0>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	1b52      	subs	r2, r2, r5
 8009b52:	d41e      	bmi.n	8009b92 <_malloc_r+0xc6>
 8009b54:	2a0b      	cmp	r2, #11
 8009b56:	d916      	bls.n	8009b86 <_malloc_r+0xba>
 8009b58:	1961      	adds	r1, r4, r5
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6025      	str	r5, [r4, #0]
 8009b5e:	bf18      	it	ne
 8009b60:	6059      	strne	r1, [r3, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	bf08      	it	eq
 8009b66:	6031      	streq	r1, [r6, #0]
 8009b68:	5162      	str	r2, [r4, r5]
 8009b6a:	604b      	str	r3, [r1, #4]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f104 060b 	add.w	r6, r4, #11
 8009b72:	f000 fa07 	bl	8009f84 <__malloc_unlock>
 8009b76:	f026 0607 	bic.w	r6, r6, #7
 8009b7a:	1d23      	adds	r3, r4, #4
 8009b7c:	1af2      	subs	r2, r6, r3
 8009b7e:	d0b6      	beq.n	8009aee <_malloc_r+0x22>
 8009b80:	1b9b      	subs	r3, r3, r6
 8009b82:	50a3      	str	r3, [r4, r2]
 8009b84:	e7b3      	b.n	8009aee <_malloc_r+0x22>
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	bf0c      	ite	eq
 8009b8c:	6032      	streq	r2, [r6, #0]
 8009b8e:	605a      	strne	r2, [r3, #4]
 8009b90:	e7ec      	b.n	8009b6c <_malloc_r+0xa0>
 8009b92:	4623      	mov	r3, r4
 8009b94:	6864      	ldr	r4, [r4, #4]
 8009b96:	e7b2      	b.n	8009afe <_malloc_r+0x32>
 8009b98:	4634      	mov	r4, r6
 8009b9a:	6876      	ldr	r6, [r6, #4]
 8009b9c:	e7b9      	b.n	8009b12 <_malloc_r+0x46>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f000 f9ee 	bl	8009f84 <__malloc_unlock>
 8009ba8:	e7a1      	b.n	8009aee <_malloc_r+0x22>
 8009baa:	6025      	str	r5, [r4, #0]
 8009bac:	e7de      	b.n	8009b6c <_malloc_r+0xa0>
 8009bae:	bf00      	nop
 8009bb0:	20001414 	.word	0x20001414

08009bb4 <__ssputs_r>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	688e      	ldr	r6, [r1, #8]
 8009bba:	429e      	cmp	r6, r3
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	4690      	mov	r8, r2
 8009bc2:	461f      	mov	r7, r3
 8009bc4:	d838      	bhi.n	8009c38 <__ssputs_r+0x84>
 8009bc6:	898a      	ldrh	r2, [r1, #12]
 8009bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bcc:	d032      	beq.n	8009c34 <__ssputs_r+0x80>
 8009bce:	6825      	ldr	r5, [r4, #0]
 8009bd0:	6909      	ldr	r1, [r1, #16]
 8009bd2:	eba5 0901 	sub.w	r9, r5, r1
 8009bd6:	6965      	ldr	r5, [r4, #20]
 8009bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009be0:	3301      	adds	r3, #1
 8009be2:	444b      	add	r3, r9
 8009be4:	106d      	asrs	r5, r5, #1
 8009be6:	429d      	cmp	r5, r3
 8009be8:	bf38      	it	cc
 8009bea:	461d      	movcc	r5, r3
 8009bec:	0553      	lsls	r3, r2, #21
 8009bee:	d531      	bpl.n	8009c54 <__ssputs_r+0xa0>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7ff ff6b 	bl	8009acc <_malloc_r>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	b950      	cbnz	r0, 8009c10 <__ssputs_r+0x5c>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	f8ca 3000 	str.w	r3, [sl]
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	6921      	ldr	r1, [r4, #16]
 8009c12:	464a      	mov	r2, r9
 8009c14:	f7ff fa08 	bl	8009028 <memcpy>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	6126      	str	r6, [r4, #16]
 8009c26:	6165      	str	r5, [r4, #20]
 8009c28:	444e      	add	r6, r9
 8009c2a:	eba5 0509 	sub.w	r5, r5, r9
 8009c2e:	6026      	str	r6, [r4, #0]
 8009c30:	60a5      	str	r5, [r4, #8]
 8009c32:	463e      	mov	r6, r7
 8009c34:	42be      	cmp	r6, r7
 8009c36:	d900      	bls.n	8009c3a <__ssputs_r+0x86>
 8009c38:	463e      	mov	r6, r7
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	4632      	mov	r2, r6
 8009c3e:	4641      	mov	r1, r8
 8009c40:	f000 f980 	bl	8009f44 <memmove>
 8009c44:	68a3      	ldr	r3, [r4, #8]
 8009c46:	1b9b      	subs	r3, r3, r6
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	4433      	add	r3, r6
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	2000      	movs	r0, #0
 8009c52:	e7db      	b.n	8009c0c <__ssputs_r+0x58>
 8009c54:	462a      	mov	r2, r5
 8009c56:	f000 f99b 	bl	8009f90 <_realloc_r>
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1e1      	bne.n	8009c24 <__ssputs_r+0x70>
 8009c60:	6921      	ldr	r1, [r4, #16]
 8009c62:	4650      	mov	r0, sl
 8009c64:	f7ff fec6 	bl	80099f4 <_free_r>
 8009c68:	e7c7      	b.n	8009bfa <__ssputs_r+0x46>
	...

08009c6c <_svfiprintf_r>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	4698      	mov	r8, r3
 8009c72:	898b      	ldrh	r3, [r1, #12]
 8009c74:	061b      	lsls	r3, r3, #24
 8009c76:	b09d      	sub	sp, #116	; 0x74
 8009c78:	4607      	mov	r7, r0
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	d50e      	bpl.n	8009c9e <_svfiprintf_r+0x32>
 8009c80:	690b      	ldr	r3, [r1, #16]
 8009c82:	b963      	cbnz	r3, 8009c9e <_svfiprintf_r+0x32>
 8009c84:	2140      	movs	r1, #64	; 0x40
 8009c86:	f7ff ff21 	bl	8009acc <_malloc_r>
 8009c8a:	6028      	str	r0, [r5, #0]
 8009c8c:	6128      	str	r0, [r5, #16]
 8009c8e:	b920      	cbnz	r0, 8009c9a <_svfiprintf_r+0x2e>
 8009c90:	230c      	movs	r3, #12
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	e0d1      	b.n	8009e3e <_svfiprintf_r+0x1d2>
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	616b      	str	r3, [r5, #20]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca2:	2320      	movs	r3, #32
 8009ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cac:	2330      	movs	r3, #48	; 0x30
 8009cae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e58 <_svfiprintf_r+0x1ec>
 8009cb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb6:	f04f 0901 	mov.w	r9, #1
 8009cba:	4623      	mov	r3, r4
 8009cbc:	469a      	mov	sl, r3
 8009cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc2:	b10a      	cbz	r2, 8009cc8 <_svfiprintf_r+0x5c>
 8009cc4:	2a25      	cmp	r2, #37	; 0x25
 8009cc6:	d1f9      	bne.n	8009cbc <_svfiprintf_r+0x50>
 8009cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8009ccc:	d00b      	beq.n	8009ce6 <_svfiprintf_r+0x7a>
 8009cce:	465b      	mov	r3, fp
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff ff6d 	bl	8009bb4 <__ssputs_r>
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f000 80aa 	beq.w	8009e34 <_svfiprintf_r+0x1c8>
 8009ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce2:	445a      	add	r2, fp
 8009ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 80a2 	beq.w	8009e34 <_svfiprintf_r+0x1c8>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cfa:	f10a 0a01 	add.w	sl, sl, #1
 8009cfe:	9304      	str	r3, [sp, #16]
 8009d00:	9307      	str	r3, [sp, #28]
 8009d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d06:	931a      	str	r3, [sp, #104]	; 0x68
 8009d08:	4654      	mov	r4, sl
 8009d0a:	2205      	movs	r2, #5
 8009d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d10:	4851      	ldr	r0, [pc, #324]	; (8009e58 <_svfiprintf_r+0x1ec>)
 8009d12:	f7f6 fba5 	bl	8000460 <memchr>
 8009d16:	9a04      	ldr	r2, [sp, #16]
 8009d18:	b9d8      	cbnz	r0, 8009d52 <_svfiprintf_r+0xe6>
 8009d1a:	06d0      	lsls	r0, r2, #27
 8009d1c:	bf44      	itt	mi
 8009d1e:	2320      	movmi	r3, #32
 8009d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d24:	0711      	lsls	r1, r2, #28
 8009d26:	bf44      	itt	mi
 8009d28:	232b      	movmi	r3, #43	; 0x2b
 8009d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d32:	2b2a      	cmp	r3, #42	; 0x2a
 8009d34:	d015      	beq.n	8009d62 <_svfiprintf_r+0xf6>
 8009d36:	9a07      	ldr	r2, [sp, #28]
 8009d38:	4654      	mov	r4, sl
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f04f 0c0a 	mov.w	ip, #10
 8009d40:	4621      	mov	r1, r4
 8009d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d46:	3b30      	subs	r3, #48	; 0x30
 8009d48:	2b09      	cmp	r3, #9
 8009d4a:	d94e      	bls.n	8009dea <_svfiprintf_r+0x17e>
 8009d4c:	b1b0      	cbz	r0, 8009d7c <_svfiprintf_r+0x110>
 8009d4e:	9207      	str	r2, [sp, #28]
 8009d50:	e014      	b.n	8009d7c <_svfiprintf_r+0x110>
 8009d52:	eba0 0308 	sub.w	r3, r0, r8
 8009d56:	fa09 f303 	lsl.w	r3, r9, r3
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	9304      	str	r3, [sp, #16]
 8009d5e:	46a2      	mov	sl, r4
 8009d60:	e7d2      	b.n	8009d08 <_svfiprintf_r+0x9c>
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	1d19      	adds	r1, r3, #4
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	9103      	str	r1, [sp, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	bfbb      	ittet	lt
 8009d6e:	425b      	neglt	r3, r3
 8009d70:	f042 0202 	orrlt.w	r2, r2, #2
 8009d74:	9307      	strge	r3, [sp, #28]
 8009d76:	9307      	strlt	r3, [sp, #28]
 8009d78:	bfb8      	it	lt
 8009d7a:	9204      	strlt	r2, [sp, #16]
 8009d7c:	7823      	ldrb	r3, [r4, #0]
 8009d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d80:	d10c      	bne.n	8009d9c <_svfiprintf_r+0x130>
 8009d82:	7863      	ldrb	r3, [r4, #1]
 8009d84:	2b2a      	cmp	r3, #42	; 0x2a
 8009d86:	d135      	bne.n	8009df4 <_svfiprintf_r+0x188>
 8009d88:	9b03      	ldr	r3, [sp, #12]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	9203      	str	r2, [sp, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfb8      	it	lt
 8009d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d98:	3402      	adds	r4, #2
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e68 <_svfiprintf_r+0x1fc>
 8009da0:	7821      	ldrb	r1, [r4, #0]
 8009da2:	2203      	movs	r2, #3
 8009da4:	4650      	mov	r0, sl
 8009da6:	f7f6 fb5b 	bl	8000460 <memchr>
 8009daa:	b140      	cbz	r0, 8009dbe <_svfiprintf_r+0x152>
 8009dac:	2340      	movs	r3, #64	; 0x40
 8009dae:	eba0 000a 	sub.w	r0, r0, sl
 8009db2:	fa03 f000 	lsl.w	r0, r3, r0
 8009db6:	9b04      	ldr	r3, [sp, #16]
 8009db8:	4303      	orrs	r3, r0
 8009dba:	3401      	adds	r4, #1
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc2:	4826      	ldr	r0, [pc, #152]	; (8009e5c <_svfiprintf_r+0x1f0>)
 8009dc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dc8:	2206      	movs	r2, #6
 8009dca:	f7f6 fb49 	bl	8000460 <memchr>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d038      	beq.n	8009e44 <_svfiprintf_r+0x1d8>
 8009dd2:	4b23      	ldr	r3, [pc, #140]	; (8009e60 <_svfiprintf_r+0x1f4>)
 8009dd4:	bb1b      	cbnz	r3, 8009e1e <_svfiprintf_r+0x1b2>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	3307      	adds	r3, #7
 8009dda:	f023 0307 	bic.w	r3, r3, #7
 8009dde:	3308      	adds	r3, #8
 8009de0:	9303      	str	r3, [sp, #12]
 8009de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de4:	4433      	add	r3, r6
 8009de6:	9309      	str	r3, [sp, #36]	; 0x24
 8009de8:	e767      	b.n	8009cba <_svfiprintf_r+0x4e>
 8009dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dee:	460c      	mov	r4, r1
 8009df0:	2001      	movs	r0, #1
 8009df2:	e7a5      	b.n	8009d40 <_svfiprintf_r+0xd4>
 8009df4:	2300      	movs	r3, #0
 8009df6:	3401      	adds	r4, #1
 8009df8:	9305      	str	r3, [sp, #20]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	f04f 0c0a 	mov.w	ip, #10
 8009e00:	4620      	mov	r0, r4
 8009e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e06:	3a30      	subs	r2, #48	; 0x30
 8009e08:	2a09      	cmp	r2, #9
 8009e0a:	d903      	bls.n	8009e14 <_svfiprintf_r+0x1a8>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0c5      	beq.n	8009d9c <_svfiprintf_r+0x130>
 8009e10:	9105      	str	r1, [sp, #20]
 8009e12:	e7c3      	b.n	8009d9c <_svfiprintf_r+0x130>
 8009e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e7f0      	b.n	8009e00 <_svfiprintf_r+0x194>
 8009e1e:	ab03      	add	r3, sp, #12
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	462a      	mov	r2, r5
 8009e24:	4b0f      	ldr	r3, [pc, #60]	; (8009e64 <_svfiprintf_r+0x1f8>)
 8009e26:	a904      	add	r1, sp, #16
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7fc fa49 	bl	80062c0 <_printf_float>
 8009e2e:	1c42      	adds	r2, r0, #1
 8009e30:	4606      	mov	r6, r0
 8009e32:	d1d6      	bne.n	8009de2 <_svfiprintf_r+0x176>
 8009e34:	89ab      	ldrh	r3, [r5, #12]
 8009e36:	065b      	lsls	r3, r3, #25
 8009e38:	f53f af2c 	bmi.w	8009c94 <_svfiprintf_r+0x28>
 8009e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e3e:	b01d      	add	sp, #116	; 0x74
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e44:	ab03      	add	r3, sp, #12
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4b06      	ldr	r3, [pc, #24]	; (8009e64 <_svfiprintf_r+0x1f8>)
 8009e4c:	a904      	add	r1, sp, #16
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7fc fcda 	bl	8006808 <_printf_i>
 8009e54:	e7eb      	b.n	8009e2e <_svfiprintf_r+0x1c2>
 8009e56:	bf00      	nop
 8009e58:	0800af2c 	.word	0x0800af2c
 8009e5c:	0800af36 	.word	0x0800af36
 8009e60:	080062c1 	.word	0x080062c1
 8009e64:	08009bb5 	.word	0x08009bb5
 8009e68:	0800af32 	.word	0x0800af32
 8009e6c:	00000000 	.word	0x00000000

08009e70 <nan>:
 8009e70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e78 <nan+0x8>
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	7ff80000 	.word	0x7ff80000

08009e80 <_sbrk_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_sbrk_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f8 f9e0 	bl	8002250 <_sbrk>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_sbrk_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_sbrk_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	2000141c 	.word	0x2000141c

08009ea0 <strncmp>:
 8009ea0:	b510      	push	{r4, lr}
 8009ea2:	b17a      	cbz	r2, 8009ec4 <strncmp+0x24>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	3901      	subs	r1, #1
 8009ea8:	1884      	adds	r4, r0, r2
 8009eaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009eae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009eb2:	4290      	cmp	r0, r2
 8009eb4:	d101      	bne.n	8009eba <strncmp+0x1a>
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	d101      	bne.n	8009ebe <strncmp+0x1e>
 8009eba:	1a80      	subs	r0, r0, r2
 8009ebc:	bd10      	pop	{r4, pc}
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1f3      	bne.n	8009eaa <strncmp+0xa>
 8009ec2:	e7fa      	b.n	8009eba <strncmp+0x1a>
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	e7f9      	b.n	8009ebc <strncmp+0x1c>

08009ec8 <__ascii_wctomb>:
 8009ec8:	b149      	cbz	r1, 8009ede <__ascii_wctomb+0x16>
 8009eca:	2aff      	cmp	r2, #255	; 0xff
 8009ecc:	bf85      	ittet	hi
 8009ece:	238a      	movhi	r3, #138	; 0x8a
 8009ed0:	6003      	strhi	r3, [r0, #0]
 8009ed2:	700a      	strbls	r2, [r1, #0]
 8009ed4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ed8:	bf98      	it	ls
 8009eda:	2001      	movls	r0, #1
 8009edc:	4770      	bx	lr
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4770      	bx	lr
	...

08009ee4 <__assert_func>:
 8009ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ee6:	4614      	mov	r4, r2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <__assert_func+0x2c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	68d8      	ldr	r0, [r3, #12]
 8009ef2:	b14c      	cbz	r4, 8009f08 <__assert_func+0x24>
 8009ef4:	4b07      	ldr	r3, [pc, #28]	; (8009f14 <__assert_func+0x30>)
 8009ef6:	9100      	str	r1, [sp, #0]
 8009ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009efc:	4906      	ldr	r1, [pc, #24]	; (8009f18 <__assert_func+0x34>)
 8009efe:	462b      	mov	r3, r5
 8009f00:	f000 f80e 	bl	8009f20 <fiprintf>
 8009f04:	f000 fa8c 	bl	800a420 <abort>
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <__assert_func+0x38>)
 8009f0a:	461c      	mov	r4, r3
 8009f0c:	e7f3      	b.n	8009ef6 <__assert_func+0x12>
 8009f0e:	bf00      	nop
 8009f10:	20000018 	.word	0x20000018
 8009f14:	0800af3d 	.word	0x0800af3d
 8009f18:	0800af4a 	.word	0x0800af4a
 8009f1c:	0800af78 	.word	0x0800af78

08009f20 <fiprintf>:
 8009f20:	b40e      	push	{r1, r2, r3}
 8009f22:	b503      	push	{r0, r1, lr}
 8009f24:	4601      	mov	r1, r0
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	4805      	ldr	r0, [pc, #20]	; (8009f40 <fiprintf+0x20>)
 8009f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	f000 f885 	bl	800a040 <_vfiprintf_r>
 8009f36:	b002      	add	sp, #8
 8009f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f3c:	b003      	add	sp, #12
 8009f3e:	4770      	bx	lr
 8009f40:	20000018 	.word	0x20000018

08009f44 <memmove>:
 8009f44:	4288      	cmp	r0, r1
 8009f46:	b510      	push	{r4, lr}
 8009f48:	eb01 0402 	add.w	r4, r1, r2
 8009f4c:	d902      	bls.n	8009f54 <memmove+0x10>
 8009f4e:	4284      	cmp	r4, r0
 8009f50:	4623      	mov	r3, r4
 8009f52:	d807      	bhi.n	8009f64 <memmove+0x20>
 8009f54:	1e43      	subs	r3, r0, #1
 8009f56:	42a1      	cmp	r1, r4
 8009f58:	d008      	beq.n	8009f6c <memmove+0x28>
 8009f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f62:	e7f8      	b.n	8009f56 <memmove+0x12>
 8009f64:	4402      	add	r2, r0
 8009f66:	4601      	mov	r1, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	d100      	bne.n	8009f6e <memmove+0x2a>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f76:	e7f7      	b.n	8009f68 <memmove+0x24>

08009f78 <__malloc_lock>:
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__malloc_lock+0x8>)
 8009f7a:	f000 bc11 	b.w	800a7a0 <__retarget_lock_acquire_recursive>
 8009f7e:	bf00      	nop
 8009f80:	20001420 	.word	0x20001420

08009f84 <__malloc_unlock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__malloc_unlock+0x8>)
 8009f86:	f000 bc0c 	b.w	800a7a2 <__retarget_lock_release_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	20001420 	.word	0x20001420

08009f90 <_realloc_r>:
 8009f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f94:	4680      	mov	r8, r0
 8009f96:	4614      	mov	r4, r2
 8009f98:	460e      	mov	r6, r1
 8009f9a:	b921      	cbnz	r1, 8009fa6 <_realloc_r+0x16>
 8009f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	f7ff bd93 	b.w	8009acc <_malloc_r>
 8009fa6:	b92a      	cbnz	r2, 8009fb4 <_realloc_r+0x24>
 8009fa8:	f7ff fd24 	bl	80099f4 <_free_r>
 8009fac:	4625      	mov	r5, r4
 8009fae:	4628      	mov	r0, r5
 8009fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb4:	f000 fc5c 	bl	800a870 <_malloc_usable_size_r>
 8009fb8:	4284      	cmp	r4, r0
 8009fba:	4607      	mov	r7, r0
 8009fbc:	d802      	bhi.n	8009fc4 <_realloc_r+0x34>
 8009fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fc2:	d812      	bhi.n	8009fea <_realloc_r+0x5a>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7ff fd80 	bl	8009acc <_malloc_r>
 8009fcc:	4605      	mov	r5, r0
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	d0ed      	beq.n	8009fae <_realloc_r+0x1e>
 8009fd2:	42bc      	cmp	r4, r7
 8009fd4:	4622      	mov	r2, r4
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	bf28      	it	cs
 8009fda:	463a      	movcs	r2, r7
 8009fdc:	f7ff f824 	bl	8009028 <memcpy>
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4640      	mov	r0, r8
 8009fe4:	f7ff fd06 	bl	80099f4 <_free_r>
 8009fe8:	e7e1      	b.n	8009fae <_realloc_r+0x1e>
 8009fea:	4635      	mov	r5, r6
 8009fec:	e7df      	b.n	8009fae <_realloc_r+0x1e>

08009fee <__sfputc_r>:
 8009fee:	6893      	ldr	r3, [r2, #8]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	b410      	push	{r4}
 8009ff6:	6093      	str	r3, [r2, #8]
 8009ff8:	da08      	bge.n	800a00c <__sfputc_r+0x1e>
 8009ffa:	6994      	ldr	r4, [r2, #24]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	db01      	blt.n	800a004 <__sfputc_r+0x16>
 800a000:	290a      	cmp	r1, #10
 800a002:	d103      	bne.n	800a00c <__sfputc_r+0x1e>
 800a004:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a008:	f000 b94a 	b.w	800a2a0 <__swbuf_r>
 800a00c:	6813      	ldr	r3, [r2, #0]
 800a00e:	1c58      	adds	r0, r3, #1
 800a010:	6010      	str	r0, [r2, #0]
 800a012:	7019      	strb	r1, [r3, #0]
 800a014:	4608      	mov	r0, r1
 800a016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <__sfputs_r>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	4606      	mov	r6, r0
 800a020:	460f      	mov	r7, r1
 800a022:	4614      	mov	r4, r2
 800a024:	18d5      	adds	r5, r2, r3
 800a026:	42ac      	cmp	r4, r5
 800a028:	d101      	bne.n	800a02e <__sfputs_r+0x12>
 800a02a:	2000      	movs	r0, #0
 800a02c:	e007      	b.n	800a03e <__sfputs_r+0x22>
 800a02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a032:	463a      	mov	r2, r7
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffda 	bl	8009fee <__sfputc_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d1f3      	bne.n	800a026 <__sfputs_r+0xa>
 800a03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a040 <_vfiprintf_r>:
 800a040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a044:	460d      	mov	r5, r1
 800a046:	b09d      	sub	sp, #116	; 0x74
 800a048:	4614      	mov	r4, r2
 800a04a:	4698      	mov	r8, r3
 800a04c:	4606      	mov	r6, r0
 800a04e:	b118      	cbz	r0, 800a058 <_vfiprintf_r+0x18>
 800a050:	6983      	ldr	r3, [r0, #24]
 800a052:	b90b      	cbnz	r3, 800a058 <_vfiprintf_r+0x18>
 800a054:	f000 fb06 	bl	800a664 <__sinit>
 800a058:	4b89      	ldr	r3, [pc, #548]	; (800a280 <_vfiprintf_r+0x240>)
 800a05a:	429d      	cmp	r5, r3
 800a05c:	d11b      	bne.n	800a096 <_vfiprintf_r+0x56>
 800a05e:	6875      	ldr	r5, [r6, #4]
 800a060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a062:	07d9      	lsls	r1, r3, #31
 800a064:	d405      	bmi.n	800a072 <_vfiprintf_r+0x32>
 800a066:	89ab      	ldrh	r3, [r5, #12]
 800a068:	059a      	lsls	r2, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_vfiprintf_r+0x32>
 800a06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06e:	f000 fb97 	bl	800a7a0 <__retarget_lock_acquire_recursive>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	071b      	lsls	r3, r3, #28
 800a076:	d501      	bpl.n	800a07c <_vfiprintf_r+0x3c>
 800a078:	692b      	ldr	r3, [r5, #16]
 800a07a:	b9eb      	cbnz	r3, 800a0b8 <_vfiprintf_r+0x78>
 800a07c:	4629      	mov	r1, r5
 800a07e:	4630      	mov	r0, r6
 800a080:	f000 f960 	bl	800a344 <__swsetup_r>
 800a084:	b1c0      	cbz	r0, 800a0b8 <_vfiprintf_r+0x78>
 800a086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a088:	07dc      	lsls	r4, r3, #31
 800a08a:	d50e      	bpl.n	800a0aa <_vfiprintf_r+0x6a>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	b01d      	add	sp, #116	; 0x74
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	4b7b      	ldr	r3, [pc, #492]	; (800a284 <_vfiprintf_r+0x244>)
 800a098:	429d      	cmp	r5, r3
 800a09a:	d101      	bne.n	800a0a0 <_vfiprintf_r+0x60>
 800a09c:	68b5      	ldr	r5, [r6, #8]
 800a09e:	e7df      	b.n	800a060 <_vfiprintf_r+0x20>
 800a0a0:	4b79      	ldr	r3, [pc, #484]	; (800a288 <_vfiprintf_r+0x248>)
 800a0a2:	429d      	cmp	r5, r3
 800a0a4:	bf08      	it	eq
 800a0a6:	68f5      	ldreq	r5, [r6, #12]
 800a0a8:	e7da      	b.n	800a060 <_vfiprintf_r+0x20>
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	0598      	lsls	r0, r3, #22
 800a0ae:	d4ed      	bmi.n	800a08c <_vfiprintf_r+0x4c>
 800a0b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b2:	f000 fb76 	bl	800a7a2 <__retarget_lock_release_recursive>
 800a0b6:	e7e9      	b.n	800a08c <_vfiprintf_r+0x4c>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a0bc:	2320      	movs	r3, #32
 800a0be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c6:	2330      	movs	r3, #48	; 0x30
 800a0c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a28c <_vfiprintf_r+0x24c>
 800a0cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d0:	f04f 0901 	mov.w	r9, #1
 800a0d4:	4623      	mov	r3, r4
 800a0d6:	469a      	mov	sl, r3
 800a0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0dc:	b10a      	cbz	r2, 800a0e2 <_vfiprintf_r+0xa2>
 800a0de:	2a25      	cmp	r2, #37	; 0x25
 800a0e0:	d1f9      	bne.n	800a0d6 <_vfiprintf_r+0x96>
 800a0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e6:	d00b      	beq.n	800a100 <_vfiprintf_r+0xc0>
 800a0e8:	465b      	mov	r3, fp
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f7ff ff94 	bl	800a01c <__sfputs_r>
 800a0f4:	3001      	adds	r0, #1
 800a0f6:	f000 80aa 	beq.w	800a24e <_vfiprintf_r+0x20e>
 800a0fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fc:	445a      	add	r2, fp
 800a0fe:	9209      	str	r2, [sp, #36]	; 0x24
 800a100:	f89a 3000 	ldrb.w	r3, [sl]
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80a2 	beq.w	800a24e <_vfiprintf_r+0x20e>
 800a10a:	2300      	movs	r3, #0
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295
 800a110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a114:	f10a 0a01 	add.w	sl, sl, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	9307      	str	r3, [sp, #28]
 800a11c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a120:	931a      	str	r3, [sp, #104]	; 0x68
 800a122:	4654      	mov	r4, sl
 800a124:	2205      	movs	r2, #5
 800a126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12a:	4858      	ldr	r0, [pc, #352]	; (800a28c <_vfiprintf_r+0x24c>)
 800a12c:	f7f6 f998 	bl	8000460 <memchr>
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	b9d8      	cbnz	r0, 800a16c <_vfiprintf_r+0x12c>
 800a134:	06d1      	lsls	r1, r2, #27
 800a136:	bf44      	itt	mi
 800a138:	2320      	movmi	r3, #32
 800a13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13e:	0713      	lsls	r3, r2, #28
 800a140:	bf44      	itt	mi
 800a142:	232b      	movmi	r3, #43	; 0x2b
 800a144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a148:	f89a 3000 	ldrb.w	r3, [sl]
 800a14c:	2b2a      	cmp	r3, #42	; 0x2a
 800a14e:	d015      	beq.n	800a17c <_vfiprintf_r+0x13c>
 800a150:	9a07      	ldr	r2, [sp, #28]
 800a152:	4654      	mov	r4, sl
 800a154:	2000      	movs	r0, #0
 800a156:	f04f 0c0a 	mov.w	ip, #10
 800a15a:	4621      	mov	r1, r4
 800a15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a160:	3b30      	subs	r3, #48	; 0x30
 800a162:	2b09      	cmp	r3, #9
 800a164:	d94e      	bls.n	800a204 <_vfiprintf_r+0x1c4>
 800a166:	b1b0      	cbz	r0, 800a196 <_vfiprintf_r+0x156>
 800a168:	9207      	str	r2, [sp, #28]
 800a16a:	e014      	b.n	800a196 <_vfiprintf_r+0x156>
 800a16c:	eba0 0308 	sub.w	r3, r0, r8
 800a170:	fa09 f303 	lsl.w	r3, r9, r3
 800a174:	4313      	orrs	r3, r2
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	46a2      	mov	sl, r4
 800a17a:	e7d2      	b.n	800a122 <_vfiprintf_r+0xe2>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d19      	adds	r1, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9103      	str	r1, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfbb      	ittet	lt
 800a188:	425b      	neglt	r3, r3
 800a18a:	f042 0202 	orrlt.w	r2, r2, #2
 800a18e:	9307      	strge	r3, [sp, #28]
 800a190:	9307      	strlt	r3, [sp, #28]
 800a192:	bfb8      	it	lt
 800a194:	9204      	strlt	r2, [sp, #16]
 800a196:	7823      	ldrb	r3, [r4, #0]
 800a198:	2b2e      	cmp	r3, #46	; 0x2e
 800a19a:	d10c      	bne.n	800a1b6 <_vfiprintf_r+0x176>
 800a19c:	7863      	ldrb	r3, [r4, #1]
 800a19e:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a0:	d135      	bne.n	800a20e <_vfiprintf_r+0x1ce>
 800a1a2:	9b03      	ldr	r3, [sp, #12]
 800a1a4:	1d1a      	adds	r2, r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	9203      	str	r2, [sp, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bfb8      	it	lt
 800a1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b2:	3402      	adds	r4, #2
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a29c <_vfiprintf_r+0x25c>
 800a1ba:	7821      	ldrb	r1, [r4, #0]
 800a1bc:	2203      	movs	r2, #3
 800a1be:	4650      	mov	r0, sl
 800a1c0:	f7f6 f94e 	bl	8000460 <memchr>
 800a1c4:	b140      	cbz	r0, 800a1d8 <_vfiprintf_r+0x198>
 800a1c6:	2340      	movs	r3, #64	; 0x40
 800a1c8:	eba0 000a 	sub.w	r0, r0, sl
 800a1cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	4303      	orrs	r3, r0
 800a1d4:	3401      	adds	r4, #1
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1dc:	482c      	ldr	r0, [pc, #176]	; (800a290 <_vfiprintf_r+0x250>)
 800a1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e2:	2206      	movs	r2, #6
 800a1e4:	f7f6 f93c 	bl	8000460 <memchr>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d03f      	beq.n	800a26c <_vfiprintf_r+0x22c>
 800a1ec:	4b29      	ldr	r3, [pc, #164]	; (800a294 <_vfiprintf_r+0x254>)
 800a1ee:	bb1b      	cbnz	r3, 800a238 <_vfiprintf_r+0x1f8>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	3307      	adds	r3, #7
 800a1f4:	f023 0307 	bic.w	r3, r3, #7
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fe:	443b      	add	r3, r7
 800a200:	9309      	str	r3, [sp, #36]	; 0x24
 800a202:	e767      	b.n	800a0d4 <_vfiprintf_r+0x94>
 800a204:	fb0c 3202 	mla	r2, ip, r2, r3
 800a208:	460c      	mov	r4, r1
 800a20a:	2001      	movs	r0, #1
 800a20c:	e7a5      	b.n	800a15a <_vfiprintf_r+0x11a>
 800a20e:	2300      	movs	r3, #0
 800a210:	3401      	adds	r4, #1
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	4619      	mov	r1, r3
 800a216:	f04f 0c0a 	mov.w	ip, #10
 800a21a:	4620      	mov	r0, r4
 800a21c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a220:	3a30      	subs	r2, #48	; 0x30
 800a222:	2a09      	cmp	r2, #9
 800a224:	d903      	bls.n	800a22e <_vfiprintf_r+0x1ee>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c5      	beq.n	800a1b6 <_vfiprintf_r+0x176>
 800a22a:	9105      	str	r1, [sp, #20]
 800a22c:	e7c3      	b.n	800a1b6 <_vfiprintf_r+0x176>
 800a22e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a232:	4604      	mov	r4, r0
 800a234:	2301      	movs	r3, #1
 800a236:	e7f0      	b.n	800a21a <_vfiprintf_r+0x1da>
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b16      	ldr	r3, [pc, #88]	; (800a298 <_vfiprintf_r+0x258>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4630      	mov	r0, r6
 800a244:	f7fc f83c 	bl	80062c0 <_printf_float>
 800a248:	4607      	mov	r7, r0
 800a24a:	1c78      	adds	r0, r7, #1
 800a24c:	d1d6      	bne.n	800a1fc <_vfiprintf_r+0x1bc>
 800a24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a250:	07d9      	lsls	r1, r3, #31
 800a252:	d405      	bmi.n	800a260 <_vfiprintf_r+0x220>
 800a254:	89ab      	ldrh	r3, [r5, #12]
 800a256:	059a      	lsls	r2, r3, #22
 800a258:	d402      	bmi.n	800a260 <_vfiprintf_r+0x220>
 800a25a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a25c:	f000 faa1 	bl	800a7a2 <__retarget_lock_release_recursive>
 800a260:	89ab      	ldrh	r3, [r5, #12]
 800a262:	065b      	lsls	r3, r3, #25
 800a264:	f53f af12 	bmi.w	800a08c <_vfiprintf_r+0x4c>
 800a268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a26a:	e711      	b.n	800a090 <_vfiprintf_r+0x50>
 800a26c:	ab03      	add	r3, sp, #12
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	462a      	mov	r2, r5
 800a272:	4b09      	ldr	r3, [pc, #36]	; (800a298 <_vfiprintf_r+0x258>)
 800a274:	a904      	add	r1, sp, #16
 800a276:	4630      	mov	r0, r6
 800a278:	f7fc fac6 	bl	8006808 <_printf_i>
 800a27c:	e7e4      	b.n	800a248 <_vfiprintf_r+0x208>
 800a27e:	bf00      	nop
 800a280:	0800af9c 	.word	0x0800af9c
 800a284:	0800afbc 	.word	0x0800afbc
 800a288:	0800af7c 	.word	0x0800af7c
 800a28c:	0800af2c 	.word	0x0800af2c
 800a290:	0800af36 	.word	0x0800af36
 800a294:	080062c1 	.word	0x080062c1
 800a298:	0800a01d 	.word	0x0800a01d
 800a29c:	0800af32 	.word	0x0800af32

0800a2a0 <__swbuf_r>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	460e      	mov	r6, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	b118      	cbz	r0, 800a2b2 <__swbuf_r+0x12>
 800a2aa:	6983      	ldr	r3, [r0, #24]
 800a2ac:	b90b      	cbnz	r3, 800a2b2 <__swbuf_r+0x12>
 800a2ae:	f000 f9d9 	bl	800a664 <__sinit>
 800a2b2:	4b21      	ldr	r3, [pc, #132]	; (800a338 <__swbuf_r+0x98>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d12b      	bne.n	800a310 <__swbuf_r+0x70>
 800a2b8:	686c      	ldr	r4, [r5, #4]
 800a2ba:	69a3      	ldr	r3, [r4, #24]
 800a2bc:	60a3      	str	r3, [r4, #8]
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	071a      	lsls	r2, r3, #28
 800a2c2:	d52f      	bpl.n	800a324 <__swbuf_r+0x84>
 800a2c4:	6923      	ldr	r3, [r4, #16]
 800a2c6:	b36b      	cbz	r3, 800a324 <__swbuf_r+0x84>
 800a2c8:	6923      	ldr	r3, [r4, #16]
 800a2ca:	6820      	ldr	r0, [r4, #0]
 800a2cc:	1ac0      	subs	r0, r0, r3
 800a2ce:	6963      	ldr	r3, [r4, #20]
 800a2d0:	b2f6      	uxtb	r6, r6
 800a2d2:	4283      	cmp	r3, r0
 800a2d4:	4637      	mov	r7, r6
 800a2d6:	dc04      	bgt.n	800a2e2 <__swbuf_r+0x42>
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 f92e 	bl	800a53c <_fflush_r>
 800a2e0:	bb30      	cbnz	r0, 800a330 <__swbuf_r+0x90>
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	60a3      	str	r3, [r4, #8]
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	6022      	str	r2, [r4, #0]
 800a2ee:	701e      	strb	r6, [r3, #0]
 800a2f0:	6963      	ldr	r3, [r4, #20]
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	4283      	cmp	r3, r0
 800a2f6:	d004      	beq.n	800a302 <__swbuf_r+0x62>
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	07db      	lsls	r3, r3, #31
 800a2fc:	d506      	bpl.n	800a30c <__swbuf_r+0x6c>
 800a2fe:	2e0a      	cmp	r6, #10
 800a300:	d104      	bne.n	800a30c <__swbuf_r+0x6c>
 800a302:	4621      	mov	r1, r4
 800a304:	4628      	mov	r0, r5
 800a306:	f000 f919 	bl	800a53c <_fflush_r>
 800a30a:	b988      	cbnz	r0, 800a330 <__swbuf_r+0x90>
 800a30c:	4638      	mov	r0, r7
 800a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a310:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <__swbuf_r+0x9c>)
 800a312:	429c      	cmp	r4, r3
 800a314:	d101      	bne.n	800a31a <__swbuf_r+0x7a>
 800a316:	68ac      	ldr	r4, [r5, #8]
 800a318:	e7cf      	b.n	800a2ba <__swbuf_r+0x1a>
 800a31a:	4b09      	ldr	r3, [pc, #36]	; (800a340 <__swbuf_r+0xa0>)
 800a31c:	429c      	cmp	r4, r3
 800a31e:	bf08      	it	eq
 800a320:	68ec      	ldreq	r4, [r5, #12]
 800a322:	e7ca      	b.n	800a2ba <__swbuf_r+0x1a>
 800a324:	4621      	mov	r1, r4
 800a326:	4628      	mov	r0, r5
 800a328:	f000 f80c 	bl	800a344 <__swsetup_r>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0cb      	beq.n	800a2c8 <__swbuf_r+0x28>
 800a330:	f04f 37ff 	mov.w	r7, #4294967295
 800a334:	e7ea      	b.n	800a30c <__swbuf_r+0x6c>
 800a336:	bf00      	nop
 800a338:	0800af9c 	.word	0x0800af9c
 800a33c:	0800afbc 	.word	0x0800afbc
 800a340:	0800af7c 	.word	0x0800af7c

0800a344 <__swsetup_r>:
 800a344:	4b32      	ldr	r3, [pc, #200]	; (800a410 <__swsetup_r+0xcc>)
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	681d      	ldr	r5, [r3, #0]
 800a34a:	4606      	mov	r6, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	b125      	cbz	r5, 800a35a <__swsetup_r+0x16>
 800a350:	69ab      	ldr	r3, [r5, #24]
 800a352:	b913      	cbnz	r3, 800a35a <__swsetup_r+0x16>
 800a354:	4628      	mov	r0, r5
 800a356:	f000 f985 	bl	800a664 <__sinit>
 800a35a:	4b2e      	ldr	r3, [pc, #184]	; (800a414 <__swsetup_r+0xd0>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	d10f      	bne.n	800a380 <__swsetup_r+0x3c>
 800a360:	686c      	ldr	r4, [r5, #4]
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a368:	0719      	lsls	r1, r3, #28
 800a36a:	d42c      	bmi.n	800a3c6 <__swsetup_r+0x82>
 800a36c:	06dd      	lsls	r5, r3, #27
 800a36e:	d411      	bmi.n	800a394 <__swsetup_r+0x50>
 800a370:	2309      	movs	r3, #9
 800a372:	6033      	str	r3, [r6, #0]
 800a374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	e03e      	b.n	800a3fe <__swsetup_r+0xba>
 800a380:	4b25      	ldr	r3, [pc, #148]	; (800a418 <__swsetup_r+0xd4>)
 800a382:	429c      	cmp	r4, r3
 800a384:	d101      	bne.n	800a38a <__swsetup_r+0x46>
 800a386:	68ac      	ldr	r4, [r5, #8]
 800a388:	e7eb      	b.n	800a362 <__swsetup_r+0x1e>
 800a38a:	4b24      	ldr	r3, [pc, #144]	; (800a41c <__swsetup_r+0xd8>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	bf08      	it	eq
 800a390:	68ec      	ldreq	r4, [r5, #12]
 800a392:	e7e6      	b.n	800a362 <__swsetup_r+0x1e>
 800a394:	0758      	lsls	r0, r3, #29
 800a396:	d512      	bpl.n	800a3be <__swsetup_r+0x7a>
 800a398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39a:	b141      	cbz	r1, 800a3ae <__swsetup_r+0x6a>
 800a39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d002      	beq.n	800a3aa <__swsetup_r+0x66>
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff fb25 	bl	80099f4 <_free_r>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f043 0308 	orr.w	r3, r3, #8
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	b94b      	cbnz	r3, 800a3de <__swsetup_r+0x9a>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d4:	d003      	beq.n	800a3de <__swsetup_r+0x9a>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 fa09 	bl	800a7f0 <__smakebuf_r>
 800a3de:	89a0      	ldrh	r0, [r4, #12]
 800a3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3e4:	f010 0301 	ands.w	r3, r0, #1
 800a3e8:	d00a      	beq.n	800a400 <__swsetup_r+0xbc>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60a3      	str	r3, [r4, #8]
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	425b      	negs	r3, r3
 800a3f2:	61a3      	str	r3, [r4, #24]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	b943      	cbnz	r3, 800a40a <__swsetup_r+0xc6>
 800a3f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3fc:	d1ba      	bne.n	800a374 <__swsetup_r+0x30>
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	0781      	lsls	r1, r0, #30
 800a402:	bf58      	it	pl
 800a404:	6963      	ldrpl	r3, [r4, #20]
 800a406:	60a3      	str	r3, [r4, #8]
 800a408:	e7f4      	b.n	800a3f4 <__swsetup_r+0xb0>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e7f7      	b.n	800a3fe <__swsetup_r+0xba>
 800a40e:	bf00      	nop
 800a410:	20000018 	.word	0x20000018
 800a414:	0800af9c 	.word	0x0800af9c
 800a418:	0800afbc 	.word	0x0800afbc
 800a41c:	0800af7c 	.word	0x0800af7c

0800a420 <abort>:
 800a420:	b508      	push	{r3, lr}
 800a422:	2006      	movs	r0, #6
 800a424:	f000 fa54 	bl	800a8d0 <raise>
 800a428:	2001      	movs	r0, #1
 800a42a:	f7f7 fe99 	bl	8002160 <_exit>
	...

0800a430 <__sflush_r>:
 800a430:	898a      	ldrh	r2, [r1, #12]
 800a432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a436:	4605      	mov	r5, r0
 800a438:	0710      	lsls	r0, r2, #28
 800a43a:	460c      	mov	r4, r1
 800a43c:	d458      	bmi.n	800a4f0 <__sflush_r+0xc0>
 800a43e:	684b      	ldr	r3, [r1, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc05      	bgt.n	800a450 <__sflush_r+0x20>
 800a444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	dc02      	bgt.n	800a450 <__sflush_r+0x20>
 800a44a:	2000      	movs	r0, #0
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a452:	2e00      	cmp	r6, #0
 800a454:	d0f9      	beq.n	800a44a <__sflush_r+0x1a>
 800a456:	2300      	movs	r3, #0
 800a458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a45c:	682f      	ldr	r7, [r5, #0]
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	d032      	beq.n	800a4c8 <__sflush_r+0x98>
 800a462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	075a      	lsls	r2, r3, #29
 800a468:	d505      	bpl.n	800a476 <__sflush_r+0x46>
 800a46a:	6863      	ldr	r3, [r4, #4]
 800a46c:	1ac0      	subs	r0, r0, r3
 800a46e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a470:	b10b      	cbz	r3, 800a476 <__sflush_r+0x46>
 800a472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a474:	1ac0      	subs	r0, r0, r3
 800a476:	2300      	movs	r3, #0
 800a478:	4602      	mov	r2, r0
 800a47a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a47c:	6a21      	ldr	r1, [r4, #32]
 800a47e:	4628      	mov	r0, r5
 800a480:	47b0      	blx	r6
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	d106      	bne.n	800a496 <__sflush_r+0x66>
 800a488:	6829      	ldr	r1, [r5, #0]
 800a48a:	291d      	cmp	r1, #29
 800a48c:	d82c      	bhi.n	800a4e8 <__sflush_r+0xb8>
 800a48e:	4a2a      	ldr	r2, [pc, #168]	; (800a538 <__sflush_r+0x108>)
 800a490:	40ca      	lsrs	r2, r1
 800a492:	07d6      	lsls	r6, r2, #31
 800a494:	d528      	bpl.n	800a4e8 <__sflush_r+0xb8>
 800a496:	2200      	movs	r2, #0
 800a498:	6062      	str	r2, [r4, #4]
 800a49a:	04d9      	lsls	r1, r3, #19
 800a49c:	6922      	ldr	r2, [r4, #16]
 800a49e:	6022      	str	r2, [r4, #0]
 800a4a0:	d504      	bpl.n	800a4ac <__sflush_r+0x7c>
 800a4a2:	1c42      	adds	r2, r0, #1
 800a4a4:	d101      	bne.n	800a4aa <__sflush_r+0x7a>
 800a4a6:	682b      	ldr	r3, [r5, #0]
 800a4a8:	b903      	cbnz	r3, 800a4ac <__sflush_r+0x7c>
 800a4aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ae:	602f      	str	r7, [r5, #0]
 800a4b0:	2900      	cmp	r1, #0
 800a4b2:	d0ca      	beq.n	800a44a <__sflush_r+0x1a>
 800a4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b8:	4299      	cmp	r1, r3
 800a4ba:	d002      	beq.n	800a4c2 <__sflush_r+0x92>
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f7ff fa99 	bl	80099f4 <_free_r>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a4c6:	e7c1      	b.n	800a44c <__sflush_r+0x1c>
 800a4c8:	6a21      	ldr	r1, [r4, #32]
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b0      	blx	r6
 800a4d0:	1c41      	adds	r1, r0, #1
 800a4d2:	d1c7      	bne.n	800a464 <__sflush_r+0x34>
 800a4d4:	682b      	ldr	r3, [r5, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0c4      	beq.n	800a464 <__sflush_r+0x34>
 800a4da:	2b1d      	cmp	r3, #29
 800a4dc:	d001      	beq.n	800a4e2 <__sflush_r+0xb2>
 800a4de:	2b16      	cmp	r3, #22
 800a4e0:	d101      	bne.n	800a4e6 <__sflush_r+0xb6>
 800a4e2:	602f      	str	r7, [r5, #0]
 800a4e4:	e7b1      	b.n	800a44a <__sflush_r+0x1a>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	e7ad      	b.n	800a44c <__sflush_r+0x1c>
 800a4f0:	690f      	ldr	r7, [r1, #16]
 800a4f2:	2f00      	cmp	r7, #0
 800a4f4:	d0a9      	beq.n	800a44a <__sflush_r+0x1a>
 800a4f6:	0793      	lsls	r3, r2, #30
 800a4f8:	680e      	ldr	r6, [r1, #0]
 800a4fa:	bf08      	it	eq
 800a4fc:	694b      	ldreq	r3, [r1, #20]
 800a4fe:	600f      	str	r7, [r1, #0]
 800a500:	bf18      	it	ne
 800a502:	2300      	movne	r3, #0
 800a504:	eba6 0807 	sub.w	r8, r6, r7
 800a508:	608b      	str	r3, [r1, #8]
 800a50a:	f1b8 0f00 	cmp.w	r8, #0
 800a50e:	dd9c      	ble.n	800a44a <__sflush_r+0x1a>
 800a510:	6a21      	ldr	r1, [r4, #32]
 800a512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a514:	4643      	mov	r3, r8
 800a516:	463a      	mov	r2, r7
 800a518:	4628      	mov	r0, r5
 800a51a:	47b0      	blx	r6
 800a51c:	2800      	cmp	r0, #0
 800a51e:	dc06      	bgt.n	800a52e <__sflush_r+0xfe>
 800a520:	89a3      	ldrh	r3, [r4, #12]
 800a522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	f04f 30ff 	mov.w	r0, #4294967295
 800a52c:	e78e      	b.n	800a44c <__sflush_r+0x1c>
 800a52e:	4407      	add	r7, r0
 800a530:	eba8 0800 	sub.w	r8, r8, r0
 800a534:	e7e9      	b.n	800a50a <__sflush_r+0xda>
 800a536:	bf00      	nop
 800a538:	20400001 	.word	0x20400001

0800a53c <_fflush_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	690b      	ldr	r3, [r1, #16]
 800a540:	4605      	mov	r5, r0
 800a542:	460c      	mov	r4, r1
 800a544:	b913      	cbnz	r3, 800a54c <_fflush_r+0x10>
 800a546:	2500      	movs	r5, #0
 800a548:	4628      	mov	r0, r5
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	b118      	cbz	r0, 800a556 <_fflush_r+0x1a>
 800a54e:	6983      	ldr	r3, [r0, #24]
 800a550:	b90b      	cbnz	r3, 800a556 <_fflush_r+0x1a>
 800a552:	f000 f887 	bl	800a664 <__sinit>
 800a556:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <_fflush_r+0x6c>)
 800a558:	429c      	cmp	r4, r3
 800a55a:	d11b      	bne.n	800a594 <_fflush_r+0x58>
 800a55c:	686c      	ldr	r4, [r5, #4]
 800a55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d0ef      	beq.n	800a546 <_fflush_r+0xa>
 800a566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a568:	07d0      	lsls	r0, r2, #31
 800a56a:	d404      	bmi.n	800a576 <_fflush_r+0x3a>
 800a56c:	0599      	lsls	r1, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_fflush_r+0x3a>
 800a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a572:	f000 f915 	bl	800a7a0 <__retarget_lock_acquire_recursive>
 800a576:	4628      	mov	r0, r5
 800a578:	4621      	mov	r1, r4
 800a57a:	f7ff ff59 	bl	800a430 <__sflush_r>
 800a57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a580:	07da      	lsls	r2, r3, #31
 800a582:	4605      	mov	r5, r0
 800a584:	d4e0      	bmi.n	800a548 <_fflush_r+0xc>
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	059b      	lsls	r3, r3, #22
 800a58a:	d4dd      	bmi.n	800a548 <_fflush_r+0xc>
 800a58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a58e:	f000 f908 	bl	800a7a2 <__retarget_lock_release_recursive>
 800a592:	e7d9      	b.n	800a548 <_fflush_r+0xc>
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <_fflush_r+0x70>)
 800a596:	429c      	cmp	r4, r3
 800a598:	d101      	bne.n	800a59e <_fflush_r+0x62>
 800a59a:	68ac      	ldr	r4, [r5, #8]
 800a59c:	e7df      	b.n	800a55e <_fflush_r+0x22>
 800a59e:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <_fflush_r+0x74>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	bf08      	it	eq
 800a5a4:	68ec      	ldreq	r4, [r5, #12]
 800a5a6:	e7da      	b.n	800a55e <_fflush_r+0x22>
 800a5a8:	0800af9c 	.word	0x0800af9c
 800a5ac:	0800afbc 	.word	0x0800afbc
 800a5b0:	0800af7c 	.word	0x0800af7c

0800a5b4 <std>:
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a5be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5c2:	6083      	str	r3, [r0, #8]
 800a5c4:	8181      	strh	r1, [r0, #12]
 800a5c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5c8:	81c2      	strh	r2, [r0, #14]
 800a5ca:	6183      	str	r3, [r0, #24]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	2208      	movs	r2, #8
 800a5d0:	305c      	adds	r0, #92	; 0x5c
 800a5d2:	f7fb fdcd 	bl	8006170 <memset>
 800a5d6:	4b05      	ldr	r3, [pc, #20]	; (800a5ec <std+0x38>)
 800a5d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5da:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <std+0x3c>)
 800a5dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5de:	4b05      	ldr	r3, [pc, #20]	; (800a5f4 <std+0x40>)
 800a5e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <std+0x44>)
 800a5e4:	6224      	str	r4, [r4, #32]
 800a5e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0800a909 	.word	0x0800a909
 800a5f0:	0800a92b 	.word	0x0800a92b
 800a5f4:	0800a963 	.word	0x0800a963
 800a5f8:	0800a987 	.word	0x0800a987

0800a5fc <_cleanup_r>:
 800a5fc:	4901      	ldr	r1, [pc, #4]	; (800a604 <_cleanup_r+0x8>)
 800a5fe:	f000 b8af 	b.w	800a760 <_fwalk_reent>
 800a602:	bf00      	nop
 800a604:	0800a53d 	.word	0x0800a53d

0800a608 <__sfmoreglue>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	2268      	movs	r2, #104	; 0x68
 800a60c:	1e4d      	subs	r5, r1, #1
 800a60e:	4355      	muls	r5, r2
 800a610:	460e      	mov	r6, r1
 800a612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a616:	f7ff fa59 	bl	8009acc <_malloc_r>
 800a61a:	4604      	mov	r4, r0
 800a61c:	b140      	cbz	r0, 800a630 <__sfmoreglue+0x28>
 800a61e:	2100      	movs	r1, #0
 800a620:	e9c0 1600 	strd	r1, r6, [r0]
 800a624:	300c      	adds	r0, #12
 800a626:	60a0      	str	r0, [r4, #8]
 800a628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a62c:	f7fb fda0 	bl	8006170 <memset>
 800a630:	4620      	mov	r0, r4
 800a632:	bd70      	pop	{r4, r5, r6, pc}

0800a634 <__sfp_lock_acquire>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__sfp_lock_acquire+0x8>)
 800a636:	f000 b8b3 	b.w	800a7a0 <__retarget_lock_acquire_recursive>
 800a63a:	bf00      	nop
 800a63c:	20001421 	.word	0x20001421

0800a640 <__sfp_lock_release>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__sfp_lock_release+0x8>)
 800a642:	f000 b8ae 	b.w	800a7a2 <__retarget_lock_release_recursive>
 800a646:	bf00      	nop
 800a648:	20001421 	.word	0x20001421

0800a64c <__sinit_lock_acquire>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__sinit_lock_acquire+0x8>)
 800a64e:	f000 b8a7 	b.w	800a7a0 <__retarget_lock_acquire_recursive>
 800a652:	bf00      	nop
 800a654:	20001422 	.word	0x20001422

0800a658 <__sinit_lock_release>:
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <__sinit_lock_release+0x8>)
 800a65a:	f000 b8a2 	b.w	800a7a2 <__retarget_lock_release_recursive>
 800a65e:	bf00      	nop
 800a660:	20001422 	.word	0x20001422

0800a664 <__sinit>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4604      	mov	r4, r0
 800a668:	f7ff fff0 	bl	800a64c <__sinit_lock_acquire>
 800a66c:	69a3      	ldr	r3, [r4, #24]
 800a66e:	b11b      	cbz	r3, 800a678 <__sinit+0x14>
 800a670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a674:	f7ff bff0 	b.w	800a658 <__sinit_lock_release>
 800a678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a67c:	6523      	str	r3, [r4, #80]	; 0x50
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <__sinit+0x68>)
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <__sinit+0x6c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	62a2      	str	r2, [r4, #40]	; 0x28
 800a686:	42a3      	cmp	r3, r4
 800a688:	bf04      	itt	eq
 800a68a:	2301      	moveq	r3, #1
 800a68c:	61a3      	streq	r3, [r4, #24]
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f820 	bl	800a6d4 <__sfp>
 800a694:	6060      	str	r0, [r4, #4]
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f81c 	bl	800a6d4 <__sfp>
 800a69c:	60a0      	str	r0, [r4, #8]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 f818 	bl	800a6d4 <__sfp>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	60e0      	str	r0, [r4, #12]
 800a6a8:	2104      	movs	r1, #4
 800a6aa:	6860      	ldr	r0, [r4, #4]
 800a6ac:	f7ff ff82 	bl	800a5b4 <std>
 800a6b0:	68a0      	ldr	r0, [r4, #8]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2109      	movs	r1, #9
 800a6b6:	f7ff ff7d 	bl	800a5b4 <std>
 800a6ba:	68e0      	ldr	r0, [r4, #12]
 800a6bc:	2202      	movs	r2, #2
 800a6be:	2112      	movs	r1, #18
 800a6c0:	f7ff ff78 	bl	800a5b4 <std>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	61a3      	str	r3, [r4, #24]
 800a6c8:	e7d2      	b.n	800a670 <__sinit+0xc>
 800a6ca:	bf00      	nop
 800a6cc:	0800ab34 	.word	0x0800ab34
 800a6d0:	0800a5fd 	.word	0x0800a5fd

0800a6d4 <__sfp>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	4607      	mov	r7, r0
 800a6d8:	f7ff ffac 	bl	800a634 <__sfp_lock_acquire>
 800a6dc:	4b1e      	ldr	r3, [pc, #120]	; (800a758 <__sfp+0x84>)
 800a6de:	681e      	ldr	r6, [r3, #0]
 800a6e0:	69b3      	ldr	r3, [r6, #24]
 800a6e2:	b913      	cbnz	r3, 800a6ea <__sfp+0x16>
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	f7ff ffbd 	bl	800a664 <__sinit>
 800a6ea:	3648      	adds	r6, #72	; 0x48
 800a6ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	d503      	bpl.n	800a6fc <__sfp+0x28>
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	b30b      	cbz	r3, 800a73c <__sfp+0x68>
 800a6f8:	6836      	ldr	r6, [r6, #0]
 800a6fa:	e7f7      	b.n	800a6ec <__sfp+0x18>
 800a6fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a700:	b9d5      	cbnz	r5, 800a738 <__sfp+0x64>
 800a702:	4b16      	ldr	r3, [pc, #88]	; (800a75c <__sfp+0x88>)
 800a704:	60e3      	str	r3, [r4, #12]
 800a706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a70a:	6665      	str	r5, [r4, #100]	; 0x64
 800a70c:	f000 f847 	bl	800a79e <__retarget_lock_init_recursive>
 800a710:	f7ff ff96 	bl	800a640 <__sfp_lock_release>
 800a714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a71c:	6025      	str	r5, [r4, #0]
 800a71e:	61a5      	str	r5, [r4, #24]
 800a720:	2208      	movs	r2, #8
 800a722:	4629      	mov	r1, r5
 800a724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a728:	f7fb fd22 	bl	8006170 <memset>
 800a72c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a734:	4620      	mov	r0, r4
 800a736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a738:	3468      	adds	r4, #104	; 0x68
 800a73a:	e7d9      	b.n	800a6f0 <__sfp+0x1c>
 800a73c:	2104      	movs	r1, #4
 800a73e:	4638      	mov	r0, r7
 800a740:	f7ff ff62 	bl	800a608 <__sfmoreglue>
 800a744:	4604      	mov	r4, r0
 800a746:	6030      	str	r0, [r6, #0]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d1d5      	bne.n	800a6f8 <__sfp+0x24>
 800a74c:	f7ff ff78 	bl	800a640 <__sfp_lock_release>
 800a750:	230c      	movs	r3, #12
 800a752:	603b      	str	r3, [r7, #0]
 800a754:	e7ee      	b.n	800a734 <__sfp+0x60>
 800a756:	bf00      	nop
 800a758:	0800ab34 	.word	0x0800ab34
 800a75c:	ffff0001 	.word	0xffff0001

0800a760 <_fwalk_reent>:
 800a760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a764:	4606      	mov	r6, r0
 800a766:	4688      	mov	r8, r1
 800a768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a76c:	2700      	movs	r7, #0
 800a76e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a772:	f1b9 0901 	subs.w	r9, r9, #1
 800a776:	d505      	bpl.n	800a784 <_fwalk_reent+0x24>
 800a778:	6824      	ldr	r4, [r4, #0]
 800a77a:	2c00      	cmp	r4, #0
 800a77c:	d1f7      	bne.n	800a76e <_fwalk_reent+0xe>
 800a77e:	4638      	mov	r0, r7
 800a780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a784:	89ab      	ldrh	r3, [r5, #12]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d907      	bls.n	800a79a <_fwalk_reent+0x3a>
 800a78a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a78e:	3301      	adds	r3, #1
 800a790:	d003      	beq.n	800a79a <_fwalk_reent+0x3a>
 800a792:	4629      	mov	r1, r5
 800a794:	4630      	mov	r0, r6
 800a796:	47c0      	blx	r8
 800a798:	4307      	orrs	r7, r0
 800a79a:	3568      	adds	r5, #104	; 0x68
 800a79c:	e7e9      	b.n	800a772 <_fwalk_reent+0x12>

0800a79e <__retarget_lock_init_recursive>:
 800a79e:	4770      	bx	lr

0800a7a0 <__retarget_lock_acquire_recursive>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__retarget_lock_release_recursive>:
 800a7a2:	4770      	bx	lr

0800a7a4 <__swhatbuf_r>:
 800a7a4:	b570      	push	{r4, r5, r6, lr}
 800a7a6:	460e      	mov	r6, r1
 800a7a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	b096      	sub	sp, #88	; 0x58
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	461d      	mov	r5, r3
 800a7b4:	da08      	bge.n	800a7c8 <__swhatbuf_r+0x24>
 800a7b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	602a      	str	r2, [r5, #0]
 800a7be:	061a      	lsls	r2, r3, #24
 800a7c0:	d410      	bmi.n	800a7e4 <__swhatbuf_r+0x40>
 800a7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7c6:	e00e      	b.n	800a7e6 <__swhatbuf_r+0x42>
 800a7c8:	466a      	mov	r2, sp
 800a7ca:	f000 f903 	bl	800a9d4 <_fstat_r>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	dbf1      	blt.n	800a7b6 <__swhatbuf_r+0x12>
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7dc:	425a      	negs	r2, r3
 800a7de:	415a      	adcs	r2, r3
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	e7ee      	b.n	800a7c2 <__swhatbuf_r+0x1e>
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	b016      	add	sp, #88	; 0x58
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7f0 <__smakebuf_r>:
 800a7f0:	898b      	ldrh	r3, [r1, #12]
 800a7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7f4:	079d      	lsls	r5, r3, #30
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	d507      	bpl.n	800a80c <__smakebuf_r+0x1c>
 800a7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	2301      	movs	r3, #1
 800a806:	6163      	str	r3, [r4, #20]
 800a808:	b002      	add	sp, #8
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	ab01      	add	r3, sp, #4
 800a80e:	466a      	mov	r2, sp
 800a810:	f7ff ffc8 	bl	800a7a4 <__swhatbuf_r>
 800a814:	9900      	ldr	r1, [sp, #0]
 800a816:	4605      	mov	r5, r0
 800a818:	4630      	mov	r0, r6
 800a81a:	f7ff f957 	bl	8009acc <_malloc_r>
 800a81e:	b948      	cbnz	r0, 800a834 <__smakebuf_r+0x44>
 800a820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a824:	059a      	lsls	r2, r3, #22
 800a826:	d4ef      	bmi.n	800a808 <__smakebuf_r+0x18>
 800a828:	f023 0303 	bic.w	r3, r3, #3
 800a82c:	f043 0302 	orr.w	r3, r3, #2
 800a830:	81a3      	strh	r3, [r4, #12]
 800a832:	e7e3      	b.n	800a7fc <__smakebuf_r+0xc>
 800a834:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <__smakebuf_r+0x7c>)
 800a836:	62b3      	str	r3, [r6, #40]	; 0x28
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	6020      	str	r0, [r4, #0]
 800a83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	9b00      	ldr	r3, [sp, #0]
 800a844:	6163      	str	r3, [r4, #20]
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	6120      	str	r0, [r4, #16]
 800a84a:	b15b      	cbz	r3, 800a864 <__smakebuf_r+0x74>
 800a84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a850:	4630      	mov	r0, r6
 800a852:	f000 f8d1 	bl	800a9f8 <_isatty_r>
 800a856:	b128      	cbz	r0, 800a864 <__smakebuf_r+0x74>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	f043 0301 	orr.w	r3, r3, #1
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	89a0      	ldrh	r0, [r4, #12]
 800a866:	4305      	orrs	r5, r0
 800a868:	81a5      	strh	r5, [r4, #12]
 800a86a:	e7cd      	b.n	800a808 <__smakebuf_r+0x18>
 800a86c:	0800a5fd 	.word	0x0800a5fd

0800a870 <_malloc_usable_size_r>:
 800a870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a874:	1f18      	subs	r0, r3, #4
 800a876:	2b00      	cmp	r3, #0
 800a878:	bfbc      	itt	lt
 800a87a:	580b      	ldrlt	r3, [r1, r0]
 800a87c:	18c0      	addlt	r0, r0, r3
 800a87e:	4770      	bx	lr

0800a880 <_raise_r>:
 800a880:	291f      	cmp	r1, #31
 800a882:	b538      	push	{r3, r4, r5, lr}
 800a884:	4604      	mov	r4, r0
 800a886:	460d      	mov	r5, r1
 800a888:	d904      	bls.n	800a894 <_raise_r+0x14>
 800a88a:	2316      	movs	r3, #22
 800a88c:	6003      	str	r3, [r0, #0]
 800a88e:	f04f 30ff 	mov.w	r0, #4294967295
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a896:	b112      	cbz	r2, 800a89e <_raise_r+0x1e>
 800a898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a89c:	b94b      	cbnz	r3, 800a8b2 <_raise_r+0x32>
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 f830 	bl	800a904 <_getpid_r>
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4601      	mov	r1, r0
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ae:	f000 b817 	b.w	800a8e0 <_kill_r>
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d00a      	beq.n	800a8cc <_raise_r+0x4c>
 800a8b6:	1c59      	adds	r1, r3, #1
 800a8b8:	d103      	bne.n	800a8c2 <_raise_r+0x42>
 800a8ba:	2316      	movs	r3, #22
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e7e7      	b.n	800a892 <_raise_r+0x12>
 800a8c2:	2400      	movs	r4, #0
 800a8c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	4798      	blx	r3
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e7e0      	b.n	800a892 <_raise_r+0x12>

0800a8d0 <raise>:
 800a8d0:	4b02      	ldr	r3, [pc, #8]	; (800a8dc <raise+0xc>)
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	6818      	ldr	r0, [r3, #0]
 800a8d6:	f7ff bfd3 	b.w	800a880 <_raise_r>
 800a8da:	bf00      	nop
 800a8dc:	20000018 	.word	0x20000018

0800a8e0 <_kill_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d07      	ldr	r5, [pc, #28]	; (800a900 <_kill_r+0x20>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	602b      	str	r3, [r5, #0]
 800a8ee:	f7f7 fc27 	bl	8002140 <_kill>
 800a8f2:	1c43      	adds	r3, r0, #1
 800a8f4:	d102      	bne.n	800a8fc <_kill_r+0x1c>
 800a8f6:	682b      	ldr	r3, [r5, #0]
 800a8f8:	b103      	cbz	r3, 800a8fc <_kill_r+0x1c>
 800a8fa:	6023      	str	r3, [r4, #0]
 800a8fc:	bd38      	pop	{r3, r4, r5, pc}
 800a8fe:	bf00      	nop
 800a900:	2000141c 	.word	0x2000141c

0800a904 <_getpid_r>:
 800a904:	f7f7 bc14 	b.w	8002130 <_getpid>

0800a908 <__sread>:
 800a908:	b510      	push	{r4, lr}
 800a90a:	460c      	mov	r4, r1
 800a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a910:	f000 f894 	bl	800aa3c <_read_r>
 800a914:	2800      	cmp	r0, #0
 800a916:	bfab      	itete	ge
 800a918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a91a:	89a3      	ldrhlt	r3, [r4, #12]
 800a91c:	181b      	addge	r3, r3, r0
 800a91e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a922:	bfac      	ite	ge
 800a924:	6563      	strge	r3, [r4, #84]	; 0x54
 800a926:	81a3      	strhlt	r3, [r4, #12]
 800a928:	bd10      	pop	{r4, pc}

0800a92a <__swrite>:
 800a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	461f      	mov	r7, r3
 800a930:	898b      	ldrh	r3, [r1, #12]
 800a932:	05db      	lsls	r3, r3, #23
 800a934:	4605      	mov	r5, r0
 800a936:	460c      	mov	r4, r1
 800a938:	4616      	mov	r6, r2
 800a93a:	d505      	bpl.n	800a948 <__swrite+0x1e>
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	2302      	movs	r3, #2
 800a942:	2200      	movs	r2, #0
 800a944:	f000 f868 	bl	800aa18 <_lseek_r>
 800a948:	89a3      	ldrh	r3, [r4, #12]
 800a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	4632      	mov	r2, r6
 800a956:	463b      	mov	r3, r7
 800a958:	4628      	mov	r0, r5
 800a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	f000 b817 	b.w	800a990 <_write_r>

0800a962 <__sseek>:
 800a962:	b510      	push	{r4, lr}
 800a964:	460c      	mov	r4, r1
 800a966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96a:	f000 f855 	bl	800aa18 <_lseek_r>
 800a96e:	1c43      	adds	r3, r0, #1
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	bf15      	itete	ne
 800a974:	6560      	strne	r0, [r4, #84]	; 0x54
 800a976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a97a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a97e:	81a3      	strheq	r3, [r4, #12]
 800a980:	bf18      	it	ne
 800a982:	81a3      	strhne	r3, [r4, #12]
 800a984:	bd10      	pop	{r4, pc}

0800a986 <__sclose>:
 800a986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98a:	f000 b813 	b.w	800a9b4 <_close_r>
	...

0800a990 <_write_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d07      	ldr	r5, [pc, #28]	; (800a9b0 <_write_r+0x20>)
 800a994:	4604      	mov	r4, r0
 800a996:	4608      	mov	r0, r1
 800a998:	4611      	mov	r1, r2
 800a99a:	2200      	movs	r2, #0
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f7f7 fc05 	bl	80021ae <_write>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d102      	bne.n	800a9ae <_write_r+0x1e>
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	b103      	cbz	r3, 800a9ae <_write_r+0x1e>
 800a9ac:	6023      	str	r3, [r4, #0]
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	2000141c 	.word	0x2000141c

0800a9b4 <_close_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d06      	ldr	r5, [pc, #24]	; (800a9d0 <_close_r+0x1c>)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	602b      	str	r3, [r5, #0]
 800a9c0:	f7f7 fc11 	bl	80021e6 <_close>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_close_r+0x1a>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_close_r+0x1a>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	2000141c 	.word	0x2000141c

0800a9d4 <_fstat_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d07      	ldr	r5, [pc, #28]	; (800a9f4 <_fstat_r+0x20>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	f7f7 fc0c 	bl	80021fe <_fstat>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d102      	bne.n	800a9f0 <_fstat_r+0x1c>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	b103      	cbz	r3, 800a9f0 <_fstat_r+0x1c>
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000141c 	.word	0x2000141c

0800a9f8 <_isatty_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d06      	ldr	r5, [pc, #24]	; (800aa14 <_isatty_r+0x1c>)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	f7f7 fc0b 	bl	800221e <_isatty>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_isatty_r+0x1a>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_isatty_r+0x1a>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	2000141c 	.word	0x2000141c

0800aa18 <_lseek_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d07      	ldr	r5, [pc, #28]	; (800aa38 <_lseek_r+0x20>)
 800aa1c:	4604      	mov	r4, r0
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4611      	mov	r1, r2
 800aa22:	2200      	movs	r2, #0
 800aa24:	602a      	str	r2, [r5, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	f7f7 fc04 	bl	8002234 <_lseek>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_lseek_r+0x1e>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_lseek_r+0x1e>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	2000141c 	.word	0x2000141c

0800aa3c <_read_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_read_r+0x20>)
 800aa40:	4604      	mov	r4, r0
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	2200      	movs	r2, #0
 800aa48:	602a      	str	r2, [r5, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f7f7 fb92 	bl	8002174 <_read>
 800aa50:	1c43      	adds	r3, r0, #1
 800aa52:	d102      	bne.n	800aa5a <_read_r+0x1e>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	b103      	cbz	r3, 800aa5a <_read_r+0x1e>
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	2000141c 	.word	0x2000141c

0800aa60 <_init>:
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	bf00      	nop
 800aa64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa66:	bc08      	pop	{r3}
 800aa68:	469e      	mov	lr, r3
 800aa6a:	4770      	bx	lr

0800aa6c <_fini>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr
