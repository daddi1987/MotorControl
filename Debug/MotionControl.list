
MotionControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005714  08005714  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005714  08005714  00015714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800571c  0800571c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800571c  0800571c  0001571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000074  08005798  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b74  08005798  00021b74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d22  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea2  00000000  00000000  00037dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  0003bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  0003cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024df8  00000000  00000000  0003d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8d1  00000000  00000000  00062738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d889f  00000000  00000000  0007d009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001558a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c24  00000000  00000000  001558f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005600 	.word	0x08005600

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005600 	.word	0x08005600

08000210 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000210:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000212:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000216:	491a      	ldr	r1, [pc, #104]	; (8000280 <__tx_DBGHandler+0x6>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000218:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800021c:	4819      	ldr	r0, [pc, #100]	; (8000284 <__tx_DBGHandler+0xa>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800021e:	4918      	ldr	r1, [pc, #96]	; (8000280 <__tx_DBGHandler+0x6>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000220:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000222:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000224:	4818      	ldr	r0, [pc, #96]	; (8000288 <__tx_DBGHandler+0xe>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000226:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000228:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800022c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800022e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000232:	f241 0167 	movw	r1, #4199	; 0x1067
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000236:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000238:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800023c:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800023e:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000242:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000246:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 800024a:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800024e:	490f      	ldr	r1, [pc, #60]	; (800028c <__tx_DBGHandler+0x12>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000250:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000254:	4770      	bx	lr

08000256 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000256:	f7ff bffe 	b.w	8000256 <__tx_BadHandler>

0800025a <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 800025a:	f7ff bffe 	b.w	800025a <__tx_HardfaultHandler>

0800025e <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800025e:	f7ff bffe 	b.w	800025e <__tx_SVCallHandler>

08000262 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000262:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000264:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000268:	4770      	bx	lr

0800026a <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 800026a:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800026c:	f000 f890 	bl	8000390 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000270:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000274:	4770      	bx	lr

08000276 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000276:	f7ff bffe 	b.w	8000276 <__tx_NMIHandler>

0800027a <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 800027a:	f7ff bffe 	b.w	800027a <__tx_DBGHandler>
 800027e:	0000      	.short	0x0000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000280:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000284:	2000152c 	.word	0x2000152c
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000288:	e0001000 	.word	0xe0001000
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800028c:	40ff0000 	.word	0x40ff0000

08000290 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000290:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000294:	4a2a      	ldr	r2, [pc, #168]	; (8000340 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000296:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000298:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800029c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002a0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002a4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002aa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002ae:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002b2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002b6:	f3bf 8f6f 	isb	sy

080002ba <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ba:	e7fe      	b.n	80002ba <__tx_wait_here>

080002bc <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002bc:	4821      	ldr	r0, [pc, #132]	; (8000344 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002be:	4a22      	ldr	r2, [pc, #136]	; (8000348 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002c0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002c4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002c6:	b191      	cbz	r1, 80002ee <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002c8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002ca:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ce:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002d2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002d6:	d101      	bne.n	80002dc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002d8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002dc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002dc:	4c1b      	ldr	r4, [pc, #108]	; (800034c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002de:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002e2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002e4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002e8:	b10d      	cbz	r5, 80002ee <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ea:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002ec:	6023      	str	r3, [r4, #0]

080002ee <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ee:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002f0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002f2:	b1b1      	cbz	r1, 8000322 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002f4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002f6:	b662      	cpsie	i

080002f8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002f8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002fa:	4c14      	ldr	r4, [pc, #80]	; (800034c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002fc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002fe:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000302:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000304:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000306:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800030a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000312:	d101      	bne.n	8000318 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000314:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000318 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000318:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800031c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000320:	4770      	bx	lr

08000322 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000322:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000324:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000326:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000328:	b909      	cbnz	r1, 800032e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800032a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800032c:	e7f9      	b.n	8000322 <__tx_ts_wait>

0800032e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800032e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000332:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000336:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800033c:	e7dc      	b.n	80002f8 <__tx_ts_restore>

0800033e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800033e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000340:	200015c8 	.word	0x200015c8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000344:	20001530 	.word	0x20001530
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000348:	20001534 	.word	0x20001534
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800034c:	20001b34 	.word	0x20001b34

08000350 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000350:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000352:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000356:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800035a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800035e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000360:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000364:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000366:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000368:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800036a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800036c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800036e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000370:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000372:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000374:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000376:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000378:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800037c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800037e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000382:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000384:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800038a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800038c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800038e:	4770      	bx	lr

08000390 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000390:	4922      	ldr	r1, [pc, #136]	; (800041c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000392:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000394:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000398:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800039c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800039e:	b13a      	cbz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003a0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003a4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003a6:	b91a      	cbnz	r2, 80003b0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003a8:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003aa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003ae:	6018      	str	r0, [r3, #0]

080003b0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003b0:	491d      	ldr	r1, [pc, #116]	; (8000428 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003b2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003b4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003b6:	b122      	cbz	r2, 80003c2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ba:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003be:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003c0:	e008      	b.n	80003d4 <__tx_timer_done>

080003c2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003c2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003c6:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003c8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ca:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003cc:	d101      	bne.n	80003d2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003d0:	6818      	ldr	r0, [r3, #0]

080003d2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003d2:	6008      	str	r0, [r1, #0]

080003d4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003d6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003d8:	b912      	cbnz	r2, 80003e0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003da:	4914      	ldr	r1, [pc, #80]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003dc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003de:	b1d0      	cbz	r0, 8000416 <__tx_timer_nothing_expired>

080003e0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003e0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003e4:	4911      	ldr	r1, [pc, #68]	; (800042c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003e6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003e8:	b108      	cbz	r0, 80003ee <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ea:	f003 ff8f 	bl	800430c <_tx_timer_expiration_process>

080003ee <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003f0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003f2:	b172      	cbz	r2, 8000412 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003f4:	f003 fe6e 	bl	80040d4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003f8:	480f      	ldr	r0, [pc, #60]	; (8000438 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003fa:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003fc:	b949      	cbnz	r1, 8000412 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003fe:	480f      	ldr	r0, [pc, #60]	; (800043c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000400:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000402:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000404:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800040c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800040e:	d000      	beq.n	8000412 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000410:	6002      	str	r2, [r0, #0]

08000412 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000412:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000416 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000416:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	200015d4 	.word	0x200015d4
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000420:	20001b34 	.word	0x20001b34
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	200015d8 	.word	0x200015d8
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000428:	20001664 	.word	0x20001664
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800042c:	20001668 	.word	0x20001668
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000430:	20001660 	.word	0x20001660
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000434:	2000165c 	.word	0x2000165c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000438:	200015c8 	.word	0x200015c8
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800043c:	20001530 	.word	0x20001530
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000440:	20001534 	.word	0x20001534
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000444:	e000ed04 	.word	0xe000ed04
	...

08000450 <memchr>:
 8000450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000454:	2a10      	cmp	r2, #16
 8000456:	db2b      	blt.n	80004b0 <memchr+0x60>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	d008      	beq.n	8000470 <memchr+0x20>
 800045e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000462:	3a01      	subs	r2, #1
 8000464:	428b      	cmp	r3, r1
 8000466:	d02d      	beq.n	80004c4 <memchr+0x74>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	b342      	cbz	r2, 80004c0 <memchr+0x70>
 800046e:	d1f6      	bne.n	800045e <memchr+0xe>
 8000470:	b4f0      	push	{r4, r5, r6, r7}
 8000472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800047a:	f022 0407 	bic.w	r4, r2, #7
 800047e:	f07f 0700 	mvns.w	r7, #0
 8000482:	2300      	movs	r3, #0
 8000484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000488:	3c08      	subs	r4, #8
 800048a:	ea85 0501 	eor.w	r5, r5, r1
 800048e:	ea86 0601 	eor.w	r6, r6, r1
 8000492:	fa85 f547 	uadd8	r5, r5, r7
 8000496:	faa3 f587 	sel	r5, r3, r7
 800049a:	fa86 f647 	uadd8	r6, r6, r7
 800049e:	faa5 f687 	sel	r6, r5, r7
 80004a2:	b98e      	cbnz	r6, 80004c8 <memchr+0x78>
 80004a4:	d1ee      	bne.n	8000484 <memchr+0x34>
 80004a6:	bcf0      	pop	{r4, r5, r6, r7}
 80004a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004ac:	f002 0207 	and.w	r2, r2, #7
 80004b0:	b132      	cbz	r2, 80004c0 <memchr+0x70>
 80004b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004b6:	3a01      	subs	r2, #1
 80004b8:	ea83 0301 	eor.w	r3, r3, r1
 80004bc:	b113      	cbz	r3, 80004c4 <memchr+0x74>
 80004be:	d1f8      	bne.n	80004b2 <memchr+0x62>
 80004c0:	2000      	movs	r0, #0
 80004c2:	4770      	bx	lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4770      	bx	lr
 80004c8:	2d00      	cmp	r5, #0
 80004ca:	bf06      	itte	eq
 80004cc:	4635      	moveq	r5, r6
 80004ce:	3803      	subeq	r0, #3
 80004d0:	3807      	subne	r0, #7
 80004d2:	f015 0f01 	tst.w	r5, #1
 80004d6:	d107      	bne.n	80004e8 <memchr+0x98>
 80004d8:	3001      	adds	r0, #1
 80004da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004de:	bf02      	ittt	eq
 80004e0:	3001      	addeq	r0, #1
 80004e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004e6:	3001      	addeq	r0, #1
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	3801      	subs	r0, #1
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <__aeabi_uldivmod>:
 80004f0:	b953      	cbnz	r3, 8000508 <__aeabi_uldivmod+0x18>
 80004f2:	b94a      	cbnz	r2, 8000508 <__aeabi_uldivmod+0x18>
 80004f4:	2900      	cmp	r1, #0
 80004f6:	bf08      	it	eq
 80004f8:	2800      	cmpeq	r0, #0
 80004fa:	bf1c      	itt	ne
 80004fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000500:	f04f 30ff 	movne.w	r0, #4294967295
 8000504:	f000 b974 	b.w	80007f0 <__aeabi_idiv0>
 8000508:	f1ad 0c08 	sub.w	ip, sp, #8
 800050c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000510:	f000 f806 	bl	8000520 <__udivmoddi4>
 8000514:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800051c:	b004      	add	sp, #16
 800051e:	4770      	bx	lr

08000520 <__udivmoddi4>:
 8000520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000524:	9d08      	ldr	r5, [sp, #32]
 8000526:	4604      	mov	r4, r0
 8000528:	468e      	mov	lr, r1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d14d      	bne.n	80005ca <__udivmoddi4+0xaa>
 800052e:	428a      	cmp	r2, r1
 8000530:	4694      	mov	ip, r2
 8000532:	d969      	bls.n	8000608 <__udivmoddi4+0xe8>
 8000534:	fab2 f282 	clz	r2, r2
 8000538:	b152      	cbz	r2, 8000550 <__udivmoddi4+0x30>
 800053a:	fa01 f302 	lsl.w	r3, r1, r2
 800053e:	f1c2 0120 	rsb	r1, r2, #32
 8000542:	fa20 f101 	lsr.w	r1, r0, r1
 8000546:	fa0c fc02 	lsl.w	ip, ip, r2
 800054a:	ea41 0e03 	orr.w	lr, r1, r3
 800054e:	4094      	lsls	r4, r2
 8000550:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000554:	0c21      	lsrs	r1, r4, #16
 8000556:	fbbe f6f8 	udiv	r6, lr, r8
 800055a:	fa1f f78c 	uxth.w	r7, ip
 800055e:	fb08 e316 	mls	r3, r8, r6, lr
 8000562:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000566:	fb06 f107 	mul.w	r1, r6, r7
 800056a:	4299      	cmp	r1, r3
 800056c:	d90a      	bls.n	8000584 <__udivmoddi4+0x64>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f106 30ff 	add.w	r0, r6, #4294967295
 8000576:	f080 811f 	bcs.w	80007b8 <__udivmoddi4+0x298>
 800057a:	4299      	cmp	r1, r3
 800057c:	f240 811c 	bls.w	80007b8 <__udivmoddi4+0x298>
 8000580:	3e02      	subs	r6, #2
 8000582:	4463      	add	r3, ip
 8000584:	1a5b      	subs	r3, r3, r1
 8000586:	b2a4      	uxth	r4, r4
 8000588:	fbb3 f0f8 	udiv	r0, r3, r8
 800058c:	fb08 3310 	mls	r3, r8, r0, r3
 8000590:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000594:	fb00 f707 	mul.w	r7, r0, r7
 8000598:	42a7      	cmp	r7, r4
 800059a:	d90a      	bls.n	80005b2 <__udivmoddi4+0x92>
 800059c:	eb1c 0404 	adds.w	r4, ip, r4
 80005a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a4:	f080 810a 	bcs.w	80007bc <__udivmoddi4+0x29c>
 80005a8:	42a7      	cmp	r7, r4
 80005aa:	f240 8107 	bls.w	80007bc <__udivmoddi4+0x29c>
 80005ae:	4464      	add	r4, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005b6:	1be4      	subs	r4, r4, r7
 80005b8:	2600      	movs	r6, #0
 80005ba:	b11d      	cbz	r5, 80005c4 <__udivmoddi4+0xa4>
 80005bc:	40d4      	lsrs	r4, r2
 80005be:	2300      	movs	r3, #0
 80005c0:	e9c5 4300 	strd	r4, r3, [r5]
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d909      	bls.n	80005e2 <__udivmoddi4+0xc2>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	f000 80ef 	beq.w	80007b2 <__udivmoddi4+0x292>
 80005d4:	2600      	movs	r6, #0
 80005d6:	e9c5 0100 	strd	r0, r1, [r5]
 80005da:	4630      	mov	r0, r6
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	fab3 f683 	clz	r6, r3
 80005e6:	2e00      	cmp	r6, #0
 80005e8:	d14a      	bne.n	8000680 <__udivmoddi4+0x160>
 80005ea:	428b      	cmp	r3, r1
 80005ec:	d302      	bcc.n	80005f4 <__udivmoddi4+0xd4>
 80005ee:	4282      	cmp	r2, r0
 80005f0:	f200 80f9 	bhi.w	80007e6 <__udivmoddi4+0x2c6>
 80005f4:	1a84      	subs	r4, r0, r2
 80005f6:	eb61 0303 	sbc.w	r3, r1, r3
 80005fa:	2001      	movs	r0, #1
 80005fc:	469e      	mov	lr, r3
 80005fe:	2d00      	cmp	r5, #0
 8000600:	d0e0      	beq.n	80005c4 <__udivmoddi4+0xa4>
 8000602:	e9c5 4e00 	strd	r4, lr, [r5]
 8000606:	e7dd      	b.n	80005c4 <__udivmoddi4+0xa4>
 8000608:	b902      	cbnz	r2, 800060c <__udivmoddi4+0xec>
 800060a:	deff      	udf	#255	; 0xff
 800060c:	fab2 f282 	clz	r2, r2
 8000610:	2a00      	cmp	r2, #0
 8000612:	f040 8092 	bne.w	800073a <__udivmoddi4+0x21a>
 8000616:	eba1 010c 	sub.w	r1, r1, ip
 800061a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800061e:	fa1f fe8c 	uxth.w	lr, ip
 8000622:	2601      	movs	r6, #1
 8000624:	0c20      	lsrs	r0, r4, #16
 8000626:	fbb1 f3f7 	udiv	r3, r1, r7
 800062a:	fb07 1113 	mls	r1, r7, r3, r1
 800062e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000632:	fb0e f003 	mul.w	r0, lr, r3
 8000636:	4288      	cmp	r0, r1
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x12c>
 800063a:	eb1c 0101 	adds.w	r1, ip, r1
 800063e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000642:	d202      	bcs.n	800064a <__udivmoddi4+0x12a>
 8000644:	4288      	cmp	r0, r1
 8000646:	f200 80cb 	bhi.w	80007e0 <__udivmoddi4+0x2c0>
 800064a:	4643      	mov	r3, r8
 800064c:	1a09      	subs	r1, r1, r0
 800064e:	b2a4      	uxth	r4, r4
 8000650:	fbb1 f0f7 	udiv	r0, r1, r7
 8000654:	fb07 1110 	mls	r1, r7, r0, r1
 8000658:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800065c:	fb0e fe00 	mul.w	lr, lr, r0
 8000660:	45a6      	cmp	lr, r4
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x156>
 8000664:	eb1c 0404 	adds.w	r4, ip, r4
 8000668:	f100 31ff 	add.w	r1, r0, #4294967295
 800066c:	d202      	bcs.n	8000674 <__udivmoddi4+0x154>
 800066e:	45a6      	cmp	lr, r4
 8000670:	f200 80bb 	bhi.w	80007ea <__udivmoddi4+0x2ca>
 8000674:	4608      	mov	r0, r1
 8000676:	eba4 040e 	sub.w	r4, r4, lr
 800067a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800067e:	e79c      	b.n	80005ba <__udivmoddi4+0x9a>
 8000680:	f1c6 0720 	rsb	r7, r6, #32
 8000684:	40b3      	lsls	r3, r6
 8000686:	fa22 fc07 	lsr.w	ip, r2, r7
 800068a:	ea4c 0c03 	orr.w	ip, ip, r3
 800068e:	fa20 f407 	lsr.w	r4, r0, r7
 8000692:	fa01 f306 	lsl.w	r3, r1, r6
 8000696:	431c      	orrs	r4, r3
 8000698:	40f9      	lsrs	r1, r7
 800069a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800069e:	fa00 f306 	lsl.w	r3, r0, r6
 80006a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80006a6:	0c20      	lsrs	r0, r4, #16
 80006a8:	fa1f fe8c 	uxth.w	lr, ip
 80006ac:	fb09 1118 	mls	r1, r9, r8, r1
 80006b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b4:	fb08 f00e 	mul.w	r0, r8, lr
 80006b8:	4288      	cmp	r0, r1
 80006ba:	fa02 f206 	lsl.w	r2, r2, r6
 80006be:	d90b      	bls.n	80006d8 <__udivmoddi4+0x1b8>
 80006c0:	eb1c 0101 	adds.w	r1, ip, r1
 80006c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80006c8:	f080 8088 	bcs.w	80007dc <__udivmoddi4+0x2bc>
 80006cc:	4288      	cmp	r0, r1
 80006ce:	f240 8085 	bls.w	80007dc <__udivmoddi4+0x2bc>
 80006d2:	f1a8 0802 	sub.w	r8, r8, #2
 80006d6:	4461      	add	r1, ip
 80006d8:	1a09      	subs	r1, r1, r0
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e0:	fb09 1110 	mls	r1, r9, r0, r1
 80006e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	458e      	cmp	lr, r1
 80006ee:	d908      	bls.n	8000702 <__udivmoddi4+0x1e2>
 80006f0:	eb1c 0101 	adds.w	r1, ip, r1
 80006f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80006f8:	d26c      	bcs.n	80007d4 <__udivmoddi4+0x2b4>
 80006fa:	458e      	cmp	lr, r1
 80006fc:	d96a      	bls.n	80007d4 <__udivmoddi4+0x2b4>
 80006fe:	3802      	subs	r0, #2
 8000700:	4461      	add	r1, ip
 8000702:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000706:	fba0 9402 	umull	r9, r4, r0, r2
 800070a:	eba1 010e 	sub.w	r1, r1, lr
 800070e:	42a1      	cmp	r1, r4
 8000710:	46c8      	mov	r8, r9
 8000712:	46a6      	mov	lr, r4
 8000714:	d356      	bcc.n	80007c4 <__udivmoddi4+0x2a4>
 8000716:	d053      	beq.n	80007c0 <__udivmoddi4+0x2a0>
 8000718:	b15d      	cbz	r5, 8000732 <__udivmoddi4+0x212>
 800071a:	ebb3 0208 	subs.w	r2, r3, r8
 800071e:	eb61 010e 	sbc.w	r1, r1, lr
 8000722:	fa01 f707 	lsl.w	r7, r1, r7
 8000726:	fa22 f306 	lsr.w	r3, r2, r6
 800072a:	40f1      	lsrs	r1, r6
 800072c:	431f      	orrs	r7, r3
 800072e:	e9c5 7100 	strd	r7, r1, [r5]
 8000732:	2600      	movs	r6, #0
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	40d8      	lsrs	r0, r3
 8000740:	fa0c fc02 	lsl.w	ip, ip, r2
 8000744:	fa21 f303 	lsr.w	r3, r1, r3
 8000748:	4091      	lsls	r1, r2
 800074a:	4301      	orrs	r1, r0
 800074c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000750:	fa1f fe8c 	uxth.w	lr, ip
 8000754:	fbb3 f0f7 	udiv	r0, r3, r7
 8000758:	fb07 3610 	mls	r6, r7, r0, r3
 800075c:	0c0b      	lsrs	r3, r1, #16
 800075e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000762:	fb00 f60e 	mul.w	r6, r0, lr
 8000766:	429e      	cmp	r6, r3
 8000768:	fa04 f402 	lsl.w	r4, r4, r2
 800076c:	d908      	bls.n	8000780 <__udivmoddi4+0x260>
 800076e:	eb1c 0303 	adds.w	r3, ip, r3
 8000772:	f100 38ff 	add.w	r8, r0, #4294967295
 8000776:	d22f      	bcs.n	80007d8 <__udivmoddi4+0x2b8>
 8000778:	429e      	cmp	r6, r3
 800077a:	d92d      	bls.n	80007d8 <__udivmoddi4+0x2b8>
 800077c:	3802      	subs	r0, #2
 800077e:	4463      	add	r3, ip
 8000780:	1b9b      	subs	r3, r3, r6
 8000782:	b289      	uxth	r1, r1
 8000784:	fbb3 f6f7 	udiv	r6, r3, r7
 8000788:	fb07 3316 	mls	r3, r7, r6, r3
 800078c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000790:	fb06 f30e 	mul.w	r3, r6, lr
 8000794:	428b      	cmp	r3, r1
 8000796:	d908      	bls.n	80007aa <__udivmoddi4+0x28a>
 8000798:	eb1c 0101 	adds.w	r1, ip, r1
 800079c:	f106 38ff 	add.w	r8, r6, #4294967295
 80007a0:	d216      	bcs.n	80007d0 <__udivmoddi4+0x2b0>
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d914      	bls.n	80007d0 <__udivmoddi4+0x2b0>
 80007a6:	3e02      	subs	r6, #2
 80007a8:	4461      	add	r1, ip
 80007aa:	1ac9      	subs	r1, r1, r3
 80007ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007b0:	e738      	b.n	8000624 <__udivmoddi4+0x104>
 80007b2:	462e      	mov	r6, r5
 80007b4:	4628      	mov	r0, r5
 80007b6:	e705      	b.n	80005c4 <__udivmoddi4+0xa4>
 80007b8:	4606      	mov	r6, r0
 80007ba:	e6e3      	b.n	8000584 <__udivmoddi4+0x64>
 80007bc:	4618      	mov	r0, r3
 80007be:	e6f8      	b.n	80005b2 <__udivmoddi4+0x92>
 80007c0:	454b      	cmp	r3, r9
 80007c2:	d2a9      	bcs.n	8000718 <__udivmoddi4+0x1f8>
 80007c4:	ebb9 0802 	subs.w	r8, r9, r2
 80007c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007cc:	3801      	subs	r0, #1
 80007ce:	e7a3      	b.n	8000718 <__udivmoddi4+0x1f8>
 80007d0:	4646      	mov	r6, r8
 80007d2:	e7ea      	b.n	80007aa <__udivmoddi4+0x28a>
 80007d4:	4620      	mov	r0, r4
 80007d6:	e794      	b.n	8000702 <__udivmoddi4+0x1e2>
 80007d8:	4640      	mov	r0, r8
 80007da:	e7d1      	b.n	8000780 <__udivmoddi4+0x260>
 80007dc:	46d0      	mov	r8, sl
 80007de:	e77b      	b.n	80006d8 <__udivmoddi4+0x1b8>
 80007e0:	3b02      	subs	r3, #2
 80007e2:	4461      	add	r1, ip
 80007e4:	e732      	b.n	800064c <__udivmoddi4+0x12c>
 80007e6:	4630      	mov	r0, r6
 80007e8:	e709      	b.n	80005fe <__udivmoddi4+0xde>
 80007ea:	4464      	add	r4, ip
 80007ec:	3802      	subs	r0, #2
 80007ee:	e742      	b.n	8000676 <__udivmoddi4+0x156>

080007f0 <__aeabi_idiv0>:
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007fc:	2334      	movs	r3, #52	; 0x34
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	4a08      	ldr	r2, [pc, #32]	; (8000828 <tx_application_define+0x34>)
 8000806:	4909      	ldr	r1, [pc, #36]	; (800082c <tx_application_define+0x38>)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <tx_application_define+0x3c>)
 800080a:	f004 f8c7 	bl	800499c <_txe_byte_pool_create>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <tx_application_define+0x3c>)
 8000816:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 f80b 	bl	8000834 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000090 	.word	0x20000090
 800082c:	08005618 	.word	0x08005618
 8000830:	20000490 	.word	0x20000490

08000834 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	; 0x30
 8000838:	af08      	add	r7, sp, #32
 800083a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr1,"my_First_trade",my_Thread_entry_1,0x1234,thread_stack1,THREAD_STACK_SIZE,
 8000844:	23b0      	movs	r3, #176	; 0xb0
 8000846:	9306      	str	r3, [sp, #24]
 8000848:	2301      	movs	r3, #1
 800084a:	9305      	str	r3, [sp, #20]
 800084c:	2301      	movs	r3, #1
 800084e:	9304      	str	r3, [sp, #16]
 8000850:	230f      	movs	r3, #15
 8000852:	9303      	str	r3, [sp, #12]
 8000854:	230f      	movs	r3, #15
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <App_ThreadX_Init+0xa0>)
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	f241 2334 	movw	r3, #4660	; 0x1234
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <App_ThreadX_Init+0xa4>)
 8000868:	491c      	ldr	r1, [pc, #112]	; (80008dc <App_ThreadX_Init+0xa8>)
 800086a:	481d      	ldr	r0, [pc, #116]	; (80008e0 <App_ThreadX_Init+0xac>)
 800086c:	f004 f936 	bl	8004adc <_txe_thread_create>
   		  15,15,1,TX_AUTO_START);  //RICHIAMARE IL PRIMO TRADE
  tx_thread_create(&thread_ptr2,"my_Second_trade",my_Thread_entry_2,0x1234,thread_stack2,THREAD_STACK_SIZE,
 8000870:	23b0      	movs	r3, #176	; 0xb0
 8000872:	9306      	str	r3, [sp, #24]
 8000874:	2301      	movs	r3, #1
 8000876:	9305      	str	r3, [sp, #20]
 8000878:	2301      	movs	r3, #1
 800087a:	9304      	str	r3, [sp, #16]
 800087c:	230f      	movs	r3, #15
 800087e:	9303      	str	r3, [sp, #12]
 8000880:	230f      	movs	r3, #15
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <App_ThreadX_Init+0xb0>)
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	f241 2334 	movw	r3, #4660	; 0x1234
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <App_ThreadX_Init+0xb4>)
 8000894:	4915      	ldr	r1, [pc, #84]	; (80008ec <App_ThreadX_Init+0xb8>)
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <App_ThreadX_Init+0xbc>)
 8000898:	f004 f920 	bl	8004adc <_txe_thread_create>
   		  15,15,1,TX_AUTO_START);  //RICHIAMARE IL SECONDO TRADE
  tx_thread_create(&thread_ptr3,"my_Third_trade",my_Thread_entry_3,0x1234,thread_stack3,THREAD_STACK_SIZE,
 800089c:	23b0      	movs	r3, #176	; 0xb0
 800089e:	9306      	str	r3, [sp, #24]
 80008a0:	2301      	movs	r3, #1
 80008a2:	9305      	str	r3, [sp, #20]
 80008a4:	2301      	movs	r3, #1
 80008a6:	9304      	str	r3, [sp, #16]
 80008a8:	230f      	movs	r3, #15
 80008aa:	9303      	str	r3, [sp, #12]
 80008ac:	230f      	movs	r3, #15
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <App_ThreadX_Init+0xc0>)
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	f241 2334 	movw	r3, #4660	; 0x1234
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <App_ThreadX_Init+0xc4>)
 80008c0:	490e      	ldr	r1, [pc, #56]	; (80008fc <App_ThreadX_Init+0xc8>)
 80008c2:	480f      	ldr	r0, [pc, #60]	; (8000900 <App_ThreadX_Init+0xcc>)
 80008c4:	f004 f90a 	bl	8004adc <_txe_thread_create>
     	  15,15,1,TX_AUTO_START);  //RICHIAMARE IL SECONDO TRADE
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200004c4 	.word	0x200004c4
 80008d8:	08000931 	.word	0x08000931
 80008dc:	0800562c 	.word	0x0800562c
 80008e0:	200008c4 	.word	0x200008c4
 80008e4:	20000974 	.word	0x20000974
 80008e8:	0800095d 	.word	0x0800095d
 80008ec:	0800563c 	.word	0x0800563c
 80008f0:	20000d74 	.word	0x20000d74
 80008f4:	20000e24 	.word	0x20000e24
 80008f8:	080009d5 	.word	0x080009d5
 80008fc:	0800564c 	.word	0x0800564c
 8000900:	20001224 	.word	0x20001224

08000904 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */
  sprintf(HEADER2, "Init ThreadX");
 8000908:	4906      	ldr	r1, [pc, #24]	; (8000924 <MX_ThreadX_Init+0x20>)
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_ThreadX_Init+0x24>)
 800090c:	f004 fa0a 	bl	8004d24 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	220e      	movs	r2, #14
 8000914:	4904      	ldr	r1, [pc, #16]	; (8000928 <MX_ThreadX_Init+0x24>)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ThreadX_Init+0x28>)
 8000918:	f002 f8e3 	bl	8002ae2 <HAL_UART_Transmit>
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800091c:	f002 fdc0 	bl	80034a0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	0800565c 	.word	0x0800565c
 8000928:	200012d4 	.word	0x200012d4
 800092c:	2000142c 	.word	0x2000142c

08000930 <my_Thread_entry_1>:

/* USER CODE BEGIN 1 */
void my_Thread_entry_1(ULONG initial_input)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(TickMotion == true)
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <my_Thread_entry_1+0x24>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0fb      	beq.n	8000938 <my_Thread_entry_1+0x8>
		{
		  TickMotion = false;
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <my_Thread_entry_1+0x24>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
		  Counter = Counter+1;
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <my_Thread_entry_1+0x28>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	4a02      	ldr	r2, [pc, #8]	; (8000958 <my_Thread_entry_1+0x28>)
 800094e:	6013      	str	r3, [r2, #0]
		if(TickMotion == true)
 8000950:	e7f2      	b.n	8000938 <my_Thread_entry_1+0x8>
 8000952:	bf00      	nop
 8000954:	200014a4 	.word	0x200014a4
 8000958:	2000134c 	.word	0x2000134c

0800095c <my_Thread_entry_2>:
	}
}
}

void my_Thread_entry_2(ULONG initial_input)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(TickSerial == true)
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <my_Thread_entry_2+0x54>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0fb      	beq.n	8000964 <my_Thread_entry_2+0x8>
		{
		  TickSerial = false;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <my_Thread_entry_2+0x54>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
 8000972:	2120      	movs	r1, #32
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <my_Thread_entry_2+0x58>)
 8000976:	f000 ff12 	bl	800179e <HAL_GPIO_TogglePin>
		  //HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, 0);
		  //HAL_Delay(1000);
		  //HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
		  //HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, 1);
		  //HAL_Delay(1000);
		  sprintf(MSG, "%d;%d;Sx",Counter,CounterDiag);
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <my_Thread_entry_2+0x5c>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <my_Thread_entry_2+0x60>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	490f      	ldr	r1, [pc, #60]	; (80009c0 <my_Thread_entry_2+0x64>)
 8000984:	480f      	ldr	r0, [pc, #60]	; (80009c4 <my_Thread_entry_2+0x68>)
 8000986:	f004 f9cd 	bl	8004d24 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	2264      	movs	r2, #100	; 0x64
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <my_Thread_entry_2+0x68>)
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <my_Thread_entry_2+0x6c>)
 8000994:	f002 f8a5 	bl	8002ae2 <HAL_UART_Transmit>
		  sprintf(CR,"\r\n");   											//Indispensable for Send Value without error to row empty
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <my_Thread_entry_2+0x70>)
 800099a:	480d      	ldr	r0, [pc, #52]	; (80009d0 <my_Thread_entry_2+0x74>)
 800099c:	f004 f9c2 	bl	8004d24 <siprintf>
		  HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);
 80009a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a4:	2204      	movs	r2, #4
 80009a6:	490a      	ldr	r1, [pc, #40]	; (80009d0 <my_Thread_entry_2+0x74>)
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <my_Thread_entry_2+0x6c>)
 80009aa:	f002 f89a 	bl	8002ae2 <HAL_UART_Transmit>
		if(TickSerial == true)
 80009ae:	e7d9      	b.n	8000964 <my_Thread_entry_2+0x8>
 80009b0:	200014a5 	.word	0x200014a5
 80009b4:	40020000 	.word	0x40020000
 80009b8:	2000134c 	.word	0x2000134c
 80009bc:	20001350 	.word	0x20001350
 80009c0:	0800566c 	.word	0x0800566c
 80009c4:	200012e4 	.word	0x200012e4
 80009c8:	2000142c 	.word	0x2000142c
 80009cc:	08005678 	.word	0x08005678
 80009d0:	20001348 	.word	0x20001348

080009d4 <my_Thread_entry_3>:
		}
	}
}

void my_Thread_entry_3(ULONG initial_input)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(TickDiag == true)
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <my_Thread_entry_3+0x24>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0fb      	beq.n	80009dc <my_Thread_entry_3+0x8>
		{
		  TickDiag = false;
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <my_Thread_entry_3+0x24>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		  CounterDiag = CounterDiag+1;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <my_Thread_entry_3+0x28>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	3301      	adds	r3, #1
 80009f0:	4a02      	ldr	r2, [pc, #8]	; (80009fc <my_Thread_entry_3+0x28>)
 80009f2:	6013      	str	r3, [r2, #0]
		if(TickDiag == true)
 80009f4:	e7f2      	b.n	80009dc <my_Thread_entry_3+0x8>
 80009f6:	bf00      	nop
 80009f8:	200014a6 	.word	0x200014a6
 80009fc:	20001350 	.word	0x20001350

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fbfa 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f81e 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f93a 	bl	8000c84 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a10:	f000 f90e 	bl	8000c30 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8000a14:	f000 f886 	bl	8000b24 <MX_TIM7_Init>
  MX_TIM10_Init();
 8000a18:	f000 f8bc 	bl	8000b94 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000a1c:	f000 f8e2 	bl	8000be4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  sprintf(HEADER1, "Initialized Serial Comunication \n");
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <main+0x3c>)
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <main+0x40>)
 8000a24:	f004 f97e 	bl	8004d24 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8000a28:	2364      	movs	r3, #100	; 0x64
 8000a2a:	2223      	movs	r2, #35	; 0x23
 8000a2c:	4904      	ldr	r1, [pc, #16]	; (8000a40 <main+0x40>)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x44>)
 8000a30:	f002 f857 	bl	8002ae2 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000a34:	f7ff ff66 	bl	8000904 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x38>
 8000a3a:	bf00      	nop
 8000a3c:	0800567c 	.word	0x0800567c
 8000a40:	20001470 	.word	0x20001470
 8000a44:	2000142c 	.word	0x2000142c

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2234      	movs	r2, #52	; 0x34
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 f95c 	bl	8004d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a29      	ldr	r2, [pc, #164]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SystemClock_Config+0xd4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemClock_Config+0xd8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <SystemClock_Config+0xd8>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <SystemClock_Config+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000abc:	2310      	movs	r3, #16
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ac4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 f9f8 	bl	8001ecc <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ae2:	f000 f975 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fe66 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b0e:	f000 f95f 	bl	8000dd0 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	; 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b34:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <MX_TIM7_Init+0x6c>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2099;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b46:	f640 0233 	movw	r2, #2099	; 0x833
 8000b4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b54:	f001 fc58 	bl	8002408 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b5e:	f000 f937 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b70:	f001 feda 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b7a:	f000 f929 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <MX_TIM7_Init+0x68>)
 8000b80:	f001 fc92 	bl	80024a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20001354 	.word	0x20001354
 8000b90:	40001400 	.word	0x40001400

08000b94 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <MX_TIM10_Init+0x4c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10000;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000ba0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ba4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8399;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000bae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000bb2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000bc2:	f001 fc21 	bl	8002408 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000bcc:	f000 f900 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */
  HAL_TIM_Base_Start_IT(&htim10); // Start Timer
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <MX_TIM10_Init+0x48>)
 8000bd2:	f001 fc69 	bl	80024a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM10_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000139c 	.word	0x2000139c
 8000be0:	40014400 	.word	0x40014400

08000be4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <MX_TIM11_Init+0x48>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000bf0:	2264      	movs	r2, #100	; 0x64
 8000bf2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 831;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000bfc:	f240 323f 	movw	r2, #831	; 0x33f
 8000c00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000c10:	f001 fbfa 	bl	8002408 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c1a:	f000 f8d9 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */
  HAL_TIM_Base_Start_IT(&htim11); // Start Timer
 8000c1e:	4802      	ldr	r0, [pc, #8]	; (8000c28 <MX_TIM11_Init+0x44>)
 8000c20:	f001 fc42 	bl	80024a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM11_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200013e4 	.word	0x200013e4
 8000c2c:	40014800 	.word	0x40014800

08000c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <MX_USART2_UART_Init+0x50>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART2_UART_Init+0x4c>)
 8000c68:	f001 feee 	bl	8002a48 <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8ad 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000142c 	.word	0x2000142c
 8000c80:	40004400 	.word	0x40004400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a25      	ldr	r2, [pc, #148]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2120      	movs	r1, #32
 8000d0e:	4812      	ldr	r0, [pc, #72]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000d10:	f000 fd2c 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480c      	ldr	r0, [pc, #48]	; (8000d5c <MX_GPIO_Init+0xd8>)
 8000d2c:	f000 fb8a 	bl	8001444 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 8000d30:	2320      	movs	r3, #32
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_GPIO_Init+0xd4>)
 8000d48:	f000 fb7c 	bl	8001444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020800 	.word	0x40020800

08000d60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d102      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000d72:	f000 fa65 	bl	8001240 <HAL_IncTick>
  }
  else if (htim->Instance == TIM11) {
    	TickDiag = true;
    }
  /* USER CODE END Callback 1 */
}
 8000d76:	e019      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x4c>
  else if (htim->Instance == TIM7) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d103      	bne.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x2a>
	TickMotion = true;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	e010      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x4c>
  else if (htim->Instance == TIM10) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d103      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>
  	TickSerial = true;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
}
 8000d9a:	e007      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x4c>
  else if (htim->Instance == TIM11) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d102      	bne.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x4c>
    	TickDiag = true;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40001000 	.word	0x40001000
 8000db8:	40001400 	.word	0x40001400
 8000dbc:	200014a4 	.word	0x200014a4
 8000dc0:	40014400 	.word	0x40014400
 8000dc4:	200014a5 	.word	0x200014a5
 8000dc8:	40014800 	.word	0x40014800
 8000dcc:	200014a6 	.word	0x200014a6

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf(HEADER4, "Inside TradeMASTER");
 8000dd8:	4905      	ldr	r1, [pc, #20]	; (8000df0 <Error_Handler+0x20>)
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <Error_Handler+0x24>)
 8000ddc:	f003 ffa2 	bl	8004d24 <siprintf>
	  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	2210      	movs	r2, #16
 8000de4:	4903      	ldr	r1, [pc, #12]	; (8000df4 <Error_Handler+0x24>)
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <Error_Handler+0x28>)
 8000de8:	f001 fe7b 	bl	8002ae2 <HAL_UART_Transmit>
  {
 8000dec:	e7f4      	b.n	8000dd8 <Error_Handler+0x8>
 8000dee:	bf00      	nop
 8000df0:	080056a0 	.word	0x080056a0
 8000df4:	20001494 	.word	0x20001494
 8000df8:	2000142c 	.word	0x2000142c

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2a      	ldr	r2, [pc, #168]	; (8000f04 <HAL_TIM_Base_MspInit+0xb8>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d116      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0320 	and.w	r3, r3, #32
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2037      	movs	r0, #55	; 0x37
 8000e80:	f000 fab6 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e84:	2037      	movs	r0, #55	; 0x37
 8000e86:	f000 facf 	bl	8001428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000e8a:	e036      	b.n	8000efa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_TIM_Base_MspInit+0xc0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d116      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a1a      	ldr	r2, [pc, #104]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f000 fa9a 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ebc:	2019      	movs	r0, #25
 8000ebe:	f000 fab3 	bl	8001428 <HAL_NVIC_EnableIRQ>
}
 8000ec2:	e01a      	b.n	8000efa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <HAL_TIM_Base_MspInit+0xc4>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d115      	bne.n	8000efa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0xbc>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	201a      	movs	r0, #26
 8000ef0:	f000 fa7e 	bl	80013f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ef4:	201a      	movs	r0, #26
 8000ef6:	f000 fa97 	bl	8001428 <HAL_NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40001400 	.word	0x40001400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40014400 	.word	0x40014400
 8000f10:	40014800 	.word	0x40014800

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <HAL_UART_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_UART_MspInit+0x88>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6e:	230c      	movs	r3, #12
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_UART_MspInit+0x8c>)
 8000f8a:	f000 fa5b 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_InitTick+0xe4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a32      	ldr	r2, [pc, #200]	; (8001088 <HAL_InitTick+0xe4>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b30      	ldr	r3, [pc, #192]	; (8001088 <HAL_InitTick+0xe4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 0310 	and.w	r3, r3, #16
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd0:	f107 0210 	add.w	r2, r7, #16
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fd14 	bl	8001a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fea:	f000 fce5 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8000fee:	6378      	str	r0, [r7, #52]	; 0x34
 8000ff0:	e004      	b.n	8000ffc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ff2:	f000 fce1 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffe:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_InitTick+0xe8>)
 8001000:	fba2 2303 	umull	r2, r3, r2, r3
 8001004:	0c9b      	lsrs	r3, r3, #18
 8001006:	3b01      	subs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <HAL_InitTick+0xec>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <HAL_InitTick+0xf0>)
 800100e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HAL_InitTick+0xec>)
 8001012:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001016:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_InitTick+0xec>)
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_InitTick+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <HAL_InitTick+0xec>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_InitTick+0xec>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001030:	4817      	ldr	r0, [pc, #92]	; (8001090 <HAL_InitTick+0xec>)
 8001032:	f001 f9e9 	bl	8002408 <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800103c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001040:	2b00      	cmp	r3, #0
 8001042:	d11b      	bne.n	800107c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001044:	4812      	ldr	r0, [pc, #72]	; (8001090 <HAL_InitTick+0xec>)
 8001046:	f001 fa2f 	bl	80024a8 <HAL_TIM_Base_Start_IT>
 800104a:	4603      	mov	r3, r0
 800104c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001050:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001054:	2b00      	cmp	r3, #0
 8001056:	d111      	bne.n	800107c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001058:	2036      	movs	r0, #54	; 0x36
 800105a:	f000 f9e5 	bl	8001428 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d808      	bhi.n	8001076 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2036      	movs	r0, #54	; 0x36
 800106a:	f000 f9c1 	bl	80013f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_InitTick+0xf4>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e002      	b.n	800107c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800107c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001080:	4618      	mov	r0, r3
 8001082:	3738      	adds	r7, #56	; 0x38
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	431bde83 	.word	0x431bde83
 8001090:	200014a8 	.word	0x200014a8
 8001094:	40001000 	.word	0x40001000
 8001098:	20000004 	.word	0x20000004

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ce:	f001 fa5b 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000139c 	.word	0x2000139c

080010dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80010e2:	f001 fa51 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200013e4 	.word	0x200013e4

080010f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <TIM6_DAC_IRQHandler+0x10>)
 80010f6:	f001 fa47 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200014a8 	.word	0x200014a8

08001104 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM7_IRQHandler+0x10>)
 800110a:	f001 fa3d 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20001354 	.word	0x20001354

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f003 fdba 	bl	8004cc0 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20020000 	.word	0x20020000
 8001178:	00000400 	.word	0x00000400
 800117c:	200014f0 	.word	0x200014f0
 8001180:	20001b78 	.word	0x20001b78

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d2:	f7ff ffd7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f003 fd79 	bl	8004ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fc11 	bl	8000a00 <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011ec:	08005724 	.word	0x08005724
  ldr r2, =_sbss
 80011f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011f4:	20001b74 	.word	0x20001b74

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f8d8 	bl	80013da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	200f      	movs	r0, #15
 800122c:	f7ff feba 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fde4 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	200014f4 	.word	0x200014f4

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200014f4 	.word	0x200014f4

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff4c 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001402:	f7ff ff61 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	6978      	ldr	r0, [r7, #20]
 800140e:	f7ff ffb1 	bl	8001374 <NVIC_EncodePriority>
 8001412:	4602      	mov	r2, r0
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff80 	bl	8001320 <__NVIC_SetPriority>
}
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff54 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e165      	b.n	800172c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8154 	bne.w	8001726 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d005      	beq.n	8001496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	2b02      	cmp	r3, #2
 8001494:	d130      	bne.n	80014f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 0201 	and.w	r2, r3, #1
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b03      	cmp	r3, #3
 8001502:	d017      	beq.n	8001534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d123      	bne.n	8001588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	69b9      	ldr	r1, [r7, #24]
 8001584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80ae 	beq.w	8001726 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b5d      	ldr	r3, [pc, #372]	; (8001744 <HAL_GPIO_Init+0x300>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a5c      	ldr	r2, [pc, #368]	; (8001744 <HAL_GPIO_Init+0x300>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <HAL_GPIO_Init+0x300>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e6:	4a58      	ldr	r2, [pc, #352]	; (8001748 <HAL_GPIO_Init+0x304>)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4f      	ldr	r2, [pc, #316]	; (800174c <HAL_GPIO_Init+0x308>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x21a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4e      	ldr	r2, [pc, #312]	; (8001750 <HAL_GPIO_Init+0x30c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x216>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4d      	ldr	r2, [pc, #308]	; (8001754 <HAL_GPIO_Init+0x310>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x212>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4c      	ldr	r2, [pc, #304]	; (8001758 <HAL_GPIO_Init+0x314>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x20e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4b      	ldr	r2, [pc, #300]	; (800175c <HAL_GPIO_Init+0x318>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x20a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4a      	ldr	r2, [pc, #296]	; (8001760 <HAL_GPIO_Init+0x31c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x206>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a49      	ldr	r2, [pc, #292]	; (8001764 <HAL_GPIO_Init+0x320>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x202>
 8001642:	2306      	movs	r3, #6
 8001644:	e00c      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001646:	2307      	movs	r3, #7
 8001648:	e00a      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164a:	2305      	movs	r3, #5
 800164c:	e008      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800164e:	2304      	movs	r3, #4
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001652:	2303      	movs	r3, #3
 8001654:	e004      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 8001656:	2302      	movs	r3, #2
 8001658:	e002      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x21c>
 800165e:	2300      	movs	r3, #0
 8001660:	69fa      	ldr	r2, [r7, #28]
 8001662:	f002 0203 	and.w	r2, r2, #3
 8001666:	0092      	lsls	r2, r2, #2
 8001668:	4093      	lsls	r3, r2
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001670:	4935      	ldr	r1, [pc, #212]	; (8001748 <HAL_GPIO_Init+0x304>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <HAL_GPIO_Init+0x324>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a31      	ldr	r2, [pc, #196]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x324>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001720:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_GPIO_Init+0x324>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3301      	adds	r3, #1
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	f67f ae96 	bls.w	8001460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	3724      	adds	r7, #36	; 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40013800 	.word	0x40013800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40021000 	.word	0x40021000
 8001760:	40021400 	.word	0x40021400
 8001764:	40021800 	.word	0x40021800
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b0:	887a      	ldrh	r2, [r7, #2]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4013      	ands	r3, r2
 80017b6:	041a      	lsls	r2, r3, #16
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	400b      	ands	r3, r1
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	619a      	str	r2, [r3, #24]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0cc      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d90c      	bls.n	8001810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0b8      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d020      	beq.n	800185e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a58      	ldr	r2, [pc, #352]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	494d      	ldr	r1, [pc, #308]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d044      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d119      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e07f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e06f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e067      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4934      	ldr	r1, [pc, #208]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff fcd0 	bl	8001268 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff fccc 	bl	8001268 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04f      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d20c      	bcs.n	800191c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e032      	b.n	8001982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195a:	f000 f887 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	490a      	ldr	r1, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fb12 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	080056c8 	.word	0x080056c8
 8001998:	20000000 	.word	0x20000000
 800199c:	20000004 	.word	0x20000004

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	080056d8 	.word	0x080056d8

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffdc 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080056d8 	.word	0x080056d8

08001a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	220f      	movs	r2, #15
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0203 	and.w	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_GetClockConfig+0x5c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_RCC_GetClockConfig+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a70:	b0ae      	sub	sp, #184	; 0xb8
 8001a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a92:	4bcb      	ldr	r3, [pc, #812]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	f200 8206 	bhi.w	8001eac <HAL_RCC_GetSysClockFreq+0x440>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001add 	.word	0x08001add
 8001aac:	08001ead 	.word	0x08001ead
 8001ab0:	08001ead 	.word	0x08001ead
 8001ab4:	08001ead 	.word	0x08001ead
 8001ab8:	08001ae5 	.word	0x08001ae5
 8001abc:	08001ead 	.word	0x08001ead
 8001ac0:	08001ead 	.word	0x08001ead
 8001ac4:	08001ead 	.word	0x08001ead
 8001ac8:	08001aed 	.word	0x08001aed
 8001acc:	08001ead 	.word	0x08001ead
 8001ad0:	08001ead 	.word	0x08001ead
 8001ad4:	08001ead 	.word	0x08001ead
 8001ad8:	08001cdd 	.word	0x08001cdd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4bb9      	ldr	r3, [pc, #740]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ae2:	e1e7      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae4:	4bb8      	ldr	r3, [pc, #736]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aea:	e1e3      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4bb4      	ldr	r3, [pc, #720]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af8:	4bb1      	ldr	r3, [pc, #708]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d071      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b04:	4bae      	ldr	r3, [pc, #696]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b10:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	462b      	mov	r3, r5
 8001b2e:	f04f 0000 	mov.w	r0, #0
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	0159      	lsls	r1, r3, #5
 8001b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b3c:	0150      	lsls	r0, r2, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4621      	mov	r1, r4
 8001b44:	1a51      	subs	r1, r2, r1
 8001b46:	6439      	str	r1, [r7, #64]	; 0x40
 8001b48:	4629      	mov	r1, r5
 8001b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	018b      	lsls	r3, r1, #6
 8001b60:	4641      	mov	r1, r8
 8001b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b66:	4641      	mov	r1, r8
 8001b68:	018a      	lsls	r2, r1, #6
 8001b6a:	4641      	mov	r1, r8
 8001b6c:	1a51      	subs	r1, r2, r1
 8001b6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001b70:	4649      	mov	r1, r9
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001b84:	4649      	mov	r1, r9
 8001b86:	00cb      	lsls	r3, r1, #3
 8001b88:	4641      	mov	r1, r8
 8001b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b8e:	4641      	mov	r1, r8
 8001b90:	00ca      	lsls	r2, r1, #3
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	4622      	mov	r2, r4
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	eb42 0303 	adc.w	r3, r2, r3
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	024b      	lsls	r3, r1, #9
 8001bb8:	4621      	mov	r1, r4
 8001bba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	024a      	lsls	r2, r1, #9
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001bd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001bd8:	f7fe fc8a 	bl	80004f0 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001be6:	e067      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	099b      	lsrs	r3, r3, #6
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bf4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c02:	2300      	movs	r3, #0
 8001c04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	f04f 0000 	mov.w	r0, #0
 8001c12:	f04f 0100 	mov.w	r1, #0
 8001c16:	0159      	lsls	r1, r3, #5
 8001c18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c1c:	0150      	lsls	r0, r2, #5
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4621      	mov	r1, r4
 8001c24:	1a51      	subs	r1, r2, r1
 8001c26:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	018b      	lsls	r3, r1, #6
 8001c40:	4641      	mov	r1, r8
 8001c42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c46:	4641      	mov	r1, r8
 8001c48:	018a      	lsls	r2, r1, #6
 8001c4a:	4641      	mov	r1, r8
 8001c4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c50:	4649      	mov	r1, r9
 8001c52:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c6a:	4692      	mov	sl, r2
 8001c6c:	469b      	mov	fp, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	eb1a 0303 	adds.w	r3, sl, r3
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	462b      	mov	r3, r5
 8001c78:	eb4b 0303 	adc.w	r3, fp, r3
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ca4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ca6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001caa:	f7fe fc21 	bl	80004f0 <__aeabi_uldivmod>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cb8:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cda:	e0eb      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d06b      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d06:	663b      	str	r3, [r7, #96]	; 0x60
 8001d08:	2300      	movs	r3, #0
 8001d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d10:	4622      	mov	r2, r4
 8001d12:	462b      	mov	r3, r5
 8001d14:	f04f 0000 	mov.w	r0, #0
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	0159      	lsls	r1, r3, #5
 8001d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d22:	0150      	lsls	r0, r2, #5
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4621      	mov	r1, r4
 8001d2a:	1a51      	subs	r1, r2, r1
 8001d2c:	61b9      	str	r1, [r7, #24]
 8001d2e:	4629      	mov	r1, r5
 8001d30:	eb63 0301 	sbc.w	r3, r3, r1
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d42:	4659      	mov	r1, fp
 8001d44:	018b      	lsls	r3, r1, #6
 8001d46:	4651      	mov	r1, sl
 8001d48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	018a      	lsls	r2, r1, #6
 8001d50:	4651      	mov	r1, sl
 8001d52:	ebb2 0801 	subs.w	r8, r2, r1
 8001d56:	4659      	mov	r1, fp
 8001d58:	eb63 0901 	sbc.w	r9, r3, r1
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d70:	4690      	mov	r8, r2
 8001d72:	4699      	mov	r9, r3
 8001d74:	4623      	mov	r3, r4
 8001d76:	eb18 0303 	adds.w	r3, r8, r3
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	462b      	mov	r3, r5
 8001d7e:	eb49 0303 	adc.w	r3, r9, r3
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d90:	4629      	mov	r1, r5
 8001d92:	024b      	lsls	r3, r1, #9
 8001d94:	4621      	mov	r1, r4
 8001d96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	024a      	lsls	r2, r1, #9
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001da6:	2200      	movs	r2, #0
 8001da8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001daa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001dac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001db0:	f7fe fb9e 	bl	80004f0 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dbe:	e065      	b.n	8001e8c <HAL_RCC_GetSysClockFreq+0x420>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8001dde:	2300      	movs	r3, #0
 8001de0:	657b      	str	r3, [r7, #84]	; 0x54
 8001de2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001de6:	4642      	mov	r2, r8
 8001de8:	464b      	mov	r3, r9
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	0159      	lsls	r1, r3, #5
 8001df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df8:	0150      	lsls	r0, r2, #5
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4641      	mov	r1, r8
 8001e00:	1a51      	subs	r1, r2, r1
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	4649      	mov	r1, r9
 8001e06:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e18:	4659      	mov	r1, fp
 8001e1a:	018b      	lsls	r3, r1, #6
 8001e1c:	4651      	mov	r1, sl
 8001e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e22:	4651      	mov	r1, sl
 8001e24:	018a      	lsls	r2, r1, #6
 8001e26:	4651      	mov	r1, sl
 8001e28:	1a54      	subs	r4, r2, r1
 8001e2a:	4659      	mov	r1, fp
 8001e2c:	eb63 0501 	sbc.w	r5, r3, r1
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	00eb      	lsls	r3, r5, #3
 8001e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e3e:	00e2      	lsls	r2, r4, #3
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	4643      	mov	r3, r8
 8001e46:	18e3      	adds	r3, r4, r3
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	eb45 0303 	adc.w	r3, r5, r3
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e5e:	4629      	mov	r1, r5
 8001e60:	028b      	lsls	r3, r1, #10
 8001e62:	4621      	mov	r1, r4
 8001e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e68:	4621      	mov	r1, r4
 8001e6a:	028a      	lsls	r2, r1, #10
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e74:	2200      	movs	r2, #0
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e7e:	f7fe fb37 	bl	80004f0 <__aeabi_uldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4613      	mov	r3, r2
 8001e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0f1b      	lsrs	r3, r3, #28
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eaa:	e003      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001eb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	37b8      	adds	r7, #184	; 0xb8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	00f42400 	.word	0x00f42400

08001ecc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e28d      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8083 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001eec:	4b94      	ldr	r3, [pc, #592]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d019      	beq.n	8001f2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ef8:	4b91      	ldr	r3, [pc, #580]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f04:	4b8e      	ldr	r3, [pc, #568]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f10:	d00c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b8b      	ldr	r3, [pc, #556]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d112      	bne.n	8001f44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b88      	ldr	r3, [pc, #544]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4b84      	ldr	r3, [pc, #528]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x124>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d157      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e25a      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x90>
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7b      	ldr	r2, [pc, #492]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xcc>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xb4>
 8001f66:	4b76      	ldr	r3, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b73      	ldr	r3, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a72      	ldr	r2, [pc, #456]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xcc>
 8001f80:	4b6f      	ldr	r3, [pc, #444]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6e      	ldr	r2, [pc, #440]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6b      	ldr	r2, [pc, #428]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f962 	bl	8001268 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f95e 	bl	8001268 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e21f      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xdc>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f94e 	bl	8001268 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f94a 	bl	8001268 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e20b      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x104>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d06f      	beq.n	80020de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ffe:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d017      	beq.n	800203a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800200a:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x186>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1d3      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4937      	ldr	r1, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e03a      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b34      	ldr	r3, [pc, #208]	; (8002144 <HAL_RCC_OscConfig+0x278>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff f8f7 	bl	8001268 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff f8f3 	bl	8001268 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e1b4      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4925      	ldr	r1, [pc, #148]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e015      	b.n	80020de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <HAL_RCC_OscConfig+0x278>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8d6 	bl	8001268 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff f8d2 	bl	8001268 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e193      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d036      	beq.n	8002158 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f8b6 	bl	8001268 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002100:	f7ff f8b2 	bl	8001268 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e173      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x234>
 800211e:	e01b      	b.n	8002158 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_RCC_OscConfig+0x27c>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7ff f89f 	bl	8001268 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212c:	e00e      	b.n	800214c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff f89b 	bl	8001268 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d907      	bls.n	800214c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e15c      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
 8002140:	40023800 	.word	0x40023800
 8002144:	42470000 	.word	0x42470000
 8002148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b8a      	ldr	r3, [pc, #552]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ea      	bne.n	800212e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 8097 	beq.w	8002294 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216a:	4b83      	ldr	r3, [pc, #524]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10f      	bne.n	8002196 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a7e      	ldr	r2, [pc, #504]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002192:	2301      	movs	r3, #1
 8002194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b79      	ldr	r3, [pc, #484]	; (800237c <HAL_RCC_OscConfig+0x4b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	; (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7ff f85b 	bl	8001268 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7ff f857 	bl	8001268 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e118      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6c      	ldr	r3, [pc, #432]	; (800237c <HAL_RCC_OscConfig+0x4b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x31e>
 80021dc:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	; 0x70
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x358>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x340>
 80021f2:	4b61      	ldr	r3, [pc, #388]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	4a60      	ldr	r2, [pc, #384]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6713      	str	r3, [r2, #112]	; 0x70
 80021fe:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x358>
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a59      	ldr	r2, [pc, #356]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	4b57      	ldr	r3, [pc, #348]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800221e:	f023 0304 	bic.w	r3, r3, #4
 8002222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d015      	beq.n	8002258 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff f81c 	bl	8001268 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7ff f818 	bl	8001268 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0d7      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ee      	beq.n	8002234 <HAL_RCC_OscConfig+0x368>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f806 	bl	8001268 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff f802 	bl	8001268 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0c1      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ee      	bne.n	8002260 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800228e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ad 	beq.w	80023f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d060      	beq.n	800236c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d145      	bne.n	800233e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_RCC_OscConfig+0x4b4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffd6 	bl	8001268 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe ffd2 	bl	8001268 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e093      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	041b      	lsls	r3, r3, #16
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	491b      	ldr	r1, [pc, #108]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x4b4>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe ffa7 	bl	8001268 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe ffa3 	bl	8001268 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e064      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x452>
 800233c:	e05c      	b.n	80023f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x4b4>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ff90 	bl	8001268 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe ff8c 	bl	8001268 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04d      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_OscConfig+0x4ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x480>
 800236a:	e045      	b.n	80023f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e040      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_RCC_OscConfig+0x538>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d030      	beq.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d129      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d122      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	4293      	cmp	r3, r2
 80023be:	d119      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	085b      	lsrs	r3, r3, #1
 80023cc:	3b01      	subs	r3, #1
 80023ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d10f      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d107      	bne.n	80023f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e041      	b.n	800249e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fd0c 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 f9ce 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d001      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e04e      	b.n	800255e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_TIM_Base_Start_IT+0xc4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d01d      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_TIM_Base_Start_IT+0xc8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d018      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <HAL_TIM_Base_Start_IT+0xcc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <HAL_TIM_Base_Start_IT+0xd0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_TIM_Base_Start_IT+0xd4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_TIM_Base_Start_IT+0xd8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x80>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <HAL_TIM_Base_Start_IT+0xdc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b06      	cmp	r3, #6
 8002538:	d010      	beq.n	800255c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	e007      	b.n	800255c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40010000 	.word	0x40010000
 8002570:	40000400 	.word	0x40000400
 8002574:	40000800 	.word	0x40000800
 8002578:	40000c00 	.word	0x40000c00
 800257c:	40010400 	.word	0x40010400
 8002580:	40014000 	.word	0x40014000
 8002584:	40001800 	.word	0x40001800

08002588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f8ee 	bl	80027ac <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8e0 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f8f1 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8c4 	bl	80027ac <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f8b6 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8c7 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b08      	cmp	r3, #8
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0208 	mvn.w	r2, #8
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2204      	movs	r2, #4
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f89a 	bl	80027ac <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f88c 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f89d 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b10      	cmp	r3, #16
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0210 	mvn.w	r2, #16
 80026b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2208      	movs	r2, #8
 80026b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f870 	bl	80027ac <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f862 	bl	8002798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f873 	bl	80027c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0201 	mvn.w	r2, #1
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe fb2a 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b80      	cmp	r3, #128	; 0x80
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f97e 	bl	8002a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d107      	bne.n	8002764 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800275c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f838 	bl	80027d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b20      	cmp	r3, #32
 8002770:	d10e      	bne.n	8002790 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d107      	bne.n	8002790 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0220 	mvn.w	r2, #32
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f948 	bl	8002a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <TIM_Base_SetConfig+0x114>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d00f      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <TIM_Base_SetConfig+0x118>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <TIM_Base_SetConfig+0x120>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <TIM_Base_SetConfig+0x124>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <TIM_Base_SetConfig+0x114>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d027      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <TIM_Base_SetConfig+0x118>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d023      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01f      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <TIM_Base_SetConfig+0x120>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <TIM_Base_SetConfig+0x124>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d017      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_Base_SetConfig+0x128>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a27      	ldr	r2, [pc, #156]	; (8002914 <TIM_Base_SetConfig+0x12c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <TIM_Base_SetConfig+0x130>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_Base_SetConfig+0x134>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a24      	ldr	r2, [pc, #144]	; (8002920 <TIM_Base_SetConfig+0x138>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a23      	ldr	r2, [pc, #140]	; (8002924 <TIM_Base_SetConfig+0x13c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <TIM_Base_SetConfig+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0xf8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0c      	ldr	r2, [pc, #48]	; (800290c <TIM_Base_SetConfig+0x124>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d103      	bne.n	80028e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	615a      	str	r2, [r3, #20]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40010400 	.word	0x40010400
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800
 800291c:	40001800 	.word	0x40001800
 8002920:	40001c00 	.word	0x40001c00
 8002924:	40002000 	.word	0x40002000

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800293c:	2302      	movs	r3, #2
 800293e:	e05a      	b.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d022      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d01d      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1b      	ldr	r2, [pc, #108]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a18      	ldr	r2, [pc, #96]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10c      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40010400 	.word	0x40010400
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	40001800 	.word	0x40001800

08002a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e03f      	b.n	8002ada <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fe fa50 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	; 0x24
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f929 	bl	8002ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ac0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08a      	sub	sp, #40	; 0x28
 8002ae6:	af02      	add	r7, sp, #8
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d17c      	bne.n	8002bfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Transmit+0x2c>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e075      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Transmit+0x3e>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e06e      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b36:	f7fe fb97 	bl	8001268 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b50:	d108      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	e003      	b.n	8002b6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b74:	e02a      	b.n	8002bcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f840 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e036      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10b      	bne.n	8002bae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3302      	adds	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
 8002bac:	e007      	b.n	8002bbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1cf      	bne.n	8002b76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2140      	movs	r1, #64	; 0x40
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f810 	bl	8002c06 <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e006      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b090      	sub	sp, #64	; 0x40
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	e050      	b.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d04c      	beq.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c26:	f7fe fb1f 	bl	8001268 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d241      	bcs.n	8002cba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	330c      	adds	r3, #12
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	e853 3f00 	ldrex	r3, [r3]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c56:	637a      	str	r2, [r7, #52]	; 0x34
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e5      	bne.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3314      	adds	r3, #20
 8002c70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	613b      	str	r3, [r7, #16]
   return(result);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8a:	623a      	str	r2, [r7, #32]
 8002c8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	69f9      	ldr	r1, [r7, #28]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e00f      	b.n	8002cda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d09f      	beq.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3740      	adds	r7, #64	; 0x40
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce8:	b0c0      	sub	sp, #256	; 0x100
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d00:	68d9      	ldr	r1, [r3, #12]
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	ea40 0301 	orr.w	r3, r0, r1
 8002d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d3c:	f021 010c 	bic.w	r1, r1, #12
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	6999      	ldr	r1, [r3, #24]
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	ea40 0301 	orr.w	r3, r0, r1
 8002d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <UART_SetConfig+0x2cc>)
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d005      	beq.n	8002d84 <UART_SetConfig+0xa0>
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b8d      	ldr	r3, [pc, #564]	; (8002fb4 <UART_SetConfig+0x2d0>)
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d104      	bne.n	8002d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe fe2c 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d8c:	e003      	b.n	8002d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d8e:	f7fe fe13 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8002d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da0:	f040 810c 	bne.w	8002fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da8:	2200      	movs	r2, #0
 8002daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002db6:	4622      	mov	r2, r4
 8002db8:	462b      	mov	r3, r5
 8002dba:	1891      	adds	r1, r2, r2
 8002dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	eb12 0801 	adds.w	r8, r2, r1
 8002dcc:	4629      	mov	r1, r5
 8002dce:	eb43 0901 	adc.w	r9, r3, r1
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de6:	4690      	mov	r8, r2
 8002de8:	4699      	mov	r9, r3
 8002dea:	4623      	mov	r3, r4
 8002dec:	eb18 0303 	adds.w	r3, r8, r3
 8002df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002df4:	462b      	mov	r3, r5
 8002df6:	eb49 0303 	adc.w	r3, r9, r3
 8002dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e12:	460b      	mov	r3, r1
 8002e14:	18db      	adds	r3, r3, r3
 8002e16:	653b      	str	r3, [r7, #80]	; 0x50
 8002e18:	4613      	mov	r3, r2
 8002e1a:	eb42 0303 	adc.w	r3, r2, r3
 8002e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e28:	f7fd fb62 	bl	80004f0 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002e32:	fba3 2302 	umull	r2, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	011c      	lsls	r4, r3, #4
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e54:	415b      	adcs	r3, r3
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002e62:	4649      	mov	r1, r9
 8002e64:	eb43 0b01 	adc.w	fp, r3, r1
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7c:	4692      	mov	sl, r2
 8002e7e:	469b      	mov	fp, r3
 8002e80:	4643      	mov	r3, r8
 8002e82:	eb1a 0303 	adds.w	r3, sl, r3
 8002e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	18db      	adds	r3, r3, r3
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	4613      	mov	r3, r2
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ebe:	f7fd fb17 	bl	80004f0 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002eca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2264      	movs	r2, #100	; 0x64
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	1acb      	subs	r3, r1, r3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eec:	441c      	add	r4, r3
 8002eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	1891      	adds	r1, r2, r2
 8002f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f08:	415b      	adcs	r3, r3
 8002f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f10:	4641      	mov	r1, r8
 8002f12:	1851      	adds	r1, r2, r1
 8002f14:	6339      	str	r1, [r7, #48]	; 0x30
 8002f16:	4649      	mov	r1, r9
 8002f18:	414b      	adcs	r3, r1
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f28:	4659      	mov	r1, fp
 8002f2a:	00cb      	lsls	r3, r1, #3
 8002f2c:	4651      	mov	r1, sl
 8002f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f32:	4651      	mov	r1, sl
 8002f34:	00ca      	lsls	r2, r1, #3
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f44:	464b      	mov	r3, r9
 8002f46:	460a      	mov	r2, r1
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f64:	460b      	mov	r3, r1
 8002f66:	18db      	adds	r3, r3, r3
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f7a:	f7fd fab9 	bl	80004f0 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x2d4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 0207 	and.w	r2, r3, #7
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4422      	add	r2, r4
 8002faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fac:	e105      	b.n	80031ba <UART_SetConfig+0x4d6>
 8002fae:	bf00      	nop
 8002fb0:	40011000 	.word	0x40011000
 8002fb4:	40011400 	.word	0x40011400
 8002fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fce:	4642      	mov	r2, r8
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	1891      	adds	r1, r2, r2
 8002fd4:	6239      	str	r1, [r7, #32]
 8002fd6:	415b      	adcs	r3, r3
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fde:	4641      	mov	r1, r8
 8002fe0:	1854      	adds	r4, r2, r1
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	eb43 0501 	adc.w	r5, r3, r1
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	00eb      	lsls	r3, r5, #3
 8002ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ff6:	00e2      	lsls	r2, r4, #3
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	18e3      	adds	r3, r4, r3
 8003000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003004:	464b      	mov	r3, r9
 8003006:	eb45 0303 	adc.w	r3, r5, r3
 800300a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800301a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800302a:	4629      	mov	r1, r5
 800302c:	008b      	lsls	r3, r1, #2
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003034:	4621      	mov	r1, r4
 8003036:	008a      	lsls	r2, r1, #2
 8003038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800303c:	f7fd fa58 	bl	80004f0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003046:	fba3 2302 	umull	r2, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	011c      	lsls	r4, r3, #4
 800304e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003052:	2200      	movs	r2, #0
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800305c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003060:	4642      	mov	r2, r8
 8003062:	464b      	mov	r3, r9
 8003064:	1891      	adds	r1, r2, r2
 8003066:	61b9      	str	r1, [r7, #24]
 8003068:	415b      	adcs	r3, r3
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	4641      	mov	r1, r8
 8003072:	1851      	adds	r1, r2, r1
 8003074:	6139      	str	r1, [r7, #16]
 8003076:	4649      	mov	r1, r9
 8003078:	414b      	adcs	r3, r1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003088:	4659      	mov	r1, fp
 800308a:	00cb      	lsls	r3, r1, #3
 800308c:	4651      	mov	r1, sl
 800308e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003092:	4651      	mov	r1, sl
 8003094:	00ca      	lsls	r2, r1, #3
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	4603      	mov	r3, r0
 800309c:	4642      	mov	r2, r8
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030c8:	4649      	mov	r1, r9
 80030ca:	008b      	lsls	r3, r1, #2
 80030cc:	4641      	mov	r1, r8
 80030ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d2:	4641      	mov	r1, r8
 80030d4:	008a      	lsls	r2, r1, #2
 80030d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030da:	f7fd fa09 	bl	80004f0 <__aeabi_uldivmod>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030e4:	fba3 1302 	umull	r1, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	2164      	movs	r1, #100	; 0x64
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	3332      	adds	r3, #50	; 0x32
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <UART_SetConfig+0x4e4>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003102:	441c      	add	r4, r3
 8003104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003108:	2200      	movs	r2, #0
 800310a:	673b      	str	r3, [r7, #112]	; 0x70
 800310c:	677a      	str	r2, [r7, #116]	; 0x74
 800310e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	415b      	adcs	r3, r3
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003122:	4641      	mov	r1, r8
 8003124:	1851      	adds	r1, r2, r1
 8003126:	6039      	str	r1, [r7, #0]
 8003128:	4649      	mov	r1, r9
 800312a:	414b      	adcs	r3, r1
 800312c:	607b      	str	r3, [r7, #4]
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800313a:	4659      	mov	r1, fp
 800313c:	00cb      	lsls	r3, r1, #3
 800313e:	4651      	mov	r1, sl
 8003140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003144:	4651      	mov	r1, sl
 8003146:	00ca      	lsls	r2, r1, #3
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	4603      	mov	r3, r0
 800314e:	4642      	mov	r2, r8
 8003150:	189b      	adds	r3, r3, r2
 8003152:	66bb      	str	r3, [r7, #104]	; 0x68
 8003154:	464b      	mov	r3, r9
 8003156:	460a      	mov	r2, r1
 8003158:	eb42 0303 	adc.w	r3, r2, r3
 800315c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	663b      	str	r3, [r7, #96]	; 0x60
 8003168:	667a      	str	r2, [r7, #100]	; 0x64
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003176:	4649      	mov	r1, r9
 8003178:	008b      	lsls	r3, r1, #2
 800317a:	4641      	mov	r1, r8
 800317c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003180:	4641      	mov	r1, r8
 8003182:	008a      	lsls	r2, r1, #2
 8003184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003188:	f7fd f9b2 	bl	80004f0 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <UART_SetConfig+0x4e4>)
 8003192:	fba3 1302 	umull	r1, r3, r3, r2
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2164      	movs	r1, #100	; 0x64
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	; 0x32
 80031a4:	4a08      	ldr	r2, [pc, #32]	; (80031c8 <UART_SetConfig+0x4e4>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 020f 	and.w	r2, r3, #15
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4422      	add	r2, r4
 80031b8:	609a      	str	r2, [r3, #8]
}
 80031ba:	bf00      	nop
 80031bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031c0:	46bd      	mov	sp, r7
 80031c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c6:	bf00      	nop
 80031c8:	51eb851f 	.word	0x51eb851f

080031cc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b096      	sub	sp, #88	; 0x58
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80031da:	2234      	movs	r2, #52	; 0x34
 80031dc:	2100      	movs	r1, #0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f001 fd98 	bl	8004d14 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f023 0303 	bic.w	r3, r3, #3
 80031ea:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1a3 0208 	sub.w	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2202      	movs	r2, #2
 8003218:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	4413      	add	r3, r2
 8003224:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3b04      	subs	r3, #4
 800322a:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  temp_ptr;
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003238:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3b04      	subs	r3, #4
 800323e:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800324e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003250:	643b      	str	r3, [r7, #64]	; 0x40
    *block_indirect_ptr =  block_ptr;
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003256:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3304      	adds	r3, #4
 8003260:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	63fb      	str	r3, [r7, #60]	; 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8003266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003268:	4a5d      	ldr	r2, [pc, #372]	; (80033e0 <_tx_byte_pool_create+0x214>)
 800326a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return(posture);
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800327a:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800327c:	b672      	cpsid	i
#endif
    return(int_posture);
 800327e:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <_tx_byte_pool_create+0x218>)
 8003286:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003288:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <_tx_byte_pool_create+0x21c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003290:	4a56      	ldr	r2, [pc, #344]	; (80033ec <_tx_byte_pool_create+0x220>)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	e011      	b.n	80032c8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80032a4:	4b51      	ldr	r3, [pc, #324]	; (80033ec <_tx_byte_pool_create+0x220>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	637b      	str	r3, [r7, #52]	; 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80032b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <_tx_byte_pool_create+0x21c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <_tx_byte_pool_create+0x21c>)
 80032d0:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	2008      	movs	r0, #8
 80032de:	f001 fa71 	bl	80047c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <_tx_byte_pool_create+0x224>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06c      	beq.n	80033c8 <_tx_byte_pool_create+0x1fc>
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <_tx_byte_pool_create+0x228>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d066      	beq.n	80033c8 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80032fa:	f3ef 8305 	mrs	r3, IPSR
 80032fe:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <_tx_byte_pool_create+0x22c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
 800330a:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <_tx_byte_pool_create+0x230>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <_tx_byte_pool_create+0x162>
 8003316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	041a      	lsls	r2, r3, #16
 8003322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003324:	4313      	orrs	r3, r2
 8003326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	e00e      	b.n	800334c <_tx_byte_pool_create+0x180>
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003334:	d205      	bcs.n	8003342 <_tx_byte_pool_create+0x176>
 8003336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800333a:	f04f 33ff 	mov.w	r3, #4294967295
 800333e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003340:	e004      	b.n	800334c <_tx_byte_pool_create+0x180>
 8003342:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48
 8003348:	2300      	movs	r3, #0
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2215      	movs	r2, #21
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	4b28      	ldr	r3, [pc, #160]	; (8003400 <_tx_byte_pool_create+0x234>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	611a      	str	r2, [r3, #16]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	615a      	str	r2, [r3, #20]
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	619a      	str	r2, [r3, #24]
 8003378:	f107 0214 	add.w	r2, r7, #20
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	61da      	str	r2, [r3, #28]
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	3320      	adds	r3, #32
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <_tx_byte_pool_create+0x238>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d314      	bcc.n	80033ba <_tx_byte_pool_create+0x1ee>
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <_tx_byte_pool_create+0x23c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <_tx_byte_pool_create+0x224>)
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <_tx_byte_pool_create+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	621a      	str	r2, [r3, #32]
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <_tx_byte_pool_create+0x244>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <_tx_byte_pool_create+0x1fc>
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <_tx_byte_pool_create+0x244>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	; (800340c <_tx_byte_pool_create+0x240>)
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
 80033b8:	e006      	b.n	80033c8 <_tx_byte_pool_create+0x1fc>
 80033ba:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <_tx_byte_pool_create+0x224>)
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <_tx_byte_pool_create+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c6:	621a      	str	r2, [r3, #32]
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3750      	adds	r7, #80	; 0x50
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	ffffeeee 	.word	0xffffeeee
 80033e4:	42595445 	.word	0x42595445
 80033e8:	20001524 	.word	0x20001524
 80033ec:	20001520 	.word	0x20001520
 80033f0:	20001b4c 	.word	0x20001b4c
 80033f4:	20001b50 	.word	0x20001b50
 80033f8:	2000000c 	.word	0x2000000c
 80033fc:	20001530 	.word	0x20001530
 8003400:	e0001004 	.word	0xe0001004
 8003404:	20001b48 	.word	0x20001b48
 8003408:	20001b44 	.word	0x20001b44
 800340c:	20001b38 	.word	0x20001b38
 8003410:	20001b54 	.word	0x20001b54

08003414 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8003418:	f001 f9ae 	bl	8004778 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800341c:	f000 f9ec 	bl	80037f8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8003420:	f000 ff96 	bl	8004350 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <_tx_initialize_high_level+0x5c>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <_tx_initialize_high_level+0x60>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <_tx_initialize_high_level+0x64>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <_tx_initialize_high_level+0x68>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <_tx_initialize_high_level+0x6c>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <_tx_initialize_high_level+0x70>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <_tx_initialize_high_level+0x74>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <_tx_initialize_high_level+0x78>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <_tx_initialize_high_level+0x7c>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <_tx_initialize_high_level+0x80>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <_tx_initialize_high_level+0x84>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <_tx_initialize_high_level+0x88>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
#endif
}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200014f8 	.word	0x200014f8
 8003474:	200014fc 	.word	0x200014fc
 8003478:	20001500 	.word	0x20001500
 800347c:	20001504 	.word	0x20001504
 8003480:	20001508 	.word	0x20001508
 8003484:	2000150c 	.word	0x2000150c
 8003488:	20001518 	.word	0x20001518
 800348c:	2000151c 	.word	0x2000151c
 8003490:	20001520 	.word	0x20001520
 8003494:	20001524 	.word	0x20001524
 8003498:	20001510 	.word	0x20001510
 800349c:	20001514 	.word	0x20001514

080034a0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <_tx_initialize_kernel_enter+0x48>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80034ac:	d00c      	beq.n	80034c8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <_tx_initialize_kernel_enter+0x48>)
 80034b0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80034b4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80034b6:	f7fc feab 	bl	8000210 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80034ba:	f7ff ffab 	bl	8003414 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <_tx_initialize_kernel_enter+0x4c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	4a09      	ldr	r2, [pc, #36]	; (80034ec <_tx_initialize_kernel_enter+0x4c>)
 80034c6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <_tx_initialize_kernel_enter+0x48>)
 80034ca:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80034ce:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <_tx_initialize_kernel_enter+0x50>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f98d 	bl	80007f4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80034da:	4b03      	ldr	r3, [pc, #12]	; (80034e8 <_tx_initialize_kernel_enter+0x48>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80034e0:	f7fc fed6 	bl	8000290 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2000000c 	.word	0x2000000c
 80034ec:	200015c8 	.word	0x200015c8
 80034f0:	20001528 	.word	0x20001528

080034f4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b09a      	sub	sp, #104	; 0x68
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8003502:	2300      	movs	r3, #0
 8003504:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8003506:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003508:	21ef      	movs	r1, #239	; 0xef
 800350a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800350c:	f001 fc02 	bl	8004d14 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8003510:	22b0      	movs	r2, #176	; 0xb0
 8003512:	2100      	movs	r1, #0
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f001 fbfd 	bl	8004d14 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003530:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003536:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003542:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800354a:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003550:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800355a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	3b01      	subs	r3, #1
 8003562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003564:	4413      	add	r3, r2
 8003566:	64fb      	str	r3, [r7, #76]	; 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800356c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800356e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003572:	429a      	cmp	r2, r3
 8003574:	d007      	beq.n	8003586 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003584:	e006      	b.n	8003594 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800358a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003590:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2203      	movs	r2, #3
 8003598:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a86      	ldr	r2, [pc, #536]	; (80037b8 <_tx_thread_create+0x2c4>)
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80035a6:	4985      	ldr	r1, [pc, #532]	; (80037bc <_tx_thread_create+0x2c8>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7fc fed1 	bl	8000350 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80035ae:	f3ef 8310 	mrs	r3, PRIMASK
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80035b8:	b672      	cpsid	i
    return(int_posture);
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80035bc:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a7f      	ldr	r2, [pc, #508]	; (80037c0 <_tx_thread_create+0x2cc>)
 80035c2:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80035c4:	4b7f      	ldr	r3, [pc, #508]	; (80037c4 <_tx_thread_create+0x2d0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80035cc:	4a7e      	ldr	r2, [pc, #504]	; (80037c8 <_tx_thread_create+0x2d4>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80035e2:	e016      	b.n	8003612 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80035e4:	4b78      	ldr	r3, [pc, #480]	; (80037c8 <_tx_thread_create+0x2d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	647b      	str	r3, [r7, #68]	; 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 80035ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80035f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800360e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8003612:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <_tx_thread_create+0x2d0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a6a      	ldr	r2, [pc, #424]	; (80037c4 <_tx_thread_create+0x2d0>)
 800361a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 800361c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	4613      	mov	r3, r2
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	2001      	movs	r0, #1
 800362a:	f001 f8cb 	bl	80047c4 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 800362e:	4b67      	ldr	r3, [pc, #412]	; (80037cc <_tx_thread_create+0x2d8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06b      	beq.n	8003712 <_tx_thread_create+0x21e>
 800363a:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <_tx_thread_create+0x2dc>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d065      	beq.n	8003712 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003646:	f3ef 8305 	mrs	r3, IPSR
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800364c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364e:	4b61      	ldr	r3, [pc, #388]	; (80037d4 <_tx_thread_create+0x2e0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4313      	orrs	r3, r2
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
 8003656:	4b60      	ldr	r3, [pc, #384]	; (80037d8 <_tx_thread_create+0x2e4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <_tx_thread_create+0x186>
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
 8003668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	041a      	lsls	r2, r3, #16
 800366e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003670:	4313      	orrs	r3, r2
 8003672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003676:	657b      	str	r3, [r7, #84]	; 0x54
 8003678:	e00e      	b.n	8003698 <_tx_thread_create+0x1a4>
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003680:	d205      	bcs.n	800368e <_tx_thread_create+0x19a>
 8003682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003684:	657b      	str	r3, [r7, #84]	; 0x54
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	653b      	str	r3, [r7, #80]	; 0x50
 800368c:	e004      	b.n	8003698 <_tx_thread_create+0x1a4>
 800368e:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003692:	653b      	str	r3, [r7, #80]	; 0x50
 8003694:	2300      	movs	r3, #0
 8003696:	657b      	str	r3, [r7, #84]	; 0x54
 8003698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a6:	2264      	movs	r2, #100	; 0x64
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <_tx_thread_create+0x2e8>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b6:	611a      	str	r2, [r3, #16]
 80036b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036bc:	615a      	str	r2, [r3, #20]
 80036be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	619a      	str	r2, [r3, #24]
 80036c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036c8:	61da      	str	r2, [r3, #28]
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	3320      	adds	r3, #32
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <_tx_thread_create+0x2ec>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d314      	bcc.n	8003704 <_tx_thread_create+0x210>
 80036da:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <_tx_thread_create+0x2f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e0:	4a3a      	ldr	r2, [pc, #232]	; (80037cc <_tx_thread_create+0x2d8>)
 80036e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b40      	ldr	r3, [pc, #256]	; (80037e8 <_tx_thread_create+0x2f4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ec:	621a      	str	r2, [r3, #32]
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <_tx_thread_create+0x2f8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <_tx_thread_create+0x21e>
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <_tx_thread_create+0x2f8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a3b      	ldr	r2, [pc, #236]	; (80037e8 <_tx_thread_create+0x2f4>)
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	4610      	mov	r0, r2
 8003700:	4798      	blx	r3
 8003702:	e006      	b.n	8003712 <_tx_thread_create+0x21e>
 8003704:	4a31      	ldr	r2, [pc, #196]	; (80037cc <_tx_thread_create+0x2d8>)
 8003706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b37      	ldr	r3, [pc, #220]	; (80037e8 <_tx_thread_create+0x2f4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003710:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <_tx_thread_create+0x2fc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a35      	ldr	r2, [pc, #212]	; (80037f0 <_tx_thread_create+0x2fc>)
 800371a:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800371c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d129      	bne.n	8003776 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003722:	f3ef 8305 	mrs	r3, IPSR
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8003728:	6aba      	ldr	r2, [r7, #40]	; 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <_tx_thread_create+0x2e0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003734:	d30d      	bcc.n	8003752 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <_tx_thread_create+0x300>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800373c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8003742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	65bb      	str	r3, [r7, #88]	; 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8003748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003750:	e001      	b.n	8003756 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8003752:	2300      	movs	r3, #0
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f383 8810 	msr	PRIMASK, r3
}
 8003760:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f90c 	bl	8003980 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8003768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01e      	beq.n	80037ac <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800376e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003770:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003772:	63da      	str	r2, [r3, #60]	; 0x3c
 8003774:	e01a      	b.n	80037ac <_tx_thread_create+0x2b8>
 8003776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003778:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003782:	f3ef 8310 	mrs	r3, PRIMASK
 8003786:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003788:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800378a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800378c:	b672      	cpsid	i
    return(int_posture);
 800378e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8003792:	4b17      	ldr	r3, [pc, #92]	; (80037f0 <_tx_thread_create+0x2fc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3b01      	subs	r3, #1
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <_tx_thread_create+0x2fc>)
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f383 8810 	msr	PRIMASK, r3
}
 80037a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80037a8:	f000 f8b0 	bl	800390c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3760      	adds	r7, #96	; 0x60
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	08004295 	.word	0x08004295
 80037bc:	08003875 	.word	0x08003875
 80037c0:	54485244 	.word	0x54485244
 80037c4:	2000153c 	.word	0x2000153c
 80037c8:	20001538 	.word	0x20001538
 80037cc:	20001b4c 	.word	0x20001b4c
 80037d0:	20001b50 	.word	0x20001b50
 80037d4:	2000000c 	.word	0x2000000c
 80037d8:	20001530 	.word	0x20001530
 80037dc:	e0001004 	.word	0xe0001004
 80037e0:	20001b48 	.word	0x20001b48
 80037e4:	20001b44 	.word	0x20001b44
 80037e8:	20001b38 	.word	0x20001b38
 80037ec:	20001b54 	.word	0x20001b54
 80037f0:	200015c8 	.word	0x200015c8
 80037f4:	20001534 	.word	0x20001534

080037f8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <_tx_thread_initialize+0x54>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <_tx_thread_initialize+0x58>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <_tx_thread_initialize+0x5c>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <_tx_thread_initialize+0x60>)
 8003810:	2220      	movs	r2, #32
 8003812:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	2100      	movs	r1, #0
 8003818:	4810      	ldr	r0, [pc, #64]	; (800385c <_tx_thread_initialize+0x64>)
 800381a:	f001 fa7b 	bl	8004d14 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <_tx_thread_initialize+0x68>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <_tx_thread_initialize+0x6c>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_tx_thread_initialize+0x70>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <_tx_thread_initialize+0x74>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8003836:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <_tx_thread_initialize+0x78>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f043 2301 	orr.w	r3, r3, #16777472	; 0x1000100
 800383e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
    _tx_build_options =  _tx_build_options 
 8003842:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <_tx_thread_initialize+0x78>)
 8003844:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20001530 	.word	0x20001530
 8003850:	20001534 	.word	0x20001534
 8003854:	20001540 	.word	0x20001540
 8003858:	20001544 	.word	0x20001544
 800385c:	20001548 	.word	0x20001548
 8003860:	20001538 	.word	0x20001538
 8003864:	2000153c 	.word	0x2000153c
 8003868:	200015c8 	.word	0x200015c8
 800386c:	200015cc 	.word	0x200015cc
 8003870:	200015d0 	.word	0x200015d0

08003874 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <_tx_thread_shell_entry+0x8c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <_tx_thread_shell_entry+0x90>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8003894:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <_tx_thread_shell_entry+0x90>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	69f8      	ldr	r0, [r7, #28]
 800389a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800389c:	f3ef 8310 	mrs	r3, PRIMASK
 80038a0:	607b      	str	r3, [r7, #4]
    return(posture);
 80038a2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80038a4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80038a6:	b672      	cpsid	i
    return(int_posture);
 80038a8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80038aa:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2201      	movs	r2, #1
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2201      	movs	r2, #1
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2200      	movs	r2, #0
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <_tx_thread_shell_entry+0x94>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <_tx_thread_shell_entry+0x94>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80038d4:	f3ef 8314 	mrs	r3, CONTROL
 80038d8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80038da:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f383 8814 	msr	CONTROL, r3
}
 80038f0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80038f2:	69f8      	ldr	r0, [r7, #28]
 80038f4:	f000 f9fe 	bl	8003cf4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20001530 	.word	0x20001530
 8003904:	200015cc 	.word	0x200015cc
 8003908:	200015c8 	.word	0x200015c8

0800390c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800390c:	b480      	push	{r7}
 800390e:	b089      	sub	sp, #36	; 0x24
 8003910:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <_tx_thread_system_preempt_check+0x64>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d121      	bne.n	8003962 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800391e:	4b15      	ldr	r3, [pc, #84]	; (8003974 <_tx_thread_system_preempt_check+0x68>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <_tx_thread_system_preempt_check+0x6c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	429a      	cmp	r2, r3
 8003930:	d017      	beq.n	8003962 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <_tx_thread_system_preempt_check+0x70>)
 8003934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003938:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800393a:	f3ef 8305 	mrs	r3, IPSR
 800393e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003940:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10c      	bne.n	8003960 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800394c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800394e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003950:	b662      	cpsie	i
}
 8003952:	bf00      	nop
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8003960:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200015c8 	.word	0x200015c8
 8003974:	20001530 	.word	0x20001530
 8003978:	20001534 	.word	0x20001534
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b09e      	sub	sp, #120	; 0x78
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8003988:	2300      	movs	r3, #0
 800398a:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800398c:	f3ef 8310 	mrs	r3, PRIMASK
 8003990:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8003992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003996:	b672      	cpsid	i
    return(int_posture);
 8003998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	334c      	adds	r3, #76	; 0x4c
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fdaf 	bl	800450c <_tx_timer_system_deactivate>
 80039ae:	e002      	b.n	80039b6 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 80039b6:	4b8b      	ldr	r3, [pc, #556]	; (8003be4 <_tx_thread_system_resume+0x264>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80039bc:	4b89      	ldr	r3, [pc, #548]	; (8003be4 <_tx_thread_system_resume+0x264>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	663b      	str	r3, [r7, #96]	; 0x60
 80039c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d06f      	beq.n	8003aa8 <_tx_thread_system_resume+0x128>
 80039c8:	4b87      	ldr	r3, [pc, #540]	; (8003be8 <_tx_thread_system_resume+0x268>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d069      	beq.n	8003aa8 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80039d4:	f3ef 8305 	mrs	r3, IPSR
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(ipsr_value);
 80039da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039dc:	4b83      	ldr	r3, [pc, #524]	; (8003bec <_tx_thread_system_resume+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e4:	4b82      	ldr	r3, [pc, #520]	; (8003bf0 <_tx_thread_system_resume+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <_tx_thread_system_resume+0x88>
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	673b      	str	r3, [r7, #112]	; 0x70
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	041a      	lsls	r2, r3, #16
 80039fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a04:	673b      	str	r3, [r7, #112]	; 0x70
 8003a06:	e00e      	b.n	8003a26 <_tx_thread_system_resume+0xa6>
 8003a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003a0e:	d205      	bcs.n	8003a1c <_tx_thread_system_resume+0x9c>
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	673b      	str	r3, [r7, #112]	; 0x70
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a1a:	e004      	b.n	8003a26 <_tx_thread_system_resume+0xa6>
 8003a1c:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a22:	2300      	movs	r3, #0
 8003a24:	673b      	str	r3, [r7, #112]	; 0x70
 8003a26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a34:	2201      	movs	r2, #1
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	4b6e      	ldr	r3, [pc, #440]	; (8003bf4 <_tx_thread_system_resume+0x274>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a4c:	615a      	str	r2, [r3, #20]
 8003a4e:	f107 020c 	add.w	r2, r7, #12
 8003a52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a54:	619a      	str	r2, [r3, #24]
 8003a56:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <_tx_thread_system_resume+0x278>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5e:	61da      	str	r2, [r3, #28]
 8003a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a62:	3320      	adds	r3, #32
 8003a64:	663b      	str	r3, [r7, #96]	; 0x60
 8003a66:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <_tx_thread_system_resume+0x27c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d314      	bcc.n	8003a9a <_tx_thread_system_resume+0x11a>
 8003a70:	4b63      	ldr	r3, [pc, #396]	; (8003c00 <_tx_thread_system_resume+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	663b      	str	r3, [r7, #96]	; 0x60
 8003a76:	4a5b      	ldr	r2, [pc, #364]	; (8003be4 <_tx_thread_system_resume+0x264>)
 8003a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <_tx_thread_system_resume+0x284>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a82:	621a      	str	r2, [r3, #32]
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <_tx_thread_system_resume+0x288>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <_tx_thread_system_resume+0x128>
 8003a8c:	4b5e      	ldr	r3, [pc, #376]	; (8003c08 <_tx_thread_system_resume+0x288>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5c      	ldr	r2, [pc, #368]	; (8003c04 <_tx_thread_system_resume+0x284>)
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	4610      	mov	r0, r2
 8003a96:	4798      	blx	r3
 8003a98:	e006      	b.n	8003aa8 <_tx_thread_system_resume+0x128>
 8003a9a:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <_tx_thread_system_resume+0x264>)
 8003a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b58      	ldr	r3, [pc, #352]	; (8003c04 <_tx_thread_system_resume+0x284>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aa6:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8003aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8003aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	677b      	str	r3, [r7, #116]	; 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003ab4:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <_tx_thread_system_resume+0x28c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a54      	ldr	r2, [pc, #336]	; (8003c0c <_tx_thread_system_resume+0x28c>)
 8003abc:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80b3 	bne.w	8003c2e <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80c7 	beq.w	8003c60 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 80a2 	bne.w	8003c20 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	65bb      	str	r3, [r7, #88]	; 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003ae8:	4a49      	ldr	r2, [pc, #292]	; (8003c10 <_tx_thread_system_resume+0x290>)
 8003aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af0:	657b      	str	r3, [r7, #84]	; 0x54
                if (head_ptr == TX_NULL)
 8003af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d164      	bne.n	8003bc2 <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003af8:	4945      	ldr	r1, [pc, #276]	; (8003c10 <_tx_thread_system_resume+0x290>)
 8003afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <_tx_thread_system_resume+0x294>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	4a3c      	ldr	r2, [pc, #240]	; (8003c14 <_tx_thread_system_resume+0x294>)
 8003b22:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <_tx_thread_system_resume+0x298>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	f080 8098 	bcs.w	8003c60 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8003b30:	4a39      	ldr	r2, [pc, #228]	; (8003c18 <_tx_thread_system_resume+0x298>)
 8003b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b34:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <_tx_thread_system_resume+0x278>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003b42:	4a2d      	ldr	r2, [pc, #180]	; (8003bf8 <_tx_thread_system_resume+0x278>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e08a      	b.n	8003c60 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f080 8085 	bcs.w	8003c60 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8003b56:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <_tx_thread_system_resume+0x278>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003b62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d104      	bne.n	8003b76 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <_tx_thread_system_resume+0x278>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b74:	61da      	str	r2, [r3, #28]
 8003b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <_tx_thread_system_resume+0x28c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	64bb      	str	r3, [r7, #72]	; 0x48
                                if (combined_flags == ((ULONG) 0))
 8003b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 80a1 	bne.w	8003cd2 <_tx_thread_system_resume+0x352>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <_tx_thread_system_resume+0x29c>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b98:	f3ef 8305 	mrs	r3, IPSR
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
    return(ipsr_value);
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    if (__get_ipsr_value() == 0)
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 8098 	bne.w	8003cd6 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        interrupt_save = __get_interrupt_posture();
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003bb0:	b662      	cpsie	i
}
 8003bb2:	bf00      	nop
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	bf00      	nop
}
 8003bc0:	e089      	b.n	8003cd6 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8003bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bde:	621a      	str	r2, [r3, #32]
 8003be0:	e03e      	b.n	8003c60 <_tx_thread_system_resume+0x2e0>
 8003be2:	bf00      	nop
 8003be4:	20001b4c 	.word	0x20001b4c
 8003be8:	20001b50 	.word	0x20001b50
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	20001530 	.word	0x20001530
 8003bf4:	e0001004 	.word	0xe0001004
 8003bf8:	20001534 	.word	0x20001534
 8003bfc:	20001b48 	.word	0x20001b48
 8003c00:	20001b44 	.word	0x20001b44
 8003c04:	20001b38 	.word	0x20001b38
 8003c08:	20001b54 	.word	0x20001b54
 8003c0c:	200015c8 	.word	0x200015c8
 8003c10:	20001548 	.word	0x20001548
 8003c14:	20001540 	.word	0x20001540
 8003c18:	20001544 	.word	0x20001544
 8003c1c:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2203      	movs	r2, #3
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c2c:	e018      	b.n	8003c60 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d014      	beq.n	8003c60 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d010      	beq.n	8003c60 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
 8003c52:	e005      	b.n	8003c60 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 8003c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d104      	bne.n	8003c7a <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <_tx_thread_system_resume+0x364>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c78:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <_tx_thread_system_resume+0x368>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <_tx_thread_system_resume+0x364>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d022      	beq.n	8003cdc <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <_tx_thread_system_resume+0x36c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	64bb      	str	r3, [r7, #72]	; 0x48
        if (combined_flags == ((ULONG) 0))
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11c      	bne.n	8003cdc <_tx_thread_system_resume+0x35c>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <_tx_thread_system_resume+0x370>)
 8003ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003caa:	f3ef 8305 	mrs	r3, IPSR
 8003cae:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
    if (__get_ipsr_value() == 0)
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d111      	bne.n	8003cda <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cba:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8003cbe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003cc0:	b662      	cpsie	i
}
 8003cc2:	bf00      	nop
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	bf00      	nop
}
 8003cd0:	e003      	b.n	8003cda <_tx_thread_system_resume+0x35a>
                                return;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <_tx_thread_system_resume+0x35c>
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <_tx_thread_system_resume+0x35c>
 8003cda:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8003cdc:	3778      	adds	r7, #120	; 0x78
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20001534 	.word	0x20001534
 8003ce8:	20001530 	.word	0x20001530
 8003cec:	200015c8 	.word	0x200015c8
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b0a4      	sub	sp, #144	; 0x90
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003d02:	4b98      	ldr	r3, [pc, #608]	; (8003f64 <_tx_thread_system_suspend+0x270>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0e:	653b      	str	r3, [r7, #80]	; 0x50
    return(posture);
 8003d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    int_posture = __get_interrupt_posture();
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003d14:	b672      	cpsid	i
    return(int_posture);
 8003d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003d18:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d112      	bne.n	8003d4a <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8003d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8003d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d004      	beq.n	8003d42 <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	334c      	adds	r3, #76	; 0x4c
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fb83 	bl	8004448 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4a88      	ldr	r2, [pc, #544]	; (8003f68 <_tx_thread_system_suspend+0x274>)
 8003d48:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003d4a:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <_tx_thread_system_suspend+0x278>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a86      	ldr	r2, [pc, #536]	; (8003f6c <_tx_thread_system_suspend+0x278>)
 8003d52:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 817d 	bne.w	8004058 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 8003d5e:	4b84      	ldr	r3, [pc, #528]	; (8003f70 <_tx_thread_system_suspend+0x27c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	677b      	str	r3, [r7, #116]	; 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8003d64:	4b82      	ldr	r3, [pc, #520]	; (8003f70 <_tx_thread_system_suspend+0x27c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	673b      	str	r3, [r7, #112]	; 0x70
 8003d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07c      	beq.n	8003e6a <_tx_thread_system_suspend+0x176>
 8003d70:	4b80      	ldr	r3, [pc, #512]	; (8003f74 <_tx_thread_system_suspend+0x280>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d076      	beq.n	8003e6a <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003d7c:	f3ef 8305 	mrs	r3, IPSR
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8003d82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d84:	4b7c      	ldr	r3, [pc, #496]	; (8003f78 <_tx_thread_system_suspend+0x284>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <_tx_thread_system_suspend+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d110      	bne.n	8003dbc <_tx_thread_system_suspend+0xc8>
 8003d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dba:	e013      	b.n	8003de4 <_tx_thread_system_suspend+0xf0>
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003dc2:	d208      	bcs.n	8003dd6 <_tx_thread_system_suspend+0xe2>
 8003dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dd4:	e006      	b.n	8003de4 <_tx_thread_system_suspend+0xf0>
 8003dd6:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 8003dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df6:	2202      	movs	r2, #2
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <_tx_thread_system_suspend+0x288>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e06:	611a      	str	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e0e:	615a      	str	r2, [r3, #20]
 8003e10:	f107 0208 	add.w	r2, r7, #8
 8003e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e16:	619a      	str	r2, [r3, #24]
 8003e18:	4b59      	ldr	r3, [pc, #356]	; (8003f80 <_tx_thread_system_suspend+0x28c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e20:	61da      	str	r2, [r3, #28]
 8003e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e24:	3320      	adds	r3, #32
 8003e26:	673b      	str	r3, [r7, #112]	; 0x70
 8003e28:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <_tx_thread_system_suspend+0x290>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d314      	bcc.n	8003e5c <_tx_thread_system_suspend+0x168>
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <_tx_thread_system_suspend+0x294>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	673b      	str	r3, [r7, #112]	; 0x70
 8003e38:	4a4d      	ldr	r2, [pc, #308]	; (8003f70 <_tx_thread_system_suspend+0x27c>)
 8003e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <_tx_thread_system_suspend+0x298>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e44:	621a      	str	r2, [r3, #32]
 8003e46:	4b52      	ldr	r3, [pc, #328]	; (8003f90 <_tx_thread_system_suspend+0x29c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <_tx_thread_system_suspend+0x176>
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <_tx_thread_system_suspend+0x29c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a4e      	ldr	r2, [pc, #312]	; (8003f8c <_tx_thread_system_suspend+0x298>)
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	4610      	mov	r0, r2
 8003e58:	4798      	blx	r3
 8003e5a:	e006      	b.n	8003e6a <_tx_thread_system_suspend+0x176>
 8003e5c:	4a44      	ldr	r2, [pc, #272]	; (8003f70 <_tx_thread_system_suspend+0x27c>)
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <_tx_thread_system_suspend+0x298>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e68:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8003e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8003e8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d016      	beq.n	8003ec0 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8003e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ea2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <_tx_thread_system_suspend+0x2a0>)
 8003ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	f040 8085 	bne.w	8003fbe <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4937      	ldr	r1, [pc, #220]	; (8003f94 <_tx_thread_system_suspend+0x2a0>)
 8003eb8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003ebe:	e07e      	b.n	8003fbe <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a34      	ldr	r2, [pc, #208]	; (8003f94 <_tx_thread_system_suspend+0x2a0>)
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	667b      	str	r3, [r7, #100]	; 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <_tx_thread_system_suspend+0x2a4>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4013      	ands	r3, r2
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <_tx_thread_system_suspend+0x2a4>)
 8003ee0:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	663b      	str	r3, [r7, #96]	; 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <_tx_thread_system_suspend+0x2a4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d158      	bne.n	8003fa4 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <_tx_thread_system_suspend+0x2a8>)
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <_tx_thread_system_suspend+0x28c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d102      	bne.n	8003f16 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8003f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
 8003f16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1c:	f383 8810 	msr	PRIMASK, r3
}
 8003f20:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <_tx_thread_system_suspend+0x278>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	65bb      	str	r3, [r7, #88]	; 0x58
                if (combined_flags == ((ULONG) 0))
 8003f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 80bf 	bne.w	80040ae <_tx_thread_system_suspend+0x3ba>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <_tx_thread_system_suspend+0x2ac>)
 8003f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f36:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003f38:	f3ef 8305 	mrs	r3, IPSR
 8003f3c:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003f4e:	b662      	cpsie	i
}
 8003f50:	bf00      	nop
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	bf00      	nop
}
 8003f5e:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8003f60:	e0a5      	b.n	80040ae <_tx_thread_system_suspend+0x3ba>
 8003f62:	bf00      	nop
 8003f64:	20001530 	.word	0x20001530
 8003f68:	20001b34 	.word	0x20001b34
 8003f6c:	200015c8 	.word	0x200015c8
 8003f70:	20001b4c 	.word	0x20001b4c
 8003f74:	20001b50 	.word	0x20001b50
 8003f78:	2000000c 	.word	0x2000000c
 8003f7c:	e0001004 	.word	0xe0001004
 8003f80:	20001534 	.word	0x20001534
 8003f84:	20001b48 	.word	0x20001b48
 8003f88:	20001b44 	.word	0x20001b44
 8003f8c:	20001b38 	.word	0x20001b38
 8003f90:	20001b54 	.word	0x20001b54
 8003f94:	20001548 	.word	0x20001548
 8003f98:	20001540 	.word	0x20001540
 8003f9c:	20001544 	.word	0x20001544
 8003fa0:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	667b      	str	r3, [r7, #100]	; 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8003fb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a41      	ldr	r2, [pc, #260]	; (80040c0 <_tx_thread_system_suspend+0x3cc>)
 8003fbc:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003fbe:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <_tx_thread_system_suspend+0x3d0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d139      	bne.n	800403c <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003fc8:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <_tx_thread_system_suspend+0x3cc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3e      	ldr	r2, [pc, #248]	; (80040c8 <_tx_thread_system_suspend+0x3d4>)
 8003fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd2:	4a3c      	ldr	r2, [pc, #240]	; (80040c4 <_tx_thread_system_suspend+0x3d0>)
 8003fd4:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 8003fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8003fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d104      	bne.n	8003ff2 <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8003fe8:	4b36      	ldr	r3, [pc, #216]	; (80040c4 <_tx_thread_system_suspend+0x3d0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff0:	61da      	str	r2, [r3, #28]
 8003ff2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003ffe:	4b33      	ldr	r3, [pc, #204]	; (80040cc <_tx_thread_system_suspend+0x3d8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	65bb      	str	r3, [r7, #88]	; 0x58
            if (combined_flags == ((ULONG) 0))
 8004004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004006:	2b00      	cmp	r3, #0
 8004008:	d153      	bne.n	80040b2 <_tx_thread_system_suspend+0x3be>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <_tx_thread_system_suspend+0x3dc>)
 800400c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004010:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004012:	f3ef 8305 	mrs	r3, IPSR
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10c      	bne.n	8004038 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004028:	b662      	cpsie	i
}
 800402a:	bf00      	nop
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f383 8810 	msr	PRIMASK, r3
}
 8004036:	bf00      	nop
}
 8004038:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800403a:	e03a      	b.n	80040b2 <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 800403c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8004042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800404a:	429a      	cmp	r2, r3
 800404c:	d104      	bne.n	8004058 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <_tx_thread_system_suspend+0x3d0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	61da      	str	r2, [r3, #28]
 8004058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800405a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004064:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <_tx_thread_system_suspend+0x3d0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800406c:	429a      	cmp	r2, r3
 800406e:	d022      	beq.n	80040b6 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004070:	4b16      	ldr	r3, [pc, #88]	; (80040cc <_tx_thread_system_suspend+0x3d8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	65bb      	str	r3, [r7, #88]	; 0x58
        if (combined_flags == ((ULONG) 0))
 8004076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004078:	2b00      	cmp	r3, #0
 800407a:	d11c      	bne.n	80040b6 <_tx_thread_system_suspend+0x3c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <_tx_thread_system_suspend+0x3dc>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004084:	f3ef 8305 	mrs	r3, IPSR
 8004088:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800408a:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	617b      	str	r3, [r7, #20]
    return(posture);
 8004096:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004098:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800409a:	b662      	cpsie	i
}
 800409c:	bf00      	nop
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f383 8810 	msr	PRIMASK, r3
}
 80040a8:	bf00      	nop
}
 80040aa:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80040ac:	e003      	b.n	80040b6 <_tx_thread_system_suspend+0x3c2>
                return;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <_tx_thread_system_suspend+0x3c4>
            return;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <_tx_thread_system_suspend+0x3c4>
    return;
 80040b6:	bf00      	nop
}
 80040b8:	3790      	adds	r7, #144	; 0x90
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20001544 	.word	0x20001544
 80040c4:	20001534 	.word	0x20001534
 80040c8:	20001548 	.word	0x20001548
 80040cc:	200015c8 	.word	0x200015c8
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	; 0x38
 80040d8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80040da:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <_tx_thread_time_slice+0x184>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80040e0:	f3ef 8310 	mrs	r3, PRIMASK
 80040e4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80040e6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80040e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80040ea:	b672      	cpsid	i
    return(int_posture);
 80040ec:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <_tx_thread_time_slice+0x188>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d024      	beq.n	8004146 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b00      	cmp	r3, #0
 8004102:	d120      	bne.n	8004146 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69d2      	ldr	r2, [r2, #28]
 800410a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4a53      	ldr	r2, [pc, #332]	; (8004260 <_tx_thread_time_slice+0x18c>)
 8004112:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	429a      	cmp	r2, r3
 800411c:	d013      	beq.n	8004146 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	429a      	cmp	r2, r3
 8004128:	d10d      	bne.n	8004146 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	6a12      	ldr	r2, [r2, #32]
 8004132:	494c      	ldr	r1, [pc, #304]	; (8004264 <_tx_thread_time_slice+0x190>)
 8004134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004138:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <_tx_thread_time_slice+0x194>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a49      	ldr	r2, [pc, #292]	; (8004264 <_tx_thread_time_slice+0x190>)
 800413e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004142:	4a4a      	ldr	r2, [pc, #296]	; (800426c <_tx_thread_time_slice+0x198>)
 8004144:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004146:	f3ef 8305 	mrs	r3, IPSR
 800414a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800414c:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 800414e:	4b48      	ldr	r3, [pc, #288]	; (8004270 <_tx_thread_time_slice+0x19c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <_tx_thread_time_slice+0x1a0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <_tx_thread_time_slice+0x1a4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d06d      	beq.n	8004244 <_tx_thread_time_slice+0x170>
 8004168:	4b44      	ldr	r3, [pc, #272]	; (800427c <_tx_thread_time_slice+0x1a8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d067      	beq.n	8004244 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004174:	f3ef 8305 	mrs	r3, IPSR
 8004178:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <_tx_thread_time_slice+0x19c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4313      	orrs	r3, r2
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <_tx_thread_time_slice+0x184>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <_tx_thread_time_slice+0xd4>
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	041a      	lsls	r2, r3, #16
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
 80041a6:	e00e      	b.n	80041c6 <_tx_thread_time_slice+0xf2>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80041ae:	d205      	bcs.n	80041bc <_tx_thread_time_slice+0xe8>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
 80041b4:	f04f 33ff 	mov.w	r3, #4294967295
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ba:	e004      	b.n	80041c6 <_tx_thread_time_slice+0xf2>
 80041bc:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
 80041c0:	633b      	str	r3, [r7, #48]	; 0x30
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	; 0x34
 80041c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2205      	movs	r2, #5
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <_tx_thread_time_slice+0x1ac>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6a3b      	ldr	r3, [r7, #32]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	4b22      	ldr	r3, [pc, #136]	; (800426c <_tx_thread_time_slice+0x198>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f4:	619a      	str	r2, [r3, #24]
 80041f6:	1d3a      	adds	r2, r7, #4
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	61da      	str	r2, [r3, #28]
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	3320      	adds	r3, #32
 8004200:	623b      	str	r3, [r7, #32]
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <_tx_thread_time_slice+0x1b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	429a      	cmp	r2, r3
 800420a:	d314      	bcc.n	8004236 <_tx_thread_time_slice+0x162>
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <_tx_thread_time_slice+0x1b4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	623b      	str	r3, [r7, #32]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <_tx_thread_time_slice+0x1a4>)
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b1c      	ldr	r3, [pc, #112]	; (800428c <_tx_thread_time_slice+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a3a      	ldr	r2, [r7, #32]
 800421e:	621a      	str	r2, [r3, #32]
 8004220:	4b1b      	ldr	r3, [pc, #108]	; (8004290 <_tx_thread_time_slice+0x1bc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <_tx_thread_time_slice+0x170>
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <_tx_thread_time_slice+0x1bc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a17      	ldr	r2, [pc, #92]	; (800428c <_tx_thread_time_slice+0x1b8>)
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
 8004234:	e006      	b.n	8004244 <_tx_thread_time_slice+0x170>
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <_tx_thread_time_slice+0x1a4>)
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <_tx_thread_time_slice+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	621a      	str	r2, [r3, #32]
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004250:	bf00      	nop
 8004252:	3738      	adds	r7, #56	; 0x38
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20001530 	.word	0x20001530
 800425c:	200015d8 	.word	0x200015d8
 8004260:	20001b34 	.word	0x20001b34
 8004264:	20001548 	.word	0x20001548
 8004268:	20001544 	.word	0x20001544
 800426c:	20001534 	.word	0x20001534
 8004270:	2000000c 	.word	0x2000000c
 8004274:	200015c8 	.word	0x200015c8
 8004278:	20001b4c 	.word	0x20001b4c
 800427c:	20001b50 	.word	0x20001b50
 8004280:	e0001004 	.word	0xe0001004
 8004284:	20001b48 	.word	0x20001b48
 8004288:	20001b44 	.word	0x20001b44
 800428c:	20001b38 	.word	0x20001b38
 8004290:	20001b54 	.word	0x20001b54

08004294 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	; 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80042a0:	f3ef 8310 	mrs	r3, PRIMASK
 80042a4:	617b      	str	r3, [r7, #20]
    return(posture);
 80042a6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80042a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80042aa:	b672      	cpsid	i
    return(int_posture);
 80042ac:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80042ae:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d10e      	bne.n	80042d6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <_tx_thread_timeout+0x74>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <_tx_thread_timeout+0x74>)
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f383 8810 	msr	PRIMASK, r3
}
 80042cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80042ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d0:	f7ff fb56 	bl	8003980 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80042d4:	e013      	b.n	80042fe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	69b9      	ldr	r1, [r7, #24]
 80042fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fc:	4798      	blx	r3
}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200015c8 	.word	0x200015c8

0800430c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004312:	f3ef 8310 	mrs	r3, PRIMASK
 8004316:	607b      	str	r3, [r7, #4]
    return(posture);
 8004318:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800431a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800431c:	b672      	cpsid	i
    return(int_posture);
 800431e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004320:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <_tx_timer_expiration_process+0x3c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
 8004328:	4a07      	ldr	r2, [pc, #28]	; (8004348 <_tx_timer_expiration_process+0x3c>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f383 8810 	msr	PRIMASK, r3
}
 8004336:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004338:	4804      	ldr	r0, [pc, #16]	; (800434c <_tx_timer_expiration_process+0x40>)
 800433a:	f7ff fb21 	bl	8003980 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200015c8 	.word	0x200015c8
 800434c:	20001678 	.word	0x20001678

08004350 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004356:	4b28      	ldr	r3, [pc, #160]	; (80043f8 <_tx_timer_initialize+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <_tx_timer_initialize+0xac>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <_tx_timer_initialize+0xb0>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004368:	4b26      	ldr	r3, [pc, #152]	; (8004404 <_tx_timer_initialize+0xb4>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <_tx_timer_initialize+0xb8>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004374:	2280      	movs	r2, #128	; 0x80
 8004376:	2100      	movs	r1, #0
 8004378:	4824      	ldr	r0, [pc, #144]	; (800440c <_tx_timer_initialize+0xbc>)
 800437a:	f000 fccb 	bl	8004d14 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <_tx_timer_initialize+0xc0>)
 8004380:	4a22      	ldr	r2, [pc, #136]	; (800440c <_tx_timer_initialize+0xbc>)
 8004382:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <_tx_timer_initialize+0xc4>)
 8004386:	4a21      	ldr	r2, [pc, #132]	; (800440c <_tx_timer_initialize+0xbc>)
 8004388:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800438a:	4b23      	ldr	r3, [pc, #140]	; (8004418 <_tx_timer_initialize+0xc8>)
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <_tx_timer_initialize+0xcc>)
 800438e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <_tx_timer_initialize+0xc8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3304      	adds	r3, #4
 8004396:	4a20      	ldr	r2, [pc, #128]	; (8004418 <_tx_timer_initialize+0xc8>)
 8004398:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800439a:	4b21      	ldr	r3, [pc, #132]	; (8004420 <_tx_timer_initialize+0xd0>)
 800439c:	4a21      	ldr	r2, [pc, #132]	; (8004424 <_tx_timer_initialize+0xd4>)
 800439e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <_tx_timer_initialize+0xd8>)
 80043a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043a6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <_tx_timer_initialize+0xdc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80043ae:	4b1c      	ldr	r3, [pc, #112]	; (8004420 <_tx_timer_initialize+0xd0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <_tx_timer_initialize+0xd8>)
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	491d      	ldr	r1, [pc, #116]	; (800442c <_tx_timer_initialize+0xdc>)
 80043b8:	6809      	ldr	r1, [r1, #0]
 80043ba:	481c      	ldr	r0, [pc, #112]	; (800442c <_tx_timer_initialize+0xdc>)
 80043bc:	6800      	ldr	r0, [r0, #0]
 80043be:	2400      	movs	r4, #0
 80043c0:	9405      	str	r4, [sp, #20]
 80043c2:	2400      	movs	r4, #0
 80043c4:	9404      	str	r4, [sp, #16]
 80043c6:	9003      	str	r0, [sp, #12]
 80043c8:	9102      	str	r1, [sp, #8]
 80043ca:	9201      	str	r2, [sp, #4]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4b18      	ldr	r3, [pc, #96]	; (8004430 <_tx_timer_initialize+0xe0>)
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <_tx_timer_initialize+0xe4>)
 80043d2:	4919      	ldr	r1, [pc, #100]	; (8004438 <_tx_timer_initialize+0xe8>)
 80043d4:	4819      	ldr	r0, [pc, #100]	; (800443c <_tx_timer_initialize+0xec>)
 80043d6:	f7ff f88d 	bl	80034f4 <_tx_thread_create>
 80043da:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <_tx_timer_initialize+0xf0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80043e8:	4b16      	ldr	r3, [pc, #88]	; (8004444 <_tx_timer_initialize+0xf4>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200015d4 	.word	0x200015d4
 80043fc:	20001b34 	.word	0x20001b34
 8004400:	200015d8 	.word	0x200015d8
 8004404:	20001668 	.word	0x20001668
 8004408:	20001674 	.word	0x20001674
 800440c:	200015dc 	.word	0x200015dc
 8004410:	2000165c 	.word	0x2000165c
 8004414:	20001664 	.word	0x20001664
 8004418:	20001660 	.word	0x20001660
 800441c:	20001658 	.word	0x20001658
 8004420:	20001728 	.word	0x20001728
 8004424:	20001734 	.word	0x20001734
 8004428:	2000172c 	.word	0x2000172c
 800442c:	20001730 	.word	0x20001730
 8004430:	4154494d 	.word	0x4154494d
 8004434:	0800457d 	.word	0x0800457d
 8004438:	080056b4 	.word	0x080056b4
 800443c:	20001678 	.word	0x20001678
 8004440:	2000166c 	.word	0x2000166c
 8004444:	20001670 	.word	0x20001670

08004448 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04a      	beq.n	80044f2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d046      	beq.n	80044f2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d142      	bne.n	80044f2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b20      	cmp	r3, #32
 8004470:	d902      	bls.n	8004478 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8004472:	231f      	movs	r3, #31
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e002      	b.n	800447e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	3b01      	subs	r3, #1
 800447c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <_tx_timer_system_activate+0xb8>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <_tx_timer_system_activate+0xbc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	429a      	cmp	r2, r3
 8004492:	d30b      	bcc.n	80044ac <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004494:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <_tx_timer_system_activate+0xbc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	109b      	asrs	r3, r3, #2
 800449e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <_tx_timer_system_activate+0xc0>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e011      	b.n	80044ec <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80044f2:	bf00      	nop
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20001664 	.word	0x20001664
 8004504:	20001660 	.word	0x20001660
 8004508:	2000165c 	.word	0x2000165c

0800450c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d026      	beq.n	800456e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	429a      	cmp	r2, r3
 800452c:	d108      	bne.n	8004540 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d117      	bne.n	8004568 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e013      	b.n	8004568 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	d105      	bne.n	8004568 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
    }
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b098      	sub	sp, #96	; 0x60
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8004584:	2300      	movs	r3, #0
 8004586:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a73      	ldr	r2, [pc, #460]	; (8004758 <_tx_timer_thread_entry+0x1dc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	f040 80de 	bne.w	800474e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800459c:	b672      	cpsid	i
    return(int_posture);
 800459e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80045a2:	4b6e      	ldr	r3, [pc, #440]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f107 020c 	add.w	r2, r7, #12
 80045b6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80045b8:	4b68      	ldr	r3, [pc, #416]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4a65      	ldr	r2, [pc, #404]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045c8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80045ca:	4b64      	ldr	r3, [pc, #400]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b64      	ldr	r3, [pc, #400]	; (8004760 <_tx_timer_thread_entry+0x1e4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d103      	bne.n	80045de <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80045d6:	4b63      	ldr	r3, [pc, #396]	; (8004764 <_tx_timer_thread_entry+0x1e8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a60      	ldr	r2, [pc, #384]	; (800475c <_tx_timer_thread_entry+0x1e0>)
 80045dc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80045de:	4b62      	ldr	r3, [pc, #392]	; (8004768 <_tx_timer_thread_entry+0x1ec>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80045f8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80045fa:	b672      	cpsid	i
    return(int_posture);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8004600:	e07f      	b.n	8004702 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8004610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004614:	429a      	cmp	r2, r3
 8004616:	d102      	bne.n	800461e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	e00e      	b.n	800463c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8004624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004628:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800462a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800462c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	f107 020c 	add.w	r2, r7, #12
 8004636:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800463c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b20      	cmp	r3, #32
 8004642:	d911      	bls.n	8004668 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8004644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004656:	f107 0208 	add.w	r2, r7, #8
 800465a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800465c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004660:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	e01a      	b.n	800469e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800466e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8004674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8004684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004686:	f107 0208 	add.w	r2, r7, #8
 800468a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800468c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004690:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	e002      	b.n	800469e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800469e:	4a33      	ldr	r2, [pc, #204]	; (800476c <_tx_timer_thread_entry+0x1f0>)
 80046a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80046b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80046b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80046ba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046bc:	f3ef 8310 	mrs	r3, PRIMASK
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80046c6:	b672      	cpsid	i
    return(int_posture);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80046ca:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80046cc:	4b27      	ldr	r3, [pc, #156]	; (800476c <_tx_timer_thread_entry+0x1f0>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d105      	bne.n	80046e6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80046da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80046e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046e2:	f7ff feb1 	bl	8004448 <_tx_timer_system_activate>
 80046e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f383 8810 	msr	PRIMASK, r3
}
 80046f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80046f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80046fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80046fc:	b672      	cpsid	i
    return(int_posture);
 80046fe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004700:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af7c 	bne.w	8004602 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <_tx_timer_thread_entry+0x1ec>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d116      	bne.n	8004740 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8004712:	4b17      	ldr	r3, [pc, #92]	; (8004770 <_tx_timer_thread_entry+0x1f4>)
 8004714:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004718:	2203      	movs	r2, #3
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	2201      	movs	r2, #1
 8004720:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <_tx_timer_thread_entry+0x1f8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	4a12      	ldr	r2, [pc, #72]	; (8004774 <_tx_timer_thread_entry+0x1f8>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f383 8810 	msr	PRIMASK, r3
}
 8004736:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8004738:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800473a:	f7ff fadb 	bl	8003cf4 <_tx_thread_system_suspend>
 800473e:	e728      	b.n	8004592 <_tx_timer_thread_entry+0x16>
 8004740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004742:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f383 8810 	msr	PRIMASK, r3
}
 800474a:	bf00      	nop
            TX_DISABLE
 800474c:	e721      	b.n	8004592 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800474e:	bf00      	nop
 8004750:	3760      	adds	r7, #96	; 0x60
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	4154494d 	.word	0x4154494d
 800475c:	20001664 	.word	0x20001664
 8004760:	20001660 	.word	0x20001660
 8004764:	2000165c 	.word	0x2000165c
 8004768:	20001668 	.word	0x20001668
 800476c:	20001674 	.word	0x20001674
 8004770:	20001678 	.word	0x20001678
 8004774:	200015c8 	.word	0x200015c8

08004778 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <_tx_trace_initialize+0x34>)
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <_tx_trace_initialize+0x38>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <_tx_trace_initialize+0x3c>)
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <_tx_trace_initialize+0x40>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <_tx_trace_initialize+0x44>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <_tx_trace_initialize+0x48>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20001b38 	.word	0x20001b38
 80047b0:	20001b3c 	.word	0x20001b3c
 80047b4:	20001b40 	.word	0x20001b40
 80047b8:	20001b44 	.word	0x20001b44
 80047bc:	20001b48 	.word	0x20001b48
 80047c0:	20001b4c 	.word	0x20001b4c

080047c4 <_tx_trace_object_register>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b08d      	sub	sp, #52	; 0x34
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 80047d4:	4b6d      	ldr	r3, [pc, #436]	; (800498c <_tx_trace_object_register+0x1c8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 80d0 	beq.w	800497e <_tx_trace_object_register+0x1ba>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 80047de:	4b6c      	ldr	r3, [pc, #432]	; (8004990 <_tx_trace_object_register+0x1cc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 80047e4:	4b6b      	ldr	r3, [pc, #428]	; (8004994 <_tx_trace_object_register+0x1d0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80c8 	beq.w	800497e <_tx_trace_object_register+0x1ba>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
            loop_break =  TX_FALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 80047f6:	4b68      	ldr	r3, [pc, #416]	; (8004998 <_tx_trace_object_register+0x1d4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80047fc:	4b63      	ldr	r3, [pc, #396]	; (800498c <_tx_trace_object_register+0x1c8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8004802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004804:	4613      	mov	r3, r2
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4413      	add	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	461a      	mov	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8004824:	2301      	movs	r3, #1
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	429a      	cmp	r2, r3
 8004830:	d103      	bne.n	800483a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
                    loop_break =  TX_TRUE;
 8004836:	2301      	movs	r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	2b01      	cmp	r3, #1
 800483e:	d02d      	beq.n	800489c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11a      	bne.n	800487e <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8004848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	429a      	cmp	r2, r3
 800484e:	d102      	bne.n	8004856 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
 8004854:	e013      	b.n	800487e <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8004856:	4b4d      	ldr	r3, [pc, #308]	; (800498c <_tx_trace_object_register+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 800485c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	461a      	mov	r2, r3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	4413      	add	r3, r2
 800486c:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	785b      	ldrb	r3, [r3, #1]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	3301      	adds	r3, #1
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8004884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	429a      	cmp	r2, r3
 800488a:	d301      	bcc.n	8004890 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <_tx_trace_object_register+0x1d4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004896:	429a      	cmp	r2, r3
 8004898:	d1b0      	bne.n	80047fc <_tx_trace_object_register+0x38>
 800489a:	e000      	b.n	800489e <_tx_trace_object_register+0xda>
                    break;
 800489c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 800489e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d26b      	bcs.n	800497e <_tx_trace_object_register+0x1ba>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <_tx_trace_object_register+0x1d0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	4a39      	ldr	r2, [pc, #228]	; (8004994 <_tx_trace_object_register+0x1d0>)
 80048ae:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	3301      	adds	r3, #1
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d904      	bls.n	80048c4 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	3301      	adds	r3, #1
 80048be:	4a36      	ldr	r2, [pc, #216]	; (8004998 <_tx_trace_object_register+0x1d4>)
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e002      	b.n	80048ca <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80048c4:	4b34      	ldr	r3, [pc, #208]	; (8004998 <_tx_trace_object_register+0x1d4>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80048ca:	4b30      	ldr	r3, [pc, #192]	; (800498c <_tx_trace_object_register+0x1c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80048d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d2:	4613      	mov	r3, r2
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	4413      	add	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	461a      	mov	r2, r3
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2200      	movs	r2, #0
 80048ea:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	7bfa      	ldrb	r2, [r7, #15]
 80048f0:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004902:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004908:	e014      	b.n	8004934 <_tx_trace_object_register+0x170>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	4413      	add	r3, r2
 8004914:	61fb      	str	r3, [r7, #28]

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	7819      	ldrb	r1, [r3, #0]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	4413      	add	r3, r2
 8004920:	3310      	adds	r3, #16
 8004922:	460a      	mov	r2, r1
 8004924:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <_tx_trace_object_register+0x178>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	3301      	adds	r3, #1
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b1e      	cmp	r3, #30
 8004938:	d9e7      	bls.n	800490a <_tx_trace_object_register+0x146>
 800493a:	e000      	b.n	800493e <_tx_trace_object_register+0x17a>
                    {
                        break;
 800493c:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	4413      	add	r3, r2
 8004944:	3310      	adds	r3, #16
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d110      	bne.n	8004972 <_tx_trace_object_register+0x1ae>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004960:	b2da      	uxtb	r2, r3
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	b2da      	uxtb	r2, r3
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 8004970:	e005      	b.n	800497e <_tx_trace_object_register+0x1ba>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2200      	movs	r2, #0
 8004976:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2200      	movs	r2, #0
 800497c:	70da      	strb	r2, [r3, #3]
}
 800497e:	bf00      	nop
 8004980:	3734      	adds	r7, #52	; 0x34
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20001b3c 	.word	0x20001b3c
 8004990:	20001b58 	.word	0x20001b58
 8004994:	20001b5c 	.word	0x20001b5c
 8004998:	20001b60 	.word	0x20001b60

0800499c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b092      	sub	sp, #72	; 0x48
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80049aa:	2300      	movs	r3, #0
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d102      	bne.n	80049ba <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80049b4:	2302      	movs	r3, #2
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	e075      	b.n	8004aa6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	2b34      	cmp	r3, #52	; 0x34
 80049be:	d002      	beq.n	80049c6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80049c0:	2302      	movs	r3, #2
 80049c2:	647b      	str	r3, [r7, #68]	; 0x44
 80049c4:	e06f      	b.n	8004aa6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049c6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80049d0:	b672      	cpsid	i
    return(int_posture);
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80049d4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80049d6:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <_txe_byte_pool_create+0x128>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a39      	ldr	r2, [pc, #228]	; (8004ac4 <_txe_byte_pool_create+0x128>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <_txe_byte_pool_create+0x12c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	e009      	b.n	8004a0c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d00b      	beq.n	8004a18 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8004a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	3301      	adds	r3, #1
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <_txe_byte_pool_create+0x130>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3f0      	bcc.n	80049f8 <_txe_byte_pool_create+0x5c>
 8004a16:	e000      	b.n	8004a1a <_txe_byte_pool_create+0x7e>
                break;
 8004a18:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1e:	623b      	str	r3, [r7, #32]
    return(posture);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004a22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a24:	b672      	cpsid	i
    return(int_posture);
 8004a26:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004a2a:	4b26      	ldr	r3, [pc, #152]	; (8004ac4 <_txe_byte_pool_create+0x128>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <_txe_byte_pool_create+0x128>)
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	f383 8810 	msr	PRIMASK, r3
}
 8004a3e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004a40:	f7fe ff64 	bl	800390c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d102      	bne.n	8004a52 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a50:	e029      	b.n	8004aa6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5c:	e023      	b.n	8004aa6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b63      	cmp	r3, #99	; 0x63
 8004a62:	d802      	bhi.n	8004a6a <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8004a64:	2305      	movs	r3, #5
 8004a66:	647b      	str	r3, [r7, #68]	; 0x44
 8004a68:	e01d      	b.n	8004aa6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004a6a:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <_txe_byte_pool_create+0x134>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8004a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <_txe_byte_pool_create+0x138>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d101      	bne.n	8004a7c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004a78:	2313      	movs	r3, #19
 8004a7a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a7c:	f3ef 8305 	mrs	r3, IPSR
 8004a80:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004a82:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <_txe_byte_pool_create+0x13c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a8e:	f3ef 8305 	mrs	r3, IPSR
 8004a92:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004a94:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <_txe_byte_pool_create+0x13c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004aa0:	d201      	bcs.n	8004aa6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004aa2:	2313      	movs	r3, #19
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7fe fb8a 	bl	80031cc <_tx_byte_pool_create>
 8004ab8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8004aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3748      	adds	r7, #72	; 0x48
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200015c8 	.word	0x200015c8
 8004ac8:	20001520 	.word	0x20001520
 8004acc:	20001524 	.word	0x20001524
 8004ad0:	20001530 	.word	0x20001530
 8004ad4:	20001678 	.word	0x20001678
 8004ad8:	2000000c 	.word	0x2000000c

08004adc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b09a      	sub	sp, #104	; 0x68
 8004ae0:	af06      	add	r7, sp, #24
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004aea:	2300      	movs	r3, #0
 8004aec:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004af4:	230e      	movs	r3, #14
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004af8:	e0bb      	b.n	8004c72 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8004afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004afc:	2bb0      	cmp	r3, #176	; 0xb0
 8004afe:	d002      	beq.n	8004b06 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004b00:	230e      	movs	r3, #14
 8004b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b04:	e0b5      	b.n	8004c72 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b06:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b10:	b672      	cpsid	i
    return(int_posture);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004b16:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <_txe_thread_create+0x1cc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	4a62      	ldr	r2, [pc, #392]	; (8004ca8 <_txe_thread_create+0x1cc>)
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8004b30:	4b5e      	ldr	r3, [pc, #376]	; (8004cac <_txe_thread_create+0x1d0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b38:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8004b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b40:	4413      	add	r3, r2
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4c:	e02b      	b.n	8004ba6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d101      	bne.n	8004b5a <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8004b56:	2301      	movs	r3, #1
 8004b58:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d028      	beq.n	8004bb2 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d308      	bcc.n	8004b7c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d203      	bcs.n	8004b7c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8004b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d308      	bcc.n	8004b98 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8004b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d203      	bcs.n	8004b98 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8004b94:	2301      	movs	r3, #1
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba6:	4b42      	ldr	r3, [pc, #264]	; (8004cb0 <_txe_thread_create+0x1d4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d3ce      	bcc.n	8004b4e <_txe_thread_create+0x72>
 8004bb0:	e000      	b.n	8004bb4 <_txe_thread_create+0xd8>
                break;
 8004bb2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb8:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004bba:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004bbc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bbe:	b672      	cpsid	i
    return(int_posture);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <_txe_thread_create+0x1cc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	4a37      	ldr	r2, [pc, #220]	; (8004ca8 <_txe_thread_create+0x1cc>)
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004bda:	f7fe fe97 	bl	800390c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d102      	bne.n	8004bec <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8004be6:	230e      	movs	r3, #14
 8004be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bea:	e042      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8004bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf6:	e03c      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c02:	e036      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8004c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c06:	2bc7      	cmp	r3, #199	; 0xc7
 8004c08:	d802      	bhi.n	8004c10 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8004c0a:	2305      	movs	r3, #5
 8004c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c0e:	e030      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8004c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c12:	2b1f      	cmp	r3, #31
 8004c14:	d902      	bls.n	8004c1c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8004c16:	230f      	movs	r3, #15
 8004c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c1a:	e02a      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8004c1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d902      	bls.n	8004c2a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8004c24:	2318      	movs	r3, #24
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c28:	e023      	b.n	8004c72 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d902      	bls.n	8004c36 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8004c30:	2310      	movs	r3, #16
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c34:	e01d      	b.n	8004c72 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8004c36:	4b1f      	ldr	r3, [pc, #124]	; (8004cb4 <_txe_thread_create+0x1d8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <_txe_thread_create+0x1dc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d101      	bne.n	8004c48 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004c44:	2313      	movs	r3, #19
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c48:	f3ef 8305 	mrs	r3, IPSR
 8004c4c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004c4e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <_txe_thread_create+0x1e0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c5a:	f3ef 8305 	mrs	r3, IPSR
 8004c5e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004c60:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <_txe_thread_create+0x1e0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004c6c:	d201      	bcs.n	8004c72 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8004c6e:	2313      	movs	r3, #19
 8004c70:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8004c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d112      	bne.n	8004c9e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7e:	9304      	str	r3, [sp, #16]
 8004c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c86:	9302      	str	r3, [sp, #8]
 8004c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7fe fc2c 	bl	80034f4 <_tx_thread_create>
 8004c9c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3750      	adds	r7, #80	; 0x50
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	200015c8 	.word	0x200015c8
 8004cac:	20001538 	.word	0x20001538
 8004cb0:	2000153c 	.word	0x2000153c
 8004cb4:	20001530 	.word	0x20001530
 8004cb8:	20001678 	.word	0x20001678
 8004cbc:	2000000c 	.word	0x2000000c

08004cc0 <__errno>:
 8004cc0:	4b01      	ldr	r3, [pc, #4]	; (8004cc8 <__errno+0x8>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000010 	.word	0x20000010

08004ccc <__libc_init_array>:
 8004ccc:	b570      	push	{r4, r5, r6, lr}
 8004cce:	4d0d      	ldr	r5, [pc, #52]	; (8004d04 <__libc_init_array+0x38>)
 8004cd0:	4c0d      	ldr	r4, [pc, #52]	; (8004d08 <__libc_init_array+0x3c>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	42a6      	cmp	r6, r4
 8004cda:	d109      	bne.n	8004cf0 <__libc_init_array+0x24>
 8004cdc:	4d0b      	ldr	r5, [pc, #44]	; (8004d0c <__libc_init_array+0x40>)
 8004cde:	4c0c      	ldr	r4, [pc, #48]	; (8004d10 <__libc_init_array+0x44>)
 8004ce0:	f000 fc8e 	bl	8005600 <_init>
 8004ce4:	1b64      	subs	r4, r4, r5
 8004ce6:	10a4      	asrs	r4, r4, #2
 8004ce8:	2600      	movs	r6, #0
 8004cea:	42a6      	cmp	r6, r4
 8004cec:	d105      	bne.n	8004cfa <__libc_init_array+0x2e>
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf4:	4798      	blx	r3
 8004cf6:	3601      	adds	r6, #1
 8004cf8:	e7ee      	b.n	8004cd8 <__libc_init_array+0xc>
 8004cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfe:	4798      	blx	r3
 8004d00:	3601      	adds	r6, #1
 8004d02:	e7f2      	b.n	8004cea <__libc_init_array+0x1e>
 8004d04:	0800571c 	.word	0x0800571c
 8004d08:	0800571c 	.word	0x0800571c
 8004d0c:	0800571c 	.word	0x0800571c
 8004d10:	08005720 	.word	0x08005720

08004d14 <memset>:
 8004d14:	4402      	add	r2, r0
 8004d16:	4603      	mov	r3, r0
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d100      	bne.n	8004d1e <memset+0xa>
 8004d1c:	4770      	bx	lr
 8004d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d22:	e7f9      	b.n	8004d18 <memset+0x4>

08004d24 <siprintf>:
 8004d24:	b40e      	push	{r1, r2, r3}
 8004d26:	b500      	push	{lr}
 8004d28:	b09c      	sub	sp, #112	; 0x70
 8004d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d2c:	9002      	str	r0, [sp, #8]
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d34:	4809      	ldr	r0, [pc, #36]	; (8004d5c <siprintf+0x38>)
 8004d36:	9107      	str	r1, [sp, #28]
 8004d38:	9104      	str	r1, [sp, #16]
 8004d3a:	4909      	ldr	r1, [pc, #36]	; (8004d60 <siprintf+0x3c>)
 8004d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d40:	9105      	str	r1, [sp, #20]
 8004d42:	6800      	ldr	r0, [r0, #0]
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	a902      	add	r1, sp, #8
 8004d48:	f000 f868 	bl	8004e1c <_svfiprintf_r>
 8004d4c:	9b02      	ldr	r3, [sp, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	b01c      	add	sp, #112	; 0x70
 8004d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d58:	b003      	add	sp, #12
 8004d5a:	4770      	bx	lr
 8004d5c:	20000010 	.word	0x20000010
 8004d60:	ffff0208 	.word	0xffff0208

08004d64 <__ssputs_r>:
 8004d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d68:	688e      	ldr	r6, [r1, #8]
 8004d6a:	429e      	cmp	r6, r3
 8004d6c:	4682      	mov	sl, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	4690      	mov	r8, r2
 8004d72:	461f      	mov	r7, r3
 8004d74:	d838      	bhi.n	8004de8 <__ssputs_r+0x84>
 8004d76:	898a      	ldrh	r2, [r1, #12]
 8004d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d7c:	d032      	beq.n	8004de4 <__ssputs_r+0x80>
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	6909      	ldr	r1, [r1, #16]
 8004d82:	eba5 0901 	sub.w	r9, r5, r1
 8004d86:	6965      	ldr	r5, [r4, #20]
 8004d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d90:	3301      	adds	r3, #1
 8004d92:	444b      	add	r3, r9
 8004d94:	106d      	asrs	r5, r5, #1
 8004d96:	429d      	cmp	r5, r3
 8004d98:	bf38      	it	cc
 8004d9a:	461d      	movcc	r5, r3
 8004d9c:	0553      	lsls	r3, r2, #21
 8004d9e:	d531      	bpl.n	8004e04 <__ssputs_r+0xa0>
 8004da0:	4629      	mov	r1, r5
 8004da2:	f000 fb63 	bl	800546c <_malloc_r>
 8004da6:	4606      	mov	r6, r0
 8004da8:	b950      	cbnz	r0, 8004dc0 <__ssputs_r+0x5c>
 8004daa:	230c      	movs	r3, #12
 8004dac:	f8ca 3000 	str.w	r3, [sl]
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc0:	6921      	ldr	r1, [r4, #16]
 8004dc2:	464a      	mov	r2, r9
 8004dc4:	f000 fabe 	bl	8005344 <memcpy>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	6126      	str	r6, [r4, #16]
 8004dd6:	6165      	str	r5, [r4, #20]
 8004dd8:	444e      	add	r6, r9
 8004dda:	eba5 0509 	sub.w	r5, r5, r9
 8004dde:	6026      	str	r6, [r4, #0]
 8004de0:	60a5      	str	r5, [r4, #8]
 8004de2:	463e      	mov	r6, r7
 8004de4:	42be      	cmp	r6, r7
 8004de6:	d900      	bls.n	8004dea <__ssputs_r+0x86>
 8004de8:	463e      	mov	r6, r7
 8004dea:	6820      	ldr	r0, [r4, #0]
 8004dec:	4632      	mov	r2, r6
 8004dee:	4641      	mov	r1, r8
 8004df0:	f000 fab6 	bl	8005360 <memmove>
 8004df4:	68a3      	ldr	r3, [r4, #8]
 8004df6:	1b9b      	subs	r3, r3, r6
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	4433      	add	r3, r6
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	2000      	movs	r0, #0
 8004e02:	e7db      	b.n	8004dbc <__ssputs_r+0x58>
 8004e04:	462a      	mov	r2, r5
 8004e06:	f000 fba5 	bl	8005554 <_realloc_r>
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d1e1      	bne.n	8004dd4 <__ssputs_r+0x70>
 8004e10:	6921      	ldr	r1, [r4, #16]
 8004e12:	4650      	mov	r0, sl
 8004e14:	f000 fabe 	bl	8005394 <_free_r>
 8004e18:	e7c7      	b.n	8004daa <__ssputs_r+0x46>
	...

08004e1c <_svfiprintf_r>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	4698      	mov	r8, r3
 8004e22:	898b      	ldrh	r3, [r1, #12]
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	b09d      	sub	sp, #116	; 0x74
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460d      	mov	r5, r1
 8004e2c:	4614      	mov	r4, r2
 8004e2e:	d50e      	bpl.n	8004e4e <_svfiprintf_r+0x32>
 8004e30:	690b      	ldr	r3, [r1, #16]
 8004e32:	b963      	cbnz	r3, 8004e4e <_svfiprintf_r+0x32>
 8004e34:	2140      	movs	r1, #64	; 0x40
 8004e36:	f000 fb19 	bl	800546c <_malloc_r>
 8004e3a:	6028      	str	r0, [r5, #0]
 8004e3c:	6128      	str	r0, [r5, #16]
 8004e3e:	b920      	cbnz	r0, 8004e4a <_svfiprintf_r+0x2e>
 8004e40:	230c      	movs	r3, #12
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	e0d1      	b.n	8004fee <_svfiprintf_r+0x1d2>
 8004e4a:	2340      	movs	r3, #64	; 0x40
 8004e4c:	616b      	str	r3, [r5, #20]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	2320      	movs	r3, #32
 8004e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5c:	2330      	movs	r3, #48	; 0x30
 8004e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005008 <_svfiprintf_r+0x1ec>
 8004e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e66:	f04f 0901 	mov.w	r9, #1
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	469a      	mov	sl, r3
 8004e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e72:	b10a      	cbz	r2, 8004e78 <_svfiprintf_r+0x5c>
 8004e74:	2a25      	cmp	r2, #37	; 0x25
 8004e76:	d1f9      	bne.n	8004e6c <_svfiprintf_r+0x50>
 8004e78:	ebba 0b04 	subs.w	fp, sl, r4
 8004e7c:	d00b      	beq.n	8004e96 <_svfiprintf_r+0x7a>
 8004e7e:	465b      	mov	r3, fp
 8004e80:	4622      	mov	r2, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	4638      	mov	r0, r7
 8004e86:	f7ff ff6d 	bl	8004d64 <__ssputs_r>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	f000 80aa 	beq.w	8004fe4 <_svfiprintf_r+0x1c8>
 8004e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e92:	445a      	add	r2, fp
 8004e94:	9209      	str	r2, [sp, #36]	; 0x24
 8004e96:	f89a 3000 	ldrb.w	r3, [sl]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80a2 	beq.w	8004fe4 <_svfiprintf_r+0x1c8>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eaa:	f10a 0a01 	add.w	sl, sl, #1
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	9307      	str	r3, [sp, #28]
 8004eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb8:	4654      	mov	r4, sl
 8004eba:	2205      	movs	r2, #5
 8004ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec0:	4851      	ldr	r0, [pc, #324]	; (8005008 <_svfiprintf_r+0x1ec>)
 8004ec2:	f7fb fac5 	bl	8000450 <memchr>
 8004ec6:	9a04      	ldr	r2, [sp, #16]
 8004ec8:	b9d8      	cbnz	r0, 8004f02 <_svfiprintf_r+0xe6>
 8004eca:	06d0      	lsls	r0, r2, #27
 8004ecc:	bf44      	itt	mi
 8004ece:	2320      	movmi	r3, #32
 8004ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ed4:	0711      	lsls	r1, r2, #28
 8004ed6:	bf44      	itt	mi
 8004ed8:	232b      	movmi	r3, #43	; 0x2b
 8004eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ede:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee4:	d015      	beq.n	8004f12 <_svfiprintf_r+0xf6>
 8004ee6:	9a07      	ldr	r2, [sp, #28]
 8004ee8:	4654      	mov	r4, sl
 8004eea:	2000      	movs	r0, #0
 8004eec:	f04f 0c0a 	mov.w	ip, #10
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef6:	3b30      	subs	r3, #48	; 0x30
 8004ef8:	2b09      	cmp	r3, #9
 8004efa:	d94e      	bls.n	8004f9a <_svfiprintf_r+0x17e>
 8004efc:	b1b0      	cbz	r0, 8004f2c <_svfiprintf_r+0x110>
 8004efe:	9207      	str	r2, [sp, #28]
 8004f00:	e014      	b.n	8004f2c <_svfiprintf_r+0x110>
 8004f02:	eba0 0308 	sub.w	r3, r0, r8
 8004f06:	fa09 f303 	lsl.w	r3, r9, r3
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	46a2      	mov	sl, r4
 8004f10:	e7d2      	b.n	8004eb8 <_svfiprintf_r+0x9c>
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	9103      	str	r1, [sp, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfbb      	ittet	lt
 8004f1e:	425b      	neglt	r3, r3
 8004f20:	f042 0202 	orrlt.w	r2, r2, #2
 8004f24:	9307      	strge	r3, [sp, #28]
 8004f26:	9307      	strlt	r3, [sp, #28]
 8004f28:	bfb8      	it	lt
 8004f2a:	9204      	strlt	r2, [sp, #16]
 8004f2c:	7823      	ldrb	r3, [r4, #0]
 8004f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f30:	d10c      	bne.n	8004f4c <_svfiprintf_r+0x130>
 8004f32:	7863      	ldrb	r3, [r4, #1]
 8004f34:	2b2a      	cmp	r3, #42	; 0x2a
 8004f36:	d135      	bne.n	8004fa4 <_svfiprintf_r+0x188>
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	9203      	str	r2, [sp, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bfb8      	it	lt
 8004f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f48:	3402      	adds	r4, #2
 8004f4a:	9305      	str	r3, [sp, #20]
 8004f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005018 <_svfiprintf_r+0x1fc>
 8004f50:	7821      	ldrb	r1, [r4, #0]
 8004f52:	2203      	movs	r2, #3
 8004f54:	4650      	mov	r0, sl
 8004f56:	f7fb fa7b 	bl	8000450 <memchr>
 8004f5a:	b140      	cbz	r0, 8004f6e <_svfiprintf_r+0x152>
 8004f5c:	2340      	movs	r3, #64	; 0x40
 8004f5e:	eba0 000a 	sub.w	r0, r0, sl
 8004f62:	fa03 f000 	lsl.w	r0, r3, r0
 8004f66:	9b04      	ldr	r3, [sp, #16]
 8004f68:	4303      	orrs	r3, r0
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f72:	4826      	ldr	r0, [pc, #152]	; (800500c <_svfiprintf_r+0x1f0>)
 8004f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f78:	2206      	movs	r2, #6
 8004f7a:	f7fb fa69 	bl	8000450 <memchr>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d038      	beq.n	8004ff4 <_svfiprintf_r+0x1d8>
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <_svfiprintf_r+0x1f4>)
 8004f84:	bb1b      	cbnz	r3, 8004fce <_svfiprintf_r+0x1b2>
 8004f86:	9b03      	ldr	r3, [sp, #12]
 8004f88:	3307      	adds	r3, #7
 8004f8a:	f023 0307 	bic.w	r3, r3, #7
 8004f8e:	3308      	adds	r3, #8
 8004f90:	9303      	str	r3, [sp, #12]
 8004f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f94:	4433      	add	r3, r6
 8004f96:	9309      	str	r3, [sp, #36]	; 0x24
 8004f98:	e767      	b.n	8004e6a <_svfiprintf_r+0x4e>
 8004f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	e7a5      	b.n	8004ef0 <_svfiprintf_r+0xd4>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	3401      	adds	r4, #1
 8004fa8:	9305      	str	r3, [sp, #20]
 8004faa:	4619      	mov	r1, r3
 8004fac:	f04f 0c0a 	mov.w	ip, #10
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fb6:	3a30      	subs	r2, #48	; 0x30
 8004fb8:	2a09      	cmp	r2, #9
 8004fba:	d903      	bls.n	8004fc4 <_svfiprintf_r+0x1a8>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0c5      	beq.n	8004f4c <_svfiprintf_r+0x130>
 8004fc0:	9105      	str	r1, [sp, #20]
 8004fc2:	e7c3      	b.n	8004f4c <_svfiprintf_r+0x130>
 8004fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc8:	4604      	mov	r4, r0
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e7f0      	b.n	8004fb0 <_svfiprintf_r+0x194>
 8004fce:	ab03      	add	r3, sp, #12
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	462a      	mov	r2, r5
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <_svfiprintf_r+0x1f8>)
 8004fd6:	a904      	add	r1, sp, #16
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f3af 8000 	nop.w
 8004fde:	1c42      	adds	r2, r0, #1
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	d1d6      	bne.n	8004f92 <_svfiprintf_r+0x176>
 8004fe4:	89ab      	ldrh	r3, [r5, #12]
 8004fe6:	065b      	lsls	r3, r3, #25
 8004fe8:	f53f af2c 	bmi.w	8004e44 <_svfiprintf_r+0x28>
 8004fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fee:	b01d      	add	sp, #116	; 0x74
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	ab03      	add	r3, sp, #12
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	462a      	mov	r2, r5
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <_svfiprintf_r+0x1f8>)
 8004ffc:	a904      	add	r1, sp, #16
 8004ffe:	4638      	mov	r0, r7
 8005000:	f000 f87a 	bl	80050f8 <_printf_i>
 8005004:	e7eb      	b.n	8004fde <_svfiprintf_r+0x1c2>
 8005006:	bf00      	nop
 8005008:	080056e0 	.word	0x080056e0
 800500c:	080056ea 	.word	0x080056ea
 8005010:	00000000 	.word	0x00000000
 8005014:	08004d65 	.word	0x08004d65
 8005018:	080056e6 	.word	0x080056e6

0800501c <_printf_common>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	4616      	mov	r6, r2
 8005022:	4699      	mov	r9, r3
 8005024:	688a      	ldr	r2, [r1, #8]
 8005026:	690b      	ldr	r3, [r1, #16]
 8005028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800502c:	4293      	cmp	r3, r2
 800502e:	bfb8      	it	lt
 8005030:	4613      	movlt	r3, r2
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005038:	4607      	mov	r7, r0
 800503a:	460c      	mov	r4, r1
 800503c:	b10a      	cbz	r2, 8005042 <_printf_common+0x26>
 800503e:	3301      	adds	r3, #1
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	6833      	ldrmi	r3, [r6, #0]
 800504a:	3302      	addmi	r3, #2
 800504c:	6033      	strmi	r3, [r6, #0]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	f015 0506 	ands.w	r5, r5, #6
 8005054:	d106      	bne.n	8005064 <_printf_common+0x48>
 8005056:	f104 0a19 	add.w	sl, r4, #25
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	6832      	ldr	r2, [r6, #0]
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	42ab      	cmp	r3, r5
 8005062:	dc26      	bgt.n	80050b2 <_printf_common+0x96>
 8005064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005068:	1e13      	subs	r3, r2, #0
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	bf18      	it	ne
 800506e:	2301      	movne	r3, #1
 8005070:	0692      	lsls	r2, r2, #26
 8005072:	d42b      	bmi.n	80050cc <_printf_common+0xb0>
 8005074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005078:	4649      	mov	r1, r9
 800507a:	4638      	mov	r0, r7
 800507c:	47c0      	blx	r8
 800507e:	3001      	adds	r0, #1
 8005080:	d01e      	beq.n	80050c0 <_printf_common+0xa4>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	68e5      	ldr	r5, [r4, #12]
 8005086:	6832      	ldr	r2, [r6, #0]
 8005088:	f003 0306 	and.w	r3, r3, #6
 800508c:	2b04      	cmp	r3, #4
 800508e:	bf08      	it	eq
 8005090:	1aad      	subeq	r5, r5, r2
 8005092:	68a3      	ldr	r3, [r4, #8]
 8005094:	6922      	ldr	r2, [r4, #16]
 8005096:	bf0c      	ite	eq
 8005098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800509c:	2500      	movne	r5, #0
 800509e:	4293      	cmp	r3, r2
 80050a0:	bfc4      	itt	gt
 80050a2:	1a9b      	subgt	r3, r3, r2
 80050a4:	18ed      	addgt	r5, r5, r3
 80050a6:	2600      	movs	r6, #0
 80050a8:	341a      	adds	r4, #26
 80050aa:	42b5      	cmp	r5, r6
 80050ac:	d11a      	bne.n	80050e4 <_printf_common+0xc8>
 80050ae:	2000      	movs	r0, #0
 80050b0:	e008      	b.n	80050c4 <_printf_common+0xa8>
 80050b2:	2301      	movs	r3, #1
 80050b4:	4652      	mov	r2, sl
 80050b6:	4649      	mov	r1, r9
 80050b8:	4638      	mov	r0, r7
 80050ba:	47c0      	blx	r8
 80050bc:	3001      	adds	r0, #1
 80050be:	d103      	bne.n	80050c8 <_printf_common+0xac>
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c8:	3501      	adds	r5, #1
 80050ca:	e7c6      	b.n	800505a <_printf_common+0x3e>
 80050cc:	18e1      	adds	r1, r4, r3
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	2030      	movs	r0, #48	; 0x30
 80050d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050d6:	4422      	add	r2, r4
 80050d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050e0:	3302      	adds	r3, #2
 80050e2:	e7c7      	b.n	8005074 <_printf_common+0x58>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4622      	mov	r2, r4
 80050e8:	4649      	mov	r1, r9
 80050ea:	4638      	mov	r0, r7
 80050ec:	47c0      	blx	r8
 80050ee:	3001      	adds	r0, #1
 80050f0:	d0e6      	beq.n	80050c0 <_printf_common+0xa4>
 80050f2:	3601      	adds	r6, #1
 80050f4:	e7d9      	b.n	80050aa <_printf_common+0x8e>
	...

080050f8 <_printf_i>:
 80050f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	7e0f      	ldrb	r7, [r1, #24]
 80050fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005100:	2f78      	cmp	r7, #120	; 0x78
 8005102:	4691      	mov	r9, r2
 8005104:	4680      	mov	r8, r0
 8005106:	460c      	mov	r4, r1
 8005108:	469a      	mov	sl, r3
 800510a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800510e:	d807      	bhi.n	8005120 <_printf_i+0x28>
 8005110:	2f62      	cmp	r7, #98	; 0x62
 8005112:	d80a      	bhi.n	800512a <_printf_i+0x32>
 8005114:	2f00      	cmp	r7, #0
 8005116:	f000 80d8 	beq.w	80052ca <_printf_i+0x1d2>
 800511a:	2f58      	cmp	r7, #88	; 0x58
 800511c:	f000 80a3 	beq.w	8005266 <_printf_i+0x16e>
 8005120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005128:	e03a      	b.n	80051a0 <_printf_i+0xa8>
 800512a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800512e:	2b15      	cmp	r3, #21
 8005130:	d8f6      	bhi.n	8005120 <_printf_i+0x28>
 8005132:	a101      	add	r1, pc, #4	; (adr r1, 8005138 <_printf_i+0x40>)
 8005134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005138:	08005191 	.word	0x08005191
 800513c:	080051a5 	.word	0x080051a5
 8005140:	08005121 	.word	0x08005121
 8005144:	08005121 	.word	0x08005121
 8005148:	08005121 	.word	0x08005121
 800514c:	08005121 	.word	0x08005121
 8005150:	080051a5 	.word	0x080051a5
 8005154:	08005121 	.word	0x08005121
 8005158:	08005121 	.word	0x08005121
 800515c:	08005121 	.word	0x08005121
 8005160:	08005121 	.word	0x08005121
 8005164:	080052b1 	.word	0x080052b1
 8005168:	080051d5 	.word	0x080051d5
 800516c:	08005293 	.word	0x08005293
 8005170:	08005121 	.word	0x08005121
 8005174:	08005121 	.word	0x08005121
 8005178:	080052d3 	.word	0x080052d3
 800517c:	08005121 	.word	0x08005121
 8005180:	080051d5 	.word	0x080051d5
 8005184:	08005121 	.word	0x08005121
 8005188:	08005121 	.word	0x08005121
 800518c:	0800529b 	.word	0x0800529b
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	602a      	str	r2, [r5, #0]
 8005198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800519c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0a3      	b.n	80052ec <_printf_i+0x1f4>
 80051a4:	6820      	ldr	r0, [r4, #0]
 80051a6:	6829      	ldr	r1, [r5, #0]
 80051a8:	0606      	lsls	r6, r0, #24
 80051aa:	f101 0304 	add.w	r3, r1, #4
 80051ae:	d50a      	bpl.n	80051c6 <_printf_i+0xce>
 80051b0:	680e      	ldr	r6, [r1, #0]
 80051b2:	602b      	str	r3, [r5, #0]
 80051b4:	2e00      	cmp	r6, #0
 80051b6:	da03      	bge.n	80051c0 <_printf_i+0xc8>
 80051b8:	232d      	movs	r3, #45	; 0x2d
 80051ba:	4276      	negs	r6, r6
 80051bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c0:	485e      	ldr	r0, [pc, #376]	; (800533c <_printf_i+0x244>)
 80051c2:	230a      	movs	r3, #10
 80051c4:	e019      	b.n	80051fa <_printf_i+0x102>
 80051c6:	680e      	ldr	r6, [r1, #0]
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ce:	bf18      	it	ne
 80051d0:	b236      	sxthne	r6, r6
 80051d2:	e7ef      	b.n	80051b4 <_printf_i+0xbc>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	6820      	ldr	r0, [r4, #0]
 80051d8:	1d19      	adds	r1, r3, #4
 80051da:	6029      	str	r1, [r5, #0]
 80051dc:	0601      	lsls	r1, r0, #24
 80051de:	d501      	bpl.n	80051e4 <_printf_i+0xec>
 80051e0:	681e      	ldr	r6, [r3, #0]
 80051e2:	e002      	b.n	80051ea <_printf_i+0xf2>
 80051e4:	0646      	lsls	r6, r0, #25
 80051e6:	d5fb      	bpl.n	80051e0 <_printf_i+0xe8>
 80051e8:	881e      	ldrh	r6, [r3, #0]
 80051ea:	4854      	ldr	r0, [pc, #336]	; (800533c <_printf_i+0x244>)
 80051ec:	2f6f      	cmp	r7, #111	; 0x6f
 80051ee:	bf0c      	ite	eq
 80051f0:	2308      	moveq	r3, #8
 80051f2:	230a      	movne	r3, #10
 80051f4:	2100      	movs	r1, #0
 80051f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051fa:	6865      	ldr	r5, [r4, #4]
 80051fc:	60a5      	str	r5, [r4, #8]
 80051fe:	2d00      	cmp	r5, #0
 8005200:	bfa2      	ittt	ge
 8005202:	6821      	ldrge	r1, [r4, #0]
 8005204:	f021 0104 	bicge.w	r1, r1, #4
 8005208:	6021      	strge	r1, [r4, #0]
 800520a:	b90e      	cbnz	r6, 8005210 <_printf_i+0x118>
 800520c:	2d00      	cmp	r5, #0
 800520e:	d04d      	beq.n	80052ac <_printf_i+0x1b4>
 8005210:	4615      	mov	r5, r2
 8005212:	fbb6 f1f3 	udiv	r1, r6, r3
 8005216:	fb03 6711 	mls	r7, r3, r1, r6
 800521a:	5dc7      	ldrb	r7, [r0, r7]
 800521c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005220:	4637      	mov	r7, r6
 8005222:	42bb      	cmp	r3, r7
 8005224:	460e      	mov	r6, r1
 8005226:	d9f4      	bls.n	8005212 <_printf_i+0x11a>
 8005228:	2b08      	cmp	r3, #8
 800522a:	d10b      	bne.n	8005244 <_printf_i+0x14c>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07de      	lsls	r6, r3, #31
 8005230:	d508      	bpl.n	8005244 <_printf_i+0x14c>
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	6861      	ldr	r1, [r4, #4]
 8005236:	4299      	cmp	r1, r3
 8005238:	bfde      	ittt	le
 800523a:	2330      	movle	r3, #48	; 0x30
 800523c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005240:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005244:	1b52      	subs	r2, r2, r5
 8005246:	6122      	str	r2, [r4, #16]
 8005248:	f8cd a000 	str.w	sl, [sp]
 800524c:	464b      	mov	r3, r9
 800524e:	aa03      	add	r2, sp, #12
 8005250:	4621      	mov	r1, r4
 8005252:	4640      	mov	r0, r8
 8005254:	f7ff fee2 	bl	800501c <_printf_common>
 8005258:	3001      	adds	r0, #1
 800525a:	d14c      	bne.n	80052f6 <_printf_i+0x1fe>
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	b004      	add	sp, #16
 8005262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005266:	4835      	ldr	r0, [pc, #212]	; (800533c <_printf_i+0x244>)
 8005268:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800526c:	6829      	ldr	r1, [r5, #0]
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	f851 6b04 	ldr.w	r6, [r1], #4
 8005274:	6029      	str	r1, [r5, #0]
 8005276:	061d      	lsls	r5, r3, #24
 8005278:	d514      	bpl.n	80052a4 <_printf_i+0x1ac>
 800527a:	07df      	lsls	r7, r3, #31
 800527c:	bf44      	itt	mi
 800527e:	f043 0320 	orrmi.w	r3, r3, #32
 8005282:	6023      	strmi	r3, [r4, #0]
 8005284:	b91e      	cbnz	r6, 800528e <_printf_i+0x196>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	f023 0320 	bic.w	r3, r3, #32
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	2310      	movs	r3, #16
 8005290:	e7b0      	b.n	80051f4 <_printf_i+0xfc>
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f043 0320 	orr.w	r3, r3, #32
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	2378      	movs	r3, #120	; 0x78
 800529c:	4828      	ldr	r0, [pc, #160]	; (8005340 <_printf_i+0x248>)
 800529e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052a2:	e7e3      	b.n	800526c <_printf_i+0x174>
 80052a4:	0659      	lsls	r1, r3, #25
 80052a6:	bf48      	it	mi
 80052a8:	b2b6      	uxthmi	r6, r6
 80052aa:	e7e6      	b.n	800527a <_printf_i+0x182>
 80052ac:	4615      	mov	r5, r2
 80052ae:	e7bb      	b.n	8005228 <_printf_i+0x130>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	6826      	ldr	r6, [r4, #0]
 80052b4:	6961      	ldr	r1, [r4, #20]
 80052b6:	1d18      	adds	r0, r3, #4
 80052b8:	6028      	str	r0, [r5, #0]
 80052ba:	0635      	lsls	r5, r6, #24
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	d501      	bpl.n	80052c4 <_printf_i+0x1cc>
 80052c0:	6019      	str	r1, [r3, #0]
 80052c2:	e002      	b.n	80052ca <_printf_i+0x1d2>
 80052c4:	0670      	lsls	r0, r6, #25
 80052c6:	d5fb      	bpl.n	80052c0 <_printf_i+0x1c8>
 80052c8:	8019      	strh	r1, [r3, #0]
 80052ca:	2300      	movs	r3, #0
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	4615      	mov	r5, r2
 80052d0:	e7ba      	b.n	8005248 <_printf_i+0x150>
 80052d2:	682b      	ldr	r3, [r5, #0]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	602a      	str	r2, [r5, #0]
 80052d8:	681d      	ldr	r5, [r3, #0]
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	2100      	movs	r1, #0
 80052de:	4628      	mov	r0, r5
 80052e0:	f7fb f8b6 	bl	8000450 <memchr>
 80052e4:	b108      	cbz	r0, 80052ea <_printf_i+0x1f2>
 80052e6:	1b40      	subs	r0, r0, r5
 80052e8:	6060      	str	r0, [r4, #4]
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	2300      	movs	r3, #0
 80052f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f4:	e7a8      	b.n	8005248 <_printf_i+0x150>
 80052f6:	6923      	ldr	r3, [r4, #16]
 80052f8:	462a      	mov	r2, r5
 80052fa:	4649      	mov	r1, r9
 80052fc:	4640      	mov	r0, r8
 80052fe:	47d0      	blx	sl
 8005300:	3001      	adds	r0, #1
 8005302:	d0ab      	beq.n	800525c <_printf_i+0x164>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	079b      	lsls	r3, r3, #30
 8005308:	d413      	bmi.n	8005332 <_printf_i+0x23a>
 800530a:	68e0      	ldr	r0, [r4, #12]
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	4298      	cmp	r0, r3
 8005310:	bfb8      	it	lt
 8005312:	4618      	movlt	r0, r3
 8005314:	e7a4      	b.n	8005260 <_printf_i+0x168>
 8005316:	2301      	movs	r3, #1
 8005318:	4632      	mov	r2, r6
 800531a:	4649      	mov	r1, r9
 800531c:	4640      	mov	r0, r8
 800531e:	47d0      	blx	sl
 8005320:	3001      	adds	r0, #1
 8005322:	d09b      	beq.n	800525c <_printf_i+0x164>
 8005324:	3501      	adds	r5, #1
 8005326:	68e3      	ldr	r3, [r4, #12]
 8005328:	9903      	ldr	r1, [sp, #12]
 800532a:	1a5b      	subs	r3, r3, r1
 800532c:	42ab      	cmp	r3, r5
 800532e:	dcf2      	bgt.n	8005316 <_printf_i+0x21e>
 8005330:	e7eb      	b.n	800530a <_printf_i+0x212>
 8005332:	2500      	movs	r5, #0
 8005334:	f104 0619 	add.w	r6, r4, #25
 8005338:	e7f5      	b.n	8005326 <_printf_i+0x22e>
 800533a:	bf00      	nop
 800533c:	080056f1 	.word	0x080056f1
 8005340:	08005702 	.word	0x08005702

08005344 <memcpy>:
 8005344:	440a      	add	r2, r1
 8005346:	4291      	cmp	r1, r2
 8005348:	f100 33ff 	add.w	r3, r0, #4294967295
 800534c:	d100      	bne.n	8005350 <memcpy+0xc>
 800534e:	4770      	bx	lr
 8005350:	b510      	push	{r4, lr}
 8005352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800535a:	4291      	cmp	r1, r2
 800535c:	d1f9      	bne.n	8005352 <memcpy+0xe>
 800535e:	bd10      	pop	{r4, pc}

08005360 <memmove>:
 8005360:	4288      	cmp	r0, r1
 8005362:	b510      	push	{r4, lr}
 8005364:	eb01 0402 	add.w	r4, r1, r2
 8005368:	d902      	bls.n	8005370 <memmove+0x10>
 800536a:	4284      	cmp	r4, r0
 800536c:	4623      	mov	r3, r4
 800536e:	d807      	bhi.n	8005380 <memmove+0x20>
 8005370:	1e43      	subs	r3, r0, #1
 8005372:	42a1      	cmp	r1, r4
 8005374:	d008      	beq.n	8005388 <memmove+0x28>
 8005376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800537a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800537e:	e7f8      	b.n	8005372 <memmove+0x12>
 8005380:	4402      	add	r2, r0
 8005382:	4601      	mov	r1, r0
 8005384:	428a      	cmp	r2, r1
 8005386:	d100      	bne.n	800538a <memmove+0x2a>
 8005388:	bd10      	pop	{r4, pc}
 800538a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800538e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005392:	e7f7      	b.n	8005384 <memmove+0x24>

08005394 <_free_r>:
 8005394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005396:	2900      	cmp	r1, #0
 8005398:	d044      	beq.n	8005424 <_free_r+0x90>
 800539a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f1a1 0404 	sub.w	r4, r1, #4
 80053a6:	bfb8      	it	lt
 80053a8:	18e4      	addlt	r4, r4, r3
 80053aa:	f000 f913 	bl	80055d4 <__malloc_lock>
 80053ae:	4a1e      	ldr	r2, [pc, #120]	; (8005428 <_free_r+0x94>)
 80053b0:	9801      	ldr	r0, [sp, #4]
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	b933      	cbnz	r3, 80053c4 <_free_r+0x30>
 80053b6:	6063      	str	r3, [r4, #4]
 80053b8:	6014      	str	r4, [r2, #0]
 80053ba:	b003      	add	sp, #12
 80053bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053c0:	f000 b90e 	b.w	80055e0 <__malloc_unlock>
 80053c4:	42a3      	cmp	r3, r4
 80053c6:	d908      	bls.n	80053da <_free_r+0x46>
 80053c8:	6825      	ldr	r5, [r4, #0]
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	428b      	cmp	r3, r1
 80053ce:	bf01      	itttt	eq
 80053d0:	6819      	ldreq	r1, [r3, #0]
 80053d2:	685b      	ldreq	r3, [r3, #4]
 80053d4:	1949      	addeq	r1, r1, r5
 80053d6:	6021      	streq	r1, [r4, #0]
 80053d8:	e7ed      	b.n	80053b6 <_free_r+0x22>
 80053da:	461a      	mov	r2, r3
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b10b      	cbz	r3, 80053e4 <_free_r+0x50>
 80053e0:	42a3      	cmp	r3, r4
 80053e2:	d9fa      	bls.n	80053da <_free_r+0x46>
 80053e4:	6811      	ldr	r1, [r2, #0]
 80053e6:	1855      	adds	r5, r2, r1
 80053e8:	42a5      	cmp	r5, r4
 80053ea:	d10b      	bne.n	8005404 <_free_r+0x70>
 80053ec:	6824      	ldr	r4, [r4, #0]
 80053ee:	4421      	add	r1, r4
 80053f0:	1854      	adds	r4, r2, r1
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	d1e0      	bne.n	80053ba <_free_r+0x26>
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	6053      	str	r3, [r2, #4]
 80053fe:	4421      	add	r1, r4
 8005400:	6011      	str	r1, [r2, #0]
 8005402:	e7da      	b.n	80053ba <_free_r+0x26>
 8005404:	d902      	bls.n	800540c <_free_r+0x78>
 8005406:	230c      	movs	r3, #12
 8005408:	6003      	str	r3, [r0, #0]
 800540a:	e7d6      	b.n	80053ba <_free_r+0x26>
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	1961      	adds	r1, r4, r5
 8005410:	428b      	cmp	r3, r1
 8005412:	bf04      	itt	eq
 8005414:	6819      	ldreq	r1, [r3, #0]
 8005416:	685b      	ldreq	r3, [r3, #4]
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	bf04      	itt	eq
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	6054      	str	r4, [r2, #4]
 8005422:	e7ca      	b.n	80053ba <_free_r+0x26>
 8005424:	b003      	add	sp, #12
 8005426:	bd30      	pop	{r4, r5, pc}
 8005428:	20001b64 	.word	0x20001b64

0800542c <sbrk_aligned>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0e      	ldr	r6, [pc, #56]	; (8005468 <sbrk_aligned+0x3c>)
 8005430:	460c      	mov	r4, r1
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	4605      	mov	r5, r0
 8005436:	b911      	cbnz	r1, 800543e <sbrk_aligned+0x12>
 8005438:	f000 f8bc 	bl	80055b4 <_sbrk_r>
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 f8b7 	bl	80055b4 <_sbrk_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d00a      	beq.n	8005460 <sbrk_aligned+0x34>
 800544a:	1cc4      	adds	r4, r0, #3
 800544c:	f024 0403 	bic.w	r4, r4, #3
 8005450:	42a0      	cmp	r0, r4
 8005452:	d007      	beq.n	8005464 <sbrk_aligned+0x38>
 8005454:	1a21      	subs	r1, r4, r0
 8005456:	4628      	mov	r0, r5
 8005458:	f000 f8ac 	bl	80055b4 <_sbrk_r>
 800545c:	3001      	adds	r0, #1
 800545e:	d101      	bne.n	8005464 <sbrk_aligned+0x38>
 8005460:	f04f 34ff 	mov.w	r4, #4294967295
 8005464:	4620      	mov	r0, r4
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	20001b68 	.word	0x20001b68

0800546c <_malloc_r>:
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	1ccd      	adds	r5, r1, #3
 8005472:	f025 0503 	bic.w	r5, r5, #3
 8005476:	3508      	adds	r5, #8
 8005478:	2d0c      	cmp	r5, #12
 800547a:	bf38      	it	cc
 800547c:	250c      	movcc	r5, #12
 800547e:	2d00      	cmp	r5, #0
 8005480:	4607      	mov	r7, r0
 8005482:	db01      	blt.n	8005488 <_malloc_r+0x1c>
 8005484:	42a9      	cmp	r1, r5
 8005486:	d905      	bls.n	8005494 <_malloc_r+0x28>
 8005488:	230c      	movs	r3, #12
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	2600      	movs	r6, #0
 800548e:	4630      	mov	r0, r6
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	4e2e      	ldr	r6, [pc, #184]	; (8005550 <_malloc_r+0xe4>)
 8005496:	f000 f89d 	bl	80055d4 <__malloc_lock>
 800549a:	6833      	ldr	r3, [r6, #0]
 800549c:	461c      	mov	r4, r3
 800549e:	bb34      	cbnz	r4, 80054ee <_malloc_r+0x82>
 80054a0:	4629      	mov	r1, r5
 80054a2:	4638      	mov	r0, r7
 80054a4:	f7ff ffc2 	bl	800542c <sbrk_aligned>
 80054a8:	1c43      	adds	r3, r0, #1
 80054aa:	4604      	mov	r4, r0
 80054ac:	d14d      	bne.n	800554a <_malloc_r+0xde>
 80054ae:	6834      	ldr	r4, [r6, #0]
 80054b0:	4626      	mov	r6, r4
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	d140      	bne.n	8005538 <_malloc_r+0xcc>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	4631      	mov	r1, r6
 80054ba:	4638      	mov	r0, r7
 80054bc:	eb04 0803 	add.w	r8, r4, r3
 80054c0:	f000 f878 	bl	80055b4 <_sbrk_r>
 80054c4:	4580      	cmp	r8, r0
 80054c6:	d13a      	bne.n	800553e <_malloc_r+0xd2>
 80054c8:	6821      	ldr	r1, [r4, #0]
 80054ca:	3503      	adds	r5, #3
 80054cc:	1a6d      	subs	r5, r5, r1
 80054ce:	f025 0503 	bic.w	r5, r5, #3
 80054d2:	3508      	adds	r5, #8
 80054d4:	2d0c      	cmp	r5, #12
 80054d6:	bf38      	it	cc
 80054d8:	250c      	movcc	r5, #12
 80054da:	4629      	mov	r1, r5
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff ffa5 	bl	800542c <sbrk_aligned>
 80054e2:	3001      	adds	r0, #1
 80054e4:	d02b      	beq.n	800553e <_malloc_r+0xd2>
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	442b      	add	r3, r5
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	e00e      	b.n	800550c <_malloc_r+0xa0>
 80054ee:	6822      	ldr	r2, [r4, #0]
 80054f0:	1b52      	subs	r2, r2, r5
 80054f2:	d41e      	bmi.n	8005532 <_malloc_r+0xc6>
 80054f4:	2a0b      	cmp	r2, #11
 80054f6:	d916      	bls.n	8005526 <_malloc_r+0xba>
 80054f8:	1961      	adds	r1, r4, r5
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	6025      	str	r5, [r4, #0]
 80054fe:	bf18      	it	ne
 8005500:	6059      	strne	r1, [r3, #4]
 8005502:	6863      	ldr	r3, [r4, #4]
 8005504:	bf08      	it	eq
 8005506:	6031      	streq	r1, [r6, #0]
 8005508:	5162      	str	r2, [r4, r5]
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	4638      	mov	r0, r7
 800550e:	f104 060b 	add.w	r6, r4, #11
 8005512:	f000 f865 	bl	80055e0 <__malloc_unlock>
 8005516:	f026 0607 	bic.w	r6, r6, #7
 800551a:	1d23      	adds	r3, r4, #4
 800551c:	1af2      	subs	r2, r6, r3
 800551e:	d0b6      	beq.n	800548e <_malloc_r+0x22>
 8005520:	1b9b      	subs	r3, r3, r6
 8005522:	50a3      	str	r3, [r4, r2]
 8005524:	e7b3      	b.n	800548e <_malloc_r+0x22>
 8005526:	6862      	ldr	r2, [r4, #4]
 8005528:	42a3      	cmp	r3, r4
 800552a:	bf0c      	ite	eq
 800552c:	6032      	streq	r2, [r6, #0]
 800552e:	605a      	strne	r2, [r3, #4]
 8005530:	e7ec      	b.n	800550c <_malloc_r+0xa0>
 8005532:	4623      	mov	r3, r4
 8005534:	6864      	ldr	r4, [r4, #4]
 8005536:	e7b2      	b.n	800549e <_malloc_r+0x32>
 8005538:	4634      	mov	r4, r6
 800553a:	6876      	ldr	r6, [r6, #4]
 800553c:	e7b9      	b.n	80054b2 <_malloc_r+0x46>
 800553e:	230c      	movs	r3, #12
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4638      	mov	r0, r7
 8005544:	f000 f84c 	bl	80055e0 <__malloc_unlock>
 8005548:	e7a1      	b.n	800548e <_malloc_r+0x22>
 800554a:	6025      	str	r5, [r4, #0]
 800554c:	e7de      	b.n	800550c <_malloc_r+0xa0>
 800554e:	bf00      	nop
 8005550:	20001b64 	.word	0x20001b64

08005554 <_realloc_r>:
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	4680      	mov	r8, r0
 800555a:	4614      	mov	r4, r2
 800555c:	460e      	mov	r6, r1
 800555e:	b921      	cbnz	r1, 800556a <_realloc_r+0x16>
 8005560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	4611      	mov	r1, r2
 8005566:	f7ff bf81 	b.w	800546c <_malloc_r>
 800556a:	b92a      	cbnz	r2, 8005578 <_realloc_r+0x24>
 800556c:	f7ff ff12 	bl	8005394 <_free_r>
 8005570:	4625      	mov	r5, r4
 8005572:	4628      	mov	r0, r5
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	f000 f838 	bl	80055ec <_malloc_usable_size_r>
 800557c:	4284      	cmp	r4, r0
 800557e:	4607      	mov	r7, r0
 8005580:	d802      	bhi.n	8005588 <_realloc_r+0x34>
 8005582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005586:	d812      	bhi.n	80055ae <_realloc_r+0x5a>
 8005588:	4621      	mov	r1, r4
 800558a:	4640      	mov	r0, r8
 800558c:	f7ff ff6e 	bl	800546c <_malloc_r>
 8005590:	4605      	mov	r5, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d0ed      	beq.n	8005572 <_realloc_r+0x1e>
 8005596:	42bc      	cmp	r4, r7
 8005598:	4622      	mov	r2, r4
 800559a:	4631      	mov	r1, r6
 800559c:	bf28      	it	cs
 800559e:	463a      	movcs	r2, r7
 80055a0:	f7ff fed0 	bl	8005344 <memcpy>
 80055a4:	4631      	mov	r1, r6
 80055a6:	4640      	mov	r0, r8
 80055a8:	f7ff fef4 	bl	8005394 <_free_r>
 80055ac:	e7e1      	b.n	8005572 <_realloc_r+0x1e>
 80055ae:	4635      	mov	r5, r6
 80055b0:	e7df      	b.n	8005572 <_realloc_r+0x1e>
	...

080055b4 <_sbrk_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d06      	ldr	r5, [pc, #24]	; (80055d0 <_sbrk_r+0x1c>)
 80055b8:	2300      	movs	r3, #0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fb fdaa 	bl	8001118 <_sbrk>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_sbrk_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_sbrk_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20001b6c 	.word	0x20001b6c

080055d4 <__malloc_lock>:
 80055d4:	4801      	ldr	r0, [pc, #4]	; (80055dc <__malloc_lock+0x8>)
 80055d6:	f000 b811 	b.w	80055fc <__retarget_lock_acquire_recursive>
 80055da:	bf00      	nop
 80055dc:	20001b70 	.word	0x20001b70

080055e0 <__malloc_unlock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__malloc_unlock+0x8>)
 80055e2:	f000 b80c 	b.w	80055fe <__retarget_lock_release_recursive>
 80055e6:	bf00      	nop
 80055e8:	20001b70 	.word	0x20001b70

080055ec <_malloc_usable_size_r>:
 80055ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f0:	1f18      	subs	r0, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bfbc      	itt	lt
 80055f6:	580b      	ldrlt	r3, [r1, r0]
 80055f8:	18c0      	addlt	r0, r0, r3
 80055fa:	4770      	bx	lr

080055fc <__retarget_lock_acquire_recursive>:
 80055fc:	4770      	bx	lr

080055fe <__retarget_lock_release_recursive>:
 80055fe:	4770      	bx	lr

08005600 <_init>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr

0800560c <_fini>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr
