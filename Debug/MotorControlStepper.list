
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007450  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08007620  08007620  00017620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e4  08007fd8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08007fd8  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcf1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d75  00000000  00000000  0002df05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022723  00000000  00000000  00031578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ed3  00000000  00000000  00053c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2539  00000000  00000000  00066b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001390a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047dc  00000000  00000000  001390f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007608 	.word	0x08007608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007608 	.word	0x08007608

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f90:	b08f      	sub	sp, #60	; 0x3c
 8000f92:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 ff62 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f904 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f9d2 	bl	8001344 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f9a6 	bl	80012f0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000fa4:	f000 f96c 	bl	8001280 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  sprintf(Prefix, "Px;");
 8000fa8:	4962      	ldr	r1, [pc, #392]	; (8001134 <main+0x1a8>)
 8000faa:	4863      	ldr	r0, [pc, #396]	; (8001138 <main+0x1ac>)
 8000fac:	f004 f8b2 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, Prefix, sizeof(Prefix), 100);
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4960      	ldr	r1, [pc, #384]	; (8001138 <main+0x1ac>)
 8000fb6:	4861      	ldr	r0, [pc, #388]	; (800113c <main+0x1b0>)
 8000fb8:	f003 f856 	bl	8004068 <HAL_UART_Transmit>
  sprintf(HEADER1, "PulseEncoder;");
 8000fbc:	4960      	ldr	r1, [pc, #384]	; (8001140 <main+0x1b4>)
 8000fbe:	4861      	ldr	r0, [pc, #388]	; (8001144 <main+0x1b8>)
 8000fc0:	f004 f8a8 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2223      	movs	r2, #35	; 0x23
 8000fc8:	495e      	ldr	r1, [pc, #376]	; (8001144 <main+0x1b8>)
 8000fca:	485c      	ldr	r0, [pc, #368]	; (800113c <main+0x1b0>)
 8000fcc:	f003 f84c 	bl	8004068 <HAL_UART_Transmit>
  sprintf(HEADER2, "PositionMotor;");
 8000fd0:	495d      	ldr	r1, [pc, #372]	; (8001148 <main+0x1bc>)
 8000fd2:	485e      	ldr	r0, [pc, #376]	; (800114c <main+0x1c0>)
 8000fd4:	f004 f89e 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	2223      	movs	r2, #35	; 0x23
 8000fdc:	495b      	ldr	r1, [pc, #364]	; (800114c <main+0x1c0>)
 8000fde:	4857      	ldr	r0, [pc, #348]	; (800113c <main+0x1b0>)
 8000fe0:	f003 f842 	bl	8004068 <HAL_UART_Transmit>
  sprintf(HEADER3, "RevolutionMotor;");
 8000fe4:	495a      	ldr	r1, [pc, #360]	; (8001150 <main+0x1c4>)
 8000fe6:	485b      	ldr	r0, [pc, #364]	; (8001154 <main+0x1c8>)
 8000fe8:	f004 f894 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER3, sizeof(HEADER3), 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2223      	movs	r2, #35	; 0x23
 8000ff0:	4958      	ldr	r1, [pc, #352]	; (8001154 <main+0x1c8>)
 8000ff2:	4852      	ldr	r0, [pc, #328]	; (800113c <main+0x1b0>)
 8000ff4:	f003 f838 	bl	8004068 <HAL_UART_Transmit>
  sprintf(HEADER4, "KinematicPositionUnit;");
 8000ff8:	4957      	ldr	r1, [pc, #348]	; (8001158 <main+0x1cc>)
 8000ffa:	4858      	ldr	r0, [pc, #352]	; (800115c <main+0x1d0>)
 8000ffc:	f004 f88a 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	2223      	movs	r2, #35	; 0x23
 8001004:	4955      	ldr	r1, [pc, #340]	; (800115c <main+0x1d0>)
 8001006:	484d      	ldr	r0, [pc, #308]	; (800113c <main+0x1b0>)
 8001008:	f003 f82e 	bl	8004068 <HAL_UART_Transmit>
  sprintf(HEADER5, "KinematicSpeed[Rpm];");
 800100c:	4954      	ldr	r1, [pc, #336]	; (8001160 <main+0x1d4>)
 800100e:	4855      	ldr	r0, [pc, #340]	; (8001164 <main+0x1d8>)
 8001010:	f004 f880 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER5, sizeof(HEADER5), 100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2223      	movs	r2, #35	; 0x23
 8001018:	4952      	ldr	r1, [pc, #328]	; (8001164 <main+0x1d8>)
 800101a:	4848      	ldr	r0, [pc, #288]	; (800113c <main+0x1b0>)
 800101c:	f003 f824 	bl	8004068 <HAL_UART_Transmit>
  sprintf(Sufix, "Sx;\n");
 8001020:	4951      	ldr	r1, [pc, #324]	; (8001168 <main+0x1dc>)
 8001022:	4852      	ldr	r0, [pc, #328]	; (800116c <main+0x1e0>)
 8001024:	f004 f876 	bl	8005114 <siprintf>
  HAL_UART_Transmit(&huart2, Sufix, sizeof(Sufix), 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2203      	movs	r2, #3
 800102c:	494f      	ldr	r1, [pc, #316]	; (800116c <main+0x1e0>)
 800102e:	4843      	ldr	r0, [pc, #268]	; (800113c <main+0x1b0>)
 8001030:	f003 f81a 	bl	8004068 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f000 ff82 	bl	8001f40 <HAL_Delay>

  GetConstantFilter();
 800103c:	f000 fc68 	bl	8001910 <GetConstantFilter>
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */

	  	 if((KinematicSpeedRPSold == KinematicSpeedRPS) && (IncrementSpeedCheckDouble >=10))
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <main+0x1e4>)
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <main+0x1e8>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	d114      	bne.n	8001080 <main+0xf4>
 8001056:	4b48      	ldr	r3, [pc, #288]	; (8001178 <main+0x1ec>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b09      	cmp	r3, #9
 800105c:	d910      	bls.n	8001080 <main+0xf4>
	  	 {
	  		KinematicSpeedRPS = 0.0;
 800105e:	4b45      	ldr	r3, [pc, #276]	; (8001174 <main+0x1e8>)
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
	  		KinematicSpeedRPM = 0.0;
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <main+0x1f0>)
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
	  		KinematicSpeedUnit = 0.0;
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <main+0x1f4>)
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	  		KinematicSpeedRPSold = KinematicSpeedRPS;
 8001076:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <main+0x1e8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3d      	ldr	r2, [pc, #244]	; (8001170 <main+0x1e4>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e009      	b.n	8001094 <main+0x108>
	  	 }
	  	 else
	  	 {
	  		KinematicSpeedRPSold = KinematicSpeedRPS;
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <main+0x1e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a3a      	ldr	r2, [pc, #232]	; (8001170 <main+0x1e4>)
 8001086:	6013      	str	r3, [r2, #0]
	  		IncrementSpeedCheckDouble++;
 8001088:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <main+0x1ec>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <main+0x1ec>)
 8001092:	701a      	strb	r2, [r3, #0]
	  	 }

	     //TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6);

	     sprintf(MSG, "Px;%d;%d;%.3f;%.3f;%.3f;%.3f;%.3f;Sx\r",
 8001094:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <main+0x1f8>)
 8001096:	681e      	ldr	r6, [r3, #0]
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <main+0x1fc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <main+0x200>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa70 	bl	8000588 <__aeabi_f2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <main+0x204>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa69 	bl	8000588 <__aeabi_f2d>
 80010b6:	4680      	mov	r8, r0
 80010b8:	4689      	mov	r9, r1
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <main+0x1e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa62 	bl	8000588 <__aeabi_f2d>
 80010c4:	4682      	mov	sl, r0
 80010c6:	468b      	mov	fp, r1
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <main+0x1f0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa5b 	bl	8000588 <__aeabi_f2d>
 80010d2:	e9c7 0100 	strd	r0, r1, [r7]
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <main+0x1f4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa54 	bl	8000588 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010e8:	ed97 7b00 	vldr	d7, [r7]
 80010ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010f0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80010f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010f8:	e9cd 4500 	strd	r4, r5, [sp]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4632      	mov	r2, r6
 8001100:	4924      	ldr	r1, [pc, #144]	; (8001194 <main+0x208>)
 8001102:	4825      	ldr	r0, [pc, #148]	; (8001198 <main+0x20c>)
 8001104:	f004 f806 	bl	8005114 <siprintf>
				 PositionMotor,
				 KinematicPositionUnit,
				 KinematicSpeedRPS,
				 KinematicSpeedRPM,
				 KinematicSpeedUnit);
	 		 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 8001108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110c:	2264      	movs	r2, #100	; 0x64
 800110e:	4922      	ldr	r1, [pc, #136]	; (8001198 <main+0x20c>)
 8001110:	480a      	ldr	r0, [pc, #40]	; (800113c <main+0x1b0>)
 8001112:	f002 ffa9 	bl	8004068 <HAL_UART_Transmit>
	 	 sprintf(CR,"\n");   											//Indispensable for Send Value without error to row empty
 8001116:	4921      	ldr	r1, [pc, #132]	; (800119c <main+0x210>)
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <main+0x214>)
 800111a:	f003 fffb 	bl	8005114 <siprintf>
	 		 HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);        //Indispensable for Send Value without error to row empty
 800111e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001122:	2202      	movs	r2, #2
 8001124:	491e      	ldr	r1, [pc, #120]	; (80011a0 <main+0x214>)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <main+0x1b0>)
 8001128:	f002 ff9e 	bl	8004068 <HAL_UART_Transmit>
	    	 KinematicSpeedRPSold = KinematicSpeedRPS;
	    	 //KinematicSpeedRPMold = KinematicSpeedRPM;
	     	 }
	     */

		 HAL_Delay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f000 ff07 	bl	8001f40 <HAL_Delay>
	  	 if((KinematicSpeedRPSold == KinematicSpeedRPS) && (IncrementSpeedCheckDouble >=10))
 8001132:	e785      	b.n	8001040 <main+0xb4>
 8001134:	08007620 	.word	0x08007620
 8001138:	200002f8 	.word	0x200002f8
 800113c:	20000248 	.word	0x20000248
 8001140:	08007624 	.word	0x08007624
 8001144:	20000300 	.word	0x20000300
 8001148:	08007634 	.word	0x08007634
 800114c:	20000324 	.word	0x20000324
 8001150:	08007644 	.word	0x08007644
 8001154:	20000348 	.word	0x20000348
 8001158:	08007658 	.word	0x08007658
 800115c:	2000036c 	.word	0x2000036c
 8001160:	08007670 	.word	0x08007670
 8001164:	20000390 	.word	0x20000390
 8001168:	08007688 	.word	0x08007688
 800116c:	200002fc 	.word	0x200002fc
 8001170:	200003dc 	.word	0x200003dc
 8001174:	200003d4 	.word	0x200003d4
 8001178:	200003ec 	.word	0x200003ec
 800117c:	200003d8 	.word	0x200003d8
 8001180:	200003e0 	.word	0x200003e0
 8001184:	2000028c 	.word	0x2000028c
 8001188:	200003c8 	.word	0x200003c8
 800118c:	200003c4 	.word	0x200003c4
 8001190:	200003d0 	.word	0x200003d0
 8001194:	08007690 	.word	0x08007690
 8001198:	20000290 	.word	0x20000290
 800119c:	080076b8 	.word	0x080076b8
 80011a0:	200002f4 	.word	0x200002f4

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fb3c 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <SystemClock_Config+0xd4>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <SystemClock_Config+0xd4>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <SystemClock_Config+0xd4>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <SystemClock_Config+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011f0:	4a22      	ldr	r2, [pc, #136]	; (800127c <SystemClock_Config+0xd8>)
 80011f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <SystemClock_Config+0xd8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001204:	2302      	movs	r3, #2
 8001206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120c:	2310      	movs	r3, #16
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001210:	2302      	movs	r3, #2
 8001212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2300      	movs	r3, #0
 8001216:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001218:	2310      	movs	r3, #16
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800121c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001226:	2302      	movs	r3, #2
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4618      	mov	r0, r3
 8001234:	f001 ffae 	bl	8003194 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800123e:	f000 fc29 	bl	8001a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001242:	230f      	movs	r3, #15
 8001244:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800124e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	2102      	movs	r1, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fb8e 	bl	8002980 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800126a:	f000 fc13 	bl	8001a94 <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	; 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001286:	463b      	mov	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM6_Init+0x68>)
 8001290:	4a16      	ldr	r2, [pc, #88]	; (80012ec <MX_TIM6_Init+0x6c>)
 8001292:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_TIM6_Init+0x68>)
 8001296:	2229      	movs	r2, #41	; 0x29
 8001298:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <MX_TIM6_Init+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_TIM6_Init+0x68>)
 80012a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_TIM6_Init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_TIM6_Init+0x68>)
 80012b0:	f002 facc 	bl	800384c <HAL_TIM_Base_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012ba:	f000 fbeb 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM6_Init+0x68>)
 80012cc:	f002 fd14 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012d6:	f000 fbdd 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Start Timer
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM6_Init+0x68>)
 80012dc:	f002 fba6 	bl	8003a2c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000200 	.word	0x20000200
 80012ec:	40001000 	.word	0x40001000

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200; //115200 Baudrate
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f002 fdc4 	bl	8003eb4 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 fbaf 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000248 	.word	0x20000248
 8001340:	40004400 	.word	0x40004400

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <MX_GPIO_Init+0x188>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a5a      	ldr	r2, [pc, #360]	; (80014cc <MX_GPIO_Init+0x188>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b58      	ldr	r3, [pc, #352]	; (80014cc <MX_GPIO_Init+0x188>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <MX_GPIO_Init+0x188>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a53      	ldr	r2, [pc, #332]	; (80014cc <MX_GPIO_Init+0x188>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <MX_GPIO_Init+0x188>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <MX_GPIO_Init+0x188>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <MX_GPIO_Init+0x188>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <MX_GPIO_Init+0x188>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b46      	ldr	r3, [pc, #280]	; (80014cc <MX_GPIO_Init+0x188>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a45      	ldr	r2, [pc, #276]	; (80014cc <MX_GPIO_Init+0x188>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b43      	ldr	r3, [pc, #268]	; (80014cc <MX_GPIO_Init+0x188>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7148 	mov.w	r1, #800	; 0x320
 80013d0:	483f      	ldr	r0, [pc, #252]	; (80014d0 <MX_GPIO_Init+0x18c>)
 80013d2:	f001 fa63 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80013dc:	483d      	ldr	r0, [pc, #244]	; (80014d4 <MX_GPIO_Init+0x190>)
 80013de:	f001 fa5d 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	483c      	ldr	r0, [pc, #240]	; (80014d8 <MX_GPIO_Init+0x194>)
 80013e8:	f001 fa58 	bl	800289c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4835      	ldr	r0, [pc, #212]	; (80014d8 <MX_GPIO_Init+0x194>)
 8001404:	f000 ff00 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 8001408:	2303      	movs	r3, #3
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800140c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	482c      	ldr	r0, [pc, #176]	; (80014d0 <MX_GPIO_Init+0x18c>)
 800141e:	f000 fef3 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 8001422:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4825      	ldr	r0, [pc, #148]	; (80014d0 <MX_GPIO_Init+0x18c>)
 800143c:	f000 fee4 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 8001440:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	481e      	ldr	r0, [pc, #120]	; (80014d4 <MX_GPIO_Init+0x190>)
 800145a:	f000 fed5 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_GPIO_Init+0x194>)
 8001476:	f000 fec7 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 800147a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_GPIO_Init+0x18c>)
 8001490:	f000 feba 	bl	8002208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2006      	movs	r0, #6
 800149a:	f000 fe65 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800149e:	2006      	movs	r0, #6
 80014a0:	f000 fe8e 	bl	80021c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2007      	movs	r0, #7
 80014aa:	f000 fe5d 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ae:	2007      	movs	r0, #7
 80014b0:	f000 fe86 	bl	80021c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2028      	movs	r0, #40	; 0x28
 80014ba:	f000 fe55 	bl	8002168 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014be:	2028      	movs	r0, #40	; 0x28
 80014c0:	f000 fe7e 	bl	80021c0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800

080014dc <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 80014dc:	b598      	push	{r3, r4, r7, lr}
 80014de:	af00      	add	r7, sp, #0
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80014e0:	2102      	movs	r1, #2
 80014e2:	4808      	ldr	r0, [pc, #32]	; (8001504 <rot_get_state+0x28>)
 80014e4:	f001 f9b4 	bl	8002850 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 80014ec:	b25c      	sxtb	r4, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <rot_get_state+0x28>)
 80014f2:	f001 f9ad 	bl	8002850 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4323      	orrs	r3, r4
 80014fc:	b25b      	sxtb	r3, r3
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80014fe:	b2db      	uxtb	r3, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd98      	pop	{r3, r4, r7, pc}
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_GPIO_EXTI_Callback>:
/* Use Interrupt callback for determinate the count encoder and direction
 * The Encoder Have a 2048 pulse/rot, in this implementation do it increment counter POSITION four time at impulse
 * Example 1rev/8192 pulse
 * PIN ENCODER A0 COUNT AND A1 DIRECTION
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direct_Pin) {
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_EXTI_Callback+0x18>
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	2b02      	cmp	r3, #2
 800151c:	f040 8082 	bne.w	8001624 <HAL_GPIO_EXTI_Callback+0x11c>

		rot_new_state = rot_get_state();
 8001520:	f7ff ffdc 	bl	80014dc <rot_get_state>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 800152a:	701a      	strb	r2, [r3, #0]

		//DBG("%d:%d", rot_old_state, rot_new_state);

		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d109      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x40>
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x40>
			EncoderCount++;
 800153c:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e060      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 8001548:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d109      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x5c>
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x5c>
			EncoderCount++;
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a35      	ldr	r2, [pc, #212]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e052      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8001564:	4b32      	ldr	r3, [pc, #200]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x78>
 800156c:	4b2f      	ldr	r3, [pc, #188]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d105      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x78>
			EncoderCount++;
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a2e      	ldr	r2, [pc, #184]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e044      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d109      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x94>
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d105      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0x94>
			EncoderCount++;
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a27      	ldr	r2, [pc, #156]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e036      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d109      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0xb0>
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0xb0>
			EncoderCount--;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e028      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d109      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xcc>
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xcc>
			EncoderCount--;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01a      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0xe8>
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d105      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0xe8>
			EncoderCount--;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e00c      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d108      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d104      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x102>
			EncoderCount--;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3b01      	subs	r3, #1
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001608:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_GPIO_EXTI_Callback+0x124>)
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_GPIO_EXTI_Callback+0x128>)
 8001610:	701a      	strb	r2, [r3, #0]
		Calculate_Rotation(EncoderPulse,RevoluctionFactor);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_GPIO_EXTI_Callback+0x130>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_GPIO_EXTI_Callback+0x134>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	4610      	mov	r0, r2
 8001620:	f000 f80e 	bl	8001640 <Calculate_Rotation>
	}
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200003c0 	.word	0x200003c0
 8001630:	200003c1 	.word	0x200003c1
 8001634:	2000028c 	.word	0x2000028c
 8001638:	20000002 	.word	0x20000002
 800163c:	20000004 	.word	0x20000004

08001640 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	80fb      	strh	r3, [r7, #6]
 800164c:	4613      	mov	r3, r2
 800164e:	80bb      	strh	r3, [r7, #4]
EncoderPosition = EncoderCount/4.0;   // Single Event Encoder 1*4 in Single Counter
 8001650:	4b9b      	ldr	r3, [pc, #620]	; (80018c0 <Calculate_Rotation+0x280>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff85 	bl	8000564 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <Calculate_Rotation+0x284>)
 8001660:	f7ff f914 	bl	800088c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa94 	bl	8000b98 <__aeabi_d2iz>
 8001670:	4603      	mov	r3, r0
 8001672:	4a95      	ldr	r2, [pc, #596]	; (80018c8 <Calculate_Rotation+0x288>)
 8001674:	6013      	str	r3, [r2, #0]
EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 8001676:	4b94      	ldr	r3, [pc, #592]	; (80018c8 <Calculate_Rotation+0x288>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001682:	4b92      	ldr	r3, [pc, #584]	; (80018cc <Calculate_Rotation+0x28c>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 8001688:	4b90      	ldr	r3, [pc, #576]	; (80018cc <Calculate_Rotation+0x28c>)
 800168a:	edd3 6a00 	vldr	s13, [r3]
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169c:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <Calculate_Rotation+0x290>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ac:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <Calculate_Rotation+0x290>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b6:	4b87      	ldr	r3, [pc, #540]	; (80018d4 <Calculate_Rotation+0x294>)
 80016b8:	edc3 7a00 	vstr	s15, [r3]

TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6); // Get current time (microseconds)
 80016bc:	4b86      	ldr	r3, [pc, #536]	; (80018d8 <Calculate_Rotation+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b85      	ldr	r3, [pc, #532]	; (80018dc <Calculate_Rotation+0x29c>)
 80016c6:	801a      	strh	r2, [r3, #0]

if(TM6_Currentvalue >= TM6_OldValue)
 80016c8:	4b84      	ldr	r3, [pc, #528]	; (80018dc <Calculate_Rotation+0x29c>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <Calculate_Rotation+0x2a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f0c0 80dd 	bcc.w	8001894 <Calculate_Rotation+0x254>
{
	TM6_DiffCaunter = (TM6_Currentvalue - TM6_OldValue); // Calculate time from count to count
 80016da:	4b80      	ldr	r3, [pc, #512]	; (80018dc <Calculate_Rotation+0x29c>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <Calculate_Rotation+0x2a0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a7e      	ldr	r2, [pc, #504]	; (80018e4 <Calculate_Rotation+0x2a4>)
 80016ea:	6013      	str	r3, [r2, #0]
	if (FilterSpeedEnable == 1)  // 25Hz CutOff Low-Pass Filter
 80016ec:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <Calculate_Rotation+0x2a8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f040 8089 	bne.w	8001808 <Calculate_Rotation+0x1c8>
	{
		KinematicSpeedRPSToFiler = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 80016f6:	4b7b      	ldr	r3, [pc, #492]	; (80018e4 <Calculate_Rotation+0x2a4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff22 	bl	8000544 <__aeabi_ui2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	a168      	add	r1, pc, #416	; (adr r1, 80018a8 <Calculate_Rotation+0x268>)
 8001706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	461d      	mov	r5, r3
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff22 	bl	8000564 <__aeabi_i2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7ff f8b0 	bl	800088c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa58 	bl	8000be8 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	4a6c      	ldr	r2, [pc, #432]	; (80018ec <Calculate_Rotation+0x2ac>)
 800173c:	6013      	str	r3, [r2, #0]
		KinematicSpeedRPS = ((0.854*RPSSpeedFilter) + (0.0728*KinematicSpeedRPSToFiler) + (0.0728*RPSSpeedFilterPrev));
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <Calculate_Rotation+0x2b0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff20 	bl	8000588 <__aeabi_f2d>
 8001748:	a359      	add	r3, pc, #356	; (adr r3, 80018b0 <Calculate_Rotation+0x270>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe ff73 	bl	8000638 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4614      	mov	r4, r2
 8001758:	461d      	mov	r5, r3
 800175a:	4b64      	ldr	r3, [pc, #400]	; (80018ec <Calculate_Rotation+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ff12 	bl	8000588 <__aeabi_f2d>
 8001764:	a354      	add	r3, pc, #336	; (adr r3, 80018b8 <Calculate_Rotation+0x278>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff65 	bl	8000638 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7fe fda9 	bl	80002cc <__adddf3>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4614      	mov	r4, r2
 8001780:	461d      	mov	r5, r3
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <Calculate_Rotation+0x2b4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fefe 	bl	8000588 <__aeabi_f2d>
 800178c:	a34a      	add	r3, pc, #296	; (adr r3, 80018b8 <Calculate_Rotation+0x278>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe ff51 	bl	8000638 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4620      	mov	r0, r4
 800179c:	4629      	mov	r1, r5
 800179e:	f7fe fd95 	bl	80002cc <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff fa1d 	bl	8000be8 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a51      	ldr	r2, [pc, #324]	; (80018f8 <Calculate_Rotation+0x2b8>)
 80017b2:	6013      	str	r3, [r2, #0]
		KinematicSpeedRPM = (KinematicSpeedRPS * 60.0); //Calculate RPM Speed
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <Calculate_Rotation+0x2b8>)
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80018fc <Calculate_Rotation+0x2bc>
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <Calculate_Rotation+0x2c0>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
		KinematicSpeedUnit = (KinematicSpeedRPM * RevoluctionFactorSet);
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <Calculate_Rotation+0x2c0>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	4b49      	ldr	r3, [pc, #292]	; (8001904 <Calculate_Rotation+0x2c4>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <Calculate_Rotation+0x29c>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <Calculate_Rotation+0x2a0>)
 80017ec:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 80017ee:	2120      	movs	r1, #32
 80017f0:	4845      	ldr	r0, [pc, #276]	; (8001908 <Calculate_Rotation+0x2c8>)
 80017f2:	f001 f885 	bl	8002900 <HAL_GPIO_TogglePin>
		RPSSpeedFilterPrev = KinematicSpeedRPSToFiler;
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <Calculate_Rotation+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a3e      	ldr	r2, [pc, #248]	; (80018f4 <Calculate_Rotation+0x2b4>)
 80017fc:	6013      	str	r3, [r2, #0]
		RPSSpeedFilter = KinematicSpeedRPS;
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <Calculate_Rotation+0x2b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a3b      	ldr	r2, [pc, #236]	; (80018f0 <Calculate_Rotation+0x2b0>)
 8001804:	6013      	str	r3, [r2, #0]
else
{
	TM6_OldValue = TM6_Currentvalue;
}

}
 8001806:	e04b      	b.n	80018a0 <Calculate_Rotation+0x260>
		KinematicSpeedRPS = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001808:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <Calculate_Rotation+0x2a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe99 	bl	8000544 <__aeabi_ui2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	a124      	add	r1, pc, #144	; (adr r1, 80018a8 <Calculate_Rotation+0x268>)
 8001818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181c:	f7ff f836 	bl	800088c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4614      	mov	r4, r2
 8001826:	461d      	mov	r5, r3
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe99 	bl	8000564 <__aeabi_i2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7ff f827 	bl	800088c <__aeabi_ddiv>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f9cf 	bl	8000be8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a2a      	ldr	r2, [pc, #168]	; (80018f8 <Calculate_Rotation+0x2b8>)
 800184e:	6013      	str	r3, [r2, #0]
		KinematicSpeedRPM = (KinematicSpeedRPS * 60.0); //Calculate RPM Speed
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <Calculate_Rotation+0x2b8>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80018fc <Calculate_Rotation+0x2bc>
 800185a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <Calculate_Rotation+0x2c0>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
		KinematicSpeedUnit = (KinematicSpeedRPM * RevoluctionFactorSet);
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	ee07 3a90 	vmov	s15, r3
 800186a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <Calculate_Rotation+0x2c0>)
 8001870:	edd3 7a00 	vldr	s15, [r3]
 8001874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <Calculate_Rotation+0x2c4>)
 800187a:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <Calculate_Rotation+0x29c>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	461a      	mov	r2, r3
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <Calculate_Rotation+0x2a0>)
 8001888:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 800188a:	2120      	movs	r1, #32
 800188c:	481e      	ldr	r0, [pc, #120]	; (8001908 <Calculate_Rotation+0x2c8>)
 800188e:	f001 f837 	bl	8002900 <HAL_GPIO_TogglePin>
}
 8001892:	e005      	b.n	80018a0 <Calculate_Rotation+0x260>
	TM6_OldValue = TM6_Currentvalue;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <Calculate_Rotation+0x29c>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	461a      	mov	r2, r3
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <Calculate_Rotation+0x2a0>)
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	00000000 	.word	0x00000000
 80018ac:	412e8480 	.word	0x412e8480
 80018b0:	ced91687 	.word	0xced91687
 80018b4:	3feb53f7 	.word	0x3feb53f7
 80018b8:	532617c2 	.word	0x532617c2
 80018bc:	3fb2a305 	.word	0x3fb2a305
 80018c0:	2000028c 	.word	0x2000028c
 80018c4:	40100000 	.word	0x40100000
 80018c8:	200003c8 	.word	0x200003c8
 80018cc:	200003cc 	.word	0x200003cc
 80018d0:	200003c4 	.word	0x200003c4
 80018d4:	200003d0 	.word	0x200003d0
 80018d8:	20000200 	.word	0x20000200
 80018dc:	200003ee 	.word	0x200003ee
 80018e0:	200003e8 	.word	0x200003e8
 80018e4:	200003e4 	.word	0x200003e4
 80018e8:	20000000 	.word	0x20000000
 80018ec:	200003bc 	.word	0x200003bc
 80018f0:	200003b4 	.word	0x200003b4
 80018f4:	200003b8 	.word	0x200003b8
 80018f8:	200003d4 	.word	0x200003d4
 80018fc:	42700000 	.word	0x42700000
 8001900:	200003d8 	.word	0x200003d8
 8001904:	200003e0 	.word	0x200003e0
 8001908:	40020000 	.word	0x40020000
 800190c:	00000000 	.word	0x00000000

08001910 <GetConstantFilter>:

void GetConstantFilter()
{
 8001910:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af00      	add	r7, sp, #0
	float b0 = 0.0;
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
	float b1 = 0.0;
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
	float b2 = 0.0;
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
	float a1 = 0.0;
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
	float a2 = 0.0;
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
    const double ita =1.0/ tan(42*0.25);  //Sampling Freq: 10kHz   Cut-off Freq: 1kHz
 8001936:	a353      	add	r3, pc, #332	; (adr r3, 8001a84 <GetConstantFilter+0x174>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    const double q=sqrt(2.0);
 8001940:	a352      	add	r3, pc, #328	; (adr r3, 8001a8c <GetConstantFilter+0x17c>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	e9c7 2300 	strd	r2, r3, [r7]
    b0 = 1.0 / (1.0 + q*ita + ita*ita);
 800194a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800194e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001952:	f7fe fe71 	bl	8000638 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b47      	ldr	r3, [pc, #284]	; (8001a80 <GetConstantFilter+0x170>)
 8001964:	f7fe fcb2 	bl	80002cc <__adddf3>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4690      	mov	r8, r2
 800196e:	4699      	mov	r9, r3
 8001970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001974:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001978:	f7fe fe5e 	bl	8000638 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4640      	mov	r0, r8
 8001982:	4649      	mov	r1, r9
 8001984:	f7fe fca2 	bl	80002cc <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	f04f 0000 	mov.w	r0, #0
 8001990:	493b      	ldr	r1, [pc, #236]	; (8001a80 <GetConstantFilter+0x170>)
 8001992:	f7fe ff7b 	bl	800088c <__aeabi_ddiv>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f923 	bl	8000be8 <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    b1= 2*b0;
 80019a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ae:	edc7 7a08 	vstr	s15, [r7, #32]
    b2= b0;
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	61fb      	str	r3, [r7, #28]
    a1 = 2.0 * (ita*ita - 1.0) * b0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019be:	f7fe fe3b 	bl	8000638 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <GetConstantFilter+0x170>)
 80019d0:	f7fe fc7a 	bl	80002c8 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	f7fe fc74 	bl	80002cc <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4690      	mov	r8, r2
 80019ea:	4699      	mov	r9, r3
 80019ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019ee:	f7fe fdcb 	bl	8000588 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4640      	mov	r0, r8
 80019f8:	4649      	mov	r1, r9
 80019fa:	f7fe fe1d 	bl	8000638 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f8ef 	bl	8000be8 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
    a2 = -(1.0 - q*ita + ita*ita) * b0;
 8001a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a16:	f7fe fe0f 	bl	8000638 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	4917      	ldr	r1, [pc, #92]	; (8001a80 <GetConstantFilter+0x170>)
 8001a24:	f7fe fc50 	bl	80002c8 <__aeabi_dsub>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	4699      	mov	r9, r3
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a38:	f7fe fdfe 	bl	8000638 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4640      	mov	r0, r8
 8001a42:	4649      	mov	r1, r9
 8001a44:	f7fe fc42 	bl	80002cc <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a54:	f7fe fd98 	bl	8000588 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fdea 	bl	8000638 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f8bc 	bl	8000be8 <__aeabi_d2f>
 8001a70:	4603      	mov	r3, r0
 8001a72:	617b      	str	r3, [r7, #20]
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a7e:	bf00      	nop
 8001a80:	3ff00000 	.word	0x3ff00000
 8001a84:	f55db5b5 	.word	0xf55db5b5
 8001a88:	3fe14c58 	.word	0x3fe14c58
 8001a8c:	667f3bcd 	.word	0x667f3bcd
 8001a90:	3ff6a09e 	.word	0x3ff6a09e

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>

08001a9e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <HAL_MspInit+0x4c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a08      	ldr	r2, [pc, #32]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_MspInit+0x4c>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001af2:	2007      	movs	r0, #7
 8001af4:	f000 fb18 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800

08001b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <HAL_TIM_Base_MspInit+0x3c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10d      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_TIM_Base_MspInit+0x40>)
 8001b20:	f043 0310 	orr.w	r3, r3, #16
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_TIM_Base_MspInit+0x40>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40001000 	.word	0x40001000
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_UART_MspInit+0x84>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d12b      	bne.n	8001bc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_UART_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_UART_MspInit+0x8c>)
 8001bbe:	f000 fb23 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	; 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <NMI_Handler+0x4>

08001bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <MemManage_Handler+0x4>

08001bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <BusFault_Handler+0x4>

08001bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <UsageFault_Handler+0x4>

08001bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c24:	f000 f96c 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 fe8d 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f000 fe86 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c50:	f000 fe7e 	bl	8002950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c72:	f002 fdb3 	bl	80047dc <__errno>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2216      	movs	r2, #22
 8001c7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe7 	bl	8001c68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9a:	e7fe      	b.n	8001c9a <_exit+0x12>

08001c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e00a      	b.n	8001cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf0      	blt.n	8001cae <_read+0x12>
  }

  return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e009      	b.n	8001cfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf1      	blt.n	8001ce8 <_write+0x12>
  }
  return len;
 8001d04:	687b      	ldr	r3, [r7, #4]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_close>:

int _close(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d36:	605a      	str	r2, [r3, #4]
  return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_isatty>:

int _isatty(int file)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f002 fd18 	bl	80047dc <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20020000 	.word	0x20020000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	200003f0 	.word	0x200003f0
 8001de0:	20000408 	.word	0x20000408

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	; (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ffd7 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f002 fcd7 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff f8a7 	bl	8000f8c <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e4c:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8001e50:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e54:	20000408 	.word	0x20000408

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f94f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fe10 	bl	8001ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f996 	bl	80021f0 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f944 	bl	8002168 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000010 	.word	0x20000010
 8001f24:	200003f4 	.word	0x200003f4

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200003f4 	.word	0x200003f4

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000010 	.word	0x20000010

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b07      	cmp	r3, #7
 8002134:	d00f      	beq.n	8002156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d00c      	beq.n	8002156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d009      	beq.n	8002156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d006      	beq.n	8002156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d003      	beq.n	8002156 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800214e:	2190      	movs	r1, #144	; 0x90
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002152:	f7ff fca4 	bl	8001a9e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ff16 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	080076bc 	.word	0x080076bc

08002168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d903      	bls.n	8002188 <HAL_NVIC_SetPriority+0x20>
 8002180:	21a8      	movs	r1, #168	; 0xa8
 8002182:	480e      	ldr	r0, [pc, #56]	; (80021bc <HAL_NVIC_SetPriority+0x54>)
 8002184:	f7ff fc8b 	bl	8001a9e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	d903      	bls.n	8002196 <HAL_NVIC_SetPriority+0x2e>
 800218e:	21a9      	movs	r1, #169	; 0xa9
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <HAL_NVIC_SetPriority+0x54>)
 8002192:	f7ff fc84 	bl	8001a9e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002196:	f7ff ff1b 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800219a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	6978      	ldr	r0, [r7, #20]
 80021a2:	f7ff ff6b 	bl	800207c <NVIC_EncodePriority>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff3a 	bl	8002028 <__NVIC_SetPriority>
}
 80021b4:	bf00      	nop
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	080076bc 	.word	0x080076bc

080021c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da03      	bge.n	80021da <HAL_NVIC_EnableIRQ+0x1a>
 80021d2:	21bc      	movs	r1, #188	; 0xbc
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_NVIC_EnableIRQ+0x2c>)
 80021d6:	f7ff fc62 	bl	8001a9e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff04 	bl	8001fec <__NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	080076bc 	.word	0x080076bc

080021f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff73 	bl	80020e4 <SysTick_Config>
 80021fe:	4603      	mov	r3, r0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a37      	ldr	r2, [pc, #220]	; (8002300 <HAL_GPIO_Init+0xf8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a36      	ldr	r2, [pc, #216]	; (8002304 <HAL_GPIO_Init+0xfc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01b      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <HAL_GPIO_Init+0x100>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d017      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_GPIO_Init+0x104>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a33      	ldr	r2, [pc, #204]	; (8002310 <HAL_GPIO_Init+0x108>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00f      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a32      	ldr	r2, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x10c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00b      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_GPIO_Init+0x110>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d007      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_GPIO_Init+0x114>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_Init+0x5e>
 800225e:	21ac      	movs	r1, #172	; 0xac
 8002260:	482f      	ldr	r0, [pc, #188]	; (8002320 <HAL_GPIO_Init+0x118>)
 8002262:	f7ff fc1c 	bl	8001a9e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_GPIO_Init+0x74>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x7c>
 800227c:	21ad      	movs	r1, #173	; 0xad
 800227e:	4828      	ldr	r0, [pc, #160]	; (8002320 <HAL_GPIO_Init+0x118>)
 8002280:	f7ff fc0d 	bl	8001a9e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d035      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d031      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b11      	cmp	r3, #17
 800229a:	d02d      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d029      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b12      	cmp	r3, #18
 80022aa:	d025      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80022b4:	d020      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80022be:	d01b      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80022c8:	d016      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80022d2:	d011      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80022dc:	d00c      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80022e6:	d007      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
 80022f0:	21ae      	movs	r1, #174	; 0xae
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <HAL_GPIO_Init+0x118>)
 80022f4:	f7ff fbd3 	bl	8001a9e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	e289      	b.n	8002812 <HAL_GPIO_Init+0x60a>
 80022fe:	bf00      	nop
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021800 	.word	0x40021800
 800231c:	40021c00 	.word	0x40021c00
 8002320:	08007734 	.word	0x08007734
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8265 	bne.w	800280c <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d005      	beq.n	800235a <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002356:	2b02      	cmp	r3, #2
 8002358:	d144      	bne.n	80023e4 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00f      	beq.n	8002382 <HAL_GPIO_Init+0x17a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d00b      	beq.n	8002382 <HAL_GPIO_Init+0x17a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x17a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x17a>
 800237a:	21c0      	movs	r1, #192	; 0xc0
 800237c:	4831      	ldr	r0, [pc, #196]	; (8002444 <HAL_GPIO_Init+0x23c>)
 800237e:	f7ff fb8e 	bl	8001a9e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0201 	and.w	r2, r3, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d02b      	beq.n	8002448 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_GPIO_Init+0x208>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x208>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x208>
 8002408:	21d1      	movs	r1, #209	; 0xd1
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <HAL_GPIO_Init+0x23c>)
 800240c:	f7ff fb47 	bl	8001a9e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x240>
 8002442:	bf00      	nop
 8002444:	08007734 	.word	0x08007734
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b02      	cmp	r3, #2
 8002452:	f040 810c 	bne.w	800266e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80e3 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b09      	cmp	r3, #9
 8002466:	f000 80de 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d9 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80d4 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80cf 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80ca 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	f000 80c5 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	f000 80c0 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	f000 80bb 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 80b6 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f000 80b1 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	f000 80ac 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	f000 80a7 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b04      	cmp	r3, #4
 80024de:	f000 80a2 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	f000 809d 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	f000 8098 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	f000 8093 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b09      	cmp	r3, #9
 8002506:	f000 808e 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b06      	cmp	r3, #6
 8002510:	f000 8089 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2b09      	cmp	r3, #9
 800251a:	f000 8084 	beq.w	8002626 <HAL_GPIO_Init+0x41e>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b07      	cmp	r3, #7
 8002524:	d07f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b07      	cmp	r3, #7
 800252c:	d07b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b07      	cmp	r3, #7
 8002534:	d077      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b08      	cmp	r3, #8
 800253c:	d073      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b08      	cmp	r3, #8
 8002544:	d06f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d06b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b09      	cmp	r3, #9
 8002554:	d067      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b09      	cmp	r3, #9
 800255c:	d063      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d05f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d05b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b0b      	cmp	r3, #11
 8002574:	d057      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d053      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d04f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b0d      	cmp	r3, #13
 800258c:	d04b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	d047      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d043      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d03f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d03b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d037      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d033      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d02f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d02b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d027      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b07      	cmp	r3, #7
 80025dc:	d023      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b07      	cmp	r3, #7
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	d01b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b07      	cmp	r3, #7
 80025f4:	d017      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b08      	cmp	r3, #8
 8002604:	d00f      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b09      	cmp	r3, #9
 800260c:	d00b      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d007      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x41e>
 800261e:	21de      	movs	r1, #222	; 0xde
 8002620:	4880      	ldr	r0, [pc, #512]	; (8002824 <HAL_GPIO_Init+0x61c>)
 8002622:	f7ff fa3c 	bl	8001a9e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	08da      	lsrs	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3208      	adds	r2, #8
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	220f      	movs	r2, #15
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	69b9      	ldr	r1, [r7, #24]
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0203 	and.w	r2, r3, #3
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80ae 	beq.w	800280c <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_GPIO_Init+0x620>)
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	4a5b      	ldr	r2, [pc, #364]	; (8002828 <HAL_GPIO_Init+0x620>)
 80026ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026be:	6453      	str	r3, [r2, #68]	; 0x44
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_GPIO_Init+0x620>)
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026cc:	4a57      	ldr	r2, [pc, #348]	; (800282c <HAL_GPIO_Init+0x624>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a4f      	ldr	r2, [pc, #316]	; (8002830 <HAL_GPIO_Init+0x628>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d025      	beq.n	8002744 <HAL_GPIO_Init+0x53c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4e      	ldr	r2, [pc, #312]	; (8002834 <HAL_GPIO_Init+0x62c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d01f      	beq.n	8002740 <HAL_GPIO_Init+0x538>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_GPIO_Init+0x630>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d019      	beq.n	800273c <HAL_GPIO_Init+0x534>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4c      	ldr	r2, [pc, #304]	; (800283c <HAL_GPIO_Init+0x634>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <HAL_GPIO_Init+0x530>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4b      	ldr	r2, [pc, #300]	; (8002840 <HAL_GPIO_Init+0x638>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00d      	beq.n	8002734 <HAL_GPIO_Init+0x52c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a4a      	ldr	r2, [pc, #296]	; (8002844 <HAL_GPIO_Init+0x63c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <HAL_GPIO_Init+0x528>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_GPIO_Init+0x640>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d101      	bne.n	800272c <HAL_GPIO_Init+0x524>
 8002728:	2306      	movs	r3, #6
 800272a:	e00c      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 800272c:	2307      	movs	r3, #7
 800272e:	e00a      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 8002730:	2305      	movs	r3, #5
 8002732:	e008      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 8002734:	2304      	movs	r3, #4
 8002736:	e006      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 8002738:	2303      	movs	r3, #3
 800273a:	e004      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 800273c:	2302      	movs	r3, #2
 800273e:	e002      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_GPIO_Init+0x53e>
 8002744:	2300      	movs	r3, #0
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	f002 0203 	and.w	r2, r2, #3
 800274c:	0092      	lsls	r2, r2, #2
 800274e:	4093      	lsls	r3, r2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002756:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_GPIO_Init+0x624>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002764:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_GPIO_Init+0x644>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002788:	4a30      	ldr	r2, [pc, #192]	; (800284c <HAL_GPIO_Init+0x644>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_GPIO_Init+0x644>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <HAL_GPIO_Init+0x644>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_GPIO_Init+0x644>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_GPIO_Init+0x644>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_GPIO_Init+0x644>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <HAL_GPIO_Init+0x644>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3301      	adds	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	f67f ad85 	bls.w	8002324 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800281a:	bf00      	nop
 800281c:	bf00      	nop
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	08007734 	.word	0x08007734
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40021400 	.word	0x40021400
 8002848:	40021800 	.word	0x40021800
 800284c:	40013c00 	.word	0x40013c00

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800285c:	887b      	ldrh	r3, [r7, #2]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_GPIO_ReadPin+0x1c>
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	0c1b      	lsrs	r3, r3, #16
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d004      	beq.n	8002876 <HAL_GPIO_ReadPin+0x26>
 800286c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002870:	4809      	ldr	r0, [pc, #36]	; (8002898 <HAL_GPIO_ReadPin+0x48>)
 8002872:	f7ff f914 	bl	8001a9e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e001      	b.n	800288c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	08007734 	.word	0x08007734

0800289c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
 80028a8:	4613      	mov	r3, r2
 80028aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_GPIO_WritePin+0x20>
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_GPIO_WritePin+0x2a>
 80028bc:	f240 119d 	movw	r1, #413	; 0x19d
 80028c0:	480e      	ldr	r0, [pc, #56]	; (80028fc <HAL_GPIO_WritePin+0x60>)
 80028c2:	f7ff f8ec 	bl	8001a9e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80028c6:	787b      	ldrb	r3, [r7, #1]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_GPIO_WritePin+0x40>
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d004      	beq.n	80028dc <HAL_GPIO_WritePin+0x40>
 80028d2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80028d6:	4809      	ldr	r0, [pc, #36]	; (80028fc <HAL_GPIO_WritePin+0x60>)
 80028d8:	f7ff f8e1 	bl	8001a9e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80028dc:	787b      	ldrb	r3, [r7, #1]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028e8:	e003      	b.n	80028f2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ea:	887b      	ldrh	r3, [r7, #2]
 80028ec:	041a      	lsls	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	08007734 	.word	0x08007734

08002900 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <HAL_GPIO_TogglePin+0x1c>
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	0c1b      	lsrs	r3, r3, #16
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_GPIO_TogglePin+0x26>
 800291c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002920:	480a      	ldr	r0, [pc, #40]	; (800294c <HAL_GPIO_TogglePin+0x4c>)
 8002922:	f7ff f8bc 	bl	8001a9e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4013      	ands	r3, r2
 8002932:	041a      	lsls	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	43d9      	mvns	r1, r3
 8002938:	887b      	ldrh	r3, [r7, #2]
 800293a:	400b      	ands	r3, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]
}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	08007734 	.word	0x08007734

08002950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002966:	4a05      	ldr	r2, [pc, #20]	; (800297c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fdca 	bl	8001508 <HAL_GPIO_EXTI_Callback>
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e18c      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x24>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d904      	bls.n	80029ae <HAL_RCC_ClockConfig+0x2e>
 80029a4:	f240 215a 	movw	r1, #602	; 0x25a
 80029a8:	4887      	ldr	r0, [pc, #540]	; (8002bc8 <HAL_RCC_ClockConfig+0x248>)
 80029aa:	f7ff f878 	bl	8001a9e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d031      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d02e      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d02b      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d028      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d025      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d022      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b06      	cmp	r3, #6
 80029d6:	d01f      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b07      	cmp	r3, #7
 80029dc:	d01c      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d019      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b09      	cmp	r3, #9
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b0a      	cmp	r3, #10
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b0b      	cmp	r3, #11
 80029f4:	d010      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d00d      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b0d      	cmp	r3, #13
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b0e      	cmp	r3, #14
 8002a06:	d007      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b0f      	cmp	r3, #15
 8002a0c:	d004      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x98>
 8002a0e:	f240 215b 	movw	r1, #603	; 0x25b
 8002a12:	486d      	ldr	r0, [pc, #436]	; (8002bc8 <HAL_RCC_ClockConfig+0x248>)
 8002a14:	f7ff f843 	bl	8001a9e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d90c      	bls.n	8002a40 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b69      	ldr	r3, [pc, #420]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e136      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d049      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a58:	4b5d      	ldr	r3, [pc, #372]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a70:	4b57      	ldr	r3, [pc, #348]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a56      	ldr	r2, [pc, #344]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d024      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b80      	cmp	r3, #128	; 0x80
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b90      	cmp	r3, #144	; 0x90
 8002a92:	d01c      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2ba0      	cmp	r3, #160	; 0xa0
 8002a9a:	d018      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2bb0      	cmp	r3, #176	; 0xb0
 8002aa2:	d014      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8002aaa:	d010      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2bd0      	cmp	r3, #208	; 0xd0
 8002ab2:	d00c      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2be0      	cmp	r3, #224	; 0xe0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2bf0      	cmp	r3, #240	; 0xf0
 8002ac2:	d004      	beq.n	8002ace <HAL_RCC_ClockConfig+0x14e>
 8002ac4:	f240 217e 	movw	r1, #638	; 0x27e
 8002ac8:	483f      	ldr	r0, [pc, #252]	; (8002bc8 <HAL_RCC_ClockConfig+0x248>)
 8002aca:	f7fe ffe8 	bl	8001a9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	493d      	ldr	r1, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d059      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x196>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x196>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x196>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d004      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x196>
 8002b0c:	f240 2185 	movw	r1, #645	; 0x285
 8002b10:	482d      	ldr	r0, [pc, #180]	; (8002bc8 <HAL_RCC_ClockConfig+0x248>)
 8002b12:	f7fe ffc4 	bl	8001a9e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1e:	4b2c      	ldr	r3, [pc, #176]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d119      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0bf      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0af      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0a7      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4919      	ldr	r1, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7ff f9da 	bl	8001f28 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7ff f9d6 	bl	8001f28 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e08f      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_RCC_ClockConfig+0x250>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d212      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_RCC_ClockConfig+0x24c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d007      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e072      	b.n	8002cae <HAL_RCC_ClockConfig+0x32e>
 8002bc8:	080077a8 	.word	0x080077a8
 8002bcc:	40023c00 	.word	0x40023c00
 8002bd0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d025      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d018      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x29a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf0:	d013      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x29a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002bfa:	d00e      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x29a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c04:	d009      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x29a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002c0e:	d004      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x29a>
 8002c10:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002c14:	4828      	ldr	r0, [pc, #160]	; (8002cb8 <HAL_RCC_ClockConfig+0x338>)
 8002c16:	f7fe ff42 	bl	8001a9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1a:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_RCC_ClockConfig+0x33c>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4925      	ldr	r1, [pc, #148]	; (8002cbc <HAL_RCC_ClockConfig+0x33c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d026      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d018      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2f2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c48:	d013      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2f2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c52:	d00e      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2f2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2f2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002c66:	d004      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x2f2>
 8002c68:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002c6c:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <HAL_RCC_ClockConfig+0x338>)
 8002c6e:	f7fe ff16 	bl	8001a9e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x33c>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x33c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f855 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x33c>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x340>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x344>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x348>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f8fa 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	080077a8 	.word	0x080077a8
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	080079f4 	.word	0x080079f4
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	2000000c 	.word	0x2000000c

08002ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000008 	.word	0x20000008

08002ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce8:	f7ff fff0 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0a9b      	lsrs	r3, r3, #10
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4903      	ldr	r1, [pc, #12]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08007a04 	.word	0x08007a04

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d10:	f7ff ffdc 	bl	8002ccc <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0b5b      	lsrs	r3, r3, #13
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4903      	ldr	r1, [pc, #12]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08007a04 	.word	0x08007a04

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d38:	b0ae      	sub	sp, #184	; 0xb8
 8002d3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5a:	4bcb      	ldr	r3, [pc, #812]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	f200 8206 	bhi.w	8003174 <HAL_RCC_GetSysClockFreq+0x440>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08003175 	.word	0x08003175
 8002d78:	08003175 	.word	0x08003175
 8002d7c:	08003175 	.word	0x08003175
 8002d80:	08002dad 	.word	0x08002dad
 8002d84:	08003175 	.word	0x08003175
 8002d88:	08003175 	.word	0x08003175
 8002d8c:	08003175 	.word	0x08003175
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08003175 	.word	0x08003175
 8002d98:	08003175 	.word	0x08003175
 8002d9c:	08003175 	.word	0x08003175
 8002da0:	08002fa5 	.word	0x08002fa5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4bb9      	ldr	r3, [pc, #740]	; (800308c <HAL_RCC_GetSysClockFreq+0x358>)
 8002da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002daa:	e1e7      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dac:	4bb8      	ldr	r3, [pc, #736]	; (8003090 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002db2:	e1e3      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4bb4      	ldr	r3, [pc, #720]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc0:	4bb1      	ldr	r3, [pc, #708]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d071      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4bae      	ldr	r3, [pc, #696]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e24:	4649      	mov	r1, r9
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4641      	mov	r1, r8
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4641      	mov	r1, r8
 8002e34:	1a51      	subs	r1, r2, r1
 8002e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e38:	4649      	mov	r1, r9
 8002e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	00cb      	lsls	r3, r1, #3
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e56:	4641      	mov	r1, r8
 8002e58:	00ca      	lsls	r2, r1, #3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4622      	mov	r2, r4
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
 8002e66:	462b      	mov	r3, r5
 8002e68:	460a      	mov	r2, r1
 8002e6a:	eb42 0303 	adc.w	r3, r2, r3
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	024b      	lsls	r3, r1, #9
 8002e80:	4621      	mov	r1, r4
 8002e82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e86:	4621      	mov	r1, r4
 8002e88:	024a      	lsls	r2, r1, #9
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ea0:	f7fd fef2 	bl	8000c88 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eae:	e067      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ebc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eca:	2300      	movs	r3, #0
 8002ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ece:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f04f 0000 	mov.w	r0, #0
 8002eda:	f04f 0100 	mov.w	r1, #0
 8002ede:	0159      	lsls	r1, r3, #5
 8002ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee4:	0150      	lsls	r0, r2, #5
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4621      	mov	r1, r4
 8002eec:	1a51      	subs	r1, r2, r1
 8002eee:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002f04:	4649      	mov	r1, r9
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	4641      	mov	r1, r8
 8002f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0e:	4641      	mov	r1, r8
 8002f10:	018a      	lsls	r2, r1, #6
 8002f12:	4641      	mov	r1, r8
 8002f14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f18:	4649      	mov	r1, r9
 8002f1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f32:	4692      	mov	sl, r2
 8002f34:	469b      	mov	fp, r3
 8002f36:	4623      	mov	r3, r4
 8002f38:	eb1a 0303 	adds.w	r3, sl, r3
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	462b      	mov	r3, r5
 8002f40:	eb4b 0303 	adc.w	r3, fp, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f68:	2200      	movs	r2, #0
 8002f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f72:	f7fd fe89 	bl	8000c88 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fa2:	e0eb      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d06b      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fce:	663b      	str	r3, [r7, #96]	; 0x60
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002fd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fd8:	4622      	mov	r2, r4
 8002fda:	462b      	mov	r3, r5
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	0159      	lsls	r1, r3, #5
 8002fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fea:	0150      	lsls	r0, r2, #5
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	1a51      	subs	r1, r2, r1
 8002ff4:	61b9      	str	r1, [r7, #24]
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800300a:	4659      	mov	r1, fp
 800300c:	018b      	lsls	r3, r1, #6
 800300e:	4651      	mov	r1, sl
 8003010:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003014:	4651      	mov	r1, sl
 8003016:	018a      	lsls	r2, r1, #6
 8003018:	4651      	mov	r1, sl
 800301a:	ebb2 0801 	subs.w	r8, r2, r1
 800301e:	4659      	mov	r1, fp
 8003020:	eb63 0901 	sbc.w	r9, r3, r1
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003030:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003034:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003038:	4690      	mov	r8, r2
 800303a:	4699      	mov	r9, r3
 800303c:	4623      	mov	r3, r4
 800303e:	eb18 0303 	adds.w	r3, r8, r3
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	462b      	mov	r3, r5
 8003046:	eb49 0303 	adc.w	r3, r9, r3
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003058:	4629      	mov	r1, r5
 800305a:	024b      	lsls	r3, r1, #9
 800305c:	4621      	mov	r1, r4
 800305e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003062:	4621      	mov	r1, r4
 8003064:	024a      	lsls	r2, r1, #9
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800306e:	2200      	movs	r2, #0
 8003070:	65bb      	str	r3, [r7, #88]	; 0x58
 8003072:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003074:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003078:	f7fd fe06 	bl	8000c88 <__aeabi_uldivmod>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4613      	mov	r3, r2
 8003082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003086:	e065      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x420>
 8003088:	40023800 	.word	0x40023800
 800308c:	00f42400 	.word	0x00f42400
 8003090:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003094:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCC_GetSysClockFreq+0x458>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	2200      	movs	r2, #0
 800309c:	4618      	mov	r0, r3
 800309e:	4611      	mov	r1, r2
 80030a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a4:	653b      	str	r3, [r7, #80]	; 0x50
 80030a6:	2300      	movs	r3, #0
 80030a8:	657b      	str	r3, [r7, #84]	; 0x54
 80030aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80030ae:	4642      	mov	r2, r8
 80030b0:	464b      	mov	r3, r9
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4641      	mov	r1, r8
 80030c8:	1a51      	subs	r1, r2, r1
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	4649      	mov	r1, r9
 80030ce:	eb63 0301 	sbc.w	r3, r3, r1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030e0:	4659      	mov	r1, fp
 80030e2:	018b      	lsls	r3, r1, #6
 80030e4:	4651      	mov	r1, sl
 80030e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ea:	4651      	mov	r1, sl
 80030ec:	018a      	lsls	r2, r1, #6
 80030ee:	4651      	mov	r1, sl
 80030f0:	1a54      	subs	r4, r2, r1
 80030f2:	4659      	mov	r1, fp
 80030f4:	eb63 0501 	sbc.w	r5, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	464b      	mov	r3, r9
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003126:	4629      	mov	r1, r5
 8003128:	028b      	lsls	r3, r1, #10
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003130:	4621      	mov	r1, r4
 8003132:	028a      	lsls	r2, r1, #10
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800313c:	2200      	movs	r2, #0
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003140:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003142:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003146:	f7fd fd9f 	bl	8000c88 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4613      	mov	r3, r2
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_RCC_GetSysClockFreq+0x458>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	0f1b      	lsrs	r3, r3, #28
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003172:	e003      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800317a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800317c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003180:	4618      	mov	r0, r3
 8003182:	37b8      	adds	r7, #184	; 0xb8
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400

08003194 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e347      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	d904      	bls.n	80031b8 <HAL_RCC_OscConfig+0x24>
 80031ae:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80031b2:	4893      	ldr	r0, [pc, #588]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f7fe fc73 	bl	8001a9e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8096 	beq.w	80032f2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <HAL_RCC_OscConfig+0x58>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d6:	d009      	beq.n	80031ec <HAL_RCC_OscConfig+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d004      	beq.n	80031ec <HAL_RCC_OscConfig+0x58>
 80031e2:	f640 5115 	movw	r1, #3349	; 0xd15
 80031e6:	4886      	ldr	r0, [pc, #536]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	f7fe fc59 	bl	8001a9e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ec:	4b85      	ldr	r3, [pc, #532]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d019      	beq.n	800322c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031f8:	4b82      	ldr	r3, [pc, #520]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003200:	2b08      	cmp	r3, #8
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003204:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003210:	d00c      	beq.n	800322c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d112      	bne.n	8003244 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321e:	4b79      	ldr	r3, [pc, #484]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	4b75      	ldr	r3, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x15c>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d157      	bne.n	80032f0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e2f8      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0xc8>
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6c      	ldr	r2, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0x104>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0xec>
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a66      	ldr	r2, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b64      	ldr	r3, [pc, #400]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0x104>
 8003280:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe fe42 	bl	8001f28 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fe fe3e 	bl	8001f28 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e2bd      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b52      	ldr	r3, [pc, #328]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x114>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe fe2e 	bl	8001f28 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fe2a 	bl	8001f28 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e2a9      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b48      	ldr	r3, [pc, #288]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x13c>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 808c 	beq.w	8003418 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_RCC_OscConfig+0x186>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d004      	beq.n	800331a <HAL_RCC_OscConfig+0x186>
 8003310:	f640 514d 	movw	r1, #3405	; 0xd4d
 8003314:	483a      	ldr	r0, [pc, #232]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003316:	f7fe fbc2 	bl	8001a9e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b1f      	cmp	r3, #31
 8003320:	d904      	bls.n	800332c <HAL_RCC_OscConfig+0x198>
 8003322:	f640 514e 	movw	r1, #3406	; 0xd4e
 8003326:	4836      	ldr	r0, [pc, #216]	; (8003400 <HAL_RCC_OscConfig+0x26c>)
 8003328:	f7fe fbb9 	bl	8001a9e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	d017      	beq.n	8003368 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003340:	2b08      	cmp	r3, #8
 8003342:	d105      	bne.n	8003350 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d11c      	bne.n	8003396 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003368:	4b26      	ldr	r3, [pc, #152]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x1ec>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e25a      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	491d      	ldr	r1, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 8003390:	4313      	orrs	r3, r2
 8003392:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003394:	e040      	b.n	8003418 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d020      	beq.n	80033e0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fdc0 	bl	8001f28 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fe fdbc 	bl	8001f28 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e23b      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	490a      	ldr	r1, [pc, #40]	; (8003404 <HAL_RCC_OscConfig+0x270>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_OscConfig+0x274>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fd9f 	bl	8001f28 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ec:	e00e      	b.n	800340c <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fe fd9b 	bl	8001f28 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d907      	bls.n	800340c <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e21a      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
 8003400:	0800781c 	.word	0x0800781c
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340c:	4b74      	ldr	r3, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ea      	bne.n	80033ee <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d03d      	beq.n	80034a0 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCC_OscConfig+0x2aa>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d004      	beq.n	800343e <HAL_RCC_OscConfig+0x2aa>
 8003434:	f640 5194 	movw	r1, #3476	; 0xd94
 8003438:	486a      	ldr	r0, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x450>)
 800343a:	f7fe fb30 	bl	8001a9e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x454>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fd6c 	bl	8001f28 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe fd68 	bl	8001f28 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1e7      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	4b5e      	ldr	r3, [pc, #376]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0f0      	beq.n	8003454 <HAL_RCC_OscConfig+0x2c0>
 8003472:	e015      	b.n	80034a0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003474:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_RCC_OscConfig+0x454>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fd55 	bl	8001f28 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003482:	f7fe fd51 	bl	8001f28 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1d0      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80b0 	beq.w	800360e <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x340>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d008      	beq.n	80034d4 <HAL_RCC_OscConfig+0x340>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d004      	beq.n	80034d4 <HAL_RCC_OscConfig+0x340>
 80034ca:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80034ce:	4845      	ldr	r0, [pc, #276]	; (80035e4 <HAL_RCC_OscConfig+0x450>)
 80034d0:	f7fe fae5 	bl	8001a9e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	4b3e      	ldr	r3, [pc, #248]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a3d      	ldr	r2, [pc, #244]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
 80034f0:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x458>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x458>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a36      	ldr	r2, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x458>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fe fd06 	bl	8001f28 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe fd02 	bl	8001f28 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e181      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b2e      	ldr	r3, [pc, #184]	; (80035ec <HAL_RCC_OscConfig+0x458>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x3c0>
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x3fa>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x3e2>
 800355c:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x3fa>
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fe fcc7 	bl	8001f28 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe fcc3 	bl	8001f28 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e140      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_OscConfig+0x44c>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x40a>
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fe fcb1 	bl	8001f28 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e012      	b.n	80035f0 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe fcad 	bl	8001f28 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d909      	bls.n	80035f0 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e12a      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	0800781c 	.word	0x0800781c
 80035e8:	42470e80 	.word	0x42470e80
 80035ec:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e6      	bne.n	80035ca <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003602:	4b8f      	ldr	r3, [pc, #572]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a8e      	ldr	r2, [pc, #568]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_RCC_OscConfig+0x49c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d008      	beq.n	8003630 <HAL_RCC_OscConfig+0x49c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d004      	beq.n	8003630 <HAL_RCC_OscConfig+0x49c>
 8003626:	f640 6103 	movw	r1, #3587	; 0xe03
 800362a:	4886      	ldr	r0, [pc, #536]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 800362c:	f7fe fa37 	bl	8001a9e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80fd 	beq.w	8003834 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	f000 80b6 	beq.w	80037b4 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b02      	cmp	r3, #2
 800364e:	f040 809a 	bne.w	8003786 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <HAL_RCC_OscConfig+0x4da>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d004      	beq.n	800366e <HAL_RCC_OscConfig+0x4da>
 8003664:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003668:	4876      	ldr	r0, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 800366a:	f7fe fa18 	bl	8001a9e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	2b3f      	cmp	r3, #63	; 0x3f
 8003674:	d904      	bls.n	8003680 <HAL_RCC_OscConfig+0x4ec>
 8003676:	f640 610d 	movw	r1, #3597	; 0xe0d
 800367a:	4872      	ldr	r0, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 800367c:	f7fe fa0f 	bl	8001a9e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b31      	cmp	r3, #49	; 0x31
 8003686:	d904      	bls.n	8003692 <HAL_RCC_OscConfig+0x4fe>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003690:	d904      	bls.n	800369c <HAL_RCC_OscConfig+0x508>
 8003692:	f640 610e 	movw	r1, #3598	; 0xe0e
 8003696:	486b      	ldr	r0, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 8003698:	f7fe fa01 	bl	8001a9e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_OscConfig+0x532>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d00c      	beq.n	80036c6 <HAL_RCC_OscConfig+0x532>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	2b06      	cmp	r3, #6
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_OscConfig+0x532>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d004      	beq.n	80036c6 <HAL_RCC_OscConfig+0x532>
 80036bc:	f640 610f 	movw	r1, #3599	; 0xe0f
 80036c0:	4860      	ldr	r0, [pc, #384]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 80036c2:	f7fe f9ec 	bl	8001a9e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d903      	bls.n	80036d6 <HAL_RCC_OscConfig+0x542>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	2b0f      	cmp	r3, #15
 80036d4:	d904      	bls.n	80036e0 <HAL_RCC_OscConfig+0x54c>
 80036d6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80036da:	485a      	ldr	r0, [pc, #360]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 80036dc:	f7fe f9df 	bl	8001a9e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d903      	bls.n	80036f0 <HAL_RCC_OscConfig+0x55c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	2b07      	cmp	r3, #7
 80036ee:	d904      	bls.n	80036fa <HAL_RCC_OscConfig+0x566>
 80036f0:	f640 6111 	movw	r1, #3601	; 0xe11
 80036f4:	4853      	ldr	r0, [pc, #332]	; (8003844 <HAL_RCC_OscConfig+0x6b0>)
 80036f6:	f7fe f9d2 	bl	8001a9e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_OscConfig+0x6b4>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fc12 	bl	8001f28 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fc0e 	bl	8001f28 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e08d      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	019b      	lsls	r3, r3, #6
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	3b01      	subs	r3, #1
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	071b      	lsls	r3, r3, #28
 8003752:	493b      	ldr	r1, [pc, #236]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCC_OscConfig+0x6b4>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe fbe3 	bl	8001f28 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fbdf 	bl	8001f28 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e05e      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	4b31      	ldr	r3, [pc, #196]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x5d2>
 8003784:	e056      	b.n	8003834 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b30      	ldr	r3, [pc, #192]	; (8003848 <HAL_RCC_OscConfig+0x6b4>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fbcc 	bl	8001f28 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe fbc8 	bl	8001f28 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e047      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x600>
 80037b2:	e03f      	b.n	8003834 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e03a      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_RCC_OscConfig+0x6ac>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d030      	beq.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d129      	bne.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d122      	bne.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f0:	4013      	ands	r3, r2
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d119      	bne.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	3b01      	subs	r3, #1
 800380a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d10f      	bne.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	0800781c 	.word	0x0800781c
 8003848:	42470060 	.word	0x42470060

0800384c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e0c5      	b.n	80039ea <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a64      	ldr	r2, [pc, #400]	; (80039f4 <HAL_TIM_Base_Init+0x1a8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d045      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003870:	d040      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a60      	ldr	r2, [pc, #384]	; (80039f8 <HAL_TIM_Base_Init+0x1ac>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d03b      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a5e      	ldr	r2, [pc, #376]	; (80039fc <HAL_TIM_Base_Init+0x1b0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d036      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <HAL_TIM_Base_Init+0x1b4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d031      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5b      	ldr	r2, [pc, #364]	; (8003a04 <HAL_TIM_Base_Init+0x1b8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d02c      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5a      	ldr	r2, [pc, #360]	; (8003a08 <HAL_TIM_Base_Init+0x1bc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d027      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_TIM_Base_Init+0x1c0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d022      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_TIM_Base_Init+0x1c4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d01d      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <HAL_TIM_Base_Init+0x1c8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d018      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a54      	ldr	r2, [pc, #336]	; (8003a18 <HAL_TIM_Base_Init+0x1cc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_TIM_Base_Init+0x1d0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a51      	ldr	r2, [pc, #324]	; (8003a20 <HAL_TIM_Base_Init+0x1d4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_TIM_Base_Init+0x1d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d004      	beq.n	80038f4 <HAL_TIM_Base_Init+0xa8>
 80038ea:	f240 1113 	movw	r1, #275	; 0x113
 80038ee:	484e      	ldr	r0, [pc, #312]	; (8003a28 <HAL_TIM_Base_Init+0x1dc>)
 80038f0:	f7fe f8d5 	bl	8001a9e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d014      	beq.n	8003926 <HAL_TIM_Base_Init+0xda>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b10      	cmp	r3, #16
 8003902:	d010      	beq.n	8003926 <HAL_TIM_Base_Init+0xda>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b20      	cmp	r3, #32
 800390a:	d00c      	beq.n	8003926 <HAL_TIM_Base_Init+0xda>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d008      	beq.n	8003926 <HAL_TIM_Base_Init+0xda>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b60      	cmp	r3, #96	; 0x60
 800391a:	d004      	beq.n	8003926 <HAL_TIM_Base_Init+0xda>
 800391c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003920:	4841      	ldr	r0, [pc, #260]	; (8003a28 <HAL_TIM_Base_Init+0x1dc>)
 8003922:	f7fe f8bc 	bl	8001a9e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00e      	beq.n	800394c <HAL_TIM_Base_Init+0x100>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003936:	d009      	beq.n	800394c <HAL_TIM_Base_Init+0x100>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003940:	d004      	beq.n	800394c <HAL_TIM_Base_Init+0x100>
 8003942:	f240 1115 	movw	r1, #277	; 0x115
 8003946:	4838      	ldr	r0, [pc, #224]	; (8003a28 <HAL_TIM_Base_Init+0x1dc>)
 8003948:	f7fe f8a9 	bl	8001a9e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_TIM_Base_Init+0x11a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d004      	beq.n	8003966 <HAL_TIM_Base_Init+0x11a>
 800395c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003960:	4831      	ldr	r0, [pc, #196]	; (8003a28 <HAL_TIM_Base_Init+0x1dc>)
 8003962:	f7fe f89c 	bl	8001a9e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f8c2 	bl	8001b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f910 	bl	8003bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40001000 	.word	0x40001000
 8003a08:	40001400 	.word	0x40001400
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000
 8003a28:	08007894 	.word	0x08007894

08003a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <HAL_TIM_Base_Start_IT+0x154>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d045      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a46:	d040      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a4d      	ldr	r2, [pc, #308]	; (8003b84 <HAL_TIM_Base_Start_IT+0x158>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d03b      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4c      	ldr	r2, [pc, #304]	; (8003b88 <HAL_TIM_Base_Start_IT+0x15c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d036      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_TIM_Base_Start_IT+0x160>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d031      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a49      	ldr	r2, [pc, #292]	; (8003b90 <HAL_TIM_Base_Start_IT+0x164>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d02c      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a47      	ldr	r2, [pc, #284]	; (8003b94 <HAL_TIM_Base_Start_IT+0x168>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d027      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a46      	ldr	r2, [pc, #280]	; (8003b98 <HAL_TIM_Base_Start_IT+0x16c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d022      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <HAL_TIM_Base_Start_IT+0x170>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01d      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a43      	ldr	r2, [pc, #268]	; (8003ba0 <HAL_TIM_Base_Start_IT+0x174>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d018      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a41      	ldr	r2, [pc, #260]	; (8003ba4 <HAL_TIM_Base_Start_IT+0x178>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a40      	ldr	r2, [pc, #256]	; (8003ba8 <HAL_TIM_Base_Start_IT+0x17c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00e      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a3e      	ldr	r2, [pc, #248]	; (8003bac <HAL_TIM_Base_Start_IT+0x180>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <HAL_TIM_Base_Start_IT+0x184>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <HAL_TIM_Base_Start_IT+0x9e>
 8003ac0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003ac4:	483b      	ldr	r0, [pc, #236]	; (8003bb4 <HAL_TIM_Base_Start_IT+0x188>)
 8003ac6:	f7fd ffea 	bl	8001a9e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e04e      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_TIM_Base_Start_IT+0x154>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b04:	d01d      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_TIM_Base_Start_IT+0x158>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_TIM_Base_Start_IT+0x15c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_TIM_Base_Start_IT+0x160>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_TIM_Base_Start_IT+0x16c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_TIM_Base_Start_IT+0x170>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIM_Base_Start_IT+0x116>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_TIM_Base_Start_IT+0x17c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d111      	bne.n	8003b66 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b06      	cmp	r3, #6
 8003b52:	d010      	beq.n	8003b76 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b64:	e007      	b.n	8003b76 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40001000 	.word	0x40001000
 8003b94:	40001400 	.word	0x40001400
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800
 8003ba8:	40001800 	.word	0x40001800
 8003bac:	40001c00 	.word	0x40001c00
 8003bb0:	40002000 	.word	0x40002000
 8003bb4:	08007894 	.word	0x08007894

08003bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a40      	ldr	r2, [pc, #256]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <TIM_Base_SetConfig+0x118>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3c      	ldr	r2, [pc, #240]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a3b      	ldr	r2, [pc, #236]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a3a      	ldr	r2, [pc, #232]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d108      	bne.n	8003c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2f      	ldr	r2, [pc, #188]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d027      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2c      	ldr	r2, [pc, #176]	; (8003cd0 <TIM_Base_SetConfig+0x118>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d023      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2b      	ldr	r2, [pc, #172]	; (8003cd4 <TIM_Base_SetConfig+0x11c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01f      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	; (8003cd8 <TIM_Base_SetConfig+0x120>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a29      	ldr	r2, [pc, #164]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d017      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <TIM_Base_SetConfig+0x128>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <TIM_Base_SetConfig+0x12c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00f      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <TIM_Base_SetConfig+0x130>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a25      	ldr	r2, [pc, #148]	; (8003cec <TIM_Base_SetConfig+0x134>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a24      	ldr	r2, [pc, #144]	; (8003cf0 <TIM_Base_SetConfig+0x138>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a23      	ldr	r2, [pc, #140]	; (8003cf4 <TIM_Base_SetConfig+0x13c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <TIM_Base_SetConfig+0x114>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0xf8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <TIM_Base_SetConfig+0x124>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40010400 	.word	0x40010400
 8003ce0:	40014000 	.word	0x40014000
 8003ce4:	40014400 	.word	0x40014400
 8003ce8:	40014800 	.word	0x40014800
 8003cec:	40001800 	.word	0x40001800
 8003cf0:	40001c00 	.word	0x40001c00
 8003cf4:	40002000 	.word	0x40002000

08003cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a61      	ldr	r2, [pc, #388]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d14:	d022      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01d      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5b      	ldr	r2, [pc, #364]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d018      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00e      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a55      	ldr	r2, [pc, #340]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003d52:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8003d56:	4854      	ldr	r0, [pc, #336]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003d58:	f7fd fea1 	bl	8001a9e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d01c      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d018      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d014      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d010      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b50      	cmp	r3, #80	; 0x50
 8003d8a:	d00c      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b60      	cmp	r3, #96	; 0x60
 8003d92:	d008      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d004      	beq.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003d9c:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8003da0:	4841      	ldr	r0, [pc, #260]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003da2:	f7fd fe7c 	bl	8001a9e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b80      	cmp	r3, #128	; 0x80
 8003dac:	d008      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003db6:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8003dba:	483b      	ldr	r0, [pc, #236]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003dbc:	f7fd fe6f 	bl	8001a9e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e05a      	b.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1f      	ldr	r2, [pc, #124]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d01d      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1b      	ldr	r2, [pc, #108]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a18      	ldr	r2, [pc, #96]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10c      	bne.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40001000 	.word	0x40001000
 8003ea0:	40001400 	.word	0x40001400
 8003ea4:	40010400 	.word	0x40010400
 8003ea8:	08007908 	.word	0x08007908
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40001800 	.word	0x40001800

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0be      	b.n	8004044 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03b      	beq.n	8003f46 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_UART_Init+0x198>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d01d      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5c      	ldr	r2, [pc, #368]	; (8004050 <HAL_UART_Init+0x19c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d018      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_UART_Init+0x1a0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a59      	ldr	r2, [pc, #356]	; (8004058 <HAL_UART_Init+0x1a4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00e      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <HAL_UART_Init+0x1a8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d009      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_UART_Init+0x1ac>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d004      	beq.n	8003f14 <HAL_UART_Init+0x60>
 8003f0a:	f240 1173 	movw	r1, #371	; 0x173
 8003f0e:	4855      	ldr	r0, [pc, #340]	; (8004064 <HAL_UART_Init+0x1b0>)
 8003f10:	f7fd fdc5 	bl	8001a9e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d037      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f24:	d032      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2e:	d02d      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f38:	d028      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f3a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003f3e:	4849      	ldr	r0, [pc, #292]	; (8004064 <HAL_UART_Init+0x1b0>)
 8003f40:	f7fd fdad 	bl	8001a9e <assert_failed>
 8003f44:	e022      	b.n	8003f8c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a40      	ldr	r2, [pc, #256]	; (800404c <HAL_UART_Init+0x198>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d01d      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3e      	ldr	r2, [pc, #248]	; (8004050 <HAL_UART_Init+0x19c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3d      	ldr	r2, [pc, #244]	; (8004054 <HAL_UART_Init+0x1a0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3b      	ldr	r2, [pc, #236]	; (8004058 <HAL_UART_Init+0x1a4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_UART_Init+0x1a8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a38      	ldr	r2, [pc, #224]	; (8004060 <HAL_UART_Init+0x1ac>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_UART_Init+0xd8>
 8003f82:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003f86:	4837      	ldr	r0, [pc, #220]	; (8004064 <HAL_UART_Init+0x1b0>)
 8003f88:	f7fd fd89 	bl	8001a9e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_UART_Init+0xf4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d004      	beq.n	8003fa8 <HAL_UART_Init+0xf4>
 8003f9e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003fa2:	4830      	ldr	r0, [pc, #192]	; (8004064 <HAL_UART_Init+0x1b0>)
 8003fa4:	f7fd fd7b 	bl	8001a9e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <HAL_UART_Init+0x110>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb8:	d004      	beq.n	8003fc4 <HAL_UART_Init+0x110>
 8003fba:	f240 117b 	movw	r1, #379	; 0x17b
 8003fbe:	4829      	ldr	r0, [pc, #164]	; (8004064 <HAL_UART_Init+0x1b0>)
 8003fc0:	f7fd fd6d 	bl	8001a9e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd fdb5 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2224      	movs	r2, #36	; 0x24
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f936 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800401a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800402a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40011000 	.word	0x40011000
 8004050:	40004400 	.word	0x40004400
 8004054:	40004800 	.word	0x40004800
 8004058:	40004c00 	.word	0x40004c00
 800405c:	40005000 	.word	0x40005000
 8004060:	40011400 	.word	0x40011400
 8004064:	08007980 	.word	0x08007980

08004068 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	d17c      	bne.n	8004182 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_UART_Transmit+0x2c>
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e075      	b.n	8004184 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Transmit+0x3e>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e06e      	b.n	8004184 <HAL_UART_Transmit+0x11c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2221      	movs	r2, #33	; 0x21
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040bc:	f7fd ff34 	bl	8001f28 <HAL_GetTick>
 80040c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d108      	bne.n	80040ea <HAL_UART_Transmit+0x82>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61bb      	str	r3, [r7, #24]
 80040e8:	e003      	b.n	80040f2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040fa:	e02a      	b.n	8004152 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f840 	bl	800418c <UART_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e036      	b.n	8004184 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	3302      	adds	r3, #2
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	e007      	b.n	8004144 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	781a      	ldrb	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1cf      	bne.n	80040fc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2200      	movs	r2, #0
 8004164:	2140      	movs	r1, #64	; 0x40
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f810 	bl	800418c <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e006      	b.n	8004184 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004182:	2302      	movs	r3, #2
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b090      	sub	sp, #64	; 0x40
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	e050      	b.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d04c      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x30>
 80041ac:	f7fd febc 	bl	8001f28 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d241      	bcs.n	8004240 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041dc:	637a      	str	r2, [r7, #52]	; 0x34
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3314      	adds	r3, #20
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	63bb      	str	r3, [r7, #56]	; 0x38
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3314      	adds	r3, #20
 800420e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004210:	623a      	str	r2, [r7, #32]
 8004212:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	61bb      	str	r3, [r7, #24]
   return(result);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e5      	bne.n	80041f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e00f      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	429a      	cmp	r2, r3
 800425c:	d09f      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3740      	adds	r7, #64	; 0x40
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b0c0      	sub	sp, #256	; 0x100
 800426e:	af00      	add	r7, sp, #0
 8004270:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4bcf      	ldr	r3, [pc, #828]	; (80045b8 <UART_SetConfig+0x350>)
 800427c:	429a      	cmp	r2, r3
 800427e:	d904      	bls.n	800428a <UART_SetConfig+0x22>
 8004280:	f640 6161 	movw	r1, #3681	; 0xe61
 8004284:	48cd      	ldr	r0, [pc, #820]	; (80045bc <UART_SetConfig+0x354>)
 8004286:	f7fd fc0a 	bl	8001a9e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <UART_SetConfig+0x42>
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429e:	d004      	beq.n	80042aa <UART_SetConfig+0x42>
 80042a0:	f640 6162 	movw	r1, #3682	; 0xe62
 80042a4:	48c5      	ldr	r0, [pc, #788]	; (80045bc <UART_SetConfig+0x354>)
 80042a6:	f7fd fbfa 	bl	8001a9e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <UART_SetConfig+0x6e>
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042be:	d00a      	beq.n	80042d6 <UART_SetConfig+0x6e>
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042ca:	d004      	beq.n	80042d6 <UART_SetConfig+0x6e>
 80042cc:	f640 6163 	movw	r1, #3683	; 0xe63
 80042d0:	48ba      	ldr	r0, [pc, #744]	; (80045bc <UART_SetConfig+0x354>)
 80042d2:	f7fd fbe4 	bl	8001a9e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <UART_SetConfig+0x88>
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d104      	bne.n	80042fa <UART_SetConfig+0x92>
 80042f0:	f640 6164 	movw	r1, #3684	; 0xe64
 80042f4:	48b1      	ldr	r0, [pc, #708]	; (80045bc <UART_SetConfig+0x354>)
 80042f6:	f7fd fbd2 	bl	8001a9e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430a:	68d9      	ldr	r1, [r3, #12]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	ea40 0301 	orr.w	r3, r0, r1
 8004316:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	431a      	orrs	r2, r3
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	431a      	orrs	r2, r3
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004346:	f021 010c 	bic.w	r1, r1, #12
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004354:	430b      	orrs	r3, r1
 8004356:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	6999      	ldr	r1, [r3, #24]
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	ea40 0301 	orr.w	r3, r0, r1
 8004374:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b90      	ldr	r3, [pc, #576]	; (80045c0 <UART_SetConfig+0x358>)
 800437e:	429a      	cmp	r2, r3
 8004380:	d005      	beq.n	800438e <UART_SetConfig+0x126>
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <UART_SetConfig+0x35c>)
 800438a:	429a      	cmp	r2, r3
 800438c:	d104      	bne.n	8004398 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800438e:	f7fe fcbd 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8004392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004396:	e003      	b.n	80043a0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe fca4 	bl	8002ce4 <HAL_RCC_GetPCLK1Freq>
 800439c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043aa:	f040 810f 	bne.w	80045cc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043b8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043bc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043c0:	4622      	mov	r2, r4
 80043c2:	462b      	mov	r3, r5
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80043c8:	415b      	adcs	r3, r3
 80043ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d0:	4621      	mov	r1, r4
 80043d2:	eb12 0801 	adds.w	r8, r2, r1
 80043d6:	4629      	mov	r1, r5
 80043d8:	eb43 0901 	adc.w	r9, r3, r1
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043f0:	4690      	mov	r8, r2
 80043f2:	4699      	mov	r9, r3
 80043f4:	4623      	mov	r3, r4
 80043f6:	eb18 0303 	adds.w	r3, r8, r3
 80043fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043fe:	462b      	mov	r3, r5
 8004400:	eb49 0303 	adc.w	r3, r9, r3
 8004404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004414:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004418:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800441c:	460b      	mov	r3, r1
 800441e:	18db      	adds	r3, r3, r3
 8004420:	653b      	str	r3, [r7, #80]	; 0x50
 8004422:	4613      	mov	r3, r2
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	657b      	str	r3, [r7, #84]	; 0x54
 800442a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800442e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004432:	f7fc fc29 	bl	8000c88 <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <UART_SetConfig+0x360>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	011c      	lsls	r4, r3, #4
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800444e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004452:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004456:	4642      	mov	r2, r8
 8004458:	464b      	mov	r3, r9
 800445a:	1891      	adds	r1, r2, r2
 800445c:	64b9      	str	r1, [r7, #72]	; 0x48
 800445e:	415b      	adcs	r3, r3
 8004460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004466:	4641      	mov	r1, r8
 8004468:	eb12 0a01 	adds.w	sl, r2, r1
 800446c:	4649      	mov	r1, r9
 800446e:	eb43 0b01 	adc.w	fp, r3, r1
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800447e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004486:	4692      	mov	sl, r2
 8004488:	469b      	mov	fp, r3
 800448a:	4643      	mov	r3, r8
 800448c:	eb1a 0303 	adds.w	r3, sl, r3
 8004490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004494:	464b      	mov	r3, r9
 8004496:	eb4b 0303 	adc.w	r3, fp, r3
 800449a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044aa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b2:	460b      	mov	r3, r1
 80044b4:	18db      	adds	r3, r3, r3
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
 80044b8:	4613      	mov	r3, r2
 80044ba:	eb42 0303 	adc.w	r3, r2, r3
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
 80044c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044c4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044c8:	f7fc fbde 	bl	8000c88 <__aeabi_uldivmod>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	4611      	mov	r1, r2
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <UART_SetConfig+0x360>)
 80044d4:	fba3 2301 	umull	r2, r3, r3, r1
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	2264      	movs	r2, #100	; 0x64
 80044dc:	fb02 f303 	mul.w	r3, r2, r3
 80044e0:	1acb      	subs	r3, r1, r3
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <UART_SetConfig+0x360>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044f6:	441c      	add	r4, r3
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004502:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004506:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800450a:	4642      	mov	r2, r8
 800450c:	464b      	mov	r3, r9
 800450e:	1891      	adds	r1, r2, r2
 8004510:	63b9      	str	r1, [r7, #56]	; 0x38
 8004512:	415b      	adcs	r3, r3
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004516:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800451a:	4641      	mov	r1, r8
 800451c:	1851      	adds	r1, r2, r1
 800451e:	6339      	str	r1, [r7, #48]	; 0x30
 8004520:	4649      	mov	r1, r9
 8004522:	414b      	adcs	r3, r1
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004532:	4659      	mov	r1, fp
 8004534:	00cb      	lsls	r3, r1, #3
 8004536:	4651      	mov	r1, sl
 8004538:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453c:	4651      	mov	r1, sl
 800453e:	00ca      	lsls	r2, r1, #3
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	4603      	mov	r3, r0
 8004546:	4642      	mov	r2, r8
 8004548:	189b      	adds	r3, r3, r2
 800454a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800454e:	464b      	mov	r3, r9
 8004550:	460a      	mov	r2, r1
 8004552:	eb42 0303 	adc.w	r3, r2, r3
 8004556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004566:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800456a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800456e:	460b      	mov	r3, r1
 8004570:	18db      	adds	r3, r3, r3
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
 8004574:	4613      	mov	r3, r2
 8004576:	eb42 0303 	adc.w	r3, r2, r3
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004580:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004584:	f7fc fb80 	bl	8000c88 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <UART_SetConfig+0x360>)
 800458e:	fba3 1302 	umull	r1, r3, r3, r2
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	2164      	movs	r1, #100	; 0x64
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	3332      	adds	r3, #50	; 0x32
 80045a0:	4a09      	ldr	r2, [pc, #36]	; (80045c8 <UART_SetConfig+0x360>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f003 0207 	and.w	r2, r3, #7
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4422      	add	r2, r4
 80045b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045b6:	e108      	b.n	80047ca <UART_SetConfig+0x562>
 80045b8:	00a037a0 	.word	0x00a037a0
 80045bc:	08007980 	.word	0x08007980
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	6239      	str	r1, [r7, #32]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb43 0501 	adc.w	r5, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	00eb      	lsls	r3, r5, #3
 8004602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004606:	00e2      	lsls	r2, r4, #3
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	4643      	mov	r3, r8
 800460e:	18e3      	adds	r3, r4, r3
 8004610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004614:	464b      	mov	r3, r9
 8004616:	eb45 0303 	adc.w	r3, r5, r3
 800461a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800463a:	4629      	mov	r1, r5
 800463c:	008b      	lsls	r3, r1, #2
 800463e:	4621      	mov	r1, r4
 8004640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004644:	4621      	mov	r1, r4
 8004646:	008a      	lsls	r2, r1, #2
 8004648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800464c:	f7fc fb1c 	bl	8000c88 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <UART_SetConfig+0x570>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004668:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800466c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	61b9      	str	r1, [r7, #24]
 8004678:	415b      	adcs	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6139      	str	r1, [r7, #16]
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b4:	464b      	mov	r3, r9
 80046b6:	460a      	mov	r2, r1
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d8:	4649      	mov	r1, r9
 80046da:	008b      	lsls	r3, r1, #2
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e2:	4641      	mov	r1, r8
 80046e4:	008a      	lsls	r2, r1, #2
 80046e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ea:	f7fc facd 	bl	8000c88 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b39      	ldr	r3, [pc, #228]	; (80047d8 <UART_SetConfig+0x570>)
 80046f4:	fba3 1302 	umull	r1, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	2164      	movs	r1, #100	; 0x64
 80046fc:	fb01 f303 	mul.w	r3, r1, r3
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	3332      	adds	r3, #50	; 0x32
 8004706:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <UART_SetConfig+0x570>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004712:	441c      	add	r4, r3
 8004714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004718:	2200      	movs	r2, #0
 800471a:	673b      	str	r3, [r7, #112]	; 0x70
 800471c:	677a      	str	r2, [r7, #116]	; 0x74
 800471e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004722:	4642      	mov	r2, r8
 8004724:	464b      	mov	r3, r9
 8004726:	1891      	adds	r1, r2, r2
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	415b      	adcs	r3, r3
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004732:	4641      	mov	r1, r8
 8004734:	1851      	adds	r1, r2, r1
 8004736:	6039      	str	r1, [r7, #0]
 8004738:	4649      	mov	r1, r9
 800473a:	414b      	adcs	r3, r1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800474a:	4659      	mov	r1, fp
 800474c:	00cb      	lsls	r3, r1, #3
 800474e:	4651      	mov	r1, sl
 8004750:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004754:	4651      	mov	r1, sl
 8004756:	00ca      	lsls	r2, r1, #3
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	4603      	mov	r3, r0
 800475e:	4642      	mov	r2, r8
 8004760:	189b      	adds	r3, r3, r2
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
 8004778:	667a      	str	r2, [r7, #100]	; 0x64
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004786:	4649      	mov	r1, r9
 8004788:	008b      	lsls	r3, r1, #2
 800478a:	4641      	mov	r1, r8
 800478c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004790:	4641      	mov	r1, r8
 8004792:	008a      	lsls	r2, r1, #2
 8004794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004798:	f7fc fa76 	bl	8000c88 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x570>)
 80047a2:	fba3 1302 	umull	r1, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2164      	movs	r1, #100	; 0x64
 80047aa:	fb01 f303 	mul.w	r3, r1, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x570>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4422      	add	r2, r4
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047d0:	46bd      	mov	sp, r7
 80047d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d6:	bf00      	nop
 80047d8:	51eb851f 	.word	0x51eb851f

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000014 	.word	0x20000014

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	4d0d      	ldr	r5, [pc, #52]	; (8004820 <__libc_init_array+0x38>)
 80047ec:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047ee:	1b64      	subs	r4, r4, r5
 80047f0:	10a4      	asrs	r4, r4, #2
 80047f2:	2600      	movs	r6, #0
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	4d0b      	ldr	r5, [pc, #44]	; (8004828 <__libc_init_array+0x40>)
 80047fa:	4c0c      	ldr	r4, [pc, #48]	; (800482c <__libc_init_array+0x44>)
 80047fc:	f002 ff04 	bl	8007608 <_init>
 8004800:	1b64      	subs	r4, r4, r5
 8004802:	10a4      	asrs	r4, r4, #2
 8004804:	2600      	movs	r6, #0
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	08007dec 	.word	0x08007dec
 8004824:	08007dec 	.word	0x08007dec
 8004828:	08007dec 	.word	0x08007dec
 800482c:	08007df0 	.word	0x08007df0

08004830 <memset>:
 8004830:	4402      	add	r2, r0
 8004832:	4603      	mov	r3, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <__cvt>:
 8004840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	ec55 4b10 	vmov	r4, r5, d0
 8004848:	2d00      	cmp	r5, #0
 800484a:	460e      	mov	r6, r1
 800484c:	4619      	mov	r1, r3
 800484e:	462b      	mov	r3, r5
 8004850:	bfbb      	ittet	lt
 8004852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004856:	461d      	movlt	r5, r3
 8004858:	2300      	movge	r3, #0
 800485a:	232d      	movlt	r3, #45	; 0x2d
 800485c:	700b      	strb	r3, [r1, #0]
 800485e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004864:	4691      	mov	r9, r2
 8004866:	f023 0820 	bic.w	r8, r3, #32
 800486a:	bfbc      	itt	lt
 800486c:	4622      	movlt	r2, r4
 800486e:	4614      	movlt	r4, r2
 8004870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004874:	d005      	beq.n	8004882 <__cvt+0x42>
 8004876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800487a:	d100      	bne.n	800487e <__cvt+0x3e>
 800487c:	3601      	adds	r6, #1
 800487e:	2102      	movs	r1, #2
 8004880:	e000      	b.n	8004884 <__cvt+0x44>
 8004882:	2103      	movs	r1, #3
 8004884:	ab03      	add	r3, sp, #12
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	ab02      	add	r3, sp, #8
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	ec45 4b10 	vmov	d0, r4, r5
 8004890:	4653      	mov	r3, sl
 8004892:	4632      	mov	r2, r6
 8004894:	f000 fcec 	bl	8005270 <_dtoa_r>
 8004898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800489c:	4607      	mov	r7, r0
 800489e:	d102      	bne.n	80048a6 <__cvt+0x66>
 80048a0:	f019 0f01 	tst.w	r9, #1
 80048a4:	d022      	beq.n	80048ec <__cvt+0xac>
 80048a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048aa:	eb07 0906 	add.w	r9, r7, r6
 80048ae:	d110      	bne.n	80048d2 <__cvt+0x92>
 80048b0:	783b      	ldrb	r3, [r7, #0]
 80048b2:	2b30      	cmp	r3, #48	; 0x30
 80048b4:	d10a      	bne.n	80048cc <__cvt+0x8c>
 80048b6:	2200      	movs	r2, #0
 80048b8:	2300      	movs	r3, #0
 80048ba:	4620      	mov	r0, r4
 80048bc:	4629      	mov	r1, r5
 80048be:	f7fc f923 	bl	8000b08 <__aeabi_dcmpeq>
 80048c2:	b918      	cbnz	r0, 80048cc <__cvt+0x8c>
 80048c4:	f1c6 0601 	rsb	r6, r6, #1
 80048c8:	f8ca 6000 	str.w	r6, [sl]
 80048cc:	f8da 3000 	ldr.w	r3, [sl]
 80048d0:	4499      	add	r9, r3
 80048d2:	2200      	movs	r2, #0
 80048d4:	2300      	movs	r3, #0
 80048d6:	4620      	mov	r0, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	f7fc f915 	bl	8000b08 <__aeabi_dcmpeq>
 80048de:	b108      	cbz	r0, 80048e4 <__cvt+0xa4>
 80048e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80048e4:	2230      	movs	r2, #48	; 0x30
 80048e6:	9b03      	ldr	r3, [sp, #12]
 80048e8:	454b      	cmp	r3, r9
 80048ea:	d307      	bcc.n	80048fc <__cvt+0xbc>
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048f0:	1bdb      	subs	r3, r3, r7
 80048f2:	4638      	mov	r0, r7
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	b004      	add	sp, #16
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	1c59      	adds	r1, r3, #1
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e7f0      	b.n	80048e6 <__cvt+0xa6>

08004904 <__exponent>:
 8004904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004906:	4603      	mov	r3, r0
 8004908:	2900      	cmp	r1, #0
 800490a:	bfb8      	it	lt
 800490c:	4249      	neglt	r1, r1
 800490e:	f803 2b02 	strb.w	r2, [r3], #2
 8004912:	bfb4      	ite	lt
 8004914:	222d      	movlt	r2, #45	; 0x2d
 8004916:	222b      	movge	r2, #43	; 0x2b
 8004918:	2909      	cmp	r1, #9
 800491a:	7042      	strb	r2, [r0, #1]
 800491c:	dd2a      	ble.n	8004974 <__exponent+0x70>
 800491e:	f10d 0407 	add.w	r4, sp, #7
 8004922:	46a4      	mov	ip, r4
 8004924:	270a      	movs	r7, #10
 8004926:	46a6      	mov	lr, r4
 8004928:	460a      	mov	r2, r1
 800492a:	fb91 f6f7 	sdiv	r6, r1, r7
 800492e:	fb07 1516 	mls	r5, r7, r6, r1
 8004932:	3530      	adds	r5, #48	; 0x30
 8004934:	2a63      	cmp	r2, #99	; 0x63
 8004936:	f104 34ff 	add.w	r4, r4, #4294967295
 800493a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800493e:	4631      	mov	r1, r6
 8004940:	dcf1      	bgt.n	8004926 <__exponent+0x22>
 8004942:	3130      	adds	r1, #48	; 0x30
 8004944:	f1ae 0502 	sub.w	r5, lr, #2
 8004948:	f804 1c01 	strb.w	r1, [r4, #-1]
 800494c:	1c44      	adds	r4, r0, #1
 800494e:	4629      	mov	r1, r5
 8004950:	4561      	cmp	r1, ip
 8004952:	d30a      	bcc.n	800496a <__exponent+0x66>
 8004954:	f10d 0209 	add.w	r2, sp, #9
 8004958:	eba2 020e 	sub.w	r2, r2, lr
 800495c:	4565      	cmp	r5, ip
 800495e:	bf88      	it	hi
 8004960:	2200      	movhi	r2, #0
 8004962:	4413      	add	r3, r2
 8004964:	1a18      	subs	r0, r3, r0
 8004966:	b003      	add	sp, #12
 8004968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800496e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004972:	e7ed      	b.n	8004950 <__exponent+0x4c>
 8004974:	2330      	movs	r3, #48	; 0x30
 8004976:	3130      	adds	r1, #48	; 0x30
 8004978:	7083      	strb	r3, [r0, #2]
 800497a:	70c1      	strb	r1, [r0, #3]
 800497c:	1d03      	adds	r3, r0, #4
 800497e:	e7f1      	b.n	8004964 <__exponent+0x60>

08004980 <_printf_float>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	ed2d 8b02 	vpush	{d8}
 8004988:	b08d      	sub	sp, #52	; 0x34
 800498a:	460c      	mov	r4, r1
 800498c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004990:	4616      	mov	r6, r2
 8004992:	461f      	mov	r7, r3
 8004994:	4605      	mov	r5, r0
 8004996:	f001 fa59 	bl	8005e4c <_localeconv_r>
 800499a:	f8d0 a000 	ldr.w	sl, [r0]
 800499e:	4650      	mov	r0, sl
 80049a0:	f7fb fc36 	bl	8000210 <strlen>
 80049a4:	2300      	movs	r3, #0
 80049a6:	930a      	str	r3, [sp, #40]	; 0x28
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	9305      	str	r3, [sp, #20]
 80049ac:	f8d8 3000 	ldr.w	r3, [r8]
 80049b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049b4:	3307      	adds	r3, #7
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	f103 0208 	add.w	r2, r3, #8
 80049be:	f8c8 2000 	str.w	r2, [r8]
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80049d8:	ee08 0a10 	vmov	s16, r0
 80049dc:	4b9f      	ldr	r3, [pc, #636]	; (8004c5c <_printf_float+0x2dc>)
 80049de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049e2:	f04f 32ff 	mov.w	r2, #4294967295
 80049e6:	f7fc f8c1 	bl	8000b6c <__aeabi_dcmpun>
 80049ea:	bb88      	cbnz	r0, 8004a50 <_printf_float+0xd0>
 80049ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049f0:	4b9a      	ldr	r3, [pc, #616]	; (8004c5c <_printf_float+0x2dc>)
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	f7fc f89b 	bl	8000b30 <__aeabi_dcmple>
 80049fa:	bb48      	cbnz	r0, 8004a50 <_printf_float+0xd0>
 80049fc:	2200      	movs	r2, #0
 80049fe:	2300      	movs	r3, #0
 8004a00:	4640      	mov	r0, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	f7fc f88a 	bl	8000b1c <__aeabi_dcmplt>
 8004a08:	b110      	cbz	r0, 8004a10 <_printf_float+0x90>
 8004a0a:	232d      	movs	r3, #45	; 0x2d
 8004a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a10:	4b93      	ldr	r3, [pc, #588]	; (8004c60 <_printf_float+0x2e0>)
 8004a12:	4894      	ldr	r0, [pc, #592]	; (8004c64 <_printf_float+0x2e4>)
 8004a14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a18:	bf94      	ite	ls
 8004a1a:	4698      	movls	r8, r3
 8004a1c:	4680      	movhi	r8, r0
 8004a1e:	2303      	movs	r3, #3
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	9b05      	ldr	r3, [sp, #20]
 8004a24:	f023 0204 	bic.w	r2, r3, #4
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	f04f 0900 	mov.w	r9, #0
 8004a2e:	9700      	str	r7, [sp, #0]
 8004a30:	4633      	mov	r3, r6
 8004a32:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a34:	4621      	mov	r1, r4
 8004a36:	4628      	mov	r0, r5
 8004a38:	f000 f9d8 	bl	8004dec <_printf_common>
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f040 8090 	bne.w	8004b62 <_printf_float+0x1e2>
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	b00d      	add	sp, #52	; 0x34
 8004a48:	ecbd 8b02 	vpop	{d8}
 8004a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fc f888 	bl	8000b6c <__aeabi_dcmpun>
 8004a5c:	b140      	cbz	r0, 8004a70 <_printf_float+0xf0>
 8004a5e:	464b      	mov	r3, r9
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	bfbc      	itt	lt
 8004a64:	232d      	movlt	r3, #45	; 0x2d
 8004a66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a6a:	487f      	ldr	r0, [pc, #508]	; (8004c68 <_printf_float+0x2e8>)
 8004a6c:	4b7f      	ldr	r3, [pc, #508]	; (8004c6c <_printf_float+0x2ec>)
 8004a6e:	e7d1      	b.n	8004a14 <_printf_float+0x94>
 8004a70:	6863      	ldr	r3, [r4, #4]
 8004a72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a76:	9206      	str	r2, [sp, #24]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	d13f      	bne.n	8004afc <_printf_float+0x17c>
 8004a7c:	2306      	movs	r3, #6
 8004a7e:	6063      	str	r3, [r4, #4]
 8004a80:	9b05      	ldr	r3, [sp, #20]
 8004a82:	6861      	ldr	r1, [r4, #4]
 8004a84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a88:	2300      	movs	r3, #0
 8004a8a:	9303      	str	r3, [sp, #12]
 8004a8c:	ab0a      	add	r3, sp, #40	; 0x28
 8004a8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a92:	ab09      	add	r3, sp, #36	; 0x24
 8004a94:	ec49 8b10 	vmov	d0, r8, r9
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	6022      	str	r2, [r4, #0]
 8004a9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f7ff fecd 	bl	8004840 <__cvt>
 8004aa6:	9b06      	ldr	r3, [sp, #24]
 8004aa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aaa:	2b47      	cmp	r3, #71	; 0x47
 8004aac:	4680      	mov	r8, r0
 8004aae:	d108      	bne.n	8004ac2 <_printf_float+0x142>
 8004ab0:	1cc8      	adds	r0, r1, #3
 8004ab2:	db02      	blt.n	8004aba <_printf_float+0x13a>
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	dd41      	ble.n	8004b3e <_printf_float+0x1be>
 8004aba:	f1ab 0b02 	sub.w	fp, fp, #2
 8004abe:	fa5f fb8b 	uxtb.w	fp, fp
 8004ac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ac6:	d820      	bhi.n	8004b0a <_printf_float+0x18a>
 8004ac8:	3901      	subs	r1, #1
 8004aca:	465a      	mov	r2, fp
 8004acc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ad2:	f7ff ff17 	bl	8004904 <__exponent>
 8004ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ad8:	1813      	adds	r3, r2, r0
 8004ada:	2a01      	cmp	r2, #1
 8004adc:	4681      	mov	r9, r0
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	dc02      	bgt.n	8004ae8 <_printf_float+0x168>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	07d2      	lsls	r2, r2, #31
 8004ae6:	d501      	bpl.n	8004aec <_printf_float+0x16c>
 8004ae8:	3301      	adds	r3, #1
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d09c      	beq.n	8004a2e <_printf_float+0xae>
 8004af4:	232d      	movs	r3, #45	; 0x2d
 8004af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004afa:	e798      	b.n	8004a2e <_printf_float+0xae>
 8004afc:	9a06      	ldr	r2, [sp, #24]
 8004afe:	2a47      	cmp	r2, #71	; 0x47
 8004b00:	d1be      	bne.n	8004a80 <_printf_float+0x100>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1bc      	bne.n	8004a80 <_printf_float+0x100>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e7b9      	b.n	8004a7e <_printf_float+0xfe>
 8004b0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b0e:	d118      	bne.n	8004b42 <_printf_float+0x1c2>
 8004b10:	2900      	cmp	r1, #0
 8004b12:	6863      	ldr	r3, [r4, #4]
 8004b14:	dd0b      	ble.n	8004b2e <_printf_float+0x1ae>
 8004b16:	6121      	str	r1, [r4, #16]
 8004b18:	b913      	cbnz	r3, 8004b20 <_printf_float+0x1a0>
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	07d0      	lsls	r0, r2, #31
 8004b1e:	d502      	bpl.n	8004b26 <_printf_float+0x1a6>
 8004b20:	3301      	adds	r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	6123      	str	r3, [r4, #16]
 8004b26:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b28:	f04f 0900 	mov.w	r9, #0
 8004b2c:	e7de      	b.n	8004aec <_printf_float+0x16c>
 8004b2e:	b913      	cbnz	r3, 8004b36 <_printf_float+0x1b6>
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	07d2      	lsls	r2, r2, #31
 8004b34:	d501      	bpl.n	8004b3a <_printf_float+0x1ba>
 8004b36:	3302      	adds	r3, #2
 8004b38:	e7f4      	b.n	8004b24 <_printf_float+0x1a4>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7f2      	b.n	8004b24 <_printf_float+0x1a4>
 8004b3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b44:	4299      	cmp	r1, r3
 8004b46:	db05      	blt.n	8004b54 <_printf_float+0x1d4>
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	6121      	str	r1, [r4, #16]
 8004b4c:	07d8      	lsls	r0, r3, #31
 8004b4e:	d5ea      	bpl.n	8004b26 <_printf_float+0x1a6>
 8004b50:	1c4b      	adds	r3, r1, #1
 8004b52:	e7e7      	b.n	8004b24 <_printf_float+0x1a4>
 8004b54:	2900      	cmp	r1, #0
 8004b56:	bfd4      	ite	le
 8004b58:	f1c1 0202 	rsble	r2, r1, #2
 8004b5c:	2201      	movgt	r2, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	e7e0      	b.n	8004b24 <_printf_float+0x1a4>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	055a      	lsls	r2, r3, #21
 8004b66:	d407      	bmi.n	8004b78 <_printf_float+0x1f8>
 8004b68:	6923      	ldr	r3, [r4, #16]
 8004b6a:	4642      	mov	r2, r8
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	d12c      	bne.n	8004bd0 <_printf_float+0x250>
 8004b76:	e764      	b.n	8004a42 <_printf_float+0xc2>
 8004b78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b7c:	f240 80e0 	bls.w	8004d40 <_printf_float+0x3c0>
 8004b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b84:	2200      	movs	r2, #0
 8004b86:	2300      	movs	r3, #0
 8004b88:	f7fb ffbe 	bl	8000b08 <__aeabi_dcmpeq>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	d034      	beq.n	8004bfa <_printf_float+0x27a>
 8004b90:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <_printf_float+0x2f0>)
 8004b92:	2301      	movs	r3, #1
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f af51 	beq.w	8004a42 <_printf_float+0xc2>
 8004ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	db02      	blt.n	8004bae <_printf_float+0x22e>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07d8      	lsls	r0, r3, #31
 8004bac:	d510      	bpl.n	8004bd0 <_printf_float+0x250>
 8004bae:	ee18 3a10 	vmov	r3, s16
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	47b8      	blx	r7
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f43f af41 	beq.w	8004a42 <_printf_float+0xc2>
 8004bc0:	f04f 0800 	mov.w	r8, #0
 8004bc4:	f104 091a 	add.w	r9, r4, #26
 8004bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4543      	cmp	r3, r8
 8004bce:	dc09      	bgt.n	8004be4 <_printf_float+0x264>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	079b      	lsls	r3, r3, #30
 8004bd4:	f100 8105 	bmi.w	8004de2 <_printf_float+0x462>
 8004bd8:	68e0      	ldr	r0, [r4, #12]
 8004bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bdc:	4298      	cmp	r0, r3
 8004bde:	bfb8      	it	lt
 8004be0:	4618      	movlt	r0, r3
 8004be2:	e730      	b.n	8004a46 <_printf_float+0xc6>
 8004be4:	2301      	movs	r3, #1
 8004be6:	464a      	mov	r2, r9
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af27 	beq.w	8004a42 <_printf_float+0xc2>
 8004bf4:	f108 0801 	add.w	r8, r8, #1
 8004bf8:	e7e6      	b.n	8004bc8 <_printf_float+0x248>
 8004bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dc39      	bgt.n	8004c74 <_printf_float+0x2f4>
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <_printf_float+0x2f0>)
 8004c02:	2301      	movs	r3, #1
 8004c04:	4631      	mov	r1, r6
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b8      	blx	r7
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	f43f af19 	beq.w	8004a42 <_printf_float+0xc2>
 8004c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d102      	bne.n	8004c1e <_printf_float+0x29e>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07d9      	lsls	r1, r3, #31
 8004c1c:	d5d8      	bpl.n	8004bd0 <_printf_float+0x250>
 8004c1e:	ee18 3a10 	vmov	r3, s16
 8004c22:	4652      	mov	r2, sl
 8004c24:	4631      	mov	r1, r6
 8004c26:	4628      	mov	r0, r5
 8004c28:	47b8      	blx	r7
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	f43f af09 	beq.w	8004a42 <_printf_float+0xc2>
 8004c30:	f04f 0900 	mov.w	r9, #0
 8004c34:	f104 0a1a 	add.w	sl, r4, #26
 8004c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3a:	425b      	negs	r3, r3
 8004c3c:	454b      	cmp	r3, r9
 8004c3e:	dc01      	bgt.n	8004c44 <_printf_float+0x2c4>
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	e792      	b.n	8004b6a <_printf_float+0x1ea>
 8004c44:	2301      	movs	r3, #1
 8004c46:	4652      	mov	r2, sl
 8004c48:	4631      	mov	r1, r6
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	47b8      	blx	r7
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f43f aef7 	beq.w	8004a42 <_printf_float+0xc2>
 8004c54:	f109 0901 	add.w	r9, r9, #1
 8004c58:	e7ee      	b.n	8004c38 <_printf_float+0x2b8>
 8004c5a:	bf00      	nop
 8004c5c:	7fefffff 	.word	0x7fefffff
 8004c60:	08007a10 	.word	0x08007a10
 8004c64:	08007a14 	.word	0x08007a14
 8004c68:	08007a1c 	.word	0x08007a1c
 8004c6c:	08007a18 	.word	0x08007a18
 8004c70:	08007a20 	.word	0x08007a20
 8004c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	bfa8      	it	ge
 8004c7c:	461a      	movge	r2, r3
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	4691      	mov	r9, r2
 8004c82:	dc37      	bgt.n	8004cf4 <_printf_float+0x374>
 8004c84:	f04f 0b00 	mov.w	fp, #0
 8004c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c8c:	f104 021a 	add.w	r2, r4, #26
 8004c90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c92:	9305      	str	r3, [sp, #20]
 8004c94:	eba3 0309 	sub.w	r3, r3, r9
 8004c98:	455b      	cmp	r3, fp
 8004c9a:	dc33      	bgt.n	8004d04 <_printf_float+0x384>
 8004c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	db3b      	blt.n	8004d1c <_printf_float+0x39c>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	07da      	lsls	r2, r3, #31
 8004ca8:	d438      	bmi.n	8004d1c <_printf_float+0x39c>
 8004caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cac:	9a05      	ldr	r2, [sp, #20]
 8004cae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cb0:	1a9a      	subs	r2, r3, r2
 8004cb2:	eba3 0901 	sub.w	r9, r3, r1
 8004cb6:	4591      	cmp	r9, r2
 8004cb8:	bfa8      	it	ge
 8004cba:	4691      	movge	r9, r2
 8004cbc:	f1b9 0f00 	cmp.w	r9, #0
 8004cc0:	dc35      	bgt.n	8004d2e <_printf_float+0x3ae>
 8004cc2:	f04f 0800 	mov.w	r8, #0
 8004cc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cca:	f104 0a1a 	add.w	sl, r4, #26
 8004cce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	eba3 0309 	sub.w	r3, r3, r9
 8004cd8:	4543      	cmp	r3, r8
 8004cda:	f77f af79 	ble.w	8004bd0 <_printf_float+0x250>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4652      	mov	r2, sl
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f aeaa 	beq.w	8004a42 <_printf_float+0xc2>
 8004cee:	f108 0801 	add.w	r8, r8, #1
 8004cf2:	e7ec      	b.n	8004cce <_printf_float+0x34e>
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	4631      	mov	r1, r6
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d1c0      	bne.n	8004c84 <_printf_float+0x304>
 8004d02:	e69e      	b.n	8004a42 <_printf_float+0xc2>
 8004d04:	2301      	movs	r3, #1
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	9205      	str	r2, [sp, #20]
 8004d0c:	47b8      	blx	r7
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f43f ae97 	beq.w	8004a42 <_printf_float+0xc2>
 8004d14:	9a05      	ldr	r2, [sp, #20]
 8004d16:	f10b 0b01 	add.w	fp, fp, #1
 8004d1a:	e7b9      	b.n	8004c90 <_printf_float+0x310>
 8004d1c:	ee18 3a10 	vmov	r3, s16
 8004d20:	4652      	mov	r2, sl
 8004d22:	4631      	mov	r1, r6
 8004d24:	4628      	mov	r0, r5
 8004d26:	47b8      	blx	r7
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d1be      	bne.n	8004caa <_printf_float+0x32a>
 8004d2c:	e689      	b.n	8004a42 <_printf_float+0xc2>
 8004d2e:	9a05      	ldr	r2, [sp, #20]
 8004d30:	464b      	mov	r3, r9
 8004d32:	4442      	add	r2, r8
 8004d34:	4631      	mov	r1, r6
 8004d36:	4628      	mov	r0, r5
 8004d38:	47b8      	blx	r7
 8004d3a:	3001      	adds	r0, #1
 8004d3c:	d1c1      	bne.n	8004cc2 <_printf_float+0x342>
 8004d3e:	e680      	b.n	8004a42 <_printf_float+0xc2>
 8004d40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d42:	2a01      	cmp	r2, #1
 8004d44:	dc01      	bgt.n	8004d4a <_printf_float+0x3ca>
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	d538      	bpl.n	8004dbc <_printf_float+0x43c>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f ae74 	beq.w	8004a42 <_printf_float+0xc2>
 8004d5a:	ee18 3a10 	vmov	r3, s16
 8004d5e:	4652      	mov	r2, sl
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f ae6b 	beq.w	8004a42 <_printf_float+0xc2>
 8004d6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d70:	2200      	movs	r2, #0
 8004d72:	2300      	movs	r3, #0
 8004d74:	f7fb fec8 	bl	8000b08 <__aeabi_dcmpeq>
 8004d78:	b9d8      	cbnz	r0, 8004db2 <_printf_float+0x432>
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7c:	f108 0201 	add.w	r2, r8, #1
 8004d80:	3b01      	subs	r3, #1
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d10e      	bne.n	8004daa <_printf_float+0x42a>
 8004d8c:	e659      	b.n	8004a42 <_printf_float+0xc2>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f ae52 	beq.w	8004a42 <_printf_float+0xc2>
 8004d9e:	f108 0801 	add.w	r8, r8, #1
 8004da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	4543      	cmp	r3, r8
 8004da8:	dcf1      	bgt.n	8004d8e <_printf_float+0x40e>
 8004daa:	464b      	mov	r3, r9
 8004dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004db0:	e6dc      	b.n	8004b6c <_printf_float+0x1ec>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 0a1a 	add.w	sl, r4, #26
 8004dba:	e7f2      	b.n	8004da2 <_printf_float+0x422>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	e7df      	b.n	8004d82 <_printf_float+0x402>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	464a      	mov	r2, r9
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae38 	beq.w	8004a42 <_printf_float+0xc2>
 8004dd2:	f108 0801 	add.w	r8, r8, #1
 8004dd6:	68e3      	ldr	r3, [r4, #12]
 8004dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	4543      	cmp	r3, r8
 8004dde:	dcf0      	bgt.n	8004dc2 <_printf_float+0x442>
 8004de0:	e6fa      	b.n	8004bd8 <_printf_float+0x258>
 8004de2:	f04f 0800 	mov.w	r8, #0
 8004de6:	f104 0919 	add.w	r9, r4, #25
 8004dea:	e7f4      	b.n	8004dd6 <_printf_float+0x456>

08004dec <_printf_common>:
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	4616      	mov	r6, r2
 8004df2:	4699      	mov	r9, r3
 8004df4:	688a      	ldr	r2, [r1, #8]
 8004df6:	690b      	ldr	r3, [r1, #16]
 8004df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bfb8      	it	lt
 8004e00:	4613      	movlt	r3, r2
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e08:	4607      	mov	r7, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b10a      	cbz	r2, 8004e12 <_printf_common+0x26>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	6033      	str	r3, [r6, #0]
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	0699      	lsls	r1, r3, #26
 8004e16:	bf42      	ittt	mi
 8004e18:	6833      	ldrmi	r3, [r6, #0]
 8004e1a:	3302      	addmi	r3, #2
 8004e1c:	6033      	strmi	r3, [r6, #0]
 8004e1e:	6825      	ldr	r5, [r4, #0]
 8004e20:	f015 0506 	ands.w	r5, r5, #6
 8004e24:	d106      	bne.n	8004e34 <_printf_common+0x48>
 8004e26:	f104 0a19 	add.w	sl, r4, #25
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	6832      	ldr	r2, [r6, #0]
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	42ab      	cmp	r3, r5
 8004e32:	dc26      	bgt.n	8004e82 <_printf_common+0x96>
 8004e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e38:	1e13      	subs	r3, r2, #0
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	0692      	lsls	r2, r2, #26
 8004e42:	d42b      	bmi.n	8004e9c <_printf_common+0xb0>
 8004e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e48:	4649      	mov	r1, r9
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	47c0      	blx	r8
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d01e      	beq.n	8004e90 <_printf_common+0xa4>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	68e5      	ldr	r5, [r4, #12]
 8004e56:	6832      	ldr	r2, [r6, #0]
 8004e58:	f003 0306 	and.w	r3, r3, #6
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	bf08      	it	eq
 8004e60:	1aad      	subeq	r5, r5, r2
 8004e62:	68a3      	ldr	r3, [r4, #8]
 8004e64:	6922      	ldr	r2, [r4, #16]
 8004e66:	bf0c      	ite	eq
 8004e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e6c:	2500      	movne	r5, #0
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	bfc4      	itt	gt
 8004e72:	1a9b      	subgt	r3, r3, r2
 8004e74:	18ed      	addgt	r5, r5, r3
 8004e76:	2600      	movs	r6, #0
 8004e78:	341a      	adds	r4, #26
 8004e7a:	42b5      	cmp	r5, r6
 8004e7c:	d11a      	bne.n	8004eb4 <_printf_common+0xc8>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	e008      	b.n	8004e94 <_printf_common+0xa8>
 8004e82:	2301      	movs	r3, #1
 8004e84:	4652      	mov	r2, sl
 8004e86:	4649      	mov	r1, r9
 8004e88:	4638      	mov	r0, r7
 8004e8a:	47c0      	blx	r8
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d103      	bne.n	8004e98 <_printf_common+0xac>
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e98:	3501      	adds	r5, #1
 8004e9a:	e7c6      	b.n	8004e2a <_printf_common+0x3e>
 8004e9c:	18e1      	adds	r1, r4, r3
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	2030      	movs	r0, #48	; 0x30
 8004ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea6:	4422      	add	r2, r4
 8004ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	e7c7      	b.n	8004e44 <_printf_common+0x58>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4649      	mov	r1, r9
 8004eba:	4638      	mov	r0, r7
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0e6      	beq.n	8004e90 <_printf_common+0xa4>
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7d9      	b.n	8004e7a <_printf_common+0x8e>
	...

08004ec8 <_printf_i>:
 8004ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	7e0f      	ldrb	r7, [r1, #24]
 8004ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed0:	2f78      	cmp	r7, #120	; 0x78
 8004ed2:	4691      	mov	r9, r2
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	469a      	mov	sl, r3
 8004eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ede:	d807      	bhi.n	8004ef0 <_printf_i+0x28>
 8004ee0:	2f62      	cmp	r7, #98	; 0x62
 8004ee2:	d80a      	bhi.n	8004efa <_printf_i+0x32>
 8004ee4:	2f00      	cmp	r7, #0
 8004ee6:	f000 80d8 	beq.w	800509a <_printf_i+0x1d2>
 8004eea:	2f58      	cmp	r7, #88	; 0x58
 8004eec:	f000 80a3 	beq.w	8005036 <_printf_i+0x16e>
 8004ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ef8:	e03a      	b.n	8004f70 <_printf_i+0xa8>
 8004efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004efe:	2b15      	cmp	r3, #21
 8004f00:	d8f6      	bhi.n	8004ef0 <_printf_i+0x28>
 8004f02:	a101      	add	r1, pc, #4	; (adr r1, 8004f08 <_printf_i+0x40>)
 8004f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	08004f75 	.word	0x08004f75
 8004f10:	08004ef1 	.word	0x08004ef1
 8004f14:	08004ef1 	.word	0x08004ef1
 8004f18:	08004ef1 	.word	0x08004ef1
 8004f1c:	08004ef1 	.word	0x08004ef1
 8004f20:	08004f75 	.word	0x08004f75
 8004f24:	08004ef1 	.word	0x08004ef1
 8004f28:	08004ef1 	.word	0x08004ef1
 8004f2c:	08004ef1 	.word	0x08004ef1
 8004f30:	08004ef1 	.word	0x08004ef1
 8004f34:	08005081 	.word	0x08005081
 8004f38:	08004fa5 	.word	0x08004fa5
 8004f3c:	08005063 	.word	0x08005063
 8004f40:	08004ef1 	.word	0x08004ef1
 8004f44:	08004ef1 	.word	0x08004ef1
 8004f48:	080050a3 	.word	0x080050a3
 8004f4c:	08004ef1 	.word	0x08004ef1
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004ef1 	.word	0x08004ef1
 8004f58:	08004ef1 	.word	0x08004ef1
 8004f5c:	0800506b 	.word	0x0800506b
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	1d1a      	adds	r2, r3, #4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0a3      	b.n	80050bc <_printf_i+0x1f4>
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	6829      	ldr	r1, [r5, #0]
 8004f78:	0606      	lsls	r6, r0, #24
 8004f7a:	f101 0304 	add.w	r3, r1, #4
 8004f7e:	d50a      	bpl.n	8004f96 <_printf_i+0xce>
 8004f80:	680e      	ldr	r6, [r1, #0]
 8004f82:	602b      	str	r3, [r5, #0]
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xc8>
 8004f88:	232d      	movs	r3, #45	; 0x2d
 8004f8a:	4276      	negs	r6, r6
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f90:	485e      	ldr	r0, [pc, #376]	; (800510c <_printf_i+0x244>)
 8004f92:	230a      	movs	r3, #10
 8004f94:	e019      	b.n	8004fca <_printf_i+0x102>
 8004f96:	680e      	ldr	r6, [r1, #0]
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f9e:	bf18      	it	ne
 8004fa0:	b236      	sxthne	r6, r6
 8004fa2:	e7ef      	b.n	8004f84 <_printf_i+0xbc>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	6820      	ldr	r0, [r4, #0]
 8004fa8:	1d19      	adds	r1, r3, #4
 8004faa:	6029      	str	r1, [r5, #0]
 8004fac:	0601      	lsls	r1, r0, #24
 8004fae:	d501      	bpl.n	8004fb4 <_printf_i+0xec>
 8004fb0:	681e      	ldr	r6, [r3, #0]
 8004fb2:	e002      	b.n	8004fba <_printf_i+0xf2>
 8004fb4:	0646      	lsls	r6, r0, #25
 8004fb6:	d5fb      	bpl.n	8004fb0 <_printf_i+0xe8>
 8004fb8:	881e      	ldrh	r6, [r3, #0]
 8004fba:	4854      	ldr	r0, [pc, #336]	; (800510c <_printf_i+0x244>)
 8004fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2308      	moveq	r3, #8
 8004fc2:	230a      	movne	r3, #10
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fca:	6865      	ldr	r5, [r4, #4]
 8004fcc:	60a5      	str	r5, [r4, #8]
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	bfa2      	ittt	ge
 8004fd2:	6821      	ldrge	r1, [r4, #0]
 8004fd4:	f021 0104 	bicge.w	r1, r1, #4
 8004fd8:	6021      	strge	r1, [r4, #0]
 8004fda:	b90e      	cbnz	r6, 8004fe0 <_printf_i+0x118>
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	d04d      	beq.n	800507c <_printf_i+0x1b4>
 8004fe0:	4615      	mov	r5, r2
 8004fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8004fea:	5dc7      	ldrb	r7, [r0, r7]
 8004fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ff0:	4637      	mov	r7, r6
 8004ff2:	42bb      	cmp	r3, r7
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	d9f4      	bls.n	8004fe2 <_printf_i+0x11a>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d10b      	bne.n	8005014 <_printf_i+0x14c>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	07de      	lsls	r6, r3, #31
 8005000:	d508      	bpl.n	8005014 <_printf_i+0x14c>
 8005002:	6923      	ldr	r3, [r4, #16]
 8005004:	6861      	ldr	r1, [r4, #4]
 8005006:	4299      	cmp	r1, r3
 8005008:	bfde      	ittt	le
 800500a:	2330      	movle	r3, #48	; 0x30
 800500c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005014:	1b52      	subs	r2, r2, r5
 8005016:	6122      	str	r2, [r4, #16]
 8005018:	f8cd a000 	str.w	sl, [sp]
 800501c:	464b      	mov	r3, r9
 800501e:	aa03      	add	r2, sp, #12
 8005020:	4621      	mov	r1, r4
 8005022:	4640      	mov	r0, r8
 8005024:	f7ff fee2 	bl	8004dec <_printf_common>
 8005028:	3001      	adds	r0, #1
 800502a:	d14c      	bne.n	80050c6 <_printf_i+0x1fe>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	b004      	add	sp, #16
 8005032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005036:	4835      	ldr	r0, [pc, #212]	; (800510c <_printf_i+0x244>)
 8005038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800503c:	6829      	ldr	r1, [r5, #0]
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	f851 6b04 	ldr.w	r6, [r1], #4
 8005044:	6029      	str	r1, [r5, #0]
 8005046:	061d      	lsls	r5, r3, #24
 8005048:	d514      	bpl.n	8005074 <_printf_i+0x1ac>
 800504a:	07df      	lsls	r7, r3, #31
 800504c:	bf44      	itt	mi
 800504e:	f043 0320 	orrmi.w	r3, r3, #32
 8005052:	6023      	strmi	r3, [r4, #0]
 8005054:	b91e      	cbnz	r6, 800505e <_printf_i+0x196>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	f023 0320 	bic.w	r3, r3, #32
 800505c:	6023      	str	r3, [r4, #0]
 800505e:	2310      	movs	r3, #16
 8005060:	e7b0      	b.n	8004fc4 <_printf_i+0xfc>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f043 0320 	orr.w	r3, r3, #32
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	2378      	movs	r3, #120	; 0x78
 800506c:	4828      	ldr	r0, [pc, #160]	; (8005110 <_printf_i+0x248>)
 800506e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005072:	e7e3      	b.n	800503c <_printf_i+0x174>
 8005074:	0659      	lsls	r1, r3, #25
 8005076:	bf48      	it	mi
 8005078:	b2b6      	uxthmi	r6, r6
 800507a:	e7e6      	b.n	800504a <_printf_i+0x182>
 800507c:	4615      	mov	r5, r2
 800507e:	e7bb      	b.n	8004ff8 <_printf_i+0x130>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	6826      	ldr	r6, [r4, #0]
 8005084:	6961      	ldr	r1, [r4, #20]
 8005086:	1d18      	adds	r0, r3, #4
 8005088:	6028      	str	r0, [r5, #0]
 800508a:	0635      	lsls	r5, r6, #24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	d501      	bpl.n	8005094 <_printf_i+0x1cc>
 8005090:	6019      	str	r1, [r3, #0]
 8005092:	e002      	b.n	800509a <_printf_i+0x1d2>
 8005094:	0670      	lsls	r0, r6, #25
 8005096:	d5fb      	bpl.n	8005090 <_printf_i+0x1c8>
 8005098:	8019      	strh	r1, [r3, #0]
 800509a:	2300      	movs	r3, #0
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	4615      	mov	r5, r2
 80050a0:	e7ba      	b.n	8005018 <_printf_i+0x150>
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	1d1a      	adds	r2, r3, #4
 80050a6:	602a      	str	r2, [r5, #0]
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	2100      	movs	r1, #0
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7fb f8b6 	bl	8000220 <memchr>
 80050b4:	b108      	cbz	r0, 80050ba <_printf_i+0x1f2>
 80050b6:	1b40      	subs	r0, r0, r5
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	2300      	movs	r3, #0
 80050c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c4:	e7a8      	b.n	8005018 <_printf_i+0x150>
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	47d0      	blx	sl
 80050d0:	3001      	adds	r0, #1
 80050d2:	d0ab      	beq.n	800502c <_printf_i+0x164>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	d413      	bmi.n	8005102 <_printf_i+0x23a>
 80050da:	68e0      	ldr	r0, [r4, #12]
 80050dc:	9b03      	ldr	r3, [sp, #12]
 80050de:	4298      	cmp	r0, r3
 80050e0:	bfb8      	it	lt
 80050e2:	4618      	movlt	r0, r3
 80050e4:	e7a4      	b.n	8005030 <_printf_i+0x168>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4632      	mov	r2, r6
 80050ea:	4649      	mov	r1, r9
 80050ec:	4640      	mov	r0, r8
 80050ee:	47d0      	blx	sl
 80050f0:	3001      	adds	r0, #1
 80050f2:	d09b      	beq.n	800502c <_printf_i+0x164>
 80050f4:	3501      	adds	r5, #1
 80050f6:	68e3      	ldr	r3, [r4, #12]
 80050f8:	9903      	ldr	r1, [sp, #12]
 80050fa:	1a5b      	subs	r3, r3, r1
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	dcf2      	bgt.n	80050e6 <_printf_i+0x21e>
 8005100:	e7eb      	b.n	80050da <_printf_i+0x212>
 8005102:	2500      	movs	r5, #0
 8005104:	f104 0619 	add.w	r6, r4, #25
 8005108:	e7f5      	b.n	80050f6 <_printf_i+0x22e>
 800510a:	bf00      	nop
 800510c:	08007a22 	.word	0x08007a22
 8005110:	08007a33 	.word	0x08007a33

08005114 <siprintf>:
 8005114:	b40e      	push	{r1, r2, r3}
 8005116:	b500      	push	{lr}
 8005118:	b09c      	sub	sp, #112	; 0x70
 800511a:	ab1d      	add	r3, sp, #116	; 0x74
 800511c:	9002      	str	r0, [sp, #8]
 800511e:	9006      	str	r0, [sp, #24]
 8005120:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005124:	4809      	ldr	r0, [pc, #36]	; (800514c <siprintf+0x38>)
 8005126:	9107      	str	r1, [sp, #28]
 8005128:	9104      	str	r1, [sp, #16]
 800512a:	4909      	ldr	r1, [pc, #36]	; (8005150 <siprintf+0x3c>)
 800512c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005130:	9105      	str	r1, [sp, #20]
 8005132:	6800      	ldr	r0, [r0, #0]
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	a902      	add	r1, sp, #8
 8005138:	f001 fb78 	bl	800682c <_svfiprintf_r>
 800513c:	9b02      	ldr	r3, [sp, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	b01c      	add	sp, #112	; 0x70
 8005144:	f85d eb04 	ldr.w	lr, [sp], #4
 8005148:	b003      	add	sp, #12
 800514a:	4770      	bx	lr
 800514c:	20000014 	.word	0x20000014
 8005150:	ffff0208 	.word	0xffff0208

08005154 <quorem>:
 8005154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005158:	6903      	ldr	r3, [r0, #16]
 800515a:	690c      	ldr	r4, [r1, #16]
 800515c:	42a3      	cmp	r3, r4
 800515e:	4607      	mov	r7, r0
 8005160:	f2c0 8081 	blt.w	8005266 <quorem+0x112>
 8005164:	3c01      	subs	r4, #1
 8005166:	f101 0814 	add.w	r8, r1, #20
 800516a:	f100 0514 	add.w	r5, r0, #20
 800516e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800517c:	3301      	adds	r3, #1
 800517e:	429a      	cmp	r2, r3
 8005180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005188:	fbb2 f6f3 	udiv	r6, r2, r3
 800518c:	d331      	bcc.n	80051f2 <quorem+0x9e>
 800518e:	f04f 0e00 	mov.w	lr, #0
 8005192:	4640      	mov	r0, r8
 8005194:	46ac      	mov	ip, r5
 8005196:	46f2      	mov	sl, lr
 8005198:	f850 2b04 	ldr.w	r2, [r0], #4
 800519c:	b293      	uxth	r3, r2
 800519e:	fb06 e303 	mla	r3, r6, r3, lr
 80051a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ebaa 0303 	sub.w	r3, sl, r3
 80051ac:	f8dc a000 	ldr.w	sl, [ip]
 80051b0:	0c12      	lsrs	r2, r2, #16
 80051b2:	fa13 f38a 	uxtah	r3, r3, sl
 80051b6:	fb06 e202 	mla	r2, r6, r2, lr
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	9b00      	ldr	r3, [sp, #0]
 80051be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051c2:	b292      	uxth	r2, r2
 80051c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80051d0:	4581      	cmp	r9, r0
 80051d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051d6:	f84c 3b04 	str.w	r3, [ip], #4
 80051da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051de:	d2db      	bcs.n	8005198 <quorem+0x44>
 80051e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80051e4:	b92b      	cbnz	r3, 80051f2 <quorem+0x9e>
 80051e6:	9b01      	ldr	r3, [sp, #4]
 80051e8:	3b04      	subs	r3, #4
 80051ea:	429d      	cmp	r5, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	d32e      	bcc.n	800524e <quorem+0xfa>
 80051f0:	613c      	str	r4, [r7, #16]
 80051f2:	4638      	mov	r0, r7
 80051f4:	f001 f8c6 	bl	8006384 <__mcmp>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	db24      	blt.n	8005246 <quorem+0xf2>
 80051fc:	3601      	adds	r6, #1
 80051fe:	4628      	mov	r0, r5
 8005200:	f04f 0c00 	mov.w	ip, #0
 8005204:	f858 2b04 	ldr.w	r2, [r8], #4
 8005208:	f8d0 e000 	ldr.w	lr, [r0]
 800520c:	b293      	uxth	r3, r2
 800520e:	ebac 0303 	sub.w	r3, ip, r3
 8005212:	0c12      	lsrs	r2, r2, #16
 8005214:	fa13 f38e 	uxtah	r3, r3, lr
 8005218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800521c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005226:	45c1      	cmp	r9, r8
 8005228:	f840 3b04 	str.w	r3, [r0], #4
 800522c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005230:	d2e8      	bcs.n	8005204 <quorem+0xb0>
 8005232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800523a:	b922      	cbnz	r2, 8005246 <quorem+0xf2>
 800523c:	3b04      	subs	r3, #4
 800523e:	429d      	cmp	r5, r3
 8005240:	461a      	mov	r2, r3
 8005242:	d30a      	bcc.n	800525a <quorem+0x106>
 8005244:	613c      	str	r4, [r7, #16]
 8005246:	4630      	mov	r0, r6
 8005248:	b003      	add	sp, #12
 800524a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	3b04      	subs	r3, #4
 8005252:	2a00      	cmp	r2, #0
 8005254:	d1cc      	bne.n	80051f0 <quorem+0x9c>
 8005256:	3c01      	subs	r4, #1
 8005258:	e7c7      	b.n	80051ea <quorem+0x96>
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	3b04      	subs	r3, #4
 800525e:	2a00      	cmp	r2, #0
 8005260:	d1f0      	bne.n	8005244 <quorem+0xf0>
 8005262:	3c01      	subs	r4, #1
 8005264:	e7eb      	b.n	800523e <quorem+0xea>
 8005266:	2000      	movs	r0, #0
 8005268:	e7ee      	b.n	8005248 <quorem+0xf4>
 800526a:	0000      	movs	r0, r0
 800526c:	0000      	movs	r0, r0
	...

08005270 <_dtoa_r>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	ed2d 8b04 	vpush	{d8-d9}
 8005278:	ec57 6b10 	vmov	r6, r7, d0
 800527c:	b093      	sub	sp, #76	; 0x4c
 800527e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005284:	9106      	str	r1, [sp, #24]
 8005286:	ee10 aa10 	vmov	sl, s0
 800528a:	4604      	mov	r4, r0
 800528c:	9209      	str	r2, [sp, #36]	; 0x24
 800528e:	930c      	str	r3, [sp, #48]	; 0x30
 8005290:	46bb      	mov	fp, r7
 8005292:	b975      	cbnz	r5, 80052b2 <_dtoa_r+0x42>
 8005294:	2010      	movs	r0, #16
 8005296:	f000 fddd 	bl	8005e54 <malloc>
 800529a:	4602      	mov	r2, r0
 800529c:	6260      	str	r0, [r4, #36]	; 0x24
 800529e:	b920      	cbnz	r0, 80052aa <_dtoa_r+0x3a>
 80052a0:	4ba7      	ldr	r3, [pc, #668]	; (8005540 <_dtoa_r+0x2d0>)
 80052a2:	21ea      	movs	r1, #234	; 0xea
 80052a4:	48a7      	ldr	r0, [pc, #668]	; (8005544 <_dtoa_r+0x2d4>)
 80052a6:	f001 fbd1 	bl	8006a4c <__assert_func>
 80052aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052ae:	6005      	str	r5, [r0, #0]
 80052b0:	60c5      	str	r5, [r0, #12]
 80052b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	b151      	cbz	r1, 80052ce <_dtoa_r+0x5e>
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	604a      	str	r2, [r1, #4]
 80052bc:	2301      	movs	r3, #1
 80052be:	4093      	lsls	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fe1c 	bl	8005f00 <_Bfree>
 80052c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	1e3b      	subs	r3, r7, #0
 80052d0:	bfaa      	itet	ge
 80052d2:	2300      	movge	r3, #0
 80052d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052d8:	f8c8 3000 	strge.w	r3, [r8]
 80052dc:	4b9a      	ldr	r3, [pc, #616]	; (8005548 <_dtoa_r+0x2d8>)
 80052de:	bfbc      	itt	lt
 80052e0:	2201      	movlt	r2, #1
 80052e2:	f8c8 2000 	strlt.w	r2, [r8]
 80052e6:	ea33 030b 	bics.w	r3, r3, fp
 80052ea:	d11b      	bne.n	8005324 <_dtoa_r+0xb4>
 80052ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052f8:	4333      	orrs	r3, r6
 80052fa:	f000 8592 	beq.w	8005e22 <_dtoa_r+0xbb2>
 80052fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005300:	b963      	cbnz	r3, 800531c <_dtoa_r+0xac>
 8005302:	4b92      	ldr	r3, [pc, #584]	; (800554c <_dtoa_r+0x2dc>)
 8005304:	e022      	b.n	800534c <_dtoa_r+0xdc>
 8005306:	4b92      	ldr	r3, [pc, #584]	; (8005550 <_dtoa_r+0x2e0>)
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	3308      	adds	r3, #8
 800530c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	9801      	ldr	r0, [sp, #4]
 8005312:	b013      	add	sp, #76	; 0x4c
 8005314:	ecbd 8b04 	vpop	{d8-d9}
 8005318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531c:	4b8b      	ldr	r3, [pc, #556]	; (800554c <_dtoa_r+0x2dc>)
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	3303      	adds	r3, #3
 8005322:	e7f3      	b.n	800530c <_dtoa_r+0x9c>
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	4650      	mov	r0, sl
 800532a:	4659      	mov	r1, fp
 800532c:	f7fb fbec 	bl	8000b08 <__aeabi_dcmpeq>
 8005330:	ec4b ab19 	vmov	d9, sl, fp
 8005334:	4680      	mov	r8, r0
 8005336:	b158      	cbz	r0, 8005350 <_dtoa_r+0xe0>
 8005338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800533a:	2301      	movs	r3, #1
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 856b 	beq.w	8005e1c <_dtoa_r+0xbac>
 8005346:	4883      	ldr	r0, [pc, #524]	; (8005554 <_dtoa_r+0x2e4>)
 8005348:	6018      	str	r0, [r3, #0]
 800534a:	1e43      	subs	r3, r0, #1
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	e7df      	b.n	8005310 <_dtoa_r+0xa0>
 8005350:	ec4b ab10 	vmov	d0, sl, fp
 8005354:	aa10      	add	r2, sp, #64	; 0x40
 8005356:	a911      	add	r1, sp, #68	; 0x44
 8005358:	4620      	mov	r0, r4
 800535a:	f001 f8b9 	bl	80064d0 <__d2b>
 800535e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005362:	ee08 0a10 	vmov	s16, r0
 8005366:	2d00      	cmp	r5, #0
 8005368:	f000 8084 	beq.w	8005474 <_dtoa_r+0x204>
 800536c:	ee19 3a90 	vmov	r3, s19
 8005370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005378:	4656      	mov	r6, sl
 800537a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800537e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005386:	4b74      	ldr	r3, [pc, #464]	; (8005558 <_dtoa_r+0x2e8>)
 8005388:	2200      	movs	r2, #0
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fa ff9b 	bl	80002c8 <__aeabi_dsub>
 8005392:	a365      	add	r3, pc, #404	; (adr r3, 8005528 <_dtoa_r+0x2b8>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	f7fb f94e 	bl	8000638 <__aeabi_dmul>
 800539c:	a364      	add	r3, pc, #400	; (adr r3, 8005530 <_dtoa_r+0x2c0>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	f7fa ff93 	bl	80002cc <__adddf3>
 80053a6:	4606      	mov	r6, r0
 80053a8:	4628      	mov	r0, r5
 80053aa:	460f      	mov	r7, r1
 80053ac:	f7fb f8da 	bl	8000564 <__aeabi_i2d>
 80053b0:	a361      	add	r3, pc, #388	; (adr r3, 8005538 <_dtoa_r+0x2c8>)
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f7fb f93f 	bl	8000638 <__aeabi_dmul>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4630      	mov	r0, r6
 80053c0:	4639      	mov	r1, r7
 80053c2:	f7fa ff83 	bl	80002cc <__adddf3>
 80053c6:	4606      	mov	r6, r0
 80053c8:	460f      	mov	r7, r1
 80053ca:	f7fb fbe5 	bl	8000b98 <__aeabi_d2iz>
 80053ce:	2200      	movs	r2, #0
 80053d0:	9000      	str	r0, [sp, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	4630      	mov	r0, r6
 80053d6:	4639      	mov	r1, r7
 80053d8:	f7fb fba0 	bl	8000b1c <__aeabi_dcmplt>
 80053dc:	b150      	cbz	r0, 80053f4 <_dtoa_r+0x184>
 80053de:	9800      	ldr	r0, [sp, #0]
 80053e0:	f7fb f8c0 	bl	8000564 <__aeabi_i2d>
 80053e4:	4632      	mov	r2, r6
 80053e6:	463b      	mov	r3, r7
 80053e8:	f7fb fb8e 	bl	8000b08 <__aeabi_dcmpeq>
 80053ec:	b910      	cbnz	r0, 80053f4 <_dtoa_r+0x184>
 80053ee:	9b00      	ldr	r3, [sp, #0]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	9b00      	ldr	r3, [sp, #0]
 80053f6:	2b16      	cmp	r3, #22
 80053f8:	d85a      	bhi.n	80054b0 <_dtoa_r+0x240>
 80053fa:	9a00      	ldr	r2, [sp, #0]
 80053fc:	4b57      	ldr	r3, [pc, #348]	; (800555c <_dtoa_r+0x2ec>)
 80053fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	ec51 0b19 	vmov	r0, r1, d9
 800540a:	f7fb fb87 	bl	8000b1c <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	d050      	beq.n	80054b4 <_dtoa_r+0x244>
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	3b01      	subs	r3, #1
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	2300      	movs	r3, #0
 800541a:	930b      	str	r3, [sp, #44]	; 0x2c
 800541c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800541e:	1b5d      	subs	r5, r3, r5
 8005420:	1e6b      	subs	r3, r5, #1
 8005422:	9305      	str	r3, [sp, #20]
 8005424:	bf45      	ittet	mi
 8005426:	f1c5 0301 	rsbmi	r3, r5, #1
 800542a:	9304      	strmi	r3, [sp, #16]
 800542c:	2300      	movpl	r3, #0
 800542e:	2300      	movmi	r3, #0
 8005430:	bf4c      	ite	mi
 8005432:	9305      	strmi	r3, [sp, #20]
 8005434:	9304      	strpl	r3, [sp, #16]
 8005436:	9b00      	ldr	r3, [sp, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	db3d      	blt.n	80054b8 <_dtoa_r+0x248>
 800543c:	9b05      	ldr	r3, [sp, #20]
 800543e:	9a00      	ldr	r2, [sp, #0]
 8005440:	920a      	str	r2, [sp, #40]	; 0x28
 8005442:	4413      	add	r3, r2
 8005444:	9305      	str	r3, [sp, #20]
 8005446:	2300      	movs	r3, #0
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	9b06      	ldr	r3, [sp, #24]
 800544c:	2b09      	cmp	r3, #9
 800544e:	f200 8089 	bhi.w	8005564 <_dtoa_r+0x2f4>
 8005452:	2b05      	cmp	r3, #5
 8005454:	bfc4      	itt	gt
 8005456:	3b04      	subgt	r3, #4
 8005458:	9306      	strgt	r3, [sp, #24]
 800545a:	9b06      	ldr	r3, [sp, #24]
 800545c:	f1a3 0302 	sub.w	r3, r3, #2
 8005460:	bfcc      	ite	gt
 8005462:	2500      	movgt	r5, #0
 8005464:	2501      	movle	r5, #1
 8005466:	2b03      	cmp	r3, #3
 8005468:	f200 8087 	bhi.w	800557a <_dtoa_r+0x30a>
 800546c:	e8df f003 	tbb	[pc, r3]
 8005470:	59383a2d 	.word	0x59383a2d
 8005474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005478:	441d      	add	r5, r3
 800547a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800547e:	2b20      	cmp	r3, #32
 8005480:	bfc1      	itttt	gt
 8005482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800548a:	fa0b f303 	lslgt.w	r3, fp, r3
 800548e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005492:	bfda      	itte	le
 8005494:	f1c3 0320 	rsble	r3, r3, #32
 8005498:	fa06 f003 	lslle.w	r0, r6, r3
 800549c:	4318      	orrgt	r0, r3
 800549e:	f7fb f851 	bl	8000544 <__aeabi_ui2d>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4606      	mov	r6, r0
 80054a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054aa:	3d01      	subs	r5, #1
 80054ac:	930e      	str	r3, [sp, #56]	; 0x38
 80054ae:	e76a      	b.n	8005386 <_dtoa_r+0x116>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e7b2      	b.n	800541a <_dtoa_r+0x1aa>
 80054b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80054b6:	e7b1      	b.n	800541c <_dtoa_r+0x1ac>
 80054b8:	9b04      	ldr	r3, [sp, #16]
 80054ba:	9a00      	ldr	r2, [sp, #0]
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	4253      	negs	r3, r2
 80054c2:	9307      	str	r3, [sp, #28]
 80054c4:	2300      	movs	r3, #0
 80054c6:	930a      	str	r3, [sp, #40]	; 0x28
 80054c8:	e7bf      	b.n	800544a <_dtoa_r+0x1da>
 80054ca:	2300      	movs	r3, #0
 80054cc:	9308      	str	r3, [sp, #32]
 80054ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc55      	bgt.n	8005580 <_dtoa_r+0x310>
 80054d4:	2301      	movs	r3, #1
 80054d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054da:	461a      	mov	r2, r3
 80054dc:	9209      	str	r2, [sp, #36]	; 0x24
 80054de:	e00c      	b.n	80054fa <_dtoa_r+0x28a>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7f3      	b.n	80054cc <_dtoa_r+0x25c>
 80054e4:	2300      	movs	r3, #0
 80054e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e8:	9308      	str	r3, [sp, #32]
 80054ea:	9b00      	ldr	r3, [sp, #0]
 80054ec:	4413      	add	r3, r2
 80054ee:	9302      	str	r3, [sp, #8]
 80054f0:	3301      	adds	r3, #1
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	bfb8      	it	lt
 80054f8:	2301      	movlt	r3, #1
 80054fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054fc:	2200      	movs	r2, #0
 80054fe:	6042      	str	r2, [r0, #4]
 8005500:	2204      	movs	r2, #4
 8005502:	f102 0614 	add.w	r6, r2, #20
 8005506:	429e      	cmp	r6, r3
 8005508:	6841      	ldr	r1, [r0, #4]
 800550a:	d93d      	bls.n	8005588 <_dtoa_r+0x318>
 800550c:	4620      	mov	r0, r4
 800550e:	f000 fcb7 	bl	8005e80 <_Balloc>
 8005512:	9001      	str	r0, [sp, #4]
 8005514:	2800      	cmp	r0, #0
 8005516:	d13b      	bne.n	8005590 <_dtoa_r+0x320>
 8005518:	4b11      	ldr	r3, [pc, #68]	; (8005560 <_dtoa_r+0x2f0>)
 800551a:	4602      	mov	r2, r0
 800551c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005520:	e6c0      	b.n	80052a4 <_dtoa_r+0x34>
 8005522:	2301      	movs	r3, #1
 8005524:	e7df      	b.n	80054e6 <_dtoa_r+0x276>
 8005526:	bf00      	nop
 8005528:	636f4361 	.word	0x636f4361
 800552c:	3fd287a7 	.word	0x3fd287a7
 8005530:	8b60c8b3 	.word	0x8b60c8b3
 8005534:	3fc68a28 	.word	0x3fc68a28
 8005538:	509f79fb 	.word	0x509f79fb
 800553c:	3fd34413 	.word	0x3fd34413
 8005540:	08007a51 	.word	0x08007a51
 8005544:	08007a68 	.word	0x08007a68
 8005548:	7ff00000 	.word	0x7ff00000
 800554c:	08007a4d 	.word	0x08007a4d
 8005550:	08007a44 	.word	0x08007a44
 8005554:	08007a21 	.word	0x08007a21
 8005558:	3ff80000 	.word	0x3ff80000
 800555c:	08007b58 	.word	0x08007b58
 8005560:	08007ac3 	.word	0x08007ac3
 8005564:	2501      	movs	r5, #1
 8005566:	2300      	movs	r3, #0
 8005568:	9306      	str	r3, [sp, #24]
 800556a:	9508      	str	r5, [sp, #32]
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
 8005570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	2312      	movs	r3, #18
 8005578:	e7b0      	b.n	80054dc <_dtoa_r+0x26c>
 800557a:	2301      	movs	r3, #1
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	e7f5      	b.n	800556c <_dtoa_r+0x2fc>
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005586:	e7b8      	b.n	80054fa <_dtoa_r+0x28a>
 8005588:	3101      	adds	r1, #1
 800558a:	6041      	str	r1, [r0, #4]
 800558c:	0052      	lsls	r2, r2, #1
 800558e:	e7b8      	b.n	8005502 <_dtoa_r+0x292>
 8005590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005592:	9a01      	ldr	r2, [sp, #4]
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	9b03      	ldr	r3, [sp, #12]
 8005598:	2b0e      	cmp	r3, #14
 800559a:	f200 809d 	bhi.w	80056d8 <_dtoa_r+0x468>
 800559e:	2d00      	cmp	r5, #0
 80055a0:	f000 809a 	beq.w	80056d8 <_dtoa_r+0x468>
 80055a4:	9b00      	ldr	r3, [sp, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	dd32      	ble.n	8005610 <_dtoa_r+0x3a0>
 80055aa:	4ab7      	ldr	r2, [pc, #732]	; (8005888 <_dtoa_r+0x618>)
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	05d8      	lsls	r0, r3, #23
 80055bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80055c0:	d516      	bpl.n	80055f0 <_dtoa_r+0x380>
 80055c2:	4bb2      	ldr	r3, [pc, #712]	; (800588c <_dtoa_r+0x61c>)
 80055c4:	ec51 0b19 	vmov	r0, r1, d9
 80055c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055cc:	f7fb f95e 	bl	800088c <__aeabi_ddiv>
 80055d0:	f007 070f 	and.w	r7, r7, #15
 80055d4:	4682      	mov	sl, r0
 80055d6:	468b      	mov	fp, r1
 80055d8:	2503      	movs	r5, #3
 80055da:	4eac      	ldr	r6, [pc, #688]	; (800588c <_dtoa_r+0x61c>)
 80055dc:	b957      	cbnz	r7, 80055f4 <_dtoa_r+0x384>
 80055de:	4642      	mov	r2, r8
 80055e0:	464b      	mov	r3, r9
 80055e2:	4650      	mov	r0, sl
 80055e4:	4659      	mov	r1, fp
 80055e6:	f7fb f951 	bl	800088c <__aeabi_ddiv>
 80055ea:	4682      	mov	sl, r0
 80055ec:	468b      	mov	fp, r1
 80055ee:	e028      	b.n	8005642 <_dtoa_r+0x3d2>
 80055f0:	2502      	movs	r5, #2
 80055f2:	e7f2      	b.n	80055da <_dtoa_r+0x36a>
 80055f4:	07f9      	lsls	r1, r7, #31
 80055f6:	d508      	bpl.n	800560a <_dtoa_r+0x39a>
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005600:	f7fb f81a 	bl	8000638 <__aeabi_dmul>
 8005604:	3501      	adds	r5, #1
 8005606:	4680      	mov	r8, r0
 8005608:	4689      	mov	r9, r1
 800560a:	107f      	asrs	r7, r7, #1
 800560c:	3608      	adds	r6, #8
 800560e:	e7e5      	b.n	80055dc <_dtoa_r+0x36c>
 8005610:	f000 809b 	beq.w	800574a <_dtoa_r+0x4da>
 8005614:	9b00      	ldr	r3, [sp, #0]
 8005616:	4f9d      	ldr	r7, [pc, #628]	; (800588c <_dtoa_r+0x61c>)
 8005618:	425e      	negs	r6, r3
 800561a:	4b9b      	ldr	r3, [pc, #620]	; (8005888 <_dtoa_r+0x618>)
 800561c:	f006 020f 	and.w	r2, r6, #15
 8005620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	ec51 0b19 	vmov	r0, r1, d9
 800562c:	f7fb f804 	bl	8000638 <__aeabi_dmul>
 8005630:	1136      	asrs	r6, r6, #4
 8005632:	4682      	mov	sl, r0
 8005634:	468b      	mov	fp, r1
 8005636:	2300      	movs	r3, #0
 8005638:	2502      	movs	r5, #2
 800563a:	2e00      	cmp	r6, #0
 800563c:	d17a      	bne.n	8005734 <_dtoa_r+0x4c4>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1d3      	bne.n	80055ea <_dtoa_r+0x37a>
 8005642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8082 	beq.w	800574e <_dtoa_r+0x4de>
 800564a:	4b91      	ldr	r3, [pc, #580]	; (8005890 <_dtoa_r+0x620>)
 800564c:	2200      	movs	r2, #0
 800564e:	4650      	mov	r0, sl
 8005650:	4659      	mov	r1, fp
 8005652:	f7fb fa63 	bl	8000b1c <__aeabi_dcmplt>
 8005656:	2800      	cmp	r0, #0
 8005658:	d079      	beq.n	800574e <_dtoa_r+0x4de>
 800565a:	9b03      	ldr	r3, [sp, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d076      	beq.n	800574e <_dtoa_r+0x4de>
 8005660:	9b02      	ldr	r3, [sp, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dd36      	ble.n	80056d4 <_dtoa_r+0x464>
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	4650      	mov	r0, sl
 800566a:	4659      	mov	r1, fp
 800566c:	1e5f      	subs	r7, r3, #1
 800566e:	2200      	movs	r2, #0
 8005670:	4b88      	ldr	r3, [pc, #544]	; (8005894 <_dtoa_r+0x624>)
 8005672:	f7fa ffe1 	bl	8000638 <__aeabi_dmul>
 8005676:	9e02      	ldr	r6, [sp, #8]
 8005678:	4682      	mov	sl, r0
 800567a:	468b      	mov	fp, r1
 800567c:	3501      	adds	r5, #1
 800567e:	4628      	mov	r0, r5
 8005680:	f7fa ff70 	bl	8000564 <__aeabi_i2d>
 8005684:	4652      	mov	r2, sl
 8005686:	465b      	mov	r3, fp
 8005688:	f7fa ffd6 	bl	8000638 <__aeabi_dmul>
 800568c:	4b82      	ldr	r3, [pc, #520]	; (8005898 <_dtoa_r+0x628>)
 800568e:	2200      	movs	r2, #0
 8005690:	f7fa fe1c 	bl	80002cc <__adddf3>
 8005694:	46d0      	mov	r8, sl
 8005696:	46d9      	mov	r9, fp
 8005698:	4682      	mov	sl, r0
 800569a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800569e:	2e00      	cmp	r6, #0
 80056a0:	d158      	bne.n	8005754 <_dtoa_r+0x4e4>
 80056a2:	4b7e      	ldr	r3, [pc, #504]	; (800589c <_dtoa_r+0x62c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fe0d 	bl	80002c8 <__aeabi_dsub>
 80056ae:	4652      	mov	r2, sl
 80056b0:	465b      	mov	r3, fp
 80056b2:	4680      	mov	r8, r0
 80056b4:	4689      	mov	r9, r1
 80056b6:	f7fb fa4f 	bl	8000b58 <__aeabi_dcmpgt>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f040 8295 	bne.w	8005bea <_dtoa_r+0x97a>
 80056c0:	4652      	mov	r2, sl
 80056c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fb fa27 	bl	8000b1c <__aeabi_dcmplt>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	f040 8289 	bne.w	8005be6 <_dtoa_r+0x976>
 80056d4:	ec5b ab19 	vmov	sl, fp, d9
 80056d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f2c0 8148 	blt.w	8005970 <_dtoa_r+0x700>
 80056e0:	9a00      	ldr	r2, [sp, #0]
 80056e2:	2a0e      	cmp	r2, #14
 80056e4:	f300 8144 	bgt.w	8005970 <_dtoa_r+0x700>
 80056e8:	4b67      	ldr	r3, [pc, #412]	; (8005888 <_dtoa_r+0x618>)
 80056ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f280 80d5 	bge.w	80058a4 <_dtoa_r+0x634>
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f300 80d1 	bgt.w	80058a4 <_dtoa_r+0x634>
 8005702:	f040 826f 	bne.w	8005be4 <_dtoa_r+0x974>
 8005706:	4b65      	ldr	r3, [pc, #404]	; (800589c <_dtoa_r+0x62c>)
 8005708:	2200      	movs	r2, #0
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa ff93 	bl	8000638 <__aeabi_dmul>
 8005712:	4652      	mov	r2, sl
 8005714:	465b      	mov	r3, fp
 8005716:	f7fb fa15 	bl	8000b44 <__aeabi_dcmpge>
 800571a:	9e03      	ldr	r6, [sp, #12]
 800571c:	4637      	mov	r7, r6
 800571e:	2800      	cmp	r0, #0
 8005720:	f040 8245 	bne.w	8005bae <_dtoa_r+0x93e>
 8005724:	9d01      	ldr	r5, [sp, #4]
 8005726:	2331      	movs	r3, #49	; 0x31
 8005728:	f805 3b01 	strb.w	r3, [r5], #1
 800572c:	9b00      	ldr	r3, [sp, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	e240      	b.n	8005bb6 <_dtoa_r+0x946>
 8005734:	07f2      	lsls	r2, r6, #31
 8005736:	d505      	bpl.n	8005744 <_dtoa_r+0x4d4>
 8005738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800573c:	f7fa ff7c 	bl	8000638 <__aeabi_dmul>
 8005740:	3501      	adds	r5, #1
 8005742:	2301      	movs	r3, #1
 8005744:	1076      	asrs	r6, r6, #1
 8005746:	3708      	adds	r7, #8
 8005748:	e777      	b.n	800563a <_dtoa_r+0x3ca>
 800574a:	2502      	movs	r5, #2
 800574c:	e779      	b.n	8005642 <_dtoa_r+0x3d2>
 800574e:	9f00      	ldr	r7, [sp, #0]
 8005750:	9e03      	ldr	r6, [sp, #12]
 8005752:	e794      	b.n	800567e <_dtoa_r+0x40e>
 8005754:	9901      	ldr	r1, [sp, #4]
 8005756:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <_dtoa_r+0x618>)
 8005758:	4431      	add	r1, r6
 800575a:	910d      	str	r1, [sp, #52]	; 0x34
 800575c:	9908      	ldr	r1, [sp, #32]
 800575e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005766:	2900      	cmp	r1, #0
 8005768:	d043      	beq.n	80057f2 <_dtoa_r+0x582>
 800576a:	494d      	ldr	r1, [pc, #308]	; (80058a0 <_dtoa_r+0x630>)
 800576c:	2000      	movs	r0, #0
 800576e:	f7fb f88d 	bl	800088c <__aeabi_ddiv>
 8005772:	4652      	mov	r2, sl
 8005774:	465b      	mov	r3, fp
 8005776:	f7fa fda7 	bl	80002c8 <__aeabi_dsub>
 800577a:	9d01      	ldr	r5, [sp, #4]
 800577c:	4682      	mov	sl, r0
 800577e:	468b      	mov	fp, r1
 8005780:	4649      	mov	r1, r9
 8005782:	4640      	mov	r0, r8
 8005784:	f7fb fa08 	bl	8000b98 <__aeabi_d2iz>
 8005788:	4606      	mov	r6, r0
 800578a:	f7fa feeb 	bl	8000564 <__aeabi_i2d>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fa fd97 	bl	80002c8 <__aeabi_dsub>
 800579a:	3630      	adds	r6, #48	; 0x30
 800579c:	f805 6b01 	strb.w	r6, [r5], #1
 80057a0:	4652      	mov	r2, sl
 80057a2:	465b      	mov	r3, fp
 80057a4:	4680      	mov	r8, r0
 80057a6:	4689      	mov	r9, r1
 80057a8:	f7fb f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d163      	bne.n	8005878 <_dtoa_r+0x608>
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	4936      	ldr	r1, [pc, #216]	; (8005890 <_dtoa_r+0x620>)
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7fa fd86 	bl	80002c8 <__aeabi_dsub>
 80057bc:	4652      	mov	r2, sl
 80057be:	465b      	mov	r3, fp
 80057c0:	f7fb f9ac 	bl	8000b1c <__aeabi_dcmplt>
 80057c4:	2800      	cmp	r0, #0
 80057c6:	f040 80b5 	bne.w	8005934 <_dtoa_r+0x6c4>
 80057ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057cc:	429d      	cmp	r5, r3
 80057ce:	d081      	beq.n	80056d4 <_dtoa_r+0x464>
 80057d0:	4b30      	ldr	r3, [pc, #192]	; (8005894 <_dtoa_r+0x624>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	4650      	mov	r0, sl
 80057d6:	4659      	mov	r1, fp
 80057d8:	f7fa ff2e 	bl	8000638 <__aeabi_dmul>
 80057dc:	4b2d      	ldr	r3, [pc, #180]	; (8005894 <_dtoa_r+0x624>)
 80057de:	4682      	mov	sl, r0
 80057e0:	468b      	mov	fp, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	2200      	movs	r2, #0
 80057e8:	f7fa ff26 	bl	8000638 <__aeabi_dmul>
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	e7c6      	b.n	8005780 <_dtoa_r+0x510>
 80057f2:	4650      	mov	r0, sl
 80057f4:	4659      	mov	r1, fp
 80057f6:	f7fa ff1f 	bl	8000638 <__aeabi_dmul>
 80057fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057fc:	9d01      	ldr	r5, [sp, #4]
 80057fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005800:	4682      	mov	sl, r0
 8005802:	468b      	mov	fp, r1
 8005804:	4649      	mov	r1, r9
 8005806:	4640      	mov	r0, r8
 8005808:	f7fb f9c6 	bl	8000b98 <__aeabi_d2iz>
 800580c:	4606      	mov	r6, r0
 800580e:	f7fa fea9 	bl	8000564 <__aeabi_i2d>
 8005812:	3630      	adds	r6, #48	; 0x30
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	f7fa fd54 	bl	80002c8 <__aeabi_dsub>
 8005820:	f805 6b01 	strb.w	r6, [r5], #1
 8005824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005826:	429d      	cmp	r5, r3
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	d124      	bne.n	800587c <_dtoa_r+0x60c>
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <_dtoa_r+0x630>)
 8005834:	4650      	mov	r0, sl
 8005836:	4659      	mov	r1, fp
 8005838:	f7fa fd48 	bl	80002cc <__adddf3>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fb f988 	bl	8000b58 <__aeabi_dcmpgt>
 8005848:	2800      	cmp	r0, #0
 800584a:	d173      	bne.n	8005934 <_dtoa_r+0x6c4>
 800584c:	4652      	mov	r2, sl
 800584e:	465b      	mov	r3, fp
 8005850:	4913      	ldr	r1, [pc, #76]	; (80058a0 <_dtoa_r+0x630>)
 8005852:	2000      	movs	r0, #0
 8005854:	f7fa fd38 	bl	80002c8 <__aeabi_dsub>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	f7fb f95c 	bl	8000b1c <__aeabi_dcmplt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f43f af35 	beq.w	80056d4 <_dtoa_r+0x464>
 800586a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800586c:	1e6b      	subs	r3, r5, #1
 800586e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d0f8      	beq.n	800586a <_dtoa_r+0x5fa>
 8005878:	9700      	str	r7, [sp, #0]
 800587a:	e049      	b.n	8005910 <_dtoa_r+0x6a0>
 800587c:	4b05      	ldr	r3, [pc, #20]	; (8005894 <_dtoa_r+0x624>)
 800587e:	f7fa fedb 	bl	8000638 <__aeabi_dmul>
 8005882:	4680      	mov	r8, r0
 8005884:	4689      	mov	r9, r1
 8005886:	e7bd      	b.n	8005804 <_dtoa_r+0x594>
 8005888:	08007b58 	.word	0x08007b58
 800588c:	08007b30 	.word	0x08007b30
 8005890:	3ff00000 	.word	0x3ff00000
 8005894:	40240000 	.word	0x40240000
 8005898:	401c0000 	.word	0x401c0000
 800589c:	40140000 	.word	0x40140000
 80058a0:	3fe00000 	.word	0x3fe00000
 80058a4:	9d01      	ldr	r5, [sp, #4]
 80058a6:	4656      	mov	r6, sl
 80058a8:	465f      	mov	r7, fp
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	4630      	mov	r0, r6
 80058b0:	4639      	mov	r1, r7
 80058b2:	f7fa ffeb 	bl	800088c <__aeabi_ddiv>
 80058b6:	f7fb f96f 	bl	8000b98 <__aeabi_d2iz>
 80058ba:	4682      	mov	sl, r0
 80058bc:	f7fa fe52 	bl	8000564 <__aeabi_i2d>
 80058c0:	4642      	mov	r2, r8
 80058c2:	464b      	mov	r3, r9
 80058c4:	f7fa feb8 	bl	8000638 <__aeabi_dmul>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4630      	mov	r0, r6
 80058ce:	4639      	mov	r1, r7
 80058d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058d4:	f7fa fcf8 	bl	80002c8 <__aeabi_dsub>
 80058d8:	f805 6b01 	strb.w	r6, [r5], #1
 80058dc:	9e01      	ldr	r6, [sp, #4]
 80058de:	9f03      	ldr	r7, [sp, #12]
 80058e0:	1bae      	subs	r6, r5, r6
 80058e2:	42b7      	cmp	r7, r6
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	d135      	bne.n	8005956 <_dtoa_r+0x6e6>
 80058ea:	f7fa fcef 	bl	80002cc <__adddf3>
 80058ee:	4642      	mov	r2, r8
 80058f0:	464b      	mov	r3, r9
 80058f2:	4606      	mov	r6, r0
 80058f4:	460f      	mov	r7, r1
 80058f6:	f7fb f92f 	bl	8000b58 <__aeabi_dcmpgt>
 80058fa:	b9d0      	cbnz	r0, 8005932 <_dtoa_r+0x6c2>
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fb f900 	bl	8000b08 <__aeabi_dcmpeq>
 8005908:	b110      	cbz	r0, 8005910 <_dtoa_r+0x6a0>
 800590a:	f01a 0f01 	tst.w	sl, #1
 800590e:	d110      	bne.n	8005932 <_dtoa_r+0x6c2>
 8005910:	4620      	mov	r0, r4
 8005912:	ee18 1a10 	vmov	r1, s16
 8005916:	f000 faf3 	bl	8005f00 <_Bfree>
 800591a:	2300      	movs	r3, #0
 800591c:	9800      	ldr	r0, [sp, #0]
 800591e:	702b      	strb	r3, [r5, #0]
 8005920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005922:	3001      	adds	r0, #1
 8005924:	6018      	str	r0, [r3, #0]
 8005926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005928:	2b00      	cmp	r3, #0
 800592a:	f43f acf1 	beq.w	8005310 <_dtoa_r+0xa0>
 800592e:	601d      	str	r5, [r3, #0]
 8005930:	e4ee      	b.n	8005310 <_dtoa_r+0xa0>
 8005932:	9f00      	ldr	r7, [sp, #0]
 8005934:	462b      	mov	r3, r5
 8005936:	461d      	mov	r5, r3
 8005938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800593c:	2a39      	cmp	r2, #57	; 0x39
 800593e:	d106      	bne.n	800594e <_dtoa_r+0x6de>
 8005940:	9a01      	ldr	r2, [sp, #4]
 8005942:	429a      	cmp	r2, r3
 8005944:	d1f7      	bne.n	8005936 <_dtoa_r+0x6c6>
 8005946:	9901      	ldr	r1, [sp, #4]
 8005948:	2230      	movs	r2, #48	; 0x30
 800594a:	3701      	adds	r7, #1
 800594c:	700a      	strb	r2, [r1, #0]
 800594e:	781a      	ldrb	r2, [r3, #0]
 8005950:	3201      	adds	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e790      	b.n	8005878 <_dtoa_r+0x608>
 8005956:	4ba6      	ldr	r3, [pc, #664]	; (8005bf0 <_dtoa_r+0x980>)
 8005958:	2200      	movs	r2, #0
 800595a:	f7fa fe6d 	bl	8000638 <__aeabi_dmul>
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	4606      	mov	r6, r0
 8005964:	460f      	mov	r7, r1
 8005966:	f7fb f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800596a:	2800      	cmp	r0, #0
 800596c:	d09d      	beq.n	80058aa <_dtoa_r+0x63a>
 800596e:	e7cf      	b.n	8005910 <_dtoa_r+0x6a0>
 8005970:	9a08      	ldr	r2, [sp, #32]
 8005972:	2a00      	cmp	r2, #0
 8005974:	f000 80d7 	beq.w	8005b26 <_dtoa_r+0x8b6>
 8005978:	9a06      	ldr	r2, [sp, #24]
 800597a:	2a01      	cmp	r2, #1
 800597c:	f300 80ba 	bgt.w	8005af4 <_dtoa_r+0x884>
 8005980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005982:	2a00      	cmp	r2, #0
 8005984:	f000 80b2 	beq.w	8005aec <_dtoa_r+0x87c>
 8005988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800598c:	9e07      	ldr	r6, [sp, #28]
 800598e:	9d04      	ldr	r5, [sp, #16]
 8005990:	9a04      	ldr	r2, [sp, #16]
 8005992:	441a      	add	r2, r3
 8005994:	9204      	str	r2, [sp, #16]
 8005996:	9a05      	ldr	r2, [sp, #20]
 8005998:	2101      	movs	r1, #1
 800599a:	441a      	add	r2, r3
 800599c:	4620      	mov	r0, r4
 800599e:	9205      	str	r2, [sp, #20]
 80059a0:	f000 fb66 	bl	8006070 <__i2b>
 80059a4:	4607      	mov	r7, r0
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	dd0c      	ble.n	80059c4 <_dtoa_r+0x754>
 80059aa:	9b05      	ldr	r3, [sp, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dd09      	ble.n	80059c4 <_dtoa_r+0x754>
 80059b0:	42ab      	cmp	r3, r5
 80059b2:	9a04      	ldr	r2, [sp, #16]
 80059b4:	bfa8      	it	ge
 80059b6:	462b      	movge	r3, r5
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	9204      	str	r2, [sp, #16]
 80059bc:	9a05      	ldr	r2, [sp, #20]
 80059be:	1aed      	subs	r5, r5, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	9305      	str	r3, [sp, #20]
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	b31b      	cbz	r3, 8005a10 <_dtoa_r+0x7a0>
 80059c8:	9b08      	ldr	r3, [sp, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80af 	beq.w	8005b2e <_dtoa_r+0x8be>
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	dd13      	ble.n	80059fc <_dtoa_r+0x78c>
 80059d4:	4639      	mov	r1, r7
 80059d6:	4632      	mov	r2, r6
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 fc09 	bl	80061f0 <__pow5mult>
 80059de:	ee18 2a10 	vmov	r2, s16
 80059e2:	4601      	mov	r1, r0
 80059e4:	4607      	mov	r7, r0
 80059e6:	4620      	mov	r0, r4
 80059e8:	f000 fb58 	bl	800609c <__multiply>
 80059ec:	ee18 1a10 	vmov	r1, s16
 80059f0:	4680      	mov	r8, r0
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fa84 	bl	8005f00 <_Bfree>
 80059f8:	ee08 8a10 	vmov	s16, r8
 80059fc:	9b07      	ldr	r3, [sp, #28]
 80059fe:	1b9a      	subs	r2, r3, r6
 8005a00:	d006      	beq.n	8005a10 <_dtoa_r+0x7a0>
 8005a02:	ee18 1a10 	vmov	r1, s16
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 fbf2 	bl	80061f0 <__pow5mult>
 8005a0c:	ee08 0a10 	vmov	s16, r0
 8005a10:	2101      	movs	r1, #1
 8005a12:	4620      	mov	r0, r4
 8005a14:	f000 fb2c 	bl	8006070 <__i2b>
 8005a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	f340 8088 	ble.w	8005b32 <_dtoa_r+0x8c2>
 8005a22:	461a      	mov	r2, r3
 8005a24:	4601      	mov	r1, r0
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fbe2 	bl	80061f0 <__pow5mult>
 8005a2c:	9b06      	ldr	r3, [sp, #24]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	4606      	mov	r6, r0
 8005a32:	f340 8081 	ble.w	8005b38 <_dtoa_r+0x8c8>
 8005a36:	f04f 0800 	mov.w	r8, #0
 8005a3a:	6933      	ldr	r3, [r6, #16]
 8005a3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a40:	6918      	ldr	r0, [r3, #16]
 8005a42:	f000 fac5 	bl	8005fd0 <__hi0bits>
 8005a46:	f1c0 0020 	rsb	r0, r0, #32
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	4418      	add	r0, r3
 8005a4e:	f010 001f 	ands.w	r0, r0, #31
 8005a52:	f000 8092 	beq.w	8005b7a <_dtoa_r+0x90a>
 8005a56:	f1c0 0320 	rsb	r3, r0, #32
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	f340 808a 	ble.w	8005b74 <_dtoa_r+0x904>
 8005a60:	f1c0 001c 	rsb	r0, r0, #28
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	4403      	add	r3, r0
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	9b05      	ldr	r3, [sp, #20]
 8005a6c:	4403      	add	r3, r0
 8005a6e:	4405      	add	r5, r0
 8005a70:	9305      	str	r3, [sp, #20]
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dd07      	ble.n	8005a88 <_dtoa_r+0x818>
 8005a78:	ee18 1a10 	vmov	r1, s16
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fc10 	bl	80062a4 <__lshift>
 8005a84:	ee08 0a10 	vmov	s16, r0
 8005a88:	9b05      	ldr	r3, [sp, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dd05      	ble.n	8005a9a <_dtoa_r+0x82a>
 8005a8e:	4631      	mov	r1, r6
 8005a90:	461a      	mov	r2, r3
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fc06 	bl	80062a4 <__lshift>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d06e      	beq.n	8005b7e <_dtoa_r+0x90e>
 8005aa0:	ee18 0a10 	vmov	r0, s16
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	f000 fc6d 	bl	8006384 <__mcmp>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	da67      	bge.n	8005b7e <_dtoa_r+0x90e>
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	220a      	movs	r2, #10
 8005aba:	2300      	movs	r3, #0
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 fa41 	bl	8005f44 <__multadd>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	ee08 0a10 	vmov	s16, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 81b1 	beq.w	8005e30 <_dtoa_r+0xbc0>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 fa35 	bl	8005f44 <__multadd>
 8005ada:	9b02      	ldr	r3, [sp, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	4607      	mov	r7, r0
 8005ae0:	f300 808e 	bgt.w	8005c00 <_dtoa_r+0x990>
 8005ae4:	9b06      	ldr	r3, [sp, #24]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	dc51      	bgt.n	8005b8e <_dtoa_r+0x91e>
 8005aea:	e089      	b.n	8005c00 <_dtoa_r+0x990>
 8005aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005af2:	e74b      	b.n	800598c <_dtoa_r+0x71c>
 8005af4:	9b03      	ldr	r3, [sp, #12]
 8005af6:	1e5e      	subs	r6, r3, #1
 8005af8:	9b07      	ldr	r3, [sp, #28]
 8005afa:	42b3      	cmp	r3, r6
 8005afc:	bfbf      	itttt	lt
 8005afe:	9b07      	ldrlt	r3, [sp, #28]
 8005b00:	9607      	strlt	r6, [sp, #28]
 8005b02:	1af2      	sublt	r2, r6, r3
 8005b04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b06:	bfb6      	itet	lt
 8005b08:	189b      	addlt	r3, r3, r2
 8005b0a:	1b9e      	subge	r6, r3, r6
 8005b0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	bfb8      	it	lt
 8005b12:	2600      	movlt	r6, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bfb7      	itett	lt
 8005b18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b20:	1a9d      	sublt	r5, r3, r2
 8005b22:	2300      	movlt	r3, #0
 8005b24:	e734      	b.n	8005990 <_dtoa_r+0x720>
 8005b26:	9e07      	ldr	r6, [sp, #28]
 8005b28:	9d04      	ldr	r5, [sp, #16]
 8005b2a:	9f08      	ldr	r7, [sp, #32]
 8005b2c:	e73b      	b.n	80059a6 <_dtoa_r+0x736>
 8005b2e:	9a07      	ldr	r2, [sp, #28]
 8005b30:	e767      	b.n	8005a02 <_dtoa_r+0x792>
 8005b32:	9b06      	ldr	r3, [sp, #24]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	dc18      	bgt.n	8005b6a <_dtoa_r+0x8fa>
 8005b38:	f1ba 0f00 	cmp.w	sl, #0
 8005b3c:	d115      	bne.n	8005b6a <_dtoa_r+0x8fa>
 8005b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b42:	b993      	cbnz	r3, 8005b6a <_dtoa_r+0x8fa>
 8005b44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b48:	0d1b      	lsrs	r3, r3, #20
 8005b4a:	051b      	lsls	r3, r3, #20
 8005b4c:	b183      	cbz	r3, 8005b70 <_dtoa_r+0x900>
 8005b4e:	9b04      	ldr	r3, [sp, #16]
 8005b50:	3301      	adds	r3, #1
 8005b52:	9304      	str	r3, [sp, #16]
 8005b54:	9b05      	ldr	r3, [sp, #20]
 8005b56:	3301      	adds	r3, #1
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	f04f 0801 	mov.w	r8, #1
 8005b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f af6a 	bne.w	8005a3a <_dtoa_r+0x7ca>
 8005b66:	2001      	movs	r0, #1
 8005b68:	e76f      	b.n	8005a4a <_dtoa_r+0x7da>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	e7f6      	b.n	8005b5e <_dtoa_r+0x8ee>
 8005b70:	4698      	mov	r8, r3
 8005b72:	e7f4      	b.n	8005b5e <_dtoa_r+0x8ee>
 8005b74:	f43f af7d 	beq.w	8005a72 <_dtoa_r+0x802>
 8005b78:	4618      	mov	r0, r3
 8005b7a:	301c      	adds	r0, #28
 8005b7c:	e772      	b.n	8005a64 <_dtoa_r+0x7f4>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	dc37      	bgt.n	8005bf4 <_dtoa_r+0x984>
 8005b84:	9b06      	ldr	r3, [sp, #24]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	dd34      	ble.n	8005bf4 <_dtoa_r+0x984>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	9b02      	ldr	r3, [sp, #8]
 8005b90:	b96b      	cbnz	r3, 8005bae <_dtoa_r+0x93e>
 8005b92:	4631      	mov	r1, r6
 8005b94:	2205      	movs	r2, #5
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 f9d4 	bl	8005f44 <__multadd>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	ee18 0a10 	vmov	r0, s16
 8005ba4:	f000 fbee 	bl	8006384 <__mcmp>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f73f adbb 	bgt.w	8005724 <_dtoa_r+0x4b4>
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	9d01      	ldr	r5, [sp, #4]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	4631      	mov	r1, r6
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 f99f 	bl	8005f00 <_Bfree>
 8005bc2:	2f00      	cmp	r7, #0
 8005bc4:	f43f aea4 	beq.w	8005910 <_dtoa_r+0x6a0>
 8005bc8:	f1b8 0f00 	cmp.w	r8, #0
 8005bcc:	d005      	beq.n	8005bda <_dtoa_r+0x96a>
 8005bce:	45b8      	cmp	r8, r7
 8005bd0:	d003      	beq.n	8005bda <_dtoa_r+0x96a>
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f000 f993 	bl	8005f00 <_Bfree>
 8005bda:	4639      	mov	r1, r7
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f000 f98f 	bl	8005f00 <_Bfree>
 8005be2:	e695      	b.n	8005910 <_dtoa_r+0x6a0>
 8005be4:	2600      	movs	r6, #0
 8005be6:	4637      	mov	r7, r6
 8005be8:	e7e1      	b.n	8005bae <_dtoa_r+0x93e>
 8005bea:	9700      	str	r7, [sp, #0]
 8005bec:	4637      	mov	r7, r6
 8005bee:	e599      	b.n	8005724 <_dtoa_r+0x4b4>
 8005bf0:	40240000 	.word	0x40240000
 8005bf4:	9b08      	ldr	r3, [sp, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80ca 	beq.w	8005d90 <_dtoa_r+0xb20>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	9302      	str	r3, [sp, #8]
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	dd05      	ble.n	8005c10 <_dtoa_r+0x9a0>
 8005c04:	4639      	mov	r1, r7
 8005c06:	462a      	mov	r2, r5
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fb4b 	bl	80062a4 <__lshift>
 8005c0e:	4607      	mov	r7, r0
 8005c10:	f1b8 0f00 	cmp.w	r8, #0
 8005c14:	d05b      	beq.n	8005cce <_dtoa_r+0xa5e>
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f000 f931 	bl	8005e80 <_Balloc>
 8005c1e:	4605      	mov	r5, r0
 8005c20:	b928      	cbnz	r0, 8005c2e <_dtoa_r+0x9be>
 8005c22:	4b87      	ldr	r3, [pc, #540]	; (8005e40 <_dtoa_r+0xbd0>)
 8005c24:	4602      	mov	r2, r0
 8005c26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c2a:	f7ff bb3b 	b.w	80052a4 <_dtoa_r+0x34>
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	3202      	adds	r2, #2
 8005c32:	0092      	lsls	r2, r2, #2
 8005c34:	f107 010c 	add.w	r1, r7, #12
 8005c38:	300c      	adds	r0, #12
 8005c3a:	f000 f913 	bl	8005e64 <memcpy>
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4629      	mov	r1, r5
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 fb2e 	bl	80062a4 <__lshift>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	f103 0901 	add.w	r9, r3, #1
 8005c4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c52:	4413      	add	r3, r2
 8005c54:	9305      	str	r3, [sp, #20]
 8005c56:	f00a 0301 	and.w	r3, sl, #1
 8005c5a:	46b8      	mov	r8, r7
 8005c5c:	9304      	str	r3, [sp, #16]
 8005c5e:	4607      	mov	r7, r0
 8005c60:	4631      	mov	r1, r6
 8005c62:	ee18 0a10 	vmov	r0, s16
 8005c66:	f7ff fa75 	bl	8005154 <quorem>
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	9002      	str	r0, [sp, #8]
 8005c6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c72:	ee18 0a10 	vmov	r0, s16
 8005c76:	f000 fb85 	bl	8006384 <__mcmp>
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	9003      	str	r0, [sp, #12]
 8005c7e:	4631      	mov	r1, r6
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fb9b 	bl	80063bc <__mdiff>
 8005c86:	68c2      	ldr	r2, [r0, #12]
 8005c88:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	bb02      	cbnz	r2, 8005cd2 <_dtoa_r+0xa62>
 8005c90:	4601      	mov	r1, r0
 8005c92:	ee18 0a10 	vmov	r0, s16
 8005c96:	f000 fb75 	bl	8006384 <__mcmp>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	9207      	str	r2, [sp, #28]
 8005ca2:	f000 f92d 	bl	8005f00 <_Bfree>
 8005ca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005caa:	ea43 0102 	orr.w	r1, r3, r2
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	464d      	mov	r5, r9
 8005cb4:	d10f      	bne.n	8005cd6 <_dtoa_r+0xa66>
 8005cb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cba:	d02a      	beq.n	8005d12 <_dtoa_r+0xaa2>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dd02      	ble.n	8005cc8 <_dtoa_r+0xa58>
 8005cc2:	9b02      	ldr	r3, [sp, #8]
 8005cc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005cc8:	f88b a000 	strb.w	sl, [fp]
 8005ccc:	e775      	b.n	8005bba <_dtoa_r+0x94a>
 8005cce:	4638      	mov	r0, r7
 8005cd0:	e7ba      	b.n	8005c48 <_dtoa_r+0x9d8>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	e7e2      	b.n	8005c9c <_dtoa_r+0xa2c>
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db04      	blt.n	8005ce6 <_dtoa_r+0xa76>
 8005cdc:	9906      	ldr	r1, [sp, #24]
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	9904      	ldr	r1, [sp, #16]
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	d122      	bne.n	8005d2c <_dtoa_r+0xabc>
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	ddee      	ble.n	8005cc8 <_dtoa_r+0xa58>
 8005cea:	ee18 1a10 	vmov	r1, s16
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fad7 	bl	80062a4 <__lshift>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	ee08 0a10 	vmov	s16, r0
 8005cfc:	f000 fb42 	bl	8006384 <__mcmp>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	dc03      	bgt.n	8005d0c <_dtoa_r+0xa9c>
 8005d04:	d1e0      	bne.n	8005cc8 <_dtoa_r+0xa58>
 8005d06:	f01a 0f01 	tst.w	sl, #1
 8005d0a:	d0dd      	beq.n	8005cc8 <_dtoa_r+0xa58>
 8005d0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d10:	d1d7      	bne.n	8005cc2 <_dtoa_r+0xa52>
 8005d12:	2339      	movs	r3, #57	; 0x39
 8005d14:	f88b 3000 	strb.w	r3, [fp]
 8005d18:	462b      	mov	r3, r5
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d22:	2a39      	cmp	r2, #57	; 0x39
 8005d24:	d071      	beq.n	8005e0a <_dtoa_r+0xb9a>
 8005d26:	3201      	adds	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e746      	b.n	8005bba <_dtoa_r+0x94a>
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	dd07      	ble.n	8005d40 <_dtoa_r+0xad0>
 8005d30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d34:	d0ed      	beq.n	8005d12 <_dtoa_r+0xaa2>
 8005d36:	f10a 0301 	add.w	r3, sl, #1
 8005d3a:	f88b 3000 	strb.w	r3, [fp]
 8005d3e:	e73c      	b.n	8005bba <_dtoa_r+0x94a>
 8005d40:	9b05      	ldr	r3, [sp, #20]
 8005d42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d46:	4599      	cmp	r9, r3
 8005d48:	d047      	beq.n	8005dda <_dtoa_r+0xb6a>
 8005d4a:	ee18 1a10 	vmov	r1, s16
 8005d4e:	2300      	movs	r3, #0
 8005d50:	220a      	movs	r2, #10
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f8f6 	bl	8005f44 <__multadd>
 8005d58:	45b8      	cmp	r8, r7
 8005d5a:	ee08 0a10 	vmov	s16, r0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	f04f 020a 	mov.w	r2, #10
 8005d66:	4641      	mov	r1, r8
 8005d68:	4620      	mov	r0, r4
 8005d6a:	d106      	bne.n	8005d7a <_dtoa_r+0xb0a>
 8005d6c:	f000 f8ea 	bl	8005f44 <__multadd>
 8005d70:	4680      	mov	r8, r0
 8005d72:	4607      	mov	r7, r0
 8005d74:	f109 0901 	add.w	r9, r9, #1
 8005d78:	e772      	b.n	8005c60 <_dtoa_r+0x9f0>
 8005d7a:	f000 f8e3 	bl	8005f44 <__multadd>
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4680      	mov	r8, r0
 8005d82:	2300      	movs	r3, #0
 8005d84:	220a      	movs	r2, #10
 8005d86:	4620      	mov	r0, r4
 8005d88:	f000 f8dc 	bl	8005f44 <__multadd>
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	e7f1      	b.n	8005d74 <_dtoa_r+0xb04>
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	9302      	str	r3, [sp, #8]
 8005d94:	9d01      	ldr	r5, [sp, #4]
 8005d96:	ee18 0a10 	vmov	r0, s16
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	f7ff f9da 	bl	8005154 <quorem>
 8005da0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	f805 ab01 	strb.w	sl, [r5], #1
 8005daa:	1aea      	subs	r2, r5, r3
 8005dac:	9b02      	ldr	r3, [sp, #8]
 8005dae:	4293      	cmp	r3, r2
 8005db0:	dd09      	ble.n	8005dc6 <_dtoa_r+0xb56>
 8005db2:	ee18 1a10 	vmov	r1, s16
 8005db6:	2300      	movs	r3, #0
 8005db8:	220a      	movs	r2, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f8c2 	bl	8005f44 <__multadd>
 8005dc0:	ee08 0a10 	vmov	s16, r0
 8005dc4:	e7e7      	b.n	8005d96 <_dtoa_r+0xb26>
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bfc8      	it	gt
 8005dcc:	461d      	movgt	r5, r3
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	bfd8      	it	le
 8005dd2:	2501      	movle	r5, #1
 8005dd4:	441d      	add	r5, r3
 8005dd6:	f04f 0800 	mov.w	r8, #0
 8005dda:	ee18 1a10 	vmov	r1, s16
 8005dde:	2201      	movs	r2, #1
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fa5f 	bl	80062a4 <__lshift>
 8005de6:	4631      	mov	r1, r6
 8005de8:	ee08 0a10 	vmov	s16, r0
 8005dec:	f000 faca 	bl	8006384 <__mcmp>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	dc91      	bgt.n	8005d18 <_dtoa_r+0xaa8>
 8005df4:	d102      	bne.n	8005dfc <_dtoa_r+0xb8c>
 8005df6:	f01a 0f01 	tst.w	sl, #1
 8005dfa:	d18d      	bne.n	8005d18 <_dtoa_r+0xaa8>
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	461d      	mov	r5, r3
 8005e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e04:	2a30      	cmp	r2, #48	; 0x30
 8005e06:	d0fa      	beq.n	8005dfe <_dtoa_r+0xb8e>
 8005e08:	e6d7      	b.n	8005bba <_dtoa_r+0x94a>
 8005e0a:	9a01      	ldr	r2, [sp, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d184      	bne.n	8005d1a <_dtoa_r+0xaaa>
 8005e10:	9b00      	ldr	r3, [sp, #0]
 8005e12:	3301      	adds	r3, #1
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	2331      	movs	r3, #49	; 0x31
 8005e18:	7013      	strb	r3, [r2, #0]
 8005e1a:	e6ce      	b.n	8005bba <_dtoa_r+0x94a>
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <_dtoa_r+0xbd4>)
 8005e1e:	f7ff ba95 	b.w	800534c <_dtoa_r+0xdc>
 8005e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f47f aa6e 	bne.w	8005306 <_dtoa_r+0x96>
 8005e2a:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <_dtoa_r+0xbd8>)
 8005e2c:	f7ff ba8e 	b.w	800534c <_dtoa_r+0xdc>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	dcae      	bgt.n	8005d94 <_dtoa_r+0xb24>
 8005e36:	9b06      	ldr	r3, [sp, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f73f aea8 	bgt.w	8005b8e <_dtoa_r+0x91e>
 8005e3e:	e7a9      	b.n	8005d94 <_dtoa_r+0xb24>
 8005e40:	08007ac3 	.word	0x08007ac3
 8005e44:	08007a20 	.word	0x08007a20
 8005e48:	08007a44 	.word	0x08007a44

08005e4c <_localeconv_r>:
 8005e4c:	4800      	ldr	r0, [pc, #0]	; (8005e50 <_localeconv_r+0x4>)
 8005e4e:	4770      	bx	lr
 8005e50:	20000168 	.word	0x20000168

08005e54 <malloc>:
 8005e54:	4b02      	ldr	r3, [pc, #8]	; (8005e60 <malloc+0xc>)
 8005e56:	4601      	mov	r1, r0
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	f000 bc17 	b.w	800668c <_malloc_r>
 8005e5e:	bf00      	nop
 8005e60:	20000014 	.word	0x20000014

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <_Balloc>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e84:	4604      	mov	r4, r0
 8005e86:	460d      	mov	r5, r1
 8005e88:	b976      	cbnz	r6, 8005ea8 <_Balloc+0x28>
 8005e8a:	2010      	movs	r0, #16
 8005e8c:	f7ff ffe2 	bl	8005e54 <malloc>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6260      	str	r0, [r4, #36]	; 0x24
 8005e94:	b920      	cbnz	r0, 8005ea0 <_Balloc+0x20>
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <_Balloc+0x78>)
 8005e98:	4818      	ldr	r0, [pc, #96]	; (8005efc <_Balloc+0x7c>)
 8005e9a:	2166      	movs	r1, #102	; 0x66
 8005e9c:	f000 fdd6 	bl	8006a4c <__assert_func>
 8005ea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ea4:	6006      	str	r6, [r0, #0]
 8005ea6:	60c6      	str	r6, [r0, #12]
 8005ea8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005eaa:	68f3      	ldr	r3, [r6, #12]
 8005eac:	b183      	cbz	r3, 8005ed0 <_Balloc+0x50>
 8005eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005eb6:	b9b8      	cbnz	r0, 8005ee8 <_Balloc+0x68>
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f605 	lsl.w	r6, r1, r5
 8005ebe:	1d72      	adds	r2, r6, #5
 8005ec0:	0092      	lsls	r2, r2, #2
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fb60 	bl	8006588 <_calloc_r>
 8005ec8:	b160      	cbz	r0, 8005ee4 <_Balloc+0x64>
 8005eca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ece:	e00e      	b.n	8005eee <_Balloc+0x6e>
 8005ed0:	2221      	movs	r2, #33	; 0x21
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f000 fb57 	bl	8006588 <_calloc_r>
 8005eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005edc:	60f0      	str	r0, [r6, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e4      	bne.n	8005eae <_Balloc+0x2e>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	6802      	ldr	r2, [r0, #0]
 8005eea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ef4:	e7f7      	b.n	8005ee6 <_Balloc+0x66>
 8005ef6:	bf00      	nop
 8005ef8:	08007a51 	.word	0x08007a51
 8005efc:	08007ad4 	.word	0x08007ad4

08005f00 <_Bfree>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f04:	4605      	mov	r5, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	b976      	cbnz	r6, 8005f28 <_Bfree+0x28>
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f7ff ffa2 	bl	8005e54 <malloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6268      	str	r0, [r5, #36]	; 0x24
 8005f14:	b920      	cbnz	r0, 8005f20 <_Bfree+0x20>
 8005f16:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <_Bfree+0x3c>)
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <_Bfree+0x40>)
 8005f1a:	218a      	movs	r1, #138	; 0x8a
 8005f1c:	f000 fd96 	bl	8006a4c <__assert_func>
 8005f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f24:	6006      	str	r6, [r0, #0]
 8005f26:	60c6      	str	r6, [r0, #12]
 8005f28:	b13c      	cbz	r4, 8005f3a <_Bfree+0x3a>
 8005f2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f2c:	6862      	ldr	r2, [r4, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f34:	6021      	str	r1, [r4, #0]
 8005f36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f3a:	bd70      	pop	{r4, r5, r6, pc}
 8005f3c:	08007a51 	.word	0x08007a51
 8005f40:	08007ad4 	.word	0x08007ad4

08005f44 <__multadd>:
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	690d      	ldr	r5, [r1, #16]
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	461e      	mov	r6, r3
 8005f50:	f101 0c14 	add.w	ip, r1, #20
 8005f54:	2000      	movs	r0, #0
 8005f56:	f8dc 3000 	ldr.w	r3, [ip]
 8005f5a:	b299      	uxth	r1, r3
 8005f5c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f60:	0c1e      	lsrs	r6, r3, #16
 8005f62:	0c0b      	lsrs	r3, r1, #16
 8005f64:	fb02 3306 	mla	r3, r2, r6, r3
 8005f68:	b289      	uxth	r1, r1
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f70:	4285      	cmp	r5, r0
 8005f72:	f84c 1b04 	str.w	r1, [ip], #4
 8005f76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f7a:	dcec      	bgt.n	8005f56 <__multadd+0x12>
 8005f7c:	b30e      	cbz	r6, 8005fc2 <__multadd+0x7e>
 8005f7e:	68a3      	ldr	r3, [r4, #8]
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc19      	bgt.n	8005fb8 <__multadd+0x74>
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	4638      	mov	r0, r7
 8005f88:	3101      	adds	r1, #1
 8005f8a:	f7ff ff79 	bl	8005e80 <_Balloc>
 8005f8e:	4680      	mov	r8, r0
 8005f90:	b928      	cbnz	r0, 8005f9e <__multadd+0x5a>
 8005f92:	4602      	mov	r2, r0
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <__multadd+0x84>)
 8005f96:	480d      	ldr	r0, [pc, #52]	; (8005fcc <__multadd+0x88>)
 8005f98:	21b5      	movs	r1, #181	; 0xb5
 8005f9a:	f000 fd57 	bl	8006a4c <__assert_func>
 8005f9e:	6922      	ldr	r2, [r4, #16]
 8005fa0:	3202      	adds	r2, #2
 8005fa2:	f104 010c 	add.w	r1, r4, #12
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	300c      	adds	r0, #12
 8005faa:	f7ff ff5b 	bl	8005e64 <memcpy>
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	f7ff ffa5 	bl	8005f00 <_Bfree>
 8005fb6:	4644      	mov	r4, r8
 8005fb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	615e      	str	r6, [r3, #20]
 8005fc0:	6125      	str	r5, [r4, #16]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc8:	08007ac3 	.word	0x08007ac3
 8005fcc:	08007ad4 	.word	0x08007ad4

08005fd0 <__hi0bits>:
 8005fd0:	0c03      	lsrs	r3, r0, #16
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	b9d3      	cbnz	r3, 800600c <__hi0bits+0x3c>
 8005fd6:	0400      	lsls	r0, r0, #16
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fde:	bf04      	itt	eq
 8005fe0:	0200      	lsleq	r0, r0, #8
 8005fe2:	3308      	addeq	r3, #8
 8005fe4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fe8:	bf04      	itt	eq
 8005fea:	0100      	lsleq	r0, r0, #4
 8005fec:	3304      	addeq	r3, #4
 8005fee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ff2:	bf04      	itt	eq
 8005ff4:	0080      	lsleq	r0, r0, #2
 8005ff6:	3302      	addeq	r3, #2
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	db05      	blt.n	8006008 <__hi0bits+0x38>
 8005ffc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006000:	f103 0301 	add.w	r3, r3, #1
 8006004:	bf08      	it	eq
 8006006:	2320      	moveq	r3, #32
 8006008:	4618      	mov	r0, r3
 800600a:	4770      	bx	lr
 800600c:	2300      	movs	r3, #0
 800600e:	e7e4      	b.n	8005fda <__hi0bits+0xa>

08006010 <__lo0bits>:
 8006010:	6803      	ldr	r3, [r0, #0]
 8006012:	f013 0207 	ands.w	r2, r3, #7
 8006016:	4601      	mov	r1, r0
 8006018:	d00b      	beq.n	8006032 <__lo0bits+0x22>
 800601a:	07da      	lsls	r2, r3, #31
 800601c:	d423      	bmi.n	8006066 <__lo0bits+0x56>
 800601e:	0798      	lsls	r0, r3, #30
 8006020:	bf49      	itett	mi
 8006022:	085b      	lsrmi	r3, r3, #1
 8006024:	089b      	lsrpl	r3, r3, #2
 8006026:	2001      	movmi	r0, #1
 8006028:	600b      	strmi	r3, [r1, #0]
 800602a:	bf5c      	itt	pl
 800602c:	600b      	strpl	r3, [r1, #0]
 800602e:	2002      	movpl	r0, #2
 8006030:	4770      	bx	lr
 8006032:	b298      	uxth	r0, r3
 8006034:	b9a8      	cbnz	r0, 8006062 <__lo0bits+0x52>
 8006036:	0c1b      	lsrs	r3, r3, #16
 8006038:	2010      	movs	r0, #16
 800603a:	b2da      	uxtb	r2, r3
 800603c:	b90a      	cbnz	r2, 8006042 <__lo0bits+0x32>
 800603e:	3008      	adds	r0, #8
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	071a      	lsls	r2, r3, #28
 8006044:	bf04      	itt	eq
 8006046:	091b      	lsreq	r3, r3, #4
 8006048:	3004      	addeq	r0, #4
 800604a:	079a      	lsls	r2, r3, #30
 800604c:	bf04      	itt	eq
 800604e:	089b      	lsreq	r3, r3, #2
 8006050:	3002      	addeq	r0, #2
 8006052:	07da      	lsls	r2, r3, #31
 8006054:	d403      	bmi.n	800605e <__lo0bits+0x4e>
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	f100 0001 	add.w	r0, r0, #1
 800605c:	d005      	beq.n	800606a <__lo0bits+0x5a>
 800605e:	600b      	str	r3, [r1, #0]
 8006060:	4770      	bx	lr
 8006062:	4610      	mov	r0, r2
 8006064:	e7e9      	b.n	800603a <__lo0bits+0x2a>
 8006066:	2000      	movs	r0, #0
 8006068:	4770      	bx	lr
 800606a:	2020      	movs	r0, #32
 800606c:	4770      	bx	lr
	...

08006070 <__i2b>:
 8006070:	b510      	push	{r4, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	2101      	movs	r1, #1
 8006076:	f7ff ff03 	bl	8005e80 <_Balloc>
 800607a:	4602      	mov	r2, r0
 800607c:	b928      	cbnz	r0, 800608a <__i2b+0x1a>
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <__i2b+0x24>)
 8006080:	4805      	ldr	r0, [pc, #20]	; (8006098 <__i2b+0x28>)
 8006082:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006086:	f000 fce1 	bl	8006a4c <__assert_func>
 800608a:	2301      	movs	r3, #1
 800608c:	6144      	str	r4, [r0, #20]
 800608e:	6103      	str	r3, [r0, #16]
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	08007ac3 	.word	0x08007ac3
 8006098:	08007ad4 	.word	0x08007ad4

0800609c <__multiply>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	4691      	mov	r9, r2
 80060a2:	690a      	ldr	r2, [r1, #16]
 80060a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	bfb8      	it	lt
 80060ac:	460b      	movlt	r3, r1
 80060ae:	460c      	mov	r4, r1
 80060b0:	bfbc      	itt	lt
 80060b2:	464c      	movlt	r4, r9
 80060b4:	4699      	movlt	r9, r3
 80060b6:	6927      	ldr	r7, [r4, #16]
 80060b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	6861      	ldr	r1, [r4, #4]
 80060c0:	eb07 060a 	add.w	r6, r7, sl
 80060c4:	42b3      	cmp	r3, r6
 80060c6:	b085      	sub	sp, #20
 80060c8:	bfb8      	it	lt
 80060ca:	3101      	addlt	r1, #1
 80060cc:	f7ff fed8 	bl	8005e80 <_Balloc>
 80060d0:	b930      	cbnz	r0, 80060e0 <__multiply+0x44>
 80060d2:	4602      	mov	r2, r0
 80060d4:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <__multiply+0x14c>)
 80060d6:	4845      	ldr	r0, [pc, #276]	; (80061ec <__multiply+0x150>)
 80060d8:	f240 115d 	movw	r1, #349	; 0x15d
 80060dc:	f000 fcb6 	bl	8006a4c <__assert_func>
 80060e0:	f100 0514 	add.w	r5, r0, #20
 80060e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060e8:	462b      	mov	r3, r5
 80060ea:	2200      	movs	r2, #0
 80060ec:	4543      	cmp	r3, r8
 80060ee:	d321      	bcc.n	8006134 <__multiply+0x98>
 80060f0:	f104 0314 	add.w	r3, r4, #20
 80060f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060f8:	f109 0314 	add.w	r3, r9, #20
 80060fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006100:	9202      	str	r2, [sp, #8]
 8006102:	1b3a      	subs	r2, r7, r4
 8006104:	3a15      	subs	r2, #21
 8006106:	f022 0203 	bic.w	r2, r2, #3
 800610a:	3204      	adds	r2, #4
 800610c:	f104 0115 	add.w	r1, r4, #21
 8006110:	428f      	cmp	r7, r1
 8006112:	bf38      	it	cc
 8006114:	2204      	movcc	r2, #4
 8006116:	9201      	str	r2, [sp, #4]
 8006118:	9a02      	ldr	r2, [sp, #8]
 800611a:	9303      	str	r3, [sp, #12]
 800611c:	429a      	cmp	r2, r3
 800611e:	d80c      	bhi.n	800613a <__multiply+0x9e>
 8006120:	2e00      	cmp	r6, #0
 8006122:	dd03      	ble.n	800612c <__multiply+0x90>
 8006124:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05a      	beq.n	80061e2 <__multiply+0x146>
 800612c:	6106      	str	r6, [r0, #16]
 800612e:	b005      	add	sp, #20
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006134:	f843 2b04 	str.w	r2, [r3], #4
 8006138:	e7d8      	b.n	80060ec <__multiply+0x50>
 800613a:	f8b3 a000 	ldrh.w	sl, [r3]
 800613e:	f1ba 0f00 	cmp.w	sl, #0
 8006142:	d024      	beq.n	800618e <__multiply+0xf2>
 8006144:	f104 0e14 	add.w	lr, r4, #20
 8006148:	46a9      	mov	r9, r5
 800614a:	f04f 0c00 	mov.w	ip, #0
 800614e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006152:	f8d9 1000 	ldr.w	r1, [r9]
 8006156:	fa1f fb82 	uxth.w	fp, r2
 800615a:	b289      	uxth	r1, r1
 800615c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006160:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006164:	f8d9 2000 	ldr.w	r2, [r9]
 8006168:	4461      	add	r1, ip
 800616a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800616e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006176:	b289      	uxth	r1, r1
 8006178:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800617c:	4577      	cmp	r7, lr
 800617e:	f849 1b04 	str.w	r1, [r9], #4
 8006182:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006186:	d8e2      	bhi.n	800614e <__multiply+0xb2>
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	f845 c002 	str.w	ip, [r5, r2]
 800618e:	9a03      	ldr	r2, [sp, #12]
 8006190:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006194:	3304      	adds	r3, #4
 8006196:	f1b9 0f00 	cmp.w	r9, #0
 800619a:	d020      	beq.n	80061de <__multiply+0x142>
 800619c:	6829      	ldr	r1, [r5, #0]
 800619e:	f104 0c14 	add.w	ip, r4, #20
 80061a2:	46ae      	mov	lr, r5
 80061a4:	f04f 0a00 	mov.w	sl, #0
 80061a8:	f8bc b000 	ldrh.w	fp, [ip]
 80061ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80061b0:	fb09 220b 	mla	r2, r9, fp, r2
 80061b4:	4492      	add	sl, r2
 80061b6:	b289      	uxth	r1, r1
 80061b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80061bc:	f84e 1b04 	str.w	r1, [lr], #4
 80061c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80061c4:	f8be 1000 	ldrh.w	r1, [lr]
 80061c8:	0c12      	lsrs	r2, r2, #16
 80061ca:	fb09 1102 	mla	r1, r9, r2, r1
 80061ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061d2:	4567      	cmp	r7, ip
 80061d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061d8:	d8e6      	bhi.n	80061a8 <__multiply+0x10c>
 80061da:	9a01      	ldr	r2, [sp, #4]
 80061dc:	50a9      	str	r1, [r5, r2]
 80061de:	3504      	adds	r5, #4
 80061e0:	e79a      	b.n	8006118 <__multiply+0x7c>
 80061e2:	3e01      	subs	r6, #1
 80061e4:	e79c      	b.n	8006120 <__multiply+0x84>
 80061e6:	bf00      	nop
 80061e8:	08007ac3 	.word	0x08007ac3
 80061ec:	08007ad4 	.word	0x08007ad4

080061f0 <__pow5mult>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4615      	mov	r5, r2
 80061f6:	f012 0203 	ands.w	r2, r2, #3
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	d007      	beq.n	8006210 <__pow5mult+0x20>
 8006200:	4c25      	ldr	r4, [pc, #148]	; (8006298 <__pow5mult+0xa8>)
 8006202:	3a01      	subs	r2, #1
 8006204:	2300      	movs	r3, #0
 8006206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800620a:	f7ff fe9b 	bl	8005f44 <__multadd>
 800620e:	4607      	mov	r7, r0
 8006210:	10ad      	asrs	r5, r5, #2
 8006212:	d03d      	beq.n	8006290 <__pow5mult+0xa0>
 8006214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006216:	b97c      	cbnz	r4, 8006238 <__pow5mult+0x48>
 8006218:	2010      	movs	r0, #16
 800621a:	f7ff fe1b 	bl	8005e54 <malloc>
 800621e:	4602      	mov	r2, r0
 8006220:	6270      	str	r0, [r6, #36]	; 0x24
 8006222:	b928      	cbnz	r0, 8006230 <__pow5mult+0x40>
 8006224:	4b1d      	ldr	r3, [pc, #116]	; (800629c <__pow5mult+0xac>)
 8006226:	481e      	ldr	r0, [pc, #120]	; (80062a0 <__pow5mult+0xb0>)
 8006228:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800622c:	f000 fc0e 	bl	8006a4c <__assert_func>
 8006230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006234:	6004      	str	r4, [r0, #0]
 8006236:	60c4      	str	r4, [r0, #12]
 8006238:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800623c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006240:	b94c      	cbnz	r4, 8006256 <__pow5mult+0x66>
 8006242:	f240 2171 	movw	r1, #625	; 0x271
 8006246:	4630      	mov	r0, r6
 8006248:	f7ff ff12 	bl	8006070 <__i2b>
 800624c:	2300      	movs	r3, #0
 800624e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006252:	4604      	mov	r4, r0
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	f04f 0900 	mov.w	r9, #0
 800625a:	07eb      	lsls	r3, r5, #31
 800625c:	d50a      	bpl.n	8006274 <__pow5mult+0x84>
 800625e:	4639      	mov	r1, r7
 8006260:	4622      	mov	r2, r4
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ff1a 	bl	800609c <__multiply>
 8006268:	4639      	mov	r1, r7
 800626a:	4680      	mov	r8, r0
 800626c:	4630      	mov	r0, r6
 800626e:	f7ff fe47 	bl	8005f00 <_Bfree>
 8006272:	4647      	mov	r7, r8
 8006274:	106d      	asrs	r5, r5, #1
 8006276:	d00b      	beq.n	8006290 <__pow5mult+0xa0>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	b938      	cbnz	r0, 800628c <__pow5mult+0x9c>
 800627c:	4622      	mov	r2, r4
 800627e:	4621      	mov	r1, r4
 8006280:	4630      	mov	r0, r6
 8006282:	f7ff ff0b 	bl	800609c <__multiply>
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	f8c0 9000 	str.w	r9, [r0]
 800628c:	4604      	mov	r4, r0
 800628e:	e7e4      	b.n	800625a <__pow5mult+0x6a>
 8006290:	4638      	mov	r0, r7
 8006292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006296:	bf00      	nop
 8006298:	08007c20 	.word	0x08007c20
 800629c:	08007a51 	.word	0x08007a51
 80062a0:	08007ad4 	.word	0x08007ad4

080062a4 <__lshift>:
 80062a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a8:	460c      	mov	r4, r1
 80062aa:	6849      	ldr	r1, [r1, #4]
 80062ac:	6923      	ldr	r3, [r4, #16]
 80062ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80062b2:	68a3      	ldr	r3, [r4, #8]
 80062b4:	4607      	mov	r7, r0
 80062b6:	4691      	mov	r9, r2
 80062b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062bc:	f108 0601 	add.w	r6, r8, #1
 80062c0:	42b3      	cmp	r3, r6
 80062c2:	db0b      	blt.n	80062dc <__lshift+0x38>
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff fddb 	bl	8005e80 <_Balloc>
 80062ca:	4605      	mov	r5, r0
 80062cc:	b948      	cbnz	r0, 80062e2 <__lshift+0x3e>
 80062ce:	4602      	mov	r2, r0
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <__lshift+0xd8>)
 80062d2:	482b      	ldr	r0, [pc, #172]	; (8006380 <__lshift+0xdc>)
 80062d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062d8:	f000 fbb8 	bl	8006a4c <__assert_func>
 80062dc:	3101      	adds	r1, #1
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	e7ee      	b.n	80062c0 <__lshift+0x1c>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f100 0114 	add.w	r1, r0, #20
 80062e8:	f100 0210 	add.w	r2, r0, #16
 80062ec:	4618      	mov	r0, r3
 80062ee:	4553      	cmp	r3, sl
 80062f0:	db37      	blt.n	8006362 <__lshift+0xbe>
 80062f2:	6920      	ldr	r0, [r4, #16]
 80062f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062f8:	f104 0314 	add.w	r3, r4, #20
 80062fc:	f019 091f 	ands.w	r9, r9, #31
 8006300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006304:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006308:	d02f      	beq.n	800636a <__lshift+0xc6>
 800630a:	f1c9 0e20 	rsb	lr, r9, #32
 800630e:	468a      	mov	sl, r1
 8006310:	f04f 0c00 	mov.w	ip, #0
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	fa02 f209 	lsl.w	r2, r2, r9
 800631a:	ea42 020c 	orr.w	r2, r2, ip
 800631e:	f84a 2b04 	str.w	r2, [sl], #4
 8006322:	f853 2b04 	ldr.w	r2, [r3], #4
 8006326:	4298      	cmp	r0, r3
 8006328:	fa22 fc0e 	lsr.w	ip, r2, lr
 800632c:	d8f2      	bhi.n	8006314 <__lshift+0x70>
 800632e:	1b03      	subs	r3, r0, r4
 8006330:	3b15      	subs	r3, #21
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	3304      	adds	r3, #4
 8006338:	f104 0215 	add.w	r2, r4, #21
 800633c:	4290      	cmp	r0, r2
 800633e:	bf38      	it	cc
 8006340:	2304      	movcc	r3, #4
 8006342:	f841 c003 	str.w	ip, [r1, r3]
 8006346:	f1bc 0f00 	cmp.w	ip, #0
 800634a:	d001      	beq.n	8006350 <__lshift+0xac>
 800634c:	f108 0602 	add.w	r6, r8, #2
 8006350:	3e01      	subs	r6, #1
 8006352:	4638      	mov	r0, r7
 8006354:	612e      	str	r6, [r5, #16]
 8006356:	4621      	mov	r1, r4
 8006358:	f7ff fdd2 	bl	8005f00 <_Bfree>
 800635c:	4628      	mov	r0, r5
 800635e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006362:	f842 0f04 	str.w	r0, [r2, #4]!
 8006366:	3301      	adds	r3, #1
 8006368:	e7c1      	b.n	80062ee <__lshift+0x4a>
 800636a:	3904      	subs	r1, #4
 800636c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006370:	f841 2f04 	str.w	r2, [r1, #4]!
 8006374:	4298      	cmp	r0, r3
 8006376:	d8f9      	bhi.n	800636c <__lshift+0xc8>
 8006378:	e7ea      	b.n	8006350 <__lshift+0xac>
 800637a:	bf00      	nop
 800637c:	08007ac3 	.word	0x08007ac3
 8006380:	08007ad4 	.word	0x08007ad4

08006384 <__mcmp>:
 8006384:	b530      	push	{r4, r5, lr}
 8006386:	6902      	ldr	r2, [r0, #16]
 8006388:	690c      	ldr	r4, [r1, #16]
 800638a:	1b12      	subs	r2, r2, r4
 800638c:	d10e      	bne.n	80063ac <__mcmp+0x28>
 800638e:	f100 0314 	add.w	r3, r0, #20
 8006392:	3114      	adds	r1, #20
 8006394:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006398:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800639c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80063a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80063a4:	42a5      	cmp	r5, r4
 80063a6:	d003      	beq.n	80063b0 <__mcmp+0x2c>
 80063a8:	d305      	bcc.n	80063b6 <__mcmp+0x32>
 80063aa:	2201      	movs	r2, #1
 80063ac:	4610      	mov	r0, r2
 80063ae:	bd30      	pop	{r4, r5, pc}
 80063b0:	4283      	cmp	r3, r0
 80063b2:	d3f3      	bcc.n	800639c <__mcmp+0x18>
 80063b4:	e7fa      	b.n	80063ac <__mcmp+0x28>
 80063b6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ba:	e7f7      	b.n	80063ac <__mcmp+0x28>

080063bc <__mdiff>:
 80063bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	460c      	mov	r4, r1
 80063c2:	4606      	mov	r6, r0
 80063c4:	4611      	mov	r1, r2
 80063c6:	4620      	mov	r0, r4
 80063c8:	4690      	mov	r8, r2
 80063ca:	f7ff ffdb 	bl	8006384 <__mcmp>
 80063ce:	1e05      	subs	r5, r0, #0
 80063d0:	d110      	bne.n	80063f4 <__mdiff+0x38>
 80063d2:	4629      	mov	r1, r5
 80063d4:	4630      	mov	r0, r6
 80063d6:	f7ff fd53 	bl	8005e80 <_Balloc>
 80063da:	b930      	cbnz	r0, 80063ea <__mdiff+0x2e>
 80063dc:	4b3a      	ldr	r3, [pc, #232]	; (80064c8 <__mdiff+0x10c>)
 80063de:	4602      	mov	r2, r0
 80063e0:	f240 2132 	movw	r1, #562	; 0x232
 80063e4:	4839      	ldr	r0, [pc, #228]	; (80064cc <__mdiff+0x110>)
 80063e6:	f000 fb31 	bl	8006a4c <__assert_func>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	bfa4      	itt	ge
 80063f6:	4643      	movge	r3, r8
 80063f8:	46a0      	movge	r8, r4
 80063fa:	4630      	mov	r0, r6
 80063fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006400:	bfa6      	itte	ge
 8006402:	461c      	movge	r4, r3
 8006404:	2500      	movge	r5, #0
 8006406:	2501      	movlt	r5, #1
 8006408:	f7ff fd3a 	bl	8005e80 <_Balloc>
 800640c:	b920      	cbnz	r0, 8006418 <__mdiff+0x5c>
 800640e:	4b2e      	ldr	r3, [pc, #184]	; (80064c8 <__mdiff+0x10c>)
 8006410:	4602      	mov	r2, r0
 8006412:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006416:	e7e5      	b.n	80063e4 <__mdiff+0x28>
 8006418:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800641c:	6926      	ldr	r6, [r4, #16]
 800641e:	60c5      	str	r5, [r0, #12]
 8006420:	f104 0914 	add.w	r9, r4, #20
 8006424:	f108 0514 	add.w	r5, r8, #20
 8006428:	f100 0e14 	add.w	lr, r0, #20
 800642c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006430:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006434:	f108 0210 	add.w	r2, r8, #16
 8006438:	46f2      	mov	sl, lr
 800643a:	2100      	movs	r1, #0
 800643c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006440:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006444:	fa1f f883 	uxth.w	r8, r3
 8006448:	fa11 f18b 	uxtah	r1, r1, fp
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	eba1 0808 	sub.w	r8, r1, r8
 8006452:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006456:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800645a:	fa1f f888 	uxth.w	r8, r8
 800645e:	1419      	asrs	r1, r3, #16
 8006460:	454e      	cmp	r6, r9
 8006462:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006466:	f84a 3b04 	str.w	r3, [sl], #4
 800646a:	d8e7      	bhi.n	800643c <__mdiff+0x80>
 800646c:	1b33      	subs	r3, r6, r4
 800646e:	3b15      	subs	r3, #21
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	3304      	adds	r3, #4
 8006476:	3415      	adds	r4, #21
 8006478:	42a6      	cmp	r6, r4
 800647a:	bf38      	it	cc
 800647c:	2304      	movcc	r3, #4
 800647e:	441d      	add	r5, r3
 8006480:	4473      	add	r3, lr
 8006482:	469e      	mov	lr, r3
 8006484:	462e      	mov	r6, r5
 8006486:	4566      	cmp	r6, ip
 8006488:	d30e      	bcc.n	80064a8 <__mdiff+0xec>
 800648a:	f10c 0203 	add.w	r2, ip, #3
 800648e:	1b52      	subs	r2, r2, r5
 8006490:	f022 0203 	bic.w	r2, r2, #3
 8006494:	3d03      	subs	r5, #3
 8006496:	45ac      	cmp	ip, r5
 8006498:	bf38      	it	cc
 800649a:	2200      	movcc	r2, #0
 800649c:	441a      	add	r2, r3
 800649e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80064a2:	b17b      	cbz	r3, 80064c4 <__mdiff+0x108>
 80064a4:	6107      	str	r7, [r0, #16]
 80064a6:	e7a3      	b.n	80063f0 <__mdiff+0x34>
 80064a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80064ac:	fa11 f288 	uxtah	r2, r1, r8
 80064b0:	1414      	asrs	r4, r2, #16
 80064b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80064b6:	b292      	uxth	r2, r2
 80064b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80064bc:	f84e 2b04 	str.w	r2, [lr], #4
 80064c0:	1421      	asrs	r1, r4, #16
 80064c2:	e7e0      	b.n	8006486 <__mdiff+0xca>
 80064c4:	3f01      	subs	r7, #1
 80064c6:	e7ea      	b.n	800649e <__mdiff+0xe2>
 80064c8:	08007ac3 	.word	0x08007ac3
 80064cc:	08007ad4 	.word	0x08007ad4

080064d0 <__d2b>:
 80064d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	4689      	mov	r9, r1
 80064d6:	2101      	movs	r1, #1
 80064d8:	ec57 6b10 	vmov	r6, r7, d0
 80064dc:	4690      	mov	r8, r2
 80064de:	f7ff fccf 	bl	8005e80 <_Balloc>
 80064e2:	4604      	mov	r4, r0
 80064e4:	b930      	cbnz	r0, 80064f4 <__d2b+0x24>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b25      	ldr	r3, [pc, #148]	; (8006580 <__d2b+0xb0>)
 80064ea:	4826      	ldr	r0, [pc, #152]	; (8006584 <__d2b+0xb4>)
 80064ec:	f240 310a 	movw	r1, #778	; 0x30a
 80064f0:	f000 faac 	bl	8006a4c <__assert_func>
 80064f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80064f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064fc:	bb35      	cbnz	r5, 800654c <__d2b+0x7c>
 80064fe:	2e00      	cmp	r6, #0
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	d028      	beq.n	8006556 <__d2b+0x86>
 8006504:	4668      	mov	r0, sp
 8006506:	9600      	str	r6, [sp, #0]
 8006508:	f7ff fd82 	bl	8006010 <__lo0bits>
 800650c:	9900      	ldr	r1, [sp, #0]
 800650e:	b300      	cbz	r0, 8006552 <__d2b+0x82>
 8006510:	9a01      	ldr	r2, [sp, #4]
 8006512:	f1c0 0320 	rsb	r3, r0, #32
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	430b      	orrs	r3, r1
 800651c:	40c2      	lsrs	r2, r0
 800651e:	6163      	str	r3, [r4, #20]
 8006520:	9201      	str	r2, [sp, #4]
 8006522:	9b01      	ldr	r3, [sp, #4]
 8006524:	61a3      	str	r3, [r4, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf14      	ite	ne
 800652a:	2202      	movne	r2, #2
 800652c:	2201      	moveq	r2, #1
 800652e:	6122      	str	r2, [r4, #16]
 8006530:	b1d5      	cbz	r5, 8006568 <__d2b+0x98>
 8006532:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006536:	4405      	add	r5, r0
 8006538:	f8c9 5000 	str.w	r5, [r9]
 800653c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006540:	f8c8 0000 	str.w	r0, [r8]
 8006544:	4620      	mov	r0, r4
 8006546:	b003      	add	sp, #12
 8006548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800654c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006550:	e7d5      	b.n	80064fe <__d2b+0x2e>
 8006552:	6161      	str	r1, [r4, #20]
 8006554:	e7e5      	b.n	8006522 <__d2b+0x52>
 8006556:	a801      	add	r0, sp, #4
 8006558:	f7ff fd5a 	bl	8006010 <__lo0bits>
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	6163      	str	r3, [r4, #20]
 8006560:	2201      	movs	r2, #1
 8006562:	6122      	str	r2, [r4, #16]
 8006564:	3020      	adds	r0, #32
 8006566:	e7e3      	b.n	8006530 <__d2b+0x60>
 8006568:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800656c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006570:	f8c9 0000 	str.w	r0, [r9]
 8006574:	6918      	ldr	r0, [r3, #16]
 8006576:	f7ff fd2b 	bl	8005fd0 <__hi0bits>
 800657a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800657e:	e7df      	b.n	8006540 <__d2b+0x70>
 8006580:	08007ac3 	.word	0x08007ac3
 8006584:	08007ad4 	.word	0x08007ad4

08006588 <_calloc_r>:
 8006588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800658a:	fba1 2402 	umull	r2, r4, r1, r2
 800658e:	b94c      	cbnz	r4, 80065a4 <_calloc_r+0x1c>
 8006590:	4611      	mov	r1, r2
 8006592:	9201      	str	r2, [sp, #4]
 8006594:	f000 f87a 	bl	800668c <_malloc_r>
 8006598:	9a01      	ldr	r2, [sp, #4]
 800659a:	4605      	mov	r5, r0
 800659c:	b930      	cbnz	r0, 80065ac <_calloc_r+0x24>
 800659e:	4628      	mov	r0, r5
 80065a0:	b003      	add	sp, #12
 80065a2:	bd30      	pop	{r4, r5, pc}
 80065a4:	220c      	movs	r2, #12
 80065a6:	6002      	str	r2, [r0, #0]
 80065a8:	2500      	movs	r5, #0
 80065aa:	e7f8      	b.n	800659e <_calloc_r+0x16>
 80065ac:	4621      	mov	r1, r4
 80065ae:	f7fe f93f 	bl	8004830 <memset>
 80065b2:	e7f4      	b.n	800659e <_calloc_r+0x16>

080065b4 <_free_r>:
 80065b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065b6:	2900      	cmp	r1, #0
 80065b8:	d044      	beq.n	8006644 <_free_r+0x90>
 80065ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065be:	9001      	str	r0, [sp, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f1a1 0404 	sub.w	r4, r1, #4
 80065c6:	bfb8      	it	lt
 80065c8:	18e4      	addlt	r4, r4, r3
 80065ca:	f000 fa9b 	bl	8006b04 <__malloc_lock>
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <_free_r+0x94>)
 80065d0:	9801      	ldr	r0, [sp, #4]
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	b933      	cbnz	r3, 80065e4 <_free_r+0x30>
 80065d6:	6063      	str	r3, [r4, #4]
 80065d8:	6014      	str	r4, [r2, #0]
 80065da:	b003      	add	sp, #12
 80065dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065e0:	f000 ba96 	b.w	8006b10 <__malloc_unlock>
 80065e4:	42a3      	cmp	r3, r4
 80065e6:	d908      	bls.n	80065fa <_free_r+0x46>
 80065e8:	6825      	ldr	r5, [r4, #0]
 80065ea:	1961      	adds	r1, r4, r5
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf01      	itttt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	1949      	addeq	r1, r1, r5
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	e7ed      	b.n	80065d6 <_free_r+0x22>
 80065fa:	461a      	mov	r2, r3
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b10b      	cbz	r3, 8006604 <_free_r+0x50>
 8006600:	42a3      	cmp	r3, r4
 8006602:	d9fa      	bls.n	80065fa <_free_r+0x46>
 8006604:	6811      	ldr	r1, [r2, #0]
 8006606:	1855      	adds	r5, r2, r1
 8006608:	42a5      	cmp	r5, r4
 800660a:	d10b      	bne.n	8006624 <_free_r+0x70>
 800660c:	6824      	ldr	r4, [r4, #0]
 800660e:	4421      	add	r1, r4
 8006610:	1854      	adds	r4, r2, r1
 8006612:	42a3      	cmp	r3, r4
 8006614:	6011      	str	r1, [r2, #0]
 8006616:	d1e0      	bne.n	80065da <_free_r+0x26>
 8006618:	681c      	ldr	r4, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	4421      	add	r1, r4
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	e7da      	b.n	80065da <_free_r+0x26>
 8006624:	d902      	bls.n	800662c <_free_r+0x78>
 8006626:	230c      	movs	r3, #12
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	e7d6      	b.n	80065da <_free_r+0x26>
 800662c:	6825      	ldr	r5, [r4, #0]
 800662e:	1961      	adds	r1, r4, r5
 8006630:	428b      	cmp	r3, r1
 8006632:	bf04      	itt	eq
 8006634:	6819      	ldreq	r1, [r3, #0]
 8006636:	685b      	ldreq	r3, [r3, #4]
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	bf04      	itt	eq
 800663c:	1949      	addeq	r1, r1, r5
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	6054      	str	r4, [r2, #4]
 8006642:	e7ca      	b.n	80065da <_free_r+0x26>
 8006644:	b003      	add	sp, #12
 8006646:	bd30      	pop	{r4, r5, pc}
 8006648:	200003f8 	.word	0x200003f8

0800664c <sbrk_aligned>:
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	4e0e      	ldr	r6, [pc, #56]	; (8006688 <sbrk_aligned+0x3c>)
 8006650:	460c      	mov	r4, r1
 8006652:	6831      	ldr	r1, [r6, #0]
 8006654:	4605      	mov	r5, r0
 8006656:	b911      	cbnz	r1, 800665e <sbrk_aligned+0x12>
 8006658:	f000 f9e8 	bl	8006a2c <_sbrk_r>
 800665c:	6030      	str	r0, [r6, #0]
 800665e:	4621      	mov	r1, r4
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f9e3 	bl	8006a2c <_sbrk_r>
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	d00a      	beq.n	8006680 <sbrk_aligned+0x34>
 800666a:	1cc4      	adds	r4, r0, #3
 800666c:	f024 0403 	bic.w	r4, r4, #3
 8006670:	42a0      	cmp	r0, r4
 8006672:	d007      	beq.n	8006684 <sbrk_aligned+0x38>
 8006674:	1a21      	subs	r1, r4, r0
 8006676:	4628      	mov	r0, r5
 8006678:	f000 f9d8 	bl	8006a2c <_sbrk_r>
 800667c:	3001      	adds	r0, #1
 800667e:	d101      	bne.n	8006684 <sbrk_aligned+0x38>
 8006680:	f04f 34ff 	mov.w	r4, #4294967295
 8006684:	4620      	mov	r0, r4
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	200003fc 	.word	0x200003fc

0800668c <_malloc_r>:
 800668c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006690:	1ccd      	adds	r5, r1, #3
 8006692:	f025 0503 	bic.w	r5, r5, #3
 8006696:	3508      	adds	r5, #8
 8006698:	2d0c      	cmp	r5, #12
 800669a:	bf38      	it	cc
 800669c:	250c      	movcc	r5, #12
 800669e:	2d00      	cmp	r5, #0
 80066a0:	4607      	mov	r7, r0
 80066a2:	db01      	blt.n	80066a8 <_malloc_r+0x1c>
 80066a4:	42a9      	cmp	r1, r5
 80066a6:	d905      	bls.n	80066b4 <_malloc_r+0x28>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	2600      	movs	r6, #0
 80066ae:	4630      	mov	r0, r6
 80066b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b4:	4e2e      	ldr	r6, [pc, #184]	; (8006770 <_malloc_r+0xe4>)
 80066b6:	f000 fa25 	bl	8006b04 <__malloc_lock>
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	461c      	mov	r4, r3
 80066be:	bb34      	cbnz	r4, 800670e <_malloc_r+0x82>
 80066c0:	4629      	mov	r1, r5
 80066c2:	4638      	mov	r0, r7
 80066c4:	f7ff ffc2 	bl	800664c <sbrk_aligned>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	4604      	mov	r4, r0
 80066cc:	d14d      	bne.n	800676a <_malloc_r+0xde>
 80066ce:	6834      	ldr	r4, [r6, #0]
 80066d0:	4626      	mov	r6, r4
 80066d2:	2e00      	cmp	r6, #0
 80066d4:	d140      	bne.n	8006758 <_malloc_r+0xcc>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	4631      	mov	r1, r6
 80066da:	4638      	mov	r0, r7
 80066dc:	eb04 0803 	add.w	r8, r4, r3
 80066e0:	f000 f9a4 	bl	8006a2c <_sbrk_r>
 80066e4:	4580      	cmp	r8, r0
 80066e6:	d13a      	bne.n	800675e <_malloc_r+0xd2>
 80066e8:	6821      	ldr	r1, [r4, #0]
 80066ea:	3503      	adds	r5, #3
 80066ec:	1a6d      	subs	r5, r5, r1
 80066ee:	f025 0503 	bic.w	r5, r5, #3
 80066f2:	3508      	adds	r5, #8
 80066f4:	2d0c      	cmp	r5, #12
 80066f6:	bf38      	it	cc
 80066f8:	250c      	movcc	r5, #12
 80066fa:	4629      	mov	r1, r5
 80066fc:	4638      	mov	r0, r7
 80066fe:	f7ff ffa5 	bl	800664c <sbrk_aligned>
 8006702:	3001      	adds	r0, #1
 8006704:	d02b      	beq.n	800675e <_malloc_r+0xd2>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	442b      	add	r3, r5
 800670a:	6023      	str	r3, [r4, #0]
 800670c:	e00e      	b.n	800672c <_malloc_r+0xa0>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	1b52      	subs	r2, r2, r5
 8006712:	d41e      	bmi.n	8006752 <_malloc_r+0xc6>
 8006714:	2a0b      	cmp	r2, #11
 8006716:	d916      	bls.n	8006746 <_malloc_r+0xba>
 8006718:	1961      	adds	r1, r4, r5
 800671a:	42a3      	cmp	r3, r4
 800671c:	6025      	str	r5, [r4, #0]
 800671e:	bf18      	it	ne
 8006720:	6059      	strne	r1, [r3, #4]
 8006722:	6863      	ldr	r3, [r4, #4]
 8006724:	bf08      	it	eq
 8006726:	6031      	streq	r1, [r6, #0]
 8006728:	5162      	str	r2, [r4, r5]
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	4638      	mov	r0, r7
 800672e:	f104 060b 	add.w	r6, r4, #11
 8006732:	f000 f9ed 	bl	8006b10 <__malloc_unlock>
 8006736:	f026 0607 	bic.w	r6, r6, #7
 800673a:	1d23      	adds	r3, r4, #4
 800673c:	1af2      	subs	r2, r6, r3
 800673e:	d0b6      	beq.n	80066ae <_malloc_r+0x22>
 8006740:	1b9b      	subs	r3, r3, r6
 8006742:	50a3      	str	r3, [r4, r2]
 8006744:	e7b3      	b.n	80066ae <_malloc_r+0x22>
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	42a3      	cmp	r3, r4
 800674a:	bf0c      	ite	eq
 800674c:	6032      	streq	r2, [r6, #0]
 800674e:	605a      	strne	r2, [r3, #4]
 8006750:	e7ec      	b.n	800672c <_malloc_r+0xa0>
 8006752:	4623      	mov	r3, r4
 8006754:	6864      	ldr	r4, [r4, #4]
 8006756:	e7b2      	b.n	80066be <_malloc_r+0x32>
 8006758:	4634      	mov	r4, r6
 800675a:	6876      	ldr	r6, [r6, #4]
 800675c:	e7b9      	b.n	80066d2 <_malloc_r+0x46>
 800675e:	230c      	movs	r3, #12
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4638      	mov	r0, r7
 8006764:	f000 f9d4 	bl	8006b10 <__malloc_unlock>
 8006768:	e7a1      	b.n	80066ae <_malloc_r+0x22>
 800676a:	6025      	str	r5, [r4, #0]
 800676c:	e7de      	b.n	800672c <_malloc_r+0xa0>
 800676e:	bf00      	nop
 8006770:	200003f8 	.word	0x200003f8

08006774 <__ssputs_r>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	688e      	ldr	r6, [r1, #8]
 800677a:	429e      	cmp	r6, r3
 800677c:	4682      	mov	sl, r0
 800677e:	460c      	mov	r4, r1
 8006780:	4690      	mov	r8, r2
 8006782:	461f      	mov	r7, r3
 8006784:	d838      	bhi.n	80067f8 <__ssputs_r+0x84>
 8006786:	898a      	ldrh	r2, [r1, #12]
 8006788:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800678c:	d032      	beq.n	80067f4 <__ssputs_r+0x80>
 800678e:	6825      	ldr	r5, [r4, #0]
 8006790:	6909      	ldr	r1, [r1, #16]
 8006792:	eba5 0901 	sub.w	r9, r5, r1
 8006796:	6965      	ldr	r5, [r4, #20]
 8006798:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800679c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067a0:	3301      	adds	r3, #1
 80067a2:	444b      	add	r3, r9
 80067a4:	106d      	asrs	r5, r5, #1
 80067a6:	429d      	cmp	r5, r3
 80067a8:	bf38      	it	cc
 80067aa:	461d      	movcc	r5, r3
 80067ac:	0553      	lsls	r3, r2, #21
 80067ae:	d531      	bpl.n	8006814 <__ssputs_r+0xa0>
 80067b0:	4629      	mov	r1, r5
 80067b2:	f7ff ff6b 	bl	800668c <_malloc_r>
 80067b6:	4606      	mov	r6, r0
 80067b8:	b950      	cbnz	r0, 80067d0 <__ssputs_r+0x5c>
 80067ba:	230c      	movs	r3, #12
 80067bc:	f8ca 3000 	str.w	r3, [sl]
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067c6:	81a3      	strh	r3, [r4, #12]
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d0:	6921      	ldr	r1, [r4, #16]
 80067d2:	464a      	mov	r2, r9
 80067d4:	f7ff fb46 	bl	8005e64 <memcpy>
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	6126      	str	r6, [r4, #16]
 80067e6:	6165      	str	r5, [r4, #20]
 80067e8:	444e      	add	r6, r9
 80067ea:	eba5 0509 	sub.w	r5, r5, r9
 80067ee:	6026      	str	r6, [r4, #0]
 80067f0:	60a5      	str	r5, [r4, #8]
 80067f2:	463e      	mov	r6, r7
 80067f4:	42be      	cmp	r6, r7
 80067f6:	d900      	bls.n	80067fa <__ssputs_r+0x86>
 80067f8:	463e      	mov	r6, r7
 80067fa:	6820      	ldr	r0, [r4, #0]
 80067fc:	4632      	mov	r2, r6
 80067fe:	4641      	mov	r1, r8
 8006800:	f000 f966 	bl	8006ad0 <memmove>
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	1b9b      	subs	r3, r3, r6
 8006808:	60a3      	str	r3, [r4, #8]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	4433      	add	r3, r6
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	2000      	movs	r0, #0
 8006812:	e7db      	b.n	80067cc <__ssputs_r+0x58>
 8006814:	462a      	mov	r2, r5
 8006816:	f000 f981 	bl	8006b1c <_realloc_r>
 800681a:	4606      	mov	r6, r0
 800681c:	2800      	cmp	r0, #0
 800681e:	d1e1      	bne.n	80067e4 <__ssputs_r+0x70>
 8006820:	6921      	ldr	r1, [r4, #16]
 8006822:	4650      	mov	r0, sl
 8006824:	f7ff fec6 	bl	80065b4 <_free_r>
 8006828:	e7c7      	b.n	80067ba <__ssputs_r+0x46>
	...

0800682c <_svfiprintf_r>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	4698      	mov	r8, r3
 8006832:	898b      	ldrh	r3, [r1, #12]
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	b09d      	sub	sp, #116	; 0x74
 8006838:	4607      	mov	r7, r0
 800683a:	460d      	mov	r5, r1
 800683c:	4614      	mov	r4, r2
 800683e:	d50e      	bpl.n	800685e <_svfiprintf_r+0x32>
 8006840:	690b      	ldr	r3, [r1, #16]
 8006842:	b963      	cbnz	r3, 800685e <_svfiprintf_r+0x32>
 8006844:	2140      	movs	r1, #64	; 0x40
 8006846:	f7ff ff21 	bl	800668c <_malloc_r>
 800684a:	6028      	str	r0, [r5, #0]
 800684c:	6128      	str	r0, [r5, #16]
 800684e:	b920      	cbnz	r0, 800685a <_svfiprintf_r+0x2e>
 8006850:	230c      	movs	r3, #12
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e0d1      	b.n	80069fe <_svfiprintf_r+0x1d2>
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	616b      	str	r3, [r5, #20]
 800685e:	2300      	movs	r3, #0
 8006860:	9309      	str	r3, [sp, #36]	; 0x24
 8006862:	2320      	movs	r3, #32
 8006864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006868:	f8cd 800c 	str.w	r8, [sp, #12]
 800686c:	2330      	movs	r3, #48	; 0x30
 800686e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a18 <_svfiprintf_r+0x1ec>
 8006872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006876:	f04f 0901 	mov.w	r9, #1
 800687a:	4623      	mov	r3, r4
 800687c:	469a      	mov	sl, r3
 800687e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006882:	b10a      	cbz	r2, 8006888 <_svfiprintf_r+0x5c>
 8006884:	2a25      	cmp	r2, #37	; 0x25
 8006886:	d1f9      	bne.n	800687c <_svfiprintf_r+0x50>
 8006888:	ebba 0b04 	subs.w	fp, sl, r4
 800688c:	d00b      	beq.n	80068a6 <_svfiprintf_r+0x7a>
 800688e:	465b      	mov	r3, fp
 8006890:	4622      	mov	r2, r4
 8006892:	4629      	mov	r1, r5
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff ff6d 	bl	8006774 <__ssputs_r>
 800689a:	3001      	adds	r0, #1
 800689c:	f000 80aa 	beq.w	80069f4 <_svfiprintf_r+0x1c8>
 80068a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068a2:	445a      	add	r2, fp
 80068a4:	9209      	str	r2, [sp, #36]	; 0x24
 80068a6:	f89a 3000 	ldrb.w	r3, [sl]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 80a2 	beq.w	80069f4 <_svfiprintf_r+0x1c8>
 80068b0:	2300      	movs	r3, #0
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ba:	f10a 0a01 	add.w	sl, sl, #1
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	9307      	str	r3, [sp, #28]
 80068c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068c6:	931a      	str	r3, [sp, #104]	; 0x68
 80068c8:	4654      	mov	r4, sl
 80068ca:	2205      	movs	r2, #5
 80068cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d0:	4851      	ldr	r0, [pc, #324]	; (8006a18 <_svfiprintf_r+0x1ec>)
 80068d2:	f7f9 fca5 	bl	8000220 <memchr>
 80068d6:	9a04      	ldr	r2, [sp, #16]
 80068d8:	b9d8      	cbnz	r0, 8006912 <_svfiprintf_r+0xe6>
 80068da:	06d0      	lsls	r0, r2, #27
 80068dc:	bf44      	itt	mi
 80068de:	2320      	movmi	r3, #32
 80068e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068e4:	0711      	lsls	r1, r2, #28
 80068e6:	bf44      	itt	mi
 80068e8:	232b      	movmi	r3, #43	; 0x2b
 80068ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ee:	f89a 3000 	ldrb.w	r3, [sl]
 80068f2:	2b2a      	cmp	r3, #42	; 0x2a
 80068f4:	d015      	beq.n	8006922 <_svfiprintf_r+0xf6>
 80068f6:	9a07      	ldr	r2, [sp, #28]
 80068f8:	4654      	mov	r4, sl
 80068fa:	2000      	movs	r0, #0
 80068fc:	f04f 0c0a 	mov.w	ip, #10
 8006900:	4621      	mov	r1, r4
 8006902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006906:	3b30      	subs	r3, #48	; 0x30
 8006908:	2b09      	cmp	r3, #9
 800690a:	d94e      	bls.n	80069aa <_svfiprintf_r+0x17e>
 800690c:	b1b0      	cbz	r0, 800693c <_svfiprintf_r+0x110>
 800690e:	9207      	str	r2, [sp, #28]
 8006910:	e014      	b.n	800693c <_svfiprintf_r+0x110>
 8006912:	eba0 0308 	sub.w	r3, r0, r8
 8006916:	fa09 f303 	lsl.w	r3, r9, r3
 800691a:	4313      	orrs	r3, r2
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	46a2      	mov	sl, r4
 8006920:	e7d2      	b.n	80068c8 <_svfiprintf_r+0x9c>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	1d19      	adds	r1, r3, #4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	9103      	str	r1, [sp, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	bfbb      	ittet	lt
 800692e:	425b      	neglt	r3, r3
 8006930:	f042 0202 	orrlt.w	r2, r2, #2
 8006934:	9307      	strge	r3, [sp, #28]
 8006936:	9307      	strlt	r3, [sp, #28]
 8006938:	bfb8      	it	lt
 800693a:	9204      	strlt	r2, [sp, #16]
 800693c:	7823      	ldrb	r3, [r4, #0]
 800693e:	2b2e      	cmp	r3, #46	; 0x2e
 8006940:	d10c      	bne.n	800695c <_svfiprintf_r+0x130>
 8006942:	7863      	ldrb	r3, [r4, #1]
 8006944:	2b2a      	cmp	r3, #42	; 0x2a
 8006946:	d135      	bne.n	80069b4 <_svfiprintf_r+0x188>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	9203      	str	r2, [sp, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	bfb8      	it	lt
 8006954:	f04f 33ff 	movlt.w	r3, #4294967295
 8006958:	3402      	adds	r4, #2
 800695a:	9305      	str	r3, [sp, #20]
 800695c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a28 <_svfiprintf_r+0x1fc>
 8006960:	7821      	ldrb	r1, [r4, #0]
 8006962:	2203      	movs	r2, #3
 8006964:	4650      	mov	r0, sl
 8006966:	f7f9 fc5b 	bl	8000220 <memchr>
 800696a:	b140      	cbz	r0, 800697e <_svfiprintf_r+0x152>
 800696c:	2340      	movs	r3, #64	; 0x40
 800696e:	eba0 000a 	sub.w	r0, r0, sl
 8006972:	fa03 f000 	lsl.w	r0, r3, r0
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	4303      	orrs	r3, r0
 800697a:	3401      	adds	r4, #1
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006982:	4826      	ldr	r0, [pc, #152]	; (8006a1c <_svfiprintf_r+0x1f0>)
 8006984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006988:	2206      	movs	r2, #6
 800698a:	f7f9 fc49 	bl	8000220 <memchr>
 800698e:	2800      	cmp	r0, #0
 8006990:	d038      	beq.n	8006a04 <_svfiprintf_r+0x1d8>
 8006992:	4b23      	ldr	r3, [pc, #140]	; (8006a20 <_svfiprintf_r+0x1f4>)
 8006994:	bb1b      	cbnz	r3, 80069de <_svfiprintf_r+0x1b2>
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	3307      	adds	r3, #7
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	3308      	adds	r3, #8
 80069a0:	9303      	str	r3, [sp, #12]
 80069a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a4:	4433      	add	r3, r6
 80069a6:	9309      	str	r3, [sp, #36]	; 0x24
 80069a8:	e767      	b.n	800687a <_svfiprintf_r+0x4e>
 80069aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ae:	460c      	mov	r4, r1
 80069b0:	2001      	movs	r0, #1
 80069b2:	e7a5      	b.n	8006900 <_svfiprintf_r+0xd4>
 80069b4:	2300      	movs	r3, #0
 80069b6:	3401      	adds	r4, #1
 80069b8:	9305      	str	r3, [sp, #20]
 80069ba:	4619      	mov	r1, r3
 80069bc:	f04f 0c0a 	mov.w	ip, #10
 80069c0:	4620      	mov	r0, r4
 80069c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c6:	3a30      	subs	r2, #48	; 0x30
 80069c8:	2a09      	cmp	r2, #9
 80069ca:	d903      	bls.n	80069d4 <_svfiprintf_r+0x1a8>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0c5      	beq.n	800695c <_svfiprintf_r+0x130>
 80069d0:	9105      	str	r1, [sp, #20]
 80069d2:	e7c3      	b.n	800695c <_svfiprintf_r+0x130>
 80069d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d8:	4604      	mov	r4, r0
 80069da:	2301      	movs	r3, #1
 80069dc:	e7f0      	b.n	80069c0 <_svfiprintf_r+0x194>
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	462a      	mov	r2, r5
 80069e4:	4b0f      	ldr	r3, [pc, #60]	; (8006a24 <_svfiprintf_r+0x1f8>)
 80069e6:	a904      	add	r1, sp, #16
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7fd ffc9 	bl	8004980 <_printf_float>
 80069ee:	1c42      	adds	r2, r0, #1
 80069f0:	4606      	mov	r6, r0
 80069f2:	d1d6      	bne.n	80069a2 <_svfiprintf_r+0x176>
 80069f4:	89ab      	ldrh	r3, [r5, #12]
 80069f6:	065b      	lsls	r3, r3, #25
 80069f8:	f53f af2c 	bmi.w	8006854 <_svfiprintf_r+0x28>
 80069fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069fe:	b01d      	add	sp, #116	; 0x74
 8006a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a04:	ab03      	add	r3, sp, #12
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	462a      	mov	r2, r5
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <_svfiprintf_r+0x1f8>)
 8006a0c:	a904      	add	r1, sp, #16
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f7fe fa5a 	bl	8004ec8 <_printf_i>
 8006a14:	e7eb      	b.n	80069ee <_svfiprintf_r+0x1c2>
 8006a16:	bf00      	nop
 8006a18:	08007c2c 	.word	0x08007c2c
 8006a1c:	08007c36 	.word	0x08007c36
 8006a20:	08004981 	.word	0x08004981
 8006a24:	08006775 	.word	0x08006775
 8006a28:	08007c32 	.word	0x08007c32

08006a2c <_sbrk_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	4d06      	ldr	r5, [pc, #24]	; (8006a48 <_sbrk_r+0x1c>)
 8006a30:	2300      	movs	r3, #0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4608      	mov	r0, r1
 8006a36:	602b      	str	r3, [r5, #0]
 8006a38:	f7fb f99e 	bl	8001d78 <_sbrk>
 8006a3c:	1c43      	adds	r3, r0, #1
 8006a3e:	d102      	bne.n	8006a46 <_sbrk_r+0x1a>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	b103      	cbz	r3, 8006a46 <_sbrk_r+0x1a>
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	20000400 	.word	0x20000400

08006a4c <__assert_func>:
 8006a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a4e:	4614      	mov	r4, r2
 8006a50:	461a      	mov	r2, r3
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <__assert_func+0x2c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4605      	mov	r5, r0
 8006a58:	68d8      	ldr	r0, [r3, #12]
 8006a5a:	b14c      	cbz	r4, 8006a70 <__assert_func+0x24>
 8006a5c:	4b07      	ldr	r3, [pc, #28]	; (8006a7c <__assert_func+0x30>)
 8006a5e:	9100      	str	r1, [sp, #0]
 8006a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a64:	4906      	ldr	r1, [pc, #24]	; (8006a80 <__assert_func+0x34>)
 8006a66:	462b      	mov	r3, r5
 8006a68:	f000 f80e 	bl	8006a88 <fiprintf>
 8006a6c:	f000 faac 	bl	8006fc8 <abort>
 8006a70:	4b04      	ldr	r3, [pc, #16]	; (8006a84 <__assert_func+0x38>)
 8006a72:	461c      	mov	r4, r3
 8006a74:	e7f3      	b.n	8006a5e <__assert_func+0x12>
 8006a76:	bf00      	nop
 8006a78:	20000014 	.word	0x20000014
 8006a7c:	08007c3d 	.word	0x08007c3d
 8006a80:	08007c4a 	.word	0x08007c4a
 8006a84:	08007c78 	.word	0x08007c78

08006a88 <fiprintf>:
 8006a88:	b40e      	push	{r1, r2, r3}
 8006a8a:	b503      	push	{r0, r1, lr}
 8006a8c:	4601      	mov	r1, r0
 8006a8e:	ab03      	add	r3, sp, #12
 8006a90:	4805      	ldr	r0, [pc, #20]	; (8006aa8 <fiprintf+0x20>)
 8006a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a96:	6800      	ldr	r0, [r0, #0]
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	f000 f897 	bl	8006bcc <_vfiprintf_r>
 8006a9e:	b002      	add	sp, #8
 8006aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa4:	b003      	add	sp, #12
 8006aa6:	4770      	bx	lr
 8006aa8:	20000014 	.word	0x20000014

08006aac <__ascii_mbtowc>:
 8006aac:	b082      	sub	sp, #8
 8006aae:	b901      	cbnz	r1, 8006ab2 <__ascii_mbtowc+0x6>
 8006ab0:	a901      	add	r1, sp, #4
 8006ab2:	b142      	cbz	r2, 8006ac6 <__ascii_mbtowc+0x1a>
 8006ab4:	b14b      	cbz	r3, 8006aca <__ascii_mbtowc+0x1e>
 8006ab6:	7813      	ldrb	r3, [r2, #0]
 8006ab8:	600b      	str	r3, [r1, #0]
 8006aba:	7812      	ldrb	r2, [r2, #0]
 8006abc:	1e10      	subs	r0, r2, #0
 8006abe:	bf18      	it	ne
 8006ac0:	2001      	movne	r0, #1
 8006ac2:	b002      	add	sp, #8
 8006ac4:	4770      	bx	lr
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	e7fb      	b.n	8006ac2 <__ascii_mbtowc+0x16>
 8006aca:	f06f 0001 	mvn.w	r0, #1
 8006ace:	e7f8      	b.n	8006ac2 <__ascii_mbtowc+0x16>

08006ad0 <memmove>:
 8006ad0:	4288      	cmp	r0, r1
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	eb01 0402 	add.w	r4, r1, r2
 8006ad8:	d902      	bls.n	8006ae0 <memmove+0x10>
 8006ada:	4284      	cmp	r4, r0
 8006adc:	4623      	mov	r3, r4
 8006ade:	d807      	bhi.n	8006af0 <memmove+0x20>
 8006ae0:	1e43      	subs	r3, r0, #1
 8006ae2:	42a1      	cmp	r1, r4
 8006ae4:	d008      	beq.n	8006af8 <memmove+0x28>
 8006ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aee:	e7f8      	b.n	8006ae2 <memmove+0x12>
 8006af0:	4402      	add	r2, r0
 8006af2:	4601      	mov	r1, r0
 8006af4:	428a      	cmp	r2, r1
 8006af6:	d100      	bne.n	8006afa <memmove+0x2a>
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b02:	e7f7      	b.n	8006af4 <memmove+0x24>

08006b04 <__malloc_lock>:
 8006b04:	4801      	ldr	r0, [pc, #4]	; (8006b0c <__malloc_lock+0x8>)
 8006b06:	f000 bc1f 	b.w	8007348 <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20000404 	.word	0x20000404

08006b10 <__malloc_unlock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_unlock+0x8>)
 8006b12:	f000 bc1a 	b.w	800734a <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	20000404 	.word	0x20000404

08006b1c <_realloc_r>:
 8006b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b20:	4680      	mov	r8, r0
 8006b22:	4614      	mov	r4, r2
 8006b24:	460e      	mov	r6, r1
 8006b26:	b921      	cbnz	r1, 8006b32 <_realloc_r+0x16>
 8006b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	f7ff bdad 	b.w	800668c <_malloc_r>
 8006b32:	b92a      	cbnz	r2, 8006b40 <_realloc_r+0x24>
 8006b34:	f7ff fd3e 	bl	80065b4 <_free_r>
 8006b38:	4625      	mov	r5, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b40:	f000 fc6a 	bl	8007418 <_malloc_usable_size_r>
 8006b44:	4284      	cmp	r4, r0
 8006b46:	4607      	mov	r7, r0
 8006b48:	d802      	bhi.n	8006b50 <_realloc_r+0x34>
 8006b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b4e:	d812      	bhi.n	8006b76 <_realloc_r+0x5a>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4640      	mov	r0, r8
 8006b54:	f7ff fd9a 	bl	800668c <_malloc_r>
 8006b58:	4605      	mov	r5, r0
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	d0ed      	beq.n	8006b3a <_realloc_r+0x1e>
 8006b5e:	42bc      	cmp	r4, r7
 8006b60:	4622      	mov	r2, r4
 8006b62:	4631      	mov	r1, r6
 8006b64:	bf28      	it	cs
 8006b66:	463a      	movcs	r2, r7
 8006b68:	f7ff f97c 	bl	8005e64 <memcpy>
 8006b6c:	4631      	mov	r1, r6
 8006b6e:	4640      	mov	r0, r8
 8006b70:	f7ff fd20 	bl	80065b4 <_free_r>
 8006b74:	e7e1      	b.n	8006b3a <_realloc_r+0x1e>
 8006b76:	4635      	mov	r5, r6
 8006b78:	e7df      	b.n	8006b3a <_realloc_r+0x1e>

08006b7a <__sfputc_r>:
 8006b7a:	6893      	ldr	r3, [r2, #8]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	b410      	push	{r4}
 8006b82:	6093      	str	r3, [r2, #8]
 8006b84:	da08      	bge.n	8006b98 <__sfputc_r+0x1e>
 8006b86:	6994      	ldr	r4, [r2, #24]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	db01      	blt.n	8006b90 <__sfputc_r+0x16>
 8006b8c:	290a      	cmp	r1, #10
 8006b8e:	d103      	bne.n	8006b98 <__sfputc_r+0x1e>
 8006b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b94:	f000 b94a 	b.w	8006e2c <__swbuf_r>
 8006b98:	6813      	ldr	r3, [r2, #0]
 8006b9a:	1c58      	adds	r0, r3, #1
 8006b9c:	6010      	str	r0, [r2, #0]
 8006b9e:	7019      	strb	r1, [r3, #0]
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <__sfputs_r>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4606      	mov	r6, r0
 8006bac:	460f      	mov	r7, r1
 8006bae:	4614      	mov	r4, r2
 8006bb0:	18d5      	adds	r5, r2, r3
 8006bb2:	42ac      	cmp	r4, r5
 8006bb4:	d101      	bne.n	8006bba <__sfputs_r+0x12>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e007      	b.n	8006bca <__sfputs_r+0x22>
 8006bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bbe:	463a      	mov	r2, r7
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f7ff ffda 	bl	8006b7a <__sfputc_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d1f3      	bne.n	8006bb2 <__sfputs_r+0xa>
 8006bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bcc <_vfiprintf_r>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	460d      	mov	r5, r1
 8006bd2:	b09d      	sub	sp, #116	; 0x74
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	4698      	mov	r8, r3
 8006bd8:	4606      	mov	r6, r0
 8006bda:	b118      	cbz	r0, 8006be4 <_vfiprintf_r+0x18>
 8006bdc:	6983      	ldr	r3, [r0, #24]
 8006bde:	b90b      	cbnz	r3, 8006be4 <_vfiprintf_r+0x18>
 8006be0:	f000 fb14 	bl	800720c <__sinit>
 8006be4:	4b89      	ldr	r3, [pc, #548]	; (8006e0c <_vfiprintf_r+0x240>)
 8006be6:	429d      	cmp	r5, r3
 8006be8:	d11b      	bne.n	8006c22 <_vfiprintf_r+0x56>
 8006bea:	6875      	ldr	r5, [r6, #4]
 8006bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bee:	07d9      	lsls	r1, r3, #31
 8006bf0:	d405      	bmi.n	8006bfe <_vfiprintf_r+0x32>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	059a      	lsls	r2, r3, #22
 8006bf6:	d402      	bmi.n	8006bfe <_vfiprintf_r+0x32>
 8006bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bfa:	f000 fba5 	bl	8007348 <__retarget_lock_acquire_recursive>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	071b      	lsls	r3, r3, #28
 8006c02:	d501      	bpl.n	8006c08 <_vfiprintf_r+0x3c>
 8006c04:	692b      	ldr	r3, [r5, #16]
 8006c06:	b9eb      	cbnz	r3, 8006c44 <_vfiprintf_r+0x78>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f96e 	bl	8006eec <__swsetup_r>
 8006c10:	b1c0      	cbz	r0, 8006c44 <_vfiprintf_r+0x78>
 8006c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c14:	07dc      	lsls	r4, r3, #31
 8006c16:	d50e      	bpl.n	8006c36 <_vfiprintf_r+0x6a>
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1c:	b01d      	add	sp, #116	; 0x74
 8006c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c22:	4b7b      	ldr	r3, [pc, #492]	; (8006e10 <_vfiprintf_r+0x244>)
 8006c24:	429d      	cmp	r5, r3
 8006c26:	d101      	bne.n	8006c2c <_vfiprintf_r+0x60>
 8006c28:	68b5      	ldr	r5, [r6, #8]
 8006c2a:	e7df      	b.n	8006bec <_vfiprintf_r+0x20>
 8006c2c:	4b79      	ldr	r3, [pc, #484]	; (8006e14 <_vfiprintf_r+0x248>)
 8006c2e:	429d      	cmp	r5, r3
 8006c30:	bf08      	it	eq
 8006c32:	68f5      	ldreq	r5, [r6, #12]
 8006c34:	e7da      	b.n	8006bec <_vfiprintf_r+0x20>
 8006c36:	89ab      	ldrh	r3, [r5, #12]
 8006c38:	0598      	lsls	r0, r3, #22
 8006c3a:	d4ed      	bmi.n	8006c18 <_vfiprintf_r+0x4c>
 8006c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c3e:	f000 fb84 	bl	800734a <__retarget_lock_release_recursive>
 8006c42:	e7e9      	b.n	8006c18 <_vfiprintf_r+0x4c>
 8006c44:	2300      	movs	r3, #0
 8006c46:	9309      	str	r3, [sp, #36]	; 0x24
 8006c48:	2320      	movs	r3, #32
 8006c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c52:	2330      	movs	r3, #48	; 0x30
 8006c54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e18 <_vfiprintf_r+0x24c>
 8006c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c5c:	f04f 0901 	mov.w	r9, #1
 8006c60:	4623      	mov	r3, r4
 8006c62:	469a      	mov	sl, r3
 8006c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c68:	b10a      	cbz	r2, 8006c6e <_vfiprintf_r+0xa2>
 8006c6a:	2a25      	cmp	r2, #37	; 0x25
 8006c6c:	d1f9      	bne.n	8006c62 <_vfiprintf_r+0x96>
 8006c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c72:	d00b      	beq.n	8006c8c <_vfiprintf_r+0xc0>
 8006c74:	465b      	mov	r3, fp
 8006c76:	4622      	mov	r2, r4
 8006c78:	4629      	mov	r1, r5
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	f7ff ff94 	bl	8006ba8 <__sfputs_r>
 8006c80:	3001      	adds	r0, #1
 8006c82:	f000 80aa 	beq.w	8006dda <_vfiprintf_r+0x20e>
 8006c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c88:	445a      	add	r2, fp
 8006c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80a2 	beq.w	8006dda <_vfiprintf_r+0x20e>
 8006c96:	2300      	movs	r3, #0
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca0:	f10a 0a01 	add.w	sl, sl, #1
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cac:	931a      	str	r3, [sp, #104]	; 0x68
 8006cae:	4654      	mov	r4, sl
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb6:	4858      	ldr	r0, [pc, #352]	; (8006e18 <_vfiprintf_r+0x24c>)
 8006cb8:	f7f9 fab2 	bl	8000220 <memchr>
 8006cbc:	9a04      	ldr	r2, [sp, #16]
 8006cbe:	b9d8      	cbnz	r0, 8006cf8 <_vfiprintf_r+0x12c>
 8006cc0:	06d1      	lsls	r1, r2, #27
 8006cc2:	bf44      	itt	mi
 8006cc4:	2320      	movmi	r3, #32
 8006cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cca:	0713      	lsls	r3, r2, #28
 8006ccc:	bf44      	itt	mi
 8006cce:	232b      	movmi	r3, #43	; 0x2b
 8006cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cda:	d015      	beq.n	8006d08 <_vfiprintf_r+0x13c>
 8006cdc:	9a07      	ldr	r2, [sp, #28]
 8006cde:	4654      	mov	r4, sl
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f04f 0c0a 	mov.w	ip, #10
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cec:	3b30      	subs	r3, #48	; 0x30
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d94e      	bls.n	8006d90 <_vfiprintf_r+0x1c4>
 8006cf2:	b1b0      	cbz	r0, 8006d22 <_vfiprintf_r+0x156>
 8006cf4:	9207      	str	r2, [sp, #28]
 8006cf6:	e014      	b.n	8006d22 <_vfiprintf_r+0x156>
 8006cf8:	eba0 0308 	sub.w	r3, r0, r8
 8006cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	46a2      	mov	sl, r4
 8006d06:	e7d2      	b.n	8006cae <_vfiprintf_r+0xe2>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	1d19      	adds	r1, r3, #4
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	9103      	str	r1, [sp, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bfbb      	ittet	lt
 8006d14:	425b      	neglt	r3, r3
 8006d16:	f042 0202 	orrlt.w	r2, r2, #2
 8006d1a:	9307      	strge	r3, [sp, #28]
 8006d1c:	9307      	strlt	r3, [sp, #28]
 8006d1e:	bfb8      	it	lt
 8006d20:	9204      	strlt	r2, [sp, #16]
 8006d22:	7823      	ldrb	r3, [r4, #0]
 8006d24:	2b2e      	cmp	r3, #46	; 0x2e
 8006d26:	d10c      	bne.n	8006d42 <_vfiprintf_r+0x176>
 8006d28:	7863      	ldrb	r3, [r4, #1]
 8006d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2c:	d135      	bne.n	8006d9a <_vfiprintf_r+0x1ce>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9203      	str	r2, [sp, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d3e:	3402      	adds	r4, #2
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e28 <_vfiprintf_r+0x25c>
 8006d46:	7821      	ldrb	r1, [r4, #0]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f7f9 fa68 	bl	8000220 <memchr>
 8006d50:	b140      	cbz	r0, 8006d64 <_vfiprintf_r+0x198>
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	eba0 000a 	sub.w	r0, r0, sl
 8006d58:	fa03 f000 	lsl.w	r0, r3, r0
 8006d5c:	9b04      	ldr	r3, [sp, #16]
 8006d5e:	4303      	orrs	r3, r0
 8006d60:	3401      	adds	r4, #1
 8006d62:	9304      	str	r3, [sp, #16]
 8006d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d68:	482c      	ldr	r0, [pc, #176]	; (8006e1c <_vfiprintf_r+0x250>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6e:	2206      	movs	r2, #6
 8006d70:	f7f9 fa56 	bl	8000220 <memchr>
 8006d74:	2800      	cmp	r0, #0
 8006d76:	d03f      	beq.n	8006df8 <_vfiprintf_r+0x22c>
 8006d78:	4b29      	ldr	r3, [pc, #164]	; (8006e20 <_vfiprintf_r+0x254>)
 8006d7a:	bb1b      	cbnz	r3, 8006dc4 <_vfiprintf_r+0x1f8>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	3307      	adds	r3, #7
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	3308      	adds	r3, #8
 8006d86:	9303      	str	r3, [sp, #12]
 8006d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8a:	443b      	add	r3, r7
 8006d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8e:	e767      	b.n	8006c60 <_vfiprintf_r+0x94>
 8006d90:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d94:	460c      	mov	r4, r1
 8006d96:	2001      	movs	r0, #1
 8006d98:	e7a5      	b.n	8006ce6 <_vfiprintf_r+0x11a>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f04f 0c0a 	mov.w	ip, #10
 8006da6:	4620      	mov	r0, r4
 8006da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dac:	3a30      	subs	r2, #48	; 0x30
 8006dae:	2a09      	cmp	r2, #9
 8006db0:	d903      	bls.n	8006dba <_vfiprintf_r+0x1ee>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0c5      	beq.n	8006d42 <_vfiprintf_r+0x176>
 8006db6:	9105      	str	r1, [sp, #20]
 8006db8:	e7c3      	b.n	8006d42 <_vfiprintf_r+0x176>
 8006dba:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7f0      	b.n	8006da6 <_vfiprintf_r+0x1da>
 8006dc4:	ab03      	add	r3, sp, #12
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <_vfiprintf_r+0x258>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7fd fdd6 	bl	8004980 <_printf_float>
 8006dd4:	4607      	mov	r7, r0
 8006dd6:	1c78      	adds	r0, r7, #1
 8006dd8:	d1d6      	bne.n	8006d88 <_vfiprintf_r+0x1bc>
 8006dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ddc:	07d9      	lsls	r1, r3, #31
 8006dde:	d405      	bmi.n	8006dec <_vfiprintf_r+0x220>
 8006de0:	89ab      	ldrh	r3, [r5, #12]
 8006de2:	059a      	lsls	r2, r3, #22
 8006de4:	d402      	bmi.n	8006dec <_vfiprintf_r+0x220>
 8006de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de8:	f000 faaf 	bl	800734a <__retarget_lock_release_recursive>
 8006dec:	89ab      	ldrh	r3, [r5, #12]
 8006dee:	065b      	lsls	r3, r3, #25
 8006df0:	f53f af12 	bmi.w	8006c18 <_vfiprintf_r+0x4c>
 8006df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df6:	e711      	b.n	8006c1c <_vfiprintf_r+0x50>
 8006df8:	ab03      	add	r3, sp, #12
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <_vfiprintf_r+0x258>)
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	4630      	mov	r0, r6
 8006e04:	f7fe f860 	bl	8004ec8 <_printf_i>
 8006e08:	e7e4      	b.n	8006dd4 <_vfiprintf_r+0x208>
 8006e0a:	bf00      	nop
 8006e0c:	08007da4 	.word	0x08007da4
 8006e10:	08007dc4 	.word	0x08007dc4
 8006e14:	08007d84 	.word	0x08007d84
 8006e18:	08007c2c 	.word	0x08007c2c
 8006e1c:	08007c36 	.word	0x08007c36
 8006e20:	08004981 	.word	0x08004981
 8006e24:	08006ba9 	.word	0x08006ba9
 8006e28:	08007c32 	.word	0x08007c32

08006e2c <__swbuf_r>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	460e      	mov	r6, r1
 8006e30:	4614      	mov	r4, r2
 8006e32:	4605      	mov	r5, r0
 8006e34:	b118      	cbz	r0, 8006e3e <__swbuf_r+0x12>
 8006e36:	6983      	ldr	r3, [r0, #24]
 8006e38:	b90b      	cbnz	r3, 8006e3e <__swbuf_r+0x12>
 8006e3a:	f000 f9e7 	bl	800720c <__sinit>
 8006e3e:	4b21      	ldr	r3, [pc, #132]	; (8006ec4 <__swbuf_r+0x98>)
 8006e40:	429c      	cmp	r4, r3
 8006e42:	d12b      	bne.n	8006e9c <__swbuf_r+0x70>
 8006e44:	686c      	ldr	r4, [r5, #4]
 8006e46:	69a3      	ldr	r3, [r4, #24]
 8006e48:	60a3      	str	r3, [r4, #8]
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	071a      	lsls	r2, r3, #28
 8006e4e:	d52f      	bpl.n	8006eb0 <__swbuf_r+0x84>
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	b36b      	cbz	r3, 8006eb0 <__swbuf_r+0x84>
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	6820      	ldr	r0, [r4, #0]
 8006e58:	1ac0      	subs	r0, r0, r3
 8006e5a:	6963      	ldr	r3, [r4, #20]
 8006e5c:	b2f6      	uxtb	r6, r6
 8006e5e:	4283      	cmp	r3, r0
 8006e60:	4637      	mov	r7, r6
 8006e62:	dc04      	bgt.n	8006e6e <__swbuf_r+0x42>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 f93c 	bl	80070e4 <_fflush_r>
 8006e6c:	bb30      	cbnz	r0, 8006ebc <__swbuf_r+0x90>
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	60a3      	str	r3, [r4, #8]
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	6022      	str	r2, [r4, #0]
 8006e7a:	701e      	strb	r6, [r3, #0]
 8006e7c:	6963      	ldr	r3, [r4, #20]
 8006e7e:	3001      	adds	r0, #1
 8006e80:	4283      	cmp	r3, r0
 8006e82:	d004      	beq.n	8006e8e <__swbuf_r+0x62>
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	07db      	lsls	r3, r3, #31
 8006e88:	d506      	bpl.n	8006e98 <__swbuf_r+0x6c>
 8006e8a:	2e0a      	cmp	r6, #10
 8006e8c:	d104      	bne.n	8006e98 <__swbuf_r+0x6c>
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 f927 	bl	80070e4 <_fflush_r>
 8006e96:	b988      	cbnz	r0, 8006ebc <__swbuf_r+0x90>
 8006e98:	4638      	mov	r0, r7
 8006e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <__swbuf_r+0x9c>)
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	d101      	bne.n	8006ea6 <__swbuf_r+0x7a>
 8006ea2:	68ac      	ldr	r4, [r5, #8]
 8006ea4:	e7cf      	b.n	8006e46 <__swbuf_r+0x1a>
 8006ea6:	4b09      	ldr	r3, [pc, #36]	; (8006ecc <__swbuf_r+0xa0>)
 8006ea8:	429c      	cmp	r4, r3
 8006eaa:	bf08      	it	eq
 8006eac:	68ec      	ldreq	r4, [r5, #12]
 8006eae:	e7ca      	b.n	8006e46 <__swbuf_r+0x1a>
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f81a 	bl	8006eec <__swsetup_r>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d0cb      	beq.n	8006e54 <__swbuf_r+0x28>
 8006ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ec0:	e7ea      	b.n	8006e98 <__swbuf_r+0x6c>
 8006ec2:	bf00      	nop
 8006ec4:	08007da4 	.word	0x08007da4
 8006ec8:	08007dc4 	.word	0x08007dc4
 8006ecc:	08007d84 	.word	0x08007d84

08006ed0 <__ascii_wctomb>:
 8006ed0:	b149      	cbz	r1, 8006ee6 <__ascii_wctomb+0x16>
 8006ed2:	2aff      	cmp	r2, #255	; 0xff
 8006ed4:	bf85      	ittet	hi
 8006ed6:	238a      	movhi	r3, #138	; 0x8a
 8006ed8:	6003      	strhi	r3, [r0, #0]
 8006eda:	700a      	strbls	r2, [r1, #0]
 8006edc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ee0:	bf98      	it	ls
 8006ee2:	2001      	movls	r0, #1
 8006ee4:	4770      	bx	lr
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4770      	bx	lr
	...

08006eec <__swsetup_r>:
 8006eec:	4b32      	ldr	r3, [pc, #200]	; (8006fb8 <__swsetup_r+0xcc>)
 8006eee:	b570      	push	{r4, r5, r6, lr}
 8006ef0:	681d      	ldr	r5, [r3, #0]
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	b125      	cbz	r5, 8006f02 <__swsetup_r+0x16>
 8006ef8:	69ab      	ldr	r3, [r5, #24]
 8006efa:	b913      	cbnz	r3, 8006f02 <__swsetup_r+0x16>
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f985 	bl	800720c <__sinit>
 8006f02:	4b2e      	ldr	r3, [pc, #184]	; (8006fbc <__swsetup_r+0xd0>)
 8006f04:	429c      	cmp	r4, r3
 8006f06:	d10f      	bne.n	8006f28 <__swsetup_r+0x3c>
 8006f08:	686c      	ldr	r4, [r5, #4]
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f10:	0719      	lsls	r1, r3, #28
 8006f12:	d42c      	bmi.n	8006f6e <__swsetup_r+0x82>
 8006f14:	06dd      	lsls	r5, r3, #27
 8006f16:	d411      	bmi.n	8006f3c <__swsetup_r+0x50>
 8006f18:	2309      	movs	r3, #9
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	e03e      	b.n	8006fa6 <__swsetup_r+0xba>
 8006f28:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <__swsetup_r+0xd4>)
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	d101      	bne.n	8006f32 <__swsetup_r+0x46>
 8006f2e:	68ac      	ldr	r4, [r5, #8]
 8006f30:	e7eb      	b.n	8006f0a <__swsetup_r+0x1e>
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <__swsetup_r+0xd8>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	bf08      	it	eq
 8006f38:	68ec      	ldreq	r4, [r5, #12]
 8006f3a:	e7e6      	b.n	8006f0a <__swsetup_r+0x1e>
 8006f3c:	0758      	lsls	r0, r3, #29
 8006f3e:	d512      	bpl.n	8006f66 <__swsetup_r+0x7a>
 8006f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f42:	b141      	cbz	r1, 8006f56 <__swsetup_r+0x6a>
 8006f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	d002      	beq.n	8006f52 <__swsetup_r+0x66>
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f7ff fb31 	bl	80065b4 <_free_r>
 8006f52:	2300      	movs	r3, #0
 8006f54:	6363      	str	r3, [r4, #52]	; 0x34
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	f043 0308 	orr.w	r3, r3, #8
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	b94b      	cbnz	r3, 8006f86 <__swsetup_r+0x9a>
 8006f72:	89a3      	ldrh	r3, [r4, #12]
 8006f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7c:	d003      	beq.n	8006f86 <__swsetup_r+0x9a>
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 fa09 	bl	8007398 <__smakebuf_r>
 8006f86:	89a0      	ldrh	r0, [r4, #12]
 8006f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f8c:	f010 0301 	ands.w	r3, r0, #1
 8006f90:	d00a      	beq.n	8006fa8 <__swsetup_r+0xbc>
 8006f92:	2300      	movs	r3, #0
 8006f94:	60a3      	str	r3, [r4, #8]
 8006f96:	6963      	ldr	r3, [r4, #20]
 8006f98:	425b      	negs	r3, r3
 8006f9a:	61a3      	str	r3, [r4, #24]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	b943      	cbnz	r3, 8006fb2 <__swsetup_r+0xc6>
 8006fa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fa4:	d1ba      	bne.n	8006f1c <__swsetup_r+0x30>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	0781      	lsls	r1, r0, #30
 8006faa:	bf58      	it	pl
 8006fac:	6963      	ldrpl	r3, [r4, #20]
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	e7f4      	b.n	8006f9c <__swsetup_r+0xb0>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	e7f7      	b.n	8006fa6 <__swsetup_r+0xba>
 8006fb6:	bf00      	nop
 8006fb8:	20000014 	.word	0x20000014
 8006fbc:	08007da4 	.word	0x08007da4
 8006fc0:	08007dc4 	.word	0x08007dc4
 8006fc4:	08007d84 	.word	0x08007d84

08006fc8 <abort>:
 8006fc8:	b508      	push	{r3, lr}
 8006fca:	2006      	movs	r0, #6
 8006fcc:	f000 fa54 	bl	8007478 <raise>
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f7fa fe59 	bl	8001c88 <_exit>
	...

08006fd8 <__sflush_r>:
 8006fd8:	898a      	ldrh	r2, [r1, #12]
 8006fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	4605      	mov	r5, r0
 8006fe0:	0710      	lsls	r0, r2, #28
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	d458      	bmi.n	8007098 <__sflush_r+0xc0>
 8006fe6:	684b      	ldr	r3, [r1, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dc05      	bgt.n	8006ff8 <__sflush_r+0x20>
 8006fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	dc02      	bgt.n	8006ff8 <__sflush_r+0x20>
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d0f9      	beq.n	8006ff2 <__sflush_r+0x1a>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007004:	682f      	ldr	r7, [r5, #0]
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	d032      	beq.n	8007070 <__sflush_r+0x98>
 800700a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	075a      	lsls	r2, r3, #29
 8007010:	d505      	bpl.n	800701e <__sflush_r+0x46>
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	1ac0      	subs	r0, r0, r3
 8007016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007018:	b10b      	cbz	r3, 800701e <__sflush_r+0x46>
 800701a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800701c:	1ac0      	subs	r0, r0, r3
 800701e:	2300      	movs	r3, #0
 8007020:	4602      	mov	r2, r0
 8007022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007024:	6a21      	ldr	r1, [r4, #32]
 8007026:	4628      	mov	r0, r5
 8007028:	47b0      	blx	r6
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	d106      	bne.n	800703e <__sflush_r+0x66>
 8007030:	6829      	ldr	r1, [r5, #0]
 8007032:	291d      	cmp	r1, #29
 8007034:	d82c      	bhi.n	8007090 <__sflush_r+0xb8>
 8007036:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <__sflush_r+0x108>)
 8007038:	40ca      	lsrs	r2, r1
 800703a:	07d6      	lsls	r6, r2, #31
 800703c:	d528      	bpl.n	8007090 <__sflush_r+0xb8>
 800703e:	2200      	movs	r2, #0
 8007040:	6062      	str	r2, [r4, #4]
 8007042:	04d9      	lsls	r1, r3, #19
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	6022      	str	r2, [r4, #0]
 8007048:	d504      	bpl.n	8007054 <__sflush_r+0x7c>
 800704a:	1c42      	adds	r2, r0, #1
 800704c:	d101      	bne.n	8007052 <__sflush_r+0x7a>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	b903      	cbnz	r3, 8007054 <__sflush_r+0x7c>
 8007052:	6560      	str	r0, [r4, #84]	; 0x54
 8007054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007056:	602f      	str	r7, [r5, #0]
 8007058:	2900      	cmp	r1, #0
 800705a:	d0ca      	beq.n	8006ff2 <__sflush_r+0x1a>
 800705c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__sflush_r+0x92>
 8007064:	4628      	mov	r0, r5
 8007066:	f7ff faa5 	bl	80065b4 <_free_r>
 800706a:	2000      	movs	r0, #0
 800706c:	6360      	str	r0, [r4, #52]	; 0x34
 800706e:	e7c1      	b.n	8006ff4 <__sflush_r+0x1c>
 8007070:	6a21      	ldr	r1, [r4, #32]
 8007072:	2301      	movs	r3, #1
 8007074:	4628      	mov	r0, r5
 8007076:	47b0      	blx	r6
 8007078:	1c41      	adds	r1, r0, #1
 800707a:	d1c7      	bne.n	800700c <__sflush_r+0x34>
 800707c:	682b      	ldr	r3, [r5, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d0c4      	beq.n	800700c <__sflush_r+0x34>
 8007082:	2b1d      	cmp	r3, #29
 8007084:	d001      	beq.n	800708a <__sflush_r+0xb2>
 8007086:	2b16      	cmp	r3, #22
 8007088:	d101      	bne.n	800708e <__sflush_r+0xb6>
 800708a:	602f      	str	r7, [r5, #0]
 800708c:	e7b1      	b.n	8006ff2 <__sflush_r+0x1a>
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	e7ad      	b.n	8006ff4 <__sflush_r+0x1c>
 8007098:	690f      	ldr	r7, [r1, #16]
 800709a:	2f00      	cmp	r7, #0
 800709c:	d0a9      	beq.n	8006ff2 <__sflush_r+0x1a>
 800709e:	0793      	lsls	r3, r2, #30
 80070a0:	680e      	ldr	r6, [r1, #0]
 80070a2:	bf08      	it	eq
 80070a4:	694b      	ldreq	r3, [r1, #20]
 80070a6:	600f      	str	r7, [r1, #0]
 80070a8:	bf18      	it	ne
 80070aa:	2300      	movne	r3, #0
 80070ac:	eba6 0807 	sub.w	r8, r6, r7
 80070b0:	608b      	str	r3, [r1, #8]
 80070b2:	f1b8 0f00 	cmp.w	r8, #0
 80070b6:	dd9c      	ble.n	8006ff2 <__sflush_r+0x1a>
 80070b8:	6a21      	ldr	r1, [r4, #32]
 80070ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070bc:	4643      	mov	r3, r8
 80070be:	463a      	mov	r2, r7
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b0      	blx	r6
 80070c4:	2800      	cmp	r0, #0
 80070c6:	dc06      	bgt.n	80070d6 <__sflush_r+0xfe>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	e78e      	b.n	8006ff4 <__sflush_r+0x1c>
 80070d6:	4407      	add	r7, r0
 80070d8:	eba8 0800 	sub.w	r8, r8, r0
 80070dc:	e7e9      	b.n	80070b2 <__sflush_r+0xda>
 80070de:	bf00      	nop
 80070e0:	20400001 	.word	0x20400001

080070e4 <_fflush_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	690b      	ldr	r3, [r1, #16]
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b913      	cbnz	r3, 80070f4 <_fflush_r+0x10>
 80070ee:	2500      	movs	r5, #0
 80070f0:	4628      	mov	r0, r5
 80070f2:	bd38      	pop	{r3, r4, r5, pc}
 80070f4:	b118      	cbz	r0, 80070fe <_fflush_r+0x1a>
 80070f6:	6983      	ldr	r3, [r0, #24]
 80070f8:	b90b      	cbnz	r3, 80070fe <_fflush_r+0x1a>
 80070fa:	f000 f887 	bl	800720c <__sinit>
 80070fe:	4b14      	ldr	r3, [pc, #80]	; (8007150 <_fflush_r+0x6c>)
 8007100:	429c      	cmp	r4, r3
 8007102:	d11b      	bne.n	800713c <_fflush_r+0x58>
 8007104:	686c      	ldr	r4, [r5, #4]
 8007106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0ef      	beq.n	80070ee <_fflush_r+0xa>
 800710e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007110:	07d0      	lsls	r0, r2, #31
 8007112:	d404      	bmi.n	800711e <_fflush_r+0x3a>
 8007114:	0599      	lsls	r1, r3, #22
 8007116:	d402      	bmi.n	800711e <_fflush_r+0x3a>
 8007118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800711a:	f000 f915 	bl	8007348 <__retarget_lock_acquire_recursive>
 800711e:	4628      	mov	r0, r5
 8007120:	4621      	mov	r1, r4
 8007122:	f7ff ff59 	bl	8006fd8 <__sflush_r>
 8007126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007128:	07da      	lsls	r2, r3, #31
 800712a:	4605      	mov	r5, r0
 800712c:	d4e0      	bmi.n	80070f0 <_fflush_r+0xc>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	059b      	lsls	r3, r3, #22
 8007132:	d4dd      	bmi.n	80070f0 <_fflush_r+0xc>
 8007134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007136:	f000 f908 	bl	800734a <__retarget_lock_release_recursive>
 800713a:	e7d9      	b.n	80070f0 <_fflush_r+0xc>
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <_fflush_r+0x70>)
 800713e:	429c      	cmp	r4, r3
 8007140:	d101      	bne.n	8007146 <_fflush_r+0x62>
 8007142:	68ac      	ldr	r4, [r5, #8]
 8007144:	e7df      	b.n	8007106 <_fflush_r+0x22>
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <_fflush_r+0x74>)
 8007148:	429c      	cmp	r4, r3
 800714a:	bf08      	it	eq
 800714c:	68ec      	ldreq	r4, [r5, #12]
 800714e:	e7da      	b.n	8007106 <_fflush_r+0x22>
 8007150:	08007da4 	.word	0x08007da4
 8007154:	08007dc4 	.word	0x08007dc4
 8007158:	08007d84 	.word	0x08007d84

0800715c <std>:
 800715c:	2300      	movs	r3, #0
 800715e:	b510      	push	{r4, lr}
 8007160:	4604      	mov	r4, r0
 8007162:	e9c0 3300 	strd	r3, r3, [r0]
 8007166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800716a:	6083      	str	r3, [r0, #8]
 800716c:	8181      	strh	r1, [r0, #12]
 800716e:	6643      	str	r3, [r0, #100]	; 0x64
 8007170:	81c2      	strh	r2, [r0, #14]
 8007172:	6183      	str	r3, [r0, #24]
 8007174:	4619      	mov	r1, r3
 8007176:	2208      	movs	r2, #8
 8007178:	305c      	adds	r0, #92	; 0x5c
 800717a:	f7fd fb59 	bl	8004830 <memset>
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <std+0x38>)
 8007180:	6263      	str	r3, [r4, #36]	; 0x24
 8007182:	4b05      	ldr	r3, [pc, #20]	; (8007198 <std+0x3c>)
 8007184:	62a3      	str	r3, [r4, #40]	; 0x28
 8007186:	4b05      	ldr	r3, [pc, #20]	; (800719c <std+0x40>)
 8007188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <std+0x44>)
 800718c:	6224      	str	r4, [r4, #32]
 800718e:	6323      	str	r3, [r4, #48]	; 0x30
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	080074b1 	.word	0x080074b1
 8007198:	080074d3 	.word	0x080074d3
 800719c:	0800750b 	.word	0x0800750b
 80071a0:	0800752f 	.word	0x0800752f

080071a4 <_cleanup_r>:
 80071a4:	4901      	ldr	r1, [pc, #4]	; (80071ac <_cleanup_r+0x8>)
 80071a6:	f000 b8af 	b.w	8007308 <_fwalk_reent>
 80071aa:	bf00      	nop
 80071ac:	080070e5 	.word	0x080070e5

080071b0 <__sfmoreglue>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	2268      	movs	r2, #104	; 0x68
 80071b4:	1e4d      	subs	r5, r1, #1
 80071b6:	4355      	muls	r5, r2
 80071b8:	460e      	mov	r6, r1
 80071ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071be:	f7ff fa65 	bl	800668c <_malloc_r>
 80071c2:	4604      	mov	r4, r0
 80071c4:	b140      	cbz	r0, 80071d8 <__sfmoreglue+0x28>
 80071c6:	2100      	movs	r1, #0
 80071c8:	e9c0 1600 	strd	r1, r6, [r0]
 80071cc:	300c      	adds	r0, #12
 80071ce:	60a0      	str	r0, [r4, #8]
 80071d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071d4:	f7fd fb2c 	bl	8004830 <memset>
 80071d8:	4620      	mov	r0, r4
 80071da:	bd70      	pop	{r4, r5, r6, pc}

080071dc <__sfp_lock_acquire>:
 80071dc:	4801      	ldr	r0, [pc, #4]	; (80071e4 <__sfp_lock_acquire+0x8>)
 80071de:	f000 b8b3 	b.w	8007348 <__retarget_lock_acquire_recursive>
 80071e2:	bf00      	nop
 80071e4:	20000405 	.word	0x20000405

080071e8 <__sfp_lock_release>:
 80071e8:	4801      	ldr	r0, [pc, #4]	; (80071f0 <__sfp_lock_release+0x8>)
 80071ea:	f000 b8ae 	b.w	800734a <__retarget_lock_release_recursive>
 80071ee:	bf00      	nop
 80071f0:	20000405 	.word	0x20000405

080071f4 <__sinit_lock_acquire>:
 80071f4:	4801      	ldr	r0, [pc, #4]	; (80071fc <__sinit_lock_acquire+0x8>)
 80071f6:	f000 b8a7 	b.w	8007348 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000406 	.word	0x20000406

08007200 <__sinit_lock_release>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__sinit_lock_release+0x8>)
 8007202:	f000 b8a2 	b.w	800734a <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20000406 	.word	0x20000406

0800720c <__sinit>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4604      	mov	r4, r0
 8007210:	f7ff fff0 	bl	80071f4 <__sinit_lock_acquire>
 8007214:	69a3      	ldr	r3, [r4, #24]
 8007216:	b11b      	cbz	r3, 8007220 <__sinit+0x14>
 8007218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800721c:	f7ff bff0 	b.w	8007200 <__sinit_lock_release>
 8007220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007224:	6523      	str	r3, [r4, #80]	; 0x50
 8007226:	4b13      	ldr	r3, [pc, #76]	; (8007274 <__sinit+0x68>)
 8007228:	4a13      	ldr	r2, [pc, #76]	; (8007278 <__sinit+0x6c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	62a2      	str	r2, [r4, #40]	; 0x28
 800722e:	42a3      	cmp	r3, r4
 8007230:	bf04      	itt	eq
 8007232:	2301      	moveq	r3, #1
 8007234:	61a3      	streq	r3, [r4, #24]
 8007236:	4620      	mov	r0, r4
 8007238:	f000 f820 	bl	800727c <__sfp>
 800723c:	6060      	str	r0, [r4, #4]
 800723e:	4620      	mov	r0, r4
 8007240:	f000 f81c 	bl	800727c <__sfp>
 8007244:	60a0      	str	r0, [r4, #8]
 8007246:	4620      	mov	r0, r4
 8007248:	f000 f818 	bl	800727c <__sfp>
 800724c:	2200      	movs	r2, #0
 800724e:	60e0      	str	r0, [r4, #12]
 8007250:	2104      	movs	r1, #4
 8007252:	6860      	ldr	r0, [r4, #4]
 8007254:	f7ff ff82 	bl	800715c <std>
 8007258:	68a0      	ldr	r0, [r4, #8]
 800725a:	2201      	movs	r2, #1
 800725c:	2109      	movs	r1, #9
 800725e:	f7ff ff7d 	bl	800715c <std>
 8007262:	68e0      	ldr	r0, [r4, #12]
 8007264:	2202      	movs	r2, #2
 8007266:	2112      	movs	r1, #18
 8007268:	f7ff ff78 	bl	800715c <std>
 800726c:	2301      	movs	r3, #1
 800726e:	61a3      	str	r3, [r4, #24]
 8007270:	e7d2      	b.n	8007218 <__sinit+0xc>
 8007272:	bf00      	nop
 8007274:	08007a0c 	.word	0x08007a0c
 8007278:	080071a5 	.word	0x080071a5

0800727c <__sfp>:
 800727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727e:	4607      	mov	r7, r0
 8007280:	f7ff ffac 	bl	80071dc <__sfp_lock_acquire>
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <__sfp+0x84>)
 8007286:	681e      	ldr	r6, [r3, #0]
 8007288:	69b3      	ldr	r3, [r6, #24]
 800728a:	b913      	cbnz	r3, 8007292 <__sfp+0x16>
 800728c:	4630      	mov	r0, r6
 800728e:	f7ff ffbd 	bl	800720c <__sinit>
 8007292:	3648      	adds	r6, #72	; 0x48
 8007294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	d503      	bpl.n	80072a4 <__sfp+0x28>
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	b30b      	cbz	r3, 80072e4 <__sfp+0x68>
 80072a0:	6836      	ldr	r6, [r6, #0]
 80072a2:	e7f7      	b.n	8007294 <__sfp+0x18>
 80072a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072a8:	b9d5      	cbnz	r5, 80072e0 <__sfp+0x64>
 80072aa:	4b16      	ldr	r3, [pc, #88]	; (8007304 <__sfp+0x88>)
 80072ac:	60e3      	str	r3, [r4, #12]
 80072ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072b2:	6665      	str	r5, [r4, #100]	; 0x64
 80072b4:	f000 f847 	bl	8007346 <__retarget_lock_init_recursive>
 80072b8:	f7ff ff96 	bl	80071e8 <__sfp_lock_release>
 80072bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	61a5      	str	r5, [r4, #24]
 80072c8:	2208      	movs	r2, #8
 80072ca:	4629      	mov	r1, r5
 80072cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072d0:	f7fd faae 	bl	8004830 <memset>
 80072d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072dc:	4620      	mov	r0, r4
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	3468      	adds	r4, #104	; 0x68
 80072e2:	e7d9      	b.n	8007298 <__sfp+0x1c>
 80072e4:	2104      	movs	r1, #4
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff62 	bl	80071b0 <__sfmoreglue>
 80072ec:	4604      	mov	r4, r0
 80072ee:	6030      	str	r0, [r6, #0]
 80072f0:	2800      	cmp	r0, #0
 80072f2:	d1d5      	bne.n	80072a0 <__sfp+0x24>
 80072f4:	f7ff ff78 	bl	80071e8 <__sfp_lock_release>
 80072f8:	230c      	movs	r3, #12
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	e7ee      	b.n	80072dc <__sfp+0x60>
 80072fe:	bf00      	nop
 8007300:	08007a0c 	.word	0x08007a0c
 8007304:	ffff0001 	.word	0xffff0001

08007308 <_fwalk_reent>:
 8007308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800730c:	4606      	mov	r6, r0
 800730e:	4688      	mov	r8, r1
 8007310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007314:	2700      	movs	r7, #0
 8007316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800731a:	f1b9 0901 	subs.w	r9, r9, #1
 800731e:	d505      	bpl.n	800732c <_fwalk_reent+0x24>
 8007320:	6824      	ldr	r4, [r4, #0]
 8007322:	2c00      	cmp	r4, #0
 8007324:	d1f7      	bne.n	8007316 <_fwalk_reent+0xe>
 8007326:	4638      	mov	r0, r7
 8007328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800732c:	89ab      	ldrh	r3, [r5, #12]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d907      	bls.n	8007342 <_fwalk_reent+0x3a>
 8007332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007336:	3301      	adds	r3, #1
 8007338:	d003      	beq.n	8007342 <_fwalk_reent+0x3a>
 800733a:	4629      	mov	r1, r5
 800733c:	4630      	mov	r0, r6
 800733e:	47c0      	blx	r8
 8007340:	4307      	orrs	r7, r0
 8007342:	3568      	adds	r5, #104	; 0x68
 8007344:	e7e9      	b.n	800731a <_fwalk_reent+0x12>

08007346 <__retarget_lock_init_recursive>:
 8007346:	4770      	bx	lr

08007348 <__retarget_lock_acquire_recursive>:
 8007348:	4770      	bx	lr

0800734a <__retarget_lock_release_recursive>:
 800734a:	4770      	bx	lr

0800734c <__swhatbuf_r>:
 800734c:	b570      	push	{r4, r5, r6, lr}
 800734e:	460e      	mov	r6, r1
 8007350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007354:	2900      	cmp	r1, #0
 8007356:	b096      	sub	sp, #88	; 0x58
 8007358:	4614      	mov	r4, r2
 800735a:	461d      	mov	r5, r3
 800735c:	da08      	bge.n	8007370 <__swhatbuf_r+0x24>
 800735e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	602a      	str	r2, [r5, #0]
 8007366:	061a      	lsls	r2, r3, #24
 8007368:	d410      	bmi.n	800738c <__swhatbuf_r+0x40>
 800736a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800736e:	e00e      	b.n	800738e <__swhatbuf_r+0x42>
 8007370:	466a      	mov	r2, sp
 8007372:	f000 f903 	bl	800757c <_fstat_r>
 8007376:	2800      	cmp	r0, #0
 8007378:	dbf1      	blt.n	800735e <__swhatbuf_r+0x12>
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007384:	425a      	negs	r2, r3
 8007386:	415a      	adcs	r2, r3
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	e7ee      	b.n	800736a <__swhatbuf_r+0x1e>
 800738c:	2340      	movs	r3, #64	; 0x40
 800738e:	2000      	movs	r0, #0
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	b016      	add	sp, #88	; 0x58
 8007394:	bd70      	pop	{r4, r5, r6, pc}
	...

08007398 <__smakebuf_r>:
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800739c:	079d      	lsls	r5, r3, #30
 800739e:	4606      	mov	r6, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	d507      	bpl.n	80073b4 <__smakebuf_r+0x1c>
 80073a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	2301      	movs	r3, #1
 80073ae:	6163      	str	r3, [r4, #20]
 80073b0:	b002      	add	sp, #8
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	ab01      	add	r3, sp, #4
 80073b6:	466a      	mov	r2, sp
 80073b8:	f7ff ffc8 	bl	800734c <__swhatbuf_r>
 80073bc:	9900      	ldr	r1, [sp, #0]
 80073be:	4605      	mov	r5, r0
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7ff f963 	bl	800668c <_malloc_r>
 80073c6:	b948      	cbnz	r0, 80073dc <__smakebuf_r+0x44>
 80073c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073cc:	059a      	lsls	r2, r3, #22
 80073ce:	d4ef      	bmi.n	80073b0 <__smakebuf_r+0x18>
 80073d0:	f023 0303 	bic.w	r3, r3, #3
 80073d4:	f043 0302 	orr.w	r3, r3, #2
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	e7e3      	b.n	80073a4 <__smakebuf_r+0xc>
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <__smakebuf_r+0x7c>)
 80073de:	62b3      	str	r3, [r6, #40]	; 0x28
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	6020      	str	r0, [r4, #0]
 80073e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	6163      	str	r3, [r4, #20]
 80073ee:	9b01      	ldr	r3, [sp, #4]
 80073f0:	6120      	str	r0, [r4, #16]
 80073f2:	b15b      	cbz	r3, 800740c <__smakebuf_r+0x74>
 80073f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f8d1 	bl	80075a0 <_isatty_r>
 80073fe:	b128      	cbz	r0, 800740c <__smakebuf_r+0x74>
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	89a0      	ldrh	r0, [r4, #12]
 800740e:	4305      	orrs	r5, r0
 8007410:	81a5      	strh	r5, [r4, #12]
 8007412:	e7cd      	b.n	80073b0 <__smakebuf_r+0x18>
 8007414:	080071a5 	.word	0x080071a5

08007418 <_malloc_usable_size_r>:
 8007418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800741c:	1f18      	subs	r0, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	bfbc      	itt	lt
 8007422:	580b      	ldrlt	r3, [r1, r0]
 8007424:	18c0      	addlt	r0, r0, r3
 8007426:	4770      	bx	lr

08007428 <_raise_r>:
 8007428:	291f      	cmp	r1, #31
 800742a:	b538      	push	{r3, r4, r5, lr}
 800742c:	4604      	mov	r4, r0
 800742e:	460d      	mov	r5, r1
 8007430:	d904      	bls.n	800743c <_raise_r+0x14>
 8007432:	2316      	movs	r3, #22
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800743e:	b112      	cbz	r2, 8007446 <_raise_r+0x1e>
 8007440:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007444:	b94b      	cbnz	r3, 800745a <_raise_r+0x32>
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f830 	bl	80074ac <_getpid_r>
 800744c:	462a      	mov	r2, r5
 800744e:	4601      	mov	r1, r0
 8007450:	4620      	mov	r0, r4
 8007452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007456:	f000 b817 	b.w	8007488 <_kill_r>
 800745a:	2b01      	cmp	r3, #1
 800745c:	d00a      	beq.n	8007474 <_raise_r+0x4c>
 800745e:	1c59      	adds	r1, r3, #1
 8007460:	d103      	bne.n	800746a <_raise_r+0x42>
 8007462:	2316      	movs	r3, #22
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	2001      	movs	r0, #1
 8007468:	e7e7      	b.n	800743a <_raise_r+0x12>
 800746a:	2400      	movs	r4, #0
 800746c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007470:	4628      	mov	r0, r5
 8007472:	4798      	blx	r3
 8007474:	2000      	movs	r0, #0
 8007476:	e7e0      	b.n	800743a <_raise_r+0x12>

08007478 <raise>:
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <raise+0xc>)
 800747a:	4601      	mov	r1, r0
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	f7ff bfd3 	b.w	8007428 <_raise_r>
 8007482:	bf00      	nop
 8007484:	20000014 	.word	0x20000014

08007488 <_kill_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d07      	ldr	r5, [pc, #28]	; (80074a8 <_kill_r+0x20>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	4611      	mov	r1, r2
 8007494:	602b      	str	r3, [r5, #0]
 8007496:	f7fa fbe7 	bl	8001c68 <_kill>
 800749a:	1c43      	adds	r3, r0, #1
 800749c:	d102      	bne.n	80074a4 <_kill_r+0x1c>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	b103      	cbz	r3, 80074a4 <_kill_r+0x1c>
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	bd38      	pop	{r3, r4, r5, pc}
 80074a6:	bf00      	nop
 80074a8:	20000400 	.word	0x20000400

080074ac <_getpid_r>:
 80074ac:	f7fa bbd4 	b.w	8001c58 <_getpid>

080074b0 <__sread>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	460c      	mov	r4, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	f000 f894 	bl	80075e4 <_read_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	bfab      	itete	ge
 80074c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074c2:	89a3      	ldrhlt	r3, [r4, #12]
 80074c4:	181b      	addge	r3, r3, r0
 80074c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ca:	bfac      	ite	ge
 80074cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ce:	81a3      	strhlt	r3, [r4, #12]
 80074d0:	bd10      	pop	{r4, pc}

080074d2 <__swrite>:
 80074d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d6:	461f      	mov	r7, r3
 80074d8:	898b      	ldrh	r3, [r1, #12]
 80074da:	05db      	lsls	r3, r3, #23
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	4616      	mov	r6, r2
 80074e2:	d505      	bpl.n	80074f0 <__swrite+0x1e>
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	2302      	movs	r3, #2
 80074ea:	2200      	movs	r2, #0
 80074ec:	f000 f868 	bl	80075c0 <_lseek_r>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	4628      	mov	r0, r5
 8007502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	f000 b817 	b.w	8007538 <_write_r>

0800750a <__sseek>:
 800750a:	b510      	push	{r4, lr}
 800750c:	460c      	mov	r4, r1
 800750e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007512:	f000 f855 	bl	80075c0 <_lseek_r>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	bf15      	itete	ne
 800751c:	6560      	strne	r0, [r4, #84]	; 0x54
 800751e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007526:	81a3      	strheq	r3, [r4, #12]
 8007528:	bf18      	it	ne
 800752a:	81a3      	strhne	r3, [r4, #12]
 800752c:	bd10      	pop	{r4, pc}

0800752e <__sclose>:
 800752e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007532:	f000 b813 	b.w	800755c <_close_r>
	...

08007538 <_write_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d07      	ldr	r5, [pc, #28]	; (8007558 <_write_r+0x20>)
 800753c:	4604      	mov	r4, r0
 800753e:	4608      	mov	r0, r1
 8007540:	4611      	mov	r1, r2
 8007542:	2200      	movs	r2, #0
 8007544:	602a      	str	r2, [r5, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f7fa fbc5 	bl	8001cd6 <_write>
 800754c:	1c43      	adds	r3, r0, #1
 800754e:	d102      	bne.n	8007556 <_write_r+0x1e>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	b103      	cbz	r3, 8007556 <_write_r+0x1e>
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	bd38      	pop	{r3, r4, r5, pc}
 8007558:	20000400 	.word	0x20000400

0800755c <_close_r>:
 800755c:	b538      	push	{r3, r4, r5, lr}
 800755e:	4d06      	ldr	r5, [pc, #24]	; (8007578 <_close_r+0x1c>)
 8007560:	2300      	movs	r3, #0
 8007562:	4604      	mov	r4, r0
 8007564:	4608      	mov	r0, r1
 8007566:	602b      	str	r3, [r5, #0]
 8007568:	f7fa fbd1 	bl	8001d0e <_close>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_close_r+0x1a>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_close_r+0x1a>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20000400 	.word	0x20000400

0800757c <_fstat_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_fstat_r+0x20>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	f7fa fbcc 	bl	8001d26 <_fstat>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d102      	bne.n	8007598 <_fstat_r+0x1c>
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	b103      	cbz	r3, 8007598 <_fstat_r+0x1c>
 8007596:	6023      	str	r3, [r4, #0]
 8007598:	bd38      	pop	{r3, r4, r5, pc}
 800759a:	bf00      	nop
 800759c:	20000400 	.word	0x20000400

080075a0 <_isatty_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4d06      	ldr	r5, [pc, #24]	; (80075bc <_isatty_r+0x1c>)
 80075a4:	2300      	movs	r3, #0
 80075a6:	4604      	mov	r4, r0
 80075a8:	4608      	mov	r0, r1
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7fa fbcb 	bl	8001d46 <_isatty>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_isatty_r+0x1a>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_isatty_r+0x1a>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20000400 	.word	0x20000400

080075c0 <_lseek_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_lseek_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fa fbc4 	bl	8001d5c <_lseek>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_lseek_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_lseek_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000400 	.word	0x20000400

080075e4 <_read_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	; (8007604 <_read_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fa fb52 	bl	8001c9c <_read>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_read_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_read_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000400 	.word	0x20000400

08007608 <_init>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr

08007614 <_fini>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr
