
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08007348  08007348  00017348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b0c  08007b0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b14  08007b14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001e0  08007cfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08007cfc  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbe1  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1e  00000000  00000000  0002ddf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  0002fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000307e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022723  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e2d  00000000  00000000  00053b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d24bb  00000000  00000000  00066948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047ac  00000000  00000000  00138e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007330 	.word	0x08007330

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007330 	.word	0x08007330

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f90:	b08f      	sub	sp, #60	; 0x3c
 8000f92:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f000 fdf6 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f8f6 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 f9c4 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 f998 	bl	80012d4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000fa4:	f000 f95e 	bl	8001264 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  sprintf(Prefix, "Px;");
 8000fa8:	495c      	ldr	r1, [pc, #368]	; (800111c <main+0x190>)
 8000faa:	485d      	ldr	r0, [pc, #372]	; (8001120 <main+0x194>)
 8000fac:	f003 ff46 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, Prefix, sizeof(Prefix), 100);
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	495a      	ldr	r1, [pc, #360]	; (8001120 <main+0x194>)
 8000fb6:	485b      	ldr	r0, [pc, #364]	; (8001124 <main+0x198>)
 8000fb8:	f002 feea 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(HEADER1, "PulseEncoder;");
 8000fbc:	495a      	ldr	r1, [pc, #360]	; (8001128 <main+0x19c>)
 8000fbe:	485b      	ldr	r0, [pc, #364]	; (800112c <main+0x1a0>)
 8000fc0:	f003 ff3c 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	2223      	movs	r2, #35	; 0x23
 8000fc8:	4958      	ldr	r1, [pc, #352]	; (800112c <main+0x1a0>)
 8000fca:	4856      	ldr	r0, [pc, #344]	; (8001124 <main+0x198>)
 8000fcc:	f002 fee0 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(HEADER2, "PositionMotor;");
 8000fd0:	4957      	ldr	r1, [pc, #348]	; (8001130 <main+0x1a4>)
 8000fd2:	4858      	ldr	r0, [pc, #352]	; (8001134 <main+0x1a8>)
 8000fd4:	f003 ff32 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 8000fd8:	2364      	movs	r3, #100	; 0x64
 8000fda:	2223      	movs	r2, #35	; 0x23
 8000fdc:	4955      	ldr	r1, [pc, #340]	; (8001134 <main+0x1a8>)
 8000fde:	4851      	ldr	r0, [pc, #324]	; (8001124 <main+0x198>)
 8000fe0:	f002 fed6 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(HEADER3, "RevolutionMotor;");
 8000fe4:	4954      	ldr	r1, [pc, #336]	; (8001138 <main+0x1ac>)
 8000fe6:	4855      	ldr	r0, [pc, #340]	; (800113c <main+0x1b0>)
 8000fe8:	f003 ff28 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, HEADER3, sizeof(HEADER3), 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2223      	movs	r2, #35	; 0x23
 8000ff0:	4952      	ldr	r1, [pc, #328]	; (800113c <main+0x1b0>)
 8000ff2:	484c      	ldr	r0, [pc, #304]	; (8001124 <main+0x198>)
 8000ff4:	f002 fecc 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(HEADER4, "KinematicPositionUnit;");
 8000ff8:	4951      	ldr	r1, [pc, #324]	; (8001140 <main+0x1b4>)
 8000ffa:	4852      	ldr	r0, [pc, #328]	; (8001144 <main+0x1b8>)
 8000ffc:	f003 ff1e 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8001000:	2364      	movs	r3, #100	; 0x64
 8001002:	2223      	movs	r2, #35	; 0x23
 8001004:	494f      	ldr	r1, [pc, #316]	; (8001144 <main+0x1b8>)
 8001006:	4847      	ldr	r0, [pc, #284]	; (8001124 <main+0x198>)
 8001008:	f002 fec2 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(HEADER5, "KinematicSpeed[Rpm];");
 800100c:	494e      	ldr	r1, [pc, #312]	; (8001148 <main+0x1bc>)
 800100e:	484f      	ldr	r0, [pc, #316]	; (800114c <main+0x1c0>)
 8001010:	f003 ff14 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, HEADER5, sizeof(HEADER5), 100);
 8001014:	2364      	movs	r3, #100	; 0x64
 8001016:	2223      	movs	r2, #35	; 0x23
 8001018:	494c      	ldr	r1, [pc, #304]	; (800114c <main+0x1c0>)
 800101a:	4842      	ldr	r0, [pc, #264]	; (8001124 <main+0x198>)
 800101c:	f002 feb8 	bl	8003d90 <HAL_UART_Transmit>
  sprintf(Sufix, "Sx;\n");
 8001020:	494b      	ldr	r1, [pc, #300]	; (8001150 <main+0x1c4>)
 8001022:	484c      	ldr	r0, [pc, #304]	; (8001154 <main+0x1c8>)
 8001024:	f003 ff0a 	bl	8004e3c <siprintf>
  HAL_UART_Transmit(&huart2, Sufix, sizeof(Sufix), 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2203      	movs	r2, #3
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <main+0x1c8>)
 800102e:	483d      	ldr	r0, [pc, #244]	; (8001124 <main+0x198>)
 8001030:	f002 feae 	bl	8003d90 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f000 fe16 	bl	8001c68 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	    /* USER CODE END WHILE */

	  	 if(KinematicSpeedRPSold == KinematicSpeedRPS)
 800103c:	4b46      	ldr	r3, [pc, #280]	; (8001158 <main+0x1cc>)
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <main+0x1d0>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	eeb4 7a67 	vcmp.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d110      	bne.n	8001074 <main+0xe8>
	  	 {
	  		KinematicSpeedRPS = 0.0;
 8001052:	4b42      	ldr	r3, [pc, #264]	; (800115c <main+0x1d0>)
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	  		KinematicSpeedRPM = 0.0;
 800105a:	4b41      	ldr	r3, [pc, #260]	; (8001160 <main+0x1d4>)
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
	  		KinematicSpeedUnit = 0.0;
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <main+0x1d8>)
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	601a      	str	r2, [r3, #0]

	  		KinematicSpeedRPSold = KinematicSpeedRPS;
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <main+0x1d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <main+0x1cc>)
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e003      	b.n	800107c <main+0xf0>
	  	 }
	  	 else
	  	 {
	  		KinematicSpeedRPSold = KinematicSpeedRPS;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <main+0x1d0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a37      	ldr	r2, [pc, #220]	; (8001158 <main+0x1cc>)
 800107a:	6013      	str	r3, [r2, #0]
	  	 }

	     //TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6);

	     sprintf(MSG, "Px;%d;%d;%.3f;%.3f;%.3f;%.3f;%.3f;Sx\r",
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <main+0x1dc>)
 800107e:	681e      	ldr	r6, [r3, #0]
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <main+0x1e0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <main+0x1e4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa7c 	bl	8000588 <__aeabi_f2d>
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4b37      	ldr	r3, [pc, #220]	; (8001174 <main+0x1e8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa75 	bl	8000588 <__aeabi_f2d>
 800109e:	4680      	mov	r8, r0
 80010a0:	4689      	mov	r9, r1
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <main+0x1d0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa6e 	bl	8000588 <__aeabi_f2d>
 80010ac:	4682      	mov	sl, r0
 80010ae:	468b      	mov	fp, r1
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <main+0x1d4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa67 	bl	8000588 <__aeabi_f2d>
 80010ba:	e9c7 0100 	strd	r0, r1, [r7]
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <main+0x1d8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa60 	bl	8000588 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010d0:	ed97 7b00 	vldr	d7, [r7]
 80010d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80010d8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80010dc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010e0:	e9cd 4500 	strd	r4, r5, [sp]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4632      	mov	r2, r6
 80010e8:	4923      	ldr	r1, [pc, #140]	; (8001178 <main+0x1ec>)
 80010ea:	4824      	ldr	r0, [pc, #144]	; (800117c <main+0x1f0>)
 80010ec:	f003 fea6 	bl	8004e3c <siprintf>
				 PositionMotor,
				 KinematicPositionUnit,
				 KinematicSpeedRPS,
				 KinematicSpeedRPM,
				 KinematicSpeedUnit);
	 		 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 80010f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	4921      	ldr	r1, [pc, #132]	; (800117c <main+0x1f0>)
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <main+0x198>)
 80010fa:	f002 fe49 	bl	8003d90 <HAL_UART_Transmit>
	 	 sprintf(CR,"\n");   											//Indispensable for Send Value without error to row empty
 80010fe:	4920      	ldr	r1, [pc, #128]	; (8001180 <main+0x1f4>)
 8001100:	4820      	ldr	r0, [pc, #128]	; (8001184 <main+0x1f8>)
 8001102:	f003 fe9b 	bl	8004e3c <siprintf>
	 		 HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);        //Indispensable for Send Value without error to row empty
 8001106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110a:	2202      	movs	r2, #2
 800110c:	491d      	ldr	r1, [pc, #116]	; (8001184 <main+0x1f8>)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <main+0x198>)
 8001110:	f002 fe3e 	bl	8003d90 <HAL_UART_Transmit>
	    	 KinematicSpeedRPSold = KinematicSpeedRPS;
	    	 //KinematicSpeedRPMold = KinematicSpeedRPM;
	     	 }
	     */

		 HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f000 fda7 	bl	8001c68 <HAL_Delay>
	  	 if(KinematicSpeedRPSold == KinematicSpeedRPS)
 800111a:	e78f      	b.n	800103c <main+0xb0>
 800111c:	08007348 	.word	0x08007348
 8001120:	200002f4 	.word	0x200002f4
 8001124:	20000244 	.word	0x20000244
 8001128:	0800734c 	.word	0x0800734c
 800112c:	200002fc 	.word	0x200002fc
 8001130:	0800735c 	.word	0x0800735c
 8001134:	20000320 	.word	0x20000320
 8001138:	0800736c 	.word	0x0800736c
 800113c:	20000344 	.word	0x20000344
 8001140:	08007380 	.word	0x08007380
 8001144:	20000368 	.word	0x20000368
 8001148:	08007398 	.word	0x08007398
 800114c:	2000038c 	.word	0x2000038c
 8001150:	080073b0 	.word	0x080073b0
 8001154:	200002f8 	.word	0x200002f8
 8001158:	200003cc 	.word	0x200003cc
 800115c:	200003c4 	.word	0x200003c4
 8001160:	200003c8 	.word	0x200003c8
 8001164:	200003d0 	.word	0x200003d0
 8001168:	20000288 	.word	0x20000288
 800116c:	200003b8 	.word	0x200003b8
 8001170:	200003b4 	.word	0x200003b4
 8001174:	200003c0 	.word	0x200003c0
 8001178:	080073b8 	.word	0x080073b8
 800117c:	2000028c 	.word	0x2000028c
 8001180:	080073e0 	.word	0x080073e0
 8001184:	200002f0 	.word	0x200002f0

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2234      	movs	r2, #52	; 0x34
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f003 f9de 	bl	8004558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <SystemClock_Config+0xd4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <SystemClock_Config+0xd4>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <SystemClock_Config+0xd4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c8:	2300      	movs	r3, #0
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemClock_Config+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <SystemClock_Config+0xd8>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SystemClock_Config+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2310      	movs	r3, #16
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f4:	2302      	movs	r3, #2
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f8:	2300      	movs	r3, #0
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011fc:	2310      	movs	r3, #16
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001200:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001206:	2304      	movs	r3, #4
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fe50 	bl	8002ebc <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001222:	f000 facb 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122a:	2302      	movs	r3, #2
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001232:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001236:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2102      	movs	r1, #2
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fa30 	bl	80026a8 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800124e:	f000 fab5 	bl	80017bc <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_TIM6_Init+0x68>)
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <MX_TIM6_Init+0x6c>)
 8001276:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <MX_TIM6_Init+0x68>)
 800127a:	2229      	movs	r2, #41	; 0x29
 800127c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_TIM6_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_TIM6_Init+0x68>)
 8001286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_TIM6_Init+0x68>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <MX_TIM6_Init+0x68>)
 8001294:	f002 f96e 	bl	8003574 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800129e:	f000 fa8d 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM6_Init+0x68>)
 80012b0:	f002 fbb6 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 fa7f 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Start Timer
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM6_Init+0x68>)
 80012c0:	f002 fa48 	bl	8003754 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200001fc 	.word	0x200001fc
 80012d0:	40001000 	.word	0x40001000

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200; //115200 Baudrate
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f002 fc66 	bl	8003bdc <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 fa51 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000244 	.word	0x20000244
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a5a      	ldr	r2, [pc, #360]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a53      	ldr	r2, [pc, #332]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <MX_GPIO_Init+0x188>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <MX_GPIO_Init+0x188>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <MX_GPIO_Init+0x188>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <MX_GPIO_Init+0x188>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <MX_GPIO_Init+0x188>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80013b4:	483f      	ldr	r0, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x18c>)
 80013b6:	f001 f905 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80013c0:	483d      	ldr	r0, [pc, #244]	; (80014b8 <MX_GPIO_Init+0x190>)
 80013c2:	f001 f8ff 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	483c      	ldr	r0, [pc, #240]	; (80014bc <MX_GPIO_Init+0x194>)
 80013cc:	f001 f8fa 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4835      	ldr	r0, [pc, #212]	; (80014bc <MX_GPIO_Init+0x194>)
 80013e8:	f000 fda2 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 80013ec:	2303      	movs	r3, #3
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013f0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	482c      	ldr	r0, [pc, #176]	; (80014b4 <MX_GPIO_Init+0x18c>)
 8001402:	f000 fd95 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 8001406:	f44f 7348 	mov.w	r3, #800	; 0x320
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <MX_GPIO_Init+0x18c>)
 8001420:	f000 fd86 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 8001424:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <MX_GPIO_Init+0x190>)
 800143e:	f000 fd77 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 8001442:	2380      	movs	r3, #128	; 0x80
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_GPIO_Init+0x194>)
 800145a:	f000 fd69 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 800145e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4810      	ldr	r0, [pc, #64]	; (80014b4 <MX_GPIO_Init+0x18c>)
 8001474:	f000 fd5c 	bl	8001f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	2006      	movs	r0, #6
 800147e:	f000 fd07 	bl	8001e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001482:	2006      	movs	r0, #6
 8001484:	f000 fd30 	bl	8001ee8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2007      	movs	r0, #7
 800148e:	f000 fcff 	bl	8001e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001492:	2007      	movs	r0, #7
 8001494:	f000 fd28 	bl	8001ee8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	f000 fcf7 	bl	8001e90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a2:	2028      	movs	r0, #40	; 0x28
 80014a4:	f000 fd20 	bl	8001ee8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800

080014c0 <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 80014c0:	b598      	push	{r3, r4, r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80014c4:	2102      	movs	r1, #2
 80014c6:	4808      	ldr	r0, [pc, #32]	; (80014e8 <rot_get_state+0x28>)
 80014c8:	f001 f856 	bl	8002578 <HAL_GPIO_ReadPin>
 80014cc:	4603      	mov	r3, r0
 80014ce:	005b      	lsls	r3, r3, #1
                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 80014d0:	b25c      	sxtb	r4, r3
 80014d2:	2101      	movs	r1, #1
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <rot_get_state+0x28>)
 80014d6:	f001 f84f 	bl	8002578 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4323      	orrs	r3, r4
 80014e0:	b25b      	sxtb	r3, r3
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80014e2:	b2db      	uxtb	r3, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd98      	pop	{r3, r4, r7, pc}
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_GPIO_EXTI_Callback>:
/* Use Interrupt callback for determinate the count encoder and direction
 * The Encoder Have a 2048 pulse/rot, in this implementation do it increment counter POSITION four time at impulse
 * Example 1rev/8192 pulse
 * PIN ENCODER A0 COUNT AND A1 DIRECTION
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direct_Pin) {
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_EXTI_Callback+0x18>
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	f040 8082 	bne.w	8001608 <HAL_GPIO_EXTI_Callback+0x11c>

		rot_new_state = rot_get_state();
 8001504:	f7ff ffdc 	bl	80014c0 <rot_get_state>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 800150e:	701a      	strb	r2, [r3, #0]

		//DBG("%d:%d", rot_old_state, rot_new_state);

		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b03      	cmp	r3, #3
 8001516:	d109      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x40>
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d105      	bne.n	800152c <HAL_GPIO_EXTI_Callback+0x40>
			EncoderCount++;
 8001520:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e060      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 800152c:	4b39      	ldr	r3, [pc, #228]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d109      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x5c>
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_GPIO_EXTI_Callback+0x5c>
			EncoderCount++;
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a35      	ldr	r2, [pc, #212]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e052      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x78>
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_GPIO_EXTI_Callback+0x78>
			EncoderCount++;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e044      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d109      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x94>
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d105      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0x94>
			EncoderCount++;
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e036      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d109      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0xb0>
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_GPIO_EXTI_Callback+0xb0>
			EncoderCount--;
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a20      	ldr	r2, [pc, #128]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e028      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d109      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0xcc>
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_GPIO_EXTI_Callback+0xcc>
			EncoderCount--;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01a      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xe8>
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d105      	bne.n	80015d4 <HAL_GPIO_EXTI_Callback+0xe8>
			EncoderCount--;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00c      	b.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d108      	bne.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d104      	bne.n	80015ee <HAL_GPIO_EXTI_Callback+0x102>
			EncoderCount--;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015ec:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_GPIO_EXTI_Callback+0x124>)
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_GPIO_EXTI_Callback+0x128>)
 80015f4:	701a      	strb	r2, [r3, #0]
		Calculate_Rotation(EncoderPulse,RevoluctionFactor);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_GPIO_EXTI_Callback+0x130>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_GPIO_EXTI_Callback+0x134>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f000 f810 	bl	8001628 <Calculate_Rotation>
	}
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200003af 	.word	0x200003af
 8001614:	200003b0 	.word	0x200003b0
 8001618:	20000288 	.word	0x20000288
 800161c:	20000000 	.word	0x20000000
 8001620:	20000002 	.word	0x20000002
 8001624:	00000000 	.word	0x00000000

08001628 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	4613      	mov	r3, r2
 8001636:	80bb      	strh	r3, [r7, #4]
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	60fb      	str	r3, [r7, #12]
EncoderPosition = EncoderCount/4.0;   // Single Event Encoder 1*4 in Single Counter
 800163e:	4b50      	ldr	r3, [pc, #320]	; (8001780 <Calculate_Rotation+0x158>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff8e 	bl	8000564 <__aeabi_i2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <Calculate_Rotation+0x15c>)
 800164e:	f7ff f91d 	bl	800088c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fa9d 	bl	8000b98 <__aeabi_d2iz>
 800165e:	4603      	mov	r3, r0
 8001660:	4a49      	ldr	r2, [pc, #292]	; (8001788 <Calculate_Rotation+0x160>)
 8001662:	6013      	str	r3, [r2, #0]
EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 8001664:	4b48      	ldr	r3, [pc, #288]	; (8001788 <Calculate_Rotation+0x160>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001670:	4b46      	ldr	r3, [pc, #280]	; (800178c <Calculate_Rotation+0x164>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <Calculate_Rotation+0x164>)
 8001678:	edd3 6a00 	vldr	s13, [r3]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	ee07 3a90 	vmov	s15, r3
 8001682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <Calculate_Rotation+0x168>)
 800168c:	edc3 7a00 	vstr	s15, [r3]
KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <Calculate_Rotation+0x168>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <Calculate_Rotation+0x16c>)
 80016a6:	edc3 7a00 	vstr	s15, [r3]

//IncrementSpeedCheck++;
TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6); // Get current time (microseconds)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <Calculate_Rotation+0x170>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <Calculate_Rotation+0x174>)
 80016b4:	801a      	strh	r2, [r3, #0]

if(TM6_Currentvalue >= TM6_OldValue)
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <Calculate_Rotation+0x174>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <Calculate_Rotation+0x178>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d34e      	bcc.n	8001764 <Calculate_Rotation+0x13c>
{
	TM6_DiffCaunter = (TM6_Currentvalue - TM6_OldValue); // Calculate time from count to count
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <Calculate_Rotation+0x174>)
 80016c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <Calculate_Rotation+0x178>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a33      	ldr	r2, [pc, #204]	; (80017a4 <Calculate_Rotation+0x17c>)
 80016d6:	6013      	str	r3, [r2, #0]
	KinematicSpeedRPS = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <Calculate_Rotation+0x17c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff31 	bl	8000544 <__aeabi_ui2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	a124      	add	r1, pc, #144	; (adr r1, 8001778 <Calculate_Rotation+0x150>)
 80016e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016ec:	f7ff f8ce 	bl	800088c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4614      	mov	r4, r2
 80016f6:	461d      	mov	r5, r3
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fa67 	bl	8000be8 <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <Calculate_Rotation+0x180>)
 800171e:	6013      	str	r3, [r2, #0]
	KinematicSpeedRPM = (KinematicSpeedRPS * 60.0); //Calculate RPM Speed
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <Calculate_Rotation+0x180>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80017ac <Calculate_Rotation+0x184>
 800172a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <Calculate_Rotation+0x188>)
 8001730:	edc3 7a00 	vstr	s15, [r3]
	KinematicSpeedUnit = (KinematicSpeedRPM * RevoluctionFactorSet);
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <Calculate_Rotation+0x188>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <Calculate_Rotation+0x18c>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
	TM6_OldValue = TM6_Currentvalue; // Save to old value
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <Calculate_Rotation+0x174>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	461a      	mov	r2, r3
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <Calculate_Rotation+0x178>)
 8001758:	601a      	str	r2, [r3, #0]
	//IncrementSpeedCheckOld = IncrementSpeedCheck;
	//IncrementSpeedCheck++;
	//TM6_Currentvalue = 0; //Reset Current Value Counter
	HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 800175a:	2120      	movs	r1, #32
 800175c:	4816      	ldr	r0, [pc, #88]	; (80017b8 <Calculate_Rotation+0x190>)
 800175e:	f000 ff63 	bl	8002628 <HAL_GPIO_TogglePin>
		//KinematicSpeed = 0;
	}

   }

}
 8001762:	e005      	b.n	8001770 <Calculate_Rotation+0x148>
	TM6_OldValue = TM6_Currentvalue;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <Calculate_Rotation+0x174>)
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	461a      	mov	r2, r3
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <Calculate_Rotation+0x178>)
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	00000000 	.word	0x00000000
 800177c:	412e8480 	.word	0x412e8480
 8001780:	20000288 	.word	0x20000288
 8001784:	40100000 	.word	0x40100000
 8001788:	200003b8 	.word	0x200003b8
 800178c:	200003bc 	.word	0x200003bc
 8001790:	200003b4 	.word	0x200003b4
 8001794:	200003c0 	.word	0x200003c0
 8001798:	200001fc 	.word	0x200001fc
 800179c:	200003dc 	.word	0x200003dc
 80017a0:	200003d8 	.word	0x200003d8
 80017a4:	200003d4 	.word	0x200003d4
 80017a8:	200003c4 	.word	0x200003c4
 80017ac:	42700000 	.word	0x42700000
 80017b0:	200003c8 	.word	0x200003c8
 80017b4:	200003d0 	.word	0x200003d0
 80017b8:	40020000 	.word	0x40020000

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>

080017c6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_MspInit+0x4c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_MspInit+0x4c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800181a:	2007      	movs	r0, #7
 800181c:	f000 fb18 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_Base_MspInit+0x3c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10d      	bne.n	800185a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001848:	f043 0310 	orr.w	r3, r3, #16
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40001000 	.word	0x40001000
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0x84>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12b      	bne.n	80018ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_UART_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <HAL_UART_MspInit+0x88>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_UART_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <HAL_UART_MspInit+0x88>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_UART_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ca:	230c      	movs	r3, #12
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018da:	2307      	movs	r3, #7
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_UART_MspInit+0x8c>)
 80018e6:	f000 fb23 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	; 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40004400 	.word	0x40004400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020000 	.word	0x40020000

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 f96c 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8001958:	2001      	movs	r0, #1
 800195a:	f000 fe8d 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 8001966:	2002      	movs	r0, #2
 8001968:	f000 fe86 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001974:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001978:	f000 fe7e 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return 1;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_kill>:

int _kill(int pid, int sig)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800199a:	f002 fdb3 	bl	8004504 <__errno>
 800199e:	4603      	mov	r3, r0
 80019a0:	2216      	movs	r2, #22
 80019a2:	601a      	str	r2, [r3, #0]
  return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_exit>:

void _exit (int status)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe7 	bl	8001990 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019c2:	e7fe      	b.n	80019c2 <_exit+0x12>

080019c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e00a      	b.n	80019ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d6:	f3af 8000 	nop.w
 80019da:	4601      	mov	r1, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	60ba      	str	r2, [r7, #8]
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf0      	blt.n	80019d6 <_read+0x12>
  }

  return len;
 80019f4:	687b      	ldr	r3, [r7, #4]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e009      	b.n	8001a24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf1      	blt.n	8001a10 <_write+0x12>
  }
  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_close>:

int _close(int file)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <_isatty>:

int _isatty(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa8:	4a14      	ldr	r2, [pc, #80]	; (8001afc <_sbrk+0x5c>)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_sbrk+0x60>)
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <_sbrk+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d102      	bne.n	8001ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x64>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <_sbrk+0x68>)
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d207      	bcs.n	8001ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad0:	f002 fd18 	bl	8004504 <__errno>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	e009      	b.n	8001af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <_sbrk+0x64>)
 8001af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20020000 	.word	0x20020000
 8001b00:	00000400 	.word	0x00000400
 8001b04:	200003e0 	.word	0x200003e0
 8001b08:	200003f8 	.word	0x200003f8

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b34:	480d      	ldr	r0, [pc, #52]	; (8001b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b36:	490e      	ldr	r1, [pc, #56]	; (8001b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b4c:	4c0b      	ldr	r4, [pc, #44]	; (8001b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b5a:	f7ff ffd7 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f002 fcd7 	bl	8004510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7ff fa13 	bl	8000f8c <main>
  bx  lr    
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b74:	08007b1c 	.word	0x08007b1c
  ldr r2, =_sbss
 8001b78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b7c:	200003f8 	.word	0x200003f8

08001b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_Init+0x40>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_Init+0x40>)
 8001b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x40>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f94f 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fe10 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f996 	bl	8001f18 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f944 	bl	8001e90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	2000000c 	.word	0x2000000c
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	200003e4 	.word	0x200003e4

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200003e4 	.word	0x200003e4

08001c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d005      	beq.n	8001c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_Delay+0x44>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c8e:	bf00      	nop
 8001c90:	f7ff ffde 	bl	8001c50 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d8f7      	bhi.n	8001c90 <HAL_Delay+0x28>
  {
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <__NVIC_EnableIRQ+0x38>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000e100 	.word	0xe000e100

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b07      	cmp	r3, #7
 8001e5c:	d00f      	beq.n	8001e7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d00c      	beq.n	8001e7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d009      	beq.n	8001e7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d006      	beq.n	8001e7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d003      	beq.n	8001e7e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e76:	2190      	movs	r1, #144	; 0x90
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e7a:	f7ff fca4 	bl	80017c6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff16 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	080073e4 	.word	0x080073e4

08001e90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d903      	bls.n	8001eb0 <HAL_NVIC_SetPriority+0x20>
 8001ea8:	21a8      	movs	r1, #168	; 0xa8
 8001eaa:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <HAL_NVIC_SetPriority+0x54>)
 8001eac:	f7ff fc8b 	bl	80017c6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	d903      	bls.n	8001ebe <HAL_NVIC_SetPriority+0x2e>
 8001eb6:	21a9      	movs	r1, #169	; 0xa9
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <HAL_NVIC_SetPriority+0x54>)
 8001eba:	f7ff fc84 	bl	80017c6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebe:	f7ff ff1b 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7ff ff6b 	bl	8001da4 <NVIC_EncodePriority>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff3a 	bl	8001d50 <__NVIC_SetPriority>
}
 8001edc:	bf00      	nop
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	080073e4 	.word	0x080073e4

08001ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	da03      	bge.n	8001f02 <HAL_NVIC_EnableIRQ+0x1a>
 8001efa:	21bc      	movs	r1, #188	; 0xbc
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_NVIC_EnableIRQ+0x2c>)
 8001efe:	f7ff fc62 	bl	80017c6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff04 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	080073e4 	.word	0x080073e4

08001f18 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff73 	bl	8001e0c <SysTick_Config>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a37      	ldr	r2, [pc, #220]	; (8002028 <HAL_GPIO_Init+0xf8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01f      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a36      	ldr	r2, [pc, #216]	; (800202c <HAL_GPIO_Init+0xfc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01b      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_GPIO_Init+0x100>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d017      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_GPIO_Init+0x104>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a33      	ldr	r2, [pc, #204]	; (8002038 <HAL_GPIO_Init+0x108>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00f      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a32      	ldr	r2, [pc, #200]	; (800203c <HAL_GPIO_Init+0x10c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00b      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_GPIO_Init+0x110>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <HAL_GPIO_Init+0x114>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x5e>
 8001f86:	21ac      	movs	r1, #172	; 0xac
 8001f88:	482f      	ldr	r0, [pc, #188]	; (8002048 <HAL_GPIO_Init+0x118>)
 8001f8a:	f7ff fc1c 	bl	80017c6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x74>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x7c>
 8001fa4:	21ad      	movs	r1, #173	; 0xad
 8001fa6:	4828      	ldr	r0, [pc, #160]	; (8002048 <HAL_GPIO_Init+0x118>)
 8001fa8:	f7ff fc0d 	bl	80017c6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d035      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d031      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b11      	cmp	r3, #17
 8001fc2:	d02d      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d029      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d025      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fdc:	d020      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fe6:	d01b      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001ff0:	d016      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001ffa:	d011      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002004:	d00c      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
 8002018:	21ae      	movs	r1, #174	; 0xae
 800201a:	480b      	ldr	r0, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x118>)
 800201c:	f7ff fbd3 	bl	80017c6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	e289      	b.n	800253a <HAL_GPIO_Init+0x60a>
 8002026:	bf00      	nop
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	0800745c 	.word	0x0800745c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8265 	bne.w	8002534 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d144      	bne.n	800210c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00f      	beq.n	80020aa <HAL_GPIO_Init+0x17a>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d00b      	beq.n	80020aa <HAL_GPIO_Init+0x17a>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d007      	beq.n	80020aa <HAL_GPIO_Init+0x17a>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x17a>
 80020a2:	21c0      	movs	r1, #192	; 0xc0
 80020a4:	4831      	ldr	r0, [pc, #196]	; (800216c <HAL_GPIO_Init+0x23c>)
 80020a6:	f7ff fb8e 	bl	80017c6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d02b      	beq.n	8002170 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_GPIO_Init+0x208>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d007      	beq.n	8002138 <HAL_GPIO_Init+0x208>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x208>
 8002130:	21d1      	movs	r1, #209	; 0xd1
 8002132:	480e      	ldr	r0, [pc, #56]	; (800216c <HAL_GPIO_Init+0x23c>)
 8002134:	f7ff fb47 	bl	80017c6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x240>
 800216a:	bf00      	nop
 800216c:	0800745c 	.word	0x0800745c
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b02      	cmp	r3, #2
 800217a:	f040 810c 	bne.w	8002396 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80e3 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b09      	cmp	r3, #9
 800218e:	f000 80de 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 80d9 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80d4 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80cf 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80ca 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f000 80c5 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f000 80c0 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f000 80bb 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	f000 80b6 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f000 80b1 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	f000 80ac 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	f000 80a7 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	2b04      	cmp	r3, #4
 8002206:	f000 80a2 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b04      	cmp	r3, #4
 8002210:	f000 809d 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b05      	cmp	r3, #5
 800221a:	f000 8098 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b05      	cmp	r3, #5
 8002224:	f000 8093 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b09      	cmp	r3, #9
 800222e:	f000 808e 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2b06      	cmp	r3, #6
 8002238:	f000 8089 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b09      	cmp	r3, #9
 8002242:	f000 8084 	beq.w	800234e <HAL_GPIO_Init+0x41e>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b07      	cmp	r3, #7
 800224c:	d07f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b07      	cmp	r3, #7
 8002254:	d07b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b07      	cmp	r3, #7
 800225c:	d077      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d073      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b08      	cmp	r3, #8
 800226c:	d06f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b08      	cmp	r3, #8
 8002274:	d06b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b09      	cmp	r3, #9
 800227c:	d067      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b09      	cmp	r3, #9
 8002284:	d063      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d05f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b0a      	cmp	r3, #10
 8002294:	d05b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b0b      	cmp	r3, #11
 800229c:	d057      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d053      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d04f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b0d      	cmp	r3, #13
 80022b4:	d04b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d047      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b05      	cmp	r3, #5
 80022c4:	d043      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d03f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d03b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d037      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d033      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d02f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d02b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d027      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b07      	cmp	r3, #7
 8002304:	d023      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b07      	cmp	r3, #7
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b07      	cmp	r3, #7
 8002314:	d01b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b07      	cmp	r3, #7
 800231c:	d017      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d00f      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d00b      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b0a      	cmp	r3, #10
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x41e>
 8002346:	21de      	movs	r1, #222	; 0xde
 8002348:	4880      	ldr	r0, [pc, #512]	; (800254c <HAL_GPIO_Init+0x61c>)
 800234a:	f7ff fa3c 	bl	80017c6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80ae 	beq.w	8002534 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_GPIO_Init+0x620>)
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_GPIO_Init+0x620>)
 80023e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e6:	6453      	str	r3, [r2, #68]	; 0x44
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_GPIO_Init+0x620>)
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f4:	4a57      	ldr	r2, [pc, #348]	; (8002554 <HAL_GPIO_Init+0x624>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <HAL_GPIO_Init+0x628>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d025      	beq.n	800246c <HAL_GPIO_Init+0x53c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a4e      	ldr	r2, [pc, #312]	; (800255c <HAL_GPIO_Init+0x62c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d01f      	beq.n	8002468 <HAL_GPIO_Init+0x538>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a4d      	ldr	r2, [pc, #308]	; (8002560 <HAL_GPIO_Init+0x630>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d019      	beq.n	8002464 <HAL_GPIO_Init+0x534>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_GPIO_Init+0x634>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x530>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a4b      	ldr	r2, [pc, #300]	; (8002568 <HAL_GPIO_Init+0x638>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x52c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a4a      	ldr	r2, [pc, #296]	; (800256c <HAL_GPIO_Init+0x63c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x528>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x640>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x524>
 8002450:	2306      	movs	r3, #6
 8002452:	e00c      	b.n	800246e <HAL_GPIO_Init+0x53e>
 8002454:	2307      	movs	r3, #7
 8002456:	e00a      	b.n	800246e <HAL_GPIO_Init+0x53e>
 8002458:	2305      	movs	r3, #5
 800245a:	e008      	b.n	800246e <HAL_GPIO_Init+0x53e>
 800245c:	2304      	movs	r3, #4
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x53e>
 8002460:	2303      	movs	r3, #3
 8002462:	e004      	b.n	800246e <HAL_GPIO_Init+0x53e>
 8002464:	2302      	movs	r3, #2
 8002466:	e002      	b.n	800246e <HAL_GPIO_Init+0x53e>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <HAL_GPIO_Init+0x53e>
 800246c:	2300      	movs	r3, #0
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	f002 0203 	and.w	r2, r2, #3
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	4093      	lsls	r3, r2
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247e:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x624>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248c:	4b39      	ldr	r3, [pc, #228]	; (8002574 <HAL_GPIO_Init+0x644>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b0:	4a30      	ldr	r2, [pc, #192]	; (8002574 <HAL_GPIO_Init+0x644>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <HAL_GPIO_Init+0x644>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x644>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_GPIO_Init+0x644>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002504:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_GPIO_Init+0x644>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250a:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <HAL_GPIO_Init+0x644>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_GPIO_Init+0x644>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	3301      	adds	r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	f67f ad85 	bls.w	800204c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	0800745c 	.word	0x0800745c
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40021400 	.word	0x40021400
 8002570:	40021800 	.word	0x40021800
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_GPIO_ReadPin+0x1c>
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_GPIO_ReadPin+0x26>
 8002594:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002598:	4809      	ldr	r0, [pc, #36]	; (80025c0 <HAL_GPIO_ReadPin+0x48>)
 800259a:	f7ff f914 	bl	80017c6 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e001      	b.n	80025b4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	0800745c 	.word	0x0800745c

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_GPIO_WritePin+0x20>
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <HAL_GPIO_WritePin+0x2a>
 80025e4:	f240 119d 	movw	r1, #413	; 0x19d
 80025e8:	480e      	ldr	r0, [pc, #56]	; (8002624 <HAL_GPIO_WritePin+0x60>)
 80025ea:	f7ff f8ec 	bl	80017c6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80025ee:	787b      	ldrb	r3, [r7, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_GPIO_WritePin+0x40>
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d004      	beq.n	8002604 <HAL_GPIO_WritePin+0x40>
 80025fa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80025fe:	4809      	ldr	r0, [pc, #36]	; (8002624 <HAL_GPIO_WritePin+0x60>)
 8002600:	f7ff f8e1 	bl	80017c6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002604:	787b      	ldrb	r3, [r7, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002610:	e003      	b.n	800261a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	041a      	lsls	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	619a      	str	r2, [r3, #24]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	0800745c 	.word	0x0800745c

08002628 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_GPIO_TogglePin+0x1c>
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	041b      	lsls	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_GPIO_TogglePin+0x26>
 8002644:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <HAL_GPIO_TogglePin+0x4c>)
 800264a:	f7ff f8bc 	bl	80017c6 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002654:	887a      	ldrh	r2, [r7, #2]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	041a      	lsls	r2, r3, #16
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43d9      	mvns	r1, r3
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	400b      	ands	r3, r1
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800745c 	.word	0x0800745c

08002678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe ff28 	bl	80014ec <HAL_GPIO_EXTI_Callback>
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e18c      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_RCC_ClockConfig+0x24>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d904      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x2e>
 80026cc:	f240 215a 	movw	r1, #602	; 0x25a
 80026d0:	4887      	ldr	r0, [pc, #540]	; (80028f0 <HAL_RCC_ClockConfig+0x248>)
 80026d2:	f7ff f878 	bl	80017c6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d031      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d02e      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d02b      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d028      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d025      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b05      	cmp	r3, #5
 80026f8:	d022      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d01f      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b07      	cmp	r3, #7
 8002704:	d01c      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d019      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b09      	cmp	r3, #9
 8002710:	d016      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b0a      	cmp	r3, #10
 8002716:	d013      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b0b      	cmp	r3, #11
 800271c:	d010      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d00d      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b0d      	cmp	r3, #13
 8002728:	d00a      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b0e      	cmp	r3, #14
 800272e:	d007      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	d004      	beq.n	8002740 <HAL_RCC_ClockConfig+0x98>
 8002736:	f240 215b 	movw	r1, #603	; 0x25b
 800273a:	486d      	ldr	r0, [pc, #436]	; (80028f0 <HAL_RCC_ClockConfig+0x248>)
 800273c:	f7ff f843 	bl	80017c6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e136      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d049      	beq.n	8002808 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b5d      	ldr	r3, [pc, #372]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a5c      	ldr	r2, [pc, #368]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d024      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b90      	cmp	r3, #144	; 0x90
 80027ba:	d01c      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2ba0      	cmp	r3, #160	; 0xa0
 80027c2:	d018      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2bb0      	cmp	r3, #176	; 0xb0
 80027ca:	d014      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2bc0      	cmp	r3, #192	; 0xc0
 80027d2:	d010      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2bd0      	cmp	r3, #208	; 0xd0
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2be0      	cmp	r3, #224	; 0xe0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2bf0      	cmp	r3, #240	; 0xf0
 80027ea:	d004      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x14e>
 80027ec:	f240 217e 	movw	r1, #638	; 0x27e
 80027f0:	483f      	ldr	r0, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x248>)
 80027f2:	f7fe ffe8 	bl	80017c6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	493d      	ldr	r1, [pc, #244]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d059      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d010      	beq.n	800283e <HAL_RCC_ClockConfig+0x196>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d00c      	beq.n	800283e <HAL_RCC_ClockConfig+0x196>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x196>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d004      	beq.n	800283e <HAL_RCC_ClockConfig+0x196>
 8002834:	f240 2185 	movw	r1, #645	; 0x285
 8002838:	482d      	ldr	r0, [pc, #180]	; (80028f0 <HAL_RCC_ClockConfig+0x248>)
 800283a:	f7fe ffc4 	bl	80017c6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0bf      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002862:	2b03      	cmp	r3, #3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0af      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a7      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0203 	bic.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4919      	ldr	r1, [pc, #100]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002898:	f7ff f9da 	bl	8001c50 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7ff f9d6 	bl	8001c50 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e08f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_ClockConfig+0x250>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 020c 	and.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1eb      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d212      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_ClockConfig+0x24c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d007      	beq.n	80028fc <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e072      	b.n	80029d6 <HAL_RCC_ClockConfig+0x32e>
 80028f0:	080074d0 	.word	0x080074d0
 80028f4:	40023c00 	.word	0x40023c00
 80028f8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d025      	beq.n	8002954 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d018      	beq.n	8002942 <HAL_RCC_ClockConfig+0x29a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d013      	beq.n	8002942 <HAL_RCC_ClockConfig+0x29a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002922:	d00e      	beq.n	8002942 <HAL_RCC_ClockConfig+0x29a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x29a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002936:	d004      	beq.n	8002942 <HAL_RCC_ClockConfig+0x29a>
 8002938:	f240 21c3 	movw	r1, #707	; 0x2c3
 800293c:	4828      	ldr	r0, [pc, #160]	; (80029e0 <HAL_RCC_ClockConfig+0x338>)
 800293e:	f7fe ff42 	bl	80017c6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_RCC_ClockConfig+0x33c>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	4925      	ldr	r1, [pc, #148]	; (80029e4 <HAL_RCC_ClockConfig+0x33c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d026      	beq.n	80029ae <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_RCC_ClockConfig+0x2f2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	d013      	beq.n	800299a <HAL_RCC_ClockConfig+0x2f2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800297a:	d00e      	beq.n	800299a <HAL_RCC_ClockConfig+0x2f2>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002984:	d009      	beq.n	800299a <HAL_RCC_ClockConfig+0x2f2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800298e:	d004      	beq.n	800299a <HAL_RCC_ClockConfig+0x2f2>
 8002990:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002994:	4812      	ldr	r0, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x338>)
 8002996:	f7fe ff16 	bl	80017c6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x33c>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x33c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f855 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x33c>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x340>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x344>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x348>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f8fa 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	080074d0 	.word	0x080074d0
 80029e4:	40023800 	.word	0x40023800
 80029e8:	0800771c 	.word	0x0800771c
 80029ec:	20000004 	.word	0x20000004
 80029f0:	20000008 	.word	0x20000008

080029f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20000004 	.word	0x20000004

08002a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a10:	f7ff fff0 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	0a9b      	lsrs	r3, r3, #10
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	4903      	ldr	r1, [pc, #12]	; (8002a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a22:	5ccb      	ldrb	r3, [r1, r3]
 8002a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	0800772c 	.word	0x0800772c

08002a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a38:	f7ff ffdc 	bl	80029f4 <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	0b5b      	lsrs	r3, r3, #13
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4903      	ldr	r1, [pc, #12]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	0800772c 	.word	0x0800772c

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a60:	b0ae      	sub	sp, #184	; 0xb8
 8002a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a82:	4bcb      	ldr	r3, [pc, #812]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	f200 8206 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x440>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002acd 	.word	0x08002acd
 8002a9c:	08002e9d 	.word	0x08002e9d
 8002aa0:	08002e9d 	.word	0x08002e9d
 8002aa4:	08002e9d 	.word	0x08002e9d
 8002aa8:	08002ad5 	.word	0x08002ad5
 8002aac:	08002e9d 	.word	0x08002e9d
 8002ab0:	08002e9d 	.word	0x08002e9d
 8002ab4:	08002e9d 	.word	0x08002e9d
 8002ab8:	08002add 	.word	0x08002add
 8002abc:	08002e9d 	.word	0x08002e9d
 8002ac0:	08002e9d 	.word	0x08002e9d
 8002ac4:	08002e9d 	.word	0x08002e9d
 8002ac8:	08002ccd 	.word	0x08002ccd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4bb9      	ldr	r3, [pc, #740]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ace:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ad2:	e1e7      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ad4:	4bb8      	ldr	r3, [pc, #736]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ada:	e1e3      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002adc:	4bb4      	ldr	r3, [pc, #720]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ae8:	4bb1      	ldr	r3, [pc, #708]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d071      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af4:	4bae      	ldr	r3, [pc, #696]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	0159      	lsls	r1, r3, #5
 8002b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2c:	0150      	lsls	r0, r2, #5
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4621      	mov	r1, r4
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	6439      	str	r1, [r7, #64]	; 0x40
 8002b38:	4629      	mov	r1, r5
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	4641      	mov	r1, r8
 8002b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b56:	4641      	mov	r1, r8
 8002b58:	018a      	lsls	r2, r1, #6
 8002b5a:	4641      	mov	r1, r8
 8002b5c:	1a51      	subs	r1, r2, r1
 8002b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b60:	4649      	mov	r1, r9
 8002b62:	eb63 0301 	sbc.w	r3, r3, r1
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002b74:	4649      	mov	r1, r9
 8002b76:	00cb      	lsls	r3, r1, #3
 8002b78:	4641      	mov	r1, r8
 8002b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b7e:	4641      	mov	r1, r8
 8002b80:	00ca      	lsls	r2, r1, #3
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	4622      	mov	r2, r4
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8e:	462b      	mov	r3, r5
 8002b90:	460a      	mov	r2, r1
 8002b92:	eb42 0303 	adc.w	r3, r2, r3
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	024b      	lsls	r3, r1, #9
 8002ba8:	4621      	mov	r1, r4
 8002baa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bae:	4621      	mov	r1, r4
 8002bb0:	024a      	lsls	r2, r1, #9
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002bc8:	f7fe f85e 	bl	8000c88 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bd6:	e067      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd8:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002be4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bf6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	0159      	lsls	r1, r3, #5
 8002c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c0c:	0150      	lsls	r0, r2, #5
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4621      	mov	r1, r4
 8002c14:	1a51      	subs	r1, r2, r1
 8002c16:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c18:	4629      	mov	r1, r5
 8002c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	018b      	lsls	r3, r1, #6
 8002c30:	4641      	mov	r1, r8
 8002c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c36:	4641      	mov	r1, r8
 8002c38:	018a      	lsls	r2, r1, #6
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c40:	4649      	mov	r1, r9
 8002c42:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c52:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c5a:	4692      	mov	sl, r2
 8002c5c:	469b      	mov	fp, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	eb1a 0303 	adds.w	r3, sl, r3
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	462b      	mov	r3, r5
 8002c68:	eb4b 0303 	adc.w	r3, fp, r3
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c90:	2200      	movs	r2, #0
 8002c92:	673b      	str	r3, [r7, #112]	; 0x70
 8002c94:	677a      	str	r2, [r7, #116]	; 0x74
 8002c96:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c9a:	f7fd fff5 	bl	8000c88 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002cca:	e0eb      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ccc:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d06b      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	667b      	str	r3, [r7, #100]	; 0x64
 8002cfc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d00:	4622      	mov	r2, r4
 8002d02:	462b      	mov	r3, r5
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	0159      	lsls	r1, r3, #5
 8002d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d12:	0150      	lsls	r0, r2, #5
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4621      	mov	r1, r4
 8002d1a:	1a51      	subs	r1, r2, r1
 8002d1c:	61b9      	str	r1, [r7, #24]
 8002d1e:	4629      	mov	r1, r5
 8002d20:	eb63 0301 	sbc.w	r3, r3, r1
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d32:	4659      	mov	r1, fp
 8002d34:	018b      	lsls	r3, r1, #6
 8002d36:	4651      	mov	r1, sl
 8002d38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3c:	4651      	mov	r1, sl
 8002d3e:	018a      	lsls	r2, r1, #6
 8002d40:	4651      	mov	r1, sl
 8002d42:	ebb2 0801 	subs.w	r8, r2, r1
 8002d46:	4659      	mov	r1, fp
 8002d48:	eb63 0901 	sbc.w	r9, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d60:	4690      	mov	r8, r2
 8002d62:	4699      	mov	r9, r3
 8002d64:	4623      	mov	r3, r4
 8002d66:	eb18 0303 	adds.w	r3, r8, r3
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	eb49 0303 	adc.w	r3, r9, r3
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d80:	4629      	mov	r1, r5
 8002d82:	024b      	lsls	r3, r1, #9
 8002d84:	4621      	mov	r1, r4
 8002d86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	024a      	lsls	r2, r1, #9
 8002d8e:	4610      	mov	r0, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d96:	2200      	movs	r2, #0
 8002d98:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002da0:	f7fd ff72 	bl	8000c88 <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4613      	mov	r3, r2
 8002daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dae:	e065      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x420>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8002dce:	2300      	movs	r3, #0
 8002dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002dd6:	4642      	mov	r2, r8
 8002dd8:	464b      	mov	r3, r9
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	0159      	lsls	r1, r3, #5
 8002de4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de8:	0150      	lsls	r0, r2, #5
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4641      	mov	r1, r8
 8002df0:	1a51      	subs	r1, r2, r1
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	4649      	mov	r1, r9
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e08:	4659      	mov	r1, fp
 8002e0a:	018b      	lsls	r3, r1, #6
 8002e0c:	4651      	mov	r1, sl
 8002e0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e12:	4651      	mov	r1, sl
 8002e14:	018a      	lsls	r2, r1, #6
 8002e16:	4651      	mov	r1, sl
 8002e18:	1a54      	subs	r4, r2, r1
 8002e1a:	4659      	mov	r1, fp
 8002e1c:	eb63 0501 	sbc.w	r5, r3, r1
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	00eb      	lsls	r3, r5, #3
 8002e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e2e:	00e2      	lsls	r2, r4, #3
 8002e30:	4614      	mov	r4, r2
 8002e32:	461d      	mov	r5, r3
 8002e34:	4643      	mov	r3, r8
 8002e36:	18e3      	adds	r3, r4, r3
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	eb45 0303 	adc.w	r3, r5, r3
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e64:	2200      	movs	r2, #0
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e68:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e6e:	f7fd ff0b 	bl	8000c88 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4613      	mov	r3, r2
 8002e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0f1b      	lsrs	r3, r3, #28
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	37b8      	adds	r7, #184	; 0xb8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400

08002ebc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e347      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	d904      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x24>
 8002ed6:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8002eda:	4893      	ldr	r0, [pc, #588]	; (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f7fe fc73 	bl	80017c6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8096 	beq.w	800301a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00e      	beq.n	8002f14 <HAL_RCC_OscConfig+0x58>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efe:	d009      	beq.n	8002f14 <HAL_RCC_OscConfig+0x58>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f08:	d004      	beq.n	8002f14 <HAL_RCC_OscConfig+0x58>
 8002f0a:	f640 5115 	movw	r1, #3349	; 0xd15
 8002f0e:	4886      	ldr	r0, [pc, #536]	; (8003128 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	f7fe fc59 	bl	80017c6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f14:	4b85      	ldr	r3, [pc, #532]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f20:	4b82      	ldr	r3, [pc, #520]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d106      	bne.n	8002f3a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f2c:	4b7f      	ldr	r3, [pc, #508]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4b7c      	ldr	r3, [pc, #496]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d112      	bne.n	8002f6c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	4b75      	ldr	r3, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05b      	beq.n	8003018 <HAL_RCC_OscConfig+0x15c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d157      	bne.n	8003018 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e2f8      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0xc8>
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6c      	ldr	r2, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x104>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xec>
 8002f8e:	4b67      	ldr	r3, [pc, #412]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a66      	ldr	r2, [pc, #408]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a63      	ldr	r2, [pc, #396]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x104>
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5f      	ldr	r2, [pc, #380]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe42 	bl	8001c50 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fe3e 	bl	8001c50 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2bd      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b52      	ldr	r3, [pc, #328]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x114>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fe2e 	bl	8001c50 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fe2a 	bl	8001c50 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e2a9      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_RCC_OscConfig+0x270>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x13c>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 808c 	beq.w	8003140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_OscConfig+0x186>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d004      	beq.n	8003042 <HAL_RCC_OscConfig+0x186>
 8003038:	f640 514d 	movw	r1, #3405	; 0xd4d
 800303c:	483a      	ldr	r0, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x26c>)
 800303e:	f7fe fbc2 	bl	80017c6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b1f      	cmp	r3, #31
 8003048:	d904      	bls.n	8003054 <HAL_RCC_OscConfig+0x198>
 800304a:	f640 514e 	movw	r1, #3406	; 0xd4e
 800304e:	4836      	ldr	r0, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f7fe fbb9 	bl	80017c6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003054:	4b35      	ldr	r3, [pc, #212]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003060:	4b32      	ldr	r3, [pc, #200]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003068:	2b08      	cmp	r3, #8
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <HAL_RCC_OscConfig+0x270>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003078:	4b2c      	ldr	r3, [pc, #176]	; (800312c <HAL_RCC_OscConfig+0x270>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003080:	2b0c      	cmp	r3, #12
 8003082:	d11c      	bne.n	80030be <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d116      	bne.n	80030be <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1ec>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e25a      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <HAL_RCC_OscConfig+0x270>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	491d      	ldr	r1, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x270>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030bc:	e040      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <HAL_RCC_OscConfig+0x274>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fdc0 	bl	8001c50 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fdbc 	bl	8001c50 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e23b      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490a      	ldr	r1, [pc, #40]	; (800312c <HAL_RCC_OscConfig+0x270>)
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
 8003106:	e01b      	b.n	8003140 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_RCC_OscConfig+0x274>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fd9f 	bl	8001c50 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003114:	e00e      	b.n	8003134 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fd9b 	bl	8001c50 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d907      	bls.n	8003134 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e21a      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
 8003128:	08007544 	.word	0x08007544
 800312c:	40023800 	.word	0x40023800
 8003130:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003134:	4b74      	ldr	r3, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ea      	bne.n	8003116 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03d      	beq.n	80031c8 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_OscConfig+0x2aa>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d004      	beq.n	8003166 <HAL_RCC_OscConfig+0x2aa>
 800315c:	f640 5194 	movw	r1, #3476	; 0xd94
 8003160:	486a      	ldr	r0, [pc, #424]	; (800330c <HAL_RCC_OscConfig+0x450>)
 8003162:	f7fe fb30 	bl	80017c6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_OscConfig+0x454>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fd6c 	bl	8001c50 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fe fd68 	bl	8001c50 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1e7      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x2c0>
 800319a:	e015      	b.n	80031c8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b5c      	ldr	r3, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x454>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe fd55 	bl	8001c50 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe fd51 	bl	8001c50 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1d0      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b52      	ldr	r3, [pc, #328]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80b0 	beq.w	8003336 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_RCC_OscConfig+0x340>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d008      	beq.n	80031fc <HAL_RCC_OscConfig+0x340>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	d004      	beq.n	80031fc <HAL_RCC_OscConfig+0x340>
 80031f2:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80031f6:	4845      	ldr	r0, [pc, #276]	; (800330c <HAL_RCC_OscConfig+0x450>)
 80031f8:	f7fe fae5 	bl	80017c6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCC_OscConfig+0x458>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d118      	bne.n	8003266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x458>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <HAL_RCC_OscConfig+0x458>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003240:	f7fe fd06 	bl	8001c50 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe fd02 	bl	8001c50 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e181      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCC_OscConfig+0x458>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x3c0>
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x3fa>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x3e2>
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x3fa>
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a19      	ldr	r2, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fcc7 	bl	8001c50 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fcc3 	bl	8001c50 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e140      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_OscConfig+0x44c>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x40a>
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ea:	f7fe fcb1 	bl	8001c50 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	e012      	b.n	8003318 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fcad 	bl	8001c50 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d909      	bls.n	8003318 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e12a      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
 8003308:	40023800 	.word	0x40023800
 800330c:	08007544 	.word	0x08007544
 8003310:	42470e80 	.word	0x42470e80
 8003314:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003318:	4b93      	ldr	r3, [pc, #588]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e6      	bne.n	80032f2 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_RCC_OscConfig+0x49c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d008      	beq.n	8003358 <HAL_RCC_OscConfig+0x49c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d004      	beq.n	8003358 <HAL_RCC_OscConfig+0x49c>
 800334e:	f640 6103 	movw	r1, #3587	; 0xe03
 8003352:	4886      	ldr	r0, [pc, #536]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 8003354:	f7fe fa37 	bl	80017c6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80fd 	beq.w	800355c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003362:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b08      	cmp	r3, #8
 800336c:	f000 80b6 	beq.w	80034dc <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b02      	cmp	r3, #2
 8003376:	f040 809a 	bne.w	80034ae <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCC_OscConfig+0x4da>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d004      	beq.n	8003396 <HAL_RCC_OscConfig+0x4da>
 800338c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003390:	4876      	ldr	r0, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 8003392:	f7fe fa18 	bl	80017c6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	2b3f      	cmp	r3, #63	; 0x3f
 800339c:	d904      	bls.n	80033a8 <HAL_RCC_OscConfig+0x4ec>
 800339e:	f640 610d 	movw	r1, #3597	; 0xe0d
 80033a2:	4872      	ldr	r0, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 80033a4:	f7fe fa0f 	bl	80017c6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b31      	cmp	r3, #49	; 0x31
 80033ae:	d904      	bls.n	80033ba <HAL_RCC_OscConfig+0x4fe>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80033b8:	d904      	bls.n	80033c4 <HAL_RCC_OscConfig+0x508>
 80033ba:	f640 610e 	movw	r1, #3598	; 0xe0e
 80033be:	486b      	ldr	r0, [pc, #428]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 80033c0:	f7fe fa01 	bl	80017c6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d010      	beq.n	80033ee <HAL_RCC_OscConfig+0x532>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d00c      	beq.n	80033ee <HAL_RCC_OscConfig+0x532>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	2b06      	cmp	r3, #6
 80033da:	d008      	beq.n	80033ee <HAL_RCC_OscConfig+0x532>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d004      	beq.n	80033ee <HAL_RCC_OscConfig+0x532>
 80033e4:	f640 610f 	movw	r1, #3599	; 0xe0f
 80033e8:	4860      	ldr	r0, [pc, #384]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 80033ea:	f7fe f9ec 	bl	80017c6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d903      	bls.n	80033fe <HAL_RCC_OscConfig+0x542>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d904      	bls.n	8003408 <HAL_RCC_OscConfig+0x54c>
 80033fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003402:	485a      	ldr	r0, [pc, #360]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 8003404:	f7fe f9df 	bl	80017c6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	d903      	bls.n	8003418 <HAL_RCC_OscConfig+0x55c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	2b07      	cmp	r3, #7
 8003416:	d904      	bls.n	8003422 <HAL_RCC_OscConfig+0x566>
 8003418:	f640 6111 	movw	r1, #3601	; 0xe11
 800341c:	4853      	ldr	r0, [pc, #332]	; (800356c <HAL_RCC_OscConfig+0x6b0>)
 800341e:	f7fe f9d2 	bl	80017c6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_OscConfig+0x6b4>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fc12 	bl	8001c50 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fc0e 	bl	8001c50 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e08d      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	019b      	lsls	r3, r3, #6
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	071b      	lsls	r3, r3, #28
 800347a:	493b      	ldr	r1, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x6b4>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003486:	f7fe fbe3 	bl	8001c50 <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fbdf 	bl	8001c50 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e05e      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x5d2>
 80034ac:	e056      	b.n	800355c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x6b4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fbcc 	bl	8001c50 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fbc8 	bl	8001c50 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e047      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x600>
 80034da:	e03f      	b.n	800355c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_RCC_OscConfig+0x6ac>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d030      	beq.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d129      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350e:	429a      	cmp	r2, r3
 8003510:	d122      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800351e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003520:	4293      	cmp	r3, r2
 8003522:	d119      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	085b      	lsrs	r3, r3, #1
 8003530:	3b01      	subs	r3, #1
 8003532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d10f      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003554:	429a      	cmp	r2, r3
 8003556:	d001      	beq.n	800355c <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	08007544 	.word	0x08007544
 8003570:	42470060 	.word	0x42470060

08003574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0c5      	b.n	8003712 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a64      	ldr	r2, [pc, #400]	; (800371c <HAL_TIM_Base_Init+0x1a8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d045      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d040      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_TIM_Base_Init+0x1ac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d03b      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a5e      	ldr	r2, [pc, #376]	; (8003724 <HAL_TIM_Base_Init+0x1b0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d036      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5d      	ldr	r2, [pc, #372]	; (8003728 <HAL_TIM_Base_Init+0x1b4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d031      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5b      	ldr	r2, [pc, #364]	; (800372c <HAL_TIM_Base_Init+0x1b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d02c      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5a      	ldr	r2, [pc, #360]	; (8003730 <HAL_TIM_Base_Init+0x1bc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d027      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a58      	ldr	r2, [pc, #352]	; (8003734 <HAL_TIM_Base_Init+0x1c0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d022      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a57      	ldr	r2, [pc, #348]	; (8003738 <HAL_TIM_Base_Init+0x1c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d01d      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a55      	ldr	r2, [pc, #340]	; (800373c <HAL_TIM_Base_Init+0x1c8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d018      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a54      	ldr	r2, [pc, #336]	; (8003740 <HAL_TIM_Base_Init+0x1cc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d013      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_TIM_Base_Init+0x1d0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00e      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_TIM_Base_Init+0x1d4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d009      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a4f      	ldr	r2, [pc, #316]	; (800374c <HAL_TIM_Base_Init+0x1d8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_Base_Init+0xa8>
 8003612:	f240 1113 	movw	r1, #275	; 0x113
 8003616:	484e      	ldr	r0, [pc, #312]	; (8003750 <HAL_TIM_Base_Init+0x1dc>)
 8003618:	f7fe f8d5 	bl	80017c6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d014      	beq.n	800364e <HAL_TIM_Base_Init+0xda>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d010      	beq.n	800364e <HAL_TIM_Base_Init+0xda>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b20      	cmp	r3, #32
 8003632:	d00c      	beq.n	800364e <HAL_TIM_Base_Init+0xda>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d008      	beq.n	800364e <HAL_TIM_Base_Init+0xda>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d004      	beq.n	800364e <HAL_TIM_Base_Init+0xda>
 8003644:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003648:	4841      	ldr	r0, [pc, #260]	; (8003750 <HAL_TIM_Base_Init+0x1dc>)
 800364a:	f7fe f8bc 	bl	80017c6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Init+0x100>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Init+0x100>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Init+0x100>
 800366a:	f240 1115 	movw	r1, #277	; 0x115
 800366e:	4838      	ldr	r0, [pc, #224]	; (8003750 <HAL_TIM_Base_Init+0x1dc>)
 8003670:	f7fe f8a9 	bl	80017c6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_TIM_Base_Init+0x11a>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d004      	beq.n	800368e <HAL_TIM_Base_Init+0x11a>
 8003684:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003688:	4831      	ldr	r0, [pc, #196]	; (8003750 <HAL_TIM_Base_Init+0x1dc>)
 800368a:	f7fe f89c 	bl	80017c6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe f8c2 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f000 f910 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40001000 	.word	0x40001000
 8003730:	40001400 	.word	0x40001400
 8003734:	40010400 	.word	0x40010400
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	40001800 	.word	0x40001800
 8003748:	40001c00 	.word	0x40001c00
 800374c:	40002000 	.word	0x40002000
 8003750:	080075bc 	.word	0x080075bc

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a51      	ldr	r2, [pc, #324]	; (80038a8 <HAL_TIM_Base_Start_IT+0x154>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d045      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d040      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4d      	ldr	r2, [pc, #308]	; (80038ac <HAL_TIM_Base_Start_IT+0x158>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d03b      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4c      	ldr	r2, [pc, #304]	; (80038b0 <HAL_TIM_Base_Start_IT+0x15c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d036      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <HAL_TIM_Base_Start_IT+0x160>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d031      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a49      	ldr	r2, [pc, #292]	; (80038b8 <HAL_TIM_Base_Start_IT+0x164>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d02c      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a47      	ldr	r2, [pc, #284]	; (80038bc <HAL_TIM_Base_Start_IT+0x168>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d027      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a46      	ldr	r2, [pc, #280]	; (80038c0 <HAL_TIM_Base_Start_IT+0x16c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d022      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <HAL_TIM_Base_Start_IT+0x170>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01d      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a43      	ldr	r2, [pc, #268]	; (80038c8 <HAL_TIM_Base_Start_IT+0x174>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d018      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a41      	ldr	r2, [pc, #260]	; (80038cc <HAL_TIM_Base_Start_IT+0x178>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_TIM_Base_Start_IT+0x17c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00e      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <HAL_TIM_Base_Start_IT+0x180>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d009      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <HAL_TIM_Base_Start_IT+0x184>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_Base_Start_IT+0x9e>
 80037e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80037ec:	483b      	ldr	r0, [pc, #236]	; (80038dc <HAL_TIM_Base_Start_IT+0x188>)
 80037ee:	f7fd ffea 	bl	80017c6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d001      	beq.n	8003802 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e04e      	b.n	80038a0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_TIM_Base_Start_IT+0x154>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01d      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_TIM_Base_Start_IT+0x158>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIM_Base_Start_IT+0x15c>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_TIM_Base_Start_IT+0x160>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1b      	ldr	r2, [pc, #108]	; (80038c0 <HAL_TIM_Base_Start_IT+0x16c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1a      	ldr	r2, [pc, #104]	; (80038c4 <HAL_TIM_Base_Start_IT+0x170>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x116>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_TIM_Base_Start_IT+0x17c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d111      	bne.n	800388e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b06      	cmp	r3, #6
 800387a:	d010      	beq.n	800389e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	e007      	b.n	800389e <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800
 80038b4:	40000c00 	.word	0x40000c00
 80038b8:	40001000 	.word	0x40001000
 80038bc:	40001400 	.word	0x40001400
 80038c0:	40010400 	.word	0x40010400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40014800 	.word	0x40014800
 80038d0:	40001800 	.word	0x40001800
 80038d4:	40001c00 	.word	0x40001c00
 80038d8:	40002000 	.word	0x40002000
 80038dc:	080075bc 	.word	0x080075bc

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d00f      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a3d      	ldr	r2, [pc, #244]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00b      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3c      	ldr	r2, [pc, #240]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2f      	ldr	r2, [pc, #188]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d027      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <TIM_Base_SetConfig+0x118>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d023      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <TIM_Base_SetConfig+0x11c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <TIM_Base_SetConfig+0x120>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d017      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <TIM_Base_SetConfig+0x128>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a27      	ldr	r2, [pc, #156]	; (8003a0c <TIM_Base_SetConfig+0x12c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00f      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <TIM_Base_SetConfig+0x130>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00b      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <TIM_Base_SetConfig+0x134>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <TIM_Base_SetConfig+0x138>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <TIM_Base_SetConfig+0x13c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0a      	ldr	r2, [pc, #40]	; (80039f4 <TIM_Base_SetConfig+0x114>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <TIM_Base_SetConfig+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00
 8003a04:	40010400 	.word	0x40010400
 8003a08:	40014000 	.word	0x40014000
 8003a0c:	40014400 	.word	0x40014400
 8003a10:	40014800 	.word	0x40014800
 8003a14:	40001800 	.word	0x40001800
 8003a18:	40001c00 	.word	0x40001c00
 8003a1c:	40002000 	.word	0x40002000

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a61      	ldr	r2, [pc, #388]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d027      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d022      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a5d      	ldr	r2, [pc, #372]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01d      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5b      	ldr	r2, [pc, #364]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a55      	ldr	r2, [pc, #340]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8003a7a:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8003a7e:	4854      	ldr	r0, [pc, #336]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003a80:	f7fd fea1 	bl	80017c6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d01c      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d018      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d014      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d010      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d00c      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d008      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b70      	cmp	r3, #112	; 0x70
 8003ac2:	d004      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ac4:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8003ac8:	4841      	ldr	r0, [pc, #260]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003aca:	f7fd fe7c 	bl	80017c6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d008      	beq.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ade:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8003ae2:	483b      	ldr	r0, [pc, #236]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8003ae4:	f7fd fe6f 	bl	80017c6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e05a      	b.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d022      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d01d      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d018      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00e      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a19      	ldr	r2, [pc, #100]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d009      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d004      	beq.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d10c      	bne.n	8003b9a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40001000 	.word	0x40001000
 8003bc8:	40001400 	.word	0x40001400
 8003bcc:	40010400 	.word	0x40010400
 8003bd0:	08007630 	.word	0x08007630
 8003bd4:	40014000 	.word	0x40014000
 8003bd8:	40001800 	.word	0x40001800

08003bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0be      	b.n	8003d6c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d03b      	beq.n	8003c6e <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a5e      	ldr	r2, [pc, #376]	; (8003d74 <HAL_UART_Init+0x198>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d01d      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a5c      	ldr	r2, [pc, #368]	; (8003d78 <HAL_UART_Init+0x19c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d018      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_UART_Init+0x1a0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d013      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a59      	ldr	r2, [pc, #356]	; (8003d80 <HAL_UART_Init+0x1a4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_UART_Init+0x1a8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_UART_Init+0x1ac>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_UART_Init+0x60>
 8003c32:	f240 1173 	movw	r1, #371	; 0x173
 8003c36:	4855      	ldr	r0, [pc, #340]	; (8003d8c <HAL_UART_Init+0x1b0>)
 8003c38:	f7fd fdc5 	bl	80017c6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d037      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4c:	d032      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c56:	d02d      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c60:	d028      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c62:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003c66:	4849      	ldr	r0, [pc, #292]	; (8003d8c <HAL_UART_Init+0x1b0>)
 8003c68:	f7fd fdad 	bl	80017c6 <assert_failed>
 8003c6c:	e022      	b.n	8003cb4 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <HAL_UART_Init+0x198>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d01d      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3e      	ldr	r2, [pc, #248]	; (8003d78 <HAL_UART_Init+0x19c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d018      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3d      	ldr	r2, [pc, #244]	; (8003d7c <HAL_UART_Init+0x1a0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3b      	ldr	r2, [pc, #236]	; (8003d80 <HAL_UART_Init+0x1a4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d00e      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3a      	ldr	r2, [pc, #232]	; (8003d84 <HAL_UART_Init+0x1a8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d009      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a38      	ldr	r2, [pc, #224]	; (8003d88 <HAL_UART_Init+0x1ac>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_UART_Init+0xd8>
 8003caa:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003cae:	4837      	ldr	r0, [pc, #220]	; (8003d8c <HAL_UART_Init+0x1b0>)
 8003cb0:	f7fd fd89 	bl	80017c6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_UART_Init+0xf4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d004      	beq.n	8003cd0 <HAL_UART_Init+0xf4>
 8003cc6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003cca:	4830      	ldr	r0, [pc, #192]	; (8003d8c <HAL_UART_Init+0x1b0>)
 8003ccc:	f7fd fd7b 	bl	80017c6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d009      	beq.n	8003cec <HAL_UART_Init+0x110>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce0:	d004      	beq.n	8003cec <HAL_UART_Init+0x110>
 8003ce2:	f240 117b 	movw	r1, #379	; 0x17b
 8003ce6:	4829      	ldr	r0, [pc, #164]	; (8003d8c <HAL_UART_Init+0x1b0>)
 8003ce8:	f7fd fd6d 	bl	80017c6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fd fdb5 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2224      	movs	r2, #36	; 0x24
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f936 	bl	8003f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d32:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695a      	ldr	r2, [r3, #20]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d42:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40011000 	.word	0x40011000
 8003d78:	40004400 	.word	0x40004400
 8003d7c:	40004800 	.word	0x40004800
 8003d80:	40004c00 	.word	0x40004c00
 8003d84:	40005000 	.word	0x40005000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	080076a8 	.word	0x080076a8

08003d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d17c      	bne.n	8003eaa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Transmit+0x2c>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e075      	b.n	8003eac <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x3e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e06e      	b.n	8003eac <HAL_UART_Transmit+0x11c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2221      	movs	r2, #33	; 0x21
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de4:	f7fd ff34 	bl	8001c50 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	88fa      	ldrh	r2, [r7, #6]
 8003df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfe:	d108      	bne.n	8003e12 <HAL_UART_Transmit+0x82>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d104      	bne.n	8003e12 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	e003      	b.n	8003e1a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e22:	e02a      	b.n	8003e7a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 f840 	bl	8003eb4 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e036      	b.n	8003eac <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e52:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	3302      	adds	r3, #2
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	e007      	b.n	8003e6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1cf      	bne.n	8003e24 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2140      	movs	r1, #64	; 0x40
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f810 	bl	8003eb4 <UART_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e006      	b.n	8003eac <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b090      	sub	sp, #64	; 0x40
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec4:	e050      	b.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d04c      	beq.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed4:	f7fd febc 	bl	8001c50 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d241      	bcs.n	8003f68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	330c      	adds	r3, #12
 8003f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f04:	637a      	str	r2, [r7, #52]	; 0x34
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	613b      	str	r3, [r7, #16]
   return(result);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f38:	623a      	str	r2, [r7, #32]
 8003f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69f9      	ldr	r1, [r7, #28]
 8003f3e:	6a3a      	ldr	r2, [r7, #32]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e00f      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d09f      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3740      	adds	r7, #64	; 0x40
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b0c0      	sub	sp, #256	; 0x100
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4bcf      	ldr	r3, [pc, #828]	; (80042e0 <UART_SetConfig+0x350>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d904      	bls.n	8003fb2 <UART_SetConfig+0x22>
 8003fa8:	f640 6161 	movw	r1, #3681	; 0xe61
 8003fac:	48cd      	ldr	r0, [pc, #820]	; (80042e4 <UART_SetConfig+0x354>)
 8003fae:	f7fd fc0a 	bl	80017c6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_SetConfig+0x42>
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	d004      	beq.n	8003fd2 <UART_SetConfig+0x42>
 8003fc8:	f640 6162 	movw	r1, #3682	; 0xe62
 8003fcc:	48c5      	ldr	r0, [pc, #788]	; (80042e4 <UART_SetConfig+0x354>)
 8003fce:	f7fd fbfa 	bl	80017c6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <UART_SetConfig+0x6e>
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d00a      	beq.n	8003ffe <UART_SetConfig+0x6e>
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff2:	d004      	beq.n	8003ffe <UART_SetConfig+0x6e>
 8003ff4:	f640 6163 	movw	r1, #3683	; 0xe63
 8003ff8:	48ba      	ldr	r0, [pc, #744]	; (80042e4 <UART_SetConfig+0x354>)
 8003ffa:	f7fd fbe4 	bl	80017c6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004002:	695a      	ldr	r2, [r3, #20]
 8004004:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <UART_SetConfig+0x88>
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <UART_SetConfig+0x92>
 8004018:	f640 6164 	movw	r1, #3684	; 0xe64
 800401c:	48b1      	ldr	r0, [pc, #708]	; (80042e4 <UART_SetConfig+0x354>)
 800401e:	f7fd fbd2 	bl	80017c6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	68d9      	ldr	r1, [r3, #12]
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	ea40 0301 	orr.w	r3, r0, r1
 800403e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	431a      	orrs	r2, r3
 800404e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	431a      	orrs	r2, r3
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800406e:	f021 010c 	bic.w	r1, r1, #12
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800407c:	430b      	orrs	r3, r1
 800407e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	6999      	ldr	r1, [r3, #24]
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	ea40 0301 	orr.w	r3, r0, r1
 800409c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b90      	ldr	r3, [pc, #576]	; (80042e8 <UART_SetConfig+0x358>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d005      	beq.n	80040b6 <UART_SetConfig+0x126>
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b8e      	ldr	r3, [pc, #568]	; (80042ec <UART_SetConfig+0x35c>)
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d104      	bne.n	80040c0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b6:	f7fe fcbd 	bl	8002a34 <HAL_RCC_GetPCLK2Freq>
 80040ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040be:	e003      	b.n	80040c8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040c0:	f7fe fca4 	bl	8002a0c <HAL_RCC_GetPCLK1Freq>
 80040c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	f040 810f 	bne.w	80042f4 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040e0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040e4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	1891      	adds	r1, r2, r2
 80040ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80040f0:	415b      	adcs	r3, r3
 80040f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040f8:	4621      	mov	r1, r4
 80040fa:	eb12 0801 	adds.w	r8, r2, r1
 80040fe:	4629      	mov	r1, r5
 8004100:	eb43 0901 	adc.w	r9, r3, r1
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004118:	4690      	mov	r8, r2
 800411a:	4699      	mov	r9, r3
 800411c:	4623      	mov	r3, r4
 800411e:	eb18 0303 	adds.w	r3, r8, r3
 8004122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004126:	462b      	mov	r3, r5
 8004128:	eb49 0303 	adc.w	r3, r9, r3
 800412c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800413c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004140:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	653b      	str	r3, [r7, #80]	; 0x50
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	657b      	str	r3, [r7, #84]	; 0x54
 8004152:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004156:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800415a:	f7fc fd95 	bl	8000c88 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b63      	ldr	r3, [pc, #396]	; (80042f0 <UART_SetConfig+0x360>)
 8004164:	fba3 2302 	umull	r2, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	011c      	lsls	r4, r3, #4
 800416c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004170:	2200      	movs	r2, #0
 8004172:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004176:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800417a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800417e:	4642      	mov	r2, r8
 8004180:	464b      	mov	r3, r9
 8004182:	1891      	adds	r1, r2, r2
 8004184:	64b9      	str	r1, [r7, #72]	; 0x48
 8004186:	415b      	adcs	r3, r3
 8004188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800418e:	4641      	mov	r1, r8
 8004190:	eb12 0a01 	adds.w	sl, r2, r1
 8004194:	4649      	mov	r1, r9
 8004196:	eb43 0b01 	adc.w	fp, r3, r1
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ae:	4692      	mov	sl, r2
 80041b0:	469b      	mov	fp, r3
 80041b2:	4643      	mov	r3, r8
 80041b4:	eb1a 0303 	adds.w	r3, sl, r3
 80041b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041bc:	464b      	mov	r3, r9
 80041be:	eb4b 0303 	adc.w	r3, fp, r3
 80041c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041da:	460b      	mov	r3, r1
 80041dc:	18db      	adds	r3, r3, r3
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
 80041e0:	4613      	mov	r3, r2
 80041e2:	eb42 0303 	adc.w	r3, r2, r3
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041f0:	f7fc fd4a 	bl	8000c88 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <UART_SetConfig+0x360>)
 80041fc:	fba3 2301 	umull	r2, r3, r3, r1
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2264      	movs	r2, #100	; 0x64
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	1acb      	subs	r3, r1, r3
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004210:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <UART_SetConfig+0x360>)
 8004212:	fba3 2302 	umull	r2, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800421e:	441c      	add	r4, r3
 8004220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800422a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800422e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004232:	4642      	mov	r2, r8
 8004234:	464b      	mov	r3, r9
 8004236:	1891      	adds	r1, r2, r2
 8004238:	63b9      	str	r1, [r7, #56]	; 0x38
 800423a:	415b      	adcs	r3, r3
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004242:	4641      	mov	r1, r8
 8004244:	1851      	adds	r1, r2, r1
 8004246:	6339      	str	r1, [r7, #48]	; 0x30
 8004248:	4649      	mov	r1, r9
 800424a:	414b      	adcs	r3, r1
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800425a:	4659      	mov	r1, fp
 800425c:	00cb      	lsls	r3, r1, #3
 800425e:	4651      	mov	r1, sl
 8004260:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004264:	4651      	mov	r1, sl
 8004266:	00ca      	lsls	r2, r1, #3
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	4603      	mov	r3, r0
 800426e:	4642      	mov	r2, r8
 8004270:	189b      	adds	r3, r3, r2
 8004272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004276:	464b      	mov	r3, r9
 8004278:	460a      	mov	r2, r1
 800427a:	eb42 0303 	adc.w	r3, r2, r3
 800427e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800428e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004292:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004296:	460b      	mov	r3, r1
 8004298:	18db      	adds	r3, r3, r3
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	4613      	mov	r3, r2
 800429e:	eb42 0303 	adc.w	r3, r2, r3
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042ac:	f7fc fcec 	bl	8000c88 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <UART_SetConfig+0x360>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <UART_SetConfig+0x360>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 0207 	and.w	r2, r3, #7
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4422      	add	r2, r4
 80042dc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042de:	e108      	b.n	80044f2 <UART_SetConfig+0x562>
 80042e0:	00a037a0 	.word	0x00a037a0
 80042e4:	080076a8 	.word	0x080076a8
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004306:	4642      	mov	r2, r8
 8004308:	464b      	mov	r3, r9
 800430a:	1891      	adds	r1, r2, r2
 800430c:	6239      	str	r1, [r7, #32]
 800430e:	415b      	adcs	r3, r3
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004316:	4641      	mov	r1, r8
 8004318:	1854      	adds	r4, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb43 0501 	adc.w	r5, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	00eb      	lsls	r3, r5, #3
 800432a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800432e:	00e2      	lsls	r2, r4, #3
 8004330:	4614      	mov	r4, r2
 8004332:	461d      	mov	r5, r3
 8004334:	4643      	mov	r3, r8
 8004336:	18e3      	adds	r3, r4, r3
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800433c:	464b      	mov	r3, r9
 800433e:	eb45 0303 	adc.w	r3, r5, r3
 8004342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004362:	4629      	mov	r1, r5
 8004364:	008b      	lsls	r3, r1, #2
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800436c:	4621      	mov	r1, r4
 800436e:	008a      	lsls	r2, r1, #2
 8004370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004374:	f7fc fc88 	bl	8000c88 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b60      	ldr	r3, [pc, #384]	; (8004500 <UART_SetConfig+0x570>)
 800437e:	fba3 2302 	umull	r2, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	011c      	lsls	r4, r3, #4
 8004386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004390:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	1891      	adds	r1, r2, r2
 800439e:	61b9      	str	r1, [r7, #24]
 80043a0:	415b      	adcs	r3, r3
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a8:	4641      	mov	r1, r8
 80043aa:	1851      	adds	r1, r2, r1
 80043ac:	6139      	str	r1, [r7, #16]
 80043ae:	4649      	mov	r1, r9
 80043b0:	414b      	adcs	r3, r1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c0:	4659      	mov	r1, fp
 80043c2:	00cb      	lsls	r3, r1, #3
 80043c4:	4651      	mov	r1, sl
 80043c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ca:	4651      	mov	r1, sl
 80043cc:	00ca      	lsls	r2, r1, #3
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	4642      	mov	r2, r8
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043dc:	464b      	mov	r3, r9
 80043de:	460a      	mov	r2, r1
 80043e0:	eb42 0303 	adc.w	r3, r2, r3
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004400:	4649      	mov	r1, r9
 8004402:	008b      	lsls	r3, r1, #2
 8004404:	4641      	mov	r1, r8
 8004406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440a:	4641      	mov	r1, r8
 800440c:	008a      	lsls	r2, r1, #2
 800440e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004412:	f7fc fc39 	bl	8000c88 <__aeabi_uldivmod>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <UART_SetConfig+0x570>)
 800441c:	fba3 1302 	umull	r1, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	2164      	movs	r1, #100	; 0x64
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	3332      	adds	r3, #50	; 0x32
 800442e:	4a34      	ldr	r2, [pc, #208]	; (8004500 <UART_SetConfig+0x570>)
 8004430:	fba2 2303 	umull	r2, r3, r2, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443a:	441c      	add	r4, r3
 800443c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004440:	2200      	movs	r2, #0
 8004442:	673b      	str	r3, [r7, #112]	; 0x70
 8004444:	677a      	str	r2, [r7, #116]	; 0x74
 8004446:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800444a:	4642      	mov	r2, r8
 800444c:	464b      	mov	r3, r9
 800444e:	1891      	adds	r1, r2, r2
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	415b      	adcs	r3, r3
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800445a:	4641      	mov	r1, r8
 800445c:	1851      	adds	r1, r2, r1
 800445e:	6039      	str	r1, [r7, #0]
 8004460:	4649      	mov	r1, r9
 8004462:	414b      	adcs	r3, r1
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004472:	4659      	mov	r1, fp
 8004474:	00cb      	lsls	r3, r1, #3
 8004476:	4651      	mov	r1, sl
 8004478:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800447c:	4651      	mov	r1, sl
 800447e:	00ca      	lsls	r2, r1, #3
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	4603      	mov	r3, r0
 8004486:	4642      	mov	r2, r8
 8004488:	189b      	adds	r3, r3, r2
 800448a:	66bb      	str	r3, [r7, #104]	; 0x68
 800448c:	464b      	mov	r3, r9
 800448e:	460a      	mov	r2, r1
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	663b      	str	r3, [r7, #96]	; 0x60
 80044a0:	667a      	str	r2, [r7, #100]	; 0x64
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044ae:	4649      	mov	r1, r9
 80044b0:	008b      	lsls	r3, r1, #2
 80044b2:	4641      	mov	r1, r8
 80044b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b8:	4641      	mov	r1, r8
 80044ba:	008a      	lsls	r2, r1, #2
 80044bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c0:	f7fc fbe2 	bl	8000c88 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <UART_SetConfig+0x570>)
 80044ca:	fba3 1302 	umull	r1, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2164      	movs	r1, #100	; 0x64
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a08      	ldr	r2, [pc, #32]	; (8004500 <UART_SetConfig+0x570>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 020f 	and.w	r2, r3, #15
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4422      	add	r2, r4
 80044f0:	609a      	str	r2, [r3, #8]
}
 80044f2:	bf00      	nop
 80044f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	51eb851f 	.word	0x51eb851f

08004504 <__errno>:
 8004504:	4b01      	ldr	r3, [pc, #4]	; (800450c <__errno+0x8>)
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000010 	.word	0x20000010

08004510 <__libc_init_array>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4d0d      	ldr	r5, [pc, #52]	; (8004548 <__libc_init_array+0x38>)
 8004514:	4c0d      	ldr	r4, [pc, #52]	; (800454c <__libc_init_array+0x3c>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	2600      	movs	r6, #0
 800451c:	42a6      	cmp	r6, r4
 800451e:	d109      	bne.n	8004534 <__libc_init_array+0x24>
 8004520:	4d0b      	ldr	r5, [pc, #44]	; (8004550 <__libc_init_array+0x40>)
 8004522:	4c0c      	ldr	r4, [pc, #48]	; (8004554 <__libc_init_array+0x44>)
 8004524:	f002 ff04 	bl	8007330 <_init>
 8004528:	1b64      	subs	r4, r4, r5
 800452a:	10a4      	asrs	r4, r4, #2
 800452c:	2600      	movs	r6, #0
 800452e:	42a6      	cmp	r6, r4
 8004530:	d105      	bne.n	800453e <__libc_init_array+0x2e>
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	f855 3b04 	ldr.w	r3, [r5], #4
 8004538:	4798      	blx	r3
 800453a:	3601      	adds	r6, #1
 800453c:	e7ee      	b.n	800451c <__libc_init_array+0xc>
 800453e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004542:	4798      	blx	r3
 8004544:	3601      	adds	r6, #1
 8004546:	e7f2      	b.n	800452e <__libc_init_array+0x1e>
 8004548:	08007b14 	.word	0x08007b14
 800454c:	08007b14 	.word	0x08007b14
 8004550:	08007b14 	.word	0x08007b14
 8004554:	08007b18 	.word	0x08007b18

08004558 <memset>:
 8004558:	4402      	add	r2, r0
 800455a:	4603      	mov	r3, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	d100      	bne.n	8004562 <memset+0xa>
 8004560:	4770      	bx	lr
 8004562:	f803 1b01 	strb.w	r1, [r3], #1
 8004566:	e7f9      	b.n	800455c <memset+0x4>

08004568 <__cvt>:
 8004568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	ec55 4b10 	vmov	r4, r5, d0
 8004570:	2d00      	cmp	r5, #0
 8004572:	460e      	mov	r6, r1
 8004574:	4619      	mov	r1, r3
 8004576:	462b      	mov	r3, r5
 8004578:	bfbb      	ittet	lt
 800457a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800457e:	461d      	movlt	r5, r3
 8004580:	2300      	movge	r3, #0
 8004582:	232d      	movlt	r3, #45	; 0x2d
 8004584:	700b      	strb	r3, [r1, #0]
 8004586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800458c:	4691      	mov	r9, r2
 800458e:	f023 0820 	bic.w	r8, r3, #32
 8004592:	bfbc      	itt	lt
 8004594:	4622      	movlt	r2, r4
 8004596:	4614      	movlt	r4, r2
 8004598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800459c:	d005      	beq.n	80045aa <__cvt+0x42>
 800459e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045a2:	d100      	bne.n	80045a6 <__cvt+0x3e>
 80045a4:	3601      	adds	r6, #1
 80045a6:	2102      	movs	r1, #2
 80045a8:	e000      	b.n	80045ac <__cvt+0x44>
 80045aa:	2103      	movs	r1, #3
 80045ac:	ab03      	add	r3, sp, #12
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	ab02      	add	r3, sp, #8
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	ec45 4b10 	vmov	d0, r4, r5
 80045b8:	4653      	mov	r3, sl
 80045ba:	4632      	mov	r2, r6
 80045bc:	f000 fcec 	bl	8004f98 <_dtoa_r>
 80045c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045c4:	4607      	mov	r7, r0
 80045c6:	d102      	bne.n	80045ce <__cvt+0x66>
 80045c8:	f019 0f01 	tst.w	r9, #1
 80045cc:	d022      	beq.n	8004614 <__cvt+0xac>
 80045ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045d2:	eb07 0906 	add.w	r9, r7, r6
 80045d6:	d110      	bne.n	80045fa <__cvt+0x92>
 80045d8:	783b      	ldrb	r3, [r7, #0]
 80045da:	2b30      	cmp	r3, #48	; 0x30
 80045dc:	d10a      	bne.n	80045f4 <__cvt+0x8c>
 80045de:	2200      	movs	r2, #0
 80045e0:	2300      	movs	r3, #0
 80045e2:	4620      	mov	r0, r4
 80045e4:	4629      	mov	r1, r5
 80045e6:	f7fc fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 80045ea:	b918      	cbnz	r0, 80045f4 <__cvt+0x8c>
 80045ec:	f1c6 0601 	rsb	r6, r6, #1
 80045f0:	f8ca 6000 	str.w	r6, [sl]
 80045f4:	f8da 3000 	ldr.w	r3, [sl]
 80045f8:	4499      	add	r9, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	4629      	mov	r1, r5
 8004602:	f7fc fa81 	bl	8000b08 <__aeabi_dcmpeq>
 8004606:	b108      	cbz	r0, 800460c <__cvt+0xa4>
 8004608:	f8cd 900c 	str.w	r9, [sp, #12]
 800460c:	2230      	movs	r2, #48	; 0x30
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	454b      	cmp	r3, r9
 8004612:	d307      	bcc.n	8004624 <__cvt+0xbc>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004618:	1bdb      	subs	r3, r3, r7
 800461a:	4638      	mov	r0, r7
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	b004      	add	sp, #16
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	1c59      	adds	r1, r3, #1
 8004626:	9103      	str	r1, [sp, #12]
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e7f0      	b.n	800460e <__cvt+0xa6>

0800462c <__exponent>:
 800462c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800462e:	4603      	mov	r3, r0
 8004630:	2900      	cmp	r1, #0
 8004632:	bfb8      	it	lt
 8004634:	4249      	neglt	r1, r1
 8004636:	f803 2b02 	strb.w	r2, [r3], #2
 800463a:	bfb4      	ite	lt
 800463c:	222d      	movlt	r2, #45	; 0x2d
 800463e:	222b      	movge	r2, #43	; 0x2b
 8004640:	2909      	cmp	r1, #9
 8004642:	7042      	strb	r2, [r0, #1]
 8004644:	dd2a      	ble.n	800469c <__exponent+0x70>
 8004646:	f10d 0407 	add.w	r4, sp, #7
 800464a:	46a4      	mov	ip, r4
 800464c:	270a      	movs	r7, #10
 800464e:	46a6      	mov	lr, r4
 8004650:	460a      	mov	r2, r1
 8004652:	fb91 f6f7 	sdiv	r6, r1, r7
 8004656:	fb07 1516 	mls	r5, r7, r6, r1
 800465a:	3530      	adds	r5, #48	; 0x30
 800465c:	2a63      	cmp	r2, #99	; 0x63
 800465e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004666:	4631      	mov	r1, r6
 8004668:	dcf1      	bgt.n	800464e <__exponent+0x22>
 800466a:	3130      	adds	r1, #48	; 0x30
 800466c:	f1ae 0502 	sub.w	r5, lr, #2
 8004670:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004674:	1c44      	adds	r4, r0, #1
 8004676:	4629      	mov	r1, r5
 8004678:	4561      	cmp	r1, ip
 800467a:	d30a      	bcc.n	8004692 <__exponent+0x66>
 800467c:	f10d 0209 	add.w	r2, sp, #9
 8004680:	eba2 020e 	sub.w	r2, r2, lr
 8004684:	4565      	cmp	r5, ip
 8004686:	bf88      	it	hi
 8004688:	2200      	movhi	r2, #0
 800468a:	4413      	add	r3, r2
 800468c:	1a18      	subs	r0, r3, r0
 800468e:	b003      	add	sp, #12
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004696:	f804 2f01 	strb.w	r2, [r4, #1]!
 800469a:	e7ed      	b.n	8004678 <__exponent+0x4c>
 800469c:	2330      	movs	r3, #48	; 0x30
 800469e:	3130      	adds	r1, #48	; 0x30
 80046a0:	7083      	strb	r3, [r0, #2]
 80046a2:	70c1      	strb	r1, [r0, #3]
 80046a4:	1d03      	adds	r3, r0, #4
 80046a6:	e7f1      	b.n	800468c <__exponent+0x60>

080046a8 <_printf_float>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	ed2d 8b02 	vpush	{d8}
 80046b0:	b08d      	sub	sp, #52	; 0x34
 80046b2:	460c      	mov	r4, r1
 80046b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80046b8:	4616      	mov	r6, r2
 80046ba:	461f      	mov	r7, r3
 80046bc:	4605      	mov	r5, r0
 80046be:	f001 fa59 	bl	8005b74 <_localeconv_r>
 80046c2:	f8d0 a000 	ldr.w	sl, [r0]
 80046c6:	4650      	mov	r0, sl
 80046c8:	f7fb fda2 	bl	8000210 <strlen>
 80046cc:	2300      	movs	r3, #0
 80046ce:	930a      	str	r3, [sp, #40]	; 0x28
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	f8d8 3000 	ldr.w	r3, [r8]
 80046d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80046dc:	3307      	adds	r3, #7
 80046de:	f023 0307 	bic.w	r3, r3, #7
 80046e2:	f103 0208 	add.w	r2, r3, #8
 80046e6:	f8c8 2000 	str.w	r2, [r8]
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80046f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80046fa:	9307      	str	r3, [sp, #28]
 80046fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8004700:	ee08 0a10 	vmov	s16, r0
 8004704:	4b9f      	ldr	r3, [pc, #636]	; (8004984 <_printf_float+0x2dc>)
 8004706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	f7fc fa2d 	bl	8000b6c <__aeabi_dcmpun>
 8004712:	bb88      	cbnz	r0, 8004778 <_printf_float+0xd0>
 8004714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004718:	4b9a      	ldr	r3, [pc, #616]	; (8004984 <_printf_float+0x2dc>)
 800471a:	f04f 32ff 	mov.w	r2, #4294967295
 800471e:	f7fc fa07 	bl	8000b30 <__aeabi_dcmple>
 8004722:	bb48      	cbnz	r0, 8004778 <_printf_float+0xd0>
 8004724:	2200      	movs	r2, #0
 8004726:	2300      	movs	r3, #0
 8004728:	4640      	mov	r0, r8
 800472a:	4649      	mov	r1, r9
 800472c:	f7fc f9f6 	bl	8000b1c <__aeabi_dcmplt>
 8004730:	b110      	cbz	r0, 8004738 <_printf_float+0x90>
 8004732:	232d      	movs	r3, #45	; 0x2d
 8004734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004738:	4b93      	ldr	r3, [pc, #588]	; (8004988 <_printf_float+0x2e0>)
 800473a:	4894      	ldr	r0, [pc, #592]	; (800498c <_printf_float+0x2e4>)
 800473c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004740:	bf94      	ite	ls
 8004742:	4698      	movls	r8, r3
 8004744:	4680      	movhi	r8, r0
 8004746:	2303      	movs	r3, #3
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	9b05      	ldr	r3, [sp, #20]
 800474c:	f023 0204 	bic.w	r2, r3, #4
 8004750:	6022      	str	r2, [r4, #0]
 8004752:	f04f 0900 	mov.w	r9, #0
 8004756:	9700      	str	r7, [sp, #0]
 8004758:	4633      	mov	r3, r6
 800475a:	aa0b      	add	r2, sp, #44	; 0x2c
 800475c:	4621      	mov	r1, r4
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f9d8 	bl	8004b14 <_printf_common>
 8004764:	3001      	adds	r0, #1
 8004766:	f040 8090 	bne.w	800488a <_printf_float+0x1e2>
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	b00d      	add	sp, #52	; 0x34
 8004770:	ecbd 8b02 	vpop	{d8}
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	4642      	mov	r2, r8
 800477a:	464b      	mov	r3, r9
 800477c:	4640      	mov	r0, r8
 800477e:	4649      	mov	r1, r9
 8004780:	f7fc f9f4 	bl	8000b6c <__aeabi_dcmpun>
 8004784:	b140      	cbz	r0, 8004798 <_printf_float+0xf0>
 8004786:	464b      	mov	r3, r9
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfbc      	itt	lt
 800478c:	232d      	movlt	r3, #45	; 0x2d
 800478e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004792:	487f      	ldr	r0, [pc, #508]	; (8004990 <_printf_float+0x2e8>)
 8004794:	4b7f      	ldr	r3, [pc, #508]	; (8004994 <_printf_float+0x2ec>)
 8004796:	e7d1      	b.n	800473c <_printf_float+0x94>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800479e:	9206      	str	r2, [sp, #24]
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	d13f      	bne.n	8004824 <_printf_float+0x17c>
 80047a4:	2306      	movs	r3, #6
 80047a6:	6063      	str	r3, [r4, #4]
 80047a8:	9b05      	ldr	r3, [sp, #20]
 80047aa:	6861      	ldr	r1, [r4, #4]
 80047ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80047b0:	2300      	movs	r3, #0
 80047b2:	9303      	str	r3, [sp, #12]
 80047b4:	ab0a      	add	r3, sp, #40	; 0x28
 80047b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80047ba:	ab09      	add	r3, sp, #36	; 0x24
 80047bc:	ec49 8b10 	vmov	d0, r8, r9
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	6022      	str	r2, [r4, #0]
 80047c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80047c8:	4628      	mov	r0, r5
 80047ca:	f7ff fecd 	bl	8004568 <__cvt>
 80047ce:	9b06      	ldr	r3, [sp, #24]
 80047d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047d2:	2b47      	cmp	r3, #71	; 0x47
 80047d4:	4680      	mov	r8, r0
 80047d6:	d108      	bne.n	80047ea <_printf_float+0x142>
 80047d8:	1cc8      	adds	r0, r1, #3
 80047da:	db02      	blt.n	80047e2 <_printf_float+0x13a>
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	4299      	cmp	r1, r3
 80047e0:	dd41      	ble.n	8004866 <_printf_float+0x1be>
 80047e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80047e6:	fa5f fb8b 	uxtb.w	fp, fp
 80047ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047ee:	d820      	bhi.n	8004832 <_printf_float+0x18a>
 80047f0:	3901      	subs	r1, #1
 80047f2:	465a      	mov	r2, fp
 80047f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047f8:	9109      	str	r1, [sp, #36]	; 0x24
 80047fa:	f7ff ff17 	bl	800462c <__exponent>
 80047fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004800:	1813      	adds	r3, r2, r0
 8004802:	2a01      	cmp	r2, #1
 8004804:	4681      	mov	r9, r0
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	dc02      	bgt.n	8004810 <_printf_float+0x168>
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	07d2      	lsls	r2, r2, #31
 800480e:	d501      	bpl.n	8004814 <_printf_float+0x16c>
 8004810:	3301      	adds	r3, #1
 8004812:	6123      	str	r3, [r4, #16]
 8004814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004818:	2b00      	cmp	r3, #0
 800481a:	d09c      	beq.n	8004756 <_printf_float+0xae>
 800481c:	232d      	movs	r3, #45	; 0x2d
 800481e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004822:	e798      	b.n	8004756 <_printf_float+0xae>
 8004824:	9a06      	ldr	r2, [sp, #24]
 8004826:	2a47      	cmp	r2, #71	; 0x47
 8004828:	d1be      	bne.n	80047a8 <_printf_float+0x100>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1bc      	bne.n	80047a8 <_printf_float+0x100>
 800482e:	2301      	movs	r3, #1
 8004830:	e7b9      	b.n	80047a6 <_printf_float+0xfe>
 8004832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004836:	d118      	bne.n	800486a <_printf_float+0x1c2>
 8004838:	2900      	cmp	r1, #0
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	dd0b      	ble.n	8004856 <_printf_float+0x1ae>
 800483e:	6121      	str	r1, [r4, #16]
 8004840:	b913      	cbnz	r3, 8004848 <_printf_float+0x1a0>
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	07d0      	lsls	r0, r2, #31
 8004846:	d502      	bpl.n	800484e <_printf_float+0x1a6>
 8004848:	3301      	adds	r3, #1
 800484a:	440b      	add	r3, r1
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004850:	f04f 0900 	mov.w	r9, #0
 8004854:	e7de      	b.n	8004814 <_printf_float+0x16c>
 8004856:	b913      	cbnz	r3, 800485e <_printf_float+0x1b6>
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	07d2      	lsls	r2, r2, #31
 800485c:	d501      	bpl.n	8004862 <_printf_float+0x1ba>
 800485e:	3302      	adds	r3, #2
 8004860:	e7f4      	b.n	800484c <_printf_float+0x1a4>
 8004862:	2301      	movs	r3, #1
 8004864:	e7f2      	b.n	800484c <_printf_float+0x1a4>
 8004866:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800486a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800486c:	4299      	cmp	r1, r3
 800486e:	db05      	blt.n	800487c <_printf_float+0x1d4>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	6121      	str	r1, [r4, #16]
 8004874:	07d8      	lsls	r0, r3, #31
 8004876:	d5ea      	bpl.n	800484e <_printf_float+0x1a6>
 8004878:	1c4b      	adds	r3, r1, #1
 800487a:	e7e7      	b.n	800484c <_printf_float+0x1a4>
 800487c:	2900      	cmp	r1, #0
 800487e:	bfd4      	ite	le
 8004880:	f1c1 0202 	rsble	r2, r1, #2
 8004884:	2201      	movgt	r2, #1
 8004886:	4413      	add	r3, r2
 8004888:	e7e0      	b.n	800484c <_printf_float+0x1a4>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	055a      	lsls	r2, r3, #21
 800488e:	d407      	bmi.n	80048a0 <_printf_float+0x1f8>
 8004890:	6923      	ldr	r3, [r4, #16]
 8004892:	4642      	mov	r2, r8
 8004894:	4631      	mov	r1, r6
 8004896:	4628      	mov	r0, r5
 8004898:	47b8      	blx	r7
 800489a:	3001      	adds	r0, #1
 800489c:	d12c      	bne.n	80048f8 <_printf_float+0x250>
 800489e:	e764      	b.n	800476a <_printf_float+0xc2>
 80048a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048a4:	f240 80e0 	bls.w	8004a68 <_printf_float+0x3c0>
 80048a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048ac:	2200      	movs	r2, #0
 80048ae:	2300      	movs	r3, #0
 80048b0:	f7fc f92a 	bl	8000b08 <__aeabi_dcmpeq>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d034      	beq.n	8004922 <_printf_float+0x27a>
 80048b8:	4a37      	ldr	r2, [pc, #220]	; (8004998 <_printf_float+0x2f0>)
 80048ba:	2301      	movs	r3, #1
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f af51 	beq.w	800476a <_printf_float+0xc2>
 80048c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048cc:	429a      	cmp	r2, r3
 80048ce:	db02      	blt.n	80048d6 <_printf_float+0x22e>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	07d8      	lsls	r0, r3, #31
 80048d4:	d510      	bpl.n	80048f8 <_printf_float+0x250>
 80048d6:	ee18 3a10 	vmov	r3, s16
 80048da:	4652      	mov	r2, sl
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	47b8      	blx	r7
 80048e2:	3001      	adds	r0, #1
 80048e4:	f43f af41 	beq.w	800476a <_printf_float+0xc2>
 80048e8:	f04f 0800 	mov.w	r8, #0
 80048ec:	f104 091a 	add.w	r9, r4, #26
 80048f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f2:	3b01      	subs	r3, #1
 80048f4:	4543      	cmp	r3, r8
 80048f6:	dc09      	bgt.n	800490c <_printf_float+0x264>
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	079b      	lsls	r3, r3, #30
 80048fc:	f100 8105 	bmi.w	8004b0a <_printf_float+0x462>
 8004900:	68e0      	ldr	r0, [r4, #12]
 8004902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004904:	4298      	cmp	r0, r3
 8004906:	bfb8      	it	lt
 8004908:	4618      	movlt	r0, r3
 800490a:	e730      	b.n	800476e <_printf_float+0xc6>
 800490c:	2301      	movs	r3, #1
 800490e:	464a      	mov	r2, r9
 8004910:	4631      	mov	r1, r6
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	f43f af27 	beq.w	800476a <_printf_float+0xc2>
 800491c:	f108 0801 	add.w	r8, r8, #1
 8004920:	e7e6      	b.n	80048f0 <_printf_float+0x248>
 8004922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	dc39      	bgt.n	800499c <_printf_float+0x2f4>
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <_printf_float+0x2f0>)
 800492a:	2301      	movs	r3, #1
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f af19 	beq.w	800476a <_printf_float+0xc2>
 8004938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800493c:	4313      	orrs	r3, r2
 800493e:	d102      	bne.n	8004946 <_printf_float+0x29e>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	07d9      	lsls	r1, r3, #31
 8004944:	d5d8      	bpl.n	80048f8 <_printf_float+0x250>
 8004946:	ee18 3a10 	vmov	r3, s16
 800494a:	4652      	mov	r2, sl
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	f43f af09 	beq.w	800476a <_printf_float+0xc2>
 8004958:	f04f 0900 	mov.w	r9, #0
 800495c:	f104 0a1a 	add.w	sl, r4, #26
 8004960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004962:	425b      	negs	r3, r3
 8004964:	454b      	cmp	r3, r9
 8004966:	dc01      	bgt.n	800496c <_printf_float+0x2c4>
 8004968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496a:	e792      	b.n	8004892 <_printf_float+0x1ea>
 800496c:	2301      	movs	r3, #1
 800496e:	4652      	mov	r2, sl
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f aef7 	beq.w	800476a <_printf_float+0xc2>
 800497c:	f109 0901 	add.w	r9, r9, #1
 8004980:	e7ee      	b.n	8004960 <_printf_float+0x2b8>
 8004982:	bf00      	nop
 8004984:	7fefffff 	.word	0x7fefffff
 8004988:	08007738 	.word	0x08007738
 800498c:	0800773c 	.word	0x0800773c
 8004990:	08007744 	.word	0x08007744
 8004994:	08007740 	.word	0x08007740
 8004998:	08007748 	.word	0x08007748
 800499c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800499e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049a0:	429a      	cmp	r2, r3
 80049a2:	bfa8      	it	ge
 80049a4:	461a      	movge	r2, r3
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	4691      	mov	r9, r2
 80049aa:	dc37      	bgt.n	8004a1c <_printf_float+0x374>
 80049ac:	f04f 0b00 	mov.w	fp, #0
 80049b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b4:	f104 021a 	add.w	r2, r4, #26
 80049b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049ba:	9305      	str	r3, [sp, #20]
 80049bc:	eba3 0309 	sub.w	r3, r3, r9
 80049c0:	455b      	cmp	r3, fp
 80049c2:	dc33      	bgt.n	8004a2c <_printf_float+0x384>
 80049c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	db3b      	blt.n	8004a44 <_printf_float+0x39c>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	07da      	lsls	r2, r3, #31
 80049d0:	d438      	bmi.n	8004a44 <_printf_float+0x39c>
 80049d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d4:	9a05      	ldr	r2, [sp, #20]
 80049d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049d8:	1a9a      	subs	r2, r3, r2
 80049da:	eba3 0901 	sub.w	r9, r3, r1
 80049de:	4591      	cmp	r9, r2
 80049e0:	bfa8      	it	ge
 80049e2:	4691      	movge	r9, r2
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	dc35      	bgt.n	8004a56 <_printf_float+0x3ae>
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049f2:	f104 0a1a 	add.w	sl, r4, #26
 80049f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	eba3 0309 	sub.w	r3, r3, r9
 8004a00:	4543      	cmp	r3, r8
 8004a02:	f77f af79 	ble.w	80048f8 <_printf_float+0x250>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4652      	mov	r2, sl
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	f43f aeaa 	beq.w	800476a <_printf_float+0xc2>
 8004a16:	f108 0801 	add.w	r8, r8, #1
 8004a1a:	e7ec      	b.n	80049f6 <_printf_float+0x34e>
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4642      	mov	r2, r8
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	d1c0      	bne.n	80049ac <_printf_float+0x304>
 8004a2a:	e69e      	b.n	800476a <_printf_float+0xc2>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4631      	mov	r1, r6
 8004a30:	4628      	mov	r0, r5
 8004a32:	9205      	str	r2, [sp, #20]
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f ae97 	beq.w	800476a <_printf_float+0xc2>
 8004a3c:	9a05      	ldr	r2, [sp, #20]
 8004a3e:	f10b 0b01 	add.w	fp, fp, #1
 8004a42:	e7b9      	b.n	80049b8 <_printf_float+0x310>
 8004a44:	ee18 3a10 	vmov	r3, s16
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b8      	blx	r7
 8004a50:	3001      	adds	r0, #1
 8004a52:	d1be      	bne.n	80049d2 <_printf_float+0x32a>
 8004a54:	e689      	b.n	800476a <_printf_float+0xc2>
 8004a56:	9a05      	ldr	r2, [sp, #20]
 8004a58:	464b      	mov	r3, r9
 8004a5a:	4442      	add	r2, r8
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	d1c1      	bne.n	80049ea <_printf_float+0x342>
 8004a66:	e680      	b.n	800476a <_printf_float+0xc2>
 8004a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a6a:	2a01      	cmp	r2, #1
 8004a6c:	dc01      	bgt.n	8004a72 <_printf_float+0x3ca>
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d538      	bpl.n	8004ae4 <_printf_float+0x43c>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4642      	mov	r2, r8
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b8      	blx	r7
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	f43f ae74 	beq.w	800476a <_printf_float+0xc2>
 8004a82:	ee18 3a10 	vmov	r3, s16
 8004a86:	4652      	mov	r2, sl
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f ae6b 	beq.w	800476a <_printf_float+0xc2>
 8004a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fc f834 	bl	8000b08 <__aeabi_dcmpeq>
 8004aa0:	b9d8      	cbnz	r0, 8004ada <_printf_float+0x432>
 8004aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa4:	f108 0201 	add.w	r2, r8, #1
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d10e      	bne.n	8004ad2 <_printf_float+0x42a>
 8004ab4:	e659      	b.n	800476a <_printf_float+0xc2>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4652      	mov	r2, sl
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae52 	beq.w	800476a <_printf_float+0xc2>
 8004ac6:	f108 0801 	add.w	r8, r8, #1
 8004aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	4543      	cmp	r3, r8
 8004ad0:	dcf1      	bgt.n	8004ab6 <_printf_float+0x40e>
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad8:	e6dc      	b.n	8004894 <_printf_float+0x1ec>
 8004ada:	f04f 0800 	mov.w	r8, #0
 8004ade:	f104 0a1a 	add.w	sl, r4, #26
 8004ae2:	e7f2      	b.n	8004aca <_printf_float+0x422>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	e7df      	b.n	8004aaa <_printf_float+0x402>
 8004aea:	2301      	movs	r3, #1
 8004aec:	464a      	mov	r2, r9
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f ae38 	beq.w	800476a <_printf_float+0xc2>
 8004afa:	f108 0801 	add.w	r8, r8, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	4543      	cmp	r3, r8
 8004b06:	dcf0      	bgt.n	8004aea <_printf_float+0x442>
 8004b08:	e6fa      	b.n	8004900 <_printf_float+0x258>
 8004b0a:	f04f 0800 	mov.w	r8, #0
 8004b0e:	f104 0919 	add.w	r9, r4, #25
 8004b12:	e7f4      	b.n	8004afe <_printf_float+0x456>

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4616      	mov	r6, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bfb8      	it	lt
 8004b28:	4613      	movlt	r3, r2
 8004b2a:	6033      	str	r3, [r6, #0]
 8004b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b30:	4607      	mov	r7, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	b10a      	cbz	r2, 8004b3a <_printf_common+0x26>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	0699      	lsls	r1, r3, #26
 8004b3e:	bf42      	ittt	mi
 8004b40:	6833      	ldrmi	r3, [r6, #0]
 8004b42:	3302      	addmi	r3, #2
 8004b44:	6033      	strmi	r3, [r6, #0]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d106      	bne.n	8004b5c <_printf_common+0x48>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	6832      	ldr	r2, [r6, #0]
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc26      	bgt.n	8004baa <_printf_common+0x96>
 8004b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b60:	1e13      	subs	r3, r2, #0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	0692      	lsls	r2, r2, #26
 8004b6a:	d42b      	bmi.n	8004bc4 <_printf_common+0xb0>
 8004b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d01e      	beq.n	8004bb8 <_printf_common+0xa4>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	68e5      	ldr	r5, [r4, #12]
 8004b7e:	6832      	ldr	r2, [r6, #0]
 8004b80:	f003 0306 	and.w	r3, r3, #6
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	bf08      	it	eq
 8004b88:	1aad      	subeq	r5, r5, r2
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	bf0c      	ite	eq
 8004b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b94:	2500      	movne	r5, #0
 8004b96:	4293      	cmp	r3, r2
 8004b98:	bfc4      	itt	gt
 8004b9a:	1a9b      	subgt	r3, r3, r2
 8004b9c:	18ed      	addgt	r5, r5, r3
 8004b9e:	2600      	movs	r6, #0
 8004ba0:	341a      	adds	r4, #26
 8004ba2:	42b5      	cmp	r5, r6
 8004ba4:	d11a      	bne.n	8004bdc <_printf_common+0xc8>
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	e008      	b.n	8004bbc <_printf_common+0xa8>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4649      	mov	r1, r9
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	47c0      	blx	r8
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0xac>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc0:	3501      	adds	r5, #1
 8004bc2:	e7c6      	b.n	8004b52 <_printf_common+0x3e>
 8004bc4:	18e1      	adds	r1, r4, r3
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	2030      	movs	r0, #48	; 0x30
 8004bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bce:	4422      	add	r2, r4
 8004bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd8:	3302      	adds	r3, #2
 8004bda:	e7c7      	b.n	8004b6c <_printf_common+0x58>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4622      	mov	r2, r4
 8004be0:	4649      	mov	r1, r9
 8004be2:	4638      	mov	r0, r7
 8004be4:	47c0      	blx	r8
 8004be6:	3001      	adds	r0, #1
 8004be8:	d0e6      	beq.n	8004bb8 <_printf_common+0xa4>
 8004bea:	3601      	adds	r6, #1
 8004bec:	e7d9      	b.n	8004ba2 <_printf_common+0x8e>
	...

08004bf0 <_printf_i>:
 8004bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf4:	7e0f      	ldrb	r7, [r1, #24]
 8004bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bf8:	2f78      	cmp	r7, #120	; 0x78
 8004bfa:	4691      	mov	r9, r2
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	469a      	mov	sl, r3
 8004c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c06:	d807      	bhi.n	8004c18 <_printf_i+0x28>
 8004c08:	2f62      	cmp	r7, #98	; 0x62
 8004c0a:	d80a      	bhi.n	8004c22 <_printf_i+0x32>
 8004c0c:	2f00      	cmp	r7, #0
 8004c0e:	f000 80d8 	beq.w	8004dc2 <_printf_i+0x1d2>
 8004c12:	2f58      	cmp	r7, #88	; 0x58
 8004c14:	f000 80a3 	beq.w	8004d5e <_printf_i+0x16e>
 8004c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c20:	e03a      	b.n	8004c98 <_printf_i+0xa8>
 8004c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c26:	2b15      	cmp	r3, #21
 8004c28:	d8f6      	bhi.n	8004c18 <_printf_i+0x28>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_printf_i+0x40>)
 8004c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c9d 	.word	0x08004c9d
 8004c38:	08004c19 	.word	0x08004c19
 8004c3c:	08004c19 	.word	0x08004c19
 8004c40:	08004c19 	.word	0x08004c19
 8004c44:	08004c19 	.word	0x08004c19
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004c19 	.word	0x08004c19
 8004c50:	08004c19 	.word	0x08004c19
 8004c54:	08004c19 	.word	0x08004c19
 8004c58:	08004c19 	.word	0x08004c19
 8004c5c:	08004da9 	.word	0x08004da9
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004d8b 	.word	0x08004d8b
 8004c68:	08004c19 	.word	0x08004c19
 8004c6c:	08004c19 	.word	0x08004c19
 8004c70:	08004dcb 	.word	0x08004dcb
 8004c74:	08004c19 	.word	0x08004c19
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004c19 	.word	0x08004c19
 8004c80:	08004c19 	.word	0x08004c19
 8004c84:	08004d93 	.word	0x08004d93
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	602a      	str	r2, [r5, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0a3      	b.n	8004de4 <_printf_i+0x1f4>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	6829      	ldr	r1, [r5, #0]
 8004ca0:	0606      	lsls	r6, r0, #24
 8004ca2:	f101 0304 	add.w	r3, r1, #4
 8004ca6:	d50a      	bpl.n	8004cbe <_printf_i+0xce>
 8004ca8:	680e      	ldr	r6, [r1, #0]
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	da03      	bge.n	8004cb8 <_printf_i+0xc8>
 8004cb0:	232d      	movs	r3, #45	; 0x2d
 8004cb2:	4276      	negs	r6, r6
 8004cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb8:	485e      	ldr	r0, [pc, #376]	; (8004e34 <_printf_i+0x244>)
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e019      	b.n	8004cf2 <_printf_i+0x102>
 8004cbe:	680e      	ldr	r6, [r1, #0]
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cc6:	bf18      	it	ne
 8004cc8:	b236      	sxthne	r6, r6
 8004cca:	e7ef      	b.n	8004cac <_printf_i+0xbc>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	1d19      	adds	r1, r3, #4
 8004cd2:	6029      	str	r1, [r5, #0]
 8004cd4:	0601      	lsls	r1, r0, #24
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0xec>
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0xf2>
 8004cdc:	0646      	lsls	r6, r0, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0xe8>
 8004ce0:	881e      	ldrh	r6, [r3, #0]
 8004ce2:	4854      	ldr	r0, [pc, #336]	; (8004e34 <_printf_i+0x244>)
 8004ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2308      	moveq	r3, #8
 8004cea:	230a      	movne	r3, #10
 8004cec:	2100      	movs	r1, #0
 8004cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf2:	6865      	ldr	r5, [r4, #4]
 8004cf4:	60a5      	str	r5, [r4, #8]
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	bfa2      	ittt	ge
 8004cfa:	6821      	ldrge	r1, [r4, #0]
 8004cfc:	f021 0104 	bicge.w	r1, r1, #4
 8004d00:	6021      	strge	r1, [r4, #0]
 8004d02:	b90e      	cbnz	r6, 8004d08 <_printf_i+0x118>
 8004d04:	2d00      	cmp	r5, #0
 8004d06:	d04d      	beq.n	8004da4 <_printf_i+0x1b4>
 8004d08:	4615      	mov	r5, r2
 8004d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004d12:	5dc7      	ldrb	r7, [r0, r7]
 8004d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d18:	4637      	mov	r7, r6
 8004d1a:	42bb      	cmp	r3, r7
 8004d1c:	460e      	mov	r6, r1
 8004d1e:	d9f4      	bls.n	8004d0a <_printf_i+0x11a>
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d10b      	bne.n	8004d3c <_printf_i+0x14c>
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	07de      	lsls	r6, r3, #31
 8004d28:	d508      	bpl.n	8004d3c <_printf_i+0x14c>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	6861      	ldr	r1, [r4, #4]
 8004d2e:	4299      	cmp	r1, r3
 8004d30:	bfde      	ittt	le
 8004d32:	2330      	movle	r3, #48	; 0x30
 8004d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d3c:	1b52      	subs	r2, r2, r5
 8004d3e:	6122      	str	r2, [r4, #16]
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	464b      	mov	r3, r9
 8004d46:	aa03      	add	r2, sp, #12
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f7ff fee2 	bl	8004b14 <_printf_common>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d14c      	bne.n	8004dee <_printf_i+0x1fe>
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295
 8004d58:	b004      	add	sp, #16
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	4835      	ldr	r0, [pc, #212]	; (8004e34 <_printf_i+0x244>)
 8004d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d64:	6829      	ldr	r1, [r5, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d6c:	6029      	str	r1, [r5, #0]
 8004d6e:	061d      	lsls	r5, r3, #24
 8004d70:	d514      	bpl.n	8004d9c <_printf_i+0x1ac>
 8004d72:	07df      	lsls	r7, r3, #31
 8004d74:	bf44      	itt	mi
 8004d76:	f043 0320 	orrmi.w	r3, r3, #32
 8004d7a:	6023      	strmi	r3, [r4, #0]
 8004d7c:	b91e      	cbnz	r6, 8004d86 <_printf_i+0x196>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f023 0320 	bic.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	2310      	movs	r3, #16
 8004d88:	e7b0      	b.n	8004cec <_printf_i+0xfc>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	2378      	movs	r3, #120	; 0x78
 8004d94:	4828      	ldr	r0, [pc, #160]	; (8004e38 <_printf_i+0x248>)
 8004d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9a:	e7e3      	b.n	8004d64 <_printf_i+0x174>
 8004d9c:	0659      	lsls	r1, r3, #25
 8004d9e:	bf48      	it	mi
 8004da0:	b2b6      	uxthmi	r6, r6
 8004da2:	e7e6      	b.n	8004d72 <_printf_i+0x182>
 8004da4:	4615      	mov	r5, r2
 8004da6:	e7bb      	b.n	8004d20 <_printf_i+0x130>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	6826      	ldr	r6, [r4, #0]
 8004dac:	6961      	ldr	r1, [r4, #20]
 8004dae:	1d18      	adds	r0, r3, #4
 8004db0:	6028      	str	r0, [r5, #0]
 8004db2:	0635      	lsls	r5, r6, #24
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0x1cc>
 8004db8:	6019      	str	r1, [r3, #0]
 8004dba:	e002      	b.n	8004dc2 <_printf_i+0x1d2>
 8004dbc:	0670      	lsls	r0, r6, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0x1c8>
 8004dc0:	8019      	strh	r1, [r3, #0]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	4615      	mov	r5, r2
 8004dc8:	e7ba      	b.n	8004d40 <_printf_i+0x150>
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	1d1a      	adds	r2, r3, #4
 8004dce:	602a      	str	r2, [r5, #0]
 8004dd0:	681d      	ldr	r5, [r3, #0]
 8004dd2:	6862      	ldr	r2, [r4, #4]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f7fb fa22 	bl	8000220 <memchr>
 8004ddc:	b108      	cbz	r0, 8004de2 <_printf_i+0x1f2>
 8004dde:	1b40      	subs	r0, r0, r5
 8004de0:	6060      	str	r0, [r4, #4]
 8004de2:	6863      	ldr	r3, [r4, #4]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2300      	movs	r3, #0
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dec:	e7a8      	b.n	8004d40 <_printf_i+0x150>
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	462a      	mov	r2, r5
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d0ab      	beq.n	8004d54 <_printf_i+0x164>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	079b      	lsls	r3, r3, #30
 8004e00:	d413      	bmi.n	8004e2a <_printf_i+0x23a>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	4298      	cmp	r0, r3
 8004e08:	bfb8      	it	lt
 8004e0a:	4618      	movlt	r0, r3
 8004e0c:	e7a4      	b.n	8004d58 <_printf_i+0x168>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4632      	mov	r2, r6
 8004e12:	4649      	mov	r1, r9
 8004e14:	4640      	mov	r0, r8
 8004e16:	47d0      	blx	sl
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d09b      	beq.n	8004d54 <_printf_i+0x164>
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	9903      	ldr	r1, [sp, #12]
 8004e22:	1a5b      	subs	r3, r3, r1
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dcf2      	bgt.n	8004e0e <_printf_i+0x21e>
 8004e28:	e7eb      	b.n	8004e02 <_printf_i+0x212>
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	f104 0619 	add.w	r6, r4, #25
 8004e30:	e7f5      	b.n	8004e1e <_printf_i+0x22e>
 8004e32:	bf00      	nop
 8004e34:	0800774a 	.word	0x0800774a
 8004e38:	0800775b 	.word	0x0800775b

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	; 0x70
 8004e42:	ab1d      	add	r3, sp, #116	; 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	; (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	; (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f001 fb78 	bl	8006554 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	; 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000010 	.word	0x20000010
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <quorem>:
 8004e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	6903      	ldr	r3, [r0, #16]
 8004e82:	690c      	ldr	r4, [r1, #16]
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	4607      	mov	r7, r0
 8004e88:	f2c0 8081 	blt.w	8004f8e <quorem+0x112>
 8004e8c:	3c01      	subs	r4, #1
 8004e8e:	f101 0814 	add.w	r8, r1, #20
 8004e92:	f100 0514 	add.w	r5, r0, #20
 8004e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004eac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb4:	d331      	bcc.n	8004f1a <quorem+0x9e>
 8004eb6:	f04f 0e00 	mov.w	lr, #0
 8004eba:	4640      	mov	r0, r8
 8004ebc:	46ac      	mov	ip, r5
 8004ebe:	46f2      	mov	sl, lr
 8004ec0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ec4:	b293      	uxth	r3, r2
 8004ec6:	fb06 e303 	mla	r3, r6, r3, lr
 8004eca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	ebaa 0303 	sub.w	r3, sl, r3
 8004ed4:	f8dc a000 	ldr.w	sl, [ip]
 8004ed8:	0c12      	lsrs	r2, r2, #16
 8004eda:	fa13 f38a 	uxtah	r3, r3, sl
 8004ede:	fb06 e202 	mla	r2, r6, r2, lr
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	9b00      	ldr	r3, [sp, #0]
 8004ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eea:	b292      	uxth	r2, r2
 8004eec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ef4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ef8:	4581      	cmp	r9, r0
 8004efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004efe:	f84c 3b04 	str.w	r3, [ip], #4
 8004f02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f06:	d2db      	bcs.n	8004ec0 <quorem+0x44>
 8004f08:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f0c:	b92b      	cbnz	r3, 8004f1a <quorem+0x9e>
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	429d      	cmp	r5, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	d32e      	bcc.n	8004f76 <quorem+0xfa>
 8004f18:	613c      	str	r4, [r7, #16]
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f001 f8c6 	bl	80060ac <__mcmp>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	db24      	blt.n	8004f6e <quorem+0xf2>
 8004f24:	3601      	adds	r6, #1
 8004f26:	4628      	mov	r0, r5
 8004f28:	f04f 0c00 	mov.w	ip, #0
 8004f2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f30:	f8d0 e000 	ldr.w	lr, [r0]
 8004f34:	b293      	uxth	r3, r2
 8004f36:	ebac 0303 	sub.w	r3, ip, r3
 8004f3a:	0c12      	lsrs	r2, r2, #16
 8004f3c:	fa13 f38e 	uxtah	r3, r3, lr
 8004f40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f4e:	45c1      	cmp	r9, r8
 8004f50:	f840 3b04 	str.w	r3, [r0], #4
 8004f54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f58:	d2e8      	bcs.n	8004f2c <quorem+0xb0>
 8004f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f62:	b922      	cbnz	r2, 8004f6e <quorem+0xf2>
 8004f64:	3b04      	subs	r3, #4
 8004f66:	429d      	cmp	r5, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	d30a      	bcc.n	8004f82 <quorem+0x106>
 8004f6c:	613c      	str	r4, [r7, #16]
 8004f6e:	4630      	mov	r0, r6
 8004f70:	b003      	add	sp, #12
 8004f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	3b04      	subs	r3, #4
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d1cc      	bne.n	8004f18 <quorem+0x9c>
 8004f7e:	3c01      	subs	r4, #1
 8004f80:	e7c7      	b.n	8004f12 <quorem+0x96>
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	d1f0      	bne.n	8004f6c <quorem+0xf0>
 8004f8a:	3c01      	subs	r4, #1
 8004f8c:	e7eb      	b.n	8004f66 <quorem+0xea>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e7ee      	b.n	8004f70 <quorem+0xf4>
 8004f92:	0000      	movs	r0, r0
 8004f94:	0000      	movs	r0, r0
	...

08004f98 <_dtoa_r>:
 8004f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9c:	ed2d 8b04 	vpush	{d8-d9}
 8004fa0:	ec57 6b10 	vmov	r6, r7, d0
 8004fa4:	b093      	sub	sp, #76	; 0x4c
 8004fa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004fa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004fac:	9106      	str	r1, [sp, #24]
 8004fae:	ee10 aa10 	vmov	sl, s0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8004fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb8:	46bb      	mov	fp, r7
 8004fba:	b975      	cbnz	r5, 8004fda <_dtoa_r+0x42>
 8004fbc:	2010      	movs	r0, #16
 8004fbe:	f000 fddd 	bl	8005b7c <malloc>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8004fc6:	b920      	cbnz	r0, 8004fd2 <_dtoa_r+0x3a>
 8004fc8:	4ba7      	ldr	r3, [pc, #668]	; (8005268 <_dtoa_r+0x2d0>)
 8004fca:	21ea      	movs	r1, #234	; 0xea
 8004fcc:	48a7      	ldr	r0, [pc, #668]	; (800526c <_dtoa_r+0x2d4>)
 8004fce:	f001 fbd1 	bl	8006774 <__assert_func>
 8004fd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fd6:	6005      	str	r5, [r0, #0]
 8004fd8:	60c5      	str	r5, [r0, #12]
 8004fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	b151      	cbz	r1, 8004ff6 <_dtoa_r+0x5e>
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	604a      	str	r2, [r1, #4]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4093      	lsls	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
 8004fea:	4620      	mov	r0, r4
 8004fec:	f000 fe1c 	bl	8005c28 <_Bfree>
 8004ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	1e3b      	subs	r3, r7, #0
 8004ff8:	bfaa      	itet	ge
 8004ffa:	2300      	movge	r3, #0
 8004ffc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005000:	f8c8 3000 	strge.w	r3, [r8]
 8005004:	4b9a      	ldr	r3, [pc, #616]	; (8005270 <_dtoa_r+0x2d8>)
 8005006:	bfbc      	itt	lt
 8005008:	2201      	movlt	r2, #1
 800500a:	f8c8 2000 	strlt.w	r2, [r8]
 800500e:	ea33 030b 	bics.w	r3, r3, fp
 8005012:	d11b      	bne.n	800504c <_dtoa_r+0xb4>
 8005014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005016:	f242 730f 	movw	r3, #9999	; 0x270f
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005020:	4333      	orrs	r3, r6
 8005022:	f000 8592 	beq.w	8005b4a <_dtoa_r+0xbb2>
 8005026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005028:	b963      	cbnz	r3, 8005044 <_dtoa_r+0xac>
 800502a:	4b92      	ldr	r3, [pc, #584]	; (8005274 <_dtoa_r+0x2dc>)
 800502c:	e022      	b.n	8005074 <_dtoa_r+0xdc>
 800502e:	4b92      	ldr	r3, [pc, #584]	; (8005278 <_dtoa_r+0x2e0>)
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	3308      	adds	r3, #8
 8005034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	9801      	ldr	r0, [sp, #4]
 800503a:	b013      	add	sp, #76	; 0x4c
 800503c:	ecbd 8b04 	vpop	{d8-d9}
 8005040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005044:	4b8b      	ldr	r3, [pc, #556]	; (8005274 <_dtoa_r+0x2dc>)
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	3303      	adds	r3, #3
 800504a:	e7f3      	b.n	8005034 <_dtoa_r+0x9c>
 800504c:	2200      	movs	r2, #0
 800504e:	2300      	movs	r3, #0
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb fd58 	bl	8000b08 <__aeabi_dcmpeq>
 8005058:	ec4b ab19 	vmov	d9, sl, fp
 800505c:	4680      	mov	r8, r0
 800505e:	b158      	cbz	r0, 8005078 <_dtoa_r+0xe0>
 8005060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005062:	2301      	movs	r3, #1
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 856b 	beq.w	8005b44 <_dtoa_r+0xbac>
 800506e:	4883      	ldr	r0, [pc, #524]	; (800527c <_dtoa_r+0x2e4>)
 8005070:	6018      	str	r0, [r3, #0]
 8005072:	1e43      	subs	r3, r0, #1
 8005074:	9301      	str	r3, [sp, #4]
 8005076:	e7df      	b.n	8005038 <_dtoa_r+0xa0>
 8005078:	ec4b ab10 	vmov	d0, sl, fp
 800507c:	aa10      	add	r2, sp, #64	; 0x40
 800507e:	a911      	add	r1, sp, #68	; 0x44
 8005080:	4620      	mov	r0, r4
 8005082:	f001 f8b9 	bl	80061f8 <__d2b>
 8005086:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800508a:	ee08 0a10 	vmov	s16, r0
 800508e:	2d00      	cmp	r5, #0
 8005090:	f000 8084 	beq.w	800519c <_dtoa_r+0x204>
 8005094:	ee19 3a90 	vmov	r3, s19
 8005098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800509c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80050a0:	4656      	mov	r6, sl
 80050a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80050a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80050ae:	4b74      	ldr	r3, [pc, #464]	; (8005280 <_dtoa_r+0x2e8>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	4630      	mov	r0, r6
 80050b4:	4639      	mov	r1, r7
 80050b6:	f7fb f907 	bl	80002c8 <__aeabi_dsub>
 80050ba:	a365      	add	r3, pc, #404	; (adr r3, 8005250 <_dtoa_r+0x2b8>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb faba 	bl	8000638 <__aeabi_dmul>
 80050c4:	a364      	add	r3, pc, #400	; (adr r3, 8005258 <_dtoa_r+0x2c0>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb f8ff 	bl	80002cc <__adddf3>
 80050ce:	4606      	mov	r6, r0
 80050d0:	4628      	mov	r0, r5
 80050d2:	460f      	mov	r7, r1
 80050d4:	f7fb fa46 	bl	8000564 <__aeabi_i2d>
 80050d8:	a361      	add	r3, pc, #388	; (adr r3, 8005260 <_dtoa_r+0x2c8>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb faab 	bl	8000638 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	f7fb f8ef 	bl	80002cc <__adddf3>
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	f7fb fd51 	bl	8000b98 <__aeabi_d2iz>
 80050f6:	2200      	movs	r2, #0
 80050f8:	9000      	str	r0, [sp, #0]
 80050fa:	2300      	movs	r3, #0
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fd0c 	bl	8000b1c <__aeabi_dcmplt>
 8005104:	b150      	cbz	r0, 800511c <_dtoa_r+0x184>
 8005106:	9800      	ldr	r0, [sp, #0]
 8005108:	f7fb fa2c 	bl	8000564 <__aeabi_i2d>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	f7fb fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 8005114:	b910      	cbnz	r0, 800511c <_dtoa_r+0x184>
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	9b00      	ldr	r3, [sp, #0]
 800511e:	2b16      	cmp	r3, #22
 8005120:	d85a      	bhi.n	80051d8 <_dtoa_r+0x240>
 8005122:	9a00      	ldr	r2, [sp, #0]
 8005124:	4b57      	ldr	r3, [pc, #348]	; (8005284 <_dtoa_r+0x2ec>)
 8005126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	ec51 0b19 	vmov	r0, r1, d9
 8005132:	f7fb fcf3 	bl	8000b1c <__aeabi_dcmplt>
 8005136:	2800      	cmp	r0, #0
 8005138:	d050      	beq.n	80051dc <_dtoa_r+0x244>
 800513a:	9b00      	ldr	r3, [sp, #0]
 800513c:	3b01      	subs	r3, #1
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	930b      	str	r3, [sp, #44]	; 0x2c
 8005144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005146:	1b5d      	subs	r5, r3, r5
 8005148:	1e6b      	subs	r3, r5, #1
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	bf45      	ittet	mi
 800514e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005152:	9304      	strmi	r3, [sp, #16]
 8005154:	2300      	movpl	r3, #0
 8005156:	2300      	movmi	r3, #0
 8005158:	bf4c      	ite	mi
 800515a:	9305      	strmi	r3, [sp, #20]
 800515c:	9304      	strpl	r3, [sp, #16]
 800515e:	9b00      	ldr	r3, [sp, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	db3d      	blt.n	80051e0 <_dtoa_r+0x248>
 8005164:	9b05      	ldr	r3, [sp, #20]
 8005166:	9a00      	ldr	r2, [sp, #0]
 8005168:	920a      	str	r2, [sp, #40]	; 0x28
 800516a:	4413      	add	r3, r2
 800516c:	9305      	str	r3, [sp, #20]
 800516e:	2300      	movs	r3, #0
 8005170:	9307      	str	r3, [sp, #28]
 8005172:	9b06      	ldr	r3, [sp, #24]
 8005174:	2b09      	cmp	r3, #9
 8005176:	f200 8089 	bhi.w	800528c <_dtoa_r+0x2f4>
 800517a:	2b05      	cmp	r3, #5
 800517c:	bfc4      	itt	gt
 800517e:	3b04      	subgt	r3, #4
 8005180:	9306      	strgt	r3, [sp, #24]
 8005182:	9b06      	ldr	r3, [sp, #24]
 8005184:	f1a3 0302 	sub.w	r3, r3, #2
 8005188:	bfcc      	ite	gt
 800518a:	2500      	movgt	r5, #0
 800518c:	2501      	movle	r5, #1
 800518e:	2b03      	cmp	r3, #3
 8005190:	f200 8087 	bhi.w	80052a2 <_dtoa_r+0x30a>
 8005194:	e8df f003 	tbb	[pc, r3]
 8005198:	59383a2d 	.word	0x59383a2d
 800519c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80051a0:	441d      	add	r5, r3
 80051a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	bfc1      	itttt	gt
 80051aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80051b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80051b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051ba:	bfda      	itte	le
 80051bc:	f1c3 0320 	rsble	r3, r3, #32
 80051c0:	fa06 f003 	lslle.w	r0, r6, r3
 80051c4:	4318      	orrgt	r0, r3
 80051c6:	f7fb f9bd 	bl	8000544 <__aeabi_ui2d>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4606      	mov	r6, r0
 80051ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80051d2:	3d01      	subs	r5, #1
 80051d4:	930e      	str	r3, [sp, #56]	; 0x38
 80051d6:	e76a      	b.n	80050ae <_dtoa_r+0x116>
 80051d8:	2301      	movs	r3, #1
 80051da:	e7b2      	b.n	8005142 <_dtoa_r+0x1aa>
 80051dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80051de:	e7b1      	b.n	8005144 <_dtoa_r+0x1ac>
 80051e0:	9b04      	ldr	r3, [sp, #16]
 80051e2:	9a00      	ldr	r2, [sp, #0]
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	4253      	negs	r3, r2
 80051ea:	9307      	str	r3, [sp, #28]
 80051ec:	2300      	movs	r3, #0
 80051ee:	930a      	str	r3, [sp, #40]	; 0x28
 80051f0:	e7bf      	b.n	8005172 <_dtoa_r+0x1da>
 80051f2:	2300      	movs	r3, #0
 80051f4:	9308      	str	r3, [sp, #32]
 80051f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dc55      	bgt.n	80052a8 <_dtoa_r+0x310>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005202:	461a      	mov	r2, r3
 8005204:	9209      	str	r2, [sp, #36]	; 0x24
 8005206:	e00c      	b.n	8005222 <_dtoa_r+0x28a>
 8005208:	2301      	movs	r3, #1
 800520a:	e7f3      	b.n	80051f4 <_dtoa_r+0x25c>
 800520c:	2300      	movs	r3, #0
 800520e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005210:	9308      	str	r3, [sp, #32]
 8005212:	9b00      	ldr	r3, [sp, #0]
 8005214:	4413      	add	r3, r2
 8005216:	9302      	str	r3, [sp, #8]
 8005218:	3301      	adds	r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	9303      	str	r3, [sp, #12]
 800521e:	bfb8      	it	lt
 8005220:	2301      	movlt	r3, #1
 8005222:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005224:	2200      	movs	r2, #0
 8005226:	6042      	str	r2, [r0, #4]
 8005228:	2204      	movs	r2, #4
 800522a:	f102 0614 	add.w	r6, r2, #20
 800522e:	429e      	cmp	r6, r3
 8005230:	6841      	ldr	r1, [r0, #4]
 8005232:	d93d      	bls.n	80052b0 <_dtoa_r+0x318>
 8005234:	4620      	mov	r0, r4
 8005236:	f000 fcb7 	bl	8005ba8 <_Balloc>
 800523a:	9001      	str	r0, [sp, #4]
 800523c:	2800      	cmp	r0, #0
 800523e:	d13b      	bne.n	80052b8 <_dtoa_r+0x320>
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <_dtoa_r+0x2f0>)
 8005242:	4602      	mov	r2, r0
 8005244:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005248:	e6c0      	b.n	8004fcc <_dtoa_r+0x34>
 800524a:	2301      	movs	r3, #1
 800524c:	e7df      	b.n	800520e <_dtoa_r+0x276>
 800524e:	bf00      	nop
 8005250:	636f4361 	.word	0x636f4361
 8005254:	3fd287a7 	.word	0x3fd287a7
 8005258:	8b60c8b3 	.word	0x8b60c8b3
 800525c:	3fc68a28 	.word	0x3fc68a28
 8005260:	509f79fb 	.word	0x509f79fb
 8005264:	3fd34413 	.word	0x3fd34413
 8005268:	08007779 	.word	0x08007779
 800526c:	08007790 	.word	0x08007790
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	08007775 	.word	0x08007775
 8005278:	0800776c 	.word	0x0800776c
 800527c:	08007749 	.word	0x08007749
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	08007880 	.word	0x08007880
 8005288:	080077eb 	.word	0x080077eb
 800528c:	2501      	movs	r5, #1
 800528e:	2300      	movs	r3, #0
 8005290:	9306      	str	r3, [sp, #24]
 8005292:	9508      	str	r5, [sp, #32]
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800529c:	2200      	movs	r2, #0
 800529e:	2312      	movs	r3, #18
 80052a0:	e7b0      	b.n	8005204 <_dtoa_r+0x26c>
 80052a2:	2301      	movs	r3, #1
 80052a4:	9308      	str	r3, [sp, #32]
 80052a6:	e7f5      	b.n	8005294 <_dtoa_r+0x2fc>
 80052a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80052ae:	e7b8      	b.n	8005222 <_dtoa_r+0x28a>
 80052b0:	3101      	adds	r1, #1
 80052b2:	6041      	str	r1, [r0, #4]
 80052b4:	0052      	lsls	r2, r2, #1
 80052b6:	e7b8      	b.n	800522a <_dtoa_r+0x292>
 80052b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ba:	9a01      	ldr	r2, [sp, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	2b0e      	cmp	r3, #14
 80052c2:	f200 809d 	bhi.w	8005400 <_dtoa_r+0x468>
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	f000 809a 	beq.w	8005400 <_dtoa_r+0x468>
 80052cc:	9b00      	ldr	r3, [sp, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dd32      	ble.n	8005338 <_dtoa_r+0x3a0>
 80052d2:	4ab7      	ldr	r2, [pc, #732]	; (80055b0 <_dtoa_r+0x618>)
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052e0:	9b00      	ldr	r3, [sp, #0]
 80052e2:	05d8      	lsls	r0, r3, #23
 80052e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80052e8:	d516      	bpl.n	8005318 <_dtoa_r+0x380>
 80052ea:	4bb2      	ldr	r3, [pc, #712]	; (80055b4 <_dtoa_r+0x61c>)
 80052ec:	ec51 0b19 	vmov	r0, r1, d9
 80052f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052f4:	f7fb faca 	bl	800088c <__aeabi_ddiv>
 80052f8:	f007 070f 	and.w	r7, r7, #15
 80052fc:	4682      	mov	sl, r0
 80052fe:	468b      	mov	fp, r1
 8005300:	2503      	movs	r5, #3
 8005302:	4eac      	ldr	r6, [pc, #688]	; (80055b4 <_dtoa_r+0x61c>)
 8005304:	b957      	cbnz	r7, 800531c <_dtoa_r+0x384>
 8005306:	4642      	mov	r2, r8
 8005308:	464b      	mov	r3, r9
 800530a:	4650      	mov	r0, sl
 800530c:	4659      	mov	r1, fp
 800530e:	f7fb fabd 	bl	800088c <__aeabi_ddiv>
 8005312:	4682      	mov	sl, r0
 8005314:	468b      	mov	fp, r1
 8005316:	e028      	b.n	800536a <_dtoa_r+0x3d2>
 8005318:	2502      	movs	r5, #2
 800531a:	e7f2      	b.n	8005302 <_dtoa_r+0x36a>
 800531c:	07f9      	lsls	r1, r7, #31
 800531e:	d508      	bpl.n	8005332 <_dtoa_r+0x39a>
 8005320:	4640      	mov	r0, r8
 8005322:	4649      	mov	r1, r9
 8005324:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005328:	f7fb f986 	bl	8000638 <__aeabi_dmul>
 800532c:	3501      	adds	r5, #1
 800532e:	4680      	mov	r8, r0
 8005330:	4689      	mov	r9, r1
 8005332:	107f      	asrs	r7, r7, #1
 8005334:	3608      	adds	r6, #8
 8005336:	e7e5      	b.n	8005304 <_dtoa_r+0x36c>
 8005338:	f000 809b 	beq.w	8005472 <_dtoa_r+0x4da>
 800533c:	9b00      	ldr	r3, [sp, #0]
 800533e:	4f9d      	ldr	r7, [pc, #628]	; (80055b4 <_dtoa_r+0x61c>)
 8005340:	425e      	negs	r6, r3
 8005342:	4b9b      	ldr	r3, [pc, #620]	; (80055b0 <_dtoa_r+0x618>)
 8005344:	f006 020f 	and.w	r2, r6, #15
 8005348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	ec51 0b19 	vmov	r0, r1, d9
 8005354:	f7fb f970 	bl	8000638 <__aeabi_dmul>
 8005358:	1136      	asrs	r6, r6, #4
 800535a:	4682      	mov	sl, r0
 800535c:	468b      	mov	fp, r1
 800535e:	2300      	movs	r3, #0
 8005360:	2502      	movs	r5, #2
 8005362:	2e00      	cmp	r6, #0
 8005364:	d17a      	bne.n	800545c <_dtoa_r+0x4c4>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1d3      	bne.n	8005312 <_dtoa_r+0x37a>
 800536a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8082 	beq.w	8005476 <_dtoa_r+0x4de>
 8005372:	4b91      	ldr	r3, [pc, #580]	; (80055b8 <_dtoa_r+0x620>)
 8005374:	2200      	movs	r2, #0
 8005376:	4650      	mov	r0, sl
 8005378:	4659      	mov	r1, fp
 800537a:	f7fb fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800537e:	2800      	cmp	r0, #0
 8005380:	d079      	beq.n	8005476 <_dtoa_r+0x4de>
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d076      	beq.n	8005476 <_dtoa_r+0x4de>
 8005388:	9b02      	ldr	r3, [sp, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd36      	ble.n	80053fc <_dtoa_r+0x464>
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	4650      	mov	r0, sl
 8005392:	4659      	mov	r1, fp
 8005394:	1e5f      	subs	r7, r3, #1
 8005396:	2200      	movs	r2, #0
 8005398:	4b88      	ldr	r3, [pc, #544]	; (80055bc <_dtoa_r+0x624>)
 800539a:	f7fb f94d 	bl	8000638 <__aeabi_dmul>
 800539e:	9e02      	ldr	r6, [sp, #8]
 80053a0:	4682      	mov	sl, r0
 80053a2:	468b      	mov	fp, r1
 80053a4:	3501      	adds	r5, #1
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7fb f8dc 	bl	8000564 <__aeabi_i2d>
 80053ac:	4652      	mov	r2, sl
 80053ae:	465b      	mov	r3, fp
 80053b0:	f7fb f942 	bl	8000638 <__aeabi_dmul>
 80053b4:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <_dtoa_r+0x628>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	f7fa ff88 	bl	80002cc <__adddf3>
 80053bc:	46d0      	mov	r8, sl
 80053be:	46d9      	mov	r9, fp
 80053c0:	4682      	mov	sl, r0
 80053c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	d158      	bne.n	800547c <_dtoa_r+0x4e4>
 80053ca:	4b7e      	ldr	r3, [pc, #504]	; (80055c4 <_dtoa_r+0x62c>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fa ff79 	bl	80002c8 <__aeabi_dsub>
 80053d6:	4652      	mov	r2, sl
 80053d8:	465b      	mov	r3, fp
 80053da:	4680      	mov	r8, r0
 80053dc:	4689      	mov	r9, r1
 80053de:	f7fb fbbb 	bl	8000b58 <__aeabi_dcmpgt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f040 8295 	bne.w	8005912 <_dtoa_r+0x97a>
 80053e8:	4652      	mov	r2, sl
 80053ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053ee:	4640      	mov	r0, r8
 80053f0:	4649      	mov	r1, r9
 80053f2:	f7fb fb93 	bl	8000b1c <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f040 8289 	bne.w	800590e <_dtoa_r+0x976>
 80053fc:	ec5b ab19 	vmov	sl, fp, d9
 8005400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005402:	2b00      	cmp	r3, #0
 8005404:	f2c0 8148 	blt.w	8005698 <_dtoa_r+0x700>
 8005408:	9a00      	ldr	r2, [sp, #0]
 800540a:	2a0e      	cmp	r2, #14
 800540c:	f300 8144 	bgt.w	8005698 <_dtoa_r+0x700>
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <_dtoa_r+0x618>)
 8005412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005416:	e9d3 8900 	ldrd	r8, r9, [r3]
 800541a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	f280 80d5 	bge.w	80055cc <_dtoa_r+0x634>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f300 80d1 	bgt.w	80055cc <_dtoa_r+0x634>
 800542a:	f040 826f 	bne.w	800590c <_dtoa_r+0x974>
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <_dtoa_r+0x62c>)
 8005430:	2200      	movs	r2, #0
 8005432:	4640      	mov	r0, r8
 8005434:	4649      	mov	r1, r9
 8005436:	f7fb f8ff 	bl	8000638 <__aeabi_dmul>
 800543a:	4652      	mov	r2, sl
 800543c:	465b      	mov	r3, fp
 800543e:	f7fb fb81 	bl	8000b44 <__aeabi_dcmpge>
 8005442:	9e03      	ldr	r6, [sp, #12]
 8005444:	4637      	mov	r7, r6
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8245 	bne.w	80058d6 <_dtoa_r+0x93e>
 800544c:	9d01      	ldr	r5, [sp, #4]
 800544e:	2331      	movs	r3, #49	; 0x31
 8005450:	f805 3b01 	strb.w	r3, [r5], #1
 8005454:	9b00      	ldr	r3, [sp, #0]
 8005456:	3301      	adds	r3, #1
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	e240      	b.n	80058de <_dtoa_r+0x946>
 800545c:	07f2      	lsls	r2, r6, #31
 800545e:	d505      	bpl.n	800546c <_dtoa_r+0x4d4>
 8005460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005464:	f7fb f8e8 	bl	8000638 <__aeabi_dmul>
 8005468:	3501      	adds	r5, #1
 800546a:	2301      	movs	r3, #1
 800546c:	1076      	asrs	r6, r6, #1
 800546e:	3708      	adds	r7, #8
 8005470:	e777      	b.n	8005362 <_dtoa_r+0x3ca>
 8005472:	2502      	movs	r5, #2
 8005474:	e779      	b.n	800536a <_dtoa_r+0x3d2>
 8005476:	9f00      	ldr	r7, [sp, #0]
 8005478:	9e03      	ldr	r6, [sp, #12]
 800547a:	e794      	b.n	80053a6 <_dtoa_r+0x40e>
 800547c:	9901      	ldr	r1, [sp, #4]
 800547e:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <_dtoa_r+0x618>)
 8005480:	4431      	add	r1, r6
 8005482:	910d      	str	r1, [sp, #52]	; 0x34
 8005484:	9908      	ldr	r1, [sp, #32]
 8005486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800548a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800548e:	2900      	cmp	r1, #0
 8005490:	d043      	beq.n	800551a <_dtoa_r+0x582>
 8005492:	494d      	ldr	r1, [pc, #308]	; (80055c8 <_dtoa_r+0x630>)
 8005494:	2000      	movs	r0, #0
 8005496:	f7fb f9f9 	bl	800088c <__aeabi_ddiv>
 800549a:	4652      	mov	r2, sl
 800549c:	465b      	mov	r3, fp
 800549e:	f7fa ff13 	bl	80002c8 <__aeabi_dsub>
 80054a2:	9d01      	ldr	r5, [sp, #4]
 80054a4:	4682      	mov	sl, r0
 80054a6:	468b      	mov	fp, r1
 80054a8:	4649      	mov	r1, r9
 80054aa:	4640      	mov	r0, r8
 80054ac:	f7fb fb74 	bl	8000b98 <__aeabi_d2iz>
 80054b0:	4606      	mov	r6, r0
 80054b2:	f7fb f857 	bl	8000564 <__aeabi_i2d>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f7fa ff03 	bl	80002c8 <__aeabi_dsub>
 80054c2:	3630      	adds	r6, #48	; 0x30
 80054c4:	f805 6b01 	strb.w	r6, [r5], #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	465b      	mov	r3, fp
 80054cc:	4680      	mov	r8, r0
 80054ce:	4689      	mov	r9, r1
 80054d0:	f7fb fb24 	bl	8000b1c <__aeabi_dcmplt>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d163      	bne.n	80055a0 <_dtoa_r+0x608>
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	4936      	ldr	r1, [pc, #216]	; (80055b8 <_dtoa_r+0x620>)
 80054de:	2000      	movs	r0, #0
 80054e0:	f7fa fef2 	bl	80002c8 <__aeabi_dsub>
 80054e4:	4652      	mov	r2, sl
 80054e6:	465b      	mov	r3, fp
 80054e8:	f7fb fb18 	bl	8000b1c <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f040 80b5 	bne.w	800565c <_dtoa_r+0x6c4>
 80054f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f4:	429d      	cmp	r5, r3
 80054f6:	d081      	beq.n	80053fc <_dtoa_r+0x464>
 80054f8:	4b30      	ldr	r3, [pc, #192]	; (80055bc <_dtoa_r+0x624>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	4650      	mov	r0, sl
 80054fe:	4659      	mov	r1, fp
 8005500:	f7fb f89a 	bl	8000638 <__aeabi_dmul>
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <_dtoa_r+0x624>)
 8005506:	4682      	mov	sl, r0
 8005508:	468b      	mov	fp, r1
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	2200      	movs	r2, #0
 8005510:	f7fb f892 	bl	8000638 <__aeabi_dmul>
 8005514:	4680      	mov	r8, r0
 8005516:	4689      	mov	r9, r1
 8005518:	e7c6      	b.n	80054a8 <_dtoa_r+0x510>
 800551a:	4650      	mov	r0, sl
 800551c:	4659      	mov	r1, fp
 800551e:	f7fb f88b 	bl	8000638 <__aeabi_dmul>
 8005522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005524:	9d01      	ldr	r5, [sp, #4]
 8005526:	930f      	str	r3, [sp, #60]	; 0x3c
 8005528:	4682      	mov	sl, r0
 800552a:	468b      	mov	fp, r1
 800552c:	4649      	mov	r1, r9
 800552e:	4640      	mov	r0, r8
 8005530:	f7fb fb32 	bl	8000b98 <__aeabi_d2iz>
 8005534:	4606      	mov	r6, r0
 8005536:	f7fb f815 	bl	8000564 <__aeabi_i2d>
 800553a:	3630      	adds	r6, #48	; 0x30
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fa fec0 	bl	80002c8 <__aeabi_dsub>
 8005548:	f805 6b01 	strb.w	r6, [r5], #1
 800554c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800554e:	429d      	cmp	r5, r3
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	d124      	bne.n	80055a4 <_dtoa_r+0x60c>
 800555a:	4b1b      	ldr	r3, [pc, #108]	; (80055c8 <_dtoa_r+0x630>)
 800555c:	4650      	mov	r0, sl
 800555e:	4659      	mov	r1, fp
 8005560:	f7fa feb4 	bl	80002cc <__adddf3>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4640      	mov	r0, r8
 800556a:	4649      	mov	r1, r9
 800556c:	f7fb faf4 	bl	8000b58 <__aeabi_dcmpgt>
 8005570:	2800      	cmp	r0, #0
 8005572:	d173      	bne.n	800565c <_dtoa_r+0x6c4>
 8005574:	4652      	mov	r2, sl
 8005576:	465b      	mov	r3, fp
 8005578:	4913      	ldr	r1, [pc, #76]	; (80055c8 <_dtoa_r+0x630>)
 800557a:	2000      	movs	r0, #0
 800557c:	f7fa fea4 	bl	80002c8 <__aeabi_dsub>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4640      	mov	r0, r8
 8005586:	4649      	mov	r1, r9
 8005588:	f7fb fac8 	bl	8000b1c <__aeabi_dcmplt>
 800558c:	2800      	cmp	r0, #0
 800558e:	f43f af35 	beq.w	80053fc <_dtoa_r+0x464>
 8005592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005594:	1e6b      	subs	r3, r5, #1
 8005596:	930f      	str	r3, [sp, #60]	; 0x3c
 8005598:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800559c:	2b30      	cmp	r3, #48	; 0x30
 800559e:	d0f8      	beq.n	8005592 <_dtoa_r+0x5fa>
 80055a0:	9700      	str	r7, [sp, #0]
 80055a2:	e049      	b.n	8005638 <_dtoa_r+0x6a0>
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <_dtoa_r+0x624>)
 80055a6:	f7fb f847 	bl	8000638 <__aeabi_dmul>
 80055aa:	4680      	mov	r8, r0
 80055ac:	4689      	mov	r9, r1
 80055ae:	e7bd      	b.n	800552c <_dtoa_r+0x594>
 80055b0:	08007880 	.word	0x08007880
 80055b4:	08007858 	.word	0x08007858
 80055b8:	3ff00000 	.word	0x3ff00000
 80055bc:	40240000 	.word	0x40240000
 80055c0:	401c0000 	.word	0x401c0000
 80055c4:	40140000 	.word	0x40140000
 80055c8:	3fe00000 	.word	0x3fe00000
 80055cc:	9d01      	ldr	r5, [sp, #4]
 80055ce:	4656      	mov	r6, sl
 80055d0:	465f      	mov	r7, fp
 80055d2:	4642      	mov	r2, r8
 80055d4:	464b      	mov	r3, r9
 80055d6:	4630      	mov	r0, r6
 80055d8:	4639      	mov	r1, r7
 80055da:	f7fb f957 	bl	800088c <__aeabi_ddiv>
 80055de:	f7fb fadb 	bl	8000b98 <__aeabi_d2iz>
 80055e2:	4682      	mov	sl, r0
 80055e4:	f7fa ffbe 	bl	8000564 <__aeabi_i2d>
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	f7fb f824 	bl	8000638 <__aeabi_dmul>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4630      	mov	r0, r6
 80055f6:	4639      	mov	r1, r7
 80055f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80055fc:	f7fa fe64 	bl	80002c8 <__aeabi_dsub>
 8005600:	f805 6b01 	strb.w	r6, [r5], #1
 8005604:	9e01      	ldr	r6, [sp, #4]
 8005606:	9f03      	ldr	r7, [sp, #12]
 8005608:	1bae      	subs	r6, r5, r6
 800560a:	42b7      	cmp	r7, r6
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	d135      	bne.n	800567e <_dtoa_r+0x6e6>
 8005612:	f7fa fe5b 	bl	80002cc <__adddf3>
 8005616:	4642      	mov	r2, r8
 8005618:	464b      	mov	r3, r9
 800561a:	4606      	mov	r6, r0
 800561c:	460f      	mov	r7, r1
 800561e:	f7fb fa9b 	bl	8000b58 <__aeabi_dcmpgt>
 8005622:	b9d0      	cbnz	r0, 800565a <_dtoa_r+0x6c2>
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	4630      	mov	r0, r6
 800562a:	4639      	mov	r1, r7
 800562c:	f7fb fa6c 	bl	8000b08 <__aeabi_dcmpeq>
 8005630:	b110      	cbz	r0, 8005638 <_dtoa_r+0x6a0>
 8005632:	f01a 0f01 	tst.w	sl, #1
 8005636:	d110      	bne.n	800565a <_dtoa_r+0x6c2>
 8005638:	4620      	mov	r0, r4
 800563a:	ee18 1a10 	vmov	r1, s16
 800563e:	f000 faf3 	bl	8005c28 <_Bfree>
 8005642:	2300      	movs	r3, #0
 8005644:	9800      	ldr	r0, [sp, #0]
 8005646:	702b      	strb	r3, [r5, #0]
 8005648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800564a:	3001      	adds	r0, #1
 800564c:	6018      	str	r0, [r3, #0]
 800564e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005650:	2b00      	cmp	r3, #0
 8005652:	f43f acf1 	beq.w	8005038 <_dtoa_r+0xa0>
 8005656:	601d      	str	r5, [r3, #0]
 8005658:	e4ee      	b.n	8005038 <_dtoa_r+0xa0>
 800565a:	9f00      	ldr	r7, [sp, #0]
 800565c:	462b      	mov	r3, r5
 800565e:	461d      	mov	r5, r3
 8005660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005664:	2a39      	cmp	r2, #57	; 0x39
 8005666:	d106      	bne.n	8005676 <_dtoa_r+0x6de>
 8005668:	9a01      	ldr	r2, [sp, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d1f7      	bne.n	800565e <_dtoa_r+0x6c6>
 800566e:	9901      	ldr	r1, [sp, #4]
 8005670:	2230      	movs	r2, #48	; 0x30
 8005672:	3701      	adds	r7, #1
 8005674:	700a      	strb	r2, [r1, #0]
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	3201      	adds	r2, #1
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e790      	b.n	80055a0 <_dtoa_r+0x608>
 800567e:	4ba6      	ldr	r3, [pc, #664]	; (8005918 <_dtoa_r+0x980>)
 8005680:	2200      	movs	r2, #0
 8005682:	f7fa ffd9 	bl	8000638 <__aeabi_dmul>
 8005686:	2200      	movs	r2, #0
 8005688:	2300      	movs	r3, #0
 800568a:	4606      	mov	r6, r0
 800568c:	460f      	mov	r7, r1
 800568e:	f7fb fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 8005692:	2800      	cmp	r0, #0
 8005694:	d09d      	beq.n	80055d2 <_dtoa_r+0x63a>
 8005696:	e7cf      	b.n	8005638 <_dtoa_r+0x6a0>
 8005698:	9a08      	ldr	r2, [sp, #32]
 800569a:	2a00      	cmp	r2, #0
 800569c:	f000 80d7 	beq.w	800584e <_dtoa_r+0x8b6>
 80056a0:	9a06      	ldr	r2, [sp, #24]
 80056a2:	2a01      	cmp	r2, #1
 80056a4:	f300 80ba 	bgt.w	800581c <_dtoa_r+0x884>
 80056a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	f000 80b2 	beq.w	8005814 <_dtoa_r+0x87c>
 80056b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056b4:	9e07      	ldr	r6, [sp, #28]
 80056b6:	9d04      	ldr	r5, [sp, #16]
 80056b8:	9a04      	ldr	r2, [sp, #16]
 80056ba:	441a      	add	r2, r3
 80056bc:	9204      	str	r2, [sp, #16]
 80056be:	9a05      	ldr	r2, [sp, #20]
 80056c0:	2101      	movs	r1, #1
 80056c2:	441a      	add	r2, r3
 80056c4:	4620      	mov	r0, r4
 80056c6:	9205      	str	r2, [sp, #20]
 80056c8:	f000 fb66 	bl	8005d98 <__i2b>
 80056cc:	4607      	mov	r7, r0
 80056ce:	2d00      	cmp	r5, #0
 80056d0:	dd0c      	ble.n	80056ec <_dtoa_r+0x754>
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dd09      	ble.n	80056ec <_dtoa_r+0x754>
 80056d8:	42ab      	cmp	r3, r5
 80056da:	9a04      	ldr	r2, [sp, #16]
 80056dc:	bfa8      	it	ge
 80056de:	462b      	movge	r3, r5
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	9204      	str	r2, [sp, #16]
 80056e4:	9a05      	ldr	r2, [sp, #20]
 80056e6:	1aed      	subs	r5, r5, r3
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	9305      	str	r3, [sp, #20]
 80056ec:	9b07      	ldr	r3, [sp, #28]
 80056ee:	b31b      	cbz	r3, 8005738 <_dtoa_r+0x7a0>
 80056f0:	9b08      	ldr	r3, [sp, #32]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80af 	beq.w	8005856 <_dtoa_r+0x8be>
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	dd13      	ble.n	8005724 <_dtoa_r+0x78c>
 80056fc:	4639      	mov	r1, r7
 80056fe:	4632      	mov	r2, r6
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fc09 	bl	8005f18 <__pow5mult>
 8005706:	ee18 2a10 	vmov	r2, s16
 800570a:	4601      	mov	r1, r0
 800570c:	4607      	mov	r7, r0
 800570e:	4620      	mov	r0, r4
 8005710:	f000 fb58 	bl	8005dc4 <__multiply>
 8005714:	ee18 1a10 	vmov	r1, s16
 8005718:	4680      	mov	r8, r0
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fa84 	bl	8005c28 <_Bfree>
 8005720:	ee08 8a10 	vmov	s16, r8
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	1b9a      	subs	r2, r3, r6
 8005728:	d006      	beq.n	8005738 <_dtoa_r+0x7a0>
 800572a:	ee18 1a10 	vmov	r1, s16
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fbf2 	bl	8005f18 <__pow5mult>
 8005734:	ee08 0a10 	vmov	s16, r0
 8005738:	2101      	movs	r1, #1
 800573a:	4620      	mov	r0, r4
 800573c:	f000 fb2c 	bl	8005d98 <__i2b>
 8005740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	4606      	mov	r6, r0
 8005746:	f340 8088 	ble.w	800585a <_dtoa_r+0x8c2>
 800574a:	461a      	mov	r2, r3
 800574c:	4601      	mov	r1, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fbe2 	bl	8005f18 <__pow5mult>
 8005754:	9b06      	ldr	r3, [sp, #24]
 8005756:	2b01      	cmp	r3, #1
 8005758:	4606      	mov	r6, r0
 800575a:	f340 8081 	ble.w	8005860 <_dtoa_r+0x8c8>
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	6933      	ldr	r3, [r6, #16]
 8005764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005768:	6918      	ldr	r0, [r3, #16]
 800576a:	f000 fac5 	bl	8005cf8 <__hi0bits>
 800576e:	f1c0 0020 	rsb	r0, r0, #32
 8005772:	9b05      	ldr	r3, [sp, #20]
 8005774:	4418      	add	r0, r3
 8005776:	f010 001f 	ands.w	r0, r0, #31
 800577a:	f000 8092 	beq.w	80058a2 <_dtoa_r+0x90a>
 800577e:	f1c0 0320 	rsb	r3, r0, #32
 8005782:	2b04      	cmp	r3, #4
 8005784:	f340 808a 	ble.w	800589c <_dtoa_r+0x904>
 8005788:	f1c0 001c 	rsb	r0, r0, #28
 800578c:	9b04      	ldr	r3, [sp, #16]
 800578e:	4403      	add	r3, r0
 8005790:	9304      	str	r3, [sp, #16]
 8005792:	9b05      	ldr	r3, [sp, #20]
 8005794:	4403      	add	r3, r0
 8005796:	4405      	add	r5, r0
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	9b04      	ldr	r3, [sp, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	dd07      	ble.n	80057b0 <_dtoa_r+0x818>
 80057a0:	ee18 1a10 	vmov	r1, s16
 80057a4:	461a      	mov	r2, r3
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 fc10 	bl	8005fcc <__lshift>
 80057ac:	ee08 0a10 	vmov	s16, r0
 80057b0:	9b05      	ldr	r3, [sp, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd05      	ble.n	80057c2 <_dtoa_r+0x82a>
 80057b6:	4631      	mov	r1, r6
 80057b8:	461a      	mov	r2, r3
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 fc06 	bl	8005fcc <__lshift>
 80057c0:	4606      	mov	r6, r0
 80057c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d06e      	beq.n	80058a6 <_dtoa_r+0x90e>
 80057c8:	ee18 0a10 	vmov	r0, s16
 80057cc:	4631      	mov	r1, r6
 80057ce:	f000 fc6d 	bl	80060ac <__mcmp>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	da67      	bge.n	80058a6 <_dtoa_r+0x90e>
 80057d6:	9b00      	ldr	r3, [sp, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	ee18 1a10 	vmov	r1, s16
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	220a      	movs	r2, #10
 80057e2:	2300      	movs	r3, #0
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 fa41 	bl	8005c6c <__multadd>
 80057ea:	9b08      	ldr	r3, [sp, #32]
 80057ec:	ee08 0a10 	vmov	s16, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 81b1 	beq.w	8005b58 <_dtoa_r+0xbc0>
 80057f6:	2300      	movs	r3, #0
 80057f8:	4639      	mov	r1, r7
 80057fa:	220a      	movs	r2, #10
 80057fc:	4620      	mov	r0, r4
 80057fe:	f000 fa35 	bl	8005c6c <__multadd>
 8005802:	9b02      	ldr	r3, [sp, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	4607      	mov	r7, r0
 8005808:	f300 808e 	bgt.w	8005928 <_dtoa_r+0x990>
 800580c:	9b06      	ldr	r3, [sp, #24]
 800580e:	2b02      	cmp	r3, #2
 8005810:	dc51      	bgt.n	80058b6 <_dtoa_r+0x91e>
 8005812:	e089      	b.n	8005928 <_dtoa_r+0x990>
 8005814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800581a:	e74b      	b.n	80056b4 <_dtoa_r+0x71c>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	1e5e      	subs	r6, r3, #1
 8005820:	9b07      	ldr	r3, [sp, #28]
 8005822:	42b3      	cmp	r3, r6
 8005824:	bfbf      	itttt	lt
 8005826:	9b07      	ldrlt	r3, [sp, #28]
 8005828:	9607      	strlt	r6, [sp, #28]
 800582a:	1af2      	sublt	r2, r6, r3
 800582c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800582e:	bfb6      	itet	lt
 8005830:	189b      	addlt	r3, r3, r2
 8005832:	1b9e      	subge	r6, r3, r6
 8005834:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	bfb8      	it	lt
 800583a:	2600      	movlt	r6, #0
 800583c:	2b00      	cmp	r3, #0
 800583e:	bfb7      	itett	lt
 8005840:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005844:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005848:	1a9d      	sublt	r5, r3, r2
 800584a:	2300      	movlt	r3, #0
 800584c:	e734      	b.n	80056b8 <_dtoa_r+0x720>
 800584e:	9e07      	ldr	r6, [sp, #28]
 8005850:	9d04      	ldr	r5, [sp, #16]
 8005852:	9f08      	ldr	r7, [sp, #32]
 8005854:	e73b      	b.n	80056ce <_dtoa_r+0x736>
 8005856:	9a07      	ldr	r2, [sp, #28]
 8005858:	e767      	b.n	800572a <_dtoa_r+0x792>
 800585a:	9b06      	ldr	r3, [sp, #24]
 800585c:	2b01      	cmp	r3, #1
 800585e:	dc18      	bgt.n	8005892 <_dtoa_r+0x8fa>
 8005860:	f1ba 0f00 	cmp.w	sl, #0
 8005864:	d115      	bne.n	8005892 <_dtoa_r+0x8fa>
 8005866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800586a:	b993      	cbnz	r3, 8005892 <_dtoa_r+0x8fa>
 800586c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005870:	0d1b      	lsrs	r3, r3, #20
 8005872:	051b      	lsls	r3, r3, #20
 8005874:	b183      	cbz	r3, 8005898 <_dtoa_r+0x900>
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	3301      	adds	r3, #1
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	9b05      	ldr	r3, [sp, #20]
 800587e:	3301      	adds	r3, #1
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	f04f 0801 	mov.w	r8, #1
 8005886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	f47f af6a 	bne.w	8005762 <_dtoa_r+0x7ca>
 800588e:	2001      	movs	r0, #1
 8005890:	e76f      	b.n	8005772 <_dtoa_r+0x7da>
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	e7f6      	b.n	8005886 <_dtoa_r+0x8ee>
 8005898:	4698      	mov	r8, r3
 800589a:	e7f4      	b.n	8005886 <_dtoa_r+0x8ee>
 800589c:	f43f af7d 	beq.w	800579a <_dtoa_r+0x802>
 80058a0:	4618      	mov	r0, r3
 80058a2:	301c      	adds	r0, #28
 80058a4:	e772      	b.n	800578c <_dtoa_r+0x7f4>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc37      	bgt.n	800591c <_dtoa_r+0x984>
 80058ac:	9b06      	ldr	r3, [sp, #24]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	dd34      	ble.n	800591c <_dtoa_r+0x984>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	9b02      	ldr	r3, [sp, #8]
 80058b8:	b96b      	cbnz	r3, 80058d6 <_dtoa_r+0x93e>
 80058ba:	4631      	mov	r1, r6
 80058bc:	2205      	movs	r2, #5
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f9d4 	bl	8005c6c <__multadd>
 80058c4:	4601      	mov	r1, r0
 80058c6:	4606      	mov	r6, r0
 80058c8:	ee18 0a10 	vmov	r0, s16
 80058cc:	f000 fbee 	bl	80060ac <__mcmp>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f73f adbb 	bgt.w	800544c <_dtoa_r+0x4b4>
 80058d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d8:	9d01      	ldr	r5, [sp, #4]
 80058da:	43db      	mvns	r3, r3
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	f04f 0800 	mov.w	r8, #0
 80058e2:	4631      	mov	r1, r6
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 f99f 	bl	8005c28 <_Bfree>
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	f43f aea4 	beq.w	8005638 <_dtoa_r+0x6a0>
 80058f0:	f1b8 0f00 	cmp.w	r8, #0
 80058f4:	d005      	beq.n	8005902 <_dtoa_r+0x96a>
 80058f6:	45b8      	cmp	r8, r7
 80058f8:	d003      	beq.n	8005902 <_dtoa_r+0x96a>
 80058fa:	4641      	mov	r1, r8
 80058fc:	4620      	mov	r0, r4
 80058fe:	f000 f993 	bl	8005c28 <_Bfree>
 8005902:	4639      	mov	r1, r7
 8005904:	4620      	mov	r0, r4
 8005906:	f000 f98f 	bl	8005c28 <_Bfree>
 800590a:	e695      	b.n	8005638 <_dtoa_r+0x6a0>
 800590c:	2600      	movs	r6, #0
 800590e:	4637      	mov	r7, r6
 8005910:	e7e1      	b.n	80058d6 <_dtoa_r+0x93e>
 8005912:	9700      	str	r7, [sp, #0]
 8005914:	4637      	mov	r7, r6
 8005916:	e599      	b.n	800544c <_dtoa_r+0x4b4>
 8005918:	40240000 	.word	0x40240000
 800591c:	9b08      	ldr	r3, [sp, #32]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80ca 	beq.w	8005ab8 <_dtoa_r+0xb20>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	2d00      	cmp	r5, #0
 800592a:	dd05      	ble.n	8005938 <_dtoa_r+0x9a0>
 800592c:	4639      	mov	r1, r7
 800592e:	462a      	mov	r2, r5
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fb4b 	bl	8005fcc <__lshift>
 8005936:	4607      	mov	r7, r0
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	d05b      	beq.n	80059f6 <_dtoa_r+0xa5e>
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4620      	mov	r0, r4
 8005942:	f000 f931 	bl	8005ba8 <_Balloc>
 8005946:	4605      	mov	r5, r0
 8005948:	b928      	cbnz	r0, 8005956 <_dtoa_r+0x9be>
 800594a:	4b87      	ldr	r3, [pc, #540]	; (8005b68 <_dtoa_r+0xbd0>)
 800594c:	4602      	mov	r2, r0
 800594e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005952:	f7ff bb3b 	b.w	8004fcc <_dtoa_r+0x34>
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	3202      	adds	r2, #2
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	f107 010c 	add.w	r1, r7, #12
 8005960:	300c      	adds	r0, #12
 8005962:	f000 f913 	bl	8005b8c <memcpy>
 8005966:	2201      	movs	r2, #1
 8005968:	4629      	mov	r1, r5
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fb2e 	bl	8005fcc <__lshift>
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	f103 0901 	add.w	r9, r3, #1
 8005976:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800597a:	4413      	add	r3, r2
 800597c:	9305      	str	r3, [sp, #20]
 800597e:	f00a 0301 	and.w	r3, sl, #1
 8005982:	46b8      	mov	r8, r7
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	4607      	mov	r7, r0
 8005988:	4631      	mov	r1, r6
 800598a:	ee18 0a10 	vmov	r0, s16
 800598e:	f7ff fa75 	bl	8004e7c <quorem>
 8005992:	4641      	mov	r1, r8
 8005994:	9002      	str	r0, [sp, #8]
 8005996:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800599a:	ee18 0a10 	vmov	r0, s16
 800599e:	f000 fb85 	bl	80060ac <__mcmp>
 80059a2:	463a      	mov	r2, r7
 80059a4:	9003      	str	r0, [sp, #12]
 80059a6:	4631      	mov	r1, r6
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 fb9b 	bl	80060e4 <__mdiff>
 80059ae:	68c2      	ldr	r2, [r0, #12]
 80059b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80059b4:	4605      	mov	r5, r0
 80059b6:	bb02      	cbnz	r2, 80059fa <_dtoa_r+0xa62>
 80059b8:	4601      	mov	r1, r0
 80059ba:	ee18 0a10 	vmov	r0, s16
 80059be:	f000 fb75 	bl	80060ac <__mcmp>
 80059c2:	4602      	mov	r2, r0
 80059c4:	4629      	mov	r1, r5
 80059c6:	4620      	mov	r0, r4
 80059c8:	9207      	str	r2, [sp, #28]
 80059ca:	f000 f92d 	bl	8005c28 <_Bfree>
 80059ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80059d2:	ea43 0102 	orr.w	r1, r3, r2
 80059d6:	9b04      	ldr	r3, [sp, #16]
 80059d8:	430b      	orrs	r3, r1
 80059da:	464d      	mov	r5, r9
 80059dc:	d10f      	bne.n	80059fe <_dtoa_r+0xa66>
 80059de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059e2:	d02a      	beq.n	8005a3a <_dtoa_r+0xaa2>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd02      	ble.n	80059f0 <_dtoa_r+0xa58>
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059f0:	f88b a000 	strb.w	sl, [fp]
 80059f4:	e775      	b.n	80058e2 <_dtoa_r+0x94a>
 80059f6:	4638      	mov	r0, r7
 80059f8:	e7ba      	b.n	8005970 <_dtoa_r+0x9d8>
 80059fa:	2201      	movs	r2, #1
 80059fc:	e7e2      	b.n	80059c4 <_dtoa_r+0xa2c>
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db04      	blt.n	8005a0e <_dtoa_r+0xa76>
 8005a04:	9906      	ldr	r1, [sp, #24]
 8005a06:	430b      	orrs	r3, r1
 8005a08:	9904      	ldr	r1, [sp, #16]
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	d122      	bne.n	8005a54 <_dtoa_r+0xabc>
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	ddee      	ble.n	80059f0 <_dtoa_r+0xa58>
 8005a12:	ee18 1a10 	vmov	r1, s16
 8005a16:	2201      	movs	r2, #1
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fad7 	bl	8005fcc <__lshift>
 8005a1e:	4631      	mov	r1, r6
 8005a20:	ee08 0a10 	vmov	s16, r0
 8005a24:	f000 fb42 	bl	80060ac <__mcmp>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	dc03      	bgt.n	8005a34 <_dtoa_r+0xa9c>
 8005a2c:	d1e0      	bne.n	80059f0 <_dtoa_r+0xa58>
 8005a2e:	f01a 0f01 	tst.w	sl, #1
 8005a32:	d0dd      	beq.n	80059f0 <_dtoa_r+0xa58>
 8005a34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a38:	d1d7      	bne.n	80059ea <_dtoa_r+0xa52>
 8005a3a:	2339      	movs	r3, #57	; 0x39
 8005a3c:	f88b 3000 	strb.w	r3, [fp]
 8005a40:	462b      	mov	r3, r5
 8005a42:	461d      	mov	r5, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a4a:	2a39      	cmp	r2, #57	; 0x39
 8005a4c:	d071      	beq.n	8005b32 <_dtoa_r+0xb9a>
 8005a4e:	3201      	adds	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e746      	b.n	80058e2 <_dtoa_r+0x94a>
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	dd07      	ble.n	8005a68 <_dtoa_r+0xad0>
 8005a58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a5c:	d0ed      	beq.n	8005a3a <_dtoa_r+0xaa2>
 8005a5e:	f10a 0301 	add.w	r3, sl, #1
 8005a62:	f88b 3000 	strb.w	r3, [fp]
 8005a66:	e73c      	b.n	80058e2 <_dtoa_r+0x94a>
 8005a68:	9b05      	ldr	r3, [sp, #20]
 8005a6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005a6e:	4599      	cmp	r9, r3
 8005a70:	d047      	beq.n	8005b02 <_dtoa_r+0xb6a>
 8005a72:	ee18 1a10 	vmov	r1, s16
 8005a76:	2300      	movs	r3, #0
 8005a78:	220a      	movs	r2, #10
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 f8f6 	bl	8005c6c <__multadd>
 8005a80:	45b8      	cmp	r8, r7
 8005a82:	ee08 0a10 	vmov	s16, r0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	f04f 020a 	mov.w	r2, #10
 8005a8e:	4641      	mov	r1, r8
 8005a90:	4620      	mov	r0, r4
 8005a92:	d106      	bne.n	8005aa2 <_dtoa_r+0xb0a>
 8005a94:	f000 f8ea 	bl	8005c6c <__multadd>
 8005a98:	4680      	mov	r8, r0
 8005a9a:	4607      	mov	r7, r0
 8005a9c:	f109 0901 	add.w	r9, r9, #1
 8005aa0:	e772      	b.n	8005988 <_dtoa_r+0x9f0>
 8005aa2:	f000 f8e3 	bl	8005c6c <__multadd>
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4680      	mov	r8, r0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	220a      	movs	r2, #10
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f8dc 	bl	8005c6c <__multadd>
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	e7f1      	b.n	8005a9c <_dtoa_r+0xb04>
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	9302      	str	r3, [sp, #8]
 8005abc:	9d01      	ldr	r5, [sp, #4]
 8005abe:	ee18 0a10 	vmov	r0, s16
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	f7ff f9da 	bl	8004e7c <quorem>
 8005ac8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005acc:	9b01      	ldr	r3, [sp, #4]
 8005ace:	f805 ab01 	strb.w	sl, [r5], #1
 8005ad2:	1aea      	subs	r2, r5, r3
 8005ad4:	9b02      	ldr	r3, [sp, #8]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	dd09      	ble.n	8005aee <_dtoa_r+0xb56>
 8005ada:	ee18 1a10 	vmov	r1, s16
 8005ade:	2300      	movs	r3, #0
 8005ae0:	220a      	movs	r2, #10
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 f8c2 	bl	8005c6c <__multadd>
 8005ae8:	ee08 0a10 	vmov	s16, r0
 8005aec:	e7e7      	b.n	8005abe <_dtoa_r+0xb26>
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfc8      	it	gt
 8005af4:	461d      	movgt	r5, r3
 8005af6:	9b01      	ldr	r3, [sp, #4]
 8005af8:	bfd8      	it	le
 8005afa:	2501      	movle	r5, #1
 8005afc:	441d      	add	r5, r3
 8005afe:	f04f 0800 	mov.w	r8, #0
 8005b02:	ee18 1a10 	vmov	r1, s16
 8005b06:	2201      	movs	r2, #1
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f000 fa5f 	bl	8005fcc <__lshift>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	ee08 0a10 	vmov	s16, r0
 8005b14:	f000 faca 	bl	80060ac <__mcmp>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	dc91      	bgt.n	8005a40 <_dtoa_r+0xaa8>
 8005b1c:	d102      	bne.n	8005b24 <_dtoa_r+0xb8c>
 8005b1e:	f01a 0f01 	tst.w	sl, #1
 8005b22:	d18d      	bne.n	8005a40 <_dtoa_r+0xaa8>
 8005b24:	462b      	mov	r3, r5
 8005b26:	461d      	mov	r5, r3
 8005b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b2c:	2a30      	cmp	r2, #48	; 0x30
 8005b2e:	d0fa      	beq.n	8005b26 <_dtoa_r+0xb8e>
 8005b30:	e6d7      	b.n	80058e2 <_dtoa_r+0x94a>
 8005b32:	9a01      	ldr	r2, [sp, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d184      	bne.n	8005a42 <_dtoa_r+0xaaa>
 8005b38:	9b00      	ldr	r3, [sp, #0]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2331      	movs	r3, #49	; 0x31
 8005b40:	7013      	strb	r3, [r2, #0]
 8005b42:	e6ce      	b.n	80058e2 <_dtoa_r+0x94a>
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <_dtoa_r+0xbd4>)
 8005b46:	f7ff ba95 	b.w	8005074 <_dtoa_r+0xdc>
 8005b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f47f aa6e 	bne.w	800502e <_dtoa_r+0x96>
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <_dtoa_r+0xbd8>)
 8005b54:	f7ff ba8e 	b.w	8005074 <_dtoa_r+0xdc>
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dcae      	bgt.n	8005abc <_dtoa_r+0xb24>
 8005b5e:	9b06      	ldr	r3, [sp, #24]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	f73f aea8 	bgt.w	80058b6 <_dtoa_r+0x91e>
 8005b66:	e7a9      	b.n	8005abc <_dtoa_r+0xb24>
 8005b68:	080077eb 	.word	0x080077eb
 8005b6c:	08007748 	.word	0x08007748
 8005b70:	0800776c 	.word	0x0800776c

08005b74 <_localeconv_r>:
 8005b74:	4800      	ldr	r0, [pc, #0]	; (8005b78 <_localeconv_r+0x4>)
 8005b76:	4770      	bx	lr
 8005b78:	20000164 	.word	0x20000164

08005b7c <malloc>:
 8005b7c:	4b02      	ldr	r3, [pc, #8]	; (8005b88 <malloc+0xc>)
 8005b7e:	4601      	mov	r1, r0
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	f000 bc17 	b.w	80063b4 <_malloc_r>
 8005b86:	bf00      	nop
 8005b88:	20000010 	.word	0x20000010

08005b8c <memcpy>:
 8005b8c:	440a      	add	r2, r1
 8005b8e:	4291      	cmp	r1, r2
 8005b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b94:	d100      	bne.n	8005b98 <memcpy+0xc>
 8005b96:	4770      	bx	lr
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	d1f9      	bne.n	8005b9a <memcpy+0xe>
 8005ba6:	bd10      	pop	{r4, pc}

08005ba8 <_Balloc>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bac:	4604      	mov	r4, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	b976      	cbnz	r6, 8005bd0 <_Balloc+0x28>
 8005bb2:	2010      	movs	r0, #16
 8005bb4:	f7ff ffe2 	bl	8005b7c <malloc>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6260      	str	r0, [r4, #36]	; 0x24
 8005bbc:	b920      	cbnz	r0, 8005bc8 <_Balloc+0x20>
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <_Balloc+0x78>)
 8005bc0:	4818      	ldr	r0, [pc, #96]	; (8005c24 <_Balloc+0x7c>)
 8005bc2:	2166      	movs	r1, #102	; 0x66
 8005bc4:	f000 fdd6 	bl	8006774 <__assert_func>
 8005bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bcc:	6006      	str	r6, [r0, #0]
 8005bce:	60c6      	str	r6, [r0, #12]
 8005bd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bd2:	68f3      	ldr	r3, [r6, #12]
 8005bd4:	b183      	cbz	r3, 8005bf8 <_Balloc+0x50>
 8005bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bde:	b9b8      	cbnz	r0, 8005c10 <_Balloc+0x68>
 8005be0:	2101      	movs	r1, #1
 8005be2:	fa01 f605 	lsl.w	r6, r1, r5
 8005be6:	1d72      	adds	r2, r6, #5
 8005be8:	0092      	lsls	r2, r2, #2
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 fb60 	bl	80062b0 <_calloc_r>
 8005bf0:	b160      	cbz	r0, 8005c0c <_Balloc+0x64>
 8005bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bf6:	e00e      	b.n	8005c16 <_Balloc+0x6e>
 8005bf8:	2221      	movs	r2, #33	; 0x21
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fb57 	bl	80062b0 <_calloc_r>
 8005c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c04:	60f0      	str	r0, [r6, #12]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e4      	bne.n	8005bd6 <_Balloc+0x2e>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	6802      	ldr	r2, [r0, #0]
 8005c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c16:	2300      	movs	r3, #0
 8005c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c1c:	e7f7      	b.n	8005c0e <_Balloc+0x66>
 8005c1e:	bf00      	nop
 8005c20:	08007779 	.word	0x08007779
 8005c24:	080077fc 	.word	0x080077fc

08005c28 <_Bfree>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	b976      	cbnz	r6, 8005c50 <_Bfree+0x28>
 8005c32:	2010      	movs	r0, #16
 8005c34:	f7ff ffa2 	bl	8005b7c <malloc>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6268      	str	r0, [r5, #36]	; 0x24
 8005c3c:	b920      	cbnz	r0, 8005c48 <_Bfree+0x20>
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <_Bfree+0x3c>)
 8005c40:	4809      	ldr	r0, [pc, #36]	; (8005c68 <_Bfree+0x40>)
 8005c42:	218a      	movs	r1, #138	; 0x8a
 8005c44:	f000 fd96 	bl	8006774 <__assert_func>
 8005c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c4c:	6006      	str	r6, [r0, #0]
 8005c4e:	60c6      	str	r6, [r0, #12]
 8005c50:	b13c      	cbz	r4, 8005c62 <_Bfree+0x3a>
 8005c52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c54:	6862      	ldr	r2, [r4, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c5c:	6021      	str	r1, [r4, #0]
 8005c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	08007779 	.word	0x08007779
 8005c68:	080077fc 	.word	0x080077fc

08005c6c <__multadd>:
 8005c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	690d      	ldr	r5, [r1, #16]
 8005c72:	4607      	mov	r7, r0
 8005c74:	460c      	mov	r4, r1
 8005c76:	461e      	mov	r6, r3
 8005c78:	f101 0c14 	add.w	ip, r1, #20
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005c82:	b299      	uxth	r1, r3
 8005c84:	fb02 6101 	mla	r1, r2, r1, r6
 8005c88:	0c1e      	lsrs	r6, r3, #16
 8005c8a:	0c0b      	lsrs	r3, r1, #16
 8005c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8005c90:	b289      	uxth	r1, r1
 8005c92:	3001      	adds	r0, #1
 8005c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c98:	4285      	cmp	r5, r0
 8005c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ca2:	dcec      	bgt.n	8005c7e <__multadd+0x12>
 8005ca4:	b30e      	cbz	r6, 8005cea <__multadd+0x7e>
 8005ca6:	68a3      	ldr	r3, [r4, #8]
 8005ca8:	42ab      	cmp	r3, r5
 8005caa:	dc19      	bgt.n	8005ce0 <__multadd+0x74>
 8005cac:	6861      	ldr	r1, [r4, #4]
 8005cae:	4638      	mov	r0, r7
 8005cb0:	3101      	adds	r1, #1
 8005cb2:	f7ff ff79 	bl	8005ba8 <_Balloc>
 8005cb6:	4680      	mov	r8, r0
 8005cb8:	b928      	cbnz	r0, 8005cc6 <__multadd+0x5a>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <__multadd+0x84>)
 8005cbe:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <__multadd+0x88>)
 8005cc0:	21b5      	movs	r1, #181	; 0xb5
 8005cc2:	f000 fd57 	bl	8006774 <__assert_func>
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	3202      	adds	r2, #2
 8005cca:	f104 010c 	add.w	r1, r4, #12
 8005cce:	0092      	lsls	r2, r2, #2
 8005cd0:	300c      	adds	r0, #12
 8005cd2:	f7ff ff5b 	bl	8005b8c <memcpy>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff ffa5 	bl	8005c28 <_Bfree>
 8005cde:	4644      	mov	r4, r8
 8005ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	615e      	str	r6, [r3, #20]
 8005ce8:	6125      	str	r5, [r4, #16]
 8005cea:	4620      	mov	r0, r4
 8005cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf0:	080077eb 	.word	0x080077eb
 8005cf4:	080077fc 	.word	0x080077fc

08005cf8 <__hi0bits>:
 8005cf8:	0c03      	lsrs	r3, r0, #16
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	b9d3      	cbnz	r3, 8005d34 <__hi0bits+0x3c>
 8005cfe:	0400      	lsls	r0, r0, #16
 8005d00:	2310      	movs	r3, #16
 8005d02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d06:	bf04      	itt	eq
 8005d08:	0200      	lsleq	r0, r0, #8
 8005d0a:	3308      	addeq	r3, #8
 8005d0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d10:	bf04      	itt	eq
 8005d12:	0100      	lsleq	r0, r0, #4
 8005d14:	3304      	addeq	r3, #4
 8005d16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d1a:	bf04      	itt	eq
 8005d1c:	0080      	lsleq	r0, r0, #2
 8005d1e:	3302      	addeq	r3, #2
 8005d20:	2800      	cmp	r0, #0
 8005d22:	db05      	blt.n	8005d30 <__hi0bits+0x38>
 8005d24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d28:	f103 0301 	add.w	r3, r3, #1
 8005d2c:	bf08      	it	eq
 8005d2e:	2320      	moveq	r3, #32
 8005d30:	4618      	mov	r0, r3
 8005d32:	4770      	bx	lr
 8005d34:	2300      	movs	r3, #0
 8005d36:	e7e4      	b.n	8005d02 <__hi0bits+0xa>

08005d38 <__lo0bits>:
 8005d38:	6803      	ldr	r3, [r0, #0]
 8005d3a:	f013 0207 	ands.w	r2, r3, #7
 8005d3e:	4601      	mov	r1, r0
 8005d40:	d00b      	beq.n	8005d5a <__lo0bits+0x22>
 8005d42:	07da      	lsls	r2, r3, #31
 8005d44:	d423      	bmi.n	8005d8e <__lo0bits+0x56>
 8005d46:	0798      	lsls	r0, r3, #30
 8005d48:	bf49      	itett	mi
 8005d4a:	085b      	lsrmi	r3, r3, #1
 8005d4c:	089b      	lsrpl	r3, r3, #2
 8005d4e:	2001      	movmi	r0, #1
 8005d50:	600b      	strmi	r3, [r1, #0]
 8005d52:	bf5c      	itt	pl
 8005d54:	600b      	strpl	r3, [r1, #0]
 8005d56:	2002      	movpl	r0, #2
 8005d58:	4770      	bx	lr
 8005d5a:	b298      	uxth	r0, r3
 8005d5c:	b9a8      	cbnz	r0, 8005d8a <__lo0bits+0x52>
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	2010      	movs	r0, #16
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	b90a      	cbnz	r2, 8005d6a <__lo0bits+0x32>
 8005d66:	3008      	adds	r0, #8
 8005d68:	0a1b      	lsrs	r3, r3, #8
 8005d6a:	071a      	lsls	r2, r3, #28
 8005d6c:	bf04      	itt	eq
 8005d6e:	091b      	lsreq	r3, r3, #4
 8005d70:	3004      	addeq	r0, #4
 8005d72:	079a      	lsls	r2, r3, #30
 8005d74:	bf04      	itt	eq
 8005d76:	089b      	lsreq	r3, r3, #2
 8005d78:	3002      	addeq	r0, #2
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d403      	bmi.n	8005d86 <__lo0bits+0x4e>
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	f100 0001 	add.w	r0, r0, #1
 8005d84:	d005      	beq.n	8005d92 <__lo0bits+0x5a>
 8005d86:	600b      	str	r3, [r1, #0]
 8005d88:	4770      	bx	lr
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	e7e9      	b.n	8005d62 <__lo0bits+0x2a>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	4770      	bx	lr
 8005d92:	2020      	movs	r0, #32
 8005d94:	4770      	bx	lr
	...

08005d98 <__i2b>:
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	f7ff ff03 	bl	8005ba8 <_Balloc>
 8005da2:	4602      	mov	r2, r0
 8005da4:	b928      	cbnz	r0, 8005db2 <__i2b+0x1a>
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <__i2b+0x24>)
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <__i2b+0x28>)
 8005daa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005dae:	f000 fce1 	bl	8006774 <__assert_func>
 8005db2:	2301      	movs	r3, #1
 8005db4:	6144      	str	r4, [r0, #20]
 8005db6:	6103      	str	r3, [r0, #16]
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	080077eb 	.word	0x080077eb
 8005dc0:	080077fc 	.word	0x080077fc

08005dc4 <__multiply>:
 8005dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	4691      	mov	r9, r2
 8005dca:	690a      	ldr	r2, [r1, #16]
 8005dcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	bfb8      	it	lt
 8005dd4:	460b      	movlt	r3, r1
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	bfbc      	itt	lt
 8005dda:	464c      	movlt	r4, r9
 8005ddc:	4699      	movlt	r9, r3
 8005dde:	6927      	ldr	r7, [r4, #16]
 8005de0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005de4:	68a3      	ldr	r3, [r4, #8]
 8005de6:	6861      	ldr	r1, [r4, #4]
 8005de8:	eb07 060a 	add.w	r6, r7, sl
 8005dec:	42b3      	cmp	r3, r6
 8005dee:	b085      	sub	sp, #20
 8005df0:	bfb8      	it	lt
 8005df2:	3101      	addlt	r1, #1
 8005df4:	f7ff fed8 	bl	8005ba8 <_Balloc>
 8005df8:	b930      	cbnz	r0, 8005e08 <__multiply+0x44>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b44      	ldr	r3, [pc, #272]	; (8005f10 <__multiply+0x14c>)
 8005dfe:	4845      	ldr	r0, [pc, #276]	; (8005f14 <__multiply+0x150>)
 8005e00:	f240 115d 	movw	r1, #349	; 0x15d
 8005e04:	f000 fcb6 	bl	8006774 <__assert_func>
 8005e08:	f100 0514 	add.w	r5, r0, #20
 8005e0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e10:	462b      	mov	r3, r5
 8005e12:	2200      	movs	r2, #0
 8005e14:	4543      	cmp	r3, r8
 8005e16:	d321      	bcc.n	8005e5c <__multiply+0x98>
 8005e18:	f104 0314 	add.w	r3, r4, #20
 8005e1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e20:	f109 0314 	add.w	r3, r9, #20
 8005e24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e28:	9202      	str	r2, [sp, #8]
 8005e2a:	1b3a      	subs	r2, r7, r4
 8005e2c:	3a15      	subs	r2, #21
 8005e2e:	f022 0203 	bic.w	r2, r2, #3
 8005e32:	3204      	adds	r2, #4
 8005e34:	f104 0115 	add.w	r1, r4, #21
 8005e38:	428f      	cmp	r7, r1
 8005e3a:	bf38      	it	cc
 8005e3c:	2204      	movcc	r2, #4
 8005e3e:	9201      	str	r2, [sp, #4]
 8005e40:	9a02      	ldr	r2, [sp, #8]
 8005e42:	9303      	str	r3, [sp, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d80c      	bhi.n	8005e62 <__multiply+0x9e>
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	dd03      	ble.n	8005e54 <__multiply+0x90>
 8005e4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05a      	beq.n	8005f0a <__multiply+0x146>
 8005e54:	6106      	str	r6, [r0, #16]
 8005e56:	b005      	add	sp, #20
 8005e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5c:	f843 2b04 	str.w	r2, [r3], #4
 8005e60:	e7d8      	b.n	8005e14 <__multiply+0x50>
 8005e62:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e66:	f1ba 0f00 	cmp.w	sl, #0
 8005e6a:	d024      	beq.n	8005eb6 <__multiply+0xf2>
 8005e6c:	f104 0e14 	add.w	lr, r4, #20
 8005e70:	46a9      	mov	r9, r5
 8005e72:	f04f 0c00 	mov.w	ip, #0
 8005e76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005e7a:	f8d9 1000 	ldr.w	r1, [r9]
 8005e7e:	fa1f fb82 	uxth.w	fp, r2
 8005e82:	b289      	uxth	r1, r1
 8005e84:	fb0a 110b 	mla	r1, sl, fp, r1
 8005e88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e90:	4461      	add	r1, ip
 8005e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005e96:	fb0a c20b 	mla	r2, sl, fp, ip
 8005e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e9e:	b289      	uxth	r1, r1
 8005ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ea4:	4577      	cmp	r7, lr
 8005ea6:	f849 1b04 	str.w	r1, [r9], #4
 8005eaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005eae:	d8e2      	bhi.n	8005e76 <__multiply+0xb2>
 8005eb0:	9a01      	ldr	r2, [sp, #4]
 8005eb2:	f845 c002 	str.w	ip, [r5, r2]
 8005eb6:	9a03      	ldr	r2, [sp, #12]
 8005eb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	f1b9 0f00 	cmp.w	r9, #0
 8005ec2:	d020      	beq.n	8005f06 <__multiply+0x142>
 8005ec4:	6829      	ldr	r1, [r5, #0]
 8005ec6:	f104 0c14 	add.w	ip, r4, #20
 8005eca:	46ae      	mov	lr, r5
 8005ecc:	f04f 0a00 	mov.w	sl, #0
 8005ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ed8:	fb09 220b 	mla	r2, r9, fp, r2
 8005edc:	4492      	add	sl, r2
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ee4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005eec:	f8be 1000 	ldrh.w	r1, [lr]
 8005ef0:	0c12      	lsrs	r2, r2, #16
 8005ef2:	fb09 1102 	mla	r1, r9, r2, r1
 8005ef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005efa:	4567      	cmp	r7, ip
 8005efc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f00:	d8e6      	bhi.n	8005ed0 <__multiply+0x10c>
 8005f02:	9a01      	ldr	r2, [sp, #4]
 8005f04:	50a9      	str	r1, [r5, r2]
 8005f06:	3504      	adds	r5, #4
 8005f08:	e79a      	b.n	8005e40 <__multiply+0x7c>
 8005f0a:	3e01      	subs	r6, #1
 8005f0c:	e79c      	b.n	8005e48 <__multiply+0x84>
 8005f0e:	bf00      	nop
 8005f10:	080077eb 	.word	0x080077eb
 8005f14:	080077fc 	.word	0x080077fc

08005f18 <__pow5mult>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	f012 0203 	ands.w	r2, r2, #3
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	d007      	beq.n	8005f38 <__pow5mult+0x20>
 8005f28:	4c25      	ldr	r4, [pc, #148]	; (8005fc0 <__pow5mult+0xa8>)
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f32:	f7ff fe9b 	bl	8005c6c <__multadd>
 8005f36:	4607      	mov	r7, r0
 8005f38:	10ad      	asrs	r5, r5, #2
 8005f3a:	d03d      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f3e:	b97c      	cbnz	r4, 8005f60 <__pow5mult+0x48>
 8005f40:	2010      	movs	r0, #16
 8005f42:	f7ff fe1b 	bl	8005b7c <malloc>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6270      	str	r0, [r6, #36]	; 0x24
 8005f4a:	b928      	cbnz	r0, 8005f58 <__pow5mult+0x40>
 8005f4c:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <__pow5mult+0xac>)
 8005f4e:	481e      	ldr	r0, [pc, #120]	; (8005fc8 <__pow5mult+0xb0>)
 8005f50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f54:	f000 fc0e 	bl	8006774 <__assert_func>
 8005f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f5c:	6004      	str	r4, [r0, #0]
 8005f5e:	60c4      	str	r4, [r0, #12]
 8005f60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f68:	b94c      	cbnz	r4, 8005f7e <__pow5mult+0x66>
 8005f6a:	f240 2171 	movw	r1, #625	; 0x271
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f7ff ff12 	bl	8005d98 <__i2b>
 8005f74:	2300      	movs	r3, #0
 8005f76:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	6003      	str	r3, [r0, #0]
 8005f7e:	f04f 0900 	mov.w	r9, #0
 8005f82:	07eb      	lsls	r3, r5, #31
 8005f84:	d50a      	bpl.n	8005f9c <__pow5mult+0x84>
 8005f86:	4639      	mov	r1, r7
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7ff ff1a 	bl	8005dc4 <__multiply>
 8005f90:	4639      	mov	r1, r7
 8005f92:	4680      	mov	r8, r0
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff fe47 	bl	8005c28 <_Bfree>
 8005f9a:	4647      	mov	r7, r8
 8005f9c:	106d      	asrs	r5, r5, #1
 8005f9e:	d00b      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	b938      	cbnz	r0, 8005fb4 <__pow5mult+0x9c>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff ff0b 	bl	8005dc4 <__multiply>
 8005fae:	6020      	str	r0, [r4, #0]
 8005fb0:	f8c0 9000 	str.w	r9, [r0]
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e7e4      	b.n	8005f82 <__pow5mult+0x6a>
 8005fb8:	4638      	mov	r0, r7
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbe:	bf00      	nop
 8005fc0:	08007948 	.word	0x08007948
 8005fc4:	08007779 	.word	0x08007779
 8005fc8:	080077fc 	.word	0x080077fc

08005fcc <__lshift>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	6849      	ldr	r1, [r1, #4]
 8005fd4:	6923      	ldr	r3, [r4, #16]
 8005fd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	4607      	mov	r7, r0
 8005fde:	4691      	mov	r9, r2
 8005fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fe4:	f108 0601 	add.w	r6, r8, #1
 8005fe8:	42b3      	cmp	r3, r6
 8005fea:	db0b      	blt.n	8006004 <__lshift+0x38>
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff fddb 	bl	8005ba8 <_Balloc>
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b948      	cbnz	r0, 800600a <__lshift+0x3e>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <__lshift+0xd8>)
 8005ffa:	482b      	ldr	r0, [pc, #172]	; (80060a8 <__lshift+0xdc>)
 8005ffc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006000:	f000 fbb8 	bl	8006774 <__assert_func>
 8006004:	3101      	adds	r1, #1
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	e7ee      	b.n	8005fe8 <__lshift+0x1c>
 800600a:	2300      	movs	r3, #0
 800600c:	f100 0114 	add.w	r1, r0, #20
 8006010:	f100 0210 	add.w	r2, r0, #16
 8006014:	4618      	mov	r0, r3
 8006016:	4553      	cmp	r3, sl
 8006018:	db37      	blt.n	800608a <__lshift+0xbe>
 800601a:	6920      	ldr	r0, [r4, #16]
 800601c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006020:	f104 0314 	add.w	r3, r4, #20
 8006024:	f019 091f 	ands.w	r9, r9, #31
 8006028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800602c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006030:	d02f      	beq.n	8006092 <__lshift+0xc6>
 8006032:	f1c9 0e20 	rsb	lr, r9, #32
 8006036:	468a      	mov	sl, r1
 8006038:	f04f 0c00 	mov.w	ip, #0
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	fa02 f209 	lsl.w	r2, r2, r9
 8006042:	ea42 020c 	orr.w	r2, r2, ip
 8006046:	f84a 2b04 	str.w	r2, [sl], #4
 800604a:	f853 2b04 	ldr.w	r2, [r3], #4
 800604e:	4298      	cmp	r0, r3
 8006050:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006054:	d8f2      	bhi.n	800603c <__lshift+0x70>
 8006056:	1b03      	subs	r3, r0, r4
 8006058:	3b15      	subs	r3, #21
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	3304      	adds	r3, #4
 8006060:	f104 0215 	add.w	r2, r4, #21
 8006064:	4290      	cmp	r0, r2
 8006066:	bf38      	it	cc
 8006068:	2304      	movcc	r3, #4
 800606a:	f841 c003 	str.w	ip, [r1, r3]
 800606e:	f1bc 0f00 	cmp.w	ip, #0
 8006072:	d001      	beq.n	8006078 <__lshift+0xac>
 8006074:	f108 0602 	add.w	r6, r8, #2
 8006078:	3e01      	subs	r6, #1
 800607a:	4638      	mov	r0, r7
 800607c:	612e      	str	r6, [r5, #16]
 800607e:	4621      	mov	r1, r4
 8006080:	f7ff fdd2 	bl	8005c28 <_Bfree>
 8006084:	4628      	mov	r0, r5
 8006086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608a:	f842 0f04 	str.w	r0, [r2, #4]!
 800608e:	3301      	adds	r3, #1
 8006090:	e7c1      	b.n	8006016 <__lshift+0x4a>
 8006092:	3904      	subs	r1, #4
 8006094:	f853 2b04 	ldr.w	r2, [r3], #4
 8006098:	f841 2f04 	str.w	r2, [r1, #4]!
 800609c:	4298      	cmp	r0, r3
 800609e:	d8f9      	bhi.n	8006094 <__lshift+0xc8>
 80060a0:	e7ea      	b.n	8006078 <__lshift+0xac>
 80060a2:	bf00      	nop
 80060a4:	080077eb 	.word	0x080077eb
 80060a8:	080077fc 	.word	0x080077fc

080060ac <__mcmp>:
 80060ac:	b530      	push	{r4, r5, lr}
 80060ae:	6902      	ldr	r2, [r0, #16]
 80060b0:	690c      	ldr	r4, [r1, #16]
 80060b2:	1b12      	subs	r2, r2, r4
 80060b4:	d10e      	bne.n	80060d4 <__mcmp+0x28>
 80060b6:	f100 0314 	add.w	r3, r0, #20
 80060ba:	3114      	adds	r1, #20
 80060bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80060c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80060c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80060c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80060cc:	42a5      	cmp	r5, r4
 80060ce:	d003      	beq.n	80060d8 <__mcmp+0x2c>
 80060d0:	d305      	bcc.n	80060de <__mcmp+0x32>
 80060d2:	2201      	movs	r2, #1
 80060d4:	4610      	mov	r0, r2
 80060d6:	bd30      	pop	{r4, r5, pc}
 80060d8:	4283      	cmp	r3, r0
 80060da:	d3f3      	bcc.n	80060c4 <__mcmp+0x18>
 80060dc:	e7fa      	b.n	80060d4 <__mcmp+0x28>
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	e7f7      	b.n	80060d4 <__mcmp+0x28>

080060e4 <__mdiff>:
 80060e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e8:	460c      	mov	r4, r1
 80060ea:	4606      	mov	r6, r0
 80060ec:	4611      	mov	r1, r2
 80060ee:	4620      	mov	r0, r4
 80060f0:	4690      	mov	r8, r2
 80060f2:	f7ff ffdb 	bl	80060ac <__mcmp>
 80060f6:	1e05      	subs	r5, r0, #0
 80060f8:	d110      	bne.n	800611c <__mdiff+0x38>
 80060fa:	4629      	mov	r1, r5
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff fd53 	bl	8005ba8 <_Balloc>
 8006102:	b930      	cbnz	r0, 8006112 <__mdiff+0x2e>
 8006104:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <__mdiff+0x10c>)
 8006106:	4602      	mov	r2, r0
 8006108:	f240 2132 	movw	r1, #562	; 0x232
 800610c:	4839      	ldr	r0, [pc, #228]	; (80061f4 <__mdiff+0x110>)
 800610e:	f000 fb31 	bl	8006774 <__assert_func>
 8006112:	2301      	movs	r3, #1
 8006114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611c:	bfa4      	itt	ge
 800611e:	4643      	movge	r3, r8
 8006120:	46a0      	movge	r8, r4
 8006122:	4630      	mov	r0, r6
 8006124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006128:	bfa6      	itte	ge
 800612a:	461c      	movge	r4, r3
 800612c:	2500      	movge	r5, #0
 800612e:	2501      	movlt	r5, #1
 8006130:	f7ff fd3a 	bl	8005ba8 <_Balloc>
 8006134:	b920      	cbnz	r0, 8006140 <__mdiff+0x5c>
 8006136:	4b2e      	ldr	r3, [pc, #184]	; (80061f0 <__mdiff+0x10c>)
 8006138:	4602      	mov	r2, r0
 800613a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800613e:	e7e5      	b.n	800610c <__mdiff+0x28>
 8006140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006144:	6926      	ldr	r6, [r4, #16]
 8006146:	60c5      	str	r5, [r0, #12]
 8006148:	f104 0914 	add.w	r9, r4, #20
 800614c:	f108 0514 	add.w	r5, r8, #20
 8006150:	f100 0e14 	add.w	lr, r0, #20
 8006154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800615c:	f108 0210 	add.w	r2, r8, #16
 8006160:	46f2      	mov	sl, lr
 8006162:	2100      	movs	r1, #0
 8006164:	f859 3b04 	ldr.w	r3, [r9], #4
 8006168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800616c:	fa1f f883 	uxth.w	r8, r3
 8006170:	fa11 f18b 	uxtah	r1, r1, fp
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	eba1 0808 	sub.w	r8, r1, r8
 800617a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800617e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006182:	fa1f f888 	uxth.w	r8, r8
 8006186:	1419      	asrs	r1, r3, #16
 8006188:	454e      	cmp	r6, r9
 800618a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800618e:	f84a 3b04 	str.w	r3, [sl], #4
 8006192:	d8e7      	bhi.n	8006164 <__mdiff+0x80>
 8006194:	1b33      	subs	r3, r6, r4
 8006196:	3b15      	subs	r3, #21
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	3304      	adds	r3, #4
 800619e:	3415      	adds	r4, #21
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	bf38      	it	cc
 80061a4:	2304      	movcc	r3, #4
 80061a6:	441d      	add	r5, r3
 80061a8:	4473      	add	r3, lr
 80061aa:	469e      	mov	lr, r3
 80061ac:	462e      	mov	r6, r5
 80061ae:	4566      	cmp	r6, ip
 80061b0:	d30e      	bcc.n	80061d0 <__mdiff+0xec>
 80061b2:	f10c 0203 	add.w	r2, ip, #3
 80061b6:	1b52      	subs	r2, r2, r5
 80061b8:	f022 0203 	bic.w	r2, r2, #3
 80061bc:	3d03      	subs	r5, #3
 80061be:	45ac      	cmp	ip, r5
 80061c0:	bf38      	it	cc
 80061c2:	2200      	movcc	r2, #0
 80061c4:	441a      	add	r2, r3
 80061c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80061ca:	b17b      	cbz	r3, 80061ec <__mdiff+0x108>
 80061cc:	6107      	str	r7, [r0, #16]
 80061ce:	e7a3      	b.n	8006118 <__mdiff+0x34>
 80061d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80061d4:	fa11 f288 	uxtah	r2, r1, r8
 80061d8:	1414      	asrs	r4, r2, #16
 80061da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80061de:	b292      	uxth	r2, r2
 80061e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80061e4:	f84e 2b04 	str.w	r2, [lr], #4
 80061e8:	1421      	asrs	r1, r4, #16
 80061ea:	e7e0      	b.n	80061ae <__mdiff+0xca>
 80061ec:	3f01      	subs	r7, #1
 80061ee:	e7ea      	b.n	80061c6 <__mdiff+0xe2>
 80061f0:	080077eb 	.word	0x080077eb
 80061f4:	080077fc 	.word	0x080077fc

080061f8 <__d2b>:
 80061f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061fc:	4689      	mov	r9, r1
 80061fe:	2101      	movs	r1, #1
 8006200:	ec57 6b10 	vmov	r6, r7, d0
 8006204:	4690      	mov	r8, r2
 8006206:	f7ff fccf 	bl	8005ba8 <_Balloc>
 800620a:	4604      	mov	r4, r0
 800620c:	b930      	cbnz	r0, 800621c <__d2b+0x24>
 800620e:	4602      	mov	r2, r0
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <__d2b+0xb0>)
 8006212:	4826      	ldr	r0, [pc, #152]	; (80062ac <__d2b+0xb4>)
 8006214:	f240 310a 	movw	r1, #778	; 0x30a
 8006218:	f000 faac 	bl	8006774 <__assert_func>
 800621c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006224:	bb35      	cbnz	r5, 8006274 <__d2b+0x7c>
 8006226:	2e00      	cmp	r6, #0
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	d028      	beq.n	800627e <__d2b+0x86>
 800622c:	4668      	mov	r0, sp
 800622e:	9600      	str	r6, [sp, #0]
 8006230:	f7ff fd82 	bl	8005d38 <__lo0bits>
 8006234:	9900      	ldr	r1, [sp, #0]
 8006236:	b300      	cbz	r0, 800627a <__d2b+0x82>
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	f1c0 0320 	rsb	r3, r0, #32
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	430b      	orrs	r3, r1
 8006244:	40c2      	lsrs	r2, r0
 8006246:	6163      	str	r3, [r4, #20]
 8006248:	9201      	str	r2, [sp, #4]
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	61a3      	str	r3, [r4, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	bf14      	ite	ne
 8006252:	2202      	movne	r2, #2
 8006254:	2201      	moveq	r2, #1
 8006256:	6122      	str	r2, [r4, #16]
 8006258:	b1d5      	cbz	r5, 8006290 <__d2b+0x98>
 800625a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800625e:	4405      	add	r5, r0
 8006260:	f8c9 5000 	str.w	r5, [r9]
 8006264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006268:	f8c8 0000 	str.w	r0, [r8]
 800626c:	4620      	mov	r0, r4
 800626e:	b003      	add	sp, #12
 8006270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006278:	e7d5      	b.n	8006226 <__d2b+0x2e>
 800627a:	6161      	str	r1, [r4, #20]
 800627c:	e7e5      	b.n	800624a <__d2b+0x52>
 800627e:	a801      	add	r0, sp, #4
 8006280:	f7ff fd5a 	bl	8005d38 <__lo0bits>
 8006284:	9b01      	ldr	r3, [sp, #4]
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	2201      	movs	r2, #1
 800628a:	6122      	str	r2, [r4, #16]
 800628c:	3020      	adds	r0, #32
 800628e:	e7e3      	b.n	8006258 <__d2b+0x60>
 8006290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006298:	f8c9 0000 	str.w	r0, [r9]
 800629c:	6918      	ldr	r0, [r3, #16]
 800629e:	f7ff fd2b 	bl	8005cf8 <__hi0bits>
 80062a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062a6:	e7df      	b.n	8006268 <__d2b+0x70>
 80062a8:	080077eb 	.word	0x080077eb
 80062ac:	080077fc 	.word	0x080077fc

080062b0 <_calloc_r>:
 80062b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062b2:	fba1 2402 	umull	r2, r4, r1, r2
 80062b6:	b94c      	cbnz	r4, 80062cc <_calloc_r+0x1c>
 80062b8:	4611      	mov	r1, r2
 80062ba:	9201      	str	r2, [sp, #4]
 80062bc:	f000 f87a 	bl	80063b4 <_malloc_r>
 80062c0:	9a01      	ldr	r2, [sp, #4]
 80062c2:	4605      	mov	r5, r0
 80062c4:	b930      	cbnz	r0, 80062d4 <_calloc_r+0x24>
 80062c6:	4628      	mov	r0, r5
 80062c8:	b003      	add	sp, #12
 80062ca:	bd30      	pop	{r4, r5, pc}
 80062cc:	220c      	movs	r2, #12
 80062ce:	6002      	str	r2, [r0, #0]
 80062d0:	2500      	movs	r5, #0
 80062d2:	e7f8      	b.n	80062c6 <_calloc_r+0x16>
 80062d4:	4621      	mov	r1, r4
 80062d6:	f7fe f93f 	bl	8004558 <memset>
 80062da:	e7f4      	b.n	80062c6 <_calloc_r+0x16>

080062dc <_free_r>:
 80062dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062de:	2900      	cmp	r1, #0
 80062e0:	d044      	beq.n	800636c <_free_r+0x90>
 80062e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e6:	9001      	str	r0, [sp, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f1a1 0404 	sub.w	r4, r1, #4
 80062ee:	bfb8      	it	lt
 80062f0:	18e4      	addlt	r4, r4, r3
 80062f2:	f000 fa9b 	bl	800682c <__malloc_lock>
 80062f6:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <_free_r+0x94>)
 80062f8:	9801      	ldr	r0, [sp, #4]
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	b933      	cbnz	r3, 800630c <_free_r+0x30>
 80062fe:	6063      	str	r3, [r4, #4]
 8006300:	6014      	str	r4, [r2, #0]
 8006302:	b003      	add	sp, #12
 8006304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006308:	f000 ba96 	b.w	8006838 <__malloc_unlock>
 800630c:	42a3      	cmp	r3, r4
 800630e:	d908      	bls.n	8006322 <_free_r+0x46>
 8006310:	6825      	ldr	r5, [r4, #0]
 8006312:	1961      	adds	r1, r4, r5
 8006314:	428b      	cmp	r3, r1
 8006316:	bf01      	itttt	eq
 8006318:	6819      	ldreq	r1, [r3, #0]
 800631a:	685b      	ldreq	r3, [r3, #4]
 800631c:	1949      	addeq	r1, r1, r5
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	e7ed      	b.n	80062fe <_free_r+0x22>
 8006322:	461a      	mov	r2, r3
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b10b      	cbz	r3, 800632c <_free_r+0x50>
 8006328:	42a3      	cmp	r3, r4
 800632a:	d9fa      	bls.n	8006322 <_free_r+0x46>
 800632c:	6811      	ldr	r1, [r2, #0]
 800632e:	1855      	adds	r5, r2, r1
 8006330:	42a5      	cmp	r5, r4
 8006332:	d10b      	bne.n	800634c <_free_r+0x70>
 8006334:	6824      	ldr	r4, [r4, #0]
 8006336:	4421      	add	r1, r4
 8006338:	1854      	adds	r4, r2, r1
 800633a:	42a3      	cmp	r3, r4
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	d1e0      	bne.n	8006302 <_free_r+0x26>
 8006340:	681c      	ldr	r4, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	6053      	str	r3, [r2, #4]
 8006346:	4421      	add	r1, r4
 8006348:	6011      	str	r1, [r2, #0]
 800634a:	e7da      	b.n	8006302 <_free_r+0x26>
 800634c:	d902      	bls.n	8006354 <_free_r+0x78>
 800634e:	230c      	movs	r3, #12
 8006350:	6003      	str	r3, [r0, #0]
 8006352:	e7d6      	b.n	8006302 <_free_r+0x26>
 8006354:	6825      	ldr	r5, [r4, #0]
 8006356:	1961      	adds	r1, r4, r5
 8006358:	428b      	cmp	r3, r1
 800635a:	bf04      	itt	eq
 800635c:	6819      	ldreq	r1, [r3, #0]
 800635e:	685b      	ldreq	r3, [r3, #4]
 8006360:	6063      	str	r3, [r4, #4]
 8006362:	bf04      	itt	eq
 8006364:	1949      	addeq	r1, r1, r5
 8006366:	6021      	streq	r1, [r4, #0]
 8006368:	6054      	str	r4, [r2, #4]
 800636a:	e7ca      	b.n	8006302 <_free_r+0x26>
 800636c:	b003      	add	sp, #12
 800636e:	bd30      	pop	{r4, r5, pc}
 8006370:	200003e8 	.word	0x200003e8

08006374 <sbrk_aligned>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	4e0e      	ldr	r6, [pc, #56]	; (80063b0 <sbrk_aligned+0x3c>)
 8006378:	460c      	mov	r4, r1
 800637a:	6831      	ldr	r1, [r6, #0]
 800637c:	4605      	mov	r5, r0
 800637e:	b911      	cbnz	r1, 8006386 <sbrk_aligned+0x12>
 8006380:	f000 f9e8 	bl	8006754 <_sbrk_r>
 8006384:	6030      	str	r0, [r6, #0]
 8006386:	4621      	mov	r1, r4
 8006388:	4628      	mov	r0, r5
 800638a:	f000 f9e3 	bl	8006754 <_sbrk_r>
 800638e:	1c43      	adds	r3, r0, #1
 8006390:	d00a      	beq.n	80063a8 <sbrk_aligned+0x34>
 8006392:	1cc4      	adds	r4, r0, #3
 8006394:	f024 0403 	bic.w	r4, r4, #3
 8006398:	42a0      	cmp	r0, r4
 800639a:	d007      	beq.n	80063ac <sbrk_aligned+0x38>
 800639c:	1a21      	subs	r1, r4, r0
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 f9d8 	bl	8006754 <_sbrk_r>
 80063a4:	3001      	adds	r0, #1
 80063a6:	d101      	bne.n	80063ac <sbrk_aligned+0x38>
 80063a8:	f04f 34ff 	mov.w	r4, #4294967295
 80063ac:	4620      	mov	r0, r4
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	200003ec 	.word	0x200003ec

080063b4 <_malloc_r>:
 80063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b8:	1ccd      	adds	r5, r1, #3
 80063ba:	f025 0503 	bic.w	r5, r5, #3
 80063be:	3508      	adds	r5, #8
 80063c0:	2d0c      	cmp	r5, #12
 80063c2:	bf38      	it	cc
 80063c4:	250c      	movcc	r5, #12
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	4607      	mov	r7, r0
 80063ca:	db01      	blt.n	80063d0 <_malloc_r+0x1c>
 80063cc:	42a9      	cmp	r1, r5
 80063ce:	d905      	bls.n	80063dc <_malloc_r+0x28>
 80063d0:	230c      	movs	r3, #12
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	2600      	movs	r6, #0
 80063d6:	4630      	mov	r0, r6
 80063d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063dc:	4e2e      	ldr	r6, [pc, #184]	; (8006498 <_malloc_r+0xe4>)
 80063de:	f000 fa25 	bl	800682c <__malloc_lock>
 80063e2:	6833      	ldr	r3, [r6, #0]
 80063e4:	461c      	mov	r4, r3
 80063e6:	bb34      	cbnz	r4, 8006436 <_malloc_r+0x82>
 80063e8:	4629      	mov	r1, r5
 80063ea:	4638      	mov	r0, r7
 80063ec:	f7ff ffc2 	bl	8006374 <sbrk_aligned>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	4604      	mov	r4, r0
 80063f4:	d14d      	bne.n	8006492 <_malloc_r+0xde>
 80063f6:	6834      	ldr	r4, [r6, #0]
 80063f8:	4626      	mov	r6, r4
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	d140      	bne.n	8006480 <_malloc_r+0xcc>
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	4631      	mov	r1, r6
 8006402:	4638      	mov	r0, r7
 8006404:	eb04 0803 	add.w	r8, r4, r3
 8006408:	f000 f9a4 	bl	8006754 <_sbrk_r>
 800640c:	4580      	cmp	r8, r0
 800640e:	d13a      	bne.n	8006486 <_malloc_r+0xd2>
 8006410:	6821      	ldr	r1, [r4, #0]
 8006412:	3503      	adds	r5, #3
 8006414:	1a6d      	subs	r5, r5, r1
 8006416:	f025 0503 	bic.w	r5, r5, #3
 800641a:	3508      	adds	r5, #8
 800641c:	2d0c      	cmp	r5, #12
 800641e:	bf38      	it	cc
 8006420:	250c      	movcc	r5, #12
 8006422:	4629      	mov	r1, r5
 8006424:	4638      	mov	r0, r7
 8006426:	f7ff ffa5 	bl	8006374 <sbrk_aligned>
 800642a:	3001      	adds	r0, #1
 800642c:	d02b      	beq.n	8006486 <_malloc_r+0xd2>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	442b      	add	r3, r5
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	e00e      	b.n	8006454 <_malloc_r+0xa0>
 8006436:	6822      	ldr	r2, [r4, #0]
 8006438:	1b52      	subs	r2, r2, r5
 800643a:	d41e      	bmi.n	800647a <_malloc_r+0xc6>
 800643c:	2a0b      	cmp	r2, #11
 800643e:	d916      	bls.n	800646e <_malloc_r+0xba>
 8006440:	1961      	adds	r1, r4, r5
 8006442:	42a3      	cmp	r3, r4
 8006444:	6025      	str	r5, [r4, #0]
 8006446:	bf18      	it	ne
 8006448:	6059      	strne	r1, [r3, #4]
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	bf08      	it	eq
 800644e:	6031      	streq	r1, [r6, #0]
 8006450:	5162      	str	r2, [r4, r5]
 8006452:	604b      	str	r3, [r1, #4]
 8006454:	4638      	mov	r0, r7
 8006456:	f104 060b 	add.w	r6, r4, #11
 800645a:	f000 f9ed 	bl	8006838 <__malloc_unlock>
 800645e:	f026 0607 	bic.w	r6, r6, #7
 8006462:	1d23      	adds	r3, r4, #4
 8006464:	1af2      	subs	r2, r6, r3
 8006466:	d0b6      	beq.n	80063d6 <_malloc_r+0x22>
 8006468:	1b9b      	subs	r3, r3, r6
 800646a:	50a3      	str	r3, [r4, r2]
 800646c:	e7b3      	b.n	80063d6 <_malloc_r+0x22>
 800646e:	6862      	ldr	r2, [r4, #4]
 8006470:	42a3      	cmp	r3, r4
 8006472:	bf0c      	ite	eq
 8006474:	6032      	streq	r2, [r6, #0]
 8006476:	605a      	strne	r2, [r3, #4]
 8006478:	e7ec      	b.n	8006454 <_malloc_r+0xa0>
 800647a:	4623      	mov	r3, r4
 800647c:	6864      	ldr	r4, [r4, #4]
 800647e:	e7b2      	b.n	80063e6 <_malloc_r+0x32>
 8006480:	4634      	mov	r4, r6
 8006482:	6876      	ldr	r6, [r6, #4]
 8006484:	e7b9      	b.n	80063fa <_malloc_r+0x46>
 8006486:	230c      	movs	r3, #12
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4638      	mov	r0, r7
 800648c:	f000 f9d4 	bl	8006838 <__malloc_unlock>
 8006490:	e7a1      	b.n	80063d6 <_malloc_r+0x22>
 8006492:	6025      	str	r5, [r4, #0]
 8006494:	e7de      	b.n	8006454 <_malloc_r+0xa0>
 8006496:	bf00      	nop
 8006498:	200003e8 	.word	0x200003e8

0800649c <__ssputs_r>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	688e      	ldr	r6, [r1, #8]
 80064a2:	429e      	cmp	r6, r3
 80064a4:	4682      	mov	sl, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4690      	mov	r8, r2
 80064aa:	461f      	mov	r7, r3
 80064ac:	d838      	bhi.n	8006520 <__ssputs_r+0x84>
 80064ae:	898a      	ldrh	r2, [r1, #12]
 80064b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064b4:	d032      	beq.n	800651c <__ssputs_r+0x80>
 80064b6:	6825      	ldr	r5, [r4, #0]
 80064b8:	6909      	ldr	r1, [r1, #16]
 80064ba:	eba5 0901 	sub.w	r9, r5, r1
 80064be:	6965      	ldr	r5, [r4, #20]
 80064c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c8:	3301      	adds	r3, #1
 80064ca:	444b      	add	r3, r9
 80064cc:	106d      	asrs	r5, r5, #1
 80064ce:	429d      	cmp	r5, r3
 80064d0:	bf38      	it	cc
 80064d2:	461d      	movcc	r5, r3
 80064d4:	0553      	lsls	r3, r2, #21
 80064d6:	d531      	bpl.n	800653c <__ssputs_r+0xa0>
 80064d8:	4629      	mov	r1, r5
 80064da:	f7ff ff6b 	bl	80063b4 <_malloc_r>
 80064de:	4606      	mov	r6, r0
 80064e0:	b950      	cbnz	r0, 80064f8 <__ssputs_r+0x5c>
 80064e2:	230c      	movs	r3, #12
 80064e4:	f8ca 3000 	str.w	r3, [sl]
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f8:	6921      	ldr	r1, [r4, #16]
 80064fa:	464a      	mov	r2, r9
 80064fc:	f7ff fb46 	bl	8005b8c <memcpy>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650a:	81a3      	strh	r3, [r4, #12]
 800650c:	6126      	str	r6, [r4, #16]
 800650e:	6165      	str	r5, [r4, #20]
 8006510:	444e      	add	r6, r9
 8006512:	eba5 0509 	sub.w	r5, r5, r9
 8006516:	6026      	str	r6, [r4, #0]
 8006518:	60a5      	str	r5, [r4, #8]
 800651a:	463e      	mov	r6, r7
 800651c:	42be      	cmp	r6, r7
 800651e:	d900      	bls.n	8006522 <__ssputs_r+0x86>
 8006520:	463e      	mov	r6, r7
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	4632      	mov	r2, r6
 8006526:	4641      	mov	r1, r8
 8006528:	f000 f966 	bl	80067f8 <memmove>
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	1b9b      	subs	r3, r3, r6
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4433      	add	r3, r6
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	2000      	movs	r0, #0
 800653a:	e7db      	b.n	80064f4 <__ssputs_r+0x58>
 800653c:	462a      	mov	r2, r5
 800653e:	f000 f981 	bl	8006844 <_realloc_r>
 8006542:	4606      	mov	r6, r0
 8006544:	2800      	cmp	r0, #0
 8006546:	d1e1      	bne.n	800650c <__ssputs_r+0x70>
 8006548:	6921      	ldr	r1, [r4, #16]
 800654a:	4650      	mov	r0, sl
 800654c:	f7ff fec6 	bl	80062dc <_free_r>
 8006550:	e7c7      	b.n	80064e2 <__ssputs_r+0x46>
	...

08006554 <_svfiprintf_r>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4698      	mov	r8, r3
 800655a:	898b      	ldrh	r3, [r1, #12]
 800655c:	061b      	lsls	r3, r3, #24
 800655e:	b09d      	sub	sp, #116	; 0x74
 8006560:	4607      	mov	r7, r0
 8006562:	460d      	mov	r5, r1
 8006564:	4614      	mov	r4, r2
 8006566:	d50e      	bpl.n	8006586 <_svfiprintf_r+0x32>
 8006568:	690b      	ldr	r3, [r1, #16]
 800656a:	b963      	cbnz	r3, 8006586 <_svfiprintf_r+0x32>
 800656c:	2140      	movs	r1, #64	; 0x40
 800656e:	f7ff ff21 	bl	80063b4 <_malloc_r>
 8006572:	6028      	str	r0, [r5, #0]
 8006574:	6128      	str	r0, [r5, #16]
 8006576:	b920      	cbnz	r0, 8006582 <_svfiprintf_r+0x2e>
 8006578:	230c      	movs	r3, #12
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e0d1      	b.n	8006726 <_svfiprintf_r+0x1d2>
 8006582:	2340      	movs	r3, #64	; 0x40
 8006584:	616b      	str	r3, [r5, #20]
 8006586:	2300      	movs	r3, #0
 8006588:	9309      	str	r3, [sp, #36]	; 0x24
 800658a:	2320      	movs	r3, #32
 800658c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006590:	f8cd 800c 	str.w	r8, [sp, #12]
 8006594:	2330      	movs	r3, #48	; 0x30
 8006596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006740 <_svfiprintf_r+0x1ec>
 800659a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800659e:	f04f 0901 	mov.w	r9, #1
 80065a2:	4623      	mov	r3, r4
 80065a4:	469a      	mov	sl, r3
 80065a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065aa:	b10a      	cbz	r2, 80065b0 <_svfiprintf_r+0x5c>
 80065ac:	2a25      	cmp	r2, #37	; 0x25
 80065ae:	d1f9      	bne.n	80065a4 <_svfiprintf_r+0x50>
 80065b0:	ebba 0b04 	subs.w	fp, sl, r4
 80065b4:	d00b      	beq.n	80065ce <_svfiprintf_r+0x7a>
 80065b6:	465b      	mov	r3, fp
 80065b8:	4622      	mov	r2, r4
 80065ba:	4629      	mov	r1, r5
 80065bc:	4638      	mov	r0, r7
 80065be:	f7ff ff6d 	bl	800649c <__ssputs_r>
 80065c2:	3001      	adds	r0, #1
 80065c4:	f000 80aa 	beq.w	800671c <_svfiprintf_r+0x1c8>
 80065c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065ca:	445a      	add	r2, fp
 80065cc:	9209      	str	r2, [sp, #36]	; 0x24
 80065ce:	f89a 3000 	ldrb.w	r3, [sl]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80a2 	beq.w	800671c <_svfiprintf_r+0x1c8>
 80065d8:	2300      	movs	r3, #0
 80065da:	f04f 32ff 	mov.w	r2, #4294967295
 80065de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e2:	f10a 0a01 	add.w	sl, sl, #1
 80065e6:	9304      	str	r3, [sp, #16]
 80065e8:	9307      	str	r3, [sp, #28]
 80065ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ee:	931a      	str	r3, [sp, #104]	; 0x68
 80065f0:	4654      	mov	r4, sl
 80065f2:	2205      	movs	r2, #5
 80065f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f8:	4851      	ldr	r0, [pc, #324]	; (8006740 <_svfiprintf_r+0x1ec>)
 80065fa:	f7f9 fe11 	bl	8000220 <memchr>
 80065fe:	9a04      	ldr	r2, [sp, #16]
 8006600:	b9d8      	cbnz	r0, 800663a <_svfiprintf_r+0xe6>
 8006602:	06d0      	lsls	r0, r2, #27
 8006604:	bf44      	itt	mi
 8006606:	2320      	movmi	r3, #32
 8006608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800660c:	0711      	lsls	r1, r2, #28
 800660e:	bf44      	itt	mi
 8006610:	232b      	movmi	r3, #43	; 0x2b
 8006612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006616:	f89a 3000 	ldrb.w	r3, [sl]
 800661a:	2b2a      	cmp	r3, #42	; 0x2a
 800661c:	d015      	beq.n	800664a <_svfiprintf_r+0xf6>
 800661e:	9a07      	ldr	r2, [sp, #28]
 8006620:	4654      	mov	r4, sl
 8006622:	2000      	movs	r0, #0
 8006624:	f04f 0c0a 	mov.w	ip, #10
 8006628:	4621      	mov	r1, r4
 800662a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662e:	3b30      	subs	r3, #48	; 0x30
 8006630:	2b09      	cmp	r3, #9
 8006632:	d94e      	bls.n	80066d2 <_svfiprintf_r+0x17e>
 8006634:	b1b0      	cbz	r0, 8006664 <_svfiprintf_r+0x110>
 8006636:	9207      	str	r2, [sp, #28]
 8006638:	e014      	b.n	8006664 <_svfiprintf_r+0x110>
 800663a:	eba0 0308 	sub.w	r3, r0, r8
 800663e:	fa09 f303 	lsl.w	r3, r9, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	46a2      	mov	sl, r4
 8006648:	e7d2      	b.n	80065f0 <_svfiprintf_r+0x9c>
 800664a:	9b03      	ldr	r3, [sp, #12]
 800664c:	1d19      	adds	r1, r3, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	9103      	str	r1, [sp, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	bfbb      	ittet	lt
 8006656:	425b      	neglt	r3, r3
 8006658:	f042 0202 	orrlt.w	r2, r2, #2
 800665c:	9307      	strge	r3, [sp, #28]
 800665e:	9307      	strlt	r3, [sp, #28]
 8006660:	bfb8      	it	lt
 8006662:	9204      	strlt	r2, [sp, #16]
 8006664:	7823      	ldrb	r3, [r4, #0]
 8006666:	2b2e      	cmp	r3, #46	; 0x2e
 8006668:	d10c      	bne.n	8006684 <_svfiprintf_r+0x130>
 800666a:	7863      	ldrb	r3, [r4, #1]
 800666c:	2b2a      	cmp	r3, #42	; 0x2a
 800666e:	d135      	bne.n	80066dc <_svfiprintf_r+0x188>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	9203      	str	r2, [sp, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	bfb8      	it	lt
 800667c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006680:	3402      	adds	r4, #2
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006750 <_svfiprintf_r+0x1fc>
 8006688:	7821      	ldrb	r1, [r4, #0]
 800668a:	2203      	movs	r2, #3
 800668c:	4650      	mov	r0, sl
 800668e:	f7f9 fdc7 	bl	8000220 <memchr>
 8006692:	b140      	cbz	r0, 80066a6 <_svfiprintf_r+0x152>
 8006694:	2340      	movs	r3, #64	; 0x40
 8006696:	eba0 000a 	sub.w	r0, r0, sl
 800669a:	fa03 f000 	lsl.w	r0, r3, r0
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	4303      	orrs	r3, r0
 80066a2:	3401      	adds	r4, #1
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066aa:	4826      	ldr	r0, [pc, #152]	; (8006744 <_svfiprintf_r+0x1f0>)
 80066ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b0:	2206      	movs	r2, #6
 80066b2:	f7f9 fdb5 	bl	8000220 <memchr>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d038      	beq.n	800672c <_svfiprintf_r+0x1d8>
 80066ba:	4b23      	ldr	r3, [pc, #140]	; (8006748 <_svfiprintf_r+0x1f4>)
 80066bc:	bb1b      	cbnz	r3, 8006706 <_svfiprintf_r+0x1b2>
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	3308      	adds	r3, #8
 80066c8:	9303      	str	r3, [sp, #12]
 80066ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066cc:	4433      	add	r3, r6
 80066ce:	9309      	str	r3, [sp, #36]	; 0x24
 80066d0:	e767      	b.n	80065a2 <_svfiprintf_r+0x4e>
 80066d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d6:	460c      	mov	r4, r1
 80066d8:	2001      	movs	r0, #1
 80066da:	e7a5      	b.n	8006628 <_svfiprintf_r+0xd4>
 80066dc:	2300      	movs	r3, #0
 80066de:	3401      	adds	r4, #1
 80066e0:	9305      	str	r3, [sp, #20]
 80066e2:	4619      	mov	r1, r3
 80066e4:	f04f 0c0a 	mov.w	ip, #10
 80066e8:	4620      	mov	r0, r4
 80066ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ee:	3a30      	subs	r2, #48	; 0x30
 80066f0:	2a09      	cmp	r2, #9
 80066f2:	d903      	bls.n	80066fc <_svfiprintf_r+0x1a8>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0c5      	beq.n	8006684 <_svfiprintf_r+0x130>
 80066f8:	9105      	str	r1, [sp, #20]
 80066fa:	e7c3      	b.n	8006684 <_svfiprintf_r+0x130>
 80066fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006700:	4604      	mov	r4, r0
 8006702:	2301      	movs	r3, #1
 8006704:	e7f0      	b.n	80066e8 <_svfiprintf_r+0x194>
 8006706:	ab03      	add	r3, sp, #12
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	462a      	mov	r2, r5
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <_svfiprintf_r+0x1f8>)
 800670e:	a904      	add	r1, sp, #16
 8006710:	4638      	mov	r0, r7
 8006712:	f7fd ffc9 	bl	80046a8 <_printf_float>
 8006716:	1c42      	adds	r2, r0, #1
 8006718:	4606      	mov	r6, r0
 800671a:	d1d6      	bne.n	80066ca <_svfiprintf_r+0x176>
 800671c:	89ab      	ldrh	r3, [r5, #12]
 800671e:	065b      	lsls	r3, r3, #25
 8006720:	f53f af2c 	bmi.w	800657c <_svfiprintf_r+0x28>
 8006724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006726:	b01d      	add	sp, #116	; 0x74
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	ab03      	add	r3, sp, #12
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	462a      	mov	r2, r5
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <_svfiprintf_r+0x1f8>)
 8006734:	a904      	add	r1, sp, #16
 8006736:	4638      	mov	r0, r7
 8006738:	f7fe fa5a 	bl	8004bf0 <_printf_i>
 800673c:	e7eb      	b.n	8006716 <_svfiprintf_r+0x1c2>
 800673e:	bf00      	nop
 8006740:	08007954 	.word	0x08007954
 8006744:	0800795e 	.word	0x0800795e
 8006748:	080046a9 	.word	0x080046a9
 800674c:	0800649d 	.word	0x0800649d
 8006750:	0800795a 	.word	0x0800795a

08006754 <_sbrk_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d06      	ldr	r5, [pc, #24]	; (8006770 <_sbrk_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fb f99e 	bl	8001aa0 <_sbrk>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_sbrk_r+0x1a>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_sbrk_r+0x1a>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	200003f0 	.word	0x200003f0

08006774 <__assert_func>:
 8006774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006776:	4614      	mov	r4, r2
 8006778:	461a      	mov	r2, r3
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <__assert_func+0x2c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4605      	mov	r5, r0
 8006780:	68d8      	ldr	r0, [r3, #12]
 8006782:	b14c      	cbz	r4, 8006798 <__assert_func+0x24>
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <__assert_func+0x30>)
 8006786:	9100      	str	r1, [sp, #0]
 8006788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800678c:	4906      	ldr	r1, [pc, #24]	; (80067a8 <__assert_func+0x34>)
 800678e:	462b      	mov	r3, r5
 8006790:	f000 f80e 	bl	80067b0 <fiprintf>
 8006794:	f000 faac 	bl	8006cf0 <abort>
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <__assert_func+0x38>)
 800679a:	461c      	mov	r4, r3
 800679c:	e7f3      	b.n	8006786 <__assert_func+0x12>
 800679e:	bf00      	nop
 80067a0:	20000010 	.word	0x20000010
 80067a4:	08007965 	.word	0x08007965
 80067a8:	08007972 	.word	0x08007972
 80067ac:	080079a0 	.word	0x080079a0

080067b0 <fiprintf>:
 80067b0:	b40e      	push	{r1, r2, r3}
 80067b2:	b503      	push	{r0, r1, lr}
 80067b4:	4601      	mov	r1, r0
 80067b6:	ab03      	add	r3, sp, #12
 80067b8:	4805      	ldr	r0, [pc, #20]	; (80067d0 <fiprintf+0x20>)
 80067ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80067be:	6800      	ldr	r0, [r0, #0]
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	f000 f897 	bl	80068f4 <_vfiprintf_r>
 80067c6:	b002      	add	sp, #8
 80067c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067cc:	b003      	add	sp, #12
 80067ce:	4770      	bx	lr
 80067d0:	20000010 	.word	0x20000010

080067d4 <__ascii_mbtowc>:
 80067d4:	b082      	sub	sp, #8
 80067d6:	b901      	cbnz	r1, 80067da <__ascii_mbtowc+0x6>
 80067d8:	a901      	add	r1, sp, #4
 80067da:	b142      	cbz	r2, 80067ee <__ascii_mbtowc+0x1a>
 80067dc:	b14b      	cbz	r3, 80067f2 <__ascii_mbtowc+0x1e>
 80067de:	7813      	ldrb	r3, [r2, #0]
 80067e0:	600b      	str	r3, [r1, #0]
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	1e10      	subs	r0, r2, #0
 80067e6:	bf18      	it	ne
 80067e8:	2001      	movne	r0, #1
 80067ea:	b002      	add	sp, #8
 80067ec:	4770      	bx	lr
 80067ee:	4610      	mov	r0, r2
 80067f0:	e7fb      	b.n	80067ea <__ascii_mbtowc+0x16>
 80067f2:	f06f 0001 	mvn.w	r0, #1
 80067f6:	e7f8      	b.n	80067ea <__ascii_mbtowc+0x16>

080067f8 <memmove>:
 80067f8:	4288      	cmp	r0, r1
 80067fa:	b510      	push	{r4, lr}
 80067fc:	eb01 0402 	add.w	r4, r1, r2
 8006800:	d902      	bls.n	8006808 <memmove+0x10>
 8006802:	4284      	cmp	r4, r0
 8006804:	4623      	mov	r3, r4
 8006806:	d807      	bhi.n	8006818 <memmove+0x20>
 8006808:	1e43      	subs	r3, r0, #1
 800680a:	42a1      	cmp	r1, r4
 800680c:	d008      	beq.n	8006820 <memmove+0x28>
 800680e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006816:	e7f8      	b.n	800680a <memmove+0x12>
 8006818:	4402      	add	r2, r0
 800681a:	4601      	mov	r1, r0
 800681c:	428a      	cmp	r2, r1
 800681e:	d100      	bne.n	8006822 <memmove+0x2a>
 8006820:	bd10      	pop	{r4, pc}
 8006822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800682a:	e7f7      	b.n	800681c <memmove+0x24>

0800682c <__malloc_lock>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__malloc_lock+0x8>)
 800682e:	f000 bc1f 	b.w	8007070 <__retarget_lock_acquire_recursive>
 8006832:	bf00      	nop
 8006834:	200003f4 	.word	0x200003f4

08006838 <__malloc_unlock>:
 8006838:	4801      	ldr	r0, [pc, #4]	; (8006840 <__malloc_unlock+0x8>)
 800683a:	f000 bc1a 	b.w	8007072 <__retarget_lock_release_recursive>
 800683e:	bf00      	nop
 8006840:	200003f4 	.word	0x200003f4

08006844 <_realloc_r>:
 8006844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006848:	4680      	mov	r8, r0
 800684a:	4614      	mov	r4, r2
 800684c:	460e      	mov	r6, r1
 800684e:	b921      	cbnz	r1, 800685a <_realloc_r+0x16>
 8006850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	4611      	mov	r1, r2
 8006856:	f7ff bdad 	b.w	80063b4 <_malloc_r>
 800685a:	b92a      	cbnz	r2, 8006868 <_realloc_r+0x24>
 800685c:	f7ff fd3e 	bl	80062dc <_free_r>
 8006860:	4625      	mov	r5, r4
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006868:	f000 fc6a 	bl	8007140 <_malloc_usable_size_r>
 800686c:	4284      	cmp	r4, r0
 800686e:	4607      	mov	r7, r0
 8006870:	d802      	bhi.n	8006878 <_realloc_r+0x34>
 8006872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006876:	d812      	bhi.n	800689e <_realloc_r+0x5a>
 8006878:	4621      	mov	r1, r4
 800687a:	4640      	mov	r0, r8
 800687c:	f7ff fd9a 	bl	80063b4 <_malloc_r>
 8006880:	4605      	mov	r5, r0
 8006882:	2800      	cmp	r0, #0
 8006884:	d0ed      	beq.n	8006862 <_realloc_r+0x1e>
 8006886:	42bc      	cmp	r4, r7
 8006888:	4622      	mov	r2, r4
 800688a:	4631      	mov	r1, r6
 800688c:	bf28      	it	cs
 800688e:	463a      	movcs	r2, r7
 8006890:	f7ff f97c 	bl	8005b8c <memcpy>
 8006894:	4631      	mov	r1, r6
 8006896:	4640      	mov	r0, r8
 8006898:	f7ff fd20 	bl	80062dc <_free_r>
 800689c:	e7e1      	b.n	8006862 <_realloc_r+0x1e>
 800689e:	4635      	mov	r5, r6
 80068a0:	e7df      	b.n	8006862 <_realloc_r+0x1e>

080068a2 <__sfputc_r>:
 80068a2:	6893      	ldr	r3, [r2, #8]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	b410      	push	{r4}
 80068aa:	6093      	str	r3, [r2, #8]
 80068ac:	da08      	bge.n	80068c0 <__sfputc_r+0x1e>
 80068ae:	6994      	ldr	r4, [r2, #24]
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	db01      	blt.n	80068b8 <__sfputc_r+0x16>
 80068b4:	290a      	cmp	r1, #10
 80068b6:	d103      	bne.n	80068c0 <__sfputc_r+0x1e>
 80068b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068bc:	f000 b94a 	b.w	8006b54 <__swbuf_r>
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	1c58      	adds	r0, r3, #1
 80068c4:	6010      	str	r0, [r2, #0]
 80068c6:	7019      	strb	r1, [r3, #0]
 80068c8:	4608      	mov	r0, r1
 80068ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <__sfputs_r>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	4614      	mov	r4, r2
 80068d8:	18d5      	adds	r5, r2, r3
 80068da:	42ac      	cmp	r4, r5
 80068dc:	d101      	bne.n	80068e2 <__sfputs_r+0x12>
 80068de:	2000      	movs	r0, #0
 80068e0:	e007      	b.n	80068f2 <__sfputs_r+0x22>
 80068e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e6:	463a      	mov	r2, r7
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ffda 	bl	80068a2 <__sfputc_r>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	d1f3      	bne.n	80068da <__sfputs_r+0xa>
 80068f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068f4 <_vfiprintf_r>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	460d      	mov	r5, r1
 80068fa:	b09d      	sub	sp, #116	; 0x74
 80068fc:	4614      	mov	r4, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	4606      	mov	r6, r0
 8006902:	b118      	cbz	r0, 800690c <_vfiprintf_r+0x18>
 8006904:	6983      	ldr	r3, [r0, #24]
 8006906:	b90b      	cbnz	r3, 800690c <_vfiprintf_r+0x18>
 8006908:	f000 fb14 	bl	8006f34 <__sinit>
 800690c:	4b89      	ldr	r3, [pc, #548]	; (8006b34 <_vfiprintf_r+0x240>)
 800690e:	429d      	cmp	r5, r3
 8006910:	d11b      	bne.n	800694a <_vfiprintf_r+0x56>
 8006912:	6875      	ldr	r5, [r6, #4]
 8006914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006916:	07d9      	lsls	r1, r3, #31
 8006918:	d405      	bmi.n	8006926 <_vfiprintf_r+0x32>
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d402      	bmi.n	8006926 <_vfiprintf_r+0x32>
 8006920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006922:	f000 fba5 	bl	8007070 <__retarget_lock_acquire_recursive>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	d501      	bpl.n	8006930 <_vfiprintf_r+0x3c>
 800692c:	692b      	ldr	r3, [r5, #16]
 800692e:	b9eb      	cbnz	r3, 800696c <_vfiprintf_r+0x78>
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f000 f96e 	bl	8006c14 <__swsetup_r>
 8006938:	b1c0      	cbz	r0, 800696c <_vfiprintf_r+0x78>
 800693a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693c:	07dc      	lsls	r4, r3, #31
 800693e:	d50e      	bpl.n	800695e <_vfiprintf_r+0x6a>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295
 8006944:	b01d      	add	sp, #116	; 0x74
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	4b7b      	ldr	r3, [pc, #492]	; (8006b38 <_vfiprintf_r+0x244>)
 800694c:	429d      	cmp	r5, r3
 800694e:	d101      	bne.n	8006954 <_vfiprintf_r+0x60>
 8006950:	68b5      	ldr	r5, [r6, #8]
 8006952:	e7df      	b.n	8006914 <_vfiprintf_r+0x20>
 8006954:	4b79      	ldr	r3, [pc, #484]	; (8006b3c <_vfiprintf_r+0x248>)
 8006956:	429d      	cmp	r5, r3
 8006958:	bf08      	it	eq
 800695a:	68f5      	ldreq	r5, [r6, #12]
 800695c:	e7da      	b.n	8006914 <_vfiprintf_r+0x20>
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	0598      	lsls	r0, r3, #22
 8006962:	d4ed      	bmi.n	8006940 <_vfiprintf_r+0x4c>
 8006964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006966:	f000 fb84 	bl	8007072 <__retarget_lock_release_recursive>
 800696a:	e7e9      	b.n	8006940 <_vfiprintf_r+0x4c>
 800696c:	2300      	movs	r3, #0
 800696e:	9309      	str	r3, [sp, #36]	; 0x24
 8006970:	2320      	movs	r3, #32
 8006972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006976:	f8cd 800c 	str.w	r8, [sp, #12]
 800697a:	2330      	movs	r3, #48	; 0x30
 800697c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b40 <_vfiprintf_r+0x24c>
 8006980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	4623      	mov	r3, r4
 800698a:	469a      	mov	sl, r3
 800698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006990:	b10a      	cbz	r2, 8006996 <_vfiprintf_r+0xa2>
 8006992:	2a25      	cmp	r2, #37	; 0x25
 8006994:	d1f9      	bne.n	800698a <_vfiprintf_r+0x96>
 8006996:	ebba 0b04 	subs.w	fp, sl, r4
 800699a:	d00b      	beq.n	80069b4 <_vfiprintf_r+0xc0>
 800699c:	465b      	mov	r3, fp
 800699e:	4622      	mov	r2, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ff94 	bl	80068d0 <__sfputs_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f000 80aa 	beq.w	8006b02 <_vfiprintf_r+0x20e>
 80069ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b0:	445a      	add	r2, fp
 80069b2:	9209      	str	r2, [sp, #36]	; 0x24
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80a2 	beq.w	8006b02 <_vfiprintf_r+0x20e>
 80069be:	2300      	movs	r3, #0
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d4:	931a      	str	r3, [sp, #104]	; 0x68
 80069d6:	4654      	mov	r4, sl
 80069d8:	2205      	movs	r2, #5
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4858      	ldr	r0, [pc, #352]	; (8006b40 <_vfiprintf_r+0x24c>)
 80069e0:	f7f9 fc1e 	bl	8000220 <memchr>
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	b9d8      	cbnz	r0, 8006a20 <_vfiprintf_r+0x12c>
 80069e8:	06d1      	lsls	r1, r2, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2320      	movmi	r3, #32
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f2:	0713      	lsls	r3, r2, #28
 80069f4:	bf44      	itt	mi
 80069f6:	232b      	movmi	r3, #43	; 0x2b
 80069f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006a00:	2b2a      	cmp	r3, #42	; 0x2a
 8006a02:	d015      	beq.n	8006a30 <_vfiprintf_r+0x13c>
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4654      	mov	r4, sl
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a14:	3b30      	subs	r3, #48	; 0x30
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d94e      	bls.n	8006ab8 <_vfiprintf_r+0x1c4>
 8006a1a:	b1b0      	cbz	r0, 8006a4a <_vfiprintf_r+0x156>
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	e014      	b.n	8006a4a <_vfiprintf_r+0x156>
 8006a20:	eba0 0308 	sub.w	r3, r0, r8
 8006a24:	fa09 f303 	lsl.w	r3, r9, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	46a2      	mov	sl, r4
 8006a2e:	e7d2      	b.n	80069d6 <_vfiprintf_r+0xe2>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbb      	ittet	lt
 8006a3c:	425b      	neglt	r3, r3
 8006a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a42:	9307      	strge	r3, [sp, #28]
 8006a44:	9307      	strlt	r3, [sp, #28]
 8006a46:	bfb8      	it	lt
 8006a48:	9204      	strlt	r2, [sp, #16]
 8006a4a:	7823      	ldrb	r3, [r4, #0]
 8006a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4e:	d10c      	bne.n	8006a6a <_vfiprintf_r+0x176>
 8006a50:	7863      	ldrb	r3, [r4, #1]
 8006a52:	2b2a      	cmp	r3, #42	; 0x2a
 8006a54:	d135      	bne.n	8006ac2 <_vfiprintf_r+0x1ce>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9203      	str	r2, [sp, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a66:	3402      	adds	r4, #2
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b50 <_vfiprintf_r+0x25c>
 8006a6e:	7821      	ldrb	r1, [r4, #0]
 8006a70:	2203      	movs	r2, #3
 8006a72:	4650      	mov	r0, sl
 8006a74:	f7f9 fbd4 	bl	8000220 <memchr>
 8006a78:	b140      	cbz	r0, 8006a8c <_vfiprintf_r+0x198>
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	eba0 000a 	sub.w	r0, r0, sl
 8006a80:	fa03 f000 	lsl.w	r0, r3, r0
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	4303      	orrs	r3, r0
 8006a88:	3401      	adds	r4, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a90:	482c      	ldr	r0, [pc, #176]	; (8006b44 <_vfiprintf_r+0x250>)
 8006a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a96:	2206      	movs	r2, #6
 8006a98:	f7f9 fbc2 	bl	8000220 <memchr>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d03f      	beq.n	8006b20 <_vfiprintf_r+0x22c>
 8006aa0:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <_vfiprintf_r+0x254>)
 8006aa2:	bb1b      	cbnz	r3, 8006aec <_vfiprintf_r+0x1f8>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	3307      	adds	r3, #7
 8006aa8:	f023 0307 	bic.w	r3, r3, #7
 8006aac:	3308      	adds	r3, #8
 8006aae:	9303      	str	r3, [sp, #12]
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	443b      	add	r3, r7
 8006ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab6:	e767      	b.n	8006988 <_vfiprintf_r+0x94>
 8006ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006abc:	460c      	mov	r4, r1
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7a5      	b.n	8006a0e <_vfiprintf_r+0x11a>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	3401      	adds	r4, #1
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f04f 0c0a 	mov.w	ip, #10
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad4:	3a30      	subs	r2, #48	; 0x30
 8006ad6:	2a09      	cmp	r2, #9
 8006ad8:	d903      	bls.n	8006ae2 <_vfiprintf_r+0x1ee>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0c5      	beq.n	8006a6a <_vfiprintf_r+0x176>
 8006ade:	9105      	str	r1, [sp, #20]
 8006ae0:	e7c3      	b.n	8006a6a <_vfiprintf_r+0x176>
 8006ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f0      	b.n	8006ace <_vfiprintf_r+0x1da>
 8006aec:	ab03      	add	r3, sp, #12
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	462a      	mov	r2, r5
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <_vfiprintf_r+0x258>)
 8006af4:	a904      	add	r1, sp, #16
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7fd fdd6 	bl	80046a8 <_printf_float>
 8006afc:	4607      	mov	r7, r0
 8006afe:	1c78      	adds	r0, r7, #1
 8006b00:	d1d6      	bne.n	8006ab0 <_vfiprintf_r+0x1bc>
 8006b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b04:	07d9      	lsls	r1, r3, #31
 8006b06:	d405      	bmi.n	8006b14 <_vfiprintf_r+0x220>
 8006b08:	89ab      	ldrh	r3, [r5, #12]
 8006b0a:	059a      	lsls	r2, r3, #22
 8006b0c:	d402      	bmi.n	8006b14 <_vfiprintf_r+0x220>
 8006b0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b10:	f000 faaf 	bl	8007072 <__retarget_lock_release_recursive>
 8006b14:	89ab      	ldrh	r3, [r5, #12]
 8006b16:	065b      	lsls	r3, r3, #25
 8006b18:	f53f af12 	bmi.w	8006940 <_vfiprintf_r+0x4c>
 8006b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b1e:	e711      	b.n	8006944 <_vfiprintf_r+0x50>
 8006b20:	ab03      	add	r3, sp, #12
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	462a      	mov	r2, r5
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <_vfiprintf_r+0x258>)
 8006b28:	a904      	add	r1, sp, #16
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f7fe f860 	bl	8004bf0 <_printf_i>
 8006b30:	e7e4      	b.n	8006afc <_vfiprintf_r+0x208>
 8006b32:	bf00      	nop
 8006b34:	08007acc 	.word	0x08007acc
 8006b38:	08007aec 	.word	0x08007aec
 8006b3c:	08007aac 	.word	0x08007aac
 8006b40:	08007954 	.word	0x08007954
 8006b44:	0800795e 	.word	0x0800795e
 8006b48:	080046a9 	.word	0x080046a9
 8006b4c:	080068d1 	.word	0x080068d1
 8006b50:	0800795a 	.word	0x0800795a

08006b54 <__swbuf_r>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	460e      	mov	r6, r1
 8006b58:	4614      	mov	r4, r2
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	b118      	cbz	r0, 8006b66 <__swbuf_r+0x12>
 8006b5e:	6983      	ldr	r3, [r0, #24]
 8006b60:	b90b      	cbnz	r3, 8006b66 <__swbuf_r+0x12>
 8006b62:	f000 f9e7 	bl	8006f34 <__sinit>
 8006b66:	4b21      	ldr	r3, [pc, #132]	; (8006bec <__swbuf_r+0x98>)
 8006b68:	429c      	cmp	r4, r3
 8006b6a:	d12b      	bne.n	8006bc4 <__swbuf_r+0x70>
 8006b6c:	686c      	ldr	r4, [r5, #4]
 8006b6e:	69a3      	ldr	r3, [r4, #24]
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	071a      	lsls	r2, r3, #28
 8006b76:	d52f      	bpl.n	8006bd8 <__swbuf_r+0x84>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	b36b      	cbz	r3, 8006bd8 <__swbuf_r+0x84>
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1ac0      	subs	r0, r0, r3
 8006b82:	6963      	ldr	r3, [r4, #20]
 8006b84:	b2f6      	uxtb	r6, r6
 8006b86:	4283      	cmp	r3, r0
 8006b88:	4637      	mov	r7, r6
 8006b8a:	dc04      	bgt.n	8006b96 <__swbuf_r+0x42>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f000 f93c 	bl	8006e0c <_fflush_r>
 8006b94:	bb30      	cbnz	r0, 8006be4 <__swbuf_r+0x90>
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	6022      	str	r2, [r4, #0]
 8006ba2:	701e      	strb	r6, [r3, #0]
 8006ba4:	6963      	ldr	r3, [r4, #20]
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	4283      	cmp	r3, r0
 8006baa:	d004      	beq.n	8006bb6 <__swbuf_r+0x62>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	07db      	lsls	r3, r3, #31
 8006bb0:	d506      	bpl.n	8006bc0 <__swbuf_r+0x6c>
 8006bb2:	2e0a      	cmp	r6, #10
 8006bb4:	d104      	bne.n	8006bc0 <__swbuf_r+0x6c>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	f000 f927 	bl	8006e0c <_fflush_r>
 8006bbe:	b988      	cbnz	r0, 8006be4 <__swbuf_r+0x90>
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <__swbuf_r+0x9c>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d101      	bne.n	8006bce <__swbuf_r+0x7a>
 8006bca:	68ac      	ldr	r4, [r5, #8]
 8006bcc:	e7cf      	b.n	8006b6e <__swbuf_r+0x1a>
 8006bce:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <__swbuf_r+0xa0>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	bf08      	it	eq
 8006bd4:	68ec      	ldreq	r4, [r5, #12]
 8006bd6:	e7ca      	b.n	8006b6e <__swbuf_r+0x1a>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f000 f81a 	bl	8006c14 <__swsetup_r>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d0cb      	beq.n	8006b7c <__swbuf_r+0x28>
 8006be4:	f04f 37ff 	mov.w	r7, #4294967295
 8006be8:	e7ea      	b.n	8006bc0 <__swbuf_r+0x6c>
 8006bea:	bf00      	nop
 8006bec:	08007acc 	.word	0x08007acc
 8006bf0:	08007aec 	.word	0x08007aec
 8006bf4:	08007aac 	.word	0x08007aac

08006bf8 <__ascii_wctomb>:
 8006bf8:	b149      	cbz	r1, 8006c0e <__ascii_wctomb+0x16>
 8006bfa:	2aff      	cmp	r2, #255	; 0xff
 8006bfc:	bf85      	ittet	hi
 8006bfe:	238a      	movhi	r3, #138	; 0x8a
 8006c00:	6003      	strhi	r3, [r0, #0]
 8006c02:	700a      	strbls	r2, [r1, #0]
 8006c04:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c08:	bf98      	it	ls
 8006c0a:	2001      	movls	r0, #1
 8006c0c:	4770      	bx	lr
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4770      	bx	lr
	...

08006c14 <__swsetup_r>:
 8006c14:	4b32      	ldr	r3, [pc, #200]	; (8006ce0 <__swsetup_r+0xcc>)
 8006c16:	b570      	push	{r4, r5, r6, lr}
 8006c18:	681d      	ldr	r5, [r3, #0]
 8006c1a:	4606      	mov	r6, r0
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	b125      	cbz	r5, 8006c2a <__swsetup_r+0x16>
 8006c20:	69ab      	ldr	r3, [r5, #24]
 8006c22:	b913      	cbnz	r3, 8006c2a <__swsetup_r+0x16>
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 f985 	bl	8006f34 <__sinit>
 8006c2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ce4 <__swsetup_r+0xd0>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d10f      	bne.n	8006c50 <__swsetup_r+0x3c>
 8006c30:	686c      	ldr	r4, [r5, #4]
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c38:	0719      	lsls	r1, r3, #28
 8006c3a:	d42c      	bmi.n	8006c96 <__swsetup_r+0x82>
 8006c3c:	06dd      	lsls	r5, r3, #27
 8006c3e:	d411      	bmi.n	8006c64 <__swsetup_r+0x50>
 8006c40:	2309      	movs	r3, #9
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	e03e      	b.n	8006cce <__swsetup_r+0xba>
 8006c50:	4b25      	ldr	r3, [pc, #148]	; (8006ce8 <__swsetup_r+0xd4>)
 8006c52:	429c      	cmp	r4, r3
 8006c54:	d101      	bne.n	8006c5a <__swsetup_r+0x46>
 8006c56:	68ac      	ldr	r4, [r5, #8]
 8006c58:	e7eb      	b.n	8006c32 <__swsetup_r+0x1e>
 8006c5a:	4b24      	ldr	r3, [pc, #144]	; (8006cec <__swsetup_r+0xd8>)
 8006c5c:	429c      	cmp	r4, r3
 8006c5e:	bf08      	it	eq
 8006c60:	68ec      	ldreq	r4, [r5, #12]
 8006c62:	e7e6      	b.n	8006c32 <__swsetup_r+0x1e>
 8006c64:	0758      	lsls	r0, r3, #29
 8006c66:	d512      	bpl.n	8006c8e <__swsetup_r+0x7a>
 8006c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c6a:	b141      	cbz	r1, 8006c7e <__swsetup_r+0x6a>
 8006c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c70:	4299      	cmp	r1, r3
 8006c72:	d002      	beq.n	8006c7a <__swsetup_r+0x66>
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff fb31 	bl	80062dc <_free_r>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	2300      	movs	r3, #0
 8006c88:	6063      	str	r3, [r4, #4]
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	6023      	str	r3, [r4, #0]
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f043 0308 	orr.w	r3, r3, #8
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	b94b      	cbnz	r3, 8006cae <__swsetup_r+0x9a>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca4:	d003      	beq.n	8006cae <__swsetup_r+0x9a>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 fa09 	bl	80070c0 <__smakebuf_r>
 8006cae:	89a0      	ldrh	r0, [r4, #12]
 8006cb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb4:	f010 0301 	ands.w	r3, r0, #1
 8006cb8:	d00a      	beq.n	8006cd0 <__swsetup_r+0xbc>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60a3      	str	r3, [r4, #8]
 8006cbe:	6963      	ldr	r3, [r4, #20]
 8006cc0:	425b      	negs	r3, r3
 8006cc2:	61a3      	str	r3, [r4, #24]
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	b943      	cbnz	r3, 8006cda <__swsetup_r+0xc6>
 8006cc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ccc:	d1ba      	bne.n	8006c44 <__swsetup_r+0x30>
 8006cce:	bd70      	pop	{r4, r5, r6, pc}
 8006cd0:	0781      	lsls	r1, r0, #30
 8006cd2:	bf58      	it	pl
 8006cd4:	6963      	ldrpl	r3, [r4, #20]
 8006cd6:	60a3      	str	r3, [r4, #8]
 8006cd8:	e7f4      	b.n	8006cc4 <__swsetup_r+0xb0>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e7f7      	b.n	8006cce <__swsetup_r+0xba>
 8006cde:	bf00      	nop
 8006ce0:	20000010 	.word	0x20000010
 8006ce4:	08007acc 	.word	0x08007acc
 8006ce8:	08007aec 	.word	0x08007aec
 8006cec:	08007aac 	.word	0x08007aac

08006cf0 <abort>:
 8006cf0:	b508      	push	{r3, lr}
 8006cf2:	2006      	movs	r0, #6
 8006cf4:	f000 fa54 	bl	80071a0 <raise>
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	f7fa fe59 	bl	80019b0 <_exit>
	...

08006d00 <__sflush_r>:
 8006d00:	898a      	ldrh	r2, [r1, #12]
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	4605      	mov	r5, r0
 8006d08:	0710      	lsls	r0, r2, #28
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	d458      	bmi.n	8006dc0 <__sflush_r+0xc0>
 8006d0e:	684b      	ldr	r3, [r1, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dc05      	bgt.n	8006d20 <__sflush_r+0x20>
 8006d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dc02      	bgt.n	8006d20 <__sflush_r+0x20>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	d0f9      	beq.n	8006d1a <__sflush_r+0x1a>
 8006d26:	2300      	movs	r3, #0
 8006d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d2c:	682f      	ldr	r7, [r5, #0]
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	d032      	beq.n	8006d98 <__sflush_r+0x98>
 8006d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	075a      	lsls	r2, r3, #29
 8006d38:	d505      	bpl.n	8006d46 <__sflush_r+0x46>
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	1ac0      	subs	r0, r0, r3
 8006d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d40:	b10b      	cbz	r3, 8006d46 <__sflush_r+0x46>
 8006d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d44:	1ac0      	subs	r0, r0, r3
 8006d46:	2300      	movs	r3, #0
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d4c:	6a21      	ldr	r1, [r4, #32]
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b0      	blx	r6
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	d106      	bne.n	8006d66 <__sflush_r+0x66>
 8006d58:	6829      	ldr	r1, [r5, #0]
 8006d5a:	291d      	cmp	r1, #29
 8006d5c:	d82c      	bhi.n	8006db8 <__sflush_r+0xb8>
 8006d5e:	4a2a      	ldr	r2, [pc, #168]	; (8006e08 <__sflush_r+0x108>)
 8006d60:	40ca      	lsrs	r2, r1
 8006d62:	07d6      	lsls	r6, r2, #31
 8006d64:	d528      	bpl.n	8006db8 <__sflush_r+0xb8>
 8006d66:	2200      	movs	r2, #0
 8006d68:	6062      	str	r2, [r4, #4]
 8006d6a:	04d9      	lsls	r1, r3, #19
 8006d6c:	6922      	ldr	r2, [r4, #16]
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	d504      	bpl.n	8006d7c <__sflush_r+0x7c>
 8006d72:	1c42      	adds	r2, r0, #1
 8006d74:	d101      	bne.n	8006d7a <__sflush_r+0x7a>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	b903      	cbnz	r3, 8006d7c <__sflush_r+0x7c>
 8006d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d7e:	602f      	str	r7, [r5, #0]
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d0ca      	beq.n	8006d1a <__sflush_r+0x1a>
 8006d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d88:	4299      	cmp	r1, r3
 8006d8a:	d002      	beq.n	8006d92 <__sflush_r+0x92>
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f7ff faa5 	bl	80062dc <_free_r>
 8006d92:	2000      	movs	r0, #0
 8006d94:	6360      	str	r0, [r4, #52]	; 0x34
 8006d96:	e7c1      	b.n	8006d1c <__sflush_r+0x1c>
 8006d98:	6a21      	ldr	r1, [r4, #32]
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	47b0      	blx	r6
 8006da0:	1c41      	adds	r1, r0, #1
 8006da2:	d1c7      	bne.n	8006d34 <__sflush_r+0x34>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0c4      	beq.n	8006d34 <__sflush_r+0x34>
 8006daa:	2b1d      	cmp	r3, #29
 8006dac:	d001      	beq.n	8006db2 <__sflush_r+0xb2>
 8006dae:	2b16      	cmp	r3, #22
 8006db0:	d101      	bne.n	8006db6 <__sflush_r+0xb6>
 8006db2:	602f      	str	r7, [r5, #0]
 8006db4:	e7b1      	b.n	8006d1a <__sflush_r+0x1a>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	e7ad      	b.n	8006d1c <__sflush_r+0x1c>
 8006dc0:	690f      	ldr	r7, [r1, #16]
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	d0a9      	beq.n	8006d1a <__sflush_r+0x1a>
 8006dc6:	0793      	lsls	r3, r2, #30
 8006dc8:	680e      	ldr	r6, [r1, #0]
 8006dca:	bf08      	it	eq
 8006dcc:	694b      	ldreq	r3, [r1, #20]
 8006dce:	600f      	str	r7, [r1, #0]
 8006dd0:	bf18      	it	ne
 8006dd2:	2300      	movne	r3, #0
 8006dd4:	eba6 0807 	sub.w	r8, r6, r7
 8006dd8:	608b      	str	r3, [r1, #8]
 8006dda:	f1b8 0f00 	cmp.w	r8, #0
 8006dde:	dd9c      	ble.n	8006d1a <__sflush_r+0x1a>
 8006de0:	6a21      	ldr	r1, [r4, #32]
 8006de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006de4:	4643      	mov	r3, r8
 8006de6:	463a      	mov	r2, r7
 8006de8:	4628      	mov	r0, r5
 8006dea:	47b0      	blx	r6
 8006dec:	2800      	cmp	r0, #0
 8006dee:	dc06      	bgt.n	8006dfe <__sflush_r+0xfe>
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	e78e      	b.n	8006d1c <__sflush_r+0x1c>
 8006dfe:	4407      	add	r7, r0
 8006e00:	eba8 0800 	sub.w	r8, r8, r0
 8006e04:	e7e9      	b.n	8006dda <__sflush_r+0xda>
 8006e06:	bf00      	nop
 8006e08:	20400001 	.word	0x20400001

08006e0c <_fflush_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	690b      	ldr	r3, [r1, #16]
 8006e10:	4605      	mov	r5, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	b913      	cbnz	r3, 8006e1c <_fflush_r+0x10>
 8006e16:	2500      	movs	r5, #0
 8006e18:	4628      	mov	r0, r5
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	b118      	cbz	r0, 8006e26 <_fflush_r+0x1a>
 8006e1e:	6983      	ldr	r3, [r0, #24]
 8006e20:	b90b      	cbnz	r3, 8006e26 <_fflush_r+0x1a>
 8006e22:	f000 f887 	bl	8006f34 <__sinit>
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <_fflush_r+0x6c>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d11b      	bne.n	8006e64 <_fflush_r+0x58>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0ef      	beq.n	8006e16 <_fflush_r+0xa>
 8006e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e38:	07d0      	lsls	r0, r2, #31
 8006e3a:	d404      	bmi.n	8006e46 <_fflush_r+0x3a>
 8006e3c:	0599      	lsls	r1, r3, #22
 8006e3e:	d402      	bmi.n	8006e46 <_fflush_r+0x3a>
 8006e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e42:	f000 f915 	bl	8007070 <__retarget_lock_acquire_recursive>
 8006e46:	4628      	mov	r0, r5
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f7ff ff59 	bl	8006d00 <__sflush_r>
 8006e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e50:	07da      	lsls	r2, r3, #31
 8006e52:	4605      	mov	r5, r0
 8006e54:	d4e0      	bmi.n	8006e18 <_fflush_r+0xc>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	059b      	lsls	r3, r3, #22
 8006e5a:	d4dd      	bmi.n	8006e18 <_fflush_r+0xc>
 8006e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5e:	f000 f908 	bl	8007072 <__retarget_lock_release_recursive>
 8006e62:	e7d9      	b.n	8006e18 <_fflush_r+0xc>
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <_fflush_r+0x70>)
 8006e66:	429c      	cmp	r4, r3
 8006e68:	d101      	bne.n	8006e6e <_fflush_r+0x62>
 8006e6a:	68ac      	ldr	r4, [r5, #8]
 8006e6c:	e7df      	b.n	8006e2e <_fflush_r+0x22>
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <_fflush_r+0x74>)
 8006e70:	429c      	cmp	r4, r3
 8006e72:	bf08      	it	eq
 8006e74:	68ec      	ldreq	r4, [r5, #12]
 8006e76:	e7da      	b.n	8006e2e <_fflush_r+0x22>
 8006e78:	08007acc 	.word	0x08007acc
 8006e7c:	08007aec 	.word	0x08007aec
 8006e80:	08007aac 	.word	0x08007aac

08006e84 <std>:
 8006e84:	2300      	movs	r3, #0
 8006e86:	b510      	push	{r4, lr}
 8006e88:	4604      	mov	r4, r0
 8006e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e92:	6083      	str	r3, [r0, #8]
 8006e94:	8181      	strh	r1, [r0, #12]
 8006e96:	6643      	str	r3, [r0, #100]	; 0x64
 8006e98:	81c2      	strh	r2, [r0, #14]
 8006e9a:	6183      	str	r3, [r0, #24]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	305c      	adds	r0, #92	; 0x5c
 8006ea2:	f7fd fb59 	bl	8004558 <memset>
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <std+0x38>)
 8006ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <std+0x3c>)
 8006eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <std+0x40>)
 8006eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <std+0x44>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	080071d9 	.word	0x080071d9
 8006ec0:	080071fb 	.word	0x080071fb
 8006ec4:	08007233 	.word	0x08007233
 8006ec8:	08007257 	.word	0x08007257

08006ecc <_cleanup_r>:
 8006ecc:	4901      	ldr	r1, [pc, #4]	; (8006ed4 <_cleanup_r+0x8>)
 8006ece:	f000 b8af 	b.w	8007030 <_fwalk_reent>
 8006ed2:	bf00      	nop
 8006ed4:	08006e0d 	.word	0x08006e0d

08006ed8 <__sfmoreglue>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	2268      	movs	r2, #104	; 0x68
 8006edc:	1e4d      	subs	r5, r1, #1
 8006ede:	4355      	muls	r5, r2
 8006ee0:	460e      	mov	r6, r1
 8006ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ee6:	f7ff fa65 	bl	80063b4 <_malloc_r>
 8006eea:	4604      	mov	r4, r0
 8006eec:	b140      	cbz	r0, 8006f00 <__sfmoreglue+0x28>
 8006eee:	2100      	movs	r1, #0
 8006ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ef4:	300c      	adds	r0, #12
 8006ef6:	60a0      	str	r0, [r4, #8]
 8006ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006efc:	f7fd fb2c 	bl	8004558 <memset>
 8006f00:	4620      	mov	r0, r4
 8006f02:	bd70      	pop	{r4, r5, r6, pc}

08006f04 <__sfp_lock_acquire>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__sfp_lock_acquire+0x8>)
 8006f06:	f000 b8b3 	b.w	8007070 <__retarget_lock_acquire_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200003f5 	.word	0x200003f5

08006f10 <__sfp_lock_release>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__sfp_lock_release+0x8>)
 8006f12:	f000 b8ae 	b.w	8007072 <__retarget_lock_release_recursive>
 8006f16:	bf00      	nop
 8006f18:	200003f5 	.word	0x200003f5

08006f1c <__sinit_lock_acquire>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__sinit_lock_acquire+0x8>)
 8006f1e:	f000 b8a7 	b.w	8007070 <__retarget_lock_acquire_recursive>
 8006f22:	bf00      	nop
 8006f24:	200003f6 	.word	0x200003f6

08006f28 <__sinit_lock_release>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sinit_lock_release+0x8>)
 8006f2a:	f000 b8a2 	b.w	8007072 <__retarget_lock_release_recursive>
 8006f2e:	bf00      	nop
 8006f30:	200003f6 	.word	0x200003f6

08006f34 <__sinit>:
 8006f34:	b510      	push	{r4, lr}
 8006f36:	4604      	mov	r4, r0
 8006f38:	f7ff fff0 	bl	8006f1c <__sinit_lock_acquire>
 8006f3c:	69a3      	ldr	r3, [r4, #24]
 8006f3e:	b11b      	cbz	r3, 8006f48 <__sinit+0x14>
 8006f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f44:	f7ff bff0 	b.w	8006f28 <__sinit_lock_release>
 8006f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <__sinit+0x68>)
 8006f50:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <__sinit+0x6c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f56:	42a3      	cmp	r3, r4
 8006f58:	bf04      	itt	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	61a3      	streq	r3, [r4, #24]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 f820 	bl	8006fa4 <__sfp>
 8006f64:	6060      	str	r0, [r4, #4]
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 f81c 	bl	8006fa4 <__sfp>
 8006f6c:	60a0      	str	r0, [r4, #8]
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 f818 	bl	8006fa4 <__sfp>
 8006f74:	2200      	movs	r2, #0
 8006f76:	60e0      	str	r0, [r4, #12]
 8006f78:	2104      	movs	r1, #4
 8006f7a:	6860      	ldr	r0, [r4, #4]
 8006f7c:	f7ff ff82 	bl	8006e84 <std>
 8006f80:	68a0      	ldr	r0, [r4, #8]
 8006f82:	2201      	movs	r2, #1
 8006f84:	2109      	movs	r1, #9
 8006f86:	f7ff ff7d 	bl	8006e84 <std>
 8006f8a:	68e0      	ldr	r0, [r4, #12]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	2112      	movs	r1, #18
 8006f90:	f7ff ff78 	bl	8006e84 <std>
 8006f94:	2301      	movs	r3, #1
 8006f96:	61a3      	str	r3, [r4, #24]
 8006f98:	e7d2      	b.n	8006f40 <__sinit+0xc>
 8006f9a:	bf00      	nop
 8006f9c:	08007734 	.word	0x08007734
 8006fa0:	08006ecd 	.word	0x08006ecd

08006fa4 <__sfp>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	f7ff ffac 	bl	8006f04 <__sfp_lock_acquire>
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <__sfp+0x84>)
 8006fae:	681e      	ldr	r6, [r3, #0]
 8006fb0:	69b3      	ldr	r3, [r6, #24]
 8006fb2:	b913      	cbnz	r3, 8006fba <__sfp+0x16>
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	f7ff ffbd 	bl	8006f34 <__sinit>
 8006fba:	3648      	adds	r6, #72	; 0x48
 8006fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	d503      	bpl.n	8006fcc <__sfp+0x28>
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	b30b      	cbz	r3, 800700c <__sfp+0x68>
 8006fc8:	6836      	ldr	r6, [r6, #0]
 8006fca:	e7f7      	b.n	8006fbc <__sfp+0x18>
 8006fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fd0:	b9d5      	cbnz	r5, 8007008 <__sfp+0x64>
 8006fd2:	4b16      	ldr	r3, [pc, #88]	; (800702c <__sfp+0x88>)
 8006fd4:	60e3      	str	r3, [r4, #12]
 8006fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fda:	6665      	str	r5, [r4, #100]	; 0x64
 8006fdc:	f000 f847 	bl	800706e <__retarget_lock_init_recursive>
 8006fe0:	f7ff ff96 	bl	8006f10 <__sfp_lock_release>
 8006fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fec:	6025      	str	r5, [r4, #0]
 8006fee:	61a5      	str	r5, [r4, #24]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ff8:	f7fd faae 	bl	8004558 <memset>
 8006ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007004:	4620      	mov	r0, r4
 8007006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007008:	3468      	adds	r4, #104	; 0x68
 800700a:	e7d9      	b.n	8006fc0 <__sfp+0x1c>
 800700c:	2104      	movs	r1, #4
 800700e:	4638      	mov	r0, r7
 8007010:	f7ff ff62 	bl	8006ed8 <__sfmoreglue>
 8007014:	4604      	mov	r4, r0
 8007016:	6030      	str	r0, [r6, #0]
 8007018:	2800      	cmp	r0, #0
 800701a:	d1d5      	bne.n	8006fc8 <__sfp+0x24>
 800701c:	f7ff ff78 	bl	8006f10 <__sfp_lock_release>
 8007020:	230c      	movs	r3, #12
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	e7ee      	b.n	8007004 <__sfp+0x60>
 8007026:	bf00      	nop
 8007028:	08007734 	.word	0x08007734
 800702c:	ffff0001 	.word	0xffff0001

08007030 <_fwalk_reent>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	4606      	mov	r6, r0
 8007036:	4688      	mov	r8, r1
 8007038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800703c:	2700      	movs	r7, #0
 800703e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007042:	f1b9 0901 	subs.w	r9, r9, #1
 8007046:	d505      	bpl.n	8007054 <_fwalk_reent+0x24>
 8007048:	6824      	ldr	r4, [r4, #0]
 800704a:	2c00      	cmp	r4, #0
 800704c:	d1f7      	bne.n	800703e <_fwalk_reent+0xe>
 800704e:	4638      	mov	r0, r7
 8007050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007054:	89ab      	ldrh	r3, [r5, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d907      	bls.n	800706a <_fwalk_reent+0x3a>
 800705a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800705e:	3301      	adds	r3, #1
 8007060:	d003      	beq.n	800706a <_fwalk_reent+0x3a>
 8007062:	4629      	mov	r1, r5
 8007064:	4630      	mov	r0, r6
 8007066:	47c0      	blx	r8
 8007068:	4307      	orrs	r7, r0
 800706a:	3568      	adds	r5, #104	; 0x68
 800706c:	e7e9      	b.n	8007042 <_fwalk_reent+0x12>

0800706e <__retarget_lock_init_recursive>:
 800706e:	4770      	bx	lr

08007070 <__retarget_lock_acquire_recursive>:
 8007070:	4770      	bx	lr

08007072 <__retarget_lock_release_recursive>:
 8007072:	4770      	bx	lr

08007074 <__swhatbuf_r>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	460e      	mov	r6, r1
 8007078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707c:	2900      	cmp	r1, #0
 800707e:	b096      	sub	sp, #88	; 0x58
 8007080:	4614      	mov	r4, r2
 8007082:	461d      	mov	r5, r3
 8007084:	da08      	bge.n	8007098 <__swhatbuf_r+0x24>
 8007086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	602a      	str	r2, [r5, #0]
 800708e:	061a      	lsls	r2, r3, #24
 8007090:	d410      	bmi.n	80070b4 <__swhatbuf_r+0x40>
 8007092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007096:	e00e      	b.n	80070b6 <__swhatbuf_r+0x42>
 8007098:	466a      	mov	r2, sp
 800709a:	f000 f903 	bl	80072a4 <_fstat_r>
 800709e:	2800      	cmp	r0, #0
 80070a0:	dbf1      	blt.n	8007086 <__swhatbuf_r+0x12>
 80070a2:	9a01      	ldr	r2, [sp, #4]
 80070a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070ac:	425a      	negs	r2, r3
 80070ae:	415a      	adcs	r2, r3
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	e7ee      	b.n	8007092 <__swhatbuf_r+0x1e>
 80070b4:	2340      	movs	r3, #64	; 0x40
 80070b6:	2000      	movs	r0, #0
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	b016      	add	sp, #88	; 0x58
 80070bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080070c0 <__smakebuf_r>:
 80070c0:	898b      	ldrh	r3, [r1, #12]
 80070c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070c4:	079d      	lsls	r5, r3, #30
 80070c6:	4606      	mov	r6, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	d507      	bpl.n	80070dc <__smakebuf_r+0x1c>
 80070cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	6123      	str	r3, [r4, #16]
 80070d4:	2301      	movs	r3, #1
 80070d6:	6163      	str	r3, [r4, #20]
 80070d8:	b002      	add	sp, #8
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	ab01      	add	r3, sp, #4
 80070de:	466a      	mov	r2, sp
 80070e0:	f7ff ffc8 	bl	8007074 <__swhatbuf_r>
 80070e4:	9900      	ldr	r1, [sp, #0]
 80070e6:	4605      	mov	r5, r0
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff f963 	bl	80063b4 <_malloc_r>
 80070ee:	b948      	cbnz	r0, 8007104 <__smakebuf_r+0x44>
 80070f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f4:	059a      	lsls	r2, r3, #22
 80070f6:	d4ef      	bmi.n	80070d8 <__smakebuf_r+0x18>
 80070f8:	f023 0303 	bic.w	r3, r3, #3
 80070fc:	f043 0302 	orr.w	r3, r3, #2
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	e7e3      	b.n	80070cc <__smakebuf_r+0xc>
 8007104:	4b0d      	ldr	r3, [pc, #52]	; (800713c <__smakebuf_r+0x7c>)
 8007106:	62b3      	str	r3, [r6, #40]	; 0x28
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	6020      	str	r0, [r4, #0]
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	9b00      	ldr	r3, [sp, #0]
 8007114:	6163      	str	r3, [r4, #20]
 8007116:	9b01      	ldr	r3, [sp, #4]
 8007118:	6120      	str	r0, [r4, #16]
 800711a:	b15b      	cbz	r3, 8007134 <__smakebuf_r+0x74>
 800711c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007120:	4630      	mov	r0, r6
 8007122:	f000 f8d1 	bl	80072c8 <_isatty_r>
 8007126:	b128      	cbz	r0, 8007134 <__smakebuf_r+0x74>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	89a0      	ldrh	r0, [r4, #12]
 8007136:	4305      	orrs	r5, r0
 8007138:	81a5      	strh	r5, [r4, #12]
 800713a:	e7cd      	b.n	80070d8 <__smakebuf_r+0x18>
 800713c:	08006ecd 	.word	0x08006ecd

08007140 <_malloc_usable_size_r>:
 8007140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007144:	1f18      	subs	r0, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	bfbc      	itt	lt
 800714a:	580b      	ldrlt	r3, [r1, r0]
 800714c:	18c0      	addlt	r0, r0, r3
 800714e:	4770      	bx	lr

08007150 <_raise_r>:
 8007150:	291f      	cmp	r1, #31
 8007152:	b538      	push	{r3, r4, r5, lr}
 8007154:	4604      	mov	r4, r0
 8007156:	460d      	mov	r5, r1
 8007158:	d904      	bls.n	8007164 <_raise_r+0x14>
 800715a:	2316      	movs	r3, #22
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	f04f 30ff 	mov.w	r0, #4294967295
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007166:	b112      	cbz	r2, 800716e <_raise_r+0x1e>
 8007168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800716c:	b94b      	cbnz	r3, 8007182 <_raise_r+0x32>
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f830 	bl	80071d4 <_getpid_r>
 8007174:	462a      	mov	r2, r5
 8007176:	4601      	mov	r1, r0
 8007178:	4620      	mov	r0, r4
 800717a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717e:	f000 b817 	b.w	80071b0 <_kill_r>
 8007182:	2b01      	cmp	r3, #1
 8007184:	d00a      	beq.n	800719c <_raise_r+0x4c>
 8007186:	1c59      	adds	r1, r3, #1
 8007188:	d103      	bne.n	8007192 <_raise_r+0x42>
 800718a:	2316      	movs	r3, #22
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	2001      	movs	r0, #1
 8007190:	e7e7      	b.n	8007162 <_raise_r+0x12>
 8007192:	2400      	movs	r4, #0
 8007194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007198:	4628      	mov	r0, r5
 800719a:	4798      	blx	r3
 800719c:	2000      	movs	r0, #0
 800719e:	e7e0      	b.n	8007162 <_raise_r+0x12>

080071a0 <raise>:
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <raise+0xc>)
 80071a2:	4601      	mov	r1, r0
 80071a4:	6818      	ldr	r0, [r3, #0]
 80071a6:	f7ff bfd3 	b.w	8007150 <_raise_r>
 80071aa:	bf00      	nop
 80071ac:	20000010 	.word	0x20000010

080071b0 <_kill_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d07      	ldr	r5, [pc, #28]	; (80071d0 <_kill_r+0x20>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	f7fa fbe7 	bl	8001990 <_kill>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	d102      	bne.n	80071cc <_kill_r+0x1c>
 80071c6:	682b      	ldr	r3, [r5, #0]
 80071c8:	b103      	cbz	r3, 80071cc <_kill_r+0x1c>
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	bd38      	pop	{r3, r4, r5, pc}
 80071ce:	bf00      	nop
 80071d0:	200003f0 	.word	0x200003f0

080071d4 <_getpid_r>:
 80071d4:	f7fa bbd4 	b.w	8001980 <_getpid>

080071d8 <__sread>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	f000 f894 	bl	800730c <_read_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	bfab      	itete	ge
 80071e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ea:	89a3      	ldrhlt	r3, [r4, #12]
 80071ec:	181b      	addge	r3, r3, r0
 80071ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071f2:	bfac      	ite	ge
 80071f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071f6:	81a3      	strhlt	r3, [r4, #12]
 80071f8:	bd10      	pop	{r4, pc}

080071fa <__swrite>:
 80071fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	461f      	mov	r7, r3
 8007200:	898b      	ldrh	r3, [r1, #12]
 8007202:	05db      	lsls	r3, r3, #23
 8007204:	4605      	mov	r5, r0
 8007206:	460c      	mov	r4, r1
 8007208:	4616      	mov	r6, r2
 800720a:	d505      	bpl.n	8007218 <__swrite+0x1e>
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	2302      	movs	r3, #2
 8007212:	2200      	movs	r2, #0
 8007214:	f000 f868 	bl	80072e8 <_lseek_r>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800721e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	4632      	mov	r2, r6
 8007226:	463b      	mov	r3, r7
 8007228:	4628      	mov	r0, r5
 800722a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	f000 b817 	b.w	8007260 <_write_r>

08007232 <__sseek>:
 8007232:	b510      	push	{r4, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723a:	f000 f855 	bl	80072e8 <_lseek_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	bf15      	itete	ne
 8007244:	6560      	strne	r0, [r4, #84]	; 0x54
 8007246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800724a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800724e:	81a3      	strheq	r3, [r4, #12]
 8007250:	bf18      	it	ne
 8007252:	81a3      	strhne	r3, [r4, #12]
 8007254:	bd10      	pop	{r4, pc}

08007256 <__sclose>:
 8007256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725a:	f000 b813 	b.w	8007284 <_close_r>
	...

08007260 <_write_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d07      	ldr	r5, [pc, #28]	; (8007280 <_write_r+0x20>)
 8007264:	4604      	mov	r4, r0
 8007266:	4608      	mov	r0, r1
 8007268:	4611      	mov	r1, r2
 800726a:	2200      	movs	r2, #0
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7fa fbc5 	bl	80019fe <_write>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_write_r+0x1e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_write_r+0x1e>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	200003f0 	.word	0x200003f0

08007284 <_close_r>:
 8007284:	b538      	push	{r3, r4, r5, lr}
 8007286:	4d06      	ldr	r5, [pc, #24]	; (80072a0 <_close_r+0x1c>)
 8007288:	2300      	movs	r3, #0
 800728a:	4604      	mov	r4, r0
 800728c:	4608      	mov	r0, r1
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	f7fa fbd1 	bl	8001a36 <_close>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_close_r+0x1a>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_close_r+0x1a>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	200003f0 	.word	0x200003f0

080072a4 <_fstat_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	; (80072c4 <_fstat_r+0x20>)
 80072a8:	2300      	movs	r3, #0
 80072aa:	4604      	mov	r4, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	f7fa fbcc 	bl	8001a4e <_fstat>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	d102      	bne.n	80072c0 <_fstat_r+0x1c>
 80072ba:	682b      	ldr	r3, [r5, #0]
 80072bc:	b103      	cbz	r3, 80072c0 <_fstat_r+0x1c>
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
 80072c2:	bf00      	nop
 80072c4:	200003f0 	.word	0x200003f0

080072c8 <_isatty_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d06      	ldr	r5, [pc, #24]	; (80072e4 <_isatty_r+0x1c>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	602b      	str	r3, [r5, #0]
 80072d4:	f7fa fbcb 	bl	8001a6e <_isatty>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_isatty_r+0x1a>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_isatty_r+0x1a>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	200003f0 	.word	0x200003f0

080072e8 <_lseek_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d07      	ldr	r5, [pc, #28]	; (8007308 <_lseek_r+0x20>)
 80072ec:	4604      	mov	r4, r0
 80072ee:	4608      	mov	r0, r1
 80072f0:	4611      	mov	r1, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	602a      	str	r2, [r5, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f7fa fbc4 	bl	8001a84 <_lseek>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_lseek_r+0x1e>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	b103      	cbz	r3, 8007306 <_lseek_r+0x1e>
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	200003f0 	.word	0x200003f0

0800730c <_read_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d07      	ldr	r5, [pc, #28]	; (800732c <_read_r+0x20>)
 8007310:	4604      	mov	r4, r0
 8007312:	4608      	mov	r0, r1
 8007314:	4611      	mov	r1, r2
 8007316:	2200      	movs	r2, #0
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	f7fa fb52 	bl	80019c4 <_read>
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d102      	bne.n	800732a <_read_r+0x1e>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b103      	cbz	r3, 800732a <_read_r+0x1e>
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	bd38      	pop	{r3, r4, r5, pc}
 800732c:	200003f0 	.word	0x200003f0

08007330 <_init>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	bf00      	nop
 8007334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007336:	bc08      	pop	{r3}
 8007338:	469e      	mov	lr, r3
 800733a:	4770      	bx	lr

0800733c <_fini>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr
