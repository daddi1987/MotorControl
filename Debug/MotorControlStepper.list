
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004090  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004578  08004578  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004580  08004580  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080045f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080045f8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f21  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b4  00000000  00000000  00028fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021985  00000000  00000000  0002b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac00  00000000  00000000  0004cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9c26  00000000  00000000  00057b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012176b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  001217bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004248 	.word	0x08004248

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004248 	.word	0x08004248

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
uint8_t MSG[35] = {'\0'};
uint32_t EncoderCount = 0;


int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fb44 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8b4 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f888 	bl	80006d8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	     sprintf(MSG, "Position:  %d\r\n", EncoderCount);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x38>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <main+0x3c>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x40>)
 80005d2:	f002 fce7 	bl	8002fa4 <siprintf>
	     HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2223      	movs	r2, #35	; 0x23
 80005da:	4906      	ldr	r1, [pc, #24]	; (80005f4 <main+0x40>)
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x44>)
 80005de:	f002 f8dd 	bl	800279c <HAL_UART_Transmit>
	     HAL_Delay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fba0 	bl	8000d28 <HAL_Delay>
  {
 80005e8:	e7ee      	b.n	80005c8 <main+0x14>
 80005ea:	bf00      	nop
 80005ec:	200000f4 	.word	0x200000f4
 80005f0:	08004260 	.word	0x08004260
 80005f4:	200000d0 	.word	0x200000d0
 80005f8:	2000008c 	.word	0x2000008c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fcaa 	bl	8002f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <SystemClock_Config+0xd4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xd8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc50 	bl	8001f30 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f935 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f830 	bl	800171c <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006c2:	f000 f91f 	bl	8000904 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 ff6a 	bl	80025e8 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f8f3 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a5a      	ldr	r2, [pc, #360]	; (80008b4 <MX_GPIO_Init+0x188>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007b8:	483f      	ldr	r0, [pc, #252]	; (80008b8 <MX_GPIO_Init+0x18c>)
 80007ba:	f000 ff3d 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80007c4:	483d      	ldr	r0, [pc, #244]	; (80008bc <MX_GPIO_Init+0x190>)
 80007c6:	f000 ff37 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	483c      	ldr	r0, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x194>)
 80007d0:	f000 ff32 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x194>)
 80007ec:	f000 fc00 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 80007f0:	2303      	movs	r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	482c      	ldr	r0, [pc, #176]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000806:	f000 fbf3 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 800080a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4825      	ldr	r0, [pc, #148]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000824:	f000 fbe4 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 8000828:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_GPIO_Init+0x190>)
 8000842:	f000 fbd5 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x194>)
 800085e:	f000 fbc7 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000878:	f000 fbba 	bl	8000ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2006      	movs	r0, #6
 8000882:	f000 fb65 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000886:	2006      	movs	r0, #6
 8000888:	f000 fb8e 	bl	8000fa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2007      	movs	r0, #7
 8000892:	f000 fb5d 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fb86 	bl	8000fa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2028      	movs	r0, #40	; 0x28
 80008a2:	f000 fb55 	bl	8000f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f000 fb7e 	bl	8000fa8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40020800 	.word	0x40020800

080008c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Encoder1_Count_Pin)
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d109      	bne.n	80008e8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		//printf("EncodeOn");
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 80008d4:	2120      	movs	r1, #32
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x34>)
 80008d8:	f000 fee0 	bl	800169c <HAL_GPIO_TogglePin>
	    EncoderCount++;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_GPIO_EXTI_Callback+0x38>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_GPIO_EXTI_Callback+0x38>)
 80008e4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		printf("EncoderOff");
	}
}
 80008e6:	e002      	b.n	80008ee <HAL_GPIO_EXTI_Callback+0x2a>
		printf("EncoderOff");
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <HAL_GPIO_EXTI_Callback+0x3c>)
 80008ea:	f002 fb43 	bl	8002f74 <iprintf>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020000 	.word	0x40020000
 80008fc:	200000f4 	.word	0x200000f4
 8000900:	08004270 	.word	0x08004270

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>

0800090e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000962:	2007      	movs	r0, #7
 8000964:	f000 fad4 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ea:	f000 fb01 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f94a 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fe45 	bl	80016ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fe3e 	bl	80016ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a7c:	f000 fe36 	bl	80016ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	e00a      	b.n	8000aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a96:	f3af 8000 	nop.w
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	60ba      	str	r2, [r7, #8]
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf0      	blt.n	8000a96 <_read+0x12>
  }

  return len;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	e009      	b.n	8000ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60ba      	str	r2, [r7, #8]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697a      	ldr	r2, [r7, #20]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	dbf1      	blt.n	8000ad0 <_write+0x12>
  }
  return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_close>:

int _close(int file)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <_isatty>:

int _isatty(int file)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f002 f9be 	bl	8002f10 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20020000 	.word	0x20020000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	20000110 	.word	0x20000110

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	; (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 f97d 	bl	8002f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fcc7 	bl	80005b4 <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c34:	08004588 	.word	0x08004588
  ldr r2, =_sbss
 8000c38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c3c:	20000110 	.word	0x20000110

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe54 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f996 	bl	8000fd8 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f944 	bl	8000f50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	200000fc 	.word	0x200000fc

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200000fc 	.word	0x200000fc

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b07      	cmp	r3, #7
 8000f1c:	d00f      	beq.n	8000f3e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d00c      	beq.n	8000f3e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	d009      	beq.n	8000f3e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d006      	beq.n	8000f3e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d003      	beq.n	8000f3e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f36:	2190      	movs	r1, #144	; 0x90
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f3a:	f7ff fce8 	bl	800090e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff16 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0800427c 	.word	0x0800427c

08000f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d903      	bls.n	8000f70 <HAL_NVIC_SetPriority+0x20>
 8000f68:	21a8      	movs	r1, #168	; 0xa8
 8000f6a:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <HAL_NVIC_SetPriority+0x54>)
 8000f6c:	f7ff fccf 	bl	800090e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b0f      	cmp	r3, #15
 8000f74:	d903      	bls.n	8000f7e <HAL_NVIC_SetPriority+0x2e>
 8000f76:	21a9      	movs	r1, #169	; 0xa9
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <HAL_NVIC_SetPriority+0x54>)
 8000f7a:	f7ff fcc8 	bl	800090e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7e:	f7ff ff1b 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff ff6b 	bl	8000e64 <NVIC_EncodePriority>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff3a 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	0800427c 	.word	0x0800427c

08000fa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da03      	bge.n	8000fc2 <HAL_NVIC_EnableIRQ+0x1a>
 8000fba:	21bc      	movs	r1, #188	; 0xbc
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_NVIC_EnableIRQ+0x2c>)
 8000fbe:	f7ff fca6 	bl	800090e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff04 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800427c 	.word	0x0800427c

08000fd8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff73 	bl	8000ecc <SysTick_Config>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0xf8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <HAL_GPIO_Init+0xfc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d01b      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a35      	ldr	r2, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x100>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x104>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_GPIO_Init+0x108>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00f      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a32      	ldr	r2, [pc, #200]	; (80010fc <HAL_GPIO_Init+0x10c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00b      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a31      	ldr	r2, [pc, #196]	; (8001100 <HAL_GPIO_Init+0x110>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a30      	ldr	r2, [pc, #192]	; (8001104 <HAL_GPIO_Init+0x114>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x5e>
 8001046:	21ac      	movs	r1, #172	; 0xac
 8001048:	482f      	ldr	r0, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x118>)
 800104a:	f7ff fc60 	bl	800090e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x74>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x7c>
 8001064:	21ad      	movs	r1, #173	; 0xad
 8001066:	4828      	ldr	r0, [pc, #160]	; (8001108 <HAL_GPIO_Init+0x118>)
 8001068:	f7ff fc51 	bl	800090e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d035      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d031      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b11      	cmp	r3, #17
 8001082:	d02d      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d029      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d025      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800109c:	d020      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010a6:	d01b      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80010b0:	d016      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010ba:	d011      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010c4:	d00c      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010ce:	d007      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
 80010d8:	21ae      	movs	r1, #174	; 0xae
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_GPIO_Init+0x118>)
 80010dc:	f7ff fc17 	bl	800090e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	e289      	b.n	80015fa <HAL_GPIO_Init+0x60a>
 80010e6:	bf00      	nop
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020c00 	.word	0x40020c00
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40021400 	.word	0x40021400
 8001100:	40021800 	.word	0x40021800
 8001104:	40021c00 	.word	0x40021c00
 8001108:	080042f4 	.word	0x080042f4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 8265 	bne.w	80015f4 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d144      	bne.n	80011cc <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00f      	beq.n	800116a <HAL_GPIO_Init+0x17a>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d00b      	beq.n	800116a <HAL_GPIO_Init+0x17a>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x17a>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x17a>
 8001162:	21c0      	movs	r1, #192	; 0xc0
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <HAL_GPIO_Init+0x23c>)
 8001166:	f7ff fbd2 	bl	800090e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d02b      	beq.n	8001230 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00b      	beq.n	80011f8 <HAL_GPIO_Init+0x208>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x208>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x208>
 80011f0:	21d1      	movs	r1, #209	; 0xd1
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <HAL_GPIO_Init+0x23c>)
 80011f4:	f7ff fb8b 	bl	800090e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x240>
 800122a:	bf00      	nop
 800122c:	080042f4 	.word	0x080042f4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	f040 810c 	bne.w	8001456 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80e3 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2b09      	cmp	r3, #9
 800124e:	f000 80de 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80d9 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80d4 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80cf 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80ca 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b01      	cmp	r3, #1
 8001280:	f000 80c5 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b01      	cmp	r3, #1
 800128a:	f000 80c0 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b02      	cmp	r3, #2
 8001294:	f000 80bb 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b02      	cmp	r3, #2
 800129e:	f000 80b6 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	f000 80b1 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	f000 80ac 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	f000 80a7 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	f000 80a2 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	f000 809d 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	f000 8098 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	f000 8093 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	f000 808e 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	f000 8089 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	2b09      	cmp	r3, #9
 8001302:	f000 8084 	beq.w	800140e <HAL_GPIO_Init+0x41e>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b07      	cmp	r3, #7
 800130c:	d07f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d07b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b07      	cmp	r3, #7
 800131c:	d077      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b08      	cmp	r3, #8
 8001324:	d073      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	2b08      	cmp	r3, #8
 800132c:	d06f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b08      	cmp	r3, #8
 8001334:	d06b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b09      	cmp	r3, #9
 800133c:	d067      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b09      	cmp	r3, #9
 8001344:	d063      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d05f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d05b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b0b      	cmp	r3, #11
 800135c:	d057      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d053      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	2b0c      	cmp	r3, #12
 800136c:	d04f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b0d      	cmp	r3, #13
 8001374:	d04b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	d047      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d043      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b0c      	cmp	r3, #12
 800138c:	d03f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	2b06      	cmp	r3, #6
 8001394:	d03b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d037      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d033      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d02f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d02b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d027      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d023      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b07      	cmp	r3, #7
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d01b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d00f      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	d00b      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x41e>
 8001406:	21de      	movs	r1, #222	; 0xde
 8001408:	4880      	ldr	r0, [pc, #512]	; (800160c <HAL_GPIO_Init+0x61c>)
 800140a:	f7ff fa80 	bl	800090e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80ae 	beq.w	80015f4 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_GPIO_Init+0x620>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	4a5b      	ldr	r2, [pc, #364]	; (8001610 <HAL_GPIO_Init+0x620>)
 80014a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a6:	6453      	str	r3, [r2, #68]	; 0x44
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_GPIO_Init+0x620>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b4:	4a57      	ldr	r2, [pc, #348]	; (8001614 <HAL_GPIO_Init+0x624>)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a4f      	ldr	r2, [pc, #316]	; (8001618 <HAL_GPIO_Init+0x628>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d025      	beq.n	800152c <HAL_GPIO_Init+0x53c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a4e      	ldr	r2, [pc, #312]	; (800161c <HAL_GPIO_Init+0x62c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d01f      	beq.n	8001528 <HAL_GPIO_Init+0x538>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_GPIO_Init+0x630>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d019      	beq.n	8001524 <HAL_GPIO_Init+0x534>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a4c      	ldr	r2, [pc, #304]	; (8001624 <HAL_GPIO_Init+0x634>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x530>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4b      	ldr	r2, [pc, #300]	; (8001628 <HAL_GPIO_Init+0x638>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x52c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4a      	ldr	r2, [pc, #296]	; (800162c <HAL_GPIO_Init+0x63c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x528>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a49      	ldr	r2, [pc, #292]	; (8001630 <HAL_GPIO_Init+0x640>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x524>
 8001510:	2306      	movs	r3, #6
 8001512:	e00c      	b.n	800152e <HAL_GPIO_Init+0x53e>
 8001514:	2307      	movs	r3, #7
 8001516:	e00a      	b.n	800152e <HAL_GPIO_Init+0x53e>
 8001518:	2305      	movs	r3, #5
 800151a:	e008      	b.n	800152e <HAL_GPIO_Init+0x53e>
 800151c:	2304      	movs	r3, #4
 800151e:	e006      	b.n	800152e <HAL_GPIO_Init+0x53e>
 8001520:	2303      	movs	r3, #3
 8001522:	e004      	b.n	800152e <HAL_GPIO_Init+0x53e>
 8001524:	2302      	movs	r3, #2
 8001526:	e002      	b.n	800152e <HAL_GPIO_Init+0x53e>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <HAL_GPIO_Init+0x53e>
 800152c:	2300      	movs	r3, #0
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	f002 0203 	and.w	r2, r2, #3
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	4093      	lsls	r3, r2
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800153e:	4935      	ldr	r1, [pc, #212]	; (8001614 <HAL_GPIO_Init+0x624>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_GPIO_Init+0x644>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001570:	4a30      	ldr	r2, [pc, #192]	; (8001634 <HAL_GPIO_Init+0x644>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x644>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159a:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_GPIO_Init+0x644>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x644>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <HAL_GPIO_Init+0x644>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x644>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <HAL_GPIO_Init+0x644>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	f67f ad85 	bls.w	800110c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080042f4 	.word	0x080042f4
 8001610:	40023800 	.word	0x40023800
 8001614:	40013800 	.word	0x40013800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020400 	.word	0x40020400
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001648:	887b      	ldrh	r3, [r7, #2]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <HAL_GPIO_WritePin+0x20>
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <HAL_GPIO_WritePin+0x2a>
 8001658:	f240 119d 	movw	r1, #413	; 0x19d
 800165c:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_GPIO_WritePin+0x60>)
 800165e:	f7ff f956 	bl	800090e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001662:	787b      	ldrb	r3, [r7, #1]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_GPIO_WritePin+0x40>
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d004      	beq.n	8001678 <HAL_GPIO_WritePin+0x40>
 800166e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001672:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_GPIO_WritePin+0x60>)
 8001674:	f7ff f94b 	bl	800090e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	080042f4 	.word	0x080042f4

0800169c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_GPIO_TogglePin+0x1c>
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_GPIO_TogglePin+0x26>
 80016b8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80016bc:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_GPIO_TogglePin+0x4c>)
 80016be:	f7ff f926 	bl	800090e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c8:	887a      	ldrh	r2, [r7, #2]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	041a      	lsls	r2, r3, #16
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	400b      	ands	r3, r1
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	080042f4 	.word	0x080042f4

080016ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f8da 	bl	80008c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40013c00 	.word	0x40013c00

0800171c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e18c      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_RCC_ClockConfig+0x24>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d904      	bls.n	800174a <HAL_RCC_ClockConfig+0x2e>
 8001740:	f240 215a 	movw	r1, #602	; 0x25a
 8001744:	4887      	ldr	r0, [pc, #540]	; (8001964 <HAL_RCC_ClockConfig+0x248>)
 8001746:	f7ff f8e2 	bl	800090e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d031      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d02e      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d02b      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d028      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d025      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d022      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d01f      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2b07      	cmp	r3, #7
 8001778:	d01c      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d019      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b09      	cmp	r3, #9
 8001784:	d016      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b0a      	cmp	r3, #10
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b0b      	cmp	r3, #11
 8001790:	d010      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d00d      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b0d      	cmp	r3, #13
 800179c:	d00a      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b0e      	cmp	r3, #14
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d004      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x98>
 80017aa:	f240 215b 	movw	r1, #603	; 0x25b
 80017ae:	486d      	ldr	r0, [pc, #436]	; (8001964 <HAL_RCC_ClockConfig+0x248>)
 80017b0:	f7ff f8ad 	bl	800090e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b4:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d90c      	bls.n	80017dc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b69      	ldr	r3, [pc, #420]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e136      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d049      	beq.n	800187c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a5c      	ldr	r2, [pc, #368]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80017fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800180c:	4b57      	ldr	r3, [pc, #348]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a56      	ldr	r2, [pc, #344]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 8001812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d024      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b90      	cmp	r3, #144	; 0x90
 800182e:	d01c      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2ba0      	cmp	r3, #160	; 0xa0
 8001836:	d018      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2bb0      	cmp	r3, #176	; 0xb0
 800183e:	d014      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2bc0      	cmp	r3, #192	; 0xc0
 8001846:	d010      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2bd0      	cmp	r3, #208	; 0xd0
 800184e:	d00c      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2be0      	cmp	r3, #224	; 0xe0
 8001856:	d008      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2bf0      	cmp	r3, #240	; 0xf0
 800185e:	d004      	beq.n	800186a <HAL_RCC_ClockConfig+0x14e>
 8001860:	f240 217e 	movw	r1, #638	; 0x27e
 8001864:	483f      	ldr	r0, [pc, #252]	; (8001964 <HAL_RCC_ClockConfig+0x248>)
 8001866:	f7ff f852 	bl	800090e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	493d      	ldr	r1, [pc, #244]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d059      	beq.n	800193c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d010      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x196>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x196>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x196>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d004      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x196>
 80018a8:	f240 2185 	movw	r1, #645	; 0x285
 80018ac:	482d      	ldr	r0, [pc, #180]	; (8001964 <HAL_RCC_ClockConfig+0x248>)
 80018ae:	f7ff f82e 	bl	800090e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b2c      	ldr	r3, [pc, #176]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0bf      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0af      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0a7      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4919      	ldr	r1, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fa00 	bl	8000d10 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff f9fc 	bl	8000d10 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e08f      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_RCC_ClockConfig+0x250>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d212      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_ClockConfig+0x24c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d007      	beq.n	8001970 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e072      	b.n	8001a4a <HAL_RCC_ClockConfig+0x32e>
 8001964:	08004368 	.word	0x08004368
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d025      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d018      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x29a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800198c:	d013      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x29a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001996:	d00e      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x29a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x29a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80019aa:	d004      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x29a>
 80019ac:	f240 21c3 	movw	r1, #707	; 0x2c3
 80019b0:	4828      	ldr	r0, [pc, #160]	; (8001a54 <HAL_RCC_ClockConfig+0x338>)
 80019b2:	f7fe ffac 	bl	800090e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_ClockConfig+0x33c>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4925      	ldr	r1, [pc, #148]	; (8001a58 <HAL_RCC_ClockConfig+0x33c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d026      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d018      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x2f2>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e4:	d013      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x2f2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80019ee:	d00e      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x2f2>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80019f8:	d009      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x2f2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001a02:	d004      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x2f2>
 8001a04:	f240 21ca 	movw	r1, #714	; 0x2ca
 8001a08:	4812      	ldr	r0, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x338>)
 8001a0a:	f7fe ff80 	bl	800090e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x33c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <HAL_RCC_ClockConfig+0x33c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a22:	f000 f855 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a26:	4602      	mov	r2, r0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_ClockConfig+0x33c>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	490a      	ldr	r1, [pc, #40]	; (8001a5c <HAL_RCC_ClockConfig+0x340>)
 8001a34:	5ccb      	ldrb	r3, [r1, r3]
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x344>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_RCC_ClockConfig+0x348>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f920 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08004368 	.word	0x08004368
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080044c8 	.word	0x080044c8
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000000 	.word	0x20000000

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff0 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	0a9b      	lsrs	r3, r3, #10
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	; (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	080044d8 	.word	0x080044d8

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffdc 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0b5b      	lsrs	r3, r3, #13
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	080044d8 	.word	0x080044d8

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad4:	b0ae      	sub	sp, #184	; 0xb8
 8001ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af6:	4bcb      	ldr	r3, [pc, #812]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	f200 8206 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x440>
 8001b04:	a201      	add	r2, pc, #4	; (adr r2, 8001b0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0a:	bf00      	nop
 8001b0c:	08001b41 	.word	0x08001b41
 8001b10:	08001f11 	.word	0x08001f11
 8001b14:	08001f11 	.word	0x08001f11
 8001b18:	08001f11 	.word	0x08001f11
 8001b1c:	08001b49 	.word	0x08001b49
 8001b20:	08001f11 	.word	0x08001f11
 8001b24:	08001f11 	.word	0x08001f11
 8001b28:	08001f11 	.word	0x08001f11
 8001b2c:	08001b51 	.word	0x08001b51
 8001b30:	08001f11 	.word	0x08001f11
 8001b34:	08001f11 	.word	0x08001f11
 8001b38:	08001f11 	.word	0x08001f11
 8001b3c:	08001d41 	.word	0x08001d41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4bb9      	ldr	r3, [pc, #740]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b46:	e1e7      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b48:	4bb8      	ldr	r3, [pc, #736]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b4e:	e1e3      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4bb4      	ldr	r3, [pc, #720]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5c:	4bb1      	ldr	r3, [pc, #708]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d071      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b68:	4bae      	ldr	r3, [pc, #696]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b74:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001b8e:	4622      	mov	r2, r4
 8001b90:	462b      	mov	r3, r5
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0159      	lsls	r1, r3, #5
 8001b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba0:	0150      	lsls	r0, r2, #5
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	1a51      	subs	r1, r2, r1
 8001baa:	6439      	str	r1, [r7, #64]	; 0x40
 8001bac:	4629      	mov	r1, r5
 8001bae:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001bc0:	4649      	mov	r1, r9
 8001bc2:	018b      	lsls	r3, r1, #6
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bca:	4641      	mov	r1, r8
 8001bcc:	018a      	lsls	r2, r1, #6
 8001bce:	4641      	mov	r1, r8
 8001bd0:	1a51      	subs	r1, r2, r1
 8001bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bd4:	4649      	mov	r1, r9
 8001bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001be8:	4649      	mov	r1, r9
 8001bea:	00cb      	lsls	r3, r1, #3
 8001bec:	4641      	mov	r1, r8
 8001bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bf2:	4641      	mov	r1, r8
 8001bf4:	00ca      	lsls	r2, r1, #3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	189b      	adds	r3, r3, r2
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
 8001c02:	462b      	mov	r3, r5
 8001c04:	460a      	mov	r2, r1
 8001c06:	eb42 0303 	adc.w	r3, r2, r3
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c18:	4629      	mov	r1, r5
 8001c1a:	024b      	lsls	r3, r1, #9
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c22:	4621      	mov	r1, r4
 8001c24:	024a      	lsls	r2, r1, #9
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c3c:	f7fe fb38 	bl	80002b0 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c4a:	e067      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	099b      	lsrs	r3, r3, #6
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c58:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c66:	2300      	movs	r3, #0
 8001c68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c6e:	4622      	mov	r2, r4
 8001c70:	462b      	mov	r3, r5
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	0159      	lsls	r1, r3, #5
 8001c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c80:	0150      	lsls	r0, r2, #5
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4621      	mov	r1, r4
 8001c88:	1a51      	subs	r1, r2, r1
 8001c8a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001ca0:	4649      	mov	r1, r9
 8001ca2:	018b      	lsls	r3, r1, #6
 8001ca4:	4641      	mov	r1, r8
 8001ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001caa:	4641      	mov	r1, r8
 8001cac:	018a      	lsls	r2, r1, #6
 8001cae:	4641      	mov	r1, r8
 8001cb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cce:	4692      	mov	sl, r2
 8001cd0:	469b      	mov	fp, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	eb1a 0303 	adds.w	r3, sl, r3
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cee:	4629      	mov	r1, r5
 8001cf0:	028b      	lsls	r3, r1, #10
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	028a      	lsls	r2, r1, #10
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d04:	2200      	movs	r2, #0
 8001d06:	673b      	str	r3, [r7, #112]	; 0x70
 8001d08:	677a      	str	r2, [r7, #116]	; 0x74
 8001d0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d0e:	f7fe facf 	bl	80002b0 <__aeabi_uldivmod>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4613      	mov	r3, r2
 8001d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d1c:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d3e:	e0eb      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d4c:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d06b      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	2200      	movs	r2, #0
 8001d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d74:	4622      	mov	r2, r4
 8001d76:	462b      	mov	r3, r5
 8001d78:	f04f 0000 	mov.w	r0, #0
 8001d7c:	f04f 0100 	mov.w	r1, #0
 8001d80:	0159      	lsls	r1, r3, #5
 8001d82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d86:	0150      	lsls	r0, r2, #5
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	1a51      	subs	r1, r2, r1
 8001d90:	61b9      	str	r1, [r7, #24]
 8001d92:	4629      	mov	r1, r5
 8001d94:	eb63 0301 	sbc.w	r3, r3, r1
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001da6:	4659      	mov	r1, fp
 8001da8:	018b      	lsls	r3, r1, #6
 8001daa:	4651      	mov	r1, sl
 8001dac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001db0:	4651      	mov	r1, sl
 8001db2:	018a      	lsls	r2, r1, #6
 8001db4:	4651      	mov	r1, sl
 8001db6:	ebb2 0801 	subs.w	r8, r2, r1
 8001dba:	4659      	mov	r1, fp
 8001dbc:	eb63 0901 	sbc.w	r9, r3, r1
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dd4:	4690      	mov	r8, r2
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	4623      	mov	r3, r4
 8001dda:	eb18 0303 	adds.w	r3, r8, r3
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	462b      	mov	r3, r5
 8001de2:	eb49 0303 	adc.w	r3, r9, r3
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001df4:	4629      	mov	r1, r5
 8001df6:	024b      	lsls	r3, r1, #9
 8001df8:	4621      	mov	r1, r4
 8001dfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dfe:	4621      	mov	r1, r4
 8001e00:	024a      	lsls	r2, r1, #9
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e14:	f7fe fa4c 	bl	80002b0 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e22:	e065      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x420>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400
 8001e2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e30:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	2200      	movs	r2, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e40:	653b      	str	r3, [r7, #80]	; 0x50
 8001e42:	2300      	movs	r3, #0
 8001e44:	657b      	str	r3, [r7, #84]	; 0x54
 8001e46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e4a:	4642      	mov	r2, r8
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0159      	lsls	r1, r3, #5
 8001e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5c:	0150      	lsls	r0, r2, #5
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4641      	mov	r1, r8
 8001e64:	1a51      	subs	r1, r2, r1
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	4649      	mov	r1, r9
 8001e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	018b      	lsls	r3, r1, #6
 8001e80:	4651      	mov	r1, sl
 8001e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e86:	4651      	mov	r1, sl
 8001e88:	018a      	lsls	r2, r1, #6
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	1a54      	subs	r4, r2, r1
 8001e8e:	4659      	mov	r1, fp
 8001e90:	eb63 0501 	sbc.w	r5, r3, r1
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	00eb      	lsls	r3, r5, #3
 8001e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ea2:	00e2      	lsls	r2, r4, #3
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	4643      	mov	r3, r8
 8001eaa:	18e3      	adds	r3, r4, r3
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	464b      	mov	r3, r9
 8001eb0:	eb45 0303 	adc.w	r3, r5, r3
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	028b      	lsls	r3, r1, #10
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ecc:	4621      	mov	r1, r4
 8001ece:	028a      	lsls	r2, r1, #10
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ed8:	2200      	movs	r2, #0
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8001edc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ede:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ee2:	f7fe f9e5 	bl	80002b0 <__aeabi_uldivmod>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4613      	mov	r3, r2
 8001eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0f1b      	lsrs	r3, r3, #28
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f0e:	e003      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	37b8      	adds	r7, #184	; 0xb8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400

08001f30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e347      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d904      	bls.n	8001f54 <HAL_RCC_OscConfig+0x24>
 8001f4a:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8001f4e:	4893      	ldr	r0, [pc, #588]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f7fe fcdd 	bl	800090e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8096 	beq.w	800208e <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00e      	beq.n	8001f88 <HAL_RCC_OscConfig+0x58>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d009      	beq.n	8001f88 <HAL_RCC_OscConfig+0x58>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d004      	beq.n	8001f88 <HAL_RCC_OscConfig+0x58>
 8001f7e:	f640 5115 	movw	r1, #3349	; 0xd15
 8001f82:	4886      	ldr	r0, [pc, #536]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	f7fe fcc3 	bl	800090e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f88:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d019      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f94:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fa0:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fac:	d00c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d112      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4b75      	ldr	r3, [pc, #468]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05b      	beq.n	800208c <HAL_RCC_OscConfig+0x15c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d157      	bne.n	800208c <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e2f8      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc8>
 8001fea:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6c      	ldr	r2, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e01d      	b.n	8002034 <HAL_RCC_OscConfig+0x104>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0xec>
 8002002:	4b67      	ldr	r3, [pc, #412]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a66      	ldr	r2, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a63      	ldr	r2, [pc, #396]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x104>
 800201c:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a5f      	ldr	r2, [pc, #380]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b5d      	ldr	r3, [pc, #372]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5c      	ldr	r2, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d013      	beq.n	8002064 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7fe fe68 	bl	8000d10 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe fe64 	bl	8000d10 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e2bd      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b52      	ldr	r3, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x114>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fe54 	bl	8000d10 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe fe50 	bl	8000d10 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e2a9      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x13c>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 808c 	beq.w	80021b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_RCC_OscConfig+0x186>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d004      	beq.n	80020b6 <HAL_RCC_OscConfig+0x186>
 80020ac:	f640 514d 	movw	r1, #3405	; 0xd4d
 80020b0:	483a      	ldr	r0, [pc, #232]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f7fe fc2c 	bl	800090e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b1f      	cmp	r3, #31
 80020bc:	d904      	bls.n	80020c8 <HAL_RCC_OscConfig+0x198>
 80020be:	f640 514e 	movw	r1, #3406	; 0xd4e
 80020c2:	4836      	ldr	r0, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f7fe fc23 	bl	800090e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020e0:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ec:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d11c      	bne.n	8002132 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d116      	bne.n	8002132 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x1ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e25a      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	491d      	ldr	r1, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002130:	e040      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fde6 	bl	8000d10 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fde2 	bl	8000d10 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e23b      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_OscConfig+0x270>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
 800217a:	e01b      	b.n	80021b4 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x274>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7fe fdc5 	bl	8000d10 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002188:	e00e      	b.n	80021a8 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800218a:	f7fe fdc1 	bl	8000d10 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d907      	bls.n	80021a8 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e21a      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
 800219c:	080043dc 	.word	0x080043dc
 80021a0:	40023800 	.word	0x40023800
 80021a4:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a8:	4b74      	ldr	r3, [pc, #464]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ea      	bne.n	800218a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d03d      	beq.n	800223c <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_OscConfig+0x2aa>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d004      	beq.n	80021da <HAL_RCC_OscConfig+0x2aa>
 80021d0:	f640 5194 	movw	r1, #3476	; 0xd94
 80021d4:	486a      	ldr	r0, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x450>)
 80021d6:	f7fe fb9a 	bl	800090e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x454>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe fd92 	bl	8000d10 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe fd8e 	bl	8000d10 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1e7      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x2c0>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_RCC_OscConfig+0x454>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002216:	f7fe fd7b 	bl	8000d10 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe fd77 	bl	8000d10 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1d0      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b52      	ldr	r3, [pc, #328]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80b0 	beq.w	80023aa <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_RCC_OscConfig+0x340>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d008      	beq.n	8002270 <HAL_RCC_OscConfig+0x340>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d004      	beq.n	8002270 <HAL_RCC_OscConfig+0x340>
 8002266:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800226a:	4845      	ldr	r0, [pc, #276]	; (8002380 <HAL_RCC_OscConfig+0x450>)
 800226c:	f7fe fb4f 	bl	800090e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002270:	4b42      	ldr	r3, [pc, #264]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10f      	bne.n	800229c <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	4b3e      	ldr	r3, [pc, #248]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	4a3d      	ldr	r2, [pc, #244]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	6413      	str	r3, [r2, #64]	; 0x40
 800228c:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCC_OscConfig+0x458>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d118      	bne.n	80022da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_OscConfig+0x458>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a36      	ldr	r2, [pc, #216]	; (8002388 <HAL_RCC_OscConfig+0x458>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b4:	f7fe fd2c 	bl	8000d10 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022bc:	f7fe fd28 	bl	8000d10 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e181      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_OscConfig+0x458>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3c0>
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e6:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70
 80022ee:	e01c      	b.n	800232a <HAL_RCC_OscConfig+0x3fa>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d10c      	bne.n	8002312 <HAL_RCC_OscConfig+0x3e2>
 80022f8:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	; 0x70
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	; 0x70
 8002310:	e00b      	b.n	800232a <HAL_RCC_OscConfig+0x3fa>
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a16      	ldr	r2, [pc, #88]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d015      	beq.n	800235e <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002332:	f7fe fced 	bl	8000d10 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fce9 	bl	8000d10 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e140      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_OscConfig+0x44c>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ee      	beq.n	800233a <HAL_RCC_OscConfig+0x40a>
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235e:	f7fe fcd7 	bl	8000d10 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	e012      	b.n	800238c <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe fcd3 	bl	8000d10 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d909      	bls.n	800238c <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e12a      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
 800237c:	40023800 	.word	0x40023800
 8002380:	080043dc 	.word	0x080043dc
 8002384:	42470e80 	.word	0x42470e80
 8002388:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b93      	ldr	r3, [pc, #588]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e6      	bne.n	8002366 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b8f      	ldr	r3, [pc, #572]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a8e      	ldr	r2, [pc, #568]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_RCC_OscConfig+0x49c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d008      	beq.n	80023cc <HAL_RCC_OscConfig+0x49c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d004      	beq.n	80023cc <HAL_RCC_OscConfig+0x49c>
 80023c2:	f640 6103 	movw	r1, #3587	; 0xe03
 80023c6:	4886      	ldr	r0, [pc, #536]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 80023c8:	f7fe faa1 	bl	800090e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80fd 	beq.w	80025d0 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	f000 80b6 	beq.w	8002550 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f040 809a 	bne.w	8002522 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_OscConfig+0x4da>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fe:	d004      	beq.n	800240a <HAL_RCC_OscConfig+0x4da>
 8002400:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002404:	4876      	ldr	r0, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 8002406:	f7fe fa82 	bl	800090e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b3f      	cmp	r3, #63	; 0x3f
 8002410:	d904      	bls.n	800241c <HAL_RCC_OscConfig+0x4ec>
 8002412:	f640 610d 	movw	r1, #3597	; 0xe0d
 8002416:	4872      	ldr	r0, [pc, #456]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 8002418:	f7fe fa79 	bl	800090e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b31      	cmp	r3, #49	; 0x31
 8002422:	d904      	bls.n	800242e <HAL_RCC_OscConfig+0x4fe>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800242c:	d904      	bls.n	8002438 <HAL_RCC_OscConfig+0x508>
 800242e:	f640 610e 	movw	r1, #3598	; 0xe0e
 8002432:	486b      	ldr	r0, [pc, #428]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 8002434:	f7fe fa6b 	bl	800090e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	2b02      	cmp	r3, #2
 800243e:	d010      	beq.n	8002462 <HAL_RCC_OscConfig+0x532>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	2b04      	cmp	r3, #4
 8002446:	d00c      	beq.n	8002462 <HAL_RCC_OscConfig+0x532>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2b06      	cmp	r3, #6
 800244e:	d008      	beq.n	8002462 <HAL_RCC_OscConfig+0x532>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	2b08      	cmp	r3, #8
 8002456:	d004      	beq.n	8002462 <HAL_RCC_OscConfig+0x532>
 8002458:	f640 610f 	movw	r1, #3599	; 0xe0f
 800245c:	4860      	ldr	r0, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 800245e:	f7fe fa56 	bl	800090e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d903      	bls.n	8002472 <HAL_RCC_OscConfig+0x542>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	2b0f      	cmp	r3, #15
 8002470:	d904      	bls.n	800247c <HAL_RCC_OscConfig+0x54c>
 8002472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002476:	485a      	ldr	r0, [pc, #360]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 8002478:	f7fe fa49 	bl	800090e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	2b01      	cmp	r3, #1
 8002482:	d903      	bls.n	800248c <HAL_RCC_OscConfig+0x55c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	2b07      	cmp	r3, #7
 800248a:	d904      	bls.n	8002496 <HAL_RCC_OscConfig+0x566>
 800248c:	f640 6111 	movw	r1, #3601	; 0xe11
 8002490:	4853      	ldr	r0, [pc, #332]	; (80025e0 <HAL_RCC_OscConfig+0x6b0>)
 8002492:	f7fe fa3c 	bl	800090e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_OscConfig+0x6b4>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fc38 	bl	8000d10 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a4:	f7fe fc34 	bl	8000d10 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e08d      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69da      	ldr	r2, [r3, #28]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	019b      	lsls	r3, r3, #6
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	3b01      	subs	r3, #1
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	071b      	lsls	r3, r3, #28
 80024ee:	493b      	ldr	r1, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x6b4>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc09 	bl	8000d10 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe fc05 	bl	8000d10 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e05e      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x5d2>
 8002520:	e056      	b.n	80025d0 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_RCC_OscConfig+0x6b4>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fbf2 	bl	8000d10 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fbee 	bl	8000d10 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e047      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x600>
 800254e:	e03f      	b.n	80025d0 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <HAL_RCC_OscConfig+0x6ac>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d030      	beq.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d129      	bne.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d122      	bne.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d119      	bne.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d10f      	bne.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080043dc 	.word	0x080043dc
 80025e4:	42470060 	.word	0x42470060

080025e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0be      	b.n	8002778 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d03b      	beq.n	800267a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5e      	ldr	r2, [pc, #376]	; (8002780 <HAL_UART_Init+0x198>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d01d      	beq.n	8002648 <HAL_UART_Init+0x60>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5c      	ldr	r2, [pc, #368]	; (8002784 <HAL_UART_Init+0x19c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d018      	beq.n	8002648 <HAL_UART_Init+0x60>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <HAL_UART_Init+0x1a0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_UART_Init+0x60>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a59      	ldr	r2, [pc, #356]	; (800278c <HAL_UART_Init+0x1a4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00e      	beq.n	8002648 <HAL_UART_Init+0x60>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a58      	ldr	r2, [pc, #352]	; (8002790 <HAL_UART_Init+0x1a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_UART_Init+0x60>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a56      	ldr	r2, [pc, #344]	; (8002794 <HAL_UART_Init+0x1ac>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_UART_Init+0x60>
 800263e:	f240 1173 	movw	r1, #371	; 0x173
 8002642:	4855      	ldr	r0, [pc, #340]	; (8002798 <HAL_UART_Init+0x1b0>)
 8002644:	f7fe f963 	bl	800090e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d037      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002658:	d032      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002662:	d02d      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266c:	d028      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 800266e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002672:	4849      	ldr	r0, [pc, #292]	; (8002798 <HAL_UART_Init+0x1b0>)
 8002674:	f7fe f94b 	bl	800090e <assert_failed>
 8002678:	e022      	b.n	80026c0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a40      	ldr	r2, [pc, #256]	; (8002780 <HAL_UART_Init+0x198>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d01d      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3e      	ldr	r2, [pc, #248]	; (8002784 <HAL_UART_Init+0x19c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d018      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a3d      	ldr	r2, [pc, #244]	; (8002788 <HAL_UART_Init+0x1a0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d013      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3b      	ldr	r2, [pc, #236]	; (800278c <HAL_UART_Init+0x1a4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <HAL_UART_Init+0x1a8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_UART_Init+0x1ac>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <HAL_UART_Init+0xd8>
 80026b6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80026ba:	4837      	ldr	r0, [pc, #220]	; (8002798 <HAL_UART_Init+0x1b0>)
 80026bc:	f7fe f927 	bl	800090e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_UART_Init+0xf4>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d004      	beq.n	80026dc <HAL_UART_Init+0xf4>
 80026d2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80026d6:	4830      	ldr	r0, [pc, #192]	; (8002798 <HAL_UART_Init+0x1b0>)
 80026d8:	f7fe f919 	bl	800090e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_UART_Init+0x110>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ec:	d004      	beq.n	80026f8 <HAL_UART_Init+0x110>
 80026ee:	f240 117b 	movw	r1, #379	; 0x17b
 80026f2:	4829      	ldr	r0, [pc, #164]	; (8002798 <HAL_UART_Init+0x1b0>)
 80026f4:	f7fe f90b 	bl	800090e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe f931 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2224      	movs	r2, #36	; 0x24
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002728:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f936 	bl	800299c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800273e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800274e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40011000 	.word	0x40011000
 8002784:	40004400 	.word	0x40004400
 8002788:	40004800 	.word	0x40004800
 800278c:	40004c00 	.word	0x40004c00
 8002790:	40005000 	.word	0x40005000
 8002794:	40011400 	.word	0x40011400
 8002798:	08004454 	.word	0x08004454

0800279c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d17c      	bne.n	80028b6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_UART_Transmit+0x2c>
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e075      	b.n	80028b8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_UART_Transmit+0x3e>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e06e      	b.n	80028b8 <HAL_UART_Transmit+0x11c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2221      	movs	r2, #33	; 0x21
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f0:	f7fe fa8e 	bl	8000d10 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	d108      	bne.n	800281e <HAL_UART_Transmit+0x82>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e003      	b.n	8002826 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800282e:	e02a      	b.n	8002886 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2200      	movs	r2, #0
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f840 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e036      	b.n	80028b8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	3302      	adds	r3, #2
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e007      	b.n	8002878 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3301      	adds	r3, #1
 8002876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1cf      	bne.n	8002830 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f810 	bl	80028c0 <UART_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e006      	b.n	80028b8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3720      	adds	r7, #32
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b090      	sub	sp, #64	; 0x40
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d0:	e050      	b.n	8002974 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d04c      	beq.n	8002974 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e0:	f7fe fa16 	bl	8000d10 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d241      	bcs.n	8002974 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002910:	637a      	str	r2, [r7, #52]	; 0x34
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	613b      	str	r3, [r7, #16]
   return(result);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	63bb      	str	r3, [r7, #56]	; 0x38
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002944:	623a      	str	r2, [r7, #32]
 8002946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	69f9      	ldr	r1, [r7, #28]
 800294a:	6a3a      	ldr	r2, [r7, #32]
 800294c:	e841 2300 	strex	r3, r2, [r1]
 8002950:	61bb      	str	r3, [r7, #24]
   return(result);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e5      	bne.n	8002924 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e00f      	b.n	8002994 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4013      	ands	r3, r2
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d09f      	beq.n	80028d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3740      	adds	r7, #64	; 0x40
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800299c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a0:	b0c0      	sub	sp, #256	; 0x100
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4bcf      	ldr	r3, [pc, #828]	; (8002cec <UART_SetConfig+0x350>)
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d904      	bls.n	80029be <UART_SetConfig+0x22>
 80029b4:	f640 6161 	movw	r1, #3681	; 0xe61
 80029b8:	48cd      	ldr	r0, [pc, #820]	; (8002cf0 <UART_SetConfig+0x354>)
 80029ba:	f7fd ffa8 	bl	800090e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <UART_SetConfig+0x42>
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d2:	d004      	beq.n	80029de <UART_SetConfig+0x42>
 80029d4:	f640 6162 	movw	r1, #3682	; 0xe62
 80029d8:	48c5      	ldr	r0, [pc, #788]	; (8002cf0 <UART_SetConfig+0x354>)
 80029da:	f7fd ff98 	bl	800090e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d010      	beq.n	8002a0a <UART_SetConfig+0x6e>
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d00a      	beq.n	8002a0a <UART_SetConfig+0x6e>
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029fe:	d004      	beq.n	8002a0a <UART_SetConfig+0x6e>
 8002a00:	f640 6163 	movw	r1, #3683	; 0xe63
 8002a04:	48ba      	ldr	r0, [pc, #744]	; (8002cf0 <UART_SetConfig+0x354>)
 8002a06:	f7fd ff82 	bl	800090e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <UART_SetConfig+0x88>
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <UART_SetConfig+0x92>
 8002a24:	f640 6164 	movw	r1, #3684	; 0xe64
 8002a28:	48b1      	ldr	r0, [pc, #708]	; (8002cf0 <UART_SetConfig+0x354>)
 8002a2a:	f7fd ff70 	bl	800090e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3e:	68d9      	ldr	r1, [r3, #12]
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	ea40 0301 	orr.w	r3, r0, r1
 8002a4a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a7a:	f021 010c 	bic.w	r1, r1, #12
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	ea40 0301 	orr.w	r3, r0, r1
 8002aa8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b90      	ldr	r3, [pc, #576]	; (8002cf4 <UART_SetConfig+0x358>)
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d005      	beq.n	8002ac2 <UART_SetConfig+0x126>
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b8e      	ldr	r3, [pc, #568]	; (8002cf8 <UART_SetConfig+0x35c>)
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d104      	bne.n	8002acc <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac2:	f7fe fff1 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 8002ac6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002aca:	e003      	b.n	8002ad4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002acc:	f7fe ffd8 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ade:	f040 810f 	bne.w	8002d00 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002af4:	4622      	mov	r2, r4
 8002af6:	462b      	mov	r3, r5
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	65b9      	str	r1, [r7, #88]	; 0x58
 8002afc:	415b      	adcs	r3, r3
 8002afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b04:	4621      	mov	r1, r4
 8002b06:	eb12 0801 	adds.w	r8, r2, r1
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	eb43 0901 	adc.w	r9, r3, r1
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b24:	4690      	mov	r8, r2
 8002b26:	4699      	mov	r9, r3
 8002b28:	4623      	mov	r3, r4
 8002b2a:	eb18 0303 	adds.w	r3, r8, r3
 8002b2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b32:	462b      	mov	r3, r5
 8002b34:	eb49 0303 	adc.w	r3, r9, r3
 8002b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b48:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b4c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b50:	460b      	mov	r3, r1
 8002b52:	18db      	adds	r3, r3, r3
 8002b54:	653b      	str	r3, [r7, #80]	; 0x50
 8002b56:	4613      	mov	r3, r2
 8002b58:	eb42 0303 	adc.w	r3, r2, r3
 8002b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b62:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b66:	f7fd fba3 	bl	80002b0 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <UART_SetConfig+0x360>)
 8002b70:	fba3 2302 	umull	r2, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	011c      	lsls	r4, r3, #4
 8002b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b82:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b86:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b8a:	4642      	mov	r2, r8
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	1891      	adds	r1, r2, r2
 8002b90:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b92:	415b      	adcs	r3, r3
 8002b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	eb12 0a01 	adds.w	sl, r2, r1
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bba:	4692      	mov	sl, r2
 8002bbc:	469b      	mov	fp, r3
 8002bbe:	4643      	mov	r3, r8
 8002bc0:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc8:	464b      	mov	r3, r9
 8002bca:	eb4b 0303 	adc.w	r3, fp, r3
 8002bce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bde:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002be2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002be6:	460b      	mov	r3, r1
 8002be8:	18db      	adds	r3, r3, r3
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40
 8002bec:	4613      	mov	r3, r2
 8002bee:	eb42 0303 	adc.w	r3, r2, r3
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002bfc:	f7fd fb58 	bl	80002b0 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <UART_SetConfig+0x360>)
 8002c08:	fba3 2301 	umull	r2, r3, r3, r1
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2264      	movs	r2, #100	; 0x64
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	1acb      	subs	r3, r1, r3
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c1c:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <UART_SetConfig+0x360>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c2a:	441c      	add	r4, r3
 8002c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c36:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c3a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c3e:	4642      	mov	r2, r8
 8002c40:	464b      	mov	r3, r9
 8002c42:	1891      	adds	r1, r2, r2
 8002c44:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c46:	415b      	adcs	r3, r3
 8002c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c4e:	4641      	mov	r1, r8
 8002c50:	1851      	adds	r1, r2, r1
 8002c52:	6339      	str	r1, [r7, #48]	; 0x30
 8002c54:	4649      	mov	r1, r9
 8002c56:	414b      	adcs	r3, r1
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c66:	4659      	mov	r1, fp
 8002c68:	00cb      	lsls	r3, r1, #3
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c70:	4651      	mov	r1, sl
 8002c72:	00ca      	lsls	r2, r1, #3
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4642      	mov	r2, r8
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c82:	464b      	mov	r3, r9
 8002c84:	460a      	mov	r2, r1
 8002c86:	eb42 0303 	adc.w	r3, r2, r3
 8002c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c9a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	18db      	adds	r3, r3, r3
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	4613      	mov	r3, r2
 8002caa:	eb42 0303 	adc.w	r3, r2, r3
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cb8:	f7fd fafa 	bl	80002b0 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <UART_SetConfig+0x360>)
 8002cc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2164      	movs	r1, #100	; 0x64
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	3332      	adds	r3, #50	; 0x32
 8002cd4:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <UART_SetConfig+0x360>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	f003 0207 	and.w	r2, r3, #7
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4422      	add	r2, r4
 8002ce8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cea:	e108      	b.n	8002efe <UART_SetConfig+0x562>
 8002cec:	00a037a0 	.word	0x00a037a0
 8002cf0:	08004454 	.word	0x08004454
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d12:	4642      	mov	r2, r8
 8002d14:	464b      	mov	r3, r9
 8002d16:	1891      	adds	r1, r2, r2
 8002d18:	6239      	str	r1, [r7, #32]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d22:	4641      	mov	r1, r8
 8002d24:	1854      	adds	r4, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb43 0501 	adc.w	r5, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00eb      	lsls	r3, r5, #3
 8002d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d48:	464b      	mov	r3, r9
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6e:	4629      	mov	r1, r5
 8002d70:	008b      	lsls	r3, r1, #2
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d78:	4621      	mov	r1, r4
 8002d7a:	008a      	lsls	r2, r1, #2
 8002d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d80:	f7fd fa96 	bl	80002b0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <UART_SetConfig+0x570>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	61b9      	str	r1, [r7, #24]
 8002dac:	415b      	adcs	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6139      	str	r1, [r7, #16]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	008b      	lsls	r3, r1, #2
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e16:	4641      	mov	r1, r8
 8002e18:	008a      	lsls	r2, r1, #2
 8002e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e1e:	f7fd fa47 	bl	80002b0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <UART_SetConfig+0x570>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <UART_SetConfig+0x570>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e46:	441c      	add	r4, r3
 8002e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e50:	677a      	str	r2, [r7, #116]	; 0x74
 8002e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e56:	4642      	mov	r2, r8
 8002e58:	464b      	mov	r3, r9
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e66:	4641      	mov	r1, r8
 8002e68:	1851      	adds	r1, r2, r1
 8002e6a:	6039      	str	r1, [r7, #0]
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	414b      	adcs	r3, r1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e7e:	4659      	mov	r1, fp
 8002e80:	00cb      	lsls	r3, r1, #3
 8002e82:	4651      	mov	r1, sl
 8002e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e88:	4651      	mov	r1, sl
 8002e8a:	00ca      	lsls	r2, r1, #3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4603      	mov	r3, r0
 8002e92:	4642      	mov	r2, r8
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8002eac:	667a      	str	r2, [r7, #100]	; 0x64
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eba:	4649      	mov	r1, r9
 8002ebc:	008b      	lsls	r3, r1, #2
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	008a      	lsls	r2, r1, #2
 8002ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ecc:	f7fd f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x570>)
 8002ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x570>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4422      	add	r2, r4
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	bf00      	nop
 8002f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	51eb851f 	.word	0x51eb851f

08002f10 <__errno>:
 8002f10:	4b01      	ldr	r3, [pc, #4]	; (8002f18 <__errno+0x8>)
 8002f12:	6818      	ldr	r0, [r3, #0]
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	2000000c 	.word	0x2000000c

08002f1c <__libc_init_array>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4d0d      	ldr	r5, [pc, #52]	; (8002f54 <__libc_init_array+0x38>)
 8002f20:	4c0d      	ldr	r4, [pc, #52]	; (8002f58 <__libc_init_array+0x3c>)
 8002f22:	1b64      	subs	r4, r4, r5
 8002f24:	10a4      	asrs	r4, r4, #2
 8002f26:	2600      	movs	r6, #0
 8002f28:	42a6      	cmp	r6, r4
 8002f2a:	d109      	bne.n	8002f40 <__libc_init_array+0x24>
 8002f2c:	4d0b      	ldr	r5, [pc, #44]	; (8002f5c <__libc_init_array+0x40>)
 8002f2e:	4c0c      	ldr	r4, [pc, #48]	; (8002f60 <__libc_init_array+0x44>)
 8002f30:	f001 f98a 	bl	8004248 <_init>
 8002f34:	1b64      	subs	r4, r4, r5
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	2600      	movs	r6, #0
 8002f3a:	42a6      	cmp	r6, r4
 8002f3c:	d105      	bne.n	8002f4a <__libc_init_array+0x2e>
 8002f3e:	bd70      	pop	{r4, r5, r6, pc}
 8002f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f44:	4798      	blx	r3
 8002f46:	3601      	adds	r6, #1
 8002f48:	e7ee      	b.n	8002f28 <__libc_init_array+0xc>
 8002f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f4e:	4798      	blx	r3
 8002f50:	3601      	adds	r6, #1
 8002f52:	e7f2      	b.n	8002f3a <__libc_init_array+0x1e>
 8002f54:	08004580 	.word	0x08004580
 8002f58:	08004580 	.word	0x08004580
 8002f5c:	08004580 	.word	0x08004580
 8002f60:	08004584 	.word	0x08004584

08002f64 <memset>:
 8002f64:	4402      	add	r2, r0
 8002f66:	4603      	mov	r3, r0
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <memset+0xa>
 8002f6c:	4770      	bx	lr
 8002f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f72:	e7f9      	b.n	8002f68 <memset+0x4>

08002f74 <iprintf>:
 8002f74:	b40f      	push	{r0, r1, r2, r3}
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <iprintf+0x2c>)
 8002f78:	b513      	push	{r0, r1, r4, lr}
 8002f7a:	681c      	ldr	r4, [r3, #0]
 8002f7c:	b124      	cbz	r4, 8002f88 <iprintf+0x14>
 8002f7e:	69a3      	ldr	r3, [r4, #24]
 8002f80:	b913      	cbnz	r3, 8002f88 <iprintf+0x14>
 8002f82:	4620      	mov	r0, r4
 8002f84:	f000 f886 	bl	8003094 <__sinit>
 8002f88:	ab05      	add	r3, sp, #20
 8002f8a:	9a04      	ldr	r2, [sp, #16]
 8002f8c:	68a1      	ldr	r1, [r4, #8]
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	4620      	mov	r0, r4
 8002f92:	f000 fb39 	bl	8003608 <_vfiprintf_r>
 8002f96:	b002      	add	sp, #8
 8002f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f9c:	b004      	add	sp, #16
 8002f9e:	4770      	bx	lr
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <siprintf>:
 8002fa4:	b40e      	push	{r1, r2, r3}
 8002fa6:	b500      	push	{lr}
 8002fa8:	b09c      	sub	sp, #112	; 0x70
 8002faa:	ab1d      	add	r3, sp, #116	; 0x74
 8002fac:	9002      	str	r0, [sp, #8]
 8002fae:	9006      	str	r0, [sp, #24]
 8002fb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fb4:	4809      	ldr	r0, [pc, #36]	; (8002fdc <siprintf+0x38>)
 8002fb6:	9107      	str	r1, [sp, #28]
 8002fb8:	9104      	str	r1, [sp, #16]
 8002fba:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <siprintf+0x3c>)
 8002fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fc0:	9105      	str	r1, [sp, #20]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	a902      	add	r1, sp, #8
 8002fc8:	f000 f9f4 	bl	80033b4 <_svfiprintf_r>
 8002fcc:	9b02      	ldr	r3, [sp, #8]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	b01c      	add	sp, #112	; 0x70
 8002fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fd8:	b003      	add	sp, #12
 8002fda:	4770      	bx	lr
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	ffff0208 	.word	0xffff0208

08002fe4 <std>:
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	b510      	push	{r4, lr}
 8002fe8:	4604      	mov	r4, r0
 8002fea:	e9c0 3300 	strd	r3, r3, [r0]
 8002fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ff2:	6083      	str	r3, [r0, #8]
 8002ff4:	8181      	strh	r1, [r0, #12]
 8002ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ff8:	81c2      	strh	r2, [r0, #14]
 8002ffa:	6183      	str	r3, [r0, #24]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	2208      	movs	r2, #8
 8003000:	305c      	adds	r0, #92	; 0x5c
 8003002:	f7ff ffaf 	bl	8002f64 <memset>
 8003006:	4b05      	ldr	r3, [pc, #20]	; (800301c <std+0x38>)
 8003008:	6263      	str	r3, [r4, #36]	; 0x24
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <std+0x3c>)
 800300c:	62a3      	str	r3, [r4, #40]	; 0x28
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <std+0x40>)
 8003010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <std+0x44>)
 8003014:	6224      	str	r4, [r4, #32]
 8003016:	6323      	str	r3, [r4, #48]	; 0x30
 8003018:	bd10      	pop	{r4, pc}
 800301a:	bf00      	nop
 800301c:	08003bb1 	.word	0x08003bb1
 8003020:	08003bd3 	.word	0x08003bd3
 8003024:	08003c0b 	.word	0x08003c0b
 8003028:	08003c2f 	.word	0x08003c2f

0800302c <_cleanup_r>:
 800302c:	4901      	ldr	r1, [pc, #4]	; (8003034 <_cleanup_r+0x8>)
 800302e:	f000 b8af 	b.w	8003190 <_fwalk_reent>
 8003032:	bf00      	nop
 8003034:	08003f09 	.word	0x08003f09

08003038 <__sfmoreglue>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	2268      	movs	r2, #104	; 0x68
 800303c:	1e4d      	subs	r5, r1, #1
 800303e:	4355      	muls	r5, r2
 8003040:	460e      	mov	r6, r1
 8003042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003046:	f000 f8e5 	bl	8003214 <_malloc_r>
 800304a:	4604      	mov	r4, r0
 800304c:	b140      	cbz	r0, 8003060 <__sfmoreglue+0x28>
 800304e:	2100      	movs	r1, #0
 8003050:	e9c0 1600 	strd	r1, r6, [r0]
 8003054:	300c      	adds	r0, #12
 8003056:	60a0      	str	r0, [r4, #8]
 8003058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800305c:	f7ff ff82 	bl	8002f64 <memset>
 8003060:	4620      	mov	r0, r4
 8003062:	bd70      	pop	{r4, r5, r6, pc}

08003064 <__sfp_lock_acquire>:
 8003064:	4801      	ldr	r0, [pc, #4]	; (800306c <__sfp_lock_acquire+0x8>)
 8003066:	f000 b8b3 	b.w	80031d0 <__retarget_lock_acquire_recursive>
 800306a:	bf00      	nop
 800306c:	20000101 	.word	0x20000101

08003070 <__sfp_lock_release>:
 8003070:	4801      	ldr	r0, [pc, #4]	; (8003078 <__sfp_lock_release+0x8>)
 8003072:	f000 b8ae 	b.w	80031d2 <__retarget_lock_release_recursive>
 8003076:	bf00      	nop
 8003078:	20000101 	.word	0x20000101

0800307c <__sinit_lock_acquire>:
 800307c:	4801      	ldr	r0, [pc, #4]	; (8003084 <__sinit_lock_acquire+0x8>)
 800307e:	f000 b8a7 	b.w	80031d0 <__retarget_lock_acquire_recursive>
 8003082:	bf00      	nop
 8003084:	20000102 	.word	0x20000102

08003088 <__sinit_lock_release>:
 8003088:	4801      	ldr	r0, [pc, #4]	; (8003090 <__sinit_lock_release+0x8>)
 800308a:	f000 b8a2 	b.w	80031d2 <__retarget_lock_release_recursive>
 800308e:	bf00      	nop
 8003090:	20000102 	.word	0x20000102

08003094 <__sinit>:
 8003094:	b510      	push	{r4, lr}
 8003096:	4604      	mov	r4, r0
 8003098:	f7ff fff0 	bl	800307c <__sinit_lock_acquire>
 800309c:	69a3      	ldr	r3, [r4, #24]
 800309e:	b11b      	cbz	r3, 80030a8 <__sinit+0x14>
 80030a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030a4:	f7ff bff0 	b.w	8003088 <__sinit_lock_release>
 80030a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80030ac:	6523      	str	r3, [r4, #80]	; 0x50
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <__sinit+0x68>)
 80030b0:	4a13      	ldr	r2, [pc, #76]	; (8003100 <__sinit+0x6c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80030b6:	42a3      	cmp	r3, r4
 80030b8:	bf04      	itt	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	61a3      	streq	r3, [r4, #24]
 80030be:	4620      	mov	r0, r4
 80030c0:	f000 f820 	bl	8003104 <__sfp>
 80030c4:	6060      	str	r0, [r4, #4]
 80030c6:	4620      	mov	r0, r4
 80030c8:	f000 f81c 	bl	8003104 <__sfp>
 80030cc:	60a0      	str	r0, [r4, #8]
 80030ce:	4620      	mov	r0, r4
 80030d0:	f000 f818 	bl	8003104 <__sfp>
 80030d4:	2200      	movs	r2, #0
 80030d6:	60e0      	str	r0, [r4, #12]
 80030d8:	2104      	movs	r1, #4
 80030da:	6860      	ldr	r0, [r4, #4]
 80030dc:	f7ff ff82 	bl	8002fe4 <std>
 80030e0:	68a0      	ldr	r0, [r4, #8]
 80030e2:	2201      	movs	r2, #1
 80030e4:	2109      	movs	r1, #9
 80030e6:	f7ff ff7d 	bl	8002fe4 <std>
 80030ea:	68e0      	ldr	r0, [r4, #12]
 80030ec:	2202      	movs	r2, #2
 80030ee:	2112      	movs	r1, #18
 80030f0:	f7ff ff78 	bl	8002fe4 <std>
 80030f4:	2301      	movs	r3, #1
 80030f6:	61a3      	str	r3, [r4, #24]
 80030f8:	e7d2      	b.n	80030a0 <__sinit+0xc>
 80030fa:	bf00      	nop
 80030fc:	080044e0 	.word	0x080044e0
 8003100:	0800302d 	.word	0x0800302d

08003104 <__sfp>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	4607      	mov	r7, r0
 8003108:	f7ff ffac 	bl	8003064 <__sfp_lock_acquire>
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <__sfp+0x84>)
 800310e:	681e      	ldr	r6, [r3, #0]
 8003110:	69b3      	ldr	r3, [r6, #24]
 8003112:	b913      	cbnz	r3, 800311a <__sfp+0x16>
 8003114:	4630      	mov	r0, r6
 8003116:	f7ff ffbd 	bl	8003094 <__sinit>
 800311a:	3648      	adds	r6, #72	; 0x48
 800311c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003120:	3b01      	subs	r3, #1
 8003122:	d503      	bpl.n	800312c <__sfp+0x28>
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	b30b      	cbz	r3, 800316c <__sfp+0x68>
 8003128:	6836      	ldr	r6, [r6, #0]
 800312a:	e7f7      	b.n	800311c <__sfp+0x18>
 800312c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003130:	b9d5      	cbnz	r5, 8003168 <__sfp+0x64>
 8003132:	4b16      	ldr	r3, [pc, #88]	; (800318c <__sfp+0x88>)
 8003134:	60e3      	str	r3, [r4, #12]
 8003136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800313a:	6665      	str	r5, [r4, #100]	; 0x64
 800313c:	f000 f847 	bl	80031ce <__retarget_lock_init_recursive>
 8003140:	f7ff ff96 	bl	8003070 <__sfp_lock_release>
 8003144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800314c:	6025      	str	r5, [r4, #0]
 800314e:	61a5      	str	r5, [r4, #24]
 8003150:	2208      	movs	r2, #8
 8003152:	4629      	mov	r1, r5
 8003154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003158:	f7ff ff04 	bl	8002f64 <memset>
 800315c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003164:	4620      	mov	r0, r4
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003168:	3468      	adds	r4, #104	; 0x68
 800316a:	e7d9      	b.n	8003120 <__sfp+0x1c>
 800316c:	2104      	movs	r1, #4
 800316e:	4638      	mov	r0, r7
 8003170:	f7ff ff62 	bl	8003038 <__sfmoreglue>
 8003174:	4604      	mov	r4, r0
 8003176:	6030      	str	r0, [r6, #0]
 8003178:	2800      	cmp	r0, #0
 800317a:	d1d5      	bne.n	8003128 <__sfp+0x24>
 800317c:	f7ff ff78 	bl	8003070 <__sfp_lock_release>
 8003180:	230c      	movs	r3, #12
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	e7ee      	b.n	8003164 <__sfp+0x60>
 8003186:	bf00      	nop
 8003188:	080044e0 	.word	0x080044e0
 800318c:	ffff0001 	.word	0xffff0001

08003190 <_fwalk_reent>:
 8003190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003194:	4606      	mov	r6, r0
 8003196:	4688      	mov	r8, r1
 8003198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800319c:	2700      	movs	r7, #0
 800319e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031a2:	f1b9 0901 	subs.w	r9, r9, #1
 80031a6:	d505      	bpl.n	80031b4 <_fwalk_reent+0x24>
 80031a8:	6824      	ldr	r4, [r4, #0]
 80031aa:	2c00      	cmp	r4, #0
 80031ac:	d1f7      	bne.n	800319e <_fwalk_reent+0xe>
 80031ae:	4638      	mov	r0, r7
 80031b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031b4:	89ab      	ldrh	r3, [r5, #12]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d907      	bls.n	80031ca <_fwalk_reent+0x3a>
 80031ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031be:	3301      	adds	r3, #1
 80031c0:	d003      	beq.n	80031ca <_fwalk_reent+0x3a>
 80031c2:	4629      	mov	r1, r5
 80031c4:	4630      	mov	r0, r6
 80031c6:	47c0      	blx	r8
 80031c8:	4307      	orrs	r7, r0
 80031ca:	3568      	adds	r5, #104	; 0x68
 80031cc:	e7e9      	b.n	80031a2 <_fwalk_reent+0x12>

080031ce <__retarget_lock_init_recursive>:
 80031ce:	4770      	bx	lr

080031d0 <__retarget_lock_acquire_recursive>:
 80031d0:	4770      	bx	lr

080031d2 <__retarget_lock_release_recursive>:
 80031d2:	4770      	bx	lr

080031d4 <sbrk_aligned>:
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	4e0e      	ldr	r6, [pc, #56]	; (8003210 <sbrk_aligned+0x3c>)
 80031d8:	460c      	mov	r4, r1
 80031da:	6831      	ldr	r1, [r6, #0]
 80031dc:	4605      	mov	r5, r0
 80031de:	b911      	cbnz	r1, 80031e6 <sbrk_aligned+0x12>
 80031e0:	f000 fcd6 	bl	8003b90 <_sbrk_r>
 80031e4:	6030      	str	r0, [r6, #0]
 80031e6:	4621      	mov	r1, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 fcd1 	bl	8003b90 <_sbrk_r>
 80031ee:	1c43      	adds	r3, r0, #1
 80031f0:	d00a      	beq.n	8003208 <sbrk_aligned+0x34>
 80031f2:	1cc4      	adds	r4, r0, #3
 80031f4:	f024 0403 	bic.w	r4, r4, #3
 80031f8:	42a0      	cmp	r0, r4
 80031fa:	d007      	beq.n	800320c <sbrk_aligned+0x38>
 80031fc:	1a21      	subs	r1, r4, r0
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 fcc6 	bl	8003b90 <_sbrk_r>
 8003204:	3001      	adds	r0, #1
 8003206:	d101      	bne.n	800320c <sbrk_aligned+0x38>
 8003208:	f04f 34ff 	mov.w	r4, #4294967295
 800320c:	4620      	mov	r0, r4
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	20000108 	.word	0x20000108

08003214 <_malloc_r>:
 8003214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	1ccd      	adds	r5, r1, #3
 800321a:	f025 0503 	bic.w	r5, r5, #3
 800321e:	3508      	adds	r5, #8
 8003220:	2d0c      	cmp	r5, #12
 8003222:	bf38      	it	cc
 8003224:	250c      	movcc	r5, #12
 8003226:	2d00      	cmp	r5, #0
 8003228:	4607      	mov	r7, r0
 800322a:	db01      	blt.n	8003230 <_malloc_r+0x1c>
 800322c:	42a9      	cmp	r1, r5
 800322e:	d905      	bls.n	800323c <_malloc_r+0x28>
 8003230:	230c      	movs	r3, #12
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	2600      	movs	r6, #0
 8003236:	4630      	mov	r0, r6
 8003238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800323c:	4e2e      	ldr	r6, [pc, #184]	; (80032f8 <_malloc_r+0xe4>)
 800323e:	f000 ff3f 	bl	80040c0 <__malloc_lock>
 8003242:	6833      	ldr	r3, [r6, #0]
 8003244:	461c      	mov	r4, r3
 8003246:	bb34      	cbnz	r4, 8003296 <_malloc_r+0x82>
 8003248:	4629      	mov	r1, r5
 800324a:	4638      	mov	r0, r7
 800324c:	f7ff ffc2 	bl	80031d4 <sbrk_aligned>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	4604      	mov	r4, r0
 8003254:	d14d      	bne.n	80032f2 <_malloc_r+0xde>
 8003256:	6834      	ldr	r4, [r6, #0]
 8003258:	4626      	mov	r6, r4
 800325a:	2e00      	cmp	r6, #0
 800325c:	d140      	bne.n	80032e0 <_malloc_r+0xcc>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	4631      	mov	r1, r6
 8003262:	4638      	mov	r0, r7
 8003264:	eb04 0803 	add.w	r8, r4, r3
 8003268:	f000 fc92 	bl	8003b90 <_sbrk_r>
 800326c:	4580      	cmp	r8, r0
 800326e:	d13a      	bne.n	80032e6 <_malloc_r+0xd2>
 8003270:	6821      	ldr	r1, [r4, #0]
 8003272:	3503      	adds	r5, #3
 8003274:	1a6d      	subs	r5, r5, r1
 8003276:	f025 0503 	bic.w	r5, r5, #3
 800327a:	3508      	adds	r5, #8
 800327c:	2d0c      	cmp	r5, #12
 800327e:	bf38      	it	cc
 8003280:	250c      	movcc	r5, #12
 8003282:	4629      	mov	r1, r5
 8003284:	4638      	mov	r0, r7
 8003286:	f7ff ffa5 	bl	80031d4 <sbrk_aligned>
 800328a:	3001      	adds	r0, #1
 800328c:	d02b      	beq.n	80032e6 <_malloc_r+0xd2>
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	442b      	add	r3, r5
 8003292:	6023      	str	r3, [r4, #0]
 8003294:	e00e      	b.n	80032b4 <_malloc_r+0xa0>
 8003296:	6822      	ldr	r2, [r4, #0]
 8003298:	1b52      	subs	r2, r2, r5
 800329a:	d41e      	bmi.n	80032da <_malloc_r+0xc6>
 800329c:	2a0b      	cmp	r2, #11
 800329e:	d916      	bls.n	80032ce <_malloc_r+0xba>
 80032a0:	1961      	adds	r1, r4, r5
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	6025      	str	r5, [r4, #0]
 80032a6:	bf18      	it	ne
 80032a8:	6059      	strne	r1, [r3, #4]
 80032aa:	6863      	ldr	r3, [r4, #4]
 80032ac:	bf08      	it	eq
 80032ae:	6031      	streq	r1, [r6, #0]
 80032b0:	5162      	str	r2, [r4, r5]
 80032b2:	604b      	str	r3, [r1, #4]
 80032b4:	4638      	mov	r0, r7
 80032b6:	f104 060b 	add.w	r6, r4, #11
 80032ba:	f000 ff07 	bl	80040cc <__malloc_unlock>
 80032be:	f026 0607 	bic.w	r6, r6, #7
 80032c2:	1d23      	adds	r3, r4, #4
 80032c4:	1af2      	subs	r2, r6, r3
 80032c6:	d0b6      	beq.n	8003236 <_malloc_r+0x22>
 80032c8:	1b9b      	subs	r3, r3, r6
 80032ca:	50a3      	str	r3, [r4, r2]
 80032cc:	e7b3      	b.n	8003236 <_malloc_r+0x22>
 80032ce:	6862      	ldr	r2, [r4, #4]
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	bf0c      	ite	eq
 80032d4:	6032      	streq	r2, [r6, #0]
 80032d6:	605a      	strne	r2, [r3, #4]
 80032d8:	e7ec      	b.n	80032b4 <_malloc_r+0xa0>
 80032da:	4623      	mov	r3, r4
 80032dc:	6864      	ldr	r4, [r4, #4]
 80032de:	e7b2      	b.n	8003246 <_malloc_r+0x32>
 80032e0:	4634      	mov	r4, r6
 80032e2:	6876      	ldr	r6, [r6, #4]
 80032e4:	e7b9      	b.n	800325a <_malloc_r+0x46>
 80032e6:	230c      	movs	r3, #12
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4638      	mov	r0, r7
 80032ec:	f000 feee 	bl	80040cc <__malloc_unlock>
 80032f0:	e7a1      	b.n	8003236 <_malloc_r+0x22>
 80032f2:	6025      	str	r5, [r4, #0]
 80032f4:	e7de      	b.n	80032b4 <_malloc_r+0xa0>
 80032f6:	bf00      	nop
 80032f8:	20000104 	.word	0x20000104

080032fc <__ssputs_r>:
 80032fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	688e      	ldr	r6, [r1, #8]
 8003302:	429e      	cmp	r6, r3
 8003304:	4682      	mov	sl, r0
 8003306:	460c      	mov	r4, r1
 8003308:	4690      	mov	r8, r2
 800330a:	461f      	mov	r7, r3
 800330c:	d838      	bhi.n	8003380 <__ssputs_r+0x84>
 800330e:	898a      	ldrh	r2, [r1, #12]
 8003310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003314:	d032      	beq.n	800337c <__ssputs_r+0x80>
 8003316:	6825      	ldr	r5, [r4, #0]
 8003318:	6909      	ldr	r1, [r1, #16]
 800331a:	eba5 0901 	sub.w	r9, r5, r1
 800331e:	6965      	ldr	r5, [r4, #20]
 8003320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003328:	3301      	adds	r3, #1
 800332a:	444b      	add	r3, r9
 800332c:	106d      	asrs	r5, r5, #1
 800332e:	429d      	cmp	r5, r3
 8003330:	bf38      	it	cc
 8003332:	461d      	movcc	r5, r3
 8003334:	0553      	lsls	r3, r2, #21
 8003336:	d531      	bpl.n	800339c <__ssputs_r+0xa0>
 8003338:	4629      	mov	r1, r5
 800333a:	f7ff ff6b 	bl	8003214 <_malloc_r>
 800333e:	4606      	mov	r6, r0
 8003340:	b950      	cbnz	r0, 8003358 <__ssputs_r+0x5c>
 8003342:	230c      	movs	r3, #12
 8003344:	f8ca 3000 	str.w	r3, [sl]
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800334e:	81a3      	strh	r3, [r4, #12]
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	6921      	ldr	r1, [r4, #16]
 800335a:	464a      	mov	r2, r9
 800335c:	f000 fe88 	bl	8004070 <memcpy>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	6126      	str	r6, [r4, #16]
 800336e:	6165      	str	r5, [r4, #20]
 8003370:	444e      	add	r6, r9
 8003372:	eba5 0509 	sub.w	r5, r5, r9
 8003376:	6026      	str	r6, [r4, #0]
 8003378:	60a5      	str	r5, [r4, #8]
 800337a:	463e      	mov	r6, r7
 800337c:	42be      	cmp	r6, r7
 800337e:	d900      	bls.n	8003382 <__ssputs_r+0x86>
 8003380:	463e      	mov	r6, r7
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	4632      	mov	r2, r6
 8003386:	4641      	mov	r1, r8
 8003388:	f000 fe80 	bl	800408c <memmove>
 800338c:	68a3      	ldr	r3, [r4, #8]
 800338e:	1b9b      	subs	r3, r3, r6
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	4433      	add	r3, r6
 8003396:	6023      	str	r3, [r4, #0]
 8003398:	2000      	movs	r0, #0
 800339a:	e7db      	b.n	8003354 <__ssputs_r+0x58>
 800339c:	462a      	mov	r2, r5
 800339e:	f000 fee7 	bl	8004170 <_realloc_r>
 80033a2:	4606      	mov	r6, r0
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d1e1      	bne.n	800336c <__ssputs_r+0x70>
 80033a8:	6921      	ldr	r1, [r4, #16]
 80033aa:	4650      	mov	r0, sl
 80033ac:	f000 fe94 	bl	80040d8 <_free_r>
 80033b0:	e7c7      	b.n	8003342 <__ssputs_r+0x46>
	...

080033b4 <_svfiprintf_r>:
 80033b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b8:	4698      	mov	r8, r3
 80033ba:	898b      	ldrh	r3, [r1, #12]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	b09d      	sub	sp, #116	; 0x74
 80033c0:	4607      	mov	r7, r0
 80033c2:	460d      	mov	r5, r1
 80033c4:	4614      	mov	r4, r2
 80033c6:	d50e      	bpl.n	80033e6 <_svfiprintf_r+0x32>
 80033c8:	690b      	ldr	r3, [r1, #16]
 80033ca:	b963      	cbnz	r3, 80033e6 <_svfiprintf_r+0x32>
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	f7ff ff21 	bl	8003214 <_malloc_r>
 80033d2:	6028      	str	r0, [r5, #0]
 80033d4:	6128      	str	r0, [r5, #16]
 80033d6:	b920      	cbnz	r0, 80033e2 <_svfiprintf_r+0x2e>
 80033d8:	230c      	movs	r3, #12
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	e0d1      	b.n	8003586 <_svfiprintf_r+0x1d2>
 80033e2:	2340      	movs	r3, #64	; 0x40
 80033e4:	616b      	str	r3, [r5, #20]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9309      	str	r3, [sp, #36]	; 0x24
 80033ea:	2320      	movs	r3, #32
 80033ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033f4:	2330      	movs	r3, #48	; 0x30
 80033f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035a0 <_svfiprintf_r+0x1ec>
 80033fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033fe:	f04f 0901 	mov.w	r9, #1
 8003402:	4623      	mov	r3, r4
 8003404:	469a      	mov	sl, r3
 8003406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800340a:	b10a      	cbz	r2, 8003410 <_svfiprintf_r+0x5c>
 800340c:	2a25      	cmp	r2, #37	; 0x25
 800340e:	d1f9      	bne.n	8003404 <_svfiprintf_r+0x50>
 8003410:	ebba 0b04 	subs.w	fp, sl, r4
 8003414:	d00b      	beq.n	800342e <_svfiprintf_r+0x7a>
 8003416:	465b      	mov	r3, fp
 8003418:	4622      	mov	r2, r4
 800341a:	4629      	mov	r1, r5
 800341c:	4638      	mov	r0, r7
 800341e:	f7ff ff6d 	bl	80032fc <__ssputs_r>
 8003422:	3001      	adds	r0, #1
 8003424:	f000 80aa 	beq.w	800357c <_svfiprintf_r+0x1c8>
 8003428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800342a:	445a      	add	r2, fp
 800342c:	9209      	str	r2, [sp, #36]	; 0x24
 800342e:	f89a 3000 	ldrb.w	r3, [sl]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80a2 	beq.w	800357c <_svfiprintf_r+0x1c8>
 8003438:	2300      	movs	r3, #0
 800343a:	f04f 32ff 	mov.w	r2, #4294967295
 800343e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003442:	f10a 0a01 	add.w	sl, sl, #1
 8003446:	9304      	str	r3, [sp, #16]
 8003448:	9307      	str	r3, [sp, #28]
 800344a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800344e:	931a      	str	r3, [sp, #104]	; 0x68
 8003450:	4654      	mov	r4, sl
 8003452:	2205      	movs	r2, #5
 8003454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003458:	4851      	ldr	r0, [pc, #324]	; (80035a0 <_svfiprintf_r+0x1ec>)
 800345a:	f7fc fed9 	bl	8000210 <memchr>
 800345e:	9a04      	ldr	r2, [sp, #16]
 8003460:	b9d8      	cbnz	r0, 800349a <_svfiprintf_r+0xe6>
 8003462:	06d0      	lsls	r0, r2, #27
 8003464:	bf44      	itt	mi
 8003466:	2320      	movmi	r3, #32
 8003468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800346c:	0711      	lsls	r1, r2, #28
 800346e:	bf44      	itt	mi
 8003470:	232b      	movmi	r3, #43	; 0x2b
 8003472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003476:	f89a 3000 	ldrb.w	r3, [sl]
 800347a:	2b2a      	cmp	r3, #42	; 0x2a
 800347c:	d015      	beq.n	80034aa <_svfiprintf_r+0xf6>
 800347e:	9a07      	ldr	r2, [sp, #28]
 8003480:	4654      	mov	r4, sl
 8003482:	2000      	movs	r0, #0
 8003484:	f04f 0c0a 	mov.w	ip, #10
 8003488:	4621      	mov	r1, r4
 800348a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800348e:	3b30      	subs	r3, #48	; 0x30
 8003490:	2b09      	cmp	r3, #9
 8003492:	d94e      	bls.n	8003532 <_svfiprintf_r+0x17e>
 8003494:	b1b0      	cbz	r0, 80034c4 <_svfiprintf_r+0x110>
 8003496:	9207      	str	r2, [sp, #28]
 8003498:	e014      	b.n	80034c4 <_svfiprintf_r+0x110>
 800349a:	eba0 0308 	sub.w	r3, r0, r8
 800349e:	fa09 f303 	lsl.w	r3, r9, r3
 80034a2:	4313      	orrs	r3, r2
 80034a4:	9304      	str	r3, [sp, #16]
 80034a6:	46a2      	mov	sl, r4
 80034a8:	e7d2      	b.n	8003450 <_svfiprintf_r+0x9c>
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	1d19      	adds	r1, r3, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	9103      	str	r1, [sp, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bfbb      	ittet	lt
 80034b6:	425b      	neglt	r3, r3
 80034b8:	f042 0202 	orrlt.w	r2, r2, #2
 80034bc:	9307      	strge	r3, [sp, #28]
 80034be:	9307      	strlt	r3, [sp, #28]
 80034c0:	bfb8      	it	lt
 80034c2:	9204      	strlt	r2, [sp, #16]
 80034c4:	7823      	ldrb	r3, [r4, #0]
 80034c6:	2b2e      	cmp	r3, #46	; 0x2e
 80034c8:	d10c      	bne.n	80034e4 <_svfiprintf_r+0x130>
 80034ca:	7863      	ldrb	r3, [r4, #1]
 80034cc:	2b2a      	cmp	r3, #42	; 0x2a
 80034ce:	d135      	bne.n	800353c <_svfiprintf_r+0x188>
 80034d0:	9b03      	ldr	r3, [sp, #12]
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	9203      	str	r2, [sp, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bfb8      	it	lt
 80034dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80034e0:	3402      	adds	r4, #2
 80034e2:	9305      	str	r3, [sp, #20]
 80034e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035b0 <_svfiprintf_r+0x1fc>
 80034e8:	7821      	ldrb	r1, [r4, #0]
 80034ea:	2203      	movs	r2, #3
 80034ec:	4650      	mov	r0, sl
 80034ee:	f7fc fe8f 	bl	8000210 <memchr>
 80034f2:	b140      	cbz	r0, 8003506 <_svfiprintf_r+0x152>
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	eba0 000a 	sub.w	r0, r0, sl
 80034fa:	fa03 f000 	lsl.w	r0, r3, r0
 80034fe:	9b04      	ldr	r3, [sp, #16]
 8003500:	4303      	orrs	r3, r0
 8003502:	3401      	adds	r4, #1
 8003504:	9304      	str	r3, [sp, #16]
 8003506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350a:	4826      	ldr	r0, [pc, #152]	; (80035a4 <_svfiprintf_r+0x1f0>)
 800350c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003510:	2206      	movs	r2, #6
 8003512:	f7fc fe7d 	bl	8000210 <memchr>
 8003516:	2800      	cmp	r0, #0
 8003518:	d038      	beq.n	800358c <_svfiprintf_r+0x1d8>
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <_svfiprintf_r+0x1f4>)
 800351c:	bb1b      	cbnz	r3, 8003566 <_svfiprintf_r+0x1b2>
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	3307      	adds	r3, #7
 8003522:	f023 0307 	bic.w	r3, r3, #7
 8003526:	3308      	adds	r3, #8
 8003528:	9303      	str	r3, [sp, #12]
 800352a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352c:	4433      	add	r3, r6
 800352e:	9309      	str	r3, [sp, #36]	; 0x24
 8003530:	e767      	b.n	8003402 <_svfiprintf_r+0x4e>
 8003532:	fb0c 3202 	mla	r2, ip, r2, r3
 8003536:	460c      	mov	r4, r1
 8003538:	2001      	movs	r0, #1
 800353a:	e7a5      	b.n	8003488 <_svfiprintf_r+0xd4>
 800353c:	2300      	movs	r3, #0
 800353e:	3401      	adds	r4, #1
 8003540:	9305      	str	r3, [sp, #20]
 8003542:	4619      	mov	r1, r3
 8003544:	f04f 0c0a 	mov.w	ip, #10
 8003548:	4620      	mov	r0, r4
 800354a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800354e:	3a30      	subs	r2, #48	; 0x30
 8003550:	2a09      	cmp	r2, #9
 8003552:	d903      	bls.n	800355c <_svfiprintf_r+0x1a8>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0c5      	beq.n	80034e4 <_svfiprintf_r+0x130>
 8003558:	9105      	str	r1, [sp, #20]
 800355a:	e7c3      	b.n	80034e4 <_svfiprintf_r+0x130>
 800355c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003560:	4604      	mov	r4, r0
 8003562:	2301      	movs	r3, #1
 8003564:	e7f0      	b.n	8003548 <_svfiprintf_r+0x194>
 8003566:	ab03      	add	r3, sp, #12
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	462a      	mov	r2, r5
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <_svfiprintf_r+0x1f8>)
 800356e:	a904      	add	r1, sp, #16
 8003570:	4638      	mov	r0, r7
 8003572:	f3af 8000 	nop.w
 8003576:	1c42      	adds	r2, r0, #1
 8003578:	4606      	mov	r6, r0
 800357a:	d1d6      	bne.n	800352a <_svfiprintf_r+0x176>
 800357c:	89ab      	ldrh	r3, [r5, #12]
 800357e:	065b      	lsls	r3, r3, #25
 8003580:	f53f af2c 	bmi.w	80033dc <_svfiprintf_r+0x28>
 8003584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003586:	b01d      	add	sp, #116	; 0x74
 8003588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800358c:	ab03      	add	r3, sp, #12
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	462a      	mov	r2, r5
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <_svfiprintf_r+0x1f8>)
 8003594:	a904      	add	r1, sp, #16
 8003596:	4638      	mov	r0, r7
 8003598:	f000 f9d4 	bl	8003944 <_printf_i>
 800359c:	e7eb      	b.n	8003576 <_svfiprintf_r+0x1c2>
 800359e:	bf00      	nop
 80035a0:	08004544 	.word	0x08004544
 80035a4:	0800454e 	.word	0x0800454e
 80035a8:	00000000 	.word	0x00000000
 80035ac:	080032fd 	.word	0x080032fd
 80035b0:	0800454a 	.word	0x0800454a

080035b4 <__sfputc_r>:
 80035b4:	6893      	ldr	r3, [r2, #8]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	b410      	push	{r4}
 80035bc:	6093      	str	r3, [r2, #8]
 80035be:	da08      	bge.n	80035d2 <__sfputc_r+0x1e>
 80035c0:	6994      	ldr	r4, [r2, #24]
 80035c2:	42a3      	cmp	r3, r4
 80035c4:	db01      	blt.n	80035ca <__sfputc_r+0x16>
 80035c6:	290a      	cmp	r1, #10
 80035c8:	d103      	bne.n	80035d2 <__sfputc_r+0x1e>
 80035ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035ce:	f000 bb33 	b.w	8003c38 <__swbuf_r>
 80035d2:	6813      	ldr	r3, [r2, #0]
 80035d4:	1c58      	adds	r0, r3, #1
 80035d6:	6010      	str	r0, [r2, #0]
 80035d8:	7019      	strb	r1, [r3, #0]
 80035da:	4608      	mov	r0, r1
 80035dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <__sfputs_r>:
 80035e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e4:	4606      	mov	r6, r0
 80035e6:	460f      	mov	r7, r1
 80035e8:	4614      	mov	r4, r2
 80035ea:	18d5      	adds	r5, r2, r3
 80035ec:	42ac      	cmp	r4, r5
 80035ee:	d101      	bne.n	80035f4 <__sfputs_r+0x12>
 80035f0:	2000      	movs	r0, #0
 80035f2:	e007      	b.n	8003604 <__sfputs_r+0x22>
 80035f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035f8:	463a      	mov	r2, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff ffda 	bl	80035b4 <__sfputc_r>
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d1f3      	bne.n	80035ec <__sfputs_r+0xa>
 8003604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003608 <_vfiprintf_r>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	460d      	mov	r5, r1
 800360e:	b09d      	sub	sp, #116	; 0x74
 8003610:	4614      	mov	r4, r2
 8003612:	4698      	mov	r8, r3
 8003614:	4606      	mov	r6, r0
 8003616:	b118      	cbz	r0, 8003620 <_vfiprintf_r+0x18>
 8003618:	6983      	ldr	r3, [r0, #24]
 800361a:	b90b      	cbnz	r3, 8003620 <_vfiprintf_r+0x18>
 800361c:	f7ff fd3a 	bl	8003094 <__sinit>
 8003620:	4b89      	ldr	r3, [pc, #548]	; (8003848 <_vfiprintf_r+0x240>)
 8003622:	429d      	cmp	r5, r3
 8003624:	d11b      	bne.n	800365e <_vfiprintf_r+0x56>
 8003626:	6875      	ldr	r5, [r6, #4]
 8003628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800362a:	07d9      	lsls	r1, r3, #31
 800362c:	d405      	bmi.n	800363a <_vfiprintf_r+0x32>
 800362e:	89ab      	ldrh	r3, [r5, #12]
 8003630:	059a      	lsls	r2, r3, #22
 8003632:	d402      	bmi.n	800363a <_vfiprintf_r+0x32>
 8003634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003636:	f7ff fdcb 	bl	80031d0 <__retarget_lock_acquire_recursive>
 800363a:	89ab      	ldrh	r3, [r5, #12]
 800363c:	071b      	lsls	r3, r3, #28
 800363e:	d501      	bpl.n	8003644 <_vfiprintf_r+0x3c>
 8003640:	692b      	ldr	r3, [r5, #16]
 8003642:	b9eb      	cbnz	r3, 8003680 <_vfiprintf_r+0x78>
 8003644:	4629      	mov	r1, r5
 8003646:	4630      	mov	r0, r6
 8003648:	f000 fb5a 	bl	8003d00 <__swsetup_r>
 800364c:	b1c0      	cbz	r0, 8003680 <_vfiprintf_r+0x78>
 800364e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003650:	07dc      	lsls	r4, r3, #31
 8003652:	d50e      	bpl.n	8003672 <_vfiprintf_r+0x6a>
 8003654:	f04f 30ff 	mov.w	r0, #4294967295
 8003658:	b01d      	add	sp, #116	; 0x74
 800365a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <_vfiprintf_r+0x244>)
 8003660:	429d      	cmp	r5, r3
 8003662:	d101      	bne.n	8003668 <_vfiprintf_r+0x60>
 8003664:	68b5      	ldr	r5, [r6, #8]
 8003666:	e7df      	b.n	8003628 <_vfiprintf_r+0x20>
 8003668:	4b79      	ldr	r3, [pc, #484]	; (8003850 <_vfiprintf_r+0x248>)
 800366a:	429d      	cmp	r5, r3
 800366c:	bf08      	it	eq
 800366e:	68f5      	ldreq	r5, [r6, #12]
 8003670:	e7da      	b.n	8003628 <_vfiprintf_r+0x20>
 8003672:	89ab      	ldrh	r3, [r5, #12]
 8003674:	0598      	lsls	r0, r3, #22
 8003676:	d4ed      	bmi.n	8003654 <_vfiprintf_r+0x4c>
 8003678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800367a:	f7ff fdaa 	bl	80031d2 <__retarget_lock_release_recursive>
 800367e:	e7e9      	b.n	8003654 <_vfiprintf_r+0x4c>
 8003680:	2300      	movs	r3, #0
 8003682:	9309      	str	r3, [sp, #36]	; 0x24
 8003684:	2320      	movs	r3, #32
 8003686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368a:	f8cd 800c 	str.w	r8, [sp, #12]
 800368e:	2330      	movs	r3, #48	; 0x30
 8003690:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003854 <_vfiprintf_r+0x24c>
 8003694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003698:	f04f 0901 	mov.w	r9, #1
 800369c:	4623      	mov	r3, r4
 800369e:	469a      	mov	sl, r3
 80036a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a4:	b10a      	cbz	r2, 80036aa <_vfiprintf_r+0xa2>
 80036a6:	2a25      	cmp	r2, #37	; 0x25
 80036a8:	d1f9      	bne.n	800369e <_vfiprintf_r+0x96>
 80036aa:	ebba 0b04 	subs.w	fp, sl, r4
 80036ae:	d00b      	beq.n	80036c8 <_vfiprintf_r+0xc0>
 80036b0:	465b      	mov	r3, fp
 80036b2:	4622      	mov	r2, r4
 80036b4:	4629      	mov	r1, r5
 80036b6:	4630      	mov	r0, r6
 80036b8:	f7ff ff93 	bl	80035e2 <__sfputs_r>
 80036bc:	3001      	adds	r0, #1
 80036be:	f000 80aa 	beq.w	8003816 <_vfiprintf_r+0x20e>
 80036c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c4:	445a      	add	r2, fp
 80036c6:	9209      	str	r2, [sp, #36]	; 0x24
 80036c8:	f89a 3000 	ldrb.w	r3, [sl]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 80a2 	beq.w	8003816 <_vfiprintf_r+0x20e>
 80036d2:	2300      	movs	r3, #0
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295
 80036d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036dc:	f10a 0a01 	add.w	sl, sl, #1
 80036e0:	9304      	str	r3, [sp, #16]
 80036e2:	9307      	str	r3, [sp, #28]
 80036e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e8:	931a      	str	r3, [sp, #104]	; 0x68
 80036ea:	4654      	mov	r4, sl
 80036ec:	2205      	movs	r2, #5
 80036ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f2:	4858      	ldr	r0, [pc, #352]	; (8003854 <_vfiprintf_r+0x24c>)
 80036f4:	f7fc fd8c 	bl	8000210 <memchr>
 80036f8:	9a04      	ldr	r2, [sp, #16]
 80036fa:	b9d8      	cbnz	r0, 8003734 <_vfiprintf_r+0x12c>
 80036fc:	06d1      	lsls	r1, r2, #27
 80036fe:	bf44      	itt	mi
 8003700:	2320      	movmi	r3, #32
 8003702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003706:	0713      	lsls	r3, r2, #28
 8003708:	bf44      	itt	mi
 800370a:	232b      	movmi	r3, #43	; 0x2b
 800370c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003710:	f89a 3000 	ldrb.w	r3, [sl]
 8003714:	2b2a      	cmp	r3, #42	; 0x2a
 8003716:	d015      	beq.n	8003744 <_vfiprintf_r+0x13c>
 8003718:	9a07      	ldr	r2, [sp, #28]
 800371a:	4654      	mov	r4, sl
 800371c:	2000      	movs	r0, #0
 800371e:	f04f 0c0a 	mov.w	ip, #10
 8003722:	4621      	mov	r1, r4
 8003724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003728:	3b30      	subs	r3, #48	; 0x30
 800372a:	2b09      	cmp	r3, #9
 800372c:	d94e      	bls.n	80037cc <_vfiprintf_r+0x1c4>
 800372e:	b1b0      	cbz	r0, 800375e <_vfiprintf_r+0x156>
 8003730:	9207      	str	r2, [sp, #28]
 8003732:	e014      	b.n	800375e <_vfiprintf_r+0x156>
 8003734:	eba0 0308 	sub.w	r3, r0, r8
 8003738:	fa09 f303 	lsl.w	r3, r9, r3
 800373c:	4313      	orrs	r3, r2
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	46a2      	mov	sl, r4
 8003742:	e7d2      	b.n	80036ea <_vfiprintf_r+0xe2>
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	1d19      	adds	r1, r3, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	9103      	str	r1, [sp, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	bfbb      	ittet	lt
 8003750:	425b      	neglt	r3, r3
 8003752:	f042 0202 	orrlt.w	r2, r2, #2
 8003756:	9307      	strge	r3, [sp, #28]
 8003758:	9307      	strlt	r3, [sp, #28]
 800375a:	bfb8      	it	lt
 800375c:	9204      	strlt	r2, [sp, #16]
 800375e:	7823      	ldrb	r3, [r4, #0]
 8003760:	2b2e      	cmp	r3, #46	; 0x2e
 8003762:	d10c      	bne.n	800377e <_vfiprintf_r+0x176>
 8003764:	7863      	ldrb	r3, [r4, #1]
 8003766:	2b2a      	cmp	r3, #42	; 0x2a
 8003768:	d135      	bne.n	80037d6 <_vfiprintf_r+0x1ce>
 800376a:	9b03      	ldr	r3, [sp, #12]
 800376c:	1d1a      	adds	r2, r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	9203      	str	r2, [sp, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	bfb8      	it	lt
 8003776:	f04f 33ff 	movlt.w	r3, #4294967295
 800377a:	3402      	adds	r4, #2
 800377c:	9305      	str	r3, [sp, #20]
 800377e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003864 <_vfiprintf_r+0x25c>
 8003782:	7821      	ldrb	r1, [r4, #0]
 8003784:	2203      	movs	r2, #3
 8003786:	4650      	mov	r0, sl
 8003788:	f7fc fd42 	bl	8000210 <memchr>
 800378c:	b140      	cbz	r0, 80037a0 <_vfiprintf_r+0x198>
 800378e:	2340      	movs	r3, #64	; 0x40
 8003790:	eba0 000a 	sub.w	r0, r0, sl
 8003794:	fa03 f000 	lsl.w	r0, r3, r0
 8003798:	9b04      	ldr	r3, [sp, #16]
 800379a:	4303      	orrs	r3, r0
 800379c:	3401      	adds	r4, #1
 800379e:	9304      	str	r3, [sp, #16]
 80037a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a4:	482c      	ldr	r0, [pc, #176]	; (8003858 <_vfiprintf_r+0x250>)
 80037a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037aa:	2206      	movs	r2, #6
 80037ac:	f7fc fd30 	bl	8000210 <memchr>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d03f      	beq.n	8003834 <_vfiprintf_r+0x22c>
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <_vfiprintf_r+0x254>)
 80037b6:	bb1b      	cbnz	r3, 8003800 <_vfiprintf_r+0x1f8>
 80037b8:	9b03      	ldr	r3, [sp, #12]
 80037ba:	3307      	adds	r3, #7
 80037bc:	f023 0307 	bic.w	r3, r3, #7
 80037c0:	3308      	adds	r3, #8
 80037c2:	9303      	str	r3, [sp, #12]
 80037c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c6:	443b      	add	r3, r7
 80037c8:	9309      	str	r3, [sp, #36]	; 0x24
 80037ca:	e767      	b.n	800369c <_vfiprintf_r+0x94>
 80037cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d0:	460c      	mov	r4, r1
 80037d2:	2001      	movs	r0, #1
 80037d4:	e7a5      	b.n	8003722 <_vfiprintf_r+0x11a>
 80037d6:	2300      	movs	r3, #0
 80037d8:	3401      	adds	r4, #1
 80037da:	9305      	str	r3, [sp, #20]
 80037dc:	4619      	mov	r1, r3
 80037de:	f04f 0c0a 	mov.w	ip, #10
 80037e2:	4620      	mov	r0, r4
 80037e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e8:	3a30      	subs	r2, #48	; 0x30
 80037ea:	2a09      	cmp	r2, #9
 80037ec:	d903      	bls.n	80037f6 <_vfiprintf_r+0x1ee>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0c5      	beq.n	800377e <_vfiprintf_r+0x176>
 80037f2:	9105      	str	r1, [sp, #20]
 80037f4:	e7c3      	b.n	800377e <_vfiprintf_r+0x176>
 80037f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037fa:	4604      	mov	r4, r0
 80037fc:	2301      	movs	r3, #1
 80037fe:	e7f0      	b.n	80037e2 <_vfiprintf_r+0x1da>
 8003800:	ab03      	add	r3, sp, #12
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	462a      	mov	r2, r5
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <_vfiprintf_r+0x258>)
 8003808:	a904      	add	r1, sp, #16
 800380a:	4630      	mov	r0, r6
 800380c:	f3af 8000 	nop.w
 8003810:	4607      	mov	r7, r0
 8003812:	1c78      	adds	r0, r7, #1
 8003814:	d1d6      	bne.n	80037c4 <_vfiprintf_r+0x1bc>
 8003816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003818:	07d9      	lsls	r1, r3, #31
 800381a:	d405      	bmi.n	8003828 <_vfiprintf_r+0x220>
 800381c:	89ab      	ldrh	r3, [r5, #12]
 800381e:	059a      	lsls	r2, r3, #22
 8003820:	d402      	bmi.n	8003828 <_vfiprintf_r+0x220>
 8003822:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003824:	f7ff fcd5 	bl	80031d2 <__retarget_lock_release_recursive>
 8003828:	89ab      	ldrh	r3, [r5, #12]
 800382a:	065b      	lsls	r3, r3, #25
 800382c:	f53f af12 	bmi.w	8003654 <_vfiprintf_r+0x4c>
 8003830:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003832:	e711      	b.n	8003658 <_vfiprintf_r+0x50>
 8003834:	ab03      	add	r3, sp, #12
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	462a      	mov	r2, r5
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <_vfiprintf_r+0x258>)
 800383c:	a904      	add	r1, sp, #16
 800383e:	4630      	mov	r0, r6
 8003840:	f000 f880 	bl	8003944 <_printf_i>
 8003844:	e7e4      	b.n	8003810 <_vfiprintf_r+0x208>
 8003846:	bf00      	nop
 8003848:	08004504 	.word	0x08004504
 800384c:	08004524 	.word	0x08004524
 8003850:	080044e4 	.word	0x080044e4
 8003854:	08004544 	.word	0x08004544
 8003858:	0800454e 	.word	0x0800454e
 800385c:	00000000 	.word	0x00000000
 8003860:	080035e3 	.word	0x080035e3
 8003864:	0800454a 	.word	0x0800454a

08003868 <_printf_common>:
 8003868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800386c:	4616      	mov	r6, r2
 800386e:	4699      	mov	r9, r3
 8003870:	688a      	ldr	r2, [r1, #8]
 8003872:	690b      	ldr	r3, [r1, #16]
 8003874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003878:	4293      	cmp	r3, r2
 800387a:	bfb8      	it	lt
 800387c:	4613      	movlt	r3, r2
 800387e:	6033      	str	r3, [r6, #0]
 8003880:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003884:	4607      	mov	r7, r0
 8003886:	460c      	mov	r4, r1
 8003888:	b10a      	cbz	r2, 800388e <_printf_common+0x26>
 800388a:	3301      	adds	r3, #1
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	6833      	ldrmi	r3, [r6, #0]
 8003896:	3302      	addmi	r3, #2
 8003898:	6033      	strmi	r3, [r6, #0]
 800389a:	6825      	ldr	r5, [r4, #0]
 800389c:	f015 0506 	ands.w	r5, r5, #6
 80038a0:	d106      	bne.n	80038b0 <_printf_common+0x48>
 80038a2:	f104 0a19 	add.w	sl, r4, #25
 80038a6:	68e3      	ldr	r3, [r4, #12]
 80038a8:	6832      	ldr	r2, [r6, #0]
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	42ab      	cmp	r3, r5
 80038ae:	dc26      	bgt.n	80038fe <_printf_common+0x96>
 80038b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b4:	1e13      	subs	r3, r2, #0
 80038b6:	6822      	ldr	r2, [r4, #0]
 80038b8:	bf18      	it	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d42b      	bmi.n	8003918 <_printf_common+0xb0>
 80038c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	47c0      	blx	r8
 80038ca:	3001      	adds	r0, #1
 80038cc:	d01e      	beq.n	800390c <_printf_common+0xa4>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	68e5      	ldr	r5, [r4, #12]
 80038d2:	6832      	ldr	r2, [r6, #0]
 80038d4:	f003 0306 	and.w	r3, r3, #6
 80038d8:	2b04      	cmp	r3, #4
 80038da:	bf08      	it	eq
 80038dc:	1aad      	subeq	r5, r5, r2
 80038de:	68a3      	ldr	r3, [r4, #8]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	bf0c      	ite	eq
 80038e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e8:	2500      	movne	r5, #0
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bfc4      	itt	gt
 80038ee:	1a9b      	subgt	r3, r3, r2
 80038f0:	18ed      	addgt	r5, r5, r3
 80038f2:	2600      	movs	r6, #0
 80038f4:	341a      	adds	r4, #26
 80038f6:	42b5      	cmp	r5, r6
 80038f8:	d11a      	bne.n	8003930 <_printf_common+0xc8>
 80038fa:	2000      	movs	r0, #0
 80038fc:	e008      	b.n	8003910 <_printf_common+0xa8>
 80038fe:	2301      	movs	r3, #1
 8003900:	4652      	mov	r2, sl
 8003902:	4649      	mov	r1, r9
 8003904:	4638      	mov	r0, r7
 8003906:	47c0      	blx	r8
 8003908:	3001      	adds	r0, #1
 800390a:	d103      	bne.n	8003914 <_printf_common+0xac>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	3501      	adds	r5, #1
 8003916:	e7c6      	b.n	80038a6 <_printf_common+0x3e>
 8003918:	18e1      	adds	r1, r4, r3
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	2030      	movs	r0, #48	; 0x30
 800391e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003922:	4422      	add	r2, r4
 8003924:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003928:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800392c:	3302      	adds	r3, #2
 800392e:	e7c7      	b.n	80038c0 <_printf_common+0x58>
 8003930:	2301      	movs	r3, #1
 8003932:	4622      	mov	r2, r4
 8003934:	4649      	mov	r1, r9
 8003936:	4638      	mov	r0, r7
 8003938:	47c0      	blx	r8
 800393a:	3001      	adds	r0, #1
 800393c:	d0e6      	beq.n	800390c <_printf_common+0xa4>
 800393e:	3601      	adds	r6, #1
 8003940:	e7d9      	b.n	80038f6 <_printf_common+0x8e>
	...

08003944 <_printf_i>:
 8003944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	7e0f      	ldrb	r7, [r1, #24]
 800394a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800394c:	2f78      	cmp	r7, #120	; 0x78
 800394e:	4691      	mov	r9, r2
 8003950:	4680      	mov	r8, r0
 8003952:	460c      	mov	r4, r1
 8003954:	469a      	mov	sl, r3
 8003956:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800395a:	d807      	bhi.n	800396c <_printf_i+0x28>
 800395c:	2f62      	cmp	r7, #98	; 0x62
 800395e:	d80a      	bhi.n	8003976 <_printf_i+0x32>
 8003960:	2f00      	cmp	r7, #0
 8003962:	f000 80d8 	beq.w	8003b16 <_printf_i+0x1d2>
 8003966:	2f58      	cmp	r7, #88	; 0x58
 8003968:	f000 80a3 	beq.w	8003ab2 <_printf_i+0x16e>
 800396c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003970:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003974:	e03a      	b.n	80039ec <_printf_i+0xa8>
 8003976:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397a:	2b15      	cmp	r3, #21
 800397c:	d8f6      	bhi.n	800396c <_printf_i+0x28>
 800397e:	a101      	add	r1, pc, #4	; (adr r1, 8003984 <_printf_i+0x40>)
 8003980:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003984:	080039dd 	.word	0x080039dd
 8003988:	080039f1 	.word	0x080039f1
 800398c:	0800396d 	.word	0x0800396d
 8003990:	0800396d 	.word	0x0800396d
 8003994:	0800396d 	.word	0x0800396d
 8003998:	0800396d 	.word	0x0800396d
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	0800396d 	.word	0x0800396d
 80039a4:	0800396d 	.word	0x0800396d
 80039a8:	0800396d 	.word	0x0800396d
 80039ac:	0800396d 	.word	0x0800396d
 80039b0:	08003afd 	.word	0x08003afd
 80039b4:	08003a21 	.word	0x08003a21
 80039b8:	08003adf 	.word	0x08003adf
 80039bc:	0800396d 	.word	0x0800396d
 80039c0:	0800396d 	.word	0x0800396d
 80039c4:	08003b1f 	.word	0x08003b1f
 80039c8:	0800396d 	.word	0x0800396d
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	0800396d 	.word	0x0800396d
 80039d4:	0800396d 	.word	0x0800396d
 80039d8:	08003ae7 	.word	0x08003ae7
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	602a      	str	r2, [r5, #0]
 80039e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0a3      	b.n	8003b38 <_printf_i+0x1f4>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	6829      	ldr	r1, [r5, #0]
 80039f4:	0606      	lsls	r6, r0, #24
 80039f6:	f101 0304 	add.w	r3, r1, #4
 80039fa:	d50a      	bpl.n	8003a12 <_printf_i+0xce>
 80039fc:	680e      	ldr	r6, [r1, #0]
 80039fe:	602b      	str	r3, [r5, #0]
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	da03      	bge.n	8003a0c <_printf_i+0xc8>
 8003a04:	232d      	movs	r3, #45	; 0x2d
 8003a06:	4276      	negs	r6, r6
 8003a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a0c:	485e      	ldr	r0, [pc, #376]	; (8003b88 <_printf_i+0x244>)
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e019      	b.n	8003a46 <_printf_i+0x102>
 8003a12:	680e      	ldr	r6, [r1, #0]
 8003a14:	602b      	str	r3, [r5, #0]
 8003a16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a1a:	bf18      	it	ne
 8003a1c:	b236      	sxthne	r6, r6
 8003a1e:	e7ef      	b.n	8003a00 <_printf_i+0xbc>
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	6820      	ldr	r0, [r4, #0]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	6029      	str	r1, [r5, #0]
 8003a28:	0601      	lsls	r1, r0, #24
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0xec>
 8003a2c:	681e      	ldr	r6, [r3, #0]
 8003a2e:	e002      	b.n	8003a36 <_printf_i+0xf2>
 8003a30:	0646      	lsls	r6, r0, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0xe8>
 8003a34:	881e      	ldrh	r6, [r3, #0]
 8003a36:	4854      	ldr	r0, [pc, #336]	; (8003b88 <_printf_i+0x244>)
 8003a38:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2308      	moveq	r3, #8
 8003a3e:	230a      	movne	r3, #10
 8003a40:	2100      	movs	r1, #0
 8003a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a46:	6865      	ldr	r5, [r4, #4]
 8003a48:	60a5      	str	r5, [r4, #8]
 8003a4a:	2d00      	cmp	r5, #0
 8003a4c:	bfa2      	ittt	ge
 8003a4e:	6821      	ldrge	r1, [r4, #0]
 8003a50:	f021 0104 	bicge.w	r1, r1, #4
 8003a54:	6021      	strge	r1, [r4, #0]
 8003a56:	b90e      	cbnz	r6, 8003a5c <_printf_i+0x118>
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	d04d      	beq.n	8003af8 <_printf_i+0x1b4>
 8003a5c:	4615      	mov	r5, r2
 8003a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a62:	fb03 6711 	mls	r7, r3, r1, r6
 8003a66:	5dc7      	ldrb	r7, [r0, r7]
 8003a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	42bb      	cmp	r3, r7
 8003a70:	460e      	mov	r6, r1
 8003a72:	d9f4      	bls.n	8003a5e <_printf_i+0x11a>
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d10b      	bne.n	8003a90 <_printf_i+0x14c>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	07de      	lsls	r6, r3, #31
 8003a7c:	d508      	bpl.n	8003a90 <_printf_i+0x14c>
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	6861      	ldr	r1, [r4, #4]
 8003a82:	4299      	cmp	r1, r3
 8003a84:	bfde      	ittt	le
 8003a86:	2330      	movle	r3, #48	; 0x30
 8003a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a90:	1b52      	subs	r2, r2, r5
 8003a92:	6122      	str	r2, [r4, #16]
 8003a94:	f8cd a000 	str.w	sl, [sp]
 8003a98:	464b      	mov	r3, r9
 8003a9a:	aa03      	add	r2, sp, #12
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	f7ff fee2 	bl	8003868 <_printf_common>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	d14c      	bne.n	8003b42 <_printf_i+0x1fe>
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	b004      	add	sp, #16
 8003aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab2:	4835      	ldr	r0, [pc, #212]	; (8003b88 <_printf_i+0x244>)
 8003ab4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ab8:	6829      	ldr	r1, [r5, #0]
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ac0:	6029      	str	r1, [r5, #0]
 8003ac2:	061d      	lsls	r5, r3, #24
 8003ac4:	d514      	bpl.n	8003af0 <_printf_i+0x1ac>
 8003ac6:	07df      	lsls	r7, r3, #31
 8003ac8:	bf44      	itt	mi
 8003aca:	f043 0320 	orrmi.w	r3, r3, #32
 8003ace:	6023      	strmi	r3, [r4, #0]
 8003ad0:	b91e      	cbnz	r6, 8003ada <_printf_i+0x196>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	f023 0320 	bic.w	r3, r3, #32
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	2310      	movs	r3, #16
 8003adc:	e7b0      	b.n	8003a40 <_printf_i+0xfc>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	2378      	movs	r3, #120	; 0x78
 8003ae8:	4828      	ldr	r0, [pc, #160]	; (8003b8c <_printf_i+0x248>)
 8003aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aee:	e7e3      	b.n	8003ab8 <_printf_i+0x174>
 8003af0:	0659      	lsls	r1, r3, #25
 8003af2:	bf48      	it	mi
 8003af4:	b2b6      	uxthmi	r6, r6
 8003af6:	e7e6      	b.n	8003ac6 <_printf_i+0x182>
 8003af8:	4615      	mov	r5, r2
 8003afa:	e7bb      	b.n	8003a74 <_printf_i+0x130>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	6826      	ldr	r6, [r4, #0]
 8003b00:	6961      	ldr	r1, [r4, #20]
 8003b02:	1d18      	adds	r0, r3, #4
 8003b04:	6028      	str	r0, [r5, #0]
 8003b06:	0635      	lsls	r5, r6, #24
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	d501      	bpl.n	8003b10 <_printf_i+0x1cc>
 8003b0c:	6019      	str	r1, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <_printf_i+0x1d2>
 8003b10:	0670      	lsls	r0, r6, #25
 8003b12:	d5fb      	bpl.n	8003b0c <_printf_i+0x1c8>
 8003b14:	8019      	strh	r1, [r3, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	6123      	str	r3, [r4, #16]
 8003b1a:	4615      	mov	r5, r2
 8003b1c:	e7ba      	b.n	8003a94 <_printf_i+0x150>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	681d      	ldr	r5, [r3, #0]
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fc fb70 	bl	8000210 <memchr>
 8003b30:	b108      	cbz	r0, 8003b36 <_printf_i+0x1f2>
 8003b32:	1b40      	subs	r0, r0, r5
 8003b34:	6060      	str	r0, [r4, #4]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6123      	str	r3, [r4, #16]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b40:	e7a8      	b.n	8003a94 <_printf_i+0x150>
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	462a      	mov	r2, r5
 8003b46:	4649      	mov	r1, r9
 8003b48:	4640      	mov	r0, r8
 8003b4a:	47d0      	blx	sl
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d0ab      	beq.n	8003aa8 <_printf_i+0x164>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	079b      	lsls	r3, r3, #30
 8003b54:	d413      	bmi.n	8003b7e <_printf_i+0x23a>
 8003b56:	68e0      	ldr	r0, [r4, #12]
 8003b58:	9b03      	ldr	r3, [sp, #12]
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	bfb8      	it	lt
 8003b5e:	4618      	movlt	r0, r3
 8003b60:	e7a4      	b.n	8003aac <_printf_i+0x168>
 8003b62:	2301      	movs	r3, #1
 8003b64:	4632      	mov	r2, r6
 8003b66:	4649      	mov	r1, r9
 8003b68:	4640      	mov	r0, r8
 8003b6a:	47d0      	blx	sl
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d09b      	beq.n	8003aa8 <_printf_i+0x164>
 8003b70:	3501      	adds	r5, #1
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	9903      	ldr	r1, [sp, #12]
 8003b76:	1a5b      	subs	r3, r3, r1
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dcf2      	bgt.n	8003b62 <_printf_i+0x21e>
 8003b7c:	e7eb      	b.n	8003b56 <_printf_i+0x212>
 8003b7e:	2500      	movs	r5, #0
 8003b80:	f104 0619 	add.w	r6, r4, #25
 8003b84:	e7f5      	b.n	8003b72 <_printf_i+0x22e>
 8003b86:	bf00      	nop
 8003b88:	08004555 	.word	0x08004555
 8003b8c:	08004566 	.word	0x08004566

08003b90 <_sbrk_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d06      	ldr	r5, [pc, #24]	; (8003bac <_sbrk_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f7fc ffe0 	bl	8000b60 <_sbrk>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_sbrk_r+0x1a>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_sbrk_r+0x1a>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	2000010c 	.word	0x2000010c

08003bb0 <__sread>:
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb8:	f000 fb0a 	bl	80041d0 <_read_r>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	bfab      	itete	ge
 8003bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc4:	181b      	addge	r3, r3, r0
 8003bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bca:	bfac      	ite	ge
 8003bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bce:	81a3      	strhlt	r3, [r4, #12]
 8003bd0:	bd10      	pop	{r4, pc}

08003bd2 <__swrite>:
 8003bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd6:	461f      	mov	r7, r3
 8003bd8:	898b      	ldrh	r3, [r1, #12]
 8003bda:	05db      	lsls	r3, r3, #23
 8003bdc:	4605      	mov	r5, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	4616      	mov	r6, r2
 8003be2:	d505      	bpl.n	8003bf0 <__swrite+0x1e>
 8003be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be8:	2302      	movs	r3, #2
 8003bea:	2200      	movs	r2, #0
 8003bec:	f000 f9c8 	bl	8003f80 <_lseek_r>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	4632      	mov	r2, r6
 8003bfe:	463b      	mov	r3, r7
 8003c00:	4628      	mov	r0, r5
 8003c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c06:	f000 b869 	b.w	8003cdc <_write_r>

08003c0a <__sseek>:
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c12:	f000 f9b5 	bl	8003f80 <_lseek_r>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	bf15      	itete	ne
 8003c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c26:	81a3      	strheq	r3, [r4, #12]
 8003c28:	bf18      	it	ne
 8003c2a:	81a3      	strhne	r3, [r4, #12]
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <__sclose>:
 8003c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c32:	f000 b8d3 	b.w	8003ddc <_close_r>
	...

08003c38 <__swbuf_r>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	460e      	mov	r6, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	4605      	mov	r5, r0
 8003c40:	b118      	cbz	r0, 8003c4a <__swbuf_r+0x12>
 8003c42:	6983      	ldr	r3, [r0, #24]
 8003c44:	b90b      	cbnz	r3, 8003c4a <__swbuf_r+0x12>
 8003c46:	f7ff fa25 	bl	8003094 <__sinit>
 8003c4a:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <__swbuf_r+0x98>)
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	d12b      	bne.n	8003ca8 <__swbuf_r+0x70>
 8003c50:	686c      	ldr	r4, [r5, #4]
 8003c52:	69a3      	ldr	r3, [r4, #24]
 8003c54:	60a3      	str	r3, [r4, #8]
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	071a      	lsls	r2, r3, #28
 8003c5a:	d52f      	bpl.n	8003cbc <__swbuf_r+0x84>
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	b36b      	cbz	r3, 8003cbc <__swbuf_r+0x84>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	1ac0      	subs	r0, r0, r3
 8003c66:	6963      	ldr	r3, [r4, #20]
 8003c68:	b2f6      	uxtb	r6, r6
 8003c6a:	4283      	cmp	r3, r0
 8003c6c:	4637      	mov	r7, r6
 8003c6e:	dc04      	bgt.n	8003c7a <__swbuf_r+0x42>
 8003c70:	4621      	mov	r1, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f948 	bl	8003f08 <_fflush_r>
 8003c78:	bb30      	cbnz	r0, 8003cc8 <__swbuf_r+0x90>
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	60a3      	str	r3, [r4, #8]
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	701e      	strb	r6, [r3, #0]
 8003c88:	6963      	ldr	r3, [r4, #20]
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	4283      	cmp	r3, r0
 8003c8e:	d004      	beq.n	8003c9a <__swbuf_r+0x62>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	07db      	lsls	r3, r3, #31
 8003c94:	d506      	bpl.n	8003ca4 <__swbuf_r+0x6c>
 8003c96:	2e0a      	cmp	r6, #10
 8003c98:	d104      	bne.n	8003ca4 <__swbuf_r+0x6c>
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f000 f933 	bl	8003f08 <_fflush_r>
 8003ca2:	b988      	cbnz	r0, 8003cc8 <__swbuf_r+0x90>
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <__swbuf_r+0x9c>)
 8003caa:	429c      	cmp	r4, r3
 8003cac:	d101      	bne.n	8003cb2 <__swbuf_r+0x7a>
 8003cae:	68ac      	ldr	r4, [r5, #8]
 8003cb0:	e7cf      	b.n	8003c52 <__swbuf_r+0x1a>
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <__swbuf_r+0xa0>)
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	bf08      	it	eq
 8003cb8:	68ec      	ldreq	r4, [r5, #12]
 8003cba:	e7ca      	b.n	8003c52 <__swbuf_r+0x1a>
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 f81e 	bl	8003d00 <__swsetup_r>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d0cb      	beq.n	8003c60 <__swbuf_r+0x28>
 8003cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8003ccc:	e7ea      	b.n	8003ca4 <__swbuf_r+0x6c>
 8003cce:	bf00      	nop
 8003cd0:	08004504 	.word	0x08004504
 8003cd4:	08004524 	.word	0x08004524
 8003cd8:	080044e4 	.word	0x080044e4

08003cdc <_write_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4d07      	ldr	r5, [pc, #28]	; (8003cfc <_write_r+0x20>)
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	602a      	str	r2, [r5, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f7fc fee7 	bl	8000abe <_write>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d102      	bne.n	8003cfa <_write_r+0x1e>
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	b103      	cbz	r3, 8003cfa <_write_r+0x1e>
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	bd38      	pop	{r3, r4, r5, pc}
 8003cfc:	2000010c 	.word	0x2000010c

08003d00 <__swsetup_r>:
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <__swsetup_r+0xcc>)
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	4606      	mov	r6, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	b125      	cbz	r5, 8003d16 <__swsetup_r+0x16>
 8003d0c:	69ab      	ldr	r3, [r5, #24]
 8003d0e:	b913      	cbnz	r3, 8003d16 <__swsetup_r+0x16>
 8003d10:	4628      	mov	r0, r5
 8003d12:	f7ff f9bf 	bl	8003094 <__sinit>
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <__swsetup_r+0xd0>)
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d10f      	bne.n	8003d3c <__swsetup_r+0x3c>
 8003d1c:	686c      	ldr	r4, [r5, #4]
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d24:	0719      	lsls	r1, r3, #28
 8003d26:	d42c      	bmi.n	8003d82 <__swsetup_r+0x82>
 8003d28:	06dd      	lsls	r5, r3, #27
 8003d2a:	d411      	bmi.n	8003d50 <__swsetup_r+0x50>
 8003d2c:	2309      	movs	r3, #9
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d34:	81a3      	strh	r3, [r4, #12]
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e03e      	b.n	8003dba <__swsetup_r+0xba>
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <__swsetup_r+0xd4>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d101      	bne.n	8003d46 <__swsetup_r+0x46>
 8003d42:	68ac      	ldr	r4, [r5, #8]
 8003d44:	e7eb      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <__swsetup_r+0xd8>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	bf08      	it	eq
 8003d4c:	68ec      	ldreq	r4, [r5, #12]
 8003d4e:	e7e6      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d50:	0758      	lsls	r0, r3, #29
 8003d52:	d512      	bpl.n	8003d7a <__swsetup_r+0x7a>
 8003d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d56:	b141      	cbz	r1, 8003d6a <__swsetup_r+0x6a>
 8003d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d002      	beq.n	8003d66 <__swsetup_r+0x66>
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 f9b9 	bl	80040d8 <_free_r>
 8003d66:	2300      	movs	r3, #0
 8003d68:	6363      	str	r3, [r4, #52]	; 0x34
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	2300      	movs	r3, #0
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	b94b      	cbnz	r3, 8003d9a <__swsetup_r+0x9a>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d003      	beq.n	8003d9a <__swsetup_r+0x9a>
 8003d92:	4621      	mov	r1, r4
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f92b 	bl	8003ff0 <__smakebuf_r>
 8003d9a:	89a0      	ldrh	r0, [r4, #12]
 8003d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da0:	f010 0301 	ands.w	r3, r0, #1
 8003da4:	d00a      	beq.n	8003dbc <__swsetup_r+0xbc>
 8003da6:	2300      	movs	r3, #0
 8003da8:	60a3      	str	r3, [r4, #8]
 8003daa:	6963      	ldr	r3, [r4, #20]
 8003dac:	425b      	negs	r3, r3
 8003dae:	61a3      	str	r3, [r4, #24]
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	b943      	cbnz	r3, 8003dc6 <__swsetup_r+0xc6>
 8003db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003db8:	d1ba      	bne.n	8003d30 <__swsetup_r+0x30>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	0781      	lsls	r1, r0, #30
 8003dbe:	bf58      	it	pl
 8003dc0:	6963      	ldrpl	r3, [r4, #20]
 8003dc2:	60a3      	str	r3, [r4, #8]
 8003dc4:	e7f4      	b.n	8003db0 <__swsetup_r+0xb0>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e7f7      	b.n	8003dba <__swsetup_r+0xba>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	08004504 	.word	0x08004504
 8003dd4:	08004524 	.word	0x08004524
 8003dd8:	080044e4 	.word	0x080044e4

08003ddc <_close_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4d06      	ldr	r5, [pc, #24]	; (8003df8 <_close_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4604      	mov	r4, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	f7fc fe85 	bl	8000af6 <_close>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_close_r+0x1a>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_close_r+0x1a>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	2000010c 	.word	0x2000010c

08003dfc <__sflush_r>:
 8003dfc:	898a      	ldrh	r2, [r1, #12]
 8003dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e02:	4605      	mov	r5, r0
 8003e04:	0710      	lsls	r0, r2, #28
 8003e06:	460c      	mov	r4, r1
 8003e08:	d458      	bmi.n	8003ebc <__sflush_r+0xc0>
 8003e0a:	684b      	ldr	r3, [r1, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	dc05      	bgt.n	8003e1c <__sflush_r+0x20>
 8003e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dc02      	bgt.n	8003e1c <__sflush_r+0x20>
 8003e16:	2000      	movs	r0, #0
 8003e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e1e:	2e00      	cmp	r6, #0
 8003e20:	d0f9      	beq.n	8003e16 <__sflush_r+0x1a>
 8003e22:	2300      	movs	r3, #0
 8003e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e28:	682f      	ldr	r7, [r5, #0]
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	d032      	beq.n	8003e94 <__sflush_r+0x98>
 8003e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	075a      	lsls	r2, r3, #29
 8003e34:	d505      	bpl.n	8003e42 <__sflush_r+0x46>
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	1ac0      	subs	r0, r0, r3
 8003e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e3c:	b10b      	cbz	r3, 8003e42 <__sflush_r+0x46>
 8003e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e40:	1ac0      	subs	r0, r0, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	4602      	mov	r2, r0
 8003e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e48:	6a21      	ldr	r1, [r4, #32]
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b0      	blx	r6
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	d106      	bne.n	8003e62 <__sflush_r+0x66>
 8003e54:	6829      	ldr	r1, [r5, #0]
 8003e56:	291d      	cmp	r1, #29
 8003e58:	d82c      	bhi.n	8003eb4 <__sflush_r+0xb8>
 8003e5a:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <__sflush_r+0x108>)
 8003e5c:	40ca      	lsrs	r2, r1
 8003e5e:	07d6      	lsls	r6, r2, #31
 8003e60:	d528      	bpl.n	8003eb4 <__sflush_r+0xb8>
 8003e62:	2200      	movs	r2, #0
 8003e64:	6062      	str	r2, [r4, #4]
 8003e66:	04d9      	lsls	r1, r3, #19
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	6022      	str	r2, [r4, #0]
 8003e6c:	d504      	bpl.n	8003e78 <__sflush_r+0x7c>
 8003e6e:	1c42      	adds	r2, r0, #1
 8003e70:	d101      	bne.n	8003e76 <__sflush_r+0x7a>
 8003e72:	682b      	ldr	r3, [r5, #0]
 8003e74:	b903      	cbnz	r3, 8003e78 <__sflush_r+0x7c>
 8003e76:	6560      	str	r0, [r4, #84]	; 0x54
 8003e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e7a:	602f      	str	r7, [r5, #0]
 8003e7c:	2900      	cmp	r1, #0
 8003e7e:	d0ca      	beq.n	8003e16 <__sflush_r+0x1a>
 8003e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e84:	4299      	cmp	r1, r3
 8003e86:	d002      	beq.n	8003e8e <__sflush_r+0x92>
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 f925 	bl	80040d8 <_free_r>
 8003e8e:	2000      	movs	r0, #0
 8003e90:	6360      	str	r0, [r4, #52]	; 0x34
 8003e92:	e7c1      	b.n	8003e18 <__sflush_r+0x1c>
 8003e94:	6a21      	ldr	r1, [r4, #32]
 8003e96:	2301      	movs	r3, #1
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b0      	blx	r6
 8003e9c:	1c41      	adds	r1, r0, #1
 8003e9e:	d1c7      	bne.n	8003e30 <__sflush_r+0x34>
 8003ea0:	682b      	ldr	r3, [r5, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0c4      	beq.n	8003e30 <__sflush_r+0x34>
 8003ea6:	2b1d      	cmp	r3, #29
 8003ea8:	d001      	beq.n	8003eae <__sflush_r+0xb2>
 8003eaa:	2b16      	cmp	r3, #22
 8003eac:	d101      	bne.n	8003eb2 <__sflush_r+0xb6>
 8003eae:	602f      	str	r7, [r5, #0]
 8003eb0:	e7b1      	b.n	8003e16 <__sflush_r+0x1a>
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	e7ad      	b.n	8003e18 <__sflush_r+0x1c>
 8003ebc:	690f      	ldr	r7, [r1, #16]
 8003ebe:	2f00      	cmp	r7, #0
 8003ec0:	d0a9      	beq.n	8003e16 <__sflush_r+0x1a>
 8003ec2:	0793      	lsls	r3, r2, #30
 8003ec4:	680e      	ldr	r6, [r1, #0]
 8003ec6:	bf08      	it	eq
 8003ec8:	694b      	ldreq	r3, [r1, #20]
 8003eca:	600f      	str	r7, [r1, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	2300      	movne	r3, #0
 8003ed0:	eba6 0807 	sub.w	r8, r6, r7
 8003ed4:	608b      	str	r3, [r1, #8]
 8003ed6:	f1b8 0f00 	cmp.w	r8, #0
 8003eda:	dd9c      	ble.n	8003e16 <__sflush_r+0x1a>
 8003edc:	6a21      	ldr	r1, [r4, #32]
 8003ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	463a      	mov	r2, r7
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	47b0      	blx	r6
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	dc06      	bgt.n	8003efa <__sflush_r+0xfe>
 8003eec:	89a3      	ldrh	r3, [r4, #12]
 8003eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef2:	81a3      	strh	r3, [r4, #12]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e78e      	b.n	8003e18 <__sflush_r+0x1c>
 8003efa:	4407      	add	r7, r0
 8003efc:	eba8 0800 	sub.w	r8, r8, r0
 8003f00:	e7e9      	b.n	8003ed6 <__sflush_r+0xda>
 8003f02:	bf00      	nop
 8003f04:	20400001 	.word	0x20400001

08003f08 <_fflush_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b913      	cbnz	r3, 8003f18 <_fflush_r+0x10>
 8003f12:	2500      	movs	r5, #0
 8003f14:	4628      	mov	r0, r5
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	b118      	cbz	r0, 8003f22 <_fflush_r+0x1a>
 8003f1a:	6983      	ldr	r3, [r0, #24]
 8003f1c:	b90b      	cbnz	r3, 8003f22 <_fflush_r+0x1a>
 8003f1e:	f7ff f8b9 	bl	8003094 <__sinit>
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <_fflush_r+0x6c>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d11b      	bne.n	8003f60 <_fflush_r+0x58>
 8003f28:	686c      	ldr	r4, [r5, #4]
 8003f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ef      	beq.n	8003f12 <_fflush_r+0xa>
 8003f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f34:	07d0      	lsls	r0, r2, #31
 8003f36:	d404      	bmi.n	8003f42 <_fflush_r+0x3a>
 8003f38:	0599      	lsls	r1, r3, #22
 8003f3a:	d402      	bmi.n	8003f42 <_fflush_r+0x3a>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f3e:	f7ff f947 	bl	80031d0 <__retarget_lock_acquire_recursive>
 8003f42:	4628      	mov	r0, r5
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7ff ff59 	bl	8003dfc <__sflush_r>
 8003f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f4c:	07da      	lsls	r2, r3, #31
 8003f4e:	4605      	mov	r5, r0
 8003f50:	d4e0      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	059b      	lsls	r3, r3, #22
 8003f56:	d4dd      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5a:	f7ff f93a 	bl	80031d2 <__retarget_lock_release_recursive>
 8003f5e:	e7d9      	b.n	8003f14 <_fflush_r+0xc>
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <_fflush_r+0x70>)
 8003f62:	429c      	cmp	r4, r3
 8003f64:	d101      	bne.n	8003f6a <_fflush_r+0x62>
 8003f66:	68ac      	ldr	r4, [r5, #8]
 8003f68:	e7df      	b.n	8003f2a <_fflush_r+0x22>
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <_fflush_r+0x74>)
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	bf08      	it	eq
 8003f70:	68ec      	ldreq	r4, [r5, #12]
 8003f72:	e7da      	b.n	8003f2a <_fflush_r+0x22>
 8003f74:	08004504 	.word	0x08004504
 8003f78:	08004524 	.word	0x08004524
 8003f7c:	080044e4 	.word	0x080044e4

08003f80 <_lseek_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_lseek_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fdd8 	bl	8000b44 <_lseek>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_lseek_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_lseek_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	2000010c 	.word	0x2000010c

08003fa4 <__swhatbuf_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fac:	2900      	cmp	r1, #0
 8003fae:	b096      	sub	sp, #88	; 0x58
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	da08      	bge.n	8003fc8 <__swhatbuf_r+0x24>
 8003fb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	602a      	str	r2, [r5, #0]
 8003fbe:	061a      	lsls	r2, r3, #24
 8003fc0:	d410      	bmi.n	8003fe4 <__swhatbuf_r+0x40>
 8003fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc6:	e00e      	b.n	8003fe6 <__swhatbuf_r+0x42>
 8003fc8:	466a      	mov	r2, sp
 8003fca:	f000 f913 	bl	80041f4 <_fstat_r>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	dbf1      	blt.n	8003fb6 <__swhatbuf_r+0x12>
 8003fd2:	9a01      	ldr	r2, [sp, #4]
 8003fd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fdc:	425a      	negs	r2, r3
 8003fde:	415a      	adcs	r2, r3
 8003fe0:	602a      	str	r2, [r5, #0]
 8003fe2:	e7ee      	b.n	8003fc2 <__swhatbuf_r+0x1e>
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	b016      	add	sp, #88	; 0x58
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ff0 <__smakebuf_r>:
 8003ff0:	898b      	ldrh	r3, [r1, #12]
 8003ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ff4:	079d      	lsls	r5, r3, #30
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	d507      	bpl.n	800400c <__smakebuf_r+0x1c>
 8003ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2301      	movs	r3, #1
 8004006:	6163      	str	r3, [r4, #20]
 8004008:	b002      	add	sp, #8
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	ab01      	add	r3, sp, #4
 800400e:	466a      	mov	r2, sp
 8004010:	f7ff ffc8 	bl	8003fa4 <__swhatbuf_r>
 8004014:	9900      	ldr	r1, [sp, #0]
 8004016:	4605      	mov	r5, r0
 8004018:	4630      	mov	r0, r6
 800401a:	f7ff f8fb 	bl	8003214 <_malloc_r>
 800401e:	b948      	cbnz	r0, 8004034 <__smakebuf_r+0x44>
 8004020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004024:	059a      	lsls	r2, r3, #22
 8004026:	d4ef      	bmi.n	8004008 <__smakebuf_r+0x18>
 8004028:	f023 0303 	bic.w	r3, r3, #3
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	e7e3      	b.n	8003ffc <__smakebuf_r+0xc>
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <__smakebuf_r+0x7c>)
 8004036:	62b3      	str	r3, [r6, #40]	; 0x28
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	6020      	str	r0, [r4, #0]
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	9b00      	ldr	r3, [sp, #0]
 8004044:	6163      	str	r3, [r4, #20]
 8004046:	9b01      	ldr	r3, [sp, #4]
 8004048:	6120      	str	r0, [r4, #16]
 800404a:	b15b      	cbz	r3, 8004064 <__smakebuf_r+0x74>
 800404c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004050:	4630      	mov	r0, r6
 8004052:	f000 f8e1 	bl	8004218 <_isatty_r>
 8004056:	b128      	cbz	r0, 8004064 <__smakebuf_r+0x74>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	81a3      	strh	r3, [r4, #12]
 8004064:	89a0      	ldrh	r0, [r4, #12]
 8004066:	4305      	orrs	r5, r0
 8004068:	81a5      	strh	r5, [r4, #12]
 800406a:	e7cd      	b.n	8004008 <__smakebuf_r+0x18>
 800406c:	0800302d 	.word	0x0800302d

08004070 <memcpy>:
 8004070:	440a      	add	r2, r1
 8004072:	4291      	cmp	r1, r2
 8004074:	f100 33ff 	add.w	r3, r0, #4294967295
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	4770      	bx	lr
 800407c:	b510      	push	{r4, lr}
 800407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004086:	4291      	cmp	r1, r2
 8004088:	d1f9      	bne.n	800407e <memcpy+0xe>
 800408a:	bd10      	pop	{r4, pc}

0800408c <memmove>:
 800408c:	4288      	cmp	r0, r1
 800408e:	b510      	push	{r4, lr}
 8004090:	eb01 0402 	add.w	r4, r1, r2
 8004094:	d902      	bls.n	800409c <memmove+0x10>
 8004096:	4284      	cmp	r4, r0
 8004098:	4623      	mov	r3, r4
 800409a:	d807      	bhi.n	80040ac <memmove+0x20>
 800409c:	1e43      	subs	r3, r0, #1
 800409e:	42a1      	cmp	r1, r4
 80040a0:	d008      	beq.n	80040b4 <memmove+0x28>
 80040a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040aa:	e7f8      	b.n	800409e <memmove+0x12>
 80040ac:	4402      	add	r2, r0
 80040ae:	4601      	mov	r1, r0
 80040b0:	428a      	cmp	r2, r1
 80040b2:	d100      	bne.n	80040b6 <memmove+0x2a>
 80040b4:	bd10      	pop	{r4, pc}
 80040b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040be:	e7f7      	b.n	80040b0 <memmove+0x24>

080040c0 <__malloc_lock>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__malloc_lock+0x8>)
 80040c2:	f7ff b885 	b.w	80031d0 <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	20000100 	.word	0x20000100

080040cc <__malloc_unlock>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__malloc_unlock+0x8>)
 80040ce:	f7ff b880 	b.w	80031d2 <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	20000100 	.word	0x20000100

080040d8 <_free_r>:
 80040d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040da:	2900      	cmp	r1, #0
 80040dc:	d044      	beq.n	8004168 <_free_r+0x90>
 80040de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e2:	9001      	str	r0, [sp, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f1a1 0404 	sub.w	r4, r1, #4
 80040ea:	bfb8      	it	lt
 80040ec:	18e4      	addlt	r4, r4, r3
 80040ee:	f7ff ffe7 	bl	80040c0 <__malloc_lock>
 80040f2:	4a1e      	ldr	r2, [pc, #120]	; (800416c <_free_r+0x94>)
 80040f4:	9801      	ldr	r0, [sp, #4]
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	b933      	cbnz	r3, 8004108 <_free_r+0x30>
 80040fa:	6063      	str	r3, [r4, #4]
 80040fc:	6014      	str	r4, [r2, #0]
 80040fe:	b003      	add	sp, #12
 8004100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004104:	f7ff bfe2 	b.w	80040cc <__malloc_unlock>
 8004108:	42a3      	cmp	r3, r4
 800410a:	d908      	bls.n	800411e <_free_r+0x46>
 800410c:	6825      	ldr	r5, [r4, #0]
 800410e:	1961      	adds	r1, r4, r5
 8004110:	428b      	cmp	r3, r1
 8004112:	bf01      	itttt	eq
 8004114:	6819      	ldreq	r1, [r3, #0]
 8004116:	685b      	ldreq	r3, [r3, #4]
 8004118:	1949      	addeq	r1, r1, r5
 800411a:	6021      	streq	r1, [r4, #0]
 800411c:	e7ed      	b.n	80040fa <_free_r+0x22>
 800411e:	461a      	mov	r2, r3
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b10b      	cbz	r3, 8004128 <_free_r+0x50>
 8004124:	42a3      	cmp	r3, r4
 8004126:	d9fa      	bls.n	800411e <_free_r+0x46>
 8004128:	6811      	ldr	r1, [r2, #0]
 800412a:	1855      	adds	r5, r2, r1
 800412c:	42a5      	cmp	r5, r4
 800412e:	d10b      	bne.n	8004148 <_free_r+0x70>
 8004130:	6824      	ldr	r4, [r4, #0]
 8004132:	4421      	add	r1, r4
 8004134:	1854      	adds	r4, r2, r1
 8004136:	42a3      	cmp	r3, r4
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	d1e0      	bne.n	80040fe <_free_r+0x26>
 800413c:	681c      	ldr	r4, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	6053      	str	r3, [r2, #4]
 8004142:	4421      	add	r1, r4
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	e7da      	b.n	80040fe <_free_r+0x26>
 8004148:	d902      	bls.n	8004150 <_free_r+0x78>
 800414a:	230c      	movs	r3, #12
 800414c:	6003      	str	r3, [r0, #0]
 800414e:	e7d6      	b.n	80040fe <_free_r+0x26>
 8004150:	6825      	ldr	r5, [r4, #0]
 8004152:	1961      	adds	r1, r4, r5
 8004154:	428b      	cmp	r3, r1
 8004156:	bf04      	itt	eq
 8004158:	6819      	ldreq	r1, [r3, #0]
 800415a:	685b      	ldreq	r3, [r3, #4]
 800415c:	6063      	str	r3, [r4, #4]
 800415e:	bf04      	itt	eq
 8004160:	1949      	addeq	r1, r1, r5
 8004162:	6021      	streq	r1, [r4, #0]
 8004164:	6054      	str	r4, [r2, #4]
 8004166:	e7ca      	b.n	80040fe <_free_r+0x26>
 8004168:	b003      	add	sp, #12
 800416a:	bd30      	pop	{r4, r5, pc}
 800416c:	20000104 	.word	0x20000104

08004170 <_realloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4680      	mov	r8, r0
 8004176:	4614      	mov	r4, r2
 8004178:	460e      	mov	r6, r1
 800417a:	b921      	cbnz	r1, 8004186 <_realloc_r+0x16>
 800417c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	4611      	mov	r1, r2
 8004182:	f7ff b847 	b.w	8003214 <_malloc_r>
 8004186:	b92a      	cbnz	r2, 8004194 <_realloc_r+0x24>
 8004188:	f7ff ffa6 	bl	80040d8 <_free_r>
 800418c:	4625      	mov	r5, r4
 800418e:	4628      	mov	r0, r5
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	f000 f850 	bl	8004238 <_malloc_usable_size_r>
 8004198:	4284      	cmp	r4, r0
 800419a:	4607      	mov	r7, r0
 800419c:	d802      	bhi.n	80041a4 <_realloc_r+0x34>
 800419e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041a2:	d812      	bhi.n	80041ca <_realloc_r+0x5a>
 80041a4:	4621      	mov	r1, r4
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7ff f834 	bl	8003214 <_malloc_r>
 80041ac:	4605      	mov	r5, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0ed      	beq.n	800418e <_realloc_r+0x1e>
 80041b2:	42bc      	cmp	r4, r7
 80041b4:	4622      	mov	r2, r4
 80041b6:	4631      	mov	r1, r6
 80041b8:	bf28      	it	cs
 80041ba:	463a      	movcs	r2, r7
 80041bc:	f7ff ff58 	bl	8004070 <memcpy>
 80041c0:	4631      	mov	r1, r6
 80041c2:	4640      	mov	r0, r8
 80041c4:	f7ff ff88 	bl	80040d8 <_free_r>
 80041c8:	e7e1      	b.n	800418e <_realloc_r+0x1e>
 80041ca:	4635      	mov	r5, r6
 80041cc:	e7df      	b.n	800418e <_realloc_r+0x1e>
	...

080041d0 <_read_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4d07      	ldr	r5, [pc, #28]	; (80041f0 <_read_r+0x20>)
 80041d4:	4604      	mov	r4, r0
 80041d6:	4608      	mov	r0, r1
 80041d8:	4611      	mov	r1, r2
 80041da:	2200      	movs	r2, #0
 80041dc:	602a      	str	r2, [r5, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	f7fc fc50 	bl	8000a84 <_read>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d102      	bne.n	80041ee <_read_r+0x1e>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	b103      	cbz	r3, 80041ee <_read_r+0x1e>
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	bd38      	pop	{r3, r4, r5, pc}
 80041f0:	2000010c 	.word	0x2000010c

080041f4 <_fstat_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4d07      	ldr	r5, [pc, #28]	; (8004214 <_fstat_r+0x20>)
 80041f8:	2300      	movs	r3, #0
 80041fa:	4604      	mov	r4, r0
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	602b      	str	r3, [r5, #0]
 8004202:	f7fc fc84 	bl	8000b0e <_fstat>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	d102      	bne.n	8004210 <_fstat_r+0x1c>
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	b103      	cbz	r3, 8004210 <_fstat_r+0x1c>
 800420e:	6023      	str	r3, [r4, #0]
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	2000010c 	.word	0x2000010c

08004218 <_isatty_r>:
 8004218:	b538      	push	{r3, r4, r5, lr}
 800421a:	4d06      	ldr	r5, [pc, #24]	; (8004234 <_isatty_r+0x1c>)
 800421c:	2300      	movs	r3, #0
 800421e:	4604      	mov	r4, r0
 8004220:	4608      	mov	r0, r1
 8004222:	602b      	str	r3, [r5, #0]
 8004224:	f7fc fc83 	bl	8000b2e <_isatty>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_isatty_r+0x1a>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_isatty_r+0x1a>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	2000010c 	.word	0x2000010c

08004238 <_malloc_usable_size_r>:
 8004238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800423c:	1f18      	subs	r0, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	bfbc      	itt	lt
 8004242:	580b      	ldrlt	r3, [r1, r0]
 8004244:	18c0      	addlt	r0, r0, r3
 8004246:	4770      	bx	lr

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
