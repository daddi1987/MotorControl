
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008540  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08008710  08008710  00018710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ecc  08008ecc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ecc  08008ecc  00018ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed4  08008ed4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed4  08008ed4  00018ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001e8  080090c4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080090c4  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e4  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e52  00000000  00000000  0002eafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00030950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022723  00000000  00000000  000322e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ef  00000000  00000000  00054a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d264e  00000000  00000000  00068bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004914  00000000  00000000  0013b298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080086f8 	.word	0x080086f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	080086f8 	.word	0x080086f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f90:	b08f      	sub	sp, #60	; 0x3c
 8000f92:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f001 fa7e 	bl	8002494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f92a 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 fa84 	bl	80014a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa0:	f000 fa58 	bl	8001454 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000fa4:	f000 f9e6 	bl	8001374 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fa8:	f000 fa1c 	bl	80013e4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8000fac:	f000 f98e 	bl	80012cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  sprintf(Prefix, "Px;");
 8000fb0:	496f      	ldr	r1, [pc, #444]	; (8001170 <main+0x1e4>)
 8000fb2:	4870      	ldr	r0, [pc, #448]	; (8001174 <main+0x1e8>)
 8000fb4:	f005 f928 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, Prefix, sizeof(Prefix), 100);
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	2203      	movs	r2, #3
 8000fbc:	496d      	ldr	r1, [pc, #436]	; (8001174 <main+0x1e8>)
 8000fbe:	486e      	ldr	r0, [pc, #440]	; (8001178 <main+0x1ec>)
 8000fc0:	f004 f8cc 	bl	800515c <HAL_UART_Transmit>
  sprintf(HEADER1, "PulseEncoder;");
 8000fc4:	496d      	ldr	r1, [pc, #436]	; (800117c <main+0x1f0>)
 8000fc6:	486e      	ldr	r0, [pc, #440]	; (8001180 <main+0x1f4>)
 8000fc8:	f005 f91e 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	2223      	movs	r2, #35	; 0x23
 8000fd0:	496b      	ldr	r1, [pc, #428]	; (8001180 <main+0x1f4>)
 8000fd2:	4869      	ldr	r0, [pc, #420]	; (8001178 <main+0x1ec>)
 8000fd4:	f004 f8c2 	bl	800515c <HAL_UART_Transmit>
  sprintf(HEADER2, "PositionMotor;");
 8000fd8:	496a      	ldr	r1, [pc, #424]	; (8001184 <main+0x1f8>)
 8000fda:	486b      	ldr	r0, [pc, #428]	; (8001188 <main+0x1fc>)
 8000fdc:	f005 f914 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	2223      	movs	r2, #35	; 0x23
 8000fe4:	4968      	ldr	r1, [pc, #416]	; (8001188 <main+0x1fc>)
 8000fe6:	4864      	ldr	r0, [pc, #400]	; (8001178 <main+0x1ec>)
 8000fe8:	f004 f8b8 	bl	800515c <HAL_UART_Transmit>
  sprintf(HEADER3, "RevolutionMotor;");
 8000fec:	4967      	ldr	r1, [pc, #412]	; (800118c <main+0x200>)
 8000fee:	4868      	ldr	r0, [pc, #416]	; (8001190 <main+0x204>)
 8000ff0:	f005 f90a 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER3, sizeof(HEADER3), 100);
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	2223      	movs	r2, #35	; 0x23
 8000ff8:	4965      	ldr	r1, [pc, #404]	; (8001190 <main+0x204>)
 8000ffa:	485f      	ldr	r0, [pc, #380]	; (8001178 <main+0x1ec>)
 8000ffc:	f004 f8ae 	bl	800515c <HAL_UART_Transmit>
  sprintf(HEADER4, "KinematicPositionUnit;");
 8001000:	4964      	ldr	r1, [pc, #400]	; (8001194 <main+0x208>)
 8001002:	4865      	ldr	r0, [pc, #404]	; (8001198 <main+0x20c>)
 8001004:	f005 f900 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2223      	movs	r2, #35	; 0x23
 800100c:	4962      	ldr	r1, [pc, #392]	; (8001198 <main+0x20c>)
 800100e:	485a      	ldr	r0, [pc, #360]	; (8001178 <main+0x1ec>)
 8001010:	f004 f8a4 	bl	800515c <HAL_UART_Transmit>
  sprintf(HEADER5, "KinematicSpeed[Rpm];");
 8001014:	4961      	ldr	r1, [pc, #388]	; (800119c <main+0x210>)
 8001016:	4862      	ldr	r0, [pc, #392]	; (80011a0 <main+0x214>)
 8001018:	f005 f8f6 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, HEADER5, sizeof(HEADER5), 100);
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	2223      	movs	r2, #35	; 0x23
 8001020:	495f      	ldr	r1, [pc, #380]	; (80011a0 <main+0x214>)
 8001022:	4855      	ldr	r0, [pc, #340]	; (8001178 <main+0x1ec>)
 8001024:	f004 f89a 	bl	800515c <HAL_UART_Transmit>
  sprintf(Sufix, "Sx;\n");
 8001028:	495e      	ldr	r1, [pc, #376]	; (80011a4 <main+0x218>)
 800102a:	485f      	ldr	r0, [pc, #380]	; (80011a8 <main+0x21c>)
 800102c:	f005 f8ec 	bl	8006208 <siprintf>
  HAL_UART_Transmit(&huart2, Sufix, sizeof(Sufix), 100);
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	2203      	movs	r2, #3
 8001034:	495c      	ldr	r1, [pc, #368]	; (80011a8 <main+0x21c>)
 8001036:	4850      	ldr	r0, [pc, #320]	; (8001178 <main+0x1ec>)
 8001038:	f004 f890 	bl	800515c <HAL_UART_Transmit>
  HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f001 fa9a 	bl	8002578 <HAL_Delay>

  GetConstantFilter();
 8001044:	f000 fcfa 	bl	8001a3c <GetConstantFilter>
   /* USER CODE END WHILE */
	    /* USER CODE END WHILE */

	     //TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6);

	  	 if (TickSerial == 1)
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <main+0x220>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d178      	bne.n	8001142 <main+0x1b6>
	  	 {
		  	 if((EncoderSpeedRPSold == EncoderSpeedRPS) && (IncrementSpeedCheckDouble >=10))
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <main+0x224>)
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <main+0x228>)
 8001058:	edd3 7a00 	vldr	s15, [r3]
 800105c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d114      	bne.n	8001090 <main+0x104>
 8001066:	4b54      	ldr	r3, [pc, #336]	; (80011b8 <main+0x22c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b09      	cmp	r3, #9
 800106c:	d910      	bls.n	8001090 <main+0x104>
		  	 {
		  		EncoderSpeedRPS = 0.0;
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <main+0x228>)
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
		  		EncoderSpeedRPM = 0.0;
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <main+0x230>)
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
		  		EncoderSpeedUnit = 0.0;
 800107e:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <main+0x234>)
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
		  		EncoderSpeedRPSold = EncoderSpeedRPS;
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <main+0x228>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a49      	ldr	r2, [pc, #292]	; (80011b0 <main+0x224>)
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e009      	b.n	80010a4 <main+0x118>
		  	 }
		  	 else
		  	 {
		  		EncoderSpeedRPSold = EncoderSpeedRPS;
 8001090:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <main+0x228>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a46      	ldr	r2, [pc, #280]	; (80011b0 <main+0x224>)
 8001096:	6013      	str	r3, [r2, #0]
		  		IncrementSpeedCheckDouble++;
 8001098:	4b47      	ldr	r3, [pc, #284]	; (80011b8 <main+0x22c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <main+0x22c>)
 80010a2:	701a      	strb	r2, [r3, #0]
		  	 }

			 sprintf(MSG, "Px;%d;%d;%.3f;%.3f;%.3f;%.3f;%.3f;Sx\r",
 80010a4:	4b47      	ldr	r3, [pc, #284]	; (80011c4 <main+0x238>)
 80010a6:	681e      	ldr	r6, [r3, #0]
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <main+0x23c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <main+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa68 	bl	8000588 <__aeabi_f2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <main+0x244>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa61 	bl	8000588 <__aeabi_f2d>
 80010c6:	4680      	mov	r8, r0
 80010c8:	4689      	mov	r9, r1
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <main+0x228>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa5a 	bl	8000588 <__aeabi_f2d>
 80010d4:	4682      	mov	sl, r0
 80010d6:	468b      	mov	fp, r1
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <main+0x230>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa53 	bl	8000588 <__aeabi_f2d>
 80010e2:	e9c7 0100 	strd	r0, r1, [r7]
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <main+0x234>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa4c 	bl	8000588 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010f8:	ed97 7b00 	vldr	d7, [r7]
 80010fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001100:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001104:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001108:	e9cd 4500 	strd	r4, r5, [sp]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4632      	mov	r2, r6
 8001110:	4930      	ldr	r1, [pc, #192]	; (80011d4 <main+0x248>)
 8001112:	4831      	ldr	r0, [pc, #196]	; (80011d8 <main+0x24c>)
 8001114:	f005 f878 	bl	8006208 <siprintf>
					 PositionMotor,
					 KinematicPositionUnit,
					 EncoderSpeedRPS,
					 EncoderSpeedRPM,
					 EncoderSpeedUnit);
				 	 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 8001118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111c:	22c8      	movs	r2, #200	; 0xc8
 800111e:	492e      	ldr	r1, [pc, #184]	; (80011d8 <main+0x24c>)
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <main+0x1ec>)
 8001122:	f004 f81b 	bl	800515c <HAL_UART_Transmit>
				 	 sprintf(CR,"\n");   											//Indispensable for Send Value without error to row empty
 8001126:	492d      	ldr	r1, [pc, #180]	; (80011dc <main+0x250>)
 8001128:	482d      	ldr	r0, [pc, #180]	; (80011e0 <main+0x254>)
 800112a:	f005 f86d 	bl	8006208 <siprintf>
				 	 HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);        //Indispensable for Send Value without error to row empty
 800112e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001132:	2202      	movs	r2, #2
 8001134:	492a      	ldr	r1, [pc, #168]	; (80011e0 <main+0x254>)
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <main+0x1ec>)
 8001138:	f004 f810 	bl	800515c <HAL_UART_Transmit>
			 TickSerial = 0;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <main+0x220>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	  	 }

	  	DemandMotorStep = 40000;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <main+0x258>)
 8001144:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001148:	601a      	str	r2, [r3, #0]
	  	StepSpeed = 35000;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0x25c>)
 800114c:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001150:	801a      	strh	r2, [r3, #0]


	  	if (ActualMotorStep <= DemandMotorStep)
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <main+0x260>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <main+0x258>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	f63f af74 	bhi.w	8001048 <main+0xbc>
	  	{
	  		CW_Direction(1,StepSpeed);
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <main+0x25c>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	2001      	movs	r0, #1
 8001168:	f000 fdb2 	bl	8001cd0 <CW_Direction>
	  	 if (TickSerial == 1)
 800116c:	e76c      	b.n	8001048 <main+0xbc>
 800116e:	bf00      	nop
 8001170:	08008710 	.word	0x08008710
 8001174:	200003f0 	.word	0x200003f0
 8001178:	200002dc 	.word	0x200002dc
 800117c:	08008714 	.word	0x08008714
 8001180:	200003f8 	.word	0x200003f8
 8001184:	08008724 	.word	0x08008724
 8001188:	2000041c 	.word	0x2000041c
 800118c:	08008734 	.word	0x08008734
 8001190:	20000440 	.word	0x20000440
 8001194:	08008748 	.word	0x08008748
 8001198:	20000464 	.word	0x20000464
 800119c:	08008760 	.word	0x08008760
 80011a0:	20000488 	.word	0x20000488
 80011a4:	08008778 	.word	0x08008778
 80011a8:	200003f4 	.word	0x200003f4
 80011ac:	200004fc 	.word	0x200004fc
 80011b0:	200004dc 	.word	0x200004dc
 80011b4:	200004d4 	.word	0x200004d4
 80011b8:	200004ec 	.word	0x200004ec
 80011bc:	200004d8 	.word	0x200004d8
 80011c0:	200004e0 	.word	0x200004e0
 80011c4:	20000320 	.word	0x20000320
 80011c8:	200004c8 	.word	0x200004c8
 80011cc:	200004c4 	.word	0x200004c4
 80011d0:	200004d0 	.word	0x200004d0
 80011d4:	08008780 	.word	0x08008780
 80011d8:	20000324 	.word	0x20000324
 80011dc:	080087a8 	.word	0x080087a8
 80011e0:	200003ec 	.word	0x200003ec
 80011e4:	200004f0 	.word	0x200004f0
 80011e8:	200004f8 	.word	0x200004f8
 80011ec:	200004f4 	.word	0x200004f4

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2234      	movs	r2, #52	; 0x34
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 fb90 	bl	8005924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b2a      	ldr	r3, [pc, #168]	; (80012c4 <SystemClock_Config+0xd4>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <SystemClock_Config+0xd4>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <SystemClock_Config+0xd4>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001230:	2300      	movs	r3, #0
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <SystemClock_Config+0xd8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800123c:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <SystemClock_Config+0xd8>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <SystemClock_Config+0xd8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001264:	2310      	movs	r3, #16
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800126e:	2304      	movs	r3, #4
 8001270:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4618      	mov	r0, r3
 8001280:	f002 faa4 	bl	80037cc <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800128a:	f000 fee3 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2302      	movs	r3, #2
 8001294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800129a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2102      	movs	r1, #2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fe84 	bl	8002fb8 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012b6:	f000 fecd 	bl	8002054 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void) // Timer for step speed
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_TIM1_Init+0xa0>)
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <MX_TIM1_Init+0xa4>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_TIM1_Init+0xa0>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM1_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM1_Init+0xa0>)
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM1_Init+0xa0>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM1_Init+0xa0>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_TIM1_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001314:	4815      	ldr	r0, [pc, #84]	; (800136c <MX_TIM1_Init+0xa0>)
 8001316:	f002 fdb5 	bl	8003e84 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001320:	f000 fe98 	bl	8002054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	480e      	ldr	r0, [pc, #56]	; (800136c <MX_TIM1_Init+0xa0>)
 8001332:	f003 f865 	bl	8004400 <HAL_TIM_ConfigClockSource>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800133c:	f000 fe8a 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM1_Init+0xa0>)
 800134e:	f003 fd39 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 fe7c 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Start Timer
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM1_Init+0xa0>)
 800135e:	f002 fe81 	bl	8004064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000204 	.word	0x20000204
 8001370:	40010000 	.word	0x40010000

08001374 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)  // Using Timer For calculate the time between two encoder signal samples 0.0009 s
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_TIM6_Init+0x68>)
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <MX_TIM6_Init+0x6c>)
 8001386:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <MX_TIM6_Init+0x68>)
 800138a:	2229      	movs	r2, #41	; 0x29
 800138c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <MX_TIM6_Init+0x68>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_TIM6_Init+0x68>)
 8001396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_TIM6_Init+0x68>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_TIM6_Init+0x68>)
 80013a4:	f002 fd6e 	bl	8003e84 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80013ae:	f000 fe51 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM6_Init+0x68>)
 80013c0:	f003 fd00 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80013ca:	f000 fe43 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Start Timer
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM6_Init+0x68>)
 80013d0:	f002 fe48 	bl	8004064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000024c 	.word	0x2000024c
 80013e0:	40001000 	.word	0x40001000

080013e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void) // Timer for signal output serial com
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	463b      	mov	r3, r7
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_TIM7_Init+0x68>)
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <MX_TIM7_Init+0x6c>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_TIM7_Init+0x68>)
 80013fa:	2229      	movs	r2, #41	; 0x29
 80013fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_TIM7_Init+0x68>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_TIM7_Init+0x68>)
 8001406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_TIM7_Init+0x68>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_TIM7_Init+0x68>)
 8001414:	f002 fd36 	bl	8003e84 <HAL_TIM_Base_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800141e:	f000 fe19 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM7_Init+0x68>)
 8001430:	f003 fcc8 	bl	8004dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800143a:	f000 fe0b 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM7_Init+0x68>)
 8001440:	f002 fe10 	bl	8004064 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000294 	.word	0x20000294
 8001450:	40001400 	.word	0x40001400

08001454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_USART2_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART2_UART_Init+0x4c>)
 800148c:	f003 fd8c 	bl	8004fa8 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 fddd 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002dc 	.word	0x200002dc
 80014a4:	40004400 	.word	0x40004400

080014a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <MX_GPIO_Init+0x188>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a5a      	ldr	r2, [pc, #360]	; (8001630 <MX_GPIO_Init+0x188>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b58      	ldr	r3, [pc, #352]	; (8001630 <MX_GPIO_Init+0x188>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b54      	ldr	r3, [pc, #336]	; (8001630 <MX_GPIO_Init+0x188>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a53      	ldr	r2, [pc, #332]	; (8001630 <MX_GPIO_Init+0x188>)
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b51      	ldr	r3, [pc, #324]	; (8001630 <MX_GPIO_Init+0x188>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <MX_GPIO_Init+0x188>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <MX_GPIO_Init+0x188>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <MX_GPIO_Init+0x188>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <MX_GPIO_Init+0x188>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a45      	ldr	r2, [pc, #276]	; (8001630 <MX_GPIO_Init+0x188>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <MX_GPIO_Init+0x188>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001534:	483f      	ldr	r0, [pc, #252]	; (8001634 <MX_GPIO_Init+0x18c>)
 8001536:	f001 fccd 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001540:	483d      	ldr	r0, [pc, #244]	; (8001638 <MX_GPIO_Init+0x190>)
 8001542:	f001 fcc7 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	483c      	ldr	r0, [pc, #240]	; (800163c <MX_GPIO_Init+0x194>)
 800154c:	f001 fcc2 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001556:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4835      	ldr	r0, [pc, #212]	; (800163c <MX_GPIO_Init+0x194>)
 8001568:	f001 f96a 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 800156c:	2303      	movs	r3, #3
 800156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001570:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	482c      	ldr	r0, [pc, #176]	; (8001634 <MX_GPIO_Init+0x18c>)
 8001582:	f001 f95d 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 8001586:	f44f 7348 	mov.w	r3, #800	; 0x320
 800158a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4825      	ldr	r0, [pc, #148]	; (8001634 <MX_GPIO_Init+0x18c>)
 80015a0:	f001 f94e 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 80015a4:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80015a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <MX_GPIO_Init+0x190>)
 80015be:	f001 f93f 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4818      	ldr	r0, [pc, #96]	; (800163c <MX_GPIO_Init+0x194>)
 80015da:	f001 f931 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <MX_GPIO_Init+0x18c>)
 80015f4:	f001 f924 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	2006      	movs	r0, #6
 80015fe:	f001 f8cf 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001602:	2006      	movs	r0, #6
 8001604:	f001 f8f8 	bl	80027f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	2007      	movs	r0, #7
 800160e:	f001 f8c7 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001612:	2007      	movs	r0, #7
 8001614:	f001 f8f0 	bl	80027f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2028      	movs	r0, #40	; 0x28
 800161e:	f001 f8bf 	bl	80027a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001622:	2028      	movs	r0, #40	; 0x28
 8001624:	f001 f8e8 	bl	80027f8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800

08001640 <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 8001640:	b598      	push	{r3, r4, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 8001644:	2102      	movs	r1, #2
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <rot_get_state+0x28>)
 8001648:	f001 fc1e 	bl	8002e88 <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	005b      	lsls	r3, r3, #1
                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 8001650:	b25c      	sxtb	r4, r3
 8001652:	2101      	movs	r1, #1
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <rot_get_state+0x28>)
 8001656:	f001 fc17 	bl	8002e88 <HAL_GPIO_ReadPin>
 800165a:	4603      	mov	r3, r0
 800165c:	b25b      	sxtb	r3, r3
 800165e:	4323      	orrs	r3, r4
 8001660:	b25b      	sxtb	r3, r3
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd98      	pop	{r3, r4, r7, pc}
 8001668:	40020000 	.word	0x40020000

0800166c <HAL_GPIO_EXTI_Callback>:
/* Use Interrupt callback for determinate the count encoder and direction
 * The Encoder Have a 2048 pulse/rot, in this implementation do it increment counter POSITION four time at impulse
 * Example 1rev/8192 pulse
 * PIN ENCODER A0 COUNT AND A1 DIRECTION
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direct_Pin) {
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_EXTI_Callback+0x18>
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	2b02      	cmp	r3, #2
 8001680:	f040 8082 	bne.w	8001788 <HAL_GPIO_EXTI_Callback+0x11c>

		rot_new_state = rot_get_state();
 8001684:	f7ff ffdc 	bl	8001640 <rot_get_state>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 800168e:	701a      	strb	r2, [r3, #0]

		//DBG("%d:%d", rot_old_state, rot_new_state);

		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d109      	bne.n	80016ac <HAL_GPIO_EXTI_Callback+0x40>
 8001698:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d105      	bne.n	80016ac <HAL_GPIO_EXTI_Callback+0x40>
			EncoderCount++;
 80016a0:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e060      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d109      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x5c>
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <HAL_GPIO_EXTI_Callback+0x5c>
			EncoderCount++;
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e052      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d109      	bne.n	80016e4 <HAL_GPIO_EXTI_Callback+0x78>
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_EXTI_Callback+0x78>
			EncoderCount++;
 80016d8:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e044      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d109      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x94>
 80016ec:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d105      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x94>
			EncoderCount++;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	4a27      	ldr	r2, [pc, #156]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e036      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d109      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0xb0>
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0xb0>
			EncoderCount--;
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3b01      	subs	r3, #1
 8001716:	4a20      	ldr	r2, [pc, #128]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e028      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d109      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0xcc>
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0xcc>
			EncoderCount--;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3b01      	subs	r3, #1
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01a      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0xe8>
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d105      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0xe8>
			EncoderCount--;
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00c      	b.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d108      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d104      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x102>
			EncoderCount--;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_GPIO_EXTI_Callback+0x12c>)
 800176c:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_GPIO_EXTI_Callback+0x124>)
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_GPIO_EXTI_Callback+0x128>)
 8001774:	701a      	strb	r2, [r3, #0]
		Calculate_Rotation(EncoderPulse,RevoluctionFactor);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_GPIO_EXTI_Callback+0x130>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x134>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f000 f810 	bl	80017a8 <Calculate_Rotation>
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200004c0 	.word	0x200004c0
 8001794:	200004c1 	.word	0x200004c1
 8001798:	20000320 	.word	0x20000320
 800179c:	20000004 	.word	0x20000004
 80017a0:	20000006 	.word	0x20000006
 80017a4:	00000000 	.word	0x00000000

080017a8 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	460a      	mov	r2, r1
 80017b2:	80fb      	strh	r3, [r7, #6]
 80017b4:	4613      	mov	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
EncoderPosition = EncoderCount/4.0;   // Single Event Encoder 1*4 in Single Counter
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <Calculate_Rotation+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed1 	bl	8000564 <__aeabi_i2d>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b89      	ldr	r3, [pc, #548]	; (80019ec <Calculate_Rotation+0x244>)
 80017c8:	f7ff f860 	bl	800088c <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff f9e0 	bl	8000b98 <__aeabi_d2iz>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a85      	ldr	r2, [pc, #532]	; (80019f0 <Calculate_Rotation+0x248>)
 80017dc:	6013      	str	r3, [r2, #0]
EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 80017de:	4b84      	ldr	r3, [pc, #528]	; (80019f0 <Calculate_Rotation+0x248>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	4b82      	ldr	r3, [pc, #520]	; (80019f4 <Calculate_Rotation+0x24c>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]
PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <Calculate_Rotation+0x24c>)
 80017f2:	edd3 6a00 	vldr	s13, [r3]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001804:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <Calculate_Rotation+0x250>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	4b78      	ldr	r3, [pc, #480]	; (80019f8 <Calculate_Rotation+0x250>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181e:	4b77      	ldr	r3, [pc, #476]	; (80019fc <Calculate_Rotation+0x254>)
 8001820:	edc3 7a00 	vstr	s15, [r3]

TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6); // Get current time (microseconds)
 8001824:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <Calculate_Rotation+0x258>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b21a      	sxth	r2, r3
 800182c:	4b75      	ldr	r3, [pc, #468]	; (8001a04 <Calculate_Rotation+0x25c>)
 800182e:	801a      	strh	r2, [r3, #0]

if(TM6_Currentvalue >= TM6_OldValue)
 8001830:	4b74      	ldr	r3, [pc, #464]	; (8001a04 <Calculate_Rotation+0x25c>)
 8001832:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001836:	461a      	mov	r2, r3
 8001838:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <Calculate_Rotation+0x260>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	f0c0 80c2 	bcc.w	80019c6 <Calculate_Rotation+0x21e>
{
	TM6_DiffCaunter = (TM6_Currentvalue - TM6_OldValue); // Calculate time from count to count
 8001842:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <Calculate_Rotation+0x25c>)
 8001844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001848:	461a      	mov	r2, r3
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <Calculate_Rotation+0x260>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a6e      	ldr	r2, [pc, #440]	; (8001a0c <Calculate_Rotation+0x264>)
 8001852:	6013      	str	r3, [r2, #0]
	if (FilterSpeedEnable == 1)  //  CutOff Low-Pass Filter
 8001854:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <Calculate_Rotation+0x268>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d16e      	bne.n	800193a <Calculate_Rotation+0x192>
	{
		GetConstantFilter();
 800185c:	f000 f8ee 	bl	8001a3c <GetConstantFilter>
		EncoderSpeedRPSToFiler = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <Calculate_Rotation+0x264>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe6d 	bl	8000544 <__aeabi_ui2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	a15c      	add	r1, pc, #368	; (adr r1, 80019e0 <Calculate_Rotation+0x238>)
 8001870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001874:	f7ff f80a 	bl	800088c <__aeabi_ddiv>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe6d 	bl	8000564 <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fffb 	bl	800088c <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f9a3 	bl	8000be8 <__aeabi_d2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a5b      	ldr	r2, [pc, #364]	; (8001a14 <Calculate_Rotation+0x26c>)
 80018a6:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPS = ((b_i*RPSSpeedFilter) + (a_i*EncoderSpeedRPSToFiler) + (a_i*RPSSpeedFilterPrev));
 80018a8:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <Calculate_Rotation+0x270>)
 80018aa:	ed93 7a00 	vldr	s14, [r3]
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <Calculate_Rotation+0x274>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <Calculate_Rotation+0x278>)
 80018ba:	edd3 6a00 	vldr	s13, [r3]
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <Calculate_Rotation+0x26c>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018cc:	4b54      	ldr	r3, [pc, #336]	; (8001a20 <Calculate_Rotation+0x278>)
 80018ce:	edd3 6a00 	vldr	s13, [r3]
 80018d2:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <Calculate_Rotation+0x27c>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <Calculate_Rotation+0x280>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <Calculate_Rotation+0x280>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001a2c <Calculate_Rotation+0x284>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <Calculate_Rotation+0x288>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001904:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <Calculate_Rotation+0x288>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <Calculate_Rotation+0x28c>)
 8001910:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 8001914:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <Calculate_Rotation+0x25c>)
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	461a      	mov	r2, r3
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <Calculate_Rotation+0x260>)
 800191e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8001920:	2120      	movs	r1, #32
 8001922:	4845      	ldr	r0, [pc, #276]	; (8001a38 <Calculate_Rotation+0x290>)
 8001924:	f001 fb08 	bl	8002f38 <HAL_GPIO_TogglePin>
		RPSSpeedFilterPrev = EncoderSpeedRPSToFiler;
 8001928:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <Calculate_Rotation+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a3d      	ldr	r2, [pc, #244]	; (8001a24 <Calculate_Rotation+0x27c>)
 800192e:	6013      	str	r3, [r2, #0]
		RPSSpeedFilter = EncoderSpeedRPS;
 8001930:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <Calculate_Rotation+0x280>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <Calculate_Rotation+0x274>)
 8001936:	6013      	str	r3, [r2, #0]
else
{
	TM6_OldValue = TM6_Currentvalue;
}

}
 8001938:	e04b      	b.n	80019d2 <Calculate_Rotation+0x22a>
		EncoderSpeedRPS = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <Calculate_Rotation+0x264>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fe00 	bl	8000544 <__aeabi_ui2d>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	a125      	add	r1, pc, #148	; (adr r1, 80019e0 <Calculate_Rotation+0x238>)
 800194a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800194e:	f7fe ff9d 	bl	800088c <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe00 	bl	8000564 <__aeabi_i2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe ff8e 	bl	800088c <__aeabi_ddiv>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f936 	bl	8000be8 <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
 800197e:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <Calculate_Rotation+0x280>)
 8001980:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 8001982:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <Calculate_Rotation+0x280>)
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a2c <Calculate_Rotation+0x284>
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <Calculate_Rotation+0x288>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001996:	88bb      	ldrh	r3, [r7, #4]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <Calculate_Rotation+0x288>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <Calculate_Rotation+0x28c>)
 80019ac:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <Calculate_Rotation+0x25c>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <Calculate_Rotation+0x260>)
 80019ba:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 80019bc:	2120      	movs	r1, #32
 80019be:	481e      	ldr	r0, [pc, #120]	; (8001a38 <Calculate_Rotation+0x290>)
 80019c0:	f001 faba 	bl	8002f38 <HAL_GPIO_TogglePin>
}
 80019c4:	e005      	b.n	80019d2 <Calculate_Rotation+0x22a>
	TM6_OldValue = TM6_Currentvalue;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <Calculate_Rotation+0x25c>)
 80019c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <Calculate_Rotation+0x260>)
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	00000000 	.word	0x00000000
 80019e4:	412e8480 	.word	0x412e8480
 80019e8:	20000320 	.word	0x20000320
 80019ec:	40100000 	.word	0x40100000
 80019f0:	200004c8 	.word	0x200004c8
 80019f4:	200004cc 	.word	0x200004cc
 80019f8:	200004c4 	.word	0x200004c4
 80019fc:	200004d0 	.word	0x200004d0
 8001a00:	2000024c 	.word	0x2000024c
 8001a04:	200004fa 	.word	0x200004fa
 8001a08:	200004e8 	.word	0x200004e8
 8001a0c:	200004e4 	.word	0x200004e4
 8001a10:	20000000 	.word	0x20000000
 8001a14:	200004b4 	.word	0x200004b4
 8001a18:	200004b8 	.word	0x200004b8
 8001a1c:	200004ac 	.word	0x200004ac
 8001a20:	200004bc 	.word	0x200004bc
 8001a24:	200004b0 	.word	0x200004b0
 8001a28:	200004d4 	.word	0x200004d4
 8001a2c:	42700000 	.word	0x42700000
 8001a30:	200004d8 	.word	0x200004d8
 8001a34:	200004e0 	.word	0x200004e0
 8001a38:	40020000 	.word	0x40020000

08001a3c <GetConstantFilter>:
/* Calculate Revolution to Factor
 *
 */
//----------------------------DA CONTROLLARE NON FUNZIONANTE--------------------------
void GetConstantFilter(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
    b2= b0;
    a1 = 2.0 * (ita*ita - 1.0) * b0;
    a2 = -(1.0 - q*ita + ita*ita) * b0;
    */

	switch (FrequencyCase) {
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	2b0b      	cmp	r3, #11
 8001a48:	f200 80ed 	bhi.w	8001c26 <GetConstantFilter+0x1ea>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <GetConstantFilter+0x18>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a85 	.word	0x08001a85
 8001a58:	08001aa1 	.word	0x08001aa1
 8001a5c:	08001ac5 	.word	0x08001ac5
 8001a60:	08001ae9 	.word	0x08001ae9
 8001a64:	08001b0d 	.word	0x08001b0d
 8001a68:	08001b31 	.word	0x08001b31
 8001a6c:	08001b55 	.word	0x08001b55
 8001a70:	08001b79 	.word	0x08001b79
 8001a74:	08001b9d 	.word	0x08001b9d
 8001a78:	08001bc1 	.word	0x08001bc1
 8001a7c:	08001be5 	.word	0x08001be5
 8001a80:	08001c09 	.word	0x08001c09

	  case 1:
		if(FrequencySpeedFilter <= 5)
 8001a84:	4b6b      	ldr	r3, [pc, #428]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d806      	bhi.n	8001a9a <GetConstantFilter+0x5e>
		{
			b_i = 0.96906992;
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001a8e:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <GetConstantFilter+0x200>)
 8001a90:	601a      	str	r2, [r3, #0]
			a_i = 0.01546504;
 8001a92:	4b6b      	ldr	r3, [pc, #428]	; (8001c40 <GetConstantFilter+0x204>)
 8001a94:	4a6b      	ldr	r2, [pc, #428]	; (8001c44 <GetConstantFilter+0x208>)
 8001a96:	601a      	str	r2, [r3, #0]
			//FrequencySpeedFilter = 1;
			break;
 8001a98:	e0c5      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 2;
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	701a      	strb	r2, [r3, #0]
		}


	  case 2:
		if ((FrequencySpeedFilter >= 6)&&(FrequencySpeedFilter <= 10))
 8001aa0:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	d90a      	bls.n	8001abe <GetConstantFilter+0x82>
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d806      	bhi.n	8001abe <GetConstantFilter+0x82>
		{
		    b_i = 0.93908194;
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001ab2:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <GetConstantFilter+0x20c>)
 8001ab4:	601a      	str	r2, [r3, #0]
		    a_i = 0.03045903;
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <GetConstantFilter+0x204>)
 8001ab8:	4a64      	ldr	r2, [pc, #400]	; (8001c4c <GetConstantFilter+0x210>)
 8001aba:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 2;
		    break;
 8001abc:	e0b3      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 3;
 8001abe:	4b5c      	ldr	r3, [pc, #368]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	701a      	strb	r2, [r3, #0]
		}


	  case 3:
		if ((FrequencySpeedFilter >= 11)&&(FrequencySpeedFilter <= 15))
 8001ac4:	4b5b      	ldr	r3, [pc, #364]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	d90a      	bls.n	8001ae2 <GetConstantFilter+0xa6>
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d806      	bhi.n	8001ae2 <GetConstantFilter+0xa6>
		{
		    b_i = 0.90999367;
 8001ad4:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001ad6:	4a5e      	ldr	r2, [pc, #376]	; (8001c50 <GetConstantFilter+0x214>)
 8001ad8:	601a      	str	r2, [r3, #0]
		    a_i = 0.04500317;
 8001ada:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <GetConstantFilter+0x204>)
 8001adc:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <GetConstantFilter+0x218>)
 8001ade:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 3;
		    break;
 8001ae0:	e0a1      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 4;
 8001ae2:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	701a      	strb	r2, [r3, #0]
		}


	  case 4:
		if ((FrequencySpeedFilter >= 16)&&(FrequencySpeedFilter <= 25))
 8001ae8:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d90a      	bls.n	8001b06 <GetConstantFilter+0xca>
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b19      	cmp	r3, #25
 8001af6:	d806      	bhi.n	8001b06 <GetConstantFilter+0xca>
		{
		    b_i = 0.85435899;
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001afa:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <GetConstantFilter+0x21c>)
 8001afc:	601a      	str	r2, [r3, #0]
		    a_i = 0.07282051;
 8001afe:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <GetConstantFilter+0x204>)
 8001b00:	4a56      	ldr	r2, [pc, #344]	; (8001c5c <GetConstantFilter+0x220>)
 8001b02:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 4;
		    break;
 8001b04:	e08f      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 5;
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001b08:	2205      	movs	r2, #5
 8001b0a:	701a      	strb	r2, [r3, #0]
		}


	  case 5:
		if ((FrequencySpeedFilter >= 26)&&(FrequencySpeedFilter <= 35))
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b19      	cmp	r3, #25
 8001b12:	d90a      	bls.n	8001b2a <GetConstantFilter+0xee>
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b23      	cmp	r3, #35	; 0x23
 8001b1a:	d806      	bhi.n	8001b2a <GetConstantFilter+0xee>
		{
		    b_i = 0.80187364;
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001b1e:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <GetConstantFilter+0x224>)
 8001b20:	601a      	str	r2, [r3, #0]
		    a_i = 0.09906318;
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <GetConstantFilter+0x204>)
 8001b24:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <GetConstantFilter+0x228>)
 8001b26:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 5;
		    break;
 8001b28:	e07d      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 6;
 8001b2a:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	701a      	strb	r2, [r3, #0]
		}


	  case 6:
		if ((FrequencySpeedFilter >= 36)&&(FrequencySpeedFilter <= 45))
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b23      	cmp	r3, #35	; 0x23
 8001b36:	d90a      	bls.n	8001b4e <GetConstantFilter+0x112>
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b2d      	cmp	r3, #45	; 0x2d
 8001b3e:	d806      	bhi.n	8001b4e <GetConstantFilter+0x112>
		{
		    b_i = 0.75227759;
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001b42:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <GetConstantFilter+0x22c>)
 8001b44:	601a      	str	r2, [r3, #0]
		    a_i = 0.1238612;
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <GetConstantFilter+0x204>)
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <GetConstantFilter+0x230>)
 8001b4a:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 6;
		    break;
 8001b4c:	e06b      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 7;
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	701a      	strb	r2, [r3, #0]
		}


	  case 7:
		if ((FrequencySpeedFilter >= 46)&&(FrequencySpeedFilter <= 55))
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b2d      	cmp	r3, #45	; 0x2d
 8001b5a:	d90a      	bls.n	8001b72 <GetConstantFilter+0x136>
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b37      	cmp	r3, #55	; 0x37
 8001b62:	d806      	bhi.n	8001b72 <GetConstantFilter+0x136>
		{
		    b_i = 0.70533864;
 8001b64:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001b66:	4a42      	ldr	r2, [pc, #264]	; (8001c70 <GetConstantFilter+0x234>)
 8001b68:	601a      	str	r2, [r3, #0]
		    a_i = 0.14733068;
 8001b6a:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <GetConstantFilter+0x204>)
 8001b6c:	4a41      	ldr	r2, [pc, #260]	; (8001c74 <GetConstantFilter+0x238>)
 8001b6e:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 7;
		    break;
 8001b70:	e059      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 8;
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001b74:	2208      	movs	r2, #8
 8001b76:	701a      	strb	r2, [r3, #0]
		}


	  case 8:
		if ((FrequencySpeedFilter >= 56)&&(FrequencySpeedFilter <= 65))
 8001b78:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b37      	cmp	r3, #55	; 0x37
 8001b7e:	d90a      	bls.n	8001b96 <GetConstantFilter+0x15a>
 8001b80:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b41      	cmp	r3, #65	; 0x41
 8001b86:	d806      	bhi.n	8001b96 <GetConstantFilter+0x15a>
		{
		    b_i = 0.66084882;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <GetConstantFilter+0x23c>)
 8001b8c:	601a      	str	r2, [r3, #0]
		    a_i = 0.16957559;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <GetConstantFilter+0x204>)
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <GetConstantFilter+0x240>)
 8001b92:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 8;
		    break;
 8001b94:	e047      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 9;
 8001b96:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001b98:	2209      	movs	r2, #9
 8001b9a:	701a      	strb	r2, [r3, #0]
		}


	  case 9:
		if ((FrequencySpeedFilter >= 66)&&(FrequencySpeedFilter <= 75))
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b41      	cmp	r3, #65	; 0x41
 8001ba2:	d90a      	bls.n	8001bba <GetConstantFilter+0x17e>
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b4b      	cmp	r3, #75	; 0x4b
 8001baa:	d806      	bhi.n	8001bba <GetConstantFilter+0x17e>
		{
		    b_i = 0.61862133;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <GetConstantFilter+0x244>)
 8001bb0:	601a      	str	r2, [r3, #0]
		    a_i = 0.19068933;
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <GetConstantFilter+0x204>)
 8001bb4:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <GetConstantFilter+0x248>)
 8001bb6:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 9;
		    break;
 8001bb8:	e035      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 10;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001bbc:	220a      	movs	r2, #10
 8001bbe:	701a      	strb	r2, [r3, #0]
		}


	  case 10:
		if ((FrequencySpeedFilter >= 76)&&(FrequencySpeedFilter <= 85))
 8001bc0:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b4b      	cmp	r3, #75	; 0x4b
 8001bc6:	d90a      	bls.n	8001bde <GetConstantFilter+0x1a2>
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b55      	cmp	r3, #85	; 0x55
 8001bce:	d806      	bhi.n	8001bde <GetConstantFilter+0x1a2>
		{
		    b_i = 0.57848789;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001bd2:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <GetConstantFilter+0x24c>)
 8001bd4:	601a      	str	r2, [r3, #0]
		    a_i = 0.21075605;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <GetConstantFilter+0x204>)
 8001bd8:	4a2c      	ldr	r2, [pc, #176]	; (8001c8c <GetConstantFilter+0x250>)
 8001bda:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 10;
		    break;
 8001bdc:	e023      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 11;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001be0:	220b      	movs	r2, #11
 8001be2:	701a      	strb	r2, [r3, #0]
		}


	  case 11:
		if ((FrequencySpeedFilter >= 86)&&(FrequencySpeedFilter <= 95))
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b55      	cmp	r3, #85	; 0x55
 8001bea:	d90a      	bls.n	8001c02 <GetConstantFilter+0x1c6>
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf2:	d806      	bhi.n	8001c02 <GetConstantFilter+0x1c6>
		{
		    b_i = 0.5402965;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001bf6:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <GetConstantFilter+0x254>)
 8001bf8:	601a      	str	r2, [r3, #0]
		    a_i = 0.22985175;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <GetConstantFilter+0x204>)
 8001bfc:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <GetConstantFilter+0x258>)
 8001bfe:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 11;
		    break;
 8001c00:	e011      	b.n	8001c26 <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 12;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001c04:	220c      	movs	r2, #12
 8001c06:	701a      	strb	r2, [r3, #0]
		}


	  case 12:
	  		if (FrequencySpeedFilter >= 96)
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <GetConstantFilter+0x1f8>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b5f      	cmp	r3, #95	; 0x5f
 8001c0e:	d906      	bls.n	8001c1e <GetConstantFilter+0x1e2>
	  		{
	  		    b_i = 0.50390953;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <GetConstantFilter+0x1fc>)
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <GetConstantFilter+0x25c>)
 8001c14:	601a      	str	r2, [r3, #0]
	  		    a_i = 0.24804523;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <GetConstantFilter+0x204>)
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <GetConstantFilter+0x260>)
 8001c1a:	601a      	str	r2, [r3, #0]
	  		    //FrequencySpeedFilter = 10;
	  		    break;
 8001c1c:	e003      	b.n	8001c26 <GetConstantFilter+0x1ea>
	  		}
	  		else
	  		{
	  			FrequencyCase = 1;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <GetConstantFilter+0x1f4>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	  		}

}
}
 8001c24:	e7ff      	b.n	8001c26 <GetConstantFilter+0x1ea>
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000002 	.word	0x20000002
 8001c34:	20000001 	.word	0x20000001
 8001c38:	200004b8 	.word	0x200004b8
 8001c3c:	3f7814f7 	.word	0x3f7814f7
 8001c40:	200004bc 	.word	0x200004bc
 8001c44:	3c7d6114 	.word	0x3c7d6114
 8001c48:	3f7067ad 	.word	0x3f7067ad
 8001c4c:	3cf98537 	.word	0x3cf98537
 8001c50:	3f68f558 	.word	0x3f68f558
 8001c54:	3d38553e 	.word	0x3d38553e
 8001c58:	3f5ab745 	.word	0x3f5ab745
 8001c5c:	3d9522eb 	.word	0x3d9522eb
 8001c60:	3f4d4797 	.word	0x3f4d4797
 8001c64:	3dcae1a3 	.word	0x3dcae1a3
 8001c68:	3f409544 	.word	0x3f409544
 8001c6c:	3dfdaaf1 	.word	0x3dfdaaf1
 8001c70:	3f349113 	.word	0x3f349113
 8001c74:	3e16dddb 	.word	0x3e16dddb
 8001c78:	3f292d63 	.word	0x3f292d63
 8001c7c:	3e2da539 	.word	0x3e2da539
 8001c80:	3f1e5df8 	.word	0x3f1e5df8
 8001c84:	3e434410 	.word	0x3e434410
 8001c88:	3f1417c8 	.word	0x3f1417c8
 8001c8c:	3e57d06f 	.word	0x3e57d06f
 8001c90:	3f0a50df 	.word	0x3f0a50df
 8001c94:	3e6b5e42 	.word	0x3e6b5e42
 8001c98:	3f010037 	.word	0x3f010037
 8001c9c:	3e7dff92 	.word	0x3e7dff92

08001ca0 <EnablePhaseA>:
//----------------------------FINE  CONTROLLARE NON FUNZIONANTE--------------------------

//---------------------------- ENABLE PIN STEPPER MOTOR----------------------------------

void EnablePhaseA(void)  // Phase A
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Enable_A_PhaseStepper_Pin, GPIO_PIN_SET); //Enable PhaseA with PA8 - D7
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001caa:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <EnablePhaseA+0x14>)
 8001cac:	f001 f912 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020000 	.word	0x40020000

08001cb8 <EnablePhaseB>:
	HAL_GPIO_WritePin(GPIOA, Enable_A_PhaseStepper_Pin, GPIO_PIN_RESET); //Enable PhaseA with PA8 - D7

}

void EnablePhaseB(void)  // Phase B
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Enable_B_PhaseStepper_Pin, GPIO_PIN_SET); //Enable PhaseA with PA8 - D7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc2:	4802      	ldr	r0, [pc, #8]	; (8001ccc <EnablePhaseB+0x14>)
 8001cc4:	f001 f906 	bl	8002ed4 <HAL_GPIO_WritePin>

}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <CW_Direction>:
}
//---------------------------- FINE ENABLE PIN STEPPER MOTOR----------------------------------

//---------------------------- MOVE IN CLOCKWISE DIRECTION STEPPER MOTOR----------------------
void CW_Direction(uint8_t HalfStepMode, uint16_t DemmandSpeedStep)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	80bb      	strh	r3, [r7, #4]
    uint8_t IncremnentStepping = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]


	if (HalfStepMode == 1)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	f040 8167 	bne.w	8001fba <CW_Direction+0x2ea>
	{
		EnablePhaseA();
 8001cec:	f7ff ffd8 	bl	8001ca0 <EnablePhaseA>
		EnablePhaseB();
 8001cf0:	f7ff ffe2 	bl	8001cb8 <EnablePhaseB>

//		if (ActualMotorStep <= DemandMotorStep)
//		{
			if(IncremnentStepping >= 8)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	d901      	bls.n	8001cfe <CW_Direction+0x2e>
			{
				IncremnentStepping = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
			}
			STMStepper = 1;
 8001cfe:	4bb6      	ldr	r3, [pc, #728]	; (8001fd8 <CW_Direction+0x308>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
			//-------------------------HALF STEPPING-------------------------------------------------------

			switch (STMStepper) {
 8001d04:	4bb4      	ldr	r3, [pc, #720]	; (8001fd8 <CW_Direction+0x308>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	f200 815d 	bhi.w	8001fca <CW_Direction+0x2fa>
 8001d10:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <CW_Direction+0x48>)
 8001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d16:	bf00      	nop
 8001d18:	08001d39 	.word	0x08001d39
 8001d1c:	08001d89 	.word	0x08001d89
 8001d20:	08001dd9 	.word	0x08001dd9
 8001d24:	08001e29 	.word	0x08001e29
 8001d28:	08001e79 	.word	0x08001e79
 8001d2c:	08001ec9 	.word	0x08001ec9
 8001d30:	08001f19 	.word	0x08001f19
 8001d34:	08001f69 	.word	0x08001f69
				  case 1:
					if(STMStepper == 1)
 8001d38:	4ba7      	ldr	r3, [pc, #668]	; (8001fd8 <CW_Direction+0x308>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d123      	bne.n	8001d88 <CW_Direction+0xb8>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_SET);
 8001d40:	2201      	movs	r2, #1
 8001d42:	2110      	movs	r1, #16
 8001d44:	48a5      	ldr	r0, [pc, #660]	; (8001fdc <CW_Direction+0x30c>)
 8001d46:	f001 f8c5 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	48a4      	ldr	r0, [pc, #656]	; (8001fe0 <CW_Direction+0x310>)
 8001d50:	f001 f8c0 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5a:	48a0      	ldr	r0, [pc, #640]	; (8001fdc <CW_Direction+0x30c>)
 8001d5c:	f001 f8ba 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	489d      	ldr	r0, [pc, #628]	; (8001fdc <CW_Direction+0x30c>)
 8001d66:	f001 f8b5 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001d6a:	4b9e      	ldr	r3, [pc, #632]	; (8001fe4 <CW_Direction+0x314>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	4a9c      	ldr	r2, [pc, #624]	; (8001fe4 <CW_Direction+0x314>)
 8001d72:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	3301      	adds	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001d7a:	88bb      	ldrh	r3, [r7, #4]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f94f 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 2;
 8001d82:	4b95      	ldr	r3, [pc, #596]	; (8001fd8 <CW_Direction+0x308>)
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 2:
					if(STMStepper == 2)
 8001d88:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <CW_Direction+0x308>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d123      	bne.n	8001dd8 <CW_Direction+0x108>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	2110      	movs	r1, #16
 8001d94:	4891      	ldr	r0, [pc, #580]	; (8001fdc <CW_Direction+0x30c>)
 8001d96:	f001 f89d 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4890      	ldr	r0, [pc, #576]	; (8001fe0 <CW_Direction+0x310>)
 8001da0:	f001 f898 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001daa:	488c      	ldr	r0, [pc, #560]	; (8001fdc <CW_Direction+0x30c>)
 8001dac:	f001 f892 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2140      	movs	r1, #64	; 0x40
 8001db4:	4889      	ldr	r0, [pc, #548]	; (8001fdc <CW_Direction+0x30c>)
 8001db6:	f001 f88d 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001dba:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <CW_Direction+0x314>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a88      	ldr	r2, [pc, #544]	; (8001fe4 <CW_Direction+0x314>)
 8001dc2:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f927 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 3;
 8001dd2:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <CW_Direction+0x308>)
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 3:
					if(STMStepper == 3)
 8001dd8:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <CW_Direction+0x308>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d123      	bne.n	8001e28 <CW_Direction+0x158>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2110      	movs	r1, #16
 8001de4:	487d      	ldr	r0, [pc, #500]	; (8001fdc <CW_Direction+0x30c>)
 8001de6:	f001 f875 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	487c      	ldr	r0, [pc, #496]	; (8001fe0 <CW_Direction+0x310>)
 8001df0:	f001 f870 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfa:	4878      	ldr	r0, [pc, #480]	; (8001fdc <CW_Direction+0x30c>)
 8001dfc:	f001 f86a 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2140      	movs	r1, #64	; 0x40
 8001e04:	4875      	ldr	r0, [pc, #468]	; (8001fdc <CW_Direction+0x30c>)
 8001e06:	f001 f865 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <CW_Direction+0x314>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a74      	ldr	r2, [pc, #464]	; (8001fe4 <CW_Direction+0x314>)
 8001e12:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	3301      	adds	r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f8ff 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 4;
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <CW_Direction+0x308>)
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 4:
					if(STMStepper == 4)
 8001e28:	4b6b      	ldr	r3, [pc, #428]	; (8001fd8 <CW_Direction+0x308>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d123      	bne.n	8001e78 <CW_Direction+0x1a8>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_RESET);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2110      	movs	r1, #16
 8001e34:	4869      	ldr	r0, [pc, #420]	; (8001fdc <CW_Direction+0x30c>)
 8001e36:	f001 f84d 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	4868      	ldr	r0, [pc, #416]	; (8001fe0 <CW_Direction+0x310>)
 8001e40:	f001 f848 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	4864      	ldr	r0, [pc, #400]	; (8001fdc <CW_Direction+0x30c>)
 8001e4c:	f001 f842 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4861      	ldr	r0, [pc, #388]	; (8001fdc <CW_Direction+0x30c>)
 8001e56:	f001 f83d 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <CW_Direction+0x314>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a60      	ldr	r2, [pc, #384]	; (8001fe4 <CW_Direction+0x314>)
 8001e62:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	3301      	adds	r3, #1
 8001e68:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f8d7 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 5;
 8001e72:	4b59      	ldr	r3, [pc, #356]	; (8001fd8 <CW_Direction+0x308>)
 8001e74:	2205      	movs	r2, #5
 8001e76:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 5:
					if(STMStepper == 5)
 8001e78:	4b57      	ldr	r3, [pc, #348]	; (8001fd8 <CW_Direction+0x308>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d123      	bne.n	8001ec8 <CW_Direction+0x1f8>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_RESET);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2110      	movs	r1, #16
 8001e84:	4855      	ldr	r0, [pc, #340]	; (8001fdc <CW_Direction+0x30c>)
 8001e86:	f001 f825 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	4854      	ldr	r0, [pc, #336]	; (8001fe0 <CW_Direction+0x310>)
 8001e90:	f001 f820 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9a:	4850      	ldr	r0, [pc, #320]	; (8001fdc <CW_Direction+0x30c>)
 8001e9c:	f001 f81a 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2140      	movs	r1, #64	; 0x40
 8001ea4:	484d      	ldr	r0, [pc, #308]	; (8001fdc <CW_Direction+0x30c>)
 8001ea6:	f001 f815 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001eaa:	4b4e      	ldr	r3, [pc, #312]	; (8001fe4 <CW_Direction+0x314>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <CW_Direction+0x314>)
 8001eb2:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f8af 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 6;
 8001ec2:	4b45      	ldr	r3, [pc, #276]	; (8001fd8 <CW_Direction+0x308>)
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 6:
					if(STMStepper == 6)
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <CW_Direction+0x308>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b06      	cmp	r3, #6
 8001ece:	d123      	bne.n	8001f18 <CW_Direction+0x248>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4841      	ldr	r0, [pc, #260]	; (8001fdc <CW_Direction+0x30c>)
 8001ed6:	f000 fffd 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	4840      	ldr	r0, [pc, #256]	; (8001fe0 <CW_Direction+0x310>)
 8001ee0:	f000 fff8 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eea:	483c      	ldr	r0, [pc, #240]	; (8001fdc <CW_Direction+0x30c>)
 8001eec:	f000 fff2 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	4839      	ldr	r0, [pc, #228]	; (8001fdc <CW_Direction+0x30c>)
 8001ef6:	f000 ffed 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001efa:	4b3a      	ldr	r3, [pc, #232]	; (8001fe4 <CW_Direction+0x314>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <CW_Direction+0x314>)
 8001f02:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001f0a:	88bb      	ldrh	r3, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f887 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 7;
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <CW_Direction+0x308>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 7:
					if(STMStepper == 7)
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <CW_Direction+0x308>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d123      	bne.n	8001f68 <CW_Direction+0x298>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2110      	movs	r1, #16
 8001f24:	482d      	ldr	r0, [pc, #180]	; (8001fdc <CW_Direction+0x30c>)
 8001f26:	f000 ffd5 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	482c      	ldr	r0, [pc, #176]	; (8001fe0 <CW_Direction+0x310>)
 8001f30:	f000 ffd0 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f3a:	4828      	ldr	r0, [pc, #160]	; (8001fdc <CW_Direction+0x30c>)
 8001f3c:	f000 ffca 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2140      	movs	r1, #64	; 0x40
 8001f44:	4825      	ldr	r0, [pc, #148]	; (8001fdc <CW_Direction+0x30c>)
 8001f46:	f000 ffc5 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <CW_Direction+0x314>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <CW_Direction+0x314>)
 8001f52:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	3301      	adds	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f85f 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 8;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <CW_Direction+0x308>)
 8001f64:	2208      	movs	r2, #8
 8001f66:	701a      	strb	r2, [r3, #0]
					}
					//break;
				  case 8:
					if(STMStepper == 8)
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <CW_Direction+0x308>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d12e      	bne.n	8001fce <CW_Direction+0x2fe>
					{
						HAL_GPIO_WritePin(GPIOB, IN1_PhaseA_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2110      	movs	r1, #16
 8001f74:	4819      	ldr	r0, [pc, #100]	; (8001fdc <CW_Direction+0x30c>)
 8001f76:	f000 ffad 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <CW_Direction+0x310>)
 8001f80:	f000 ffa8 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8a:	4814      	ldr	r0, [pc, #80]	; (8001fdc <CW_Direction+0x30c>)
 8001f8c:	f000 ffa2 	bl	8002ed4 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, IN2_PhaseB_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2140      	movs	r1, #64	; 0x40
 8001f94:	4811      	ldr	r0, [pc, #68]	; (8001fdc <CW_Direction+0x30c>)
 8001f96:	f000 ff9d 	bl	8002ed4 <HAL_GPIO_WritePin>
						ActualMotorStep++;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <CW_Direction+0x314>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <CW_Direction+0x314>)
 8001fa2:	6013      	str	r3, [r2, #0]
						IncremnentStepping++;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
						//HAL_Delay(DemmandSpeedRPM);
						DELAY_SPEEDSTEP(DemmandSpeedStep); //10000 is 100us
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f837 	bl	8002020 <DELAY_SPEEDSTEP>
						STMStepper = 9;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <CW_Direction+0x308>)
 8001fb4:	2209      	movs	r2, #9
 8001fb6:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001fb8:	e009      	b.n	8001fce <CW_Direction+0x2fe>
					}
//	}
//		DisablePhaseA();
//		DisablePhaseB();
	}
	else if(HalfStepMode == 0)
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <CW_Direction+0x300>
	{
		EnablePhaseA();
 8001fc0:	f7ff fe6e 	bl	8001ca0 <EnablePhaseA>
		EnablePhaseB();
 8001fc4:	f7ff fe78 	bl	8001cb8 <EnablePhaseB>
 8001fc8:	e002      	b.n	8001fd0 <CW_Direction+0x300>
					  default: return 1;
 8001fca:	bf00      	nop
 8001fcc:	e000      	b.n	8001fd0 <CW_Direction+0x300>
					break;
 8001fce:	bf00      	nop
	}
}
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	200004f4 	.word	0x200004f4

08001fe8 <HAL_TIM_PeriodElapsedCallback>:



// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d006      	beq.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  //TickSerial = 1;
  }
  else if (htim == &htim7)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d102      	bne.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  TickSerial = 1;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	2000024c 	.word	0x2000024c
 8002018:	20000294 	.word	0x20000294
 800201c:	200004fc 	.word	0x200004fc

08002020 <DELAY_SPEEDSTEP>:

void DELAY_SPEEDSTEP (uint16_t StepSpeed_delay)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER (&htim1, 0);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <DELAY_SPEEDSTEP+0x30>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)< StepSpeed_delay);
 8002032:	bf00      	nop
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <DELAY_SPEEDSTEP+0x30>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	429a      	cmp	r2, r3
 800203e:	d3f9      	bcc.n	8002034 <DELAY_SPEEDSTEP+0x14>
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000204 	.word	0x20000204

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>

0800205e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_MspInit+0x4c>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <HAL_MspInit+0x4c>)
 8002084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002088:	6453      	str	r3, [r2, #68]	; 0x44
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_MspInit+0x4c>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_MspInit+0x4c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_MspInit+0x4c>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_MspInit+0x4c>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020b2:	2007      	movs	r0, #7
 80020b4:	f000 fb54 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_TIM_Base_MspInit+0x98>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a20      	ldr	r2, [pc, #128]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80020f2:	e02e      	b.n	8002152 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_TIM_Base_MspInit+0xa0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 8002108:	f043 0310 	orr.w	r3, r3, #16
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]
}
 800211a:	e01a      	b.n	8002152 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_TIM_Base_MspInit+0xa4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d115      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 8002130:	f043 0320 	orr.w	r3, r3, #32
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_TIM_Base_MspInit+0x9c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2037      	movs	r0, #55	; 0x37
 8002148:	f000 fb2a 	bl	80027a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800214c:	2037      	movs	r0, #55	; 0x37
 800214e:	f000 fb53 	bl	80027f8 <HAL_NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40023800 	.word	0x40023800
 8002164:	40001000 	.word	0x40001000
 8002168:	40001400 	.word	0x40001400

0800216c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <HAL_UART_MspInit+0x84>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d12b      	bne.n	80021e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <HAL_UART_MspInit+0x88>)
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_UART_MspInit+0x88>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021c6:	230c      	movs	r3, #12
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d6:	2307      	movs	r3, #7
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_UART_MspInit+0x8c>)
 80021e2:	f000 fb2d 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40004400 	.word	0x40004400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <NMI_Handler+0x4>

08002202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <HardFault_Handler+0x4>

08002208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <MemManage_Handler+0x4>

0800220e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <UsageFault_Handler+0x4>

0800221a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002248:	f000 f976 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}

08002250 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8002254:	2001      	movs	r0, #1
 8002256:	f000 fe97 	bl	8002f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}

0800225e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 8002262:	2002      	movs	r0, #2
 8002264:	f000 fe90 	bl	8002f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002270:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002274:	f000 fe88 	bl	8002f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002280:	4802      	ldr	r0, [pc, #8]	; (800228c <TIM7_IRQHandler+0x10>)
 8002282:	f001 ffb5 	bl	80041f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000294 	.word	0x20000294

08002290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return 1;
 8002294:	2301      	movs	r3, #1
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_kill>:

int _kill(int pid, int sig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022aa:	f003 fb11 	bl	80058d0 <__errno>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2216      	movs	r2, #22
 80022b2:	601a      	str	r2, [r3, #0]
  return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_exit>:

void _exit (int status)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffe7 	bl	80022a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0x12>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
  }

  return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e009      	b.n	8002334 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	dbf1      	blt.n	8002320 <_write+0x12>
  }
  return len;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <_close>:

int _close(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236e:	605a      	str	r2, [r3, #4]
  return 0;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_isatty>:

int _isatty(int file)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <_sbrk+0x5c>)
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <_sbrk+0x60>)
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <_sbrk+0x64>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	; (8002418 <_sbrk+0x68>)
 80023d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e0:	f003 fa76 	bl	80058d0 <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	220c      	movs	r2, #12
 80023e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
 80023ee:	e009      	b.n	8002404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f6:	4b07      	ldr	r3, [pc, #28]	; (8002414 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <_sbrk+0x64>)
 8002400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20020000 	.word	0x20020000
 8002410:	00000400 	.word	0x00000400
 8002414:	20000500 	.word	0x20000500
 8002418:	20000518 	.word	0x20000518

0800241c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <SystemInit+0x20>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <SystemInit+0x20>)
 8002428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800242c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002444:	480d      	ldr	r0, [pc, #52]	; (800247c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002446:	490e      	ldr	r1, [pc, #56]	; (8002480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002448:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800244c:	e002      	b.n	8002454 <LoopCopyDataInit>

0800244e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800244e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002452:	3304      	adds	r3, #4

08002454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002458:	d3f9      	bcc.n	800244e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800245c:	4c0b      	ldr	r4, [pc, #44]	; (800248c <LoopFillZerobss+0x26>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002460:	e001      	b.n	8002466 <LoopFillZerobss>

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002464:	3204      	adds	r2, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800246a:	f7ff ffd7 	bl	800241c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246e:	f003 fa35 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002472:	f7fe fd8b 	bl	8000f8c <main>
  bx  lr    
 8002476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002484:	08008edc 	.word	0x08008edc
  ldr r2, =_sbss
 8002488:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800248c:	20000518 	.word	0x20000518

08002490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC_IRQHandler>
	...

08002494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <HAL_Init+0x40>)
 800249e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <HAL_Init+0x40>)
 80024aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x40>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 f94f 	bl	8002760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fdd4 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f996 	bl	8002828 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f944 	bl	80027a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	2000000c 	.word	0x2000000c
 8002530:	20000014 	.word	0x20000014
 8002534:	20000010 	.word	0x20000010

08002538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x20>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x24>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_IncTick+0x24>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000014 	.word	0x20000014
 800255c:	20000504 	.word	0x20000504

08002560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetTick+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000504 	.word	0x20000504

08002578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff ffee 	bl	8002560 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d005      	beq.n	800259e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_Delay+0x44>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800259e:	bf00      	nop
 80025a0:	f7ff ffde 	bl	8002560 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8f7      	bhi.n	80025a0 <HAL_Delay+0x28>
  {
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000014 	.word	0x20000014

080025c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f2:	4a04      	ldr	r2, [pc, #16]	; (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60d3      	str	r3, [r2, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <__NVIC_GetPriorityGrouping+0x18>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	f003 0307 	and.w	r3, r3, #7
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db0b      	blt.n	800264e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <__NVIC_EnableIRQ+0x38>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2001      	movs	r0, #1
 8002646:	fa00 f202 	lsl.w	r2, r0, r2
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	; (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	; (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272c:	d301      	bcc.n	8002732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272e:	2301      	movs	r3, #1
 8002730:	e00f      	b.n	8002752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002732:	4a0a      	ldr	r2, [pc, #40]	; (800275c <SysTick_Config+0x40>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273a:	210f      	movs	r1, #15
 800273c:	f04f 30ff 	mov.w	r0, #4294967295
 8002740:	f7ff ff8e 	bl	8002660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SysTick_Config+0x40>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <SysTick_Config+0x40>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	e000e010 	.word	0xe000e010

08002760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b07      	cmp	r3, #7
 800276c:	d00f      	beq.n	800278e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d00c      	beq.n	800278e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d009      	beq.n	800278e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b04      	cmp	r3, #4
 800277e:	d006      	beq.n	800278e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d003      	beq.n	800278e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002786:	2190      	movs	r1, #144	; 0x90
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800278a:	f7ff fc68 	bl	800205e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff16 	bl	80025c0 <__NVIC_SetPriorityGrouping>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	080087ac 	.word	0x080087ac

080027a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d903      	bls.n	80027c0 <HAL_NVIC_SetPriority+0x20>
 80027b8:	21a8      	movs	r1, #168	; 0xa8
 80027ba:	480e      	ldr	r0, [pc, #56]	; (80027f4 <HAL_NVIC_SetPriority+0x54>)
 80027bc:	f7ff fc4f 	bl	800205e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b0f      	cmp	r3, #15
 80027c4:	d903      	bls.n	80027ce <HAL_NVIC_SetPriority+0x2e>
 80027c6:	21a9      	movs	r1, #169	; 0xa9
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <HAL_NVIC_SetPriority+0x54>)
 80027ca:	f7ff fc48 	bl	800205e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ce:	f7ff ff1b 	bl	8002608 <__NVIC_GetPriorityGrouping>
 80027d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff ff6b 	bl	80026b4 <NVIC_EncodePriority>
 80027de:	4602      	mov	r2, r0
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff3a 	bl	8002660 <__NVIC_SetPriority>
}
 80027ec:	bf00      	nop
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	080087ac 	.word	0x080087ac

080027f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da03      	bge.n	8002812 <HAL_NVIC_EnableIRQ+0x1a>
 800280a:	21bc      	movs	r1, #188	; 0xbc
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <HAL_NVIC_EnableIRQ+0x2c>)
 800280e:	f7ff fc26 	bl	800205e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff04 	bl	8002624 <__NVIC_EnableIRQ>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	080087ac 	.word	0x080087ac

08002828 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff73 	bl	800271c <SysTick_Config>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a37      	ldr	r2, [pc, #220]	; (8002938 <HAL_GPIO_Init+0xf8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01f      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_GPIO_Init+0xfc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01b      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_GPIO_Init+0x100>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d017      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a34      	ldr	r2, [pc, #208]	; (8002944 <HAL_GPIO_Init+0x104>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <HAL_GPIO_Init+0x108>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00f      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a32      	ldr	r2, [pc, #200]	; (800294c <HAL_GPIO_Init+0x10c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a31      	ldr	r2, [pc, #196]	; (8002950 <HAL_GPIO_Init+0x110>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x114>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x5e>
 8002896:	21ac      	movs	r1, #172	; 0xac
 8002898:	482f      	ldr	r0, [pc, #188]	; (8002958 <HAL_GPIO_Init+0x118>)
 800289a:	f7ff fbe0 	bl	800205e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_GPIO_Init+0x74>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x7c>
 80028b4:	21ad      	movs	r1, #173	; 0xad
 80028b6:	4828      	ldr	r0, [pc, #160]	; (8002958 <HAL_GPIO_Init+0x118>)
 80028b8:	f7ff fbd1 	bl	800205e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d035      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d031      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b11      	cmp	r3, #17
 80028d2:	d02d      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d029      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b12      	cmp	r3, #18
 80028e2:	d025      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80028ec:	d020      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80028f6:	d01b      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002900:	d016      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800290a:	d011      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002914:	d00c      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
 8002928:	21ae      	movs	r1, #174	; 0xae
 800292a:	480b      	ldr	r0, [pc, #44]	; (8002958 <HAL_GPIO_Init+0x118>)
 800292c:	f7ff fb97 	bl	800205e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	e289      	b.n	8002e4a <HAL_GPIO_Init+0x60a>
 8002936:	bf00      	nop
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400
 8002940:	40020800 	.word	0x40020800
 8002944:	40020c00 	.word	0x40020c00
 8002948:	40021000 	.word	0x40021000
 800294c:	40021400 	.word	0x40021400
 8002950:	40021800 	.word	0x40021800
 8002954:	40021c00 	.word	0x40021c00
 8002958:	08008820 	.word	0x08008820
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8265 	bne.w	8002e44 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d144      	bne.n	8002a1c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00f      	beq.n	80029ba <HAL_GPIO_Init+0x17a>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d00b      	beq.n	80029ba <HAL_GPIO_Init+0x17a>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d007      	beq.n	80029ba <HAL_GPIO_Init+0x17a>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x17a>
 80029b2:	21c0      	movs	r1, #192	; 0xc0
 80029b4:	4831      	ldr	r0, [pc, #196]	; (8002a7c <HAL_GPIO_Init+0x23c>)
 80029b6:	f7ff fb52 	bl	800205e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d02b      	beq.n	8002a80 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_GPIO_Init+0x208>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d007      	beq.n	8002a48 <HAL_GPIO_Init+0x208>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x208>
 8002a40:	21d1      	movs	r1, #209	; 0xd1
 8002a42:	480e      	ldr	r0, [pc, #56]	; (8002a7c <HAL_GPIO_Init+0x23c>)
 8002a44:	f7ff fb0b 	bl	800205e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2203      	movs	r2, #3
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	e002      	b.n	8002a80 <HAL_GPIO_Init+0x240>
 8002a7a:	bf00      	nop
 8002a7c:	08008820 	.word	0x08008820
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	f040 810c 	bne.w	8002ca6 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80e3 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	f000 80de 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 80d9 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80d4 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80cf 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80ca 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f000 80c5 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f000 80c0 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	f000 80bb 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f000 80b6 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f000 80b1 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	f000 80ac 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	f000 80a7 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	f000 80a2 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	f000 809d 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	f000 8098 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	f000 8093 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b09      	cmp	r3, #9
 8002b3e:	f000 808e 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	f000 8089 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	f000 8084 	beq.w	8002c5e <HAL_GPIO_Init+0x41e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b07      	cmp	r3, #7
 8002b5c:	d07f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b07      	cmp	r3, #7
 8002b64:	d07b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	d077      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d073      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d06f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d06b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b09      	cmp	r3, #9
 8002b8c:	d067      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d063      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b0a      	cmp	r3, #10
 8002b9c:	d05f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b0a      	cmp	r3, #10
 8002ba4:	d05b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b0b      	cmp	r3, #11
 8002bac:	d057      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d053      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d04f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b0d      	cmp	r3, #13
 8002bc4:	d04b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b0f      	cmp	r3, #15
 8002bcc:	d047      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d043      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d03f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d03b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d037      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d033      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d02f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d02b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d027      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d023      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b07      	cmp	r3, #7
 8002c1c:	d01f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b07      	cmp	r3, #7
 8002c24:	d01b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	d017      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d013      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d00f      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d00b      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b0a      	cmp	r3, #10
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x41e>
 8002c56:	21de      	movs	r1, #222	; 0xde
 8002c58:	4880      	ldr	r0, [pc, #512]	; (8002e5c <HAL_GPIO_Init+0x61c>)
 8002c5a:	f7ff fa00 	bl	800205e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	69b9      	ldr	r1, [r7, #24]
 8002ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80ae 	beq.w	8002e44 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_GPIO_Init+0x620>)
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_GPIO_Init+0x620>)
 8002cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf6:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf8:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <HAL_GPIO_Init+0x620>)
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d04:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_GPIO_Init+0x624>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_GPIO_Init+0x628>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d025      	beq.n	8002d7c <HAL_GPIO_Init+0x53c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_GPIO_Init+0x62c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01f      	beq.n	8002d78 <HAL_GPIO_Init+0x538>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a4d      	ldr	r2, [pc, #308]	; (8002e70 <HAL_GPIO_Init+0x630>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d019      	beq.n	8002d74 <HAL_GPIO_Init+0x534>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_GPIO_Init+0x634>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_GPIO_Init+0x530>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_GPIO_Init+0x638>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00d      	beq.n	8002d6c <HAL_GPIO_Init+0x52c>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_GPIO_Init+0x63c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <HAL_GPIO_Init+0x528>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a49      	ldr	r2, [pc, #292]	; (8002e80 <HAL_GPIO_Init+0x640>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_GPIO_Init+0x524>
 8002d60:	2306      	movs	r3, #6
 8002d62:	e00c      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d64:	2307      	movs	r3, #7
 8002d66:	e00a      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d68:	2305      	movs	r3, #5
 8002d6a:	e008      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e006      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d70:	2303      	movs	r3, #3
 8002d72:	e004      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e002      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_GPIO_Init+0x53e>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f002 0203 	and.w	r2, r2, #3
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	4093      	lsls	r3, r2
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d8e:	4935      	ldr	r1, [pc, #212]	; (8002e64 <HAL_GPIO_Init+0x624>)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	3302      	adds	r3, #2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e14:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e3e:	4a11      	ldr	r2, [pc, #68]	; (8002e84 <HAL_GPIO_Init+0x644>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	2b0f      	cmp	r3, #15
 8002e4e:	f67f ad85 	bls.w	800295c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	08008820 	.word	0x08008820
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020800 	.word	0x40020800
 8002e74:	40020c00 	.word	0x40020c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40021400 	.word	0x40021400
 8002e80:	40021800 	.word	0x40021800
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002e94:	887b      	ldrh	r3, [r7, #2]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_GPIO_ReadPin+0x1c>
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <HAL_GPIO_ReadPin+0x26>
 8002ea4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002ea8:	4809      	ldr	r0, [pc, #36]	; (8002ed0 <HAL_GPIO_ReadPin+0x48>)
 8002eaa:	f7ff f8d8 	bl	800205e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e001      	b.n	8002ec4 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	08008820 	.word	0x08008820

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_GPIO_WritePin+0x20>
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_GPIO_WritePin+0x2a>
 8002ef4:	f240 119d 	movw	r1, #413	; 0x19d
 8002ef8:	480e      	ldr	r0, [pc, #56]	; (8002f34 <HAL_GPIO_WritePin+0x60>)
 8002efa:	f7ff f8b0 	bl	800205e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002efe:	787b      	ldrb	r3, [r7, #1]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_GPIO_WritePin+0x40>
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d004      	beq.n	8002f14 <HAL_GPIO_WritePin+0x40>
 8002f0a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002f0e:	4809      	ldr	r0, [pc, #36]	; (8002f34 <HAL_GPIO_WritePin+0x60>)
 8002f10:	f7ff f8a5 	bl	800205e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	08008820 	.word	0x08008820

08002f38 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_GPIO_TogglePin+0x1c>
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_GPIO_TogglePin+0x26>
 8002f54:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002f58:	480a      	ldr	r0, [pc, #40]	; (8002f84 <HAL_GPIO_TogglePin+0x4c>)
 8002f5a:	f7ff f880 	bl	800205e <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f64:	887a      	ldrh	r2, [r7, #2]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	041a      	lsls	r2, r3, #16
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	400b      	ands	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08008820 	.word	0x08008820

08002f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f9e:	4a05      	ldr	r2, [pc, #20]	; (8002fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fb60 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e18c      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x24>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d904      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x2e>
 8002fdc:	f240 215a 	movw	r1, #602	; 0x25a
 8002fe0:	4887      	ldr	r0, [pc, #540]	; (8003200 <HAL_RCC_ClockConfig+0x248>)
 8002fe2:	f7ff f83c 	bl	800205e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d031      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d02e      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d02b      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d028      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d025      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d022      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d01f      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b07      	cmp	r3, #7
 8003014:	d01c      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d019      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b09      	cmp	r3, #9
 8003020:	d016      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b0a      	cmp	r3, #10
 8003026:	d013      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b0b      	cmp	r3, #11
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d00d      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b0d      	cmp	r3, #13
 8003038:	d00a      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b0e      	cmp	r3, #14
 800303e:	d007      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d004      	beq.n	8003050 <HAL_RCC_ClockConfig+0x98>
 8003046:	f240 215b 	movw	r1, #603	; 0x25b
 800304a:	486d      	ldr	r0, [pc, #436]	; (8003200 <HAL_RCC_ClockConfig+0x248>)
 800304c:	f7ff f807 	bl	800205e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d90c      	bls.n	8003078 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b69      	ldr	r3, [pc, #420]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e136      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d049      	beq.n	8003118 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a5c      	ldr	r2, [pc, #368]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a56      	ldr	r2, [pc, #344]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d024      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b80      	cmp	r3, #128	; 0x80
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b90      	cmp	r3, #144	; 0x90
 80030ca:	d01c      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2ba0      	cmp	r3, #160	; 0xa0
 80030d2:	d018      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2bb0      	cmp	r3, #176	; 0xb0
 80030da:	d014      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2bc0      	cmp	r3, #192	; 0xc0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2bd0      	cmp	r3, #208	; 0xd0
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2be0      	cmp	r3, #224	; 0xe0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2bf0      	cmp	r3, #240	; 0xf0
 80030fa:	d004      	beq.n	8003106 <HAL_RCC_ClockConfig+0x14e>
 80030fc:	f240 217e 	movw	r1, #638	; 0x27e
 8003100:	483f      	ldr	r0, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x248>)
 8003102:	f7fe ffac 	bl	800205e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003106:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	493d      	ldr	r1, [pc, #244]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d059      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x196>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d00c      	beq.n	800314e <HAL_RCC_ClockConfig+0x196>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x196>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d004      	beq.n	800314e <HAL_RCC_ClockConfig+0x196>
 8003144:	f240 2185 	movw	r1, #645	; 0x285
 8003148:	482d      	ldr	r0, [pc, #180]	; (8003200 <HAL_RCC_ClockConfig+0x248>)
 800314a:	f7fe ff88 	bl	800205e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0bf      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0af      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b20      	ldr	r3, [pc, #128]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0a7      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4919      	ldr	r1, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7ff f9da 	bl	8002560 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7ff f9d6 	bl	8002560 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e08f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <HAL_RCC_ClockConfig+0x250>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d212      	bcs.n	800320c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_ClockConfig+0x24c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d007      	beq.n	800320c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e072      	b.n	80032e6 <HAL_RCC_ClockConfig+0x32e>
 8003200:	08008894 	.word	0x08008894
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d025      	beq.n	8003264 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d018      	beq.n	8003252 <HAL_RCC_ClockConfig+0x29a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d013      	beq.n	8003252 <HAL_RCC_ClockConfig+0x29a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003232:	d00e      	beq.n	8003252 <HAL_RCC_ClockConfig+0x29a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x29a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003246:	d004      	beq.n	8003252 <HAL_RCC_ClockConfig+0x29a>
 8003248:	f240 21c3 	movw	r1, #707	; 0x2c3
 800324c:	4828      	ldr	r0, [pc, #160]	; (80032f0 <HAL_RCC_ClockConfig+0x338>)
 800324e:	f7fe ff06 	bl	800205e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003252:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_ClockConfig+0x33c>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4925      	ldr	r1, [pc, #148]	; (80032f4 <HAL_RCC_ClockConfig+0x33c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d026      	beq.n	80032be <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2f2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d013      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2f2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800328a:	d00e      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2f2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2f2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800329e:	d004      	beq.n	80032aa <HAL_RCC_ClockConfig+0x2f2>
 80032a0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80032a4:	4812      	ldr	r0, [pc, #72]	; (80032f0 <HAL_RCC_ClockConfig+0x338>)
 80032a6:	f7fe feda 	bl	800205e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x33c>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x33c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f855 	bl	800336c <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x33c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x340>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x344>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x348>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f8fa 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	08008894 	.word	0x08008894
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08008ad8 	.word	0x08008ad8
 80032fc:	2000000c 	.word	0x2000000c
 8003300:	20000010 	.word	0x20000010

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCC_GetHCLKFreq+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000000c 	.word	0x2000000c

0800331c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003320:	f7ff fff0 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	0a9b      	lsrs	r3, r3, #10
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	4903      	ldr	r1, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003332:	5ccb      	ldrb	r3, [r1, r3]
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40023800 	.word	0x40023800
 8003340:	08008ae8 	.word	0x08008ae8

08003344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003348:	f7ff ffdc 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0b5b      	lsrs	r3, r3, #13
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	08008ae8 	.word	0x08008ae8

0800336c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800336c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003370:	b0ae      	sub	sp, #184	; 0xb8
 8003372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003392:	4bcb      	ldr	r3, [pc, #812]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b0c      	cmp	r3, #12
 800339c:	f200 8206 	bhi.w	80037ac <HAL_RCC_GetSysClockFreq+0x440>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080037ad 	.word	0x080037ad
 80033b0:	080037ad 	.word	0x080037ad
 80033b4:	080037ad 	.word	0x080037ad
 80033b8:	080033e5 	.word	0x080033e5
 80033bc:	080037ad 	.word	0x080037ad
 80033c0:	080037ad 	.word	0x080037ad
 80033c4:	080037ad 	.word	0x080037ad
 80033c8:	080033ed 	.word	0x080033ed
 80033cc:	080037ad 	.word	0x080037ad
 80033d0:	080037ad 	.word	0x080037ad
 80033d4:	080037ad 	.word	0x080037ad
 80033d8:	080035dd 	.word	0x080035dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4bb9      	ldr	r3, [pc, #740]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80033de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80033e2:	e1e7      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4bb8      	ldr	r3, [pc, #736]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80033ea:	e1e3      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4bb4      	ldr	r3, [pc, #720]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f8:	4bb1      	ldr	r3, [pc, #708]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d071      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003404:	4bae      	ldr	r3, [pc, #696]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003410:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4621      	mov	r1, r4
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	6439      	str	r1, [r7, #64]	; 0x40
 8003448:	4629      	mov	r1, r5
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	647b      	str	r3, [r7, #68]	; 0x44
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800345c:	4649      	mov	r1, r9
 800345e:	018b      	lsls	r3, r1, #6
 8003460:	4641      	mov	r1, r8
 8003462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003466:	4641      	mov	r1, r8
 8003468:	018a      	lsls	r2, r1, #6
 800346a:	4641      	mov	r1, r8
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003470:	4649      	mov	r1, r9
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003484:	4649      	mov	r1, r9
 8003486:	00cb      	lsls	r3, r1, #3
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800348e:	4641      	mov	r1, r8
 8003490:	00ca      	lsls	r2, r1, #3
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	4603      	mov	r3, r0
 8003498:	4622      	mov	r2, r4
 800349a:	189b      	adds	r3, r3, r2
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
 800349e:	462b      	mov	r3, r5
 80034a0:	460a      	mov	r2, r1
 80034a2:	eb42 0303 	adc.w	r3, r2, r3
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034b4:	4629      	mov	r1, r5
 80034b6:	024b      	lsls	r3, r1, #9
 80034b8:	4621      	mov	r1, r4
 80034ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034be:	4621      	mov	r1, r4
 80034c0:	024a      	lsls	r2, r1, #9
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80034d8:	f7fd fbd6 	bl	8000c88 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4613      	mov	r3, r2
 80034e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e6:	e067      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e8:	4b75      	ldr	r3, [pc, #468]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	2200      	movs	r2, #0
 80034f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003500:	67bb      	str	r3, [r7, #120]	; 0x78
 8003502:	2300      	movs	r3, #0
 8003504:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003506:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4621      	mov	r1, r4
 8003524:	1a51      	subs	r1, r2, r1
 8003526:	62b9      	str	r1, [r7, #40]	; 0x28
 8003528:	4629      	mov	r1, r5
 800352a:	eb63 0301 	sbc.w	r3, r3, r1
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800353c:	4649      	mov	r1, r9
 800353e:	018b      	lsls	r3, r1, #6
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003546:	4641      	mov	r1, r8
 8003548:	018a      	lsls	r2, r1, #6
 800354a:	4641      	mov	r1, r8
 800354c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003550:	4649      	mov	r1, r9
 8003552:	eb63 0b01 	sbc.w	fp, r3, r1
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003562:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800356a:	4692      	mov	sl, r2
 800356c:	469b      	mov	fp, r3
 800356e:	4623      	mov	r3, r4
 8003570:	eb1a 0303 	adds.w	r3, sl, r3
 8003574:	623b      	str	r3, [r7, #32]
 8003576:	462b      	mov	r3, r5
 8003578:	eb4b 0303 	adc.w	r3, fp, r3
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800358a:	4629      	mov	r1, r5
 800358c:	028b      	lsls	r3, r1, #10
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003594:	4621      	mov	r1, r4
 8003596:	028a      	lsls	r2, r1, #10
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035a0:	2200      	movs	r2, #0
 80035a2:	673b      	str	r3, [r7, #112]	; 0x70
 80035a4:	677a      	str	r2, [r7, #116]	; 0x74
 80035a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80035aa:	f7fd fb6d 	bl	8000c88 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4613      	mov	r3, r2
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b8:	4b41      	ldr	r3, [pc, #260]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80035ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035da:	e0eb      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d06b      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	2200      	movs	r2, #0
 80035fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80035fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	663b      	str	r3, [r7, #96]	; 0x60
 8003608:	2300      	movs	r3, #0
 800360a:	667b      	str	r3, [r7, #100]	; 0x64
 800360c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003610:	4622      	mov	r2, r4
 8003612:	462b      	mov	r3, r5
 8003614:	f04f 0000 	mov.w	r0, #0
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	0159      	lsls	r1, r3, #5
 800361e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003622:	0150      	lsls	r0, r2, #5
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4621      	mov	r1, r4
 800362a:	1a51      	subs	r1, r2, r1
 800362c:	61b9      	str	r1, [r7, #24]
 800362e:	4629      	mov	r1, r5
 8003630:	eb63 0301 	sbc.w	r3, r3, r1
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003642:	4659      	mov	r1, fp
 8003644:	018b      	lsls	r3, r1, #6
 8003646:	4651      	mov	r1, sl
 8003648:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800364c:	4651      	mov	r1, sl
 800364e:	018a      	lsls	r2, r1, #6
 8003650:	4651      	mov	r1, sl
 8003652:	ebb2 0801 	subs.w	r8, r2, r1
 8003656:	4659      	mov	r1, fp
 8003658:	eb63 0901 	sbc.w	r9, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003668:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800366c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003670:	4690      	mov	r8, r2
 8003672:	4699      	mov	r9, r3
 8003674:	4623      	mov	r3, r4
 8003676:	eb18 0303 	adds.w	r3, r8, r3
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	462b      	mov	r3, r5
 800367e:	eb49 0303 	adc.w	r3, r9, r3
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003690:	4629      	mov	r1, r5
 8003692:	024b      	lsls	r3, r1, #9
 8003694:	4621      	mov	r1, r4
 8003696:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800369a:	4621      	mov	r1, r4
 800369c:	024a      	lsls	r2, r1, #9
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a6:	2200      	movs	r2, #0
 80036a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80036aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80036ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036b0:	f7fd faea 	bl	8000c88 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036be:	e065      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x420>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036cc:	4b3d      	ldr	r3, [pc, #244]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	2200      	movs	r2, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	4611      	mov	r1, r2
 80036d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036dc:	653b      	str	r3, [r7, #80]	; 0x50
 80036de:	2300      	movs	r3, #0
 80036e0:	657b      	str	r3, [r7, #84]	; 0x54
 80036e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80036e6:	4642      	mov	r2, r8
 80036e8:	464b      	mov	r3, r9
 80036ea:	f04f 0000 	mov.w	r0, #0
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	0159      	lsls	r1, r3, #5
 80036f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f8:	0150      	lsls	r0, r2, #5
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4641      	mov	r1, r8
 8003700:	1a51      	subs	r1, r2, r1
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	4649      	mov	r1, r9
 8003706:	eb63 0301 	sbc.w	r3, r3, r1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003718:	4659      	mov	r1, fp
 800371a:	018b      	lsls	r3, r1, #6
 800371c:	4651      	mov	r1, sl
 800371e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003722:	4651      	mov	r1, sl
 8003724:	018a      	lsls	r2, r1, #6
 8003726:	4651      	mov	r1, sl
 8003728:	1a54      	subs	r4, r2, r1
 800372a:	4659      	mov	r1, fp
 800372c:	eb63 0501 	sbc.w	r5, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	00eb      	lsls	r3, r5, #3
 800373a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373e:	00e2      	lsls	r2, r4, #3
 8003740:	4614      	mov	r4, r2
 8003742:	461d      	mov	r5, r3
 8003744:	4643      	mov	r3, r8
 8003746:	18e3      	adds	r3, r4, r3
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	464b      	mov	r3, r9
 800374c:	eb45 0303 	adc.w	r3, r5, r3
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800375e:	4629      	mov	r1, r5
 8003760:	028b      	lsls	r3, r1, #10
 8003762:	4621      	mov	r1, r4
 8003764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003768:	4621      	mov	r1, r4
 800376a:	028a      	lsls	r2, r1, #10
 800376c:	4610      	mov	r0, r2
 800376e:	4619      	mov	r1, r3
 8003770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003774:	2200      	movs	r2, #0
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
 8003778:	64fa      	str	r2, [r7, #76]	; 0x4c
 800377a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800377e:	f7fd fa83 	bl	8000c88 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4613      	mov	r3, r2
 8003788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0f1b      	lsrs	r3, r3, #28
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800379a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800379e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037aa:	e003      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	37b8      	adds	r7, #184	; 0xb8
 80037bc:	46bd      	mov	sp, r7
 80037be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	00f42400 	.word	0x00f42400

080037cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e347      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d904      	bls.n	80037f0 <HAL_RCC_OscConfig+0x24>
 80037e6:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80037ea:	4893      	ldr	r0, [pc, #588]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	f7fe fc37 	bl	800205e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8096 	beq.w	800392a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00e      	beq.n	8003824 <HAL_RCC_OscConfig+0x58>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d009      	beq.n	8003824 <HAL_RCC_OscConfig+0x58>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003818:	d004      	beq.n	8003824 <HAL_RCC_OscConfig+0x58>
 800381a:	f640 5115 	movw	r1, #3349	; 0xd15
 800381e:	4886      	ldr	r0, [pc, #536]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003820:	f7fe fc1d 	bl	800205e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003824:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b04      	cmp	r3, #4
 800382e:	d019      	beq.n	8003864 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003830:	4b82      	ldr	r3, [pc, #520]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003838:	2b08      	cmp	r3, #8
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800383c:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003852:	2b0c      	cmp	r3, #12
 8003854:	d112      	bne.n	800387c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003862:	d10b      	bne.n	800387c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d05b      	beq.n	8003928 <HAL_RCC_OscConfig+0x15c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d157      	bne.n	8003928 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e2f8      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0xc8>
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e01d      	b.n	80038d0 <HAL_RCC_OscConfig+0x104>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0xec>
 800389e:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a66      	ldr	r2, [pc, #408]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b64      	ldr	r3, [pc, #400]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a63      	ldr	r2, [pc, #396]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCC_OscConfig+0x104>
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5f      	ldr	r2, [pc, #380]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fe42 	bl	8002560 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e0:	f7fe fe3e 	bl	8002560 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e2bd      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b52      	ldr	r3, [pc, #328]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x114>
 80038fe:	e014      	b.n	800392a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fe fe2e 	bl	8002560 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003908:	f7fe fe2a 	bl	8002560 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b64      	cmp	r3, #100	; 0x64
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e2a9      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x13c>
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 808c 	beq.w	8003a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_OscConfig+0x186>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d004      	beq.n	8003952 <HAL_RCC_OscConfig+0x186>
 8003948:	f640 514d 	movw	r1, #3405	; 0xd4d
 800394c:	483a      	ldr	r0, [pc, #232]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 800394e:	f7fe fb86 	bl	800205e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	2b1f      	cmp	r3, #31
 8003958:	d904      	bls.n	8003964 <HAL_RCC_OscConfig+0x198>
 800395a:	f640 514e 	movw	r1, #3406	; 0xd4e
 800395e:	4836      	ldr	r0, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x26c>)
 8003960:	f7fe fb7d 	bl	800205e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003978:	2b08      	cmp	r3, #8
 800397a:	d105      	bne.n	8003988 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d11c      	bne.n	80039ce <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d116      	bne.n	80039ce <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1ec>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e25a      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	491d      	ldr	r1, [pc, #116]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039cc:	e040      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d020      	beq.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d6:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe fdc0 	bl	8002560 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fe fdbc 	bl	8002560 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e23b      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCC_OscConfig+0x270>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
 8003a16:	e01b      	b.n	8003a50 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a18:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_OscConfig+0x274>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1e:	f7fe fd9f 	bl	8002560 <HAL_GetTick>
 8003a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a24:	e00e      	b.n	8003a44 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a26:	f7fe fd9b 	bl	8002560 <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e21a      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
 8003a38:	08008908 	.word	0x08008908
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a44:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ea      	bne.n	8003a26 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d03d      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2aa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d004      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2aa>
 8003a6c:	f640 5194 	movw	r1, #3476	; 0xd94
 8003a70:	486a      	ldr	r0, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x450>)
 8003a72:	f7fe faf4 	bl	800205e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x454>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a84:	f7fe fd6c 	bl	8002560 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fe fd68 	bl	8002560 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e1e7      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b5e      	ldr	r3, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2c0>
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aac:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <HAL_RCC_OscConfig+0x454>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fd55 	bl	8002560 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aba:	f7fe fd51 	bl	8002560 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1d0      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003acc:	4b52      	ldr	r3, [pc, #328]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80b0 	beq.w	8003c46 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCC_OscConfig+0x340>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d008      	beq.n	8003b0c <HAL_RCC_OscConfig+0x340>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d004      	beq.n	8003b0c <HAL_RCC_OscConfig+0x340>
 8003b02:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8003b06:	4845      	ldr	r0, [pc, #276]	; (8003c1c <HAL_RCC_OscConfig+0x450>)
 8003b08:	f7fe faa9 	bl	800205e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0c:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10f      	bne.n	8003b38 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4a3d      	ldr	r2, [pc, #244]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6413      	str	r3, [r2, #64]	; 0x40
 8003b28:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCC_OscConfig+0x458>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d118      	bne.n	8003b76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b44:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <HAL_RCC_OscConfig+0x458>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a36      	ldr	r2, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x458>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b50:	f7fe fd06 	bl	8002560 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b58:	f7fe fd02 	bl	8002560 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e181      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <HAL_RCC_OscConfig+0x458>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d106      	bne.n	8003b8c <HAL_RCC_OscConfig+0x3c0>
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8a:	e01c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x3fa>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b05      	cmp	r3, #5
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x3e2>
 8003b94:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bac:	e00b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x3fa>
 8003bae:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d015      	beq.n	8003bfa <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fcc7 	bl	8002560 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fcc3 	bl	8002560 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e140      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_OscConfig+0x44c>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0ee      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x40a>
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fcb1 	bl	8002560 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	e012      	b.n	8003c28 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c02:	f7fe fcad 	bl	8002560 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d909      	bls.n	8003c28 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e12a      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	08008908 	.word	0x08008908
 8003c20:	42470e80 	.word	0x42470e80
 8003c24:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b93      	ldr	r3, [pc, #588]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e6      	bne.n	8003c02 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4a8e      	ldr	r2, [pc, #568]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_RCC_OscConfig+0x49c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d008      	beq.n	8003c68 <HAL_RCC_OscConfig+0x49c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d004      	beq.n	8003c68 <HAL_RCC_OscConfig+0x49c>
 8003c5e:	f640 6103 	movw	r1, #3587	; 0xe03
 8003c62:	4886      	ldr	r0, [pc, #536]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003c64:	f7fe f9fb 	bl	800205e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80fd 	beq.w	8003e6c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c72:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b08      	cmp	r3, #8
 8003c7c:	f000 80b6 	beq.w	8003dec <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	f040 809a 	bne.w	8003dbe <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4da>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4da>
 8003c9c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003ca0:	4876      	ldr	r0, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003ca2:	f7fe f9dc 	bl	800205e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	2b3f      	cmp	r3, #63	; 0x3f
 8003cac:	d904      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x4ec>
 8003cae:	f640 610d 	movw	r1, #3597	; 0xe0d
 8003cb2:	4872      	ldr	r0, [pc, #456]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003cb4:	f7fe f9d3 	bl	800205e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	2b31      	cmp	r3, #49	; 0x31
 8003cbe:	d904      	bls.n	8003cca <HAL_RCC_OscConfig+0x4fe>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003cc8:	d904      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x508>
 8003cca:	f640 610e 	movw	r1, #3598	; 0xe0e
 8003cce:	486b      	ldr	r0, [pc, #428]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003cd0:	f7fe f9c5 	bl	800205e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d010      	beq.n	8003cfe <HAL_RCC_OscConfig+0x532>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d00c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x532>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b06      	cmp	r3, #6
 8003cea:	d008      	beq.n	8003cfe <HAL_RCC_OscConfig+0x532>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCC_OscConfig+0x532>
 8003cf4:	f640 610f 	movw	r1, #3599	; 0xe0f
 8003cf8:	4860      	ldr	r0, [pc, #384]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003cfa:	f7fe f9b0 	bl	800205e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d903      	bls.n	8003d0e <HAL_RCC_OscConfig+0x542>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	d904      	bls.n	8003d18 <HAL_RCC_OscConfig+0x54c>
 8003d0e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003d12:	485a      	ldr	r0, [pc, #360]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003d14:	f7fe f9a3 	bl	800205e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d903      	bls.n	8003d28 <HAL_RCC_OscConfig+0x55c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	2b07      	cmp	r3, #7
 8003d26:	d904      	bls.n	8003d32 <HAL_RCC_OscConfig+0x566>
 8003d28:	f640 6111 	movw	r1, #3601	; 0xe11
 8003d2c:	4853      	ldr	r0, [pc, #332]	; (8003e7c <HAL_RCC_OscConfig+0x6b0>)
 8003d2e:	f7fe f996 	bl	800205e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_OscConfig+0x6b4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fe fc12 	bl	8002560 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe fc0e 	bl	8002560 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e08d      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b49      	ldr	r3, [pc, #292]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	493b      	ldr	r1, [pc, #236]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_OscConfig+0x6b4>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe fbe3 	bl	8002560 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fbdf 	bl	8002560 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e05e      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x5d2>
 8003dbc:	e056      	b.n	8003e6c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x6b4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fbcc 	bl	8002560 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe fbc8 	bl	8002560 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e047      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x600>
 8003dea:	e03f      	b.n	8003e6c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e03a      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCC_OscConfig+0x6ac>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d030      	beq.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d129      	bne.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d122      	bne.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d119      	bne.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3e:	085b      	lsrs	r3, r3, #1
 8003e40:	3b01      	subs	r3, #1
 8003e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d10f      	bne.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08008908 	.word	0x08008908
 8003e80:	42470060 	.word	0x42470060

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e0c5      	b.n	8004022 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a64      	ldr	r2, [pc, #400]	; (800402c <HAL_TIM_Base_Init+0x1a8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d045      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea8:	d040      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_TIM_Base_Init+0x1ac>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d03b      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a5e      	ldr	r2, [pc, #376]	; (8004034 <HAL_TIM_Base_Init+0x1b0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d036      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <HAL_TIM_Base_Init+0x1b4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d031      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5b      	ldr	r2, [pc, #364]	; (800403c <HAL_TIM_Base_Init+0x1b8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02c      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5a      	ldr	r2, [pc, #360]	; (8004040 <HAL_TIM_Base_Init+0x1bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d027      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a58      	ldr	r2, [pc, #352]	; (8004044 <HAL_TIM_Base_Init+0x1c0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d022      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_TIM_Base_Init+0x1c4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d01d      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a55      	ldr	r2, [pc, #340]	; (800404c <HAL_TIM_Base_Init+0x1c8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d018      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a54      	ldr	r2, [pc, #336]	; (8004050 <HAL_TIM_Base_Init+0x1cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a52      	ldr	r2, [pc, #328]	; (8004054 <HAL_TIM_Base_Init+0x1d0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a51      	ldr	r2, [pc, #324]	; (8004058 <HAL_TIM_Base_Init+0x1d4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_TIM_Base_Init+0x1d8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_TIM_Base_Init+0xa8>
 8003f22:	f240 1113 	movw	r1, #275	; 0x113
 8003f26:	484e      	ldr	r0, [pc, #312]	; (8004060 <HAL_TIM_Base_Init+0x1dc>)
 8003f28:	f7fe f899 	bl	800205e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d014      	beq.n	8003f5e <HAL_TIM_Base_Init+0xda>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d010      	beq.n	8003f5e <HAL_TIM_Base_Init+0xda>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b20      	cmp	r3, #32
 8003f42:	d00c      	beq.n	8003f5e <HAL_TIM_Base_Init+0xda>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d008      	beq.n	8003f5e <HAL_TIM_Base_Init+0xda>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d004      	beq.n	8003f5e <HAL_TIM_Base_Init+0xda>
 8003f54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003f58:	4841      	ldr	r0, [pc, #260]	; (8004060 <HAL_TIM_Base_Init+0x1dc>)
 8003f5a:	f7fe f880 	bl	800205e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <HAL_TIM_Base_Init+0x100>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d009      	beq.n	8003f84 <HAL_TIM_Base_Init+0x100>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f78:	d004      	beq.n	8003f84 <HAL_TIM_Base_Init+0x100>
 8003f7a:	f240 1115 	movw	r1, #277	; 0x115
 8003f7e:	4838      	ldr	r0, [pc, #224]	; (8004060 <HAL_TIM_Base_Init+0x1dc>)
 8003f80:	f7fe f86d 	bl	800205e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_TIM_Base_Init+0x11a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d004      	beq.n	8003f9e <HAL_TIM_Base_Init+0x11a>
 8003f94:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003f98:	4831      	ldr	r0, [pc, #196]	; (8004060 <HAL_TIM_Base_Init+0x1dc>)
 8003f9a:	f7fe f860 	bl	800205e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe f886 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fdc0 	bl	8004b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40010000 	.word	0x40010000
 8004030:	40000400 	.word	0x40000400
 8004034:	40000800 	.word	0x40000800
 8004038:	40000c00 	.word	0x40000c00
 800403c:	40001000 	.word	0x40001000
 8004040:	40001400 	.word	0x40001400
 8004044:	40010400 	.word	0x40010400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800
 8004054:	40001800 	.word	0x40001800
 8004058:	40001c00 	.word	0x40001c00
 800405c:	40002000 	.word	0x40002000
 8004060:	0800897c 	.word	0x0800897c

08004064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_TIM_Base_Start_IT+0x154>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d045      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407e:	d040      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a4d      	ldr	r2, [pc, #308]	; (80041bc <HAL_TIM_Base_Start_IT+0x158>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d03b      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a4c      	ldr	r2, [pc, #304]	; (80041c0 <HAL_TIM_Base_Start_IT+0x15c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d036      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a4a      	ldr	r2, [pc, #296]	; (80041c4 <HAL_TIM_Base_Start_IT+0x160>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a49      	ldr	r2, [pc, #292]	; (80041c8 <HAL_TIM_Base_Start_IT+0x164>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d02c      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a47      	ldr	r2, [pc, #284]	; (80041cc <HAL_TIM_Base_Start_IT+0x168>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d027      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a46      	ldr	r2, [pc, #280]	; (80041d0 <HAL_TIM_Base_Start_IT+0x16c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d022      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a44      	ldr	r2, [pc, #272]	; (80041d4 <HAL_TIM_Base_Start_IT+0x170>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01d      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a43      	ldr	r2, [pc, #268]	; (80041d8 <HAL_TIM_Base_Start_IT+0x174>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d018      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a41      	ldr	r2, [pc, #260]	; (80041dc <HAL_TIM_Base_Start_IT+0x178>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a40      	ldr	r2, [pc, #256]	; (80041e0 <HAL_TIM_Base_Start_IT+0x17c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3e      	ldr	r2, [pc, #248]	; (80041e4 <HAL_TIM_Base_Start_IT+0x180>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a3d      	ldr	r2, [pc, #244]	; (80041e8 <HAL_TIM_Base_Start_IT+0x184>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_TIM_Base_Start_IT+0x9e>
 80040f8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80040fc:	483b      	ldr	r0, [pc, #236]	; (80041ec <HAL_TIM_Base_Start_IT+0x188>)
 80040fe:	f7fd ffae 	bl	800205e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e04e      	b.n	80041b0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0201 	orr.w	r2, r2, #1
 8004128:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a22      	ldr	r2, [pc, #136]	; (80041b8 <HAL_TIM_Base_Start_IT+0x154>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d01d      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_TIM_Base_Start_IT+0x158>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_TIM_Base_Start_IT+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_TIM_Base_Start_IT+0x160>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <HAL_TIM_Base_Start_IT+0x16c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_TIM_Base_Start_IT+0x170>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_Base_Start_IT+0x116>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <HAL_TIM_Base_Start_IT+0x17c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d010      	beq.n	80041ae <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	e007      	b.n	80041ae <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40001000 	.word	0x40001000
 80041cc:	40001400 	.word	0x40001400
 80041d0:	40010400 	.word	0x40010400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	40001800 	.word	0x40001800
 80041e4:	40001c00 	.word	0x40001c00
 80041e8:	40002000 	.word	0x40002000
 80041ec:	0800897c 	.word	0x0800897c

080041f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0202 	mvn.w	r2, #2
 800421c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fc6e 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fc60 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fc71 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0204 	mvn.w	r2, #4
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fc44 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fc36 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fc47 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0208 	mvn.w	r2, #8
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2204      	movs	r2, #4
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fc1a 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fc0c 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fc1d 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b10      	cmp	r3, #16
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0210 	mvn.w	r2, #16
 8004318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2208      	movs	r2, #8
 800431e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fbf0 	bl	8004b14 <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fbe2 	bl	8004b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fbf3 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10e      	bne.n	8004374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0201 	mvn.w	r2, #1
 800436c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd fe3a 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b80      	cmp	r3, #128	; 0x80
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438c:	2b80      	cmp	r3, #128	; 0x80
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fdfa 	bl	8004f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d107      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fbb8 	bl	8004b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0220 	mvn.w	r2, #32
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fdc4 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_TIM_ConfigClockSource+0x1c>
 8004418:	2302      	movs	r3, #2
 800441a:	e35c      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x6d6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004434:	d029      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b70      	cmp	r3, #112	; 0x70
 800443c:	d025      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004446:	d020      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d01c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b50      	cmp	r3, #80	; 0x50
 8004456:	d018      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d014      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b10      	cmp	r3, #16
 800446e:	d00c      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b20      	cmp	r3, #32
 8004476:	d008      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b30      	cmp	r3, #48	; 0x30
 800447e:	d004      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x8a>
 8004480:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8004484:	4893      	ldr	r0, [pc, #588]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004486:	f7fd fdea 	bl	800205e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004498:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b2:	f000 812b 	beq.w	800470c <HAL_TIM_ConfigClockSource+0x30c>
 80044b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ba:	f200 82ff 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c2:	d02e      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x122>
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c8:	f200 82f8 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044cc:	2b70      	cmp	r3, #112	; 0x70
 80044ce:	f000 8082 	beq.w	80045d6 <HAL_TIM_ConfigClockSource+0x1d6>
 80044d2:	2b70      	cmp	r3, #112	; 0x70
 80044d4:	f200 82f2 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	f000 81f9 	beq.w	80048d0 <HAL_TIM_ConfigClockSource+0x4d0>
 80044de:	2b60      	cmp	r3, #96	; 0x60
 80044e0:	f200 82ec 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	f000 8182 	beq.w	80047ee <HAL_TIM_ConfigClockSource+0x3ee>
 80044ea:	2b50      	cmp	r3, #80	; 0x50
 80044ec:	f200 82e6 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	f000 824d 	beq.w	8004990 <HAL_TIM_ConfigClockSource+0x590>
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	f200 82e0 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 80044fc:	2b30      	cmp	r3, #48	; 0x30
 80044fe:	f000 82a7 	beq.w	8004a50 <HAL_TIM_ConfigClockSource+0x650>
 8004502:	2b30      	cmp	r3, #48	; 0x30
 8004504:	f200 82da 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 8004508:	2b20      	cmp	r3, #32
 800450a:	f000 82a1 	beq.w	8004a50 <HAL_TIM_ConfigClockSource+0x650>
 800450e:	2b20      	cmp	r3, #32
 8004510:	f200 82d4 	bhi.w	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 829b 	beq.w	8004a50 <HAL_TIM_ConfigClockSource+0x650>
 800451a:	2b10      	cmp	r3, #16
 800451c:	f000 8298 	beq.w	8004a50 <HAL_TIM_ConfigClockSource+0x650>
 8004520:	e2cc      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6c      	ldr	r2, [pc, #432]	; (80046d8 <HAL_TIM_ConfigClockSource+0x2d8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	f000 82ca 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	f000 82c4 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a67      	ldr	r2, [pc, #412]	; (80046dc <HAL_TIM_ConfigClockSource+0x2dc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	f000 82be 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a65      	ldr	r2, [pc, #404]	; (80046e0 <HAL_TIM_ConfigClockSource+0x2e0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	f000 82b8 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a63      	ldr	r2, [pc, #396]	; (80046e4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	f000 82b2 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	f000 82ac 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5f      	ldr	r2, [pc, #380]	; (80046ec <HAL_TIM_ConfigClockSource+0x2ec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	f000 82a6 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a5d      	ldr	r2, [pc, #372]	; (80046f0 <HAL_TIM_ConfigClockSource+0x2f0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	f000 82a0 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5b      	ldr	r2, [pc, #364]	; (80046f4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	f000 829a 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a59      	ldr	r2, [pc, #356]	; (80046f8 <HAL_TIM_ConfigClockSource+0x2f8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	f000 8294 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_TIM_ConfigClockSource+0x2fc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f000 828e 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a55      	ldr	r2, [pc, #340]	; (8004700 <HAL_TIM_ConfigClockSource+0x300>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	f000 8288 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a53      	ldr	r2, [pc, #332]	; (8004704 <HAL_TIM_ConfigClockSource+0x304>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	f000 8282 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a51      	ldr	r2, [pc, #324]	; (8004708 <HAL_TIM_ConfigClockSource+0x308>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f000 827c 	beq.w	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
 80045ca:	f241 41c3 	movw	r1, #5315	; 0x14c3
 80045ce:	4841      	ldr	r0, [pc, #260]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 80045d0:	f7fd fd45 	bl	800205e <assert_failed>
      break;
 80045d4:	e275      	b.n	8004ac2 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <HAL_TIM_ConfigClockSource+0x2d8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d027      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d022      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3b      	ldr	r2, [pc, #236]	; (80046dc <HAL_TIM_ConfigClockSource+0x2dc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01d      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_TIM_ConfigClockSource+0x2e0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d018      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a38      	ldr	r2, [pc, #224]	; (80046e4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <HAL_TIM_ConfigClockSource+0x2f0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00e      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a37      	ldr	r2, [pc, #220]	; (80046f4 <HAL_TIM_ConfigClockSource+0x2f4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a37      	ldr	r2, [pc, #220]	; (8004700 <HAL_TIM_ConfigClockSource+0x300>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_TIM_ConfigClockSource+0x230>
 8004626:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800462a:	482a      	ldr	r0, [pc, #168]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 800462c:	f7fd fd17 	bl	800205e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0x260>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d00e      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0x260>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464a:	d009      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0x260>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004654:	d004      	beq.n	8004660 <HAL_TIM_ConfigClockSource+0x260>
 8004656:	f241 41cd 	movw	r1, #5325	; 0x14cd
 800465a:	481e      	ldr	r0, [pc, #120]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 800465c:	f7fd fcff 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d014      	beq.n	8004694 <HAL_TIM_ConfigClockSource+0x294>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_TIM_ConfigClockSource+0x294>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_ConfigClockSource+0x294>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d008      	beq.n	8004694 <HAL_TIM_ConfigClockSource+0x294>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b0a      	cmp	r3, #10
 8004688:	d004      	beq.n	8004694 <HAL_TIM_ConfigClockSource+0x294>
 800468a:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800468e:	4811      	ldr	r0, [pc, #68]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 8004690:	f7fd fce5 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b0f      	cmp	r3, #15
 800469a:	d904      	bls.n	80046a6 <HAL_TIM_ConfigClockSource+0x2a6>
 800469c:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <HAL_TIM_ConfigClockSource+0x2d4>)
 80046a2:	f7fd fcdc 	bl	800205e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6899      	ldr	r1, [r3, #8]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f000 fb65 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]
      break;
 80046d2:	e1f7      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
 80046d4:	0800897c 	.word	0x0800897c
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40001000 	.word	0x40001000
 80046ec:	40001400 	.word	0x40001400
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	40001800 	.word	0x40001800
 8004704:	40001c00 	.word	0x40001c00
 8004708:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <HAL_TIM_ConfigClockSource+0x4b0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d018      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a63      	ldr	r2, [pc, #396]	; (80048b4 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a62      	ldr	r2, [pc, #392]	; (80048b8 <HAL_TIM_ConfigClockSource+0x4b8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a60      	ldr	r2, [pc, #384]	; (80048bc <HAL_TIM_ConfigClockSource+0x4bc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5f      	ldr	r2, [pc, #380]	; (80048c0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x352>
 8004748:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800474c:	485d      	ldr	r0, [pc, #372]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 800474e:	f7fd fc86 	bl	800205e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d013      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x382>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d00e      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x382>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476c:	d009      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x382>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004776:	d004      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0x382>
 8004778:	f241 41e5 	movw	r1, #5349	; 0x14e5
 800477c:	4851      	ldr	r0, [pc, #324]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 800477e:	f7fd fc6e 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800478a:	d014      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x3b6>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x3b6>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d008      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x3b6>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b0a      	cmp	r3, #10
 80047aa:	d004      	beq.n	80047b6 <HAL_TIM_ConfigClockSource+0x3b6>
 80047ac:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80047b0:	4844      	ldr	r0, [pc, #272]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 80047b2:	f7fd fc54 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d904      	bls.n	80047c8 <HAL_TIM_ConfigClockSource+0x3c8>
 80047be:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80047c2:	4840      	ldr	r0, [pc, #256]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 80047c4:	f7fd fc4b 	bl	800205e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f000 fad4 	bl	8004d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ea:	609a      	str	r2, [r3, #8]
      break;
 80047ec:	e16a      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2f      	ldr	r2, [pc, #188]	; (80048b0 <HAL_TIM_ConfigClockSource+0x4b0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d022      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2b      	ldr	r2, [pc, #172]	; (80048b4 <HAL_TIM_ConfigClockSource+0x4b4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a29      	ldr	r2, [pc, #164]	; (80048b8 <HAL_TIM_ConfigClockSource+0x4b8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a28      	ldr	r2, [pc, #160]	; (80048bc <HAL_TIM_ConfigClockSource+0x4bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_TIM_ConfigClockSource+0x4c0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <HAL_TIM_ConfigClockSource+0x4c8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a24      	ldr	r2, [pc, #144]	; (80048cc <HAL_TIM_ConfigClockSource+0x4cc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x448>
 800483e:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8004842:	4820      	ldr	r0, [pc, #128]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 8004844:	f7fd fc0b 	bl	800205e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004850:	d014      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x47c>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d010      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x47c>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x47c>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d008      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x47c>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b0a      	cmp	r3, #10
 8004870:	d004      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x47c>
 8004872:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8004876:	4813      	ldr	r0, [pc, #76]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 8004878:	f7fd fbf1 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d904      	bls.n	800488e <HAL_TIM_ConfigClockSource+0x48e>
 8004884:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8004888:	480e      	ldr	r0, [pc, #56]	; (80048c4 <HAL_TIM_ConfigClockSource+0x4c4>)
 800488a:	f7fd fbe8 	bl	800205e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 f9f8 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2150      	movs	r1, #80	; 0x50
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fa51 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 80048ac:	e10a      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	0800897c 	.word	0x0800897c
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a82      	ldr	r2, [pc, #520]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6e0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d027      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d022      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7e      	ldr	r2, [pc, #504]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6e4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01d      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7d      	ldr	r2, [pc, #500]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x6e8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d018      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a7b      	ldr	r2, [pc, #492]	; (8004aec <HAL_TIM_ConfigClockSource+0x6ec>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d013      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a7a      	ldr	r2, [pc, #488]	; (8004af0 <HAL_TIM_ConfigClockSource+0x6f0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00e      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a78      	ldr	r2, [pc, #480]	; (8004af4 <HAL_TIM_ConfigClockSource+0x6f4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d009      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a77      	ldr	r2, [pc, #476]	; (8004af8 <HAL_TIM_ConfigClockSource+0x6f8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d004      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x52a>
 8004920:	f241 5106 	movw	r1, #5382	; 0x1506
 8004924:	4875      	ldr	r0, [pc, #468]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 8004926:	f7fd fb9a 	bl	800205e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004932:	d014      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x55e>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x55e>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x55e>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d008      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x55e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b0a      	cmp	r3, #10
 8004952:	d004      	beq.n	800495e <HAL_TIM_ConfigClockSource+0x55e>
 8004954:	f241 5109 	movw	r1, #5385	; 0x1509
 8004958:	4868      	ldr	r0, [pc, #416]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 800495a:	f7fd fb80 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b0f      	cmp	r3, #15
 8004964:	d904      	bls.n	8004970 <HAL_TIM_ConfigClockSource+0x570>
 8004966:	f241 510a 	movw	r1, #5386	; 0x150a
 800496a:	4864      	ldr	r0, [pc, #400]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 800496c:	f7fd fb77 	bl	800205e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	461a      	mov	r2, r3
 800497e:	f000 f9b6 	bl	8004cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2160      	movs	r1, #96	; 0x60
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f9e0 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 800498e:	e099      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6e0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a2:	d022      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6e4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x6e8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_TIM_ConfigClockSource+0x6ec>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a4a      	ldr	r2, [pc, #296]	; (8004af0 <HAL_TIM_ConfigClockSource+0x6f0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a48      	ldr	r2, [pc, #288]	; (8004af4 <HAL_TIM_ConfigClockSource+0x6f4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a47      	ldr	r2, [pc, #284]	; (8004af8 <HAL_TIM_ConfigClockSource+0x6f8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0x5ea>
 80049e0:	f241 5116 	movw	r1, #5398	; 0x1516
 80049e4:	4845      	ldr	r0, [pc, #276]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 80049e6:	f7fd fb3a 	bl	800205e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f2:	d014      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x61e>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d010      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x61e>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x61e>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d008      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x61e>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b0a      	cmp	r3, #10
 8004a12:	d004      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x61e>
 8004a14:	f241 5119 	movw	r1, #5401	; 0x1519
 8004a18:	4838      	ldr	r0, [pc, #224]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 8004a1a:	f7fd fb20 	bl	800205e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	d904      	bls.n	8004a30 <HAL_TIM_ConfigClockSource+0x630>
 8004a26:	f241 511a 	movw	r1, #5402	; 0x151a
 8004a2a:	4834      	ldr	r0, [pc, #208]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 8004a2c:	f7fd fb17 	bl	800205e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f000 f927 	bl	8004c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2140      	movs	r1, #64	; 0x40
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 f980 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004a4e:	e039      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_TIM_ConfigClockSource+0x6e0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d027      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d022      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <HAL_TIM_ConfigClockSource+0x6e4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <HAL_TIM_ConfigClockSource+0x6e8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1b      	ldr	r2, [pc, #108]	; (8004aec <HAL_TIM_ConfigClockSource+0x6ec>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	; (8004af0 <HAL_TIM_ConfigClockSource+0x6f0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <HAL_TIM_ConfigClockSource+0x6f4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_TIM_ConfigClockSource+0x6f8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x6aa>
 8004aa0:	f241 5129 	movw	r1, #5417	; 0x1529
 8004aa4:	4815      	ldr	r0, [pc, #84]	; (8004afc <HAL_TIM_ConfigClockSource+0x6fc>)
 8004aa6:	f7fd fada 	bl	800205e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f000 f94a 	bl	8004d4e <TIM_ITRx_SetConfig>
      break;
 8004aba:	e003      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac0:	e000      	b.n	8004ac4 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 8004ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40000400 	.word	0x40000400
 8004ae8:	40000800 	.word	0x40000800
 8004aec:	40000c00 	.word	0x40000c00
 8004af0:	40010400 	.word	0x40010400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40001800 	.word	0x40001800
 8004afc:	0800897c 	.word	0x0800897c

08004b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3d      	ldr	r2, [pc, #244]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3c      	ldr	r2, [pc, #240]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3b      	ldr	r2, [pc, #236]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x40>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a3a      	ldr	r2, [pc, #232]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d027      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <TIM_Base_SetConfig+0x118>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d023      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2b      	ldr	r2, [pc, #172]	; (8004c6c <TIM_Base_SetConfig+0x11c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <TIM_Base_SetConfig+0x120>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d017      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <TIM_Base_SetConfig+0x128>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <TIM_Base_SetConfig+0x12c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00f      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <TIM_Base_SetConfig+0x130>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00b      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <TIM_Base_SetConfig+0x134>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a24      	ldr	r2, [pc, #144]	; (8004c88 <TIM_Base_SetConfig+0x138>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a23      	ldr	r2, [pc, #140]	; (8004c8c <TIM_Base_SetConfig+0x13c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0xf8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0c      	ldr	r2, [pc, #48]	; (8004c74 <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d103      	bne.n	8004c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	615a      	str	r2, [r3, #20]
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40014400 	.word	0x40014400
 8004c80:	40014800 	.word	0x40014800
 8004c84:	40001800 	.word	0x40001800
 8004c88:	40001c00 	.word	0x40001c00
 8004c8c:	40002000 	.word	0x40002000

08004c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 030a 	bic.w	r3, r3, #10
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b087      	sub	sp, #28
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f023 0210 	bic.w	r2, r3, #16
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	031b      	lsls	r3, r3, #12
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f043 0307 	orr.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a61      	ldr	r2, [pc, #388]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d027      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d022      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a5d      	ldr	r2, [pc, #372]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a5b      	ldr	r2, [pc, #364]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d018      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a5a      	ldr	r2, [pc, #360]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a55      	ldr	r2, [pc, #340]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004e1e:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004e22:	4854      	ldr	r0, [pc, #336]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004e24:	f7fd f91b 	bl	800205e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d01c      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b30      	cmp	r3, #48	; 0x30
 8004e46:	d014      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d010      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b50      	cmp	r3, #80	; 0x50
 8004e56:	d00c      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b60      	cmp	r3, #96	; 0x60
 8004e5e:	d008      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b70      	cmp	r3, #112	; 0x70
 8004e66:	d004      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004e68:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004e6c:	4841      	ldr	r0, [pc, #260]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004e6e:	f7fd f8f6 	bl	800205e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d008      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e82:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004e86:	483b      	ldr	r0, [pc, #236]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004e88:	f7fd f8e9 	bl	800205e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e05a      	b.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d022      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d01d      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d018      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00e      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d009      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d004      	beq.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10c      	bne.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40001000 	.word	0x40001000
 8004f6c:	40001400 	.word	0x40001400
 8004f70:	40010400 	.word	0x40010400
 8004f74:	080089f0 	.word	0x080089f0
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0be      	b.n	8005138 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03b      	beq.n	800503a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a5e      	ldr	r2, [pc, #376]	; (8005140 <HAL_UART_Init+0x198>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_UART_Init+0x19c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5b      	ldr	r2, [pc, #364]	; (8005148 <HAL_UART_Init+0x1a0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a59      	ldr	r2, [pc, #356]	; (800514c <HAL_UART_Init+0x1a4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a58      	ldr	r2, [pc, #352]	; (8005150 <HAL_UART_Init+0x1a8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a56      	ldr	r2, [pc, #344]	; (8005154 <HAL_UART_Init+0x1ac>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_UART_Init+0x60>
 8004ffe:	f240 1173 	movw	r1, #371	; 0x173
 8005002:	4855      	ldr	r0, [pc, #340]	; (8005158 <HAL_UART_Init+0x1b0>)
 8005004:	f7fd f82b 	bl	800205e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d037      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005018:	d032      	beq.n	8005080 <HAL_UART_Init+0xd8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005022:	d02d      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502c:	d028      	beq.n	8005080 <HAL_UART_Init+0xd8>
 800502e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005032:	4849      	ldr	r0, [pc, #292]	; (8005158 <HAL_UART_Init+0x1b0>)
 8005034:	f7fd f813 	bl	800205e <assert_failed>
 8005038:	e022      	b.n	8005080 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a40      	ldr	r2, [pc, #256]	; (8005140 <HAL_UART_Init+0x198>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01d      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a3e      	ldr	r2, [pc, #248]	; (8005144 <HAL_UART_Init+0x19c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_UART_Init+0xd8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3d      	ldr	r2, [pc, #244]	; (8005148 <HAL_UART_Init+0x1a0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3b      	ldr	r2, [pc, #236]	; (800514c <HAL_UART_Init+0x1a4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a3a      	ldr	r2, [pc, #232]	; (8005150 <HAL_UART_Init+0x1a8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_UART_Init+0xd8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a38      	ldr	r2, [pc, #224]	; (8005154 <HAL_UART_Init+0x1ac>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_UART_Init+0xd8>
 8005076:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800507a:	4837      	ldr	r0, [pc, #220]	; (8005158 <HAL_UART_Init+0x1b0>)
 800507c:	f7fc ffef 	bl	800205e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_UART_Init+0xf4>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005090:	d004      	beq.n	800509c <HAL_UART_Init+0xf4>
 8005092:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8005096:	4830      	ldr	r0, [pc, #192]	; (8005158 <HAL_UART_Init+0x1b0>)
 8005098:	f7fc ffe1 	bl	800205e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <HAL_UART_Init+0x110>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	d004      	beq.n	80050b8 <HAL_UART_Init+0x110>
 80050ae:	f240 117b 	movw	r1, #379	; 0x17b
 80050b2:	4829      	ldr	r0, [pc, #164]	; (8005158 <HAL_UART_Init+0x1b0>)
 80050b4:	f7fc ffd3 	bl	800205e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fd f84d 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2224      	movs	r2, #36	; 0x24
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f936 	bl	800535c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40011000 	.word	0x40011000
 8005144:	40004400 	.word	0x40004400
 8005148:	40004800 	.word	0x40004800
 800514c:	40004c00 	.word	0x40004c00
 8005150:	40005000 	.word	0x40005000
 8005154:	40011400 	.word	0x40011400
 8005158:	08008a64 	.word	0x08008a64

0800515c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b20      	cmp	r3, #32
 800517a:	d17c      	bne.n	8005276 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Transmit+0x2c>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e075      	b.n	8005278 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_UART_Transmit+0x3e>
 8005196:	2302      	movs	r3, #2
 8005198:	e06e      	b.n	8005278 <HAL_UART_Transmit+0x11c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2221      	movs	r2, #33	; 0x21
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b0:	f7fd f9d6 	bl	8002560 <HAL_GetTick>
 80051b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	88fa      	ldrh	r2, [r7, #6]
 80051ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d108      	bne.n	80051de <HAL_UART_Transmit+0x82>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e003      	b.n	80051e6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051ee:	e02a      	b.n	8005246 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2200      	movs	r2, #0
 80051f8:	2180      	movs	r1, #128	; 0x80
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f840 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e036      	b.n	8005278 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	3302      	adds	r3, #2
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e007      	b.n	8005238 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1cf      	bne.n	80051f0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2200      	movs	r2, #0
 8005258:	2140      	movs	r1, #64	; 0x40
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f810 	bl	8005280 <UART_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e006      	b.n	8005278 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b090      	sub	sp, #64	; 0x40
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005290:	e050      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d04c      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800529a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529c:	2b00      	cmp	r3, #0
 800529e:	d007      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a0:	f7fd f95e 	bl	8002560 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d241      	bcs.n	8005334 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	e853 3f00 	ldrex	r3, [r3]
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d0:	637a      	str	r2, [r7, #52]	; 0x34
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d8:	e841 2300 	strex	r3, r2, [r1]
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e5      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	613b      	str	r3, [r7, #16]
   return(result);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005304:	623a      	str	r2, [r7, #32]
 8005306:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	6a3a      	ldr	r2, [r7, #32]
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	61bb      	str	r3, [r7, #24]
   return(result);
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e5      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e00f      	b.n	8005354 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	d09f      	beq.n	8005292 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3740      	adds	r7, #64	; 0x40
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800535c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005360:	b0c0      	sub	sp, #256	; 0x100
 8005362:	af00      	add	r7, sp, #0
 8005364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	4bcf      	ldr	r3, [pc, #828]	; (80056ac <UART_SetConfig+0x350>)
 8005370:	429a      	cmp	r2, r3
 8005372:	d904      	bls.n	800537e <UART_SetConfig+0x22>
 8005374:	f640 6161 	movw	r1, #3681	; 0xe61
 8005378:	48cd      	ldr	r0, [pc, #820]	; (80056b0 <UART_SetConfig+0x354>)
 800537a:	f7fc fe70 	bl	800205e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_SetConfig+0x42>
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d004      	beq.n	800539e <UART_SetConfig+0x42>
 8005394:	f640 6162 	movw	r1, #3682	; 0xe62
 8005398:	48c5      	ldr	r0, [pc, #788]	; (80056b0 <UART_SetConfig+0x354>)
 800539a:	f7fc fe60 	bl	800205e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <UART_SetConfig+0x6e>
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b2:	d00a      	beq.n	80053ca <UART_SetConfig+0x6e>
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053be:	d004      	beq.n	80053ca <UART_SetConfig+0x6e>
 80053c0:	f640 6163 	movw	r1, #3683	; 0xe63
 80053c4:	48ba      	ldr	r0, [pc, #744]	; (80056b0 <UART_SetConfig+0x354>)
 80053c6:	f7fc fe4a 	bl	800205e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ce:	695a      	ldr	r2, [r3, #20]
 80053d0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <UART_SetConfig+0x88>
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <UART_SetConfig+0x92>
 80053e4:	f640 6164 	movw	r1, #3684	; 0xe64
 80053e8:	48b1      	ldr	r0, [pc, #708]	; (80056b0 <UART_SetConfig+0x354>)
 80053ea:	f7fc fe38 	bl	800205e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	68d9      	ldr	r1, [r3, #12]
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	ea40 0301 	orr.w	r3, r0, r1
 800540a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	431a      	orrs	r2, r3
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	431a      	orrs	r2, r3
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800543a:	f021 010c 	bic.w	r1, r1, #12
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005448:	430b      	orrs	r3, r1
 800544a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	6999      	ldr	r1, [r3, #24]
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	ea40 0301 	orr.w	r3, r0, r1
 8005468:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b90      	ldr	r3, [pc, #576]	; (80056b4 <UART_SetConfig+0x358>)
 8005472:	429a      	cmp	r2, r3
 8005474:	d005      	beq.n	8005482 <UART_SetConfig+0x126>
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b8e      	ldr	r3, [pc, #568]	; (80056b8 <UART_SetConfig+0x35c>)
 800547e:	429a      	cmp	r2, r3
 8005480:	d104      	bne.n	800548c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005482:	f7fd ff5f 	bl	8003344 <HAL_RCC_GetPCLK2Freq>
 8005486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800548a:	e003      	b.n	8005494 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800548c:	f7fd ff46 	bl	800331c <HAL_RCC_GetPCLK1Freq>
 8005490:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	f040 810f 	bne.w	80056c0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054ac:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054b0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054b4:	4622      	mov	r2, r4
 80054b6:	462b      	mov	r3, r5
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80054bc:	415b      	adcs	r3, r3
 80054be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054c4:	4621      	mov	r1, r4
 80054c6:	eb12 0801 	adds.w	r8, r2, r1
 80054ca:	4629      	mov	r1, r5
 80054cc:	eb43 0901 	adc.w	r9, r3, r1
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054e4:	4690      	mov	r8, r2
 80054e6:	4699      	mov	r9, r3
 80054e8:	4623      	mov	r3, r4
 80054ea:	eb18 0303 	adds.w	r3, r8, r3
 80054ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054f2:	462b      	mov	r3, r5
 80054f4:	eb49 0303 	adc.w	r3, r9, r3
 80054f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005508:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800550c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005510:	460b      	mov	r3, r1
 8005512:	18db      	adds	r3, r3, r3
 8005514:	653b      	str	r3, [r7, #80]	; 0x50
 8005516:	4613      	mov	r3, r2
 8005518:	eb42 0303 	adc.w	r3, r2, r3
 800551c:	657b      	str	r3, [r7, #84]	; 0x54
 800551e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005522:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005526:	f7fb fbaf 	bl	8000c88 <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4b63      	ldr	r3, [pc, #396]	; (80056bc <UART_SetConfig+0x360>)
 8005530:	fba3 2302 	umull	r2, r3, r3, r2
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	011c      	lsls	r4, r3, #4
 8005538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005542:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005546:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800554a:	4642      	mov	r2, r8
 800554c:	464b      	mov	r3, r9
 800554e:	1891      	adds	r1, r2, r2
 8005550:	64b9      	str	r1, [r7, #72]	; 0x48
 8005552:	415b      	adcs	r3, r3
 8005554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005556:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800555a:	4641      	mov	r1, r8
 800555c:	eb12 0a01 	adds.w	sl, r2, r1
 8005560:	4649      	mov	r1, r9
 8005562:	eb43 0b01 	adc.w	fp, r3, r1
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005572:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800557a:	4692      	mov	sl, r2
 800557c:	469b      	mov	fp, r3
 800557e:	4643      	mov	r3, r8
 8005580:	eb1a 0303 	adds.w	r3, sl, r3
 8005584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005588:	464b      	mov	r3, r9
 800558a:	eb4b 0303 	adc.w	r3, fp, r3
 800558e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800559e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055a6:	460b      	mov	r3, r1
 80055a8:	18db      	adds	r3, r3, r3
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40
 80055ac:	4613      	mov	r3, r2
 80055ae:	eb42 0303 	adc.w	r3, r2, r3
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
 80055b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055b8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80055bc:	f7fb fb64 	bl	8000c88 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	4b3d      	ldr	r3, [pc, #244]	; (80056bc <UART_SetConfig+0x360>)
 80055c8:	fba3 2301 	umull	r2, r3, r3, r1
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2264      	movs	r2, #100	; 0x64
 80055d0:	fb02 f303 	mul.w	r3, r2, r3
 80055d4:	1acb      	subs	r3, r1, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055dc:	4b37      	ldr	r3, [pc, #220]	; (80056bc <UART_SetConfig+0x360>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055ea:	441c      	add	r4, r3
 80055ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055f6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80055fa:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80055fe:	4642      	mov	r2, r8
 8005600:	464b      	mov	r3, r9
 8005602:	1891      	adds	r1, r2, r2
 8005604:	63b9      	str	r1, [r7, #56]	; 0x38
 8005606:	415b      	adcs	r3, r3
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800560e:	4641      	mov	r1, r8
 8005610:	1851      	adds	r1, r2, r1
 8005612:	6339      	str	r1, [r7, #48]	; 0x30
 8005614:	4649      	mov	r1, r9
 8005616:	414b      	adcs	r3, r1
 8005618:	637b      	str	r3, [r7, #52]	; 0x34
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005626:	4659      	mov	r1, fp
 8005628:	00cb      	lsls	r3, r1, #3
 800562a:	4651      	mov	r1, sl
 800562c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005630:	4651      	mov	r1, sl
 8005632:	00ca      	lsls	r2, r1, #3
 8005634:	4610      	mov	r0, r2
 8005636:	4619      	mov	r1, r3
 8005638:	4603      	mov	r3, r0
 800563a:	4642      	mov	r2, r8
 800563c:	189b      	adds	r3, r3, r2
 800563e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005642:	464b      	mov	r3, r9
 8005644:	460a      	mov	r2, r1
 8005646:	eb42 0303 	adc.w	r3, r2, r3
 800564a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800564e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800565a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800565e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005662:	460b      	mov	r3, r1
 8005664:	18db      	adds	r3, r3, r3
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
 8005668:	4613      	mov	r3, r2
 800566a:	eb42 0303 	adc.w	r3, r2, r3
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005674:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005678:	f7fb fb06 	bl	8000c88 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <UART_SetConfig+0x360>)
 8005682:	fba3 1302 	umull	r1, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	3332      	adds	r3, #50	; 0x32
 8005694:	4a09      	ldr	r2, [pc, #36]	; (80056bc <UART_SetConfig+0x360>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f003 0207 	and.w	r2, r3, #7
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4422      	add	r2, r4
 80056a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056aa:	e108      	b.n	80058be <UART_SetConfig+0x562>
 80056ac:	00a037a0 	.word	0x00a037a0
 80056b0:	08008a64 	.word	0x08008a64
 80056b4:	40011000 	.word	0x40011000
 80056b8:	40011400 	.word	0x40011400
 80056bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80056ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80056d2:	4642      	mov	r2, r8
 80056d4:	464b      	mov	r3, r9
 80056d6:	1891      	adds	r1, r2, r2
 80056d8:	6239      	str	r1, [r7, #32]
 80056da:	415b      	adcs	r3, r3
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
 80056de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056e2:	4641      	mov	r1, r8
 80056e4:	1854      	adds	r4, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb43 0501 	adc.w	r5, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	00eb      	lsls	r3, r5, #3
 80056f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056fa:	00e2      	lsls	r2, r4, #3
 80056fc:	4614      	mov	r4, r2
 80056fe:	461d      	mov	r5, r3
 8005700:	4643      	mov	r3, r8
 8005702:	18e3      	adds	r3, r4, r3
 8005704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005708:	464b      	mov	r3, r9
 800570a:	eb45 0303 	adc.w	r3, r5, r3
 800570e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800571e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005722:	f04f 0200 	mov.w	r2, #0
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800572e:	4629      	mov	r1, r5
 8005730:	008b      	lsls	r3, r1, #2
 8005732:	4621      	mov	r1, r4
 8005734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005738:	4621      	mov	r1, r4
 800573a:	008a      	lsls	r2, r1, #2
 800573c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005740:	f7fb faa2 	bl	8000c88 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4b60      	ldr	r3, [pc, #384]	; (80058cc <UART_SetConfig+0x570>)
 800574a:	fba3 2302 	umull	r2, r3, r3, r2
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	011c      	lsls	r4, r3, #4
 8005752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005756:	2200      	movs	r2, #0
 8005758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800575c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005764:	4642      	mov	r2, r8
 8005766:	464b      	mov	r3, r9
 8005768:	1891      	adds	r1, r2, r2
 800576a:	61b9      	str	r1, [r7, #24]
 800576c:	415b      	adcs	r3, r3
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005774:	4641      	mov	r1, r8
 8005776:	1851      	adds	r1, r2, r1
 8005778:	6139      	str	r1, [r7, #16]
 800577a:	4649      	mov	r1, r9
 800577c:	414b      	adcs	r3, r1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800578c:	4659      	mov	r1, fp
 800578e:	00cb      	lsls	r3, r1, #3
 8005790:	4651      	mov	r1, sl
 8005792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005796:	4651      	mov	r1, sl
 8005798:	00ca      	lsls	r2, r1, #3
 800579a:	4610      	mov	r0, r2
 800579c:	4619      	mov	r1, r3
 800579e:	4603      	mov	r3, r0
 80057a0:	4642      	mov	r2, r8
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057a8:	464b      	mov	r3, r9
 80057aa:	460a      	mov	r2, r1
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80057be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80057cc:	4649      	mov	r1, r9
 80057ce:	008b      	lsls	r3, r1, #2
 80057d0:	4641      	mov	r1, r8
 80057d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057d6:	4641      	mov	r1, r8
 80057d8:	008a      	lsls	r2, r1, #2
 80057da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80057de:	f7fb fa53 	bl	8000c88 <__aeabi_uldivmod>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <UART_SetConfig+0x570>)
 80057e8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	2164      	movs	r1, #100	; 0x64
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	3332      	adds	r3, #50	; 0x32
 80057fa:	4a34      	ldr	r2, [pc, #208]	; (80058cc <UART_SetConfig+0x570>)
 80057fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005806:	441c      	add	r4, r3
 8005808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800580c:	2200      	movs	r2, #0
 800580e:	673b      	str	r3, [r7, #112]	; 0x70
 8005810:	677a      	str	r2, [r7, #116]	; 0x74
 8005812:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005816:	4642      	mov	r2, r8
 8005818:	464b      	mov	r3, r9
 800581a:	1891      	adds	r1, r2, r2
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	415b      	adcs	r3, r3
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005826:	4641      	mov	r1, r8
 8005828:	1851      	adds	r1, r2, r1
 800582a:	6039      	str	r1, [r7, #0]
 800582c:	4649      	mov	r1, r9
 800582e:	414b      	adcs	r3, r1
 8005830:	607b      	str	r3, [r7, #4]
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800583e:	4659      	mov	r1, fp
 8005840:	00cb      	lsls	r3, r1, #3
 8005842:	4651      	mov	r1, sl
 8005844:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005848:	4651      	mov	r1, sl
 800584a:	00ca      	lsls	r2, r1, #3
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	4603      	mov	r3, r0
 8005852:	4642      	mov	r2, r8
 8005854:	189b      	adds	r3, r3, r2
 8005856:	66bb      	str	r3, [r7, #104]	; 0x68
 8005858:	464b      	mov	r3, r9
 800585a:	460a      	mov	r2, r1
 800585c:	eb42 0303 	adc.w	r3, r2, r3
 8005860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	663b      	str	r3, [r7, #96]	; 0x60
 800586c:	667a      	str	r2, [r7, #100]	; 0x64
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800587a:	4649      	mov	r1, r9
 800587c:	008b      	lsls	r3, r1, #2
 800587e:	4641      	mov	r1, r8
 8005880:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005884:	4641      	mov	r1, r8
 8005886:	008a      	lsls	r2, r1, #2
 8005888:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800588c:	f7fb f9fc 	bl	8000c88 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <UART_SetConfig+0x570>)
 8005896:	fba3 1302 	umull	r1, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2164      	movs	r1, #100	; 0x64
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <UART_SetConfig+0x570>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 020f 	and.w	r2, r3, #15
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4422      	add	r2, r4
 80058bc:	609a      	str	r2, [r3, #8]
}
 80058be:	bf00      	nop
 80058c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058c4:	46bd      	mov	sp, r7
 80058c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ca:	bf00      	nop
 80058cc:	51eb851f 	.word	0x51eb851f

080058d0 <__errno>:
 80058d0:	4b01      	ldr	r3, [pc, #4]	; (80058d8 <__errno+0x8>)
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000018 	.word	0x20000018

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4d0d      	ldr	r5, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4c0d      	ldr	r4, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1b64      	subs	r4, r4, r5
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	2600      	movs	r6, #0
 80058e8:	42a6      	cmp	r6, r4
 80058ea:	d109      	bne.n	8005900 <__libc_init_array+0x24>
 80058ec:	4d0b      	ldr	r5, [pc, #44]	; (800591c <__libc_init_array+0x40>)
 80058ee:	4c0c      	ldr	r4, [pc, #48]	; (8005920 <__libc_init_array+0x44>)
 80058f0:	f002 ff02 	bl	80086f8 <_init>
 80058f4:	1b64      	subs	r4, r4, r5
 80058f6:	10a4      	asrs	r4, r4, #2
 80058f8:	2600      	movs	r6, #0
 80058fa:	42a6      	cmp	r6, r4
 80058fc:	d105      	bne.n	800590a <__libc_init_array+0x2e>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	f855 3b04 	ldr.w	r3, [r5], #4
 8005904:	4798      	blx	r3
 8005906:	3601      	adds	r6, #1
 8005908:	e7ee      	b.n	80058e8 <__libc_init_array+0xc>
 800590a:	f855 3b04 	ldr.w	r3, [r5], #4
 800590e:	4798      	blx	r3
 8005910:	3601      	adds	r6, #1
 8005912:	e7f2      	b.n	80058fa <__libc_init_array+0x1e>
 8005914:	08008ed4 	.word	0x08008ed4
 8005918:	08008ed4 	.word	0x08008ed4
 800591c:	08008ed4 	.word	0x08008ed4
 8005920:	08008ed8 	.word	0x08008ed8

08005924 <memset>:
 8005924:	4402      	add	r2, r0
 8005926:	4603      	mov	r3, r0
 8005928:	4293      	cmp	r3, r2
 800592a:	d100      	bne.n	800592e <memset+0xa>
 800592c:	4770      	bx	lr
 800592e:	f803 1b01 	strb.w	r1, [r3], #1
 8005932:	e7f9      	b.n	8005928 <memset+0x4>

08005934 <__cvt>:
 8005934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005938:	ec55 4b10 	vmov	r4, r5, d0
 800593c:	2d00      	cmp	r5, #0
 800593e:	460e      	mov	r6, r1
 8005940:	4619      	mov	r1, r3
 8005942:	462b      	mov	r3, r5
 8005944:	bfbb      	ittet	lt
 8005946:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800594a:	461d      	movlt	r5, r3
 800594c:	2300      	movge	r3, #0
 800594e:	232d      	movlt	r3, #45	; 0x2d
 8005950:	700b      	strb	r3, [r1, #0]
 8005952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005954:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005958:	4691      	mov	r9, r2
 800595a:	f023 0820 	bic.w	r8, r3, #32
 800595e:	bfbc      	itt	lt
 8005960:	4622      	movlt	r2, r4
 8005962:	4614      	movlt	r4, r2
 8005964:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005968:	d005      	beq.n	8005976 <__cvt+0x42>
 800596a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800596e:	d100      	bne.n	8005972 <__cvt+0x3e>
 8005970:	3601      	adds	r6, #1
 8005972:	2102      	movs	r1, #2
 8005974:	e000      	b.n	8005978 <__cvt+0x44>
 8005976:	2103      	movs	r1, #3
 8005978:	ab03      	add	r3, sp, #12
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	ab02      	add	r3, sp, #8
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	ec45 4b10 	vmov	d0, r4, r5
 8005984:	4653      	mov	r3, sl
 8005986:	4632      	mov	r2, r6
 8005988:	f000 fcea 	bl	8006360 <_dtoa_r>
 800598c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005990:	4607      	mov	r7, r0
 8005992:	d102      	bne.n	800599a <__cvt+0x66>
 8005994:	f019 0f01 	tst.w	r9, #1
 8005998:	d022      	beq.n	80059e0 <__cvt+0xac>
 800599a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800599e:	eb07 0906 	add.w	r9, r7, r6
 80059a2:	d110      	bne.n	80059c6 <__cvt+0x92>
 80059a4:	783b      	ldrb	r3, [r7, #0]
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	d10a      	bne.n	80059c0 <__cvt+0x8c>
 80059aa:	2200      	movs	r2, #0
 80059ac:	2300      	movs	r3, #0
 80059ae:	4620      	mov	r0, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	f7fb f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80059b6:	b918      	cbnz	r0, 80059c0 <__cvt+0x8c>
 80059b8:	f1c6 0601 	rsb	r6, r6, #1
 80059bc:	f8ca 6000 	str.w	r6, [sl]
 80059c0:	f8da 3000 	ldr.w	r3, [sl]
 80059c4:	4499      	add	r9, r3
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	4620      	mov	r0, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	f7fb f89b 	bl	8000b08 <__aeabi_dcmpeq>
 80059d2:	b108      	cbz	r0, 80059d8 <__cvt+0xa4>
 80059d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059d8:	2230      	movs	r2, #48	; 0x30
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	454b      	cmp	r3, r9
 80059de:	d307      	bcc.n	80059f0 <__cvt+0xbc>
 80059e0:	9b03      	ldr	r3, [sp, #12]
 80059e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e4:	1bdb      	subs	r3, r3, r7
 80059e6:	4638      	mov	r0, r7
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	b004      	add	sp, #16
 80059ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f0:	1c59      	adds	r1, r3, #1
 80059f2:	9103      	str	r1, [sp, #12]
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e7f0      	b.n	80059da <__cvt+0xa6>

080059f8 <__exponent>:
 80059f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059fa:	4603      	mov	r3, r0
 80059fc:	2900      	cmp	r1, #0
 80059fe:	bfb8      	it	lt
 8005a00:	4249      	neglt	r1, r1
 8005a02:	f803 2b02 	strb.w	r2, [r3], #2
 8005a06:	bfb4      	ite	lt
 8005a08:	222d      	movlt	r2, #45	; 0x2d
 8005a0a:	222b      	movge	r2, #43	; 0x2b
 8005a0c:	2909      	cmp	r1, #9
 8005a0e:	7042      	strb	r2, [r0, #1]
 8005a10:	dd2a      	ble.n	8005a68 <__exponent+0x70>
 8005a12:	f10d 0407 	add.w	r4, sp, #7
 8005a16:	46a4      	mov	ip, r4
 8005a18:	270a      	movs	r7, #10
 8005a1a:	46a6      	mov	lr, r4
 8005a1c:	460a      	mov	r2, r1
 8005a1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a22:	fb07 1516 	mls	r5, r7, r6, r1
 8005a26:	3530      	adds	r5, #48	; 0x30
 8005a28:	2a63      	cmp	r2, #99	; 0x63
 8005a2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a32:	4631      	mov	r1, r6
 8005a34:	dcf1      	bgt.n	8005a1a <__exponent+0x22>
 8005a36:	3130      	adds	r1, #48	; 0x30
 8005a38:	f1ae 0502 	sub.w	r5, lr, #2
 8005a3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a40:	1c44      	adds	r4, r0, #1
 8005a42:	4629      	mov	r1, r5
 8005a44:	4561      	cmp	r1, ip
 8005a46:	d30a      	bcc.n	8005a5e <__exponent+0x66>
 8005a48:	f10d 0209 	add.w	r2, sp, #9
 8005a4c:	eba2 020e 	sub.w	r2, r2, lr
 8005a50:	4565      	cmp	r5, ip
 8005a52:	bf88      	it	hi
 8005a54:	2200      	movhi	r2, #0
 8005a56:	4413      	add	r3, r2
 8005a58:	1a18      	subs	r0, r3, r0
 8005a5a:	b003      	add	sp, #12
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a66:	e7ed      	b.n	8005a44 <__exponent+0x4c>
 8005a68:	2330      	movs	r3, #48	; 0x30
 8005a6a:	3130      	adds	r1, #48	; 0x30
 8005a6c:	7083      	strb	r3, [r0, #2]
 8005a6e:	70c1      	strb	r1, [r0, #3]
 8005a70:	1d03      	adds	r3, r0, #4
 8005a72:	e7f1      	b.n	8005a58 <__exponent+0x60>

08005a74 <_printf_float>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	ed2d 8b02 	vpush	{d8}
 8005a7c:	b08d      	sub	sp, #52	; 0x34
 8005a7e:	460c      	mov	r4, r1
 8005a80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a84:	4616      	mov	r6, r2
 8005a86:	461f      	mov	r7, r3
 8005a88:	4605      	mov	r5, r0
 8005a8a:	f001 fa57 	bl	8006f3c <_localeconv_r>
 8005a8e:	f8d0 a000 	ldr.w	sl, [r0]
 8005a92:	4650      	mov	r0, sl
 8005a94:	f7fa fbbc 	bl	8000210 <strlen>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005aa8:	3307      	adds	r3, #7
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	f103 0208 	add.w	r2, r3, #8
 8005ab2:	f8c8 2000 	str.w	r2, [r8]
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005abe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ac2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ac6:	9307      	str	r3, [sp, #28]
 8005ac8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005acc:	ee08 0a10 	vmov	s16, r0
 8005ad0:	4b9f      	ldr	r3, [pc, #636]	; (8005d50 <_printf_float+0x2dc>)
 8005ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	f7fb f847 	bl	8000b6c <__aeabi_dcmpun>
 8005ade:	bb88      	cbnz	r0, 8005b44 <_printf_float+0xd0>
 8005ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ae4:	4b9a      	ldr	r3, [pc, #616]	; (8005d50 <_printf_float+0x2dc>)
 8005ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aea:	f7fb f821 	bl	8000b30 <__aeabi_dcmple>
 8005aee:	bb48      	cbnz	r0, 8005b44 <_printf_float+0xd0>
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	4640      	mov	r0, r8
 8005af6:	4649      	mov	r1, r9
 8005af8:	f7fb f810 	bl	8000b1c <__aeabi_dcmplt>
 8005afc:	b110      	cbz	r0, 8005b04 <_printf_float+0x90>
 8005afe:	232d      	movs	r3, #45	; 0x2d
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b04:	4b93      	ldr	r3, [pc, #588]	; (8005d54 <_printf_float+0x2e0>)
 8005b06:	4894      	ldr	r0, [pc, #592]	; (8005d58 <_printf_float+0x2e4>)
 8005b08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b0c:	bf94      	ite	ls
 8005b0e:	4698      	movls	r8, r3
 8005b10:	4680      	movhi	r8, r0
 8005b12:	2303      	movs	r3, #3
 8005b14:	6123      	str	r3, [r4, #16]
 8005b16:	9b05      	ldr	r3, [sp, #20]
 8005b18:	f023 0204 	bic.w	r2, r3, #4
 8005b1c:	6022      	str	r2, [r4, #0]
 8005b1e:	f04f 0900 	mov.w	r9, #0
 8005b22:	9700      	str	r7, [sp, #0]
 8005b24:	4633      	mov	r3, r6
 8005b26:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b28:	4621      	mov	r1, r4
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f000 f9d8 	bl	8005ee0 <_printf_common>
 8005b30:	3001      	adds	r0, #1
 8005b32:	f040 8090 	bne.w	8005c56 <_printf_float+0x1e2>
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	b00d      	add	sp, #52	; 0x34
 8005b3c:	ecbd 8b02 	vpop	{d8}
 8005b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	f7fb f80e 	bl	8000b6c <__aeabi_dcmpun>
 8005b50:	b140      	cbz	r0, 8005b64 <_printf_float+0xf0>
 8005b52:	464b      	mov	r3, r9
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bfbc      	itt	lt
 8005b58:	232d      	movlt	r3, #45	; 0x2d
 8005b5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b5e:	487f      	ldr	r0, [pc, #508]	; (8005d5c <_printf_float+0x2e8>)
 8005b60:	4b7f      	ldr	r3, [pc, #508]	; (8005d60 <_printf_float+0x2ec>)
 8005b62:	e7d1      	b.n	8005b08 <_printf_float+0x94>
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b6a:	9206      	str	r2, [sp, #24]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	d13f      	bne.n	8005bf0 <_printf_float+0x17c>
 8005b70:	2306      	movs	r3, #6
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	6861      	ldr	r1, [r4, #4]
 8005b78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	ab0a      	add	r3, sp, #40	; 0x28
 8005b82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b86:	ab09      	add	r3, sp, #36	; 0x24
 8005b88:	ec49 8b10 	vmov	d0, r8, r9
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6022      	str	r2, [r4, #0]
 8005b90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b94:	4628      	mov	r0, r5
 8005b96:	f7ff fecd 	bl	8005934 <__cvt>
 8005b9a:	9b06      	ldr	r3, [sp, #24]
 8005b9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b9e:	2b47      	cmp	r3, #71	; 0x47
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	d108      	bne.n	8005bb6 <_printf_float+0x142>
 8005ba4:	1cc8      	adds	r0, r1, #3
 8005ba6:	db02      	blt.n	8005bae <_printf_float+0x13a>
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	4299      	cmp	r1, r3
 8005bac:	dd41      	ble.n	8005c32 <_printf_float+0x1be>
 8005bae:	f1ab 0b02 	sub.w	fp, fp, #2
 8005bb2:	fa5f fb8b 	uxtb.w	fp, fp
 8005bb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bba:	d820      	bhi.n	8005bfe <_printf_float+0x18a>
 8005bbc:	3901      	subs	r1, #1
 8005bbe:	465a      	mov	r2, fp
 8005bc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bc4:	9109      	str	r1, [sp, #36]	; 0x24
 8005bc6:	f7ff ff17 	bl	80059f8 <__exponent>
 8005bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bcc:	1813      	adds	r3, r2, r0
 8005bce:	2a01      	cmp	r2, #1
 8005bd0:	4681      	mov	r9, r0
 8005bd2:	6123      	str	r3, [r4, #16]
 8005bd4:	dc02      	bgt.n	8005bdc <_printf_float+0x168>
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	07d2      	lsls	r2, r2, #31
 8005bda:	d501      	bpl.n	8005be0 <_printf_float+0x16c>
 8005bdc:	3301      	adds	r3, #1
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d09c      	beq.n	8005b22 <_printf_float+0xae>
 8005be8:	232d      	movs	r3, #45	; 0x2d
 8005bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bee:	e798      	b.n	8005b22 <_printf_float+0xae>
 8005bf0:	9a06      	ldr	r2, [sp, #24]
 8005bf2:	2a47      	cmp	r2, #71	; 0x47
 8005bf4:	d1be      	bne.n	8005b74 <_printf_float+0x100>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1bc      	bne.n	8005b74 <_printf_float+0x100>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e7b9      	b.n	8005b72 <_printf_float+0xfe>
 8005bfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c02:	d118      	bne.n	8005c36 <_printf_float+0x1c2>
 8005c04:	2900      	cmp	r1, #0
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	dd0b      	ble.n	8005c22 <_printf_float+0x1ae>
 8005c0a:	6121      	str	r1, [r4, #16]
 8005c0c:	b913      	cbnz	r3, 8005c14 <_printf_float+0x1a0>
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	07d0      	lsls	r0, r2, #31
 8005c12:	d502      	bpl.n	8005c1a <_printf_float+0x1a6>
 8005c14:	3301      	adds	r3, #1
 8005c16:	440b      	add	r3, r1
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c1c:	f04f 0900 	mov.w	r9, #0
 8005c20:	e7de      	b.n	8005be0 <_printf_float+0x16c>
 8005c22:	b913      	cbnz	r3, 8005c2a <_printf_float+0x1b6>
 8005c24:	6822      	ldr	r2, [r4, #0]
 8005c26:	07d2      	lsls	r2, r2, #31
 8005c28:	d501      	bpl.n	8005c2e <_printf_float+0x1ba>
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	e7f4      	b.n	8005c18 <_printf_float+0x1a4>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7f2      	b.n	8005c18 <_printf_float+0x1a4>
 8005c32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	db05      	blt.n	8005c48 <_printf_float+0x1d4>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	6121      	str	r1, [r4, #16]
 8005c40:	07d8      	lsls	r0, r3, #31
 8005c42:	d5ea      	bpl.n	8005c1a <_printf_float+0x1a6>
 8005c44:	1c4b      	adds	r3, r1, #1
 8005c46:	e7e7      	b.n	8005c18 <_printf_float+0x1a4>
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	bfd4      	ite	le
 8005c4c:	f1c1 0202 	rsble	r2, r1, #2
 8005c50:	2201      	movgt	r2, #1
 8005c52:	4413      	add	r3, r2
 8005c54:	e7e0      	b.n	8005c18 <_printf_float+0x1a4>
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	055a      	lsls	r2, r3, #21
 8005c5a:	d407      	bmi.n	8005c6c <_printf_float+0x1f8>
 8005c5c:	6923      	ldr	r3, [r4, #16]
 8005c5e:	4642      	mov	r2, r8
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b8      	blx	r7
 8005c66:	3001      	adds	r0, #1
 8005c68:	d12c      	bne.n	8005cc4 <_printf_float+0x250>
 8005c6a:	e764      	b.n	8005b36 <_printf_float+0xc2>
 8005c6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c70:	f240 80e0 	bls.w	8005e34 <_printf_float+0x3c0>
 8005c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f7fa ff44 	bl	8000b08 <__aeabi_dcmpeq>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d034      	beq.n	8005cee <_printf_float+0x27a>
 8005c84:	4a37      	ldr	r2, [pc, #220]	; (8005d64 <_printf_float+0x2f0>)
 8005c86:	2301      	movs	r3, #1
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f af51 	beq.w	8005b36 <_printf_float+0xc2>
 8005c94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	db02      	blt.n	8005ca2 <_printf_float+0x22e>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	07d8      	lsls	r0, r3, #31
 8005ca0:	d510      	bpl.n	8005cc4 <_printf_float+0x250>
 8005ca2:	ee18 3a10 	vmov	r3, s16
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f af41 	beq.w	8005b36 <_printf_float+0xc2>
 8005cb4:	f04f 0800 	mov.w	r8, #0
 8005cb8:	f104 091a 	add.w	r9, r4, #26
 8005cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	4543      	cmp	r3, r8
 8005cc2:	dc09      	bgt.n	8005cd8 <_printf_float+0x264>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	079b      	lsls	r3, r3, #30
 8005cc8:	f100 8105 	bmi.w	8005ed6 <_printf_float+0x462>
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	4618      	movlt	r0, r3
 8005cd6:	e730      	b.n	8005b3a <_printf_float+0xc6>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	464a      	mov	r2, r9
 8005cdc:	4631      	mov	r1, r6
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f af27 	beq.w	8005b36 <_printf_float+0xc2>
 8005ce8:	f108 0801 	add.w	r8, r8, #1
 8005cec:	e7e6      	b.n	8005cbc <_printf_float+0x248>
 8005cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dc39      	bgt.n	8005d68 <_printf_float+0x2f4>
 8005cf4:	4a1b      	ldr	r2, [pc, #108]	; (8005d64 <_printf_float+0x2f0>)
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	47b8      	blx	r7
 8005cfe:	3001      	adds	r0, #1
 8005d00:	f43f af19 	beq.w	8005b36 <_printf_float+0xc2>
 8005d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	d102      	bne.n	8005d12 <_printf_float+0x29e>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	07d9      	lsls	r1, r3, #31
 8005d10:	d5d8      	bpl.n	8005cc4 <_printf_float+0x250>
 8005d12:	ee18 3a10 	vmov	r3, s16
 8005d16:	4652      	mov	r2, sl
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b8      	blx	r7
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f43f af09 	beq.w	8005b36 <_printf_float+0xc2>
 8005d24:	f04f 0900 	mov.w	r9, #0
 8005d28:	f104 0a1a 	add.w	sl, r4, #26
 8005d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2e:	425b      	negs	r3, r3
 8005d30:	454b      	cmp	r3, r9
 8005d32:	dc01      	bgt.n	8005d38 <_printf_float+0x2c4>
 8005d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d36:	e792      	b.n	8005c5e <_printf_float+0x1ea>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4652      	mov	r2, sl
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	4628      	mov	r0, r5
 8005d40:	47b8      	blx	r7
 8005d42:	3001      	adds	r0, #1
 8005d44:	f43f aef7 	beq.w	8005b36 <_printf_float+0xc2>
 8005d48:	f109 0901 	add.w	r9, r9, #1
 8005d4c:	e7ee      	b.n	8005d2c <_printf_float+0x2b8>
 8005d4e:	bf00      	nop
 8005d50:	7fefffff 	.word	0x7fefffff
 8005d54:	08008af4 	.word	0x08008af4
 8005d58:	08008af8 	.word	0x08008af8
 8005d5c:	08008b00 	.word	0x08008b00
 8005d60:	08008afc 	.word	0x08008afc
 8005d64:	08008b04 	.word	0x08008b04
 8005d68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	bfa8      	it	ge
 8005d70:	461a      	movge	r2, r3
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	4691      	mov	r9, r2
 8005d76:	dc37      	bgt.n	8005de8 <_printf_float+0x374>
 8005d78:	f04f 0b00 	mov.w	fp, #0
 8005d7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d80:	f104 021a 	add.w	r2, r4, #26
 8005d84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d86:	9305      	str	r3, [sp, #20]
 8005d88:	eba3 0309 	sub.w	r3, r3, r9
 8005d8c:	455b      	cmp	r3, fp
 8005d8e:	dc33      	bgt.n	8005df8 <_printf_float+0x384>
 8005d90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d94:	429a      	cmp	r2, r3
 8005d96:	db3b      	blt.n	8005e10 <_printf_float+0x39c>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	07da      	lsls	r2, r3, #31
 8005d9c:	d438      	bmi.n	8005e10 <_printf_float+0x39c>
 8005d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da0:	9a05      	ldr	r2, [sp, #20]
 8005da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da4:	1a9a      	subs	r2, r3, r2
 8005da6:	eba3 0901 	sub.w	r9, r3, r1
 8005daa:	4591      	cmp	r9, r2
 8005dac:	bfa8      	it	ge
 8005dae:	4691      	movge	r9, r2
 8005db0:	f1b9 0f00 	cmp.w	r9, #0
 8005db4:	dc35      	bgt.n	8005e22 <_printf_float+0x3ae>
 8005db6:	f04f 0800 	mov.w	r8, #0
 8005dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dbe:	f104 0a1a 	add.w	sl, r4, #26
 8005dc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc6:	1a9b      	subs	r3, r3, r2
 8005dc8:	eba3 0309 	sub.w	r3, r3, r9
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	f77f af79 	ble.w	8005cc4 <_printf_float+0x250>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4652      	mov	r2, sl
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	47b8      	blx	r7
 8005ddc:	3001      	adds	r0, #1
 8005dde:	f43f aeaa 	beq.w	8005b36 <_printf_float+0xc2>
 8005de2:	f108 0801 	add.w	r8, r8, #1
 8005de6:	e7ec      	b.n	8005dc2 <_printf_float+0x34e>
 8005de8:	4613      	mov	r3, r2
 8005dea:	4631      	mov	r1, r6
 8005dec:	4642      	mov	r2, r8
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	d1c0      	bne.n	8005d78 <_printf_float+0x304>
 8005df6:	e69e      	b.n	8005b36 <_printf_float+0xc2>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	9205      	str	r2, [sp, #20]
 8005e00:	47b8      	blx	r7
 8005e02:	3001      	adds	r0, #1
 8005e04:	f43f ae97 	beq.w	8005b36 <_printf_float+0xc2>
 8005e08:	9a05      	ldr	r2, [sp, #20]
 8005e0a:	f10b 0b01 	add.w	fp, fp, #1
 8005e0e:	e7b9      	b.n	8005d84 <_printf_float+0x310>
 8005e10:	ee18 3a10 	vmov	r3, s16
 8005e14:	4652      	mov	r2, sl
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d1be      	bne.n	8005d9e <_printf_float+0x32a>
 8005e20:	e689      	b.n	8005b36 <_printf_float+0xc2>
 8005e22:	9a05      	ldr	r2, [sp, #20]
 8005e24:	464b      	mov	r3, r9
 8005e26:	4442      	add	r2, r8
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	47b8      	blx	r7
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d1c1      	bne.n	8005db6 <_printf_float+0x342>
 8005e32:	e680      	b.n	8005b36 <_printf_float+0xc2>
 8005e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e36:	2a01      	cmp	r2, #1
 8005e38:	dc01      	bgt.n	8005e3e <_printf_float+0x3ca>
 8005e3a:	07db      	lsls	r3, r3, #31
 8005e3c:	d538      	bpl.n	8005eb0 <_printf_float+0x43c>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4642      	mov	r2, r8
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	f43f ae74 	beq.w	8005b36 <_printf_float+0xc2>
 8005e4e:	ee18 3a10 	vmov	r3, s16
 8005e52:	4652      	mov	r2, sl
 8005e54:	4631      	mov	r1, r6
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b8      	blx	r7
 8005e5a:	3001      	adds	r0, #1
 8005e5c:	f43f ae6b 	beq.w	8005b36 <_printf_float+0xc2>
 8005e60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e64:	2200      	movs	r2, #0
 8005e66:	2300      	movs	r3, #0
 8005e68:	f7fa fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 8005e6c:	b9d8      	cbnz	r0, 8005ea6 <_printf_float+0x432>
 8005e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e70:	f108 0201 	add.w	r2, r8, #1
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d10e      	bne.n	8005e9e <_printf_float+0x42a>
 8005e80:	e659      	b.n	8005b36 <_printf_float+0xc2>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4652      	mov	r2, sl
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f ae52 	beq.w	8005b36 <_printf_float+0xc2>
 8005e92:	f108 0801 	add.w	r8, r8, #1
 8005e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	4543      	cmp	r3, r8
 8005e9c:	dcf1      	bgt.n	8005e82 <_printf_float+0x40e>
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ea4:	e6dc      	b.n	8005c60 <_printf_float+0x1ec>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	f104 0a1a 	add.w	sl, r4, #26
 8005eae:	e7f2      	b.n	8005e96 <_printf_float+0x422>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	4642      	mov	r2, r8
 8005eb4:	e7df      	b.n	8005e76 <_printf_float+0x402>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	464a      	mov	r2, r9
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f ae38 	beq.w	8005b36 <_printf_float+0xc2>
 8005ec6:	f108 0801 	add.w	r8, r8, #1
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ece:	1a5b      	subs	r3, r3, r1
 8005ed0:	4543      	cmp	r3, r8
 8005ed2:	dcf0      	bgt.n	8005eb6 <_printf_float+0x442>
 8005ed4:	e6fa      	b.n	8005ccc <_printf_float+0x258>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	f104 0919 	add.w	r9, r4, #25
 8005ede:	e7f4      	b.n	8005eca <_printf_float+0x456>

08005ee0 <_printf_common>:
 8005ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee4:	4616      	mov	r6, r2
 8005ee6:	4699      	mov	r9, r3
 8005ee8:	688a      	ldr	r2, [r1, #8]
 8005eea:	690b      	ldr	r3, [r1, #16]
 8005eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	bfb8      	it	lt
 8005ef4:	4613      	movlt	r3, r2
 8005ef6:	6033      	str	r3, [r6, #0]
 8005ef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005efc:	4607      	mov	r7, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	b10a      	cbz	r2, 8005f06 <_printf_common+0x26>
 8005f02:	3301      	adds	r3, #1
 8005f04:	6033      	str	r3, [r6, #0]
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	0699      	lsls	r1, r3, #26
 8005f0a:	bf42      	ittt	mi
 8005f0c:	6833      	ldrmi	r3, [r6, #0]
 8005f0e:	3302      	addmi	r3, #2
 8005f10:	6033      	strmi	r3, [r6, #0]
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	f015 0506 	ands.w	r5, r5, #6
 8005f18:	d106      	bne.n	8005f28 <_printf_common+0x48>
 8005f1a:	f104 0a19 	add.w	sl, r4, #25
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	6832      	ldr	r2, [r6, #0]
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dc26      	bgt.n	8005f76 <_printf_common+0x96>
 8005f28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f2c:	1e13      	subs	r3, r2, #0
 8005f2e:	6822      	ldr	r2, [r4, #0]
 8005f30:	bf18      	it	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	0692      	lsls	r2, r2, #26
 8005f36:	d42b      	bmi.n	8005f90 <_printf_common+0xb0>
 8005f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	4638      	mov	r0, r7
 8005f40:	47c0      	blx	r8
 8005f42:	3001      	adds	r0, #1
 8005f44:	d01e      	beq.n	8005f84 <_printf_common+0xa4>
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	68e5      	ldr	r5, [r4, #12]
 8005f4a:	6832      	ldr	r2, [r6, #0]
 8005f4c:	f003 0306 	and.w	r3, r3, #6
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	bf08      	it	eq
 8005f54:	1aad      	subeq	r5, r5, r2
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	bf0c      	ite	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	2500      	movne	r5, #0
 8005f62:	4293      	cmp	r3, r2
 8005f64:	bfc4      	itt	gt
 8005f66:	1a9b      	subgt	r3, r3, r2
 8005f68:	18ed      	addgt	r5, r5, r3
 8005f6a:	2600      	movs	r6, #0
 8005f6c:	341a      	adds	r4, #26
 8005f6e:	42b5      	cmp	r5, r6
 8005f70:	d11a      	bne.n	8005fa8 <_printf_common+0xc8>
 8005f72:	2000      	movs	r0, #0
 8005f74:	e008      	b.n	8005f88 <_printf_common+0xa8>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	47c0      	blx	r8
 8005f80:	3001      	adds	r0, #1
 8005f82:	d103      	bne.n	8005f8c <_printf_common+0xac>
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	e7c6      	b.n	8005f1e <_printf_common+0x3e>
 8005f90:	18e1      	adds	r1, r4, r3
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	2030      	movs	r0, #48	; 0x30
 8005f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f9a:	4422      	add	r2, r4
 8005f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	e7c7      	b.n	8005f38 <_printf_common+0x58>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4622      	mov	r2, r4
 8005fac:	4649      	mov	r1, r9
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c0      	blx	r8
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d0e6      	beq.n	8005f84 <_printf_common+0xa4>
 8005fb6:	3601      	adds	r6, #1
 8005fb8:	e7d9      	b.n	8005f6e <_printf_common+0x8e>
	...

08005fbc <_printf_i>:
 8005fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	7e0f      	ldrb	r7, [r1, #24]
 8005fc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fc4:	2f78      	cmp	r7, #120	; 0x78
 8005fc6:	4691      	mov	r9, r2
 8005fc8:	4680      	mov	r8, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	469a      	mov	sl, r3
 8005fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fd2:	d807      	bhi.n	8005fe4 <_printf_i+0x28>
 8005fd4:	2f62      	cmp	r7, #98	; 0x62
 8005fd6:	d80a      	bhi.n	8005fee <_printf_i+0x32>
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	f000 80d8 	beq.w	800618e <_printf_i+0x1d2>
 8005fde:	2f58      	cmp	r7, #88	; 0x58
 8005fe0:	f000 80a3 	beq.w	800612a <_printf_i+0x16e>
 8005fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fec:	e03a      	b.n	8006064 <_printf_i+0xa8>
 8005fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ff2:	2b15      	cmp	r3, #21
 8005ff4:	d8f6      	bhi.n	8005fe4 <_printf_i+0x28>
 8005ff6:	a101      	add	r1, pc, #4	; (adr r1, 8005ffc <_printf_i+0x40>)
 8005ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ffc:	08006055 	.word	0x08006055
 8006000:	08006069 	.word	0x08006069
 8006004:	08005fe5 	.word	0x08005fe5
 8006008:	08005fe5 	.word	0x08005fe5
 800600c:	08005fe5 	.word	0x08005fe5
 8006010:	08005fe5 	.word	0x08005fe5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fe5 	.word	0x08005fe5
 800601c:	08005fe5 	.word	0x08005fe5
 8006020:	08005fe5 	.word	0x08005fe5
 8006024:	08005fe5 	.word	0x08005fe5
 8006028:	08006175 	.word	0x08006175
 800602c:	08006099 	.word	0x08006099
 8006030:	08006157 	.word	0x08006157
 8006034:	08005fe5 	.word	0x08005fe5
 8006038:	08005fe5 	.word	0x08005fe5
 800603c:	08006197 	.word	0x08006197
 8006040:	08005fe5 	.word	0x08005fe5
 8006044:	08006099 	.word	0x08006099
 8006048:	08005fe5 	.word	0x08005fe5
 800604c:	08005fe5 	.word	0x08005fe5
 8006050:	0800615f 	.word	0x0800615f
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	602a      	str	r2, [r5, #0]
 800605c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006064:	2301      	movs	r3, #1
 8006066:	e0a3      	b.n	80061b0 <_printf_i+0x1f4>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	6829      	ldr	r1, [r5, #0]
 800606c:	0606      	lsls	r6, r0, #24
 800606e:	f101 0304 	add.w	r3, r1, #4
 8006072:	d50a      	bpl.n	800608a <_printf_i+0xce>
 8006074:	680e      	ldr	r6, [r1, #0]
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	2e00      	cmp	r6, #0
 800607a:	da03      	bge.n	8006084 <_printf_i+0xc8>
 800607c:	232d      	movs	r3, #45	; 0x2d
 800607e:	4276      	negs	r6, r6
 8006080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006084:	485e      	ldr	r0, [pc, #376]	; (8006200 <_printf_i+0x244>)
 8006086:	230a      	movs	r3, #10
 8006088:	e019      	b.n	80060be <_printf_i+0x102>
 800608a:	680e      	ldr	r6, [r1, #0]
 800608c:	602b      	str	r3, [r5, #0]
 800608e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006092:	bf18      	it	ne
 8006094:	b236      	sxthne	r6, r6
 8006096:	e7ef      	b.n	8006078 <_printf_i+0xbc>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	1d19      	adds	r1, r3, #4
 800609e:	6029      	str	r1, [r5, #0]
 80060a0:	0601      	lsls	r1, r0, #24
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0xec>
 80060a4:	681e      	ldr	r6, [r3, #0]
 80060a6:	e002      	b.n	80060ae <_printf_i+0xf2>
 80060a8:	0646      	lsls	r6, r0, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0xe8>
 80060ac:	881e      	ldrh	r6, [r3, #0]
 80060ae:	4854      	ldr	r0, [pc, #336]	; (8006200 <_printf_i+0x244>)
 80060b0:	2f6f      	cmp	r7, #111	; 0x6f
 80060b2:	bf0c      	ite	eq
 80060b4:	2308      	moveq	r3, #8
 80060b6:	230a      	movne	r3, #10
 80060b8:	2100      	movs	r1, #0
 80060ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060be:	6865      	ldr	r5, [r4, #4]
 80060c0:	60a5      	str	r5, [r4, #8]
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	bfa2      	ittt	ge
 80060c6:	6821      	ldrge	r1, [r4, #0]
 80060c8:	f021 0104 	bicge.w	r1, r1, #4
 80060cc:	6021      	strge	r1, [r4, #0]
 80060ce:	b90e      	cbnz	r6, 80060d4 <_printf_i+0x118>
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	d04d      	beq.n	8006170 <_printf_i+0x1b4>
 80060d4:	4615      	mov	r5, r2
 80060d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80060da:	fb03 6711 	mls	r7, r3, r1, r6
 80060de:	5dc7      	ldrb	r7, [r0, r7]
 80060e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060e4:	4637      	mov	r7, r6
 80060e6:	42bb      	cmp	r3, r7
 80060e8:	460e      	mov	r6, r1
 80060ea:	d9f4      	bls.n	80060d6 <_printf_i+0x11a>
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d10b      	bne.n	8006108 <_printf_i+0x14c>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	07de      	lsls	r6, r3, #31
 80060f4:	d508      	bpl.n	8006108 <_printf_i+0x14c>
 80060f6:	6923      	ldr	r3, [r4, #16]
 80060f8:	6861      	ldr	r1, [r4, #4]
 80060fa:	4299      	cmp	r1, r3
 80060fc:	bfde      	ittt	le
 80060fe:	2330      	movle	r3, #48	; 0x30
 8006100:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006104:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006108:	1b52      	subs	r2, r2, r5
 800610a:	6122      	str	r2, [r4, #16]
 800610c:	f8cd a000 	str.w	sl, [sp]
 8006110:	464b      	mov	r3, r9
 8006112:	aa03      	add	r2, sp, #12
 8006114:	4621      	mov	r1, r4
 8006116:	4640      	mov	r0, r8
 8006118:	f7ff fee2 	bl	8005ee0 <_printf_common>
 800611c:	3001      	adds	r0, #1
 800611e:	d14c      	bne.n	80061ba <_printf_i+0x1fe>
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	b004      	add	sp, #16
 8006126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612a:	4835      	ldr	r0, [pc, #212]	; (8006200 <_printf_i+0x244>)
 800612c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006130:	6829      	ldr	r1, [r5, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f851 6b04 	ldr.w	r6, [r1], #4
 8006138:	6029      	str	r1, [r5, #0]
 800613a:	061d      	lsls	r5, r3, #24
 800613c:	d514      	bpl.n	8006168 <_printf_i+0x1ac>
 800613e:	07df      	lsls	r7, r3, #31
 8006140:	bf44      	itt	mi
 8006142:	f043 0320 	orrmi.w	r3, r3, #32
 8006146:	6023      	strmi	r3, [r4, #0]
 8006148:	b91e      	cbnz	r6, 8006152 <_printf_i+0x196>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	f023 0320 	bic.w	r3, r3, #32
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	2310      	movs	r3, #16
 8006154:	e7b0      	b.n	80060b8 <_printf_i+0xfc>
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f043 0320 	orr.w	r3, r3, #32
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	2378      	movs	r3, #120	; 0x78
 8006160:	4828      	ldr	r0, [pc, #160]	; (8006204 <_printf_i+0x248>)
 8006162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006166:	e7e3      	b.n	8006130 <_printf_i+0x174>
 8006168:	0659      	lsls	r1, r3, #25
 800616a:	bf48      	it	mi
 800616c:	b2b6      	uxthmi	r6, r6
 800616e:	e7e6      	b.n	800613e <_printf_i+0x182>
 8006170:	4615      	mov	r5, r2
 8006172:	e7bb      	b.n	80060ec <_printf_i+0x130>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	6826      	ldr	r6, [r4, #0]
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	1d18      	adds	r0, r3, #4
 800617c:	6028      	str	r0, [r5, #0]
 800617e:	0635      	lsls	r5, r6, #24
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	d501      	bpl.n	8006188 <_printf_i+0x1cc>
 8006184:	6019      	str	r1, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0x1d2>
 8006188:	0670      	lsls	r0, r6, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0x1c8>
 800618c:	8019      	strh	r1, [r3, #0]
 800618e:	2300      	movs	r3, #0
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	4615      	mov	r5, r2
 8006194:	e7ba      	b.n	800610c <_printf_i+0x150>
 8006196:	682b      	ldr	r3, [r5, #0]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	681d      	ldr	r5, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	2100      	movs	r1, #0
 80061a2:	4628      	mov	r0, r5
 80061a4:	f7fa f83c 	bl	8000220 <memchr>
 80061a8:	b108      	cbz	r0, 80061ae <_printf_i+0x1f2>
 80061aa:	1b40      	subs	r0, r0, r5
 80061ac:	6060      	str	r0, [r4, #4]
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	2300      	movs	r3, #0
 80061b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b8:	e7a8      	b.n	800610c <_printf_i+0x150>
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	462a      	mov	r2, r5
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	47d0      	blx	sl
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0ab      	beq.n	8006120 <_printf_i+0x164>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	d413      	bmi.n	80061f6 <_printf_i+0x23a>
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	4298      	cmp	r0, r3
 80061d4:	bfb8      	it	lt
 80061d6:	4618      	movlt	r0, r3
 80061d8:	e7a4      	b.n	8006124 <_printf_i+0x168>
 80061da:	2301      	movs	r3, #1
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	47d0      	blx	sl
 80061e4:	3001      	adds	r0, #1
 80061e6:	d09b      	beq.n	8006120 <_printf_i+0x164>
 80061e8:	3501      	adds	r5, #1
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	9903      	ldr	r1, [sp, #12]
 80061ee:	1a5b      	subs	r3, r3, r1
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dcf2      	bgt.n	80061da <_printf_i+0x21e>
 80061f4:	e7eb      	b.n	80061ce <_printf_i+0x212>
 80061f6:	2500      	movs	r5, #0
 80061f8:	f104 0619 	add.w	r6, r4, #25
 80061fc:	e7f5      	b.n	80061ea <_printf_i+0x22e>
 80061fe:	bf00      	nop
 8006200:	08008b06 	.word	0x08008b06
 8006204:	08008b17 	.word	0x08008b17

08006208 <siprintf>:
 8006208:	b40e      	push	{r1, r2, r3}
 800620a:	b500      	push	{lr}
 800620c:	b09c      	sub	sp, #112	; 0x70
 800620e:	ab1d      	add	r3, sp, #116	; 0x74
 8006210:	9002      	str	r0, [sp, #8]
 8006212:	9006      	str	r0, [sp, #24]
 8006214:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006218:	4809      	ldr	r0, [pc, #36]	; (8006240 <siprintf+0x38>)
 800621a:	9107      	str	r1, [sp, #28]
 800621c:	9104      	str	r1, [sp, #16]
 800621e:	4909      	ldr	r1, [pc, #36]	; (8006244 <siprintf+0x3c>)
 8006220:	f853 2b04 	ldr.w	r2, [r3], #4
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	6800      	ldr	r0, [r0, #0]
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	a902      	add	r1, sp, #8
 800622c:	f001 fb76 	bl	800791c <_svfiprintf_r>
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
 8006236:	b01c      	add	sp, #112	; 0x70
 8006238:	f85d eb04 	ldr.w	lr, [sp], #4
 800623c:	b003      	add	sp, #12
 800623e:	4770      	bx	lr
 8006240:	20000018 	.word	0x20000018
 8006244:	ffff0208 	.word	0xffff0208

08006248 <quorem>:
 8006248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	6903      	ldr	r3, [r0, #16]
 800624e:	690c      	ldr	r4, [r1, #16]
 8006250:	42a3      	cmp	r3, r4
 8006252:	4607      	mov	r7, r0
 8006254:	f2c0 8081 	blt.w	800635a <quorem+0x112>
 8006258:	3c01      	subs	r4, #1
 800625a:	f101 0814 	add.w	r8, r1, #20
 800625e:	f100 0514 	add.w	r5, r0, #20
 8006262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800626c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006270:	3301      	adds	r3, #1
 8006272:	429a      	cmp	r2, r3
 8006274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800627c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006280:	d331      	bcc.n	80062e6 <quorem+0x9e>
 8006282:	f04f 0e00 	mov.w	lr, #0
 8006286:	4640      	mov	r0, r8
 8006288:	46ac      	mov	ip, r5
 800628a:	46f2      	mov	sl, lr
 800628c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006290:	b293      	uxth	r3, r2
 8006292:	fb06 e303 	mla	r3, r6, r3, lr
 8006296:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800629a:	b29b      	uxth	r3, r3
 800629c:	ebaa 0303 	sub.w	r3, sl, r3
 80062a0:	f8dc a000 	ldr.w	sl, [ip]
 80062a4:	0c12      	lsrs	r2, r2, #16
 80062a6:	fa13 f38a 	uxtah	r3, r3, sl
 80062aa:	fb06 e202 	mla	r2, r6, r2, lr
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	9b00      	ldr	r3, [sp, #0]
 80062b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062b6:	b292      	uxth	r2, r2
 80062b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80062c4:	4581      	cmp	r9, r0
 80062c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ca:	f84c 3b04 	str.w	r3, [ip], #4
 80062ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062d2:	d2db      	bcs.n	800628c <quorem+0x44>
 80062d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80062d8:	b92b      	cbnz	r3, 80062e6 <quorem+0x9e>
 80062da:	9b01      	ldr	r3, [sp, #4]
 80062dc:	3b04      	subs	r3, #4
 80062de:	429d      	cmp	r5, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	d32e      	bcc.n	8006342 <quorem+0xfa>
 80062e4:	613c      	str	r4, [r7, #16]
 80062e6:	4638      	mov	r0, r7
 80062e8:	f001 f8c4 	bl	8007474 <__mcmp>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	db24      	blt.n	800633a <quorem+0xf2>
 80062f0:	3601      	adds	r6, #1
 80062f2:	4628      	mov	r0, r5
 80062f4:	f04f 0c00 	mov.w	ip, #0
 80062f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80062fc:	f8d0 e000 	ldr.w	lr, [r0]
 8006300:	b293      	uxth	r3, r2
 8006302:	ebac 0303 	sub.w	r3, ip, r3
 8006306:	0c12      	lsrs	r2, r2, #16
 8006308:	fa13 f38e 	uxtah	r3, r3, lr
 800630c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006310:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006314:	b29b      	uxth	r3, r3
 8006316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800631a:	45c1      	cmp	r9, r8
 800631c:	f840 3b04 	str.w	r3, [r0], #4
 8006320:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006324:	d2e8      	bcs.n	80062f8 <quorem+0xb0>
 8006326:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800632a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800632e:	b922      	cbnz	r2, 800633a <quorem+0xf2>
 8006330:	3b04      	subs	r3, #4
 8006332:	429d      	cmp	r5, r3
 8006334:	461a      	mov	r2, r3
 8006336:	d30a      	bcc.n	800634e <quorem+0x106>
 8006338:	613c      	str	r4, [r7, #16]
 800633a:	4630      	mov	r0, r6
 800633c:	b003      	add	sp, #12
 800633e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	3b04      	subs	r3, #4
 8006346:	2a00      	cmp	r2, #0
 8006348:	d1cc      	bne.n	80062e4 <quorem+0x9c>
 800634a:	3c01      	subs	r4, #1
 800634c:	e7c7      	b.n	80062de <quorem+0x96>
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	3b04      	subs	r3, #4
 8006352:	2a00      	cmp	r2, #0
 8006354:	d1f0      	bne.n	8006338 <quorem+0xf0>
 8006356:	3c01      	subs	r4, #1
 8006358:	e7eb      	b.n	8006332 <quorem+0xea>
 800635a:	2000      	movs	r0, #0
 800635c:	e7ee      	b.n	800633c <quorem+0xf4>
	...

08006360 <_dtoa_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ed2d 8b04 	vpush	{d8-d9}
 8006368:	ec57 6b10 	vmov	r6, r7, d0
 800636c:	b093      	sub	sp, #76	; 0x4c
 800636e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006370:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006374:	9106      	str	r1, [sp, #24]
 8006376:	ee10 aa10 	vmov	sl, s0
 800637a:	4604      	mov	r4, r0
 800637c:	9209      	str	r2, [sp, #36]	; 0x24
 800637e:	930c      	str	r3, [sp, #48]	; 0x30
 8006380:	46bb      	mov	fp, r7
 8006382:	b975      	cbnz	r5, 80063a2 <_dtoa_r+0x42>
 8006384:	2010      	movs	r0, #16
 8006386:	f000 fddd 	bl	8006f44 <malloc>
 800638a:	4602      	mov	r2, r0
 800638c:	6260      	str	r0, [r4, #36]	; 0x24
 800638e:	b920      	cbnz	r0, 800639a <_dtoa_r+0x3a>
 8006390:	4ba7      	ldr	r3, [pc, #668]	; (8006630 <_dtoa_r+0x2d0>)
 8006392:	21ea      	movs	r1, #234	; 0xea
 8006394:	48a7      	ldr	r0, [pc, #668]	; (8006634 <_dtoa_r+0x2d4>)
 8006396:	f001 fbd1 	bl	8007b3c <__assert_func>
 800639a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800639e:	6005      	str	r5, [r0, #0]
 80063a0:	60c5      	str	r5, [r0, #12]
 80063a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	b151      	cbz	r1, 80063be <_dtoa_r+0x5e>
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	604a      	str	r2, [r1, #4]
 80063ac:	2301      	movs	r3, #1
 80063ae:	4093      	lsls	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fe1c 	bl	8006ff0 <_Bfree>
 80063b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	1e3b      	subs	r3, r7, #0
 80063c0:	bfaa      	itet	ge
 80063c2:	2300      	movge	r3, #0
 80063c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063c8:	f8c8 3000 	strge.w	r3, [r8]
 80063cc:	4b9a      	ldr	r3, [pc, #616]	; (8006638 <_dtoa_r+0x2d8>)
 80063ce:	bfbc      	itt	lt
 80063d0:	2201      	movlt	r2, #1
 80063d2:	f8c8 2000 	strlt.w	r2, [r8]
 80063d6:	ea33 030b 	bics.w	r3, r3, fp
 80063da:	d11b      	bne.n	8006414 <_dtoa_r+0xb4>
 80063dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063de:	f242 730f 	movw	r3, #9999	; 0x270f
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063e8:	4333      	orrs	r3, r6
 80063ea:	f000 8592 	beq.w	8006f12 <_dtoa_r+0xbb2>
 80063ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f0:	b963      	cbnz	r3, 800640c <_dtoa_r+0xac>
 80063f2:	4b92      	ldr	r3, [pc, #584]	; (800663c <_dtoa_r+0x2dc>)
 80063f4:	e022      	b.n	800643c <_dtoa_r+0xdc>
 80063f6:	4b92      	ldr	r3, [pc, #584]	; (8006640 <_dtoa_r+0x2e0>)
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	3308      	adds	r3, #8
 80063fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	9801      	ldr	r0, [sp, #4]
 8006402:	b013      	add	sp, #76	; 0x4c
 8006404:	ecbd 8b04 	vpop	{d8-d9}
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	4b8b      	ldr	r3, [pc, #556]	; (800663c <_dtoa_r+0x2dc>)
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	3303      	adds	r3, #3
 8006412:	e7f3      	b.n	80063fc <_dtoa_r+0x9c>
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	4650      	mov	r0, sl
 800641a:	4659      	mov	r1, fp
 800641c:	f7fa fb74 	bl	8000b08 <__aeabi_dcmpeq>
 8006420:	ec4b ab19 	vmov	d9, sl, fp
 8006424:	4680      	mov	r8, r0
 8006426:	b158      	cbz	r0, 8006440 <_dtoa_r+0xe0>
 8006428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800642a:	2301      	movs	r3, #1
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 856b 	beq.w	8006f0c <_dtoa_r+0xbac>
 8006436:	4883      	ldr	r0, [pc, #524]	; (8006644 <_dtoa_r+0x2e4>)
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	1e43      	subs	r3, r0, #1
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	e7df      	b.n	8006400 <_dtoa_r+0xa0>
 8006440:	ec4b ab10 	vmov	d0, sl, fp
 8006444:	aa10      	add	r2, sp, #64	; 0x40
 8006446:	a911      	add	r1, sp, #68	; 0x44
 8006448:	4620      	mov	r0, r4
 800644a:	f001 f8b9 	bl	80075c0 <__d2b>
 800644e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006452:	ee08 0a10 	vmov	s16, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	f000 8084 	beq.w	8006564 <_dtoa_r+0x204>
 800645c:	ee19 3a90 	vmov	r3, s19
 8006460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006464:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006468:	4656      	mov	r6, sl
 800646a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800646e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006472:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006476:	4b74      	ldr	r3, [pc, #464]	; (8006648 <_dtoa_r+0x2e8>)
 8006478:	2200      	movs	r2, #0
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7f9 ff23 	bl	80002c8 <__aeabi_dsub>
 8006482:	a365      	add	r3, pc, #404	; (adr r3, 8006618 <_dtoa_r+0x2b8>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7fa f8d6 	bl	8000638 <__aeabi_dmul>
 800648c:	a364      	add	r3, pc, #400	; (adr r3, 8006620 <_dtoa_r+0x2c0>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 ff1b 	bl	80002cc <__adddf3>
 8006496:	4606      	mov	r6, r0
 8006498:	4628      	mov	r0, r5
 800649a:	460f      	mov	r7, r1
 800649c:	f7fa f862 	bl	8000564 <__aeabi_i2d>
 80064a0:	a361      	add	r3, pc, #388	; (adr r3, 8006628 <_dtoa_r+0x2c8>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa f8c7 	bl	8000638 <__aeabi_dmul>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7f9 ff0b 	bl	80002cc <__adddf3>
 80064b6:	4606      	mov	r6, r0
 80064b8:	460f      	mov	r7, r1
 80064ba:	f7fa fb6d 	bl	8000b98 <__aeabi_d2iz>
 80064be:	2200      	movs	r2, #0
 80064c0:	9000      	str	r0, [sp, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fb28 	bl	8000b1c <__aeabi_dcmplt>
 80064cc:	b150      	cbz	r0, 80064e4 <_dtoa_r+0x184>
 80064ce:	9800      	ldr	r0, [sp, #0]
 80064d0:	f7fa f848 	bl	8000564 <__aeabi_i2d>
 80064d4:	4632      	mov	r2, r6
 80064d6:	463b      	mov	r3, r7
 80064d8:	f7fa fb16 	bl	8000b08 <__aeabi_dcmpeq>
 80064dc:	b910      	cbnz	r0, 80064e4 <_dtoa_r+0x184>
 80064de:	9b00      	ldr	r3, [sp, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	2b16      	cmp	r3, #22
 80064e8:	d85a      	bhi.n	80065a0 <_dtoa_r+0x240>
 80064ea:	9a00      	ldr	r2, [sp, #0]
 80064ec:	4b57      	ldr	r3, [pc, #348]	; (800664c <_dtoa_r+0x2ec>)
 80064ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	ec51 0b19 	vmov	r0, r1, d9
 80064fa:	f7fa fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d050      	beq.n	80065a4 <_dtoa_r+0x244>
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	3b01      	subs	r3, #1
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	930b      	str	r3, [sp, #44]	; 0x2c
 800650c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800650e:	1b5d      	subs	r5, r3, r5
 8006510:	1e6b      	subs	r3, r5, #1
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	bf45      	ittet	mi
 8006516:	f1c5 0301 	rsbmi	r3, r5, #1
 800651a:	9304      	strmi	r3, [sp, #16]
 800651c:	2300      	movpl	r3, #0
 800651e:	2300      	movmi	r3, #0
 8006520:	bf4c      	ite	mi
 8006522:	9305      	strmi	r3, [sp, #20]
 8006524:	9304      	strpl	r3, [sp, #16]
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	db3d      	blt.n	80065a8 <_dtoa_r+0x248>
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	9a00      	ldr	r2, [sp, #0]
 8006530:	920a      	str	r2, [sp, #40]	; 0x28
 8006532:	4413      	add	r3, r2
 8006534:	9305      	str	r3, [sp, #20]
 8006536:	2300      	movs	r3, #0
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	9b06      	ldr	r3, [sp, #24]
 800653c:	2b09      	cmp	r3, #9
 800653e:	f200 8089 	bhi.w	8006654 <_dtoa_r+0x2f4>
 8006542:	2b05      	cmp	r3, #5
 8006544:	bfc4      	itt	gt
 8006546:	3b04      	subgt	r3, #4
 8006548:	9306      	strgt	r3, [sp, #24]
 800654a:	9b06      	ldr	r3, [sp, #24]
 800654c:	f1a3 0302 	sub.w	r3, r3, #2
 8006550:	bfcc      	ite	gt
 8006552:	2500      	movgt	r5, #0
 8006554:	2501      	movle	r5, #1
 8006556:	2b03      	cmp	r3, #3
 8006558:	f200 8087 	bhi.w	800666a <_dtoa_r+0x30a>
 800655c:	e8df f003 	tbb	[pc, r3]
 8006560:	59383a2d 	.word	0x59383a2d
 8006564:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006568:	441d      	add	r5, r3
 800656a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800656e:	2b20      	cmp	r3, #32
 8006570:	bfc1      	itttt	gt
 8006572:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006576:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800657a:	fa0b f303 	lslgt.w	r3, fp, r3
 800657e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006582:	bfda      	itte	le
 8006584:	f1c3 0320 	rsble	r3, r3, #32
 8006588:	fa06 f003 	lslle.w	r0, r6, r3
 800658c:	4318      	orrgt	r0, r3
 800658e:	f7f9 ffd9 	bl	8000544 <__aeabi_ui2d>
 8006592:	2301      	movs	r3, #1
 8006594:	4606      	mov	r6, r0
 8006596:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800659a:	3d01      	subs	r5, #1
 800659c:	930e      	str	r3, [sp, #56]	; 0x38
 800659e:	e76a      	b.n	8006476 <_dtoa_r+0x116>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e7b2      	b.n	800650a <_dtoa_r+0x1aa>
 80065a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065a6:	e7b1      	b.n	800650c <_dtoa_r+0x1ac>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	4253      	negs	r3, r2
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	2300      	movs	r3, #0
 80065b6:	930a      	str	r3, [sp, #40]	; 0x28
 80065b8:	e7bf      	b.n	800653a <_dtoa_r+0x1da>
 80065ba:	2300      	movs	r3, #0
 80065bc:	9308      	str	r3, [sp, #32]
 80065be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dc55      	bgt.n	8006670 <_dtoa_r+0x310>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065ca:	461a      	mov	r2, r3
 80065cc:	9209      	str	r2, [sp, #36]	; 0x24
 80065ce:	e00c      	b.n	80065ea <_dtoa_r+0x28a>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f3      	b.n	80065bc <_dtoa_r+0x25c>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	4413      	add	r3, r2
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	bfb8      	it	lt
 80065e8:	2301      	movlt	r3, #1
 80065ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065ec:	2200      	movs	r2, #0
 80065ee:	6042      	str	r2, [r0, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	f102 0614 	add.w	r6, r2, #20
 80065f6:	429e      	cmp	r6, r3
 80065f8:	6841      	ldr	r1, [r0, #4]
 80065fa:	d93d      	bls.n	8006678 <_dtoa_r+0x318>
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fcb7 	bl	8006f70 <_Balloc>
 8006602:	9001      	str	r0, [sp, #4]
 8006604:	2800      	cmp	r0, #0
 8006606:	d13b      	bne.n	8006680 <_dtoa_r+0x320>
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <_dtoa_r+0x2f0>)
 800660a:	4602      	mov	r2, r0
 800660c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006610:	e6c0      	b.n	8006394 <_dtoa_r+0x34>
 8006612:	2301      	movs	r3, #1
 8006614:	e7df      	b.n	80065d6 <_dtoa_r+0x276>
 8006616:	bf00      	nop
 8006618:	636f4361 	.word	0x636f4361
 800661c:	3fd287a7 	.word	0x3fd287a7
 8006620:	8b60c8b3 	.word	0x8b60c8b3
 8006624:	3fc68a28 	.word	0x3fc68a28
 8006628:	509f79fb 	.word	0x509f79fb
 800662c:	3fd34413 	.word	0x3fd34413
 8006630:	08008b35 	.word	0x08008b35
 8006634:	08008b4c 	.word	0x08008b4c
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	08008b31 	.word	0x08008b31
 8006640:	08008b28 	.word	0x08008b28
 8006644:	08008b05 	.word	0x08008b05
 8006648:	3ff80000 	.word	0x3ff80000
 800664c:	08008c40 	.word	0x08008c40
 8006650:	08008ba7 	.word	0x08008ba7
 8006654:	2501      	movs	r5, #1
 8006656:	2300      	movs	r3, #0
 8006658:	9306      	str	r3, [sp, #24]
 800665a:	9508      	str	r5, [sp, #32]
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	2312      	movs	r3, #18
 8006668:	e7b0      	b.n	80065cc <_dtoa_r+0x26c>
 800666a:	2301      	movs	r3, #1
 800666c:	9308      	str	r3, [sp, #32]
 800666e:	e7f5      	b.n	800665c <_dtoa_r+0x2fc>
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006676:	e7b8      	b.n	80065ea <_dtoa_r+0x28a>
 8006678:	3101      	adds	r1, #1
 800667a:	6041      	str	r1, [r0, #4]
 800667c:	0052      	lsls	r2, r2, #1
 800667e:	e7b8      	b.n	80065f2 <_dtoa_r+0x292>
 8006680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	2b0e      	cmp	r3, #14
 800668a:	f200 809d 	bhi.w	80067c8 <_dtoa_r+0x468>
 800668e:	2d00      	cmp	r5, #0
 8006690:	f000 809a 	beq.w	80067c8 <_dtoa_r+0x468>
 8006694:	9b00      	ldr	r3, [sp, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd32      	ble.n	8006700 <_dtoa_r+0x3a0>
 800669a:	4ab7      	ldr	r2, [pc, #732]	; (8006978 <_dtoa_r+0x618>)
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066a8:	9b00      	ldr	r3, [sp, #0]
 80066aa:	05d8      	lsls	r0, r3, #23
 80066ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066b0:	d516      	bpl.n	80066e0 <_dtoa_r+0x380>
 80066b2:	4bb2      	ldr	r3, [pc, #712]	; (800697c <_dtoa_r+0x61c>)
 80066b4:	ec51 0b19 	vmov	r0, r1, d9
 80066b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066bc:	f7fa f8e6 	bl	800088c <__aeabi_ddiv>
 80066c0:	f007 070f 	and.w	r7, r7, #15
 80066c4:	4682      	mov	sl, r0
 80066c6:	468b      	mov	fp, r1
 80066c8:	2503      	movs	r5, #3
 80066ca:	4eac      	ldr	r6, [pc, #688]	; (800697c <_dtoa_r+0x61c>)
 80066cc:	b957      	cbnz	r7, 80066e4 <_dtoa_r+0x384>
 80066ce:	4642      	mov	r2, r8
 80066d0:	464b      	mov	r3, r9
 80066d2:	4650      	mov	r0, sl
 80066d4:	4659      	mov	r1, fp
 80066d6:	f7fa f8d9 	bl	800088c <__aeabi_ddiv>
 80066da:	4682      	mov	sl, r0
 80066dc:	468b      	mov	fp, r1
 80066de:	e028      	b.n	8006732 <_dtoa_r+0x3d2>
 80066e0:	2502      	movs	r5, #2
 80066e2:	e7f2      	b.n	80066ca <_dtoa_r+0x36a>
 80066e4:	07f9      	lsls	r1, r7, #31
 80066e6:	d508      	bpl.n	80066fa <_dtoa_r+0x39a>
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066f0:	f7f9 ffa2 	bl	8000638 <__aeabi_dmul>
 80066f4:	3501      	adds	r5, #1
 80066f6:	4680      	mov	r8, r0
 80066f8:	4689      	mov	r9, r1
 80066fa:	107f      	asrs	r7, r7, #1
 80066fc:	3608      	adds	r6, #8
 80066fe:	e7e5      	b.n	80066cc <_dtoa_r+0x36c>
 8006700:	f000 809b 	beq.w	800683a <_dtoa_r+0x4da>
 8006704:	9b00      	ldr	r3, [sp, #0]
 8006706:	4f9d      	ldr	r7, [pc, #628]	; (800697c <_dtoa_r+0x61c>)
 8006708:	425e      	negs	r6, r3
 800670a:	4b9b      	ldr	r3, [pc, #620]	; (8006978 <_dtoa_r+0x618>)
 800670c:	f006 020f 	and.w	r2, r6, #15
 8006710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	ec51 0b19 	vmov	r0, r1, d9
 800671c:	f7f9 ff8c 	bl	8000638 <__aeabi_dmul>
 8006720:	1136      	asrs	r6, r6, #4
 8006722:	4682      	mov	sl, r0
 8006724:	468b      	mov	fp, r1
 8006726:	2300      	movs	r3, #0
 8006728:	2502      	movs	r5, #2
 800672a:	2e00      	cmp	r6, #0
 800672c:	d17a      	bne.n	8006824 <_dtoa_r+0x4c4>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1d3      	bne.n	80066da <_dtoa_r+0x37a>
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8082 	beq.w	800683e <_dtoa_r+0x4de>
 800673a:	4b91      	ldr	r3, [pc, #580]	; (8006980 <_dtoa_r+0x620>)
 800673c:	2200      	movs	r2, #0
 800673e:	4650      	mov	r0, sl
 8006740:	4659      	mov	r1, fp
 8006742:	f7fa f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d079      	beq.n	800683e <_dtoa_r+0x4de>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d076      	beq.n	800683e <_dtoa_r+0x4de>
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd36      	ble.n	80067c4 <_dtoa_r+0x464>
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	1e5f      	subs	r7, r3, #1
 800675e:	2200      	movs	r2, #0
 8006760:	4b88      	ldr	r3, [pc, #544]	; (8006984 <_dtoa_r+0x624>)
 8006762:	f7f9 ff69 	bl	8000638 <__aeabi_dmul>
 8006766:	9e02      	ldr	r6, [sp, #8]
 8006768:	4682      	mov	sl, r0
 800676a:	468b      	mov	fp, r1
 800676c:	3501      	adds	r5, #1
 800676e:	4628      	mov	r0, r5
 8006770:	f7f9 fef8 	bl	8000564 <__aeabi_i2d>
 8006774:	4652      	mov	r2, sl
 8006776:	465b      	mov	r3, fp
 8006778:	f7f9 ff5e 	bl	8000638 <__aeabi_dmul>
 800677c:	4b82      	ldr	r3, [pc, #520]	; (8006988 <_dtoa_r+0x628>)
 800677e:	2200      	movs	r2, #0
 8006780:	f7f9 fda4 	bl	80002cc <__adddf3>
 8006784:	46d0      	mov	r8, sl
 8006786:	46d9      	mov	r9, fp
 8006788:	4682      	mov	sl, r0
 800678a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800678e:	2e00      	cmp	r6, #0
 8006790:	d158      	bne.n	8006844 <_dtoa_r+0x4e4>
 8006792:	4b7e      	ldr	r3, [pc, #504]	; (800698c <_dtoa_r+0x62c>)
 8006794:	2200      	movs	r2, #0
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 fd95 	bl	80002c8 <__aeabi_dsub>
 800679e:	4652      	mov	r2, sl
 80067a0:	465b      	mov	r3, fp
 80067a2:	4680      	mov	r8, r0
 80067a4:	4689      	mov	r9, r1
 80067a6:	f7fa f9d7 	bl	8000b58 <__aeabi_dcmpgt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f040 8295 	bne.w	8006cda <_dtoa_r+0x97a>
 80067b0:	4652      	mov	r2, sl
 80067b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7fa f9af 	bl	8000b1c <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	f040 8289 	bne.w	8006cd6 <_dtoa_r+0x976>
 80067c4:	ec5b ab19 	vmov	sl, fp, d9
 80067c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f2c0 8148 	blt.w	8006a60 <_dtoa_r+0x700>
 80067d0:	9a00      	ldr	r2, [sp, #0]
 80067d2:	2a0e      	cmp	r2, #14
 80067d4:	f300 8144 	bgt.w	8006a60 <_dtoa_r+0x700>
 80067d8:	4b67      	ldr	r3, [pc, #412]	; (8006978 <_dtoa_r+0x618>)
 80067da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f280 80d5 	bge.w	8006994 <_dtoa_r+0x634>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f300 80d1 	bgt.w	8006994 <_dtoa_r+0x634>
 80067f2:	f040 826f 	bne.w	8006cd4 <_dtoa_r+0x974>
 80067f6:	4b65      	ldr	r3, [pc, #404]	; (800698c <_dtoa_r+0x62c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 ff1b 	bl	8000638 <__aeabi_dmul>
 8006802:	4652      	mov	r2, sl
 8006804:	465b      	mov	r3, fp
 8006806:	f7fa f99d 	bl	8000b44 <__aeabi_dcmpge>
 800680a:	9e03      	ldr	r6, [sp, #12]
 800680c:	4637      	mov	r7, r6
 800680e:	2800      	cmp	r0, #0
 8006810:	f040 8245 	bne.w	8006c9e <_dtoa_r+0x93e>
 8006814:	9d01      	ldr	r5, [sp, #4]
 8006816:	2331      	movs	r3, #49	; 0x31
 8006818:	f805 3b01 	strb.w	r3, [r5], #1
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	e240      	b.n	8006ca6 <_dtoa_r+0x946>
 8006824:	07f2      	lsls	r2, r6, #31
 8006826:	d505      	bpl.n	8006834 <_dtoa_r+0x4d4>
 8006828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682c:	f7f9 ff04 	bl	8000638 <__aeabi_dmul>
 8006830:	3501      	adds	r5, #1
 8006832:	2301      	movs	r3, #1
 8006834:	1076      	asrs	r6, r6, #1
 8006836:	3708      	adds	r7, #8
 8006838:	e777      	b.n	800672a <_dtoa_r+0x3ca>
 800683a:	2502      	movs	r5, #2
 800683c:	e779      	b.n	8006732 <_dtoa_r+0x3d2>
 800683e:	9f00      	ldr	r7, [sp, #0]
 8006840:	9e03      	ldr	r6, [sp, #12]
 8006842:	e794      	b.n	800676e <_dtoa_r+0x40e>
 8006844:	9901      	ldr	r1, [sp, #4]
 8006846:	4b4c      	ldr	r3, [pc, #304]	; (8006978 <_dtoa_r+0x618>)
 8006848:	4431      	add	r1, r6
 800684a:	910d      	str	r1, [sp, #52]	; 0x34
 800684c:	9908      	ldr	r1, [sp, #32]
 800684e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006852:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006856:	2900      	cmp	r1, #0
 8006858:	d043      	beq.n	80068e2 <_dtoa_r+0x582>
 800685a:	494d      	ldr	r1, [pc, #308]	; (8006990 <_dtoa_r+0x630>)
 800685c:	2000      	movs	r0, #0
 800685e:	f7fa f815 	bl	800088c <__aeabi_ddiv>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7f9 fd2f 	bl	80002c8 <__aeabi_dsub>
 800686a:	9d01      	ldr	r5, [sp, #4]
 800686c:	4682      	mov	sl, r0
 800686e:	468b      	mov	fp, r1
 8006870:	4649      	mov	r1, r9
 8006872:	4640      	mov	r0, r8
 8006874:	f7fa f990 	bl	8000b98 <__aeabi_d2iz>
 8006878:	4606      	mov	r6, r0
 800687a:	f7f9 fe73 	bl	8000564 <__aeabi_i2d>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 fd1f 	bl	80002c8 <__aeabi_dsub>
 800688a:	3630      	adds	r6, #48	; 0x30
 800688c:	f805 6b01 	strb.w	r6, [r5], #1
 8006890:	4652      	mov	r2, sl
 8006892:	465b      	mov	r3, fp
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	f7fa f940 	bl	8000b1c <__aeabi_dcmplt>
 800689c:	2800      	cmp	r0, #0
 800689e:	d163      	bne.n	8006968 <_dtoa_r+0x608>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4936      	ldr	r1, [pc, #216]	; (8006980 <_dtoa_r+0x620>)
 80068a6:	2000      	movs	r0, #0
 80068a8:	f7f9 fd0e 	bl	80002c8 <__aeabi_dsub>
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	f7fa f934 	bl	8000b1c <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 80b5 	bne.w	8006a24 <_dtoa_r+0x6c4>
 80068ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068bc:	429d      	cmp	r5, r3
 80068be:	d081      	beq.n	80067c4 <_dtoa_r+0x464>
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <_dtoa_r+0x624>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	4650      	mov	r0, sl
 80068c6:	4659      	mov	r1, fp
 80068c8:	f7f9 feb6 	bl	8000638 <__aeabi_dmul>
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <_dtoa_r+0x624>)
 80068ce:	4682      	mov	sl, r0
 80068d0:	468b      	mov	fp, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	2200      	movs	r2, #0
 80068d8:	f7f9 feae 	bl	8000638 <__aeabi_dmul>
 80068dc:	4680      	mov	r8, r0
 80068de:	4689      	mov	r9, r1
 80068e0:	e7c6      	b.n	8006870 <_dtoa_r+0x510>
 80068e2:	4650      	mov	r0, sl
 80068e4:	4659      	mov	r1, fp
 80068e6:	f7f9 fea7 	bl	8000638 <__aeabi_dmul>
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	9d01      	ldr	r5, [sp, #4]
 80068ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	4649      	mov	r1, r9
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7fa f94e 	bl	8000b98 <__aeabi_d2iz>
 80068fc:	4606      	mov	r6, r0
 80068fe:	f7f9 fe31 	bl	8000564 <__aeabi_i2d>
 8006902:	3630      	adds	r6, #48	; 0x30
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7f9 fcdc 	bl	80002c8 <__aeabi_dsub>
 8006910:	f805 6b01 	strb.w	r6, [r5], #1
 8006914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006916:	429d      	cmp	r5, r3
 8006918:	4680      	mov	r8, r0
 800691a:	4689      	mov	r9, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	d124      	bne.n	800696c <_dtoa_r+0x60c>
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <_dtoa_r+0x630>)
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fcd0 	bl	80002cc <__adddf3>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7fa f910 	bl	8000b58 <__aeabi_dcmpgt>
 8006938:	2800      	cmp	r0, #0
 800693a:	d173      	bne.n	8006a24 <_dtoa_r+0x6c4>
 800693c:	4652      	mov	r2, sl
 800693e:	465b      	mov	r3, fp
 8006940:	4913      	ldr	r1, [pc, #76]	; (8006990 <_dtoa_r+0x630>)
 8006942:	2000      	movs	r0, #0
 8006944:	f7f9 fcc0 	bl	80002c8 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7fa f8e4 	bl	8000b1c <__aeabi_dcmplt>
 8006954:	2800      	cmp	r0, #0
 8006956:	f43f af35 	beq.w	80067c4 <_dtoa_r+0x464>
 800695a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800695c:	1e6b      	subs	r3, r5, #1
 800695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d0f8      	beq.n	800695a <_dtoa_r+0x5fa>
 8006968:	9700      	str	r7, [sp, #0]
 800696a:	e049      	b.n	8006a00 <_dtoa_r+0x6a0>
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <_dtoa_r+0x624>)
 800696e:	f7f9 fe63 	bl	8000638 <__aeabi_dmul>
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	e7bd      	b.n	80068f4 <_dtoa_r+0x594>
 8006978:	08008c40 	.word	0x08008c40
 800697c:	08008c18 	.word	0x08008c18
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	40240000 	.word	0x40240000
 8006988:	401c0000 	.word	0x401c0000
 800698c:	40140000 	.word	0x40140000
 8006990:	3fe00000 	.word	0x3fe00000
 8006994:	9d01      	ldr	r5, [sp, #4]
 8006996:	4656      	mov	r6, sl
 8006998:	465f      	mov	r7, fp
 800699a:	4642      	mov	r2, r8
 800699c:	464b      	mov	r3, r9
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 ff73 	bl	800088c <__aeabi_ddiv>
 80069a6:	f7fa f8f7 	bl	8000b98 <__aeabi_d2iz>
 80069aa:	4682      	mov	sl, r0
 80069ac:	f7f9 fdda 	bl	8000564 <__aeabi_i2d>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7f9 fe40 	bl	8000638 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069c4:	f7f9 fc80 	bl	80002c8 <__aeabi_dsub>
 80069c8:	f805 6b01 	strb.w	r6, [r5], #1
 80069cc:	9e01      	ldr	r6, [sp, #4]
 80069ce:	9f03      	ldr	r7, [sp, #12]
 80069d0:	1bae      	subs	r6, r5, r6
 80069d2:	42b7      	cmp	r7, r6
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	d135      	bne.n	8006a46 <_dtoa_r+0x6e6>
 80069da:	f7f9 fc77 	bl	80002cc <__adddf3>
 80069de:	4642      	mov	r2, r8
 80069e0:	464b      	mov	r3, r9
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	f7fa f8b7 	bl	8000b58 <__aeabi_dcmpgt>
 80069ea:	b9d0      	cbnz	r0, 8006a22 <_dtoa_r+0x6c2>
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7fa f888 	bl	8000b08 <__aeabi_dcmpeq>
 80069f8:	b110      	cbz	r0, 8006a00 <_dtoa_r+0x6a0>
 80069fa:	f01a 0f01 	tst.w	sl, #1
 80069fe:	d110      	bne.n	8006a22 <_dtoa_r+0x6c2>
 8006a00:	4620      	mov	r0, r4
 8006a02:	ee18 1a10 	vmov	r1, s16
 8006a06:	f000 faf3 	bl	8006ff0 <_Bfree>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9800      	ldr	r0, [sp, #0]
 8006a0e:	702b      	strb	r3, [r5, #0]
 8006a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a12:	3001      	adds	r0, #1
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f43f acf1 	beq.w	8006400 <_dtoa_r+0xa0>
 8006a1e:	601d      	str	r5, [r3, #0]
 8006a20:	e4ee      	b.n	8006400 <_dtoa_r+0xa0>
 8006a22:	9f00      	ldr	r7, [sp, #0]
 8006a24:	462b      	mov	r3, r5
 8006a26:	461d      	mov	r5, r3
 8006a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a2c:	2a39      	cmp	r2, #57	; 0x39
 8006a2e:	d106      	bne.n	8006a3e <_dtoa_r+0x6de>
 8006a30:	9a01      	ldr	r2, [sp, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d1f7      	bne.n	8006a26 <_dtoa_r+0x6c6>
 8006a36:	9901      	ldr	r1, [sp, #4]
 8006a38:	2230      	movs	r2, #48	; 0x30
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	700a      	strb	r2, [r1, #0]
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e790      	b.n	8006968 <_dtoa_r+0x608>
 8006a46:	4ba6      	ldr	r3, [pc, #664]	; (8006ce0 <_dtoa_r+0x980>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f7f9 fdf5 	bl	8000638 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2300      	movs	r3, #0
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	f7fa f857 	bl	8000b08 <__aeabi_dcmpeq>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d09d      	beq.n	800699a <_dtoa_r+0x63a>
 8006a5e:	e7cf      	b.n	8006a00 <_dtoa_r+0x6a0>
 8006a60:	9a08      	ldr	r2, [sp, #32]
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	f000 80d7 	beq.w	8006c16 <_dtoa_r+0x8b6>
 8006a68:	9a06      	ldr	r2, [sp, #24]
 8006a6a:	2a01      	cmp	r2, #1
 8006a6c:	f300 80ba 	bgt.w	8006be4 <_dtoa_r+0x884>
 8006a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	f000 80b2 	beq.w	8006bdc <_dtoa_r+0x87c>
 8006a78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a7c:	9e07      	ldr	r6, [sp, #28]
 8006a7e:	9d04      	ldr	r5, [sp, #16]
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	441a      	add	r2, r3
 8006a84:	9204      	str	r2, [sp, #16]
 8006a86:	9a05      	ldr	r2, [sp, #20]
 8006a88:	2101      	movs	r1, #1
 8006a8a:	441a      	add	r2, r3
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	9205      	str	r2, [sp, #20]
 8006a90:	f000 fb66 	bl	8007160 <__i2b>
 8006a94:	4607      	mov	r7, r0
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	dd0c      	ble.n	8006ab4 <_dtoa_r+0x754>
 8006a9a:	9b05      	ldr	r3, [sp, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dd09      	ble.n	8006ab4 <_dtoa_r+0x754>
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	bfa8      	it	ge
 8006aa6:	462b      	movge	r3, r5
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	9204      	str	r2, [sp, #16]
 8006aac:	9a05      	ldr	r2, [sp, #20]
 8006aae:	1aed      	subs	r5, r5, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	b31b      	cbz	r3, 8006b00 <_dtoa_r+0x7a0>
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80af 	beq.w	8006c1e <_dtoa_r+0x8be>
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	dd13      	ble.n	8006aec <_dtoa_r+0x78c>
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fc09 	bl	80072e0 <__pow5mult>
 8006ace:	ee18 2a10 	vmov	r2, s16
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fb58 	bl	800718c <__multiply>
 8006adc:	ee18 1a10 	vmov	r1, s16
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fa84 	bl	8006ff0 <_Bfree>
 8006ae8:	ee08 8a10 	vmov	s16, r8
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	1b9a      	subs	r2, r3, r6
 8006af0:	d006      	beq.n	8006b00 <_dtoa_r+0x7a0>
 8006af2:	ee18 1a10 	vmov	r1, s16
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fbf2 	bl	80072e0 <__pow5mult>
 8006afc:	ee08 0a10 	vmov	s16, r0
 8006b00:	2101      	movs	r1, #1
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fb2c 	bl	8007160 <__i2b>
 8006b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	f340 8088 	ble.w	8006c22 <_dtoa_r+0x8c2>
 8006b12:	461a      	mov	r2, r3
 8006b14:	4601      	mov	r1, r0
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fbe2 	bl	80072e0 <__pow5mult>
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	4606      	mov	r6, r0
 8006b22:	f340 8081 	ble.w	8006c28 <_dtoa_r+0x8c8>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	6933      	ldr	r3, [r6, #16]
 8006b2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b30:	6918      	ldr	r0, [r3, #16]
 8006b32:	f000 fac5 	bl	80070c0 <__hi0bits>
 8006b36:	f1c0 0020 	rsb	r0, r0, #32
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	4418      	add	r0, r3
 8006b3e:	f010 001f 	ands.w	r0, r0, #31
 8006b42:	f000 8092 	beq.w	8006c6a <_dtoa_r+0x90a>
 8006b46:	f1c0 0320 	rsb	r3, r0, #32
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	f340 808a 	ble.w	8006c64 <_dtoa_r+0x904>
 8006b50:	f1c0 001c 	rsb	r0, r0, #28
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	4403      	add	r3, r0
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	4403      	add	r3, r0
 8006b5e:	4405      	add	r5, r0
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd07      	ble.n	8006b78 <_dtoa_r+0x818>
 8006b68:	ee18 1a10 	vmov	r1, s16
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fc10 	bl	8007394 <__lshift>
 8006b74:	ee08 0a10 	vmov	s16, r0
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd05      	ble.n	8006b8a <_dtoa_r+0x82a>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	461a      	mov	r2, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fc06 	bl	8007394 <__lshift>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d06e      	beq.n	8006c6e <_dtoa_r+0x90e>
 8006b90:	ee18 0a10 	vmov	r0, s16
 8006b94:	4631      	mov	r1, r6
 8006b96:	f000 fc6d 	bl	8007474 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	da67      	bge.n	8006c6e <_dtoa_r+0x90e>
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	220a      	movs	r2, #10
 8006baa:	2300      	movs	r3, #0
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fa41 	bl	8007034 <__multadd>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	ee08 0a10 	vmov	s16, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 81b1 	beq.w	8006f20 <_dtoa_r+0xbc0>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fa35 	bl	8007034 <__multadd>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	4607      	mov	r7, r0
 8006bd0:	f300 808e 	bgt.w	8006cf0 <_dtoa_r+0x990>
 8006bd4:	9b06      	ldr	r3, [sp, #24]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	dc51      	bgt.n	8006c7e <_dtoa_r+0x91e>
 8006bda:	e089      	b.n	8006cf0 <_dtoa_r+0x990>
 8006bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006be2:	e74b      	b.n	8006a7c <_dtoa_r+0x71c>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1e5e      	subs	r6, r3, #1
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	42b3      	cmp	r3, r6
 8006bec:	bfbf      	itttt	lt
 8006bee:	9b07      	ldrlt	r3, [sp, #28]
 8006bf0:	9607      	strlt	r6, [sp, #28]
 8006bf2:	1af2      	sublt	r2, r6, r3
 8006bf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bf6:	bfb6      	itet	lt
 8006bf8:	189b      	addlt	r3, r3, r2
 8006bfa:	1b9e      	subge	r6, r3, r6
 8006bfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	bfb8      	it	lt
 8006c02:	2600      	movlt	r6, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bfb7      	itett	lt
 8006c08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c10:	1a9d      	sublt	r5, r3, r2
 8006c12:	2300      	movlt	r3, #0
 8006c14:	e734      	b.n	8006a80 <_dtoa_r+0x720>
 8006c16:	9e07      	ldr	r6, [sp, #28]
 8006c18:	9d04      	ldr	r5, [sp, #16]
 8006c1a:	9f08      	ldr	r7, [sp, #32]
 8006c1c:	e73b      	b.n	8006a96 <_dtoa_r+0x736>
 8006c1e:	9a07      	ldr	r2, [sp, #28]
 8006c20:	e767      	b.n	8006af2 <_dtoa_r+0x792>
 8006c22:	9b06      	ldr	r3, [sp, #24]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	dc18      	bgt.n	8006c5a <_dtoa_r+0x8fa>
 8006c28:	f1ba 0f00 	cmp.w	sl, #0
 8006c2c:	d115      	bne.n	8006c5a <_dtoa_r+0x8fa>
 8006c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c32:	b993      	cbnz	r3, 8006c5a <_dtoa_r+0x8fa>
 8006c34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c38:	0d1b      	lsrs	r3, r3, #20
 8006c3a:	051b      	lsls	r3, r3, #20
 8006c3c:	b183      	cbz	r3, 8006c60 <_dtoa_r+0x900>
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9b05      	ldr	r3, [sp, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f04f 0801 	mov.w	r8, #1
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f47f af6a 	bne.w	8006b2a <_dtoa_r+0x7ca>
 8006c56:	2001      	movs	r0, #1
 8006c58:	e76f      	b.n	8006b3a <_dtoa_r+0x7da>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	e7f6      	b.n	8006c4e <_dtoa_r+0x8ee>
 8006c60:	4698      	mov	r8, r3
 8006c62:	e7f4      	b.n	8006c4e <_dtoa_r+0x8ee>
 8006c64:	f43f af7d 	beq.w	8006b62 <_dtoa_r+0x802>
 8006c68:	4618      	mov	r0, r3
 8006c6a:	301c      	adds	r0, #28
 8006c6c:	e772      	b.n	8006b54 <_dtoa_r+0x7f4>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dc37      	bgt.n	8006ce4 <_dtoa_r+0x984>
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	dd34      	ble.n	8006ce4 <_dtoa_r+0x984>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	b96b      	cbnz	r3, 8006c9e <_dtoa_r+0x93e>
 8006c82:	4631      	mov	r1, r6
 8006c84:	2205      	movs	r2, #5
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f9d4 	bl	8007034 <__multadd>
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	4606      	mov	r6, r0
 8006c90:	ee18 0a10 	vmov	r0, s16
 8006c94:	f000 fbee 	bl	8007474 <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f73f adbb 	bgt.w	8006814 <_dtoa_r+0x4b4>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	9d01      	ldr	r5, [sp, #4]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	4631      	mov	r1, r6
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 f99f 	bl	8006ff0 <_Bfree>
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	f43f aea4 	beq.w	8006a00 <_dtoa_r+0x6a0>
 8006cb8:	f1b8 0f00 	cmp.w	r8, #0
 8006cbc:	d005      	beq.n	8006cca <_dtoa_r+0x96a>
 8006cbe:	45b8      	cmp	r8, r7
 8006cc0:	d003      	beq.n	8006cca <_dtoa_r+0x96a>
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 f993 	bl	8006ff0 <_Bfree>
 8006cca:	4639      	mov	r1, r7
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f98f 	bl	8006ff0 <_Bfree>
 8006cd2:	e695      	b.n	8006a00 <_dtoa_r+0x6a0>
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4637      	mov	r7, r6
 8006cd8:	e7e1      	b.n	8006c9e <_dtoa_r+0x93e>
 8006cda:	9700      	str	r7, [sp, #0]
 8006cdc:	4637      	mov	r7, r6
 8006cde:	e599      	b.n	8006814 <_dtoa_r+0x4b4>
 8006ce0:	40240000 	.word	0x40240000
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80ca 	beq.w	8006e80 <_dtoa_r+0xb20>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	dd05      	ble.n	8006d00 <_dtoa_r+0x9a0>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fb4b 	bl	8007394 <__lshift>
 8006cfe:	4607      	mov	r7, r0
 8006d00:	f1b8 0f00 	cmp.w	r8, #0
 8006d04:	d05b      	beq.n	8006dbe <_dtoa_r+0xa5e>
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 f931 	bl	8006f70 <_Balloc>
 8006d0e:	4605      	mov	r5, r0
 8006d10:	b928      	cbnz	r0, 8006d1e <_dtoa_r+0x9be>
 8006d12:	4b87      	ldr	r3, [pc, #540]	; (8006f30 <_dtoa_r+0xbd0>)
 8006d14:	4602      	mov	r2, r0
 8006d16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d1a:	f7ff bb3b 	b.w	8006394 <_dtoa_r+0x34>
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	3202      	adds	r2, #2
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	f107 010c 	add.w	r1, r7, #12
 8006d28:	300c      	adds	r0, #12
 8006d2a:	f000 f913 	bl	8006f54 <memcpy>
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4629      	mov	r1, r5
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fb2e 	bl	8007394 <__lshift>
 8006d38:	9b01      	ldr	r3, [sp, #4]
 8006d3a:	f103 0901 	add.w	r9, r3, #1
 8006d3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d42:	4413      	add	r3, r2
 8006d44:	9305      	str	r3, [sp, #20]
 8006d46:	f00a 0301 	and.w	r3, sl, #1
 8006d4a:	46b8      	mov	r8, r7
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	4607      	mov	r7, r0
 8006d50:	4631      	mov	r1, r6
 8006d52:	ee18 0a10 	vmov	r0, s16
 8006d56:	f7ff fa77 	bl	8006248 <quorem>
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d62:	ee18 0a10 	vmov	r0, s16
 8006d66:	f000 fb85 	bl	8007474 <__mcmp>
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	9003      	str	r0, [sp, #12]
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fb9b 	bl	80074ac <__mdiff>
 8006d76:	68c2      	ldr	r2, [r0, #12]
 8006d78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	bb02      	cbnz	r2, 8006dc2 <_dtoa_r+0xa62>
 8006d80:	4601      	mov	r1, r0
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f000 fb75 	bl	8007474 <__mcmp>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4620      	mov	r0, r4
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	f000 f92d 	bl	8006ff0 <_Bfree>
 8006d96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d9a:	ea43 0102 	orr.w	r1, r3, r2
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	430b      	orrs	r3, r1
 8006da2:	464d      	mov	r5, r9
 8006da4:	d10f      	bne.n	8006dc6 <_dtoa_r+0xa66>
 8006da6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006daa:	d02a      	beq.n	8006e02 <_dtoa_r+0xaa2>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dd02      	ble.n	8006db8 <_dtoa_r+0xa58>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006db8:	f88b a000 	strb.w	sl, [fp]
 8006dbc:	e775      	b.n	8006caa <_dtoa_r+0x94a>
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	e7ba      	b.n	8006d38 <_dtoa_r+0x9d8>
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	e7e2      	b.n	8006d8c <_dtoa_r+0xa2c>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db04      	blt.n	8006dd6 <_dtoa_r+0xa76>
 8006dcc:	9906      	ldr	r1, [sp, #24]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	9904      	ldr	r1, [sp, #16]
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	d122      	bne.n	8006e1c <_dtoa_r+0xabc>
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	ddee      	ble.n	8006db8 <_dtoa_r+0xa58>
 8006dda:	ee18 1a10 	vmov	r1, s16
 8006dde:	2201      	movs	r2, #1
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fad7 	bl	8007394 <__lshift>
 8006de6:	4631      	mov	r1, r6
 8006de8:	ee08 0a10 	vmov	s16, r0
 8006dec:	f000 fb42 	bl	8007474 <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	dc03      	bgt.n	8006dfc <_dtoa_r+0xa9c>
 8006df4:	d1e0      	bne.n	8006db8 <_dtoa_r+0xa58>
 8006df6:	f01a 0f01 	tst.w	sl, #1
 8006dfa:	d0dd      	beq.n	8006db8 <_dtoa_r+0xa58>
 8006dfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e00:	d1d7      	bne.n	8006db2 <_dtoa_r+0xa52>
 8006e02:	2339      	movs	r3, #57	; 0x39
 8006e04:	f88b 3000 	strb.w	r3, [fp]
 8006e08:	462b      	mov	r3, r5
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e12:	2a39      	cmp	r2, #57	; 0x39
 8006e14:	d071      	beq.n	8006efa <_dtoa_r+0xb9a>
 8006e16:	3201      	adds	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e746      	b.n	8006caa <_dtoa_r+0x94a>
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	dd07      	ble.n	8006e30 <_dtoa_r+0xad0>
 8006e20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e24:	d0ed      	beq.n	8006e02 <_dtoa_r+0xaa2>
 8006e26:	f10a 0301 	add.w	r3, sl, #1
 8006e2a:	f88b 3000 	strb.w	r3, [fp]
 8006e2e:	e73c      	b.n	8006caa <_dtoa_r+0x94a>
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e36:	4599      	cmp	r9, r3
 8006e38:	d047      	beq.n	8006eca <_dtoa_r+0xb6a>
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	2300      	movs	r3, #0
 8006e40:	220a      	movs	r2, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f8f6 	bl	8007034 <__multadd>
 8006e48:	45b8      	cmp	r8, r7
 8006e4a:	ee08 0a10 	vmov	s16, r0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	f04f 020a 	mov.w	r2, #10
 8006e56:	4641      	mov	r1, r8
 8006e58:	4620      	mov	r0, r4
 8006e5a:	d106      	bne.n	8006e6a <_dtoa_r+0xb0a>
 8006e5c:	f000 f8ea 	bl	8007034 <__multadd>
 8006e60:	4680      	mov	r8, r0
 8006e62:	4607      	mov	r7, r0
 8006e64:	f109 0901 	add.w	r9, r9, #1
 8006e68:	e772      	b.n	8006d50 <_dtoa_r+0x9f0>
 8006e6a:	f000 f8e3 	bl	8007034 <__multadd>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4680      	mov	r8, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	220a      	movs	r2, #10
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 f8dc 	bl	8007034 <__multadd>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	e7f1      	b.n	8006e64 <_dtoa_r+0xb04>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	9302      	str	r3, [sp, #8]
 8006e84:	9d01      	ldr	r5, [sp, #4]
 8006e86:	ee18 0a10 	vmov	r0, s16
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	f7ff f9dc 	bl	8006248 <quorem>
 8006e90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	f805 ab01 	strb.w	sl, [r5], #1
 8006e9a:	1aea      	subs	r2, r5, r3
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	dd09      	ble.n	8006eb6 <_dtoa_r+0xb56>
 8006ea2:	ee18 1a10 	vmov	r1, s16
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f8c2 	bl	8007034 <__multadd>
 8006eb0:	ee08 0a10 	vmov	s16, r0
 8006eb4:	e7e7      	b.n	8006e86 <_dtoa_r+0xb26>
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfc8      	it	gt
 8006ebc:	461d      	movgt	r5, r3
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	bfd8      	it	le
 8006ec2:	2501      	movle	r5, #1
 8006ec4:	441d      	add	r5, r3
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fa5f 	bl	8007394 <__lshift>
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	ee08 0a10 	vmov	s16, r0
 8006edc:	f000 faca 	bl	8007474 <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dc91      	bgt.n	8006e08 <_dtoa_r+0xaa8>
 8006ee4:	d102      	bne.n	8006eec <_dtoa_r+0xb8c>
 8006ee6:	f01a 0f01 	tst.w	sl, #1
 8006eea:	d18d      	bne.n	8006e08 <_dtoa_r+0xaa8>
 8006eec:	462b      	mov	r3, r5
 8006eee:	461d      	mov	r5, r3
 8006ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef4:	2a30      	cmp	r2, #48	; 0x30
 8006ef6:	d0fa      	beq.n	8006eee <_dtoa_r+0xb8e>
 8006ef8:	e6d7      	b.n	8006caa <_dtoa_r+0x94a>
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d184      	bne.n	8006e0a <_dtoa_r+0xaaa>
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2331      	movs	r3, #49	; 0x31
 8006f08:	7013      	strb	r3, [r2, #0]
 8006f0a:	e6ce      	b.n	8006caa <_dtoa_r+0x94a>
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <_dtoa_r+0xbd4>)
 8006f0e:	f7ff ba95 	b.w	800643c <_dtoa_r+0xdc>
 8006f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f47f aa6e 	bne.w	80063f6 <_dtoa_r+0x96>
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <_dtoa_r+0xbd8>)
 8006f1c:	f7ff ba8e 	b.w	800643c <_dtoa_r+0xdc>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dcae      	bgt.n	8006e84 <_dtoa_r+0xb24>
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f73f aea8 	bgt.w	8006c7e <_dtoa_r+0x91e>
 8006f2e:	e7a9      	b.n	8006e84 <_dtoa_r+0xb24>
 8006f30:	08008ba7 	.word	0x08008ba7
 8006f34:	08008b04 	.word	0x08008b04
 8006f38:	08008b28 	.word	0x08008b28

08006f3c <_localeconv_r>:
 8006f3c:	4800      	ldr	r0, [pc, #0]	; (8006f40 <_localeconv_r+0x4>)
 8006f3e:	4770      	bx	lr
 8006f40:	2000016c 	.word	0x2000016c

08006f44 <malloc>:
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <malloc+0xc>)
 8006f46:	4601      	mov	r1, r0
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	f000 bc17 	b.w	800777c <_malloc_r>
 8006f4e:	bf00      	nop
 8006f50:	20000018 	.word	0x20000018

08006f54 <memcpy>:
 8006f54:	440a      	add	r2, r1
 8006f56:	4291      	cmp	r1, r2
 8006f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f5c:	d100      	bne.n	8006f60 <memcpy+0xc>
 8006f5e:	4770      	bx	lr
 8006f60:	b510      	push	{r4, lr}
 8006f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	d1f9      	bne.n	8006f62 <memcpy+0xe>
 8006f6e:	bd10      	pop	{r4, pc}

08006f70 <_Balloc>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	b976      	cbnz	r6, 8006f98 <_Balloc+0x28>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f7ff ffe2 	bl	8006f44 <malloc>
 8006f80:	4602      	mov	r2, r0
 8006f82:	6260      	str	r0, [r4, #36]	; 0x24
 8006f84:	b920      	cbnz	r0, 8006f90 <_Balloc+0x20>
 8006f86:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <_Balloc+0x78>)
 8006f88:	4818      	ldr	r0, [pc, #96]	; (8006fec <_Balloc+0x7c>)
 8006f8a:	2166      	movs	r1, #102	; 0x66
 8006f8c:	f000 fdd6 	bl	8007b3c <__assert_func>
 8006f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f94:	6006      	str	r6, [r0, #0]
 8006f96:	60c6      	str	r6, [r0, #12]
 8006f98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f9a:	68f3      	ldr	r3, [r6, #12]
 8006f9c:	b183      	cbz	r3, 8006fc0 <_Balloc+0x50>
 8006f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa6:	b9b8      	cbnz	r0, 8006fd8 <_Balloc+0x68>
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f605 	lsl.w	r6, r1, r5
 8006fae:	1d72      	adds	r2, r6, #5
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fb60 	bl	8007678 <_calloc_r>
 8006fb8:	b160      	cbz	r0, 8006fd4 <_Balloc+0x64>
 8006fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fbe:	e00e      	b.n	8006fde <_Balloc+0x6e>
 8006fc0:	2221      	movs	r2, #33	; 0x21
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fb57 	bl	8007678 <_calloc_r>
 8006fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fcc:	60f0      	str	r0, [r6, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e4      	bne.n	8006f9e <_Balloc+0x2e>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	6802      	ldr	r2, [r0, #0]
 8006fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe4:	e7f7      	b.n	8006fd6 <_Balloc+0x66>
 8006fe6:	bf00      	nop
 8006fe8:	08008b35 	.word	0x08008b35
 8006fec:	08008bb8 	.word	0x08008bb8

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b976      	cbnz	r6, 8007018 <_Bfree+0x28>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ffa2 	bl	8006f44 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	6268      	str	r0, [r5, #36]	; 0x24
 8007004:	b920      	cbnz	r0, 8007010 <_Bfree+0x20>
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <_Bfree+0x3c>)
 8007008:	4809      	ldr	r0, [pc, #36]	; (8007030 <_Bfree+0x40>)
 800700a:	218a      	movs	r1, #138	; 0x8a
 800700c:	f000 fd96 	bl	8007b3c <__assert_func>
 8007010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007014:	6006      	str	r6, [r0, #0]
 8007016:	60c6      	str	r6, [r0, #12]
 8007018:	b13c      	cbz	r4, 800702a <_Bfree+0x3a>
 800701a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800701c:	6862      	ldr	r2, [r4, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	6021      	str	r1, [r4, #0]
 8007026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	08008b35 	.word	0x08008b35
 8007030:	08008bb8 	.word	0x08008bb8

08007034 <__multadd>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	690d      	ldr	r5, [r1, #16]
 800703a:	4607      	mov	r7, r0
 800703c:	460c      	mov	r4, r1
 800703e:	461e      	mov	r6, r3
 8007040:	f101 0c14 	add.w	ip, r1, #20
 8007044:	2000      	movs	r0, #0
 8007046:	f8dc 3000 	ldr.w	r3, [ip]
 800704a:	b299      	uxth	r1, r3
 800704c:	fb02 6101 	mla	r1, r2, r1, r6
 8007050:	0c1e      	lsrs	r6, r3, #16
 8007052:	0c0b      	lsrs	r3, r1, #16
 8007054:	fb02 3306 	mla	r3, r2, r6, r3
 8007058:	b289      	uxth	r1, r1
 800705a:	3001      	adds	r0, #1
 800705c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007060:	4285      	cmp	r5, r0
 8007062:	f84c 1b04 	str.w	r1, [ip], #4
 8007066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800706a:	dcec      	bgt.n	8007046 <__multadd+0x12>
 800706c:	b30e      	cbz	r6, 80070b2 <__multadd+0x7e>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc19      	bgt.n	80070a8 <__multadd+0x74>
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4638      	mov	r0, r7
 8007078:	3101      	adds	r1, #1
 800707a:	f7ff ff79 	bl	8006f70 <_Balloc>
 800707e:	4680      	mov	r8, r0
 8007080:	b928      	cbnz	r0, 800708e <__multadd+0x5a>
 8007082:	4602      	mov	r2, r0
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <__multadd+0x84>)
 8007086:	480d      	ldr	r0, [pc, #52]	; (80070bc <__multadd+0x88>)
 8007088:	21b5      	movs	r1, #181	; 0xb5
 800708a:	f000 fd57 	bl	8007b3c <__assert_func>
 800708e:	6922      	ldr	r2, [r4, #16]
 8007090:	3202      	adds	r2, #2
 8007092:	f104 010c 	add.w	r1, r4, #12
 8007096:	0092      	lsls	r2, r2, #2
 8007098:	300c      	adds	r0, #12
 800709a:	f7ff ff5b 	bl	8006f54 <memcpy>
 800709e:	4621      	mov	r1, r4
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ffa5 	bl	8006ff0 <_Bfree>
 80070a6:	4644      	mov	r4, r8
 80070a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070ac:	3501      	adds	r5, #1
 80070ae:	615e      	str	r6, [r3, #20]
 80070b0:	6125      	str	r5, [r4, #16]
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	08008ba7 	.word	0x08008ba7
 80070bc:	08008bb8 	.word	0x08008bb8

080070c0 <__hi0bits>:
 80070c0:	0c03      	lsrs	r3, r0, #16
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	b9d3      	cbnz	r3, 80070fc <__hi0bits+0x3c>
 80070c6:	0400      	lsls	r0, r0, #16
 80070c8:	2310      	movs	r3, #16
 80070ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070ce:	bf04      	itt	eq
 80070d0:	0200      	lsleq	r0, r0, #8
 80070d2:	3308      	addeq	r3, #8
 80070d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070d8:	bf04      	itt	eq
 80070da:	0100      	lsleq	r0, r0, #4
 80070dc:	3304      	addeq	r3, #4
 80070de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070e2:	bf04      	itt	eq
 80070e4:	0080      	lsleq	r0, r0, #2
 80070e6:	3302      	addeq	r3, #2
 80070e8:	2800      	cmp	r0, #0
 80070ea:	db05      	blt.n	80070f8 <__hi0bits+0x38>
 80070ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070f0:	f103 0301 	add.w	r3, r3, #1
 80070f4:	bf08      	it	eq
 80070f6:	2320      	moveq	r3, #32
 80070f8:	4618      	mov	r0, r3
 80070fa:	4770      	bx	lr
 80070fc:	2300      	movs	r3, #0
 80070fe:	e7e4      	b.n	80070ca <__hi0bits+0xa>

08007100 <__lo0bits>:
 8007100:	6803      	ldr	r3, [r0, #0]
 8007102:	f013 0207 	ands.w	r2, r3, #7
 8007106:	4601      	mov	r1, r0
 8007108:	d00b      	beq.n	8007122 <__lo0bits+0x22>
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d423      	bmi.n	8007156 <__lo0bits+0x56>
 800710e:	0798      	lsls	r0, r3, #30
 8007110:	bf49      	itett	mi
 8007112:	085b      	lsrmi	r3, r3, #1
 8007114:	089b      	lsrpl	r3, r3, #2
 8007116:	2001      	movmi	r0, #1
 8007118:	600b      	strmi	r3, [r1, #0]
 800711a:	bf5c      	itt	pl
 800711c:	600b      	strpl	r3, [r1, #0]
 800711e:	2002      	movpl	r0, #2
 8007120:	4770      	bx	lr
 8007122:	b298      	uxth	r0, r3
 8007124:	b9a8      	cbnz	r0, 8007152 <__lo0bits+0x52>
 8007126:	0c1b      	lsrs	r3, r3, #16
 8007128:	2010      	movs	r0, #16
 800712a:	b2da      	uxtb	r2, r3
 800712c:	b90a      	cbnz	r2, 8007132 <__lo0bits+0x32>
 800712e:	3008      	adds	r0, #8
 8007130:	0a1b      	lsrs	r3, r3, #8
 8007132:	071a      	lsls	r2, r3, #28
 8007134:	bf04      	itt	eq
 8007136:	091b      	lsreq	r3, r3, #4
 8007138:	3004      	addeq	r0, #4
 800713a:	079a      	lsls	r2, r3, #30
 800713c:	bf04      	itt	eq
 800713e:	089b      	lsreq	r3, r3, #2
 8007140:	3002      	addeq	r0, #2
 8007142:	07da      	lsls	r2, r3, #31
 8007144:	d403      	bmi.n	800714e <__lo0bits+0x4e>
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	f100 0001 	add.w	r0, r0, #1
 800714c:	d005      	beq.n	800715a <__lo0bits+0x5a>
 800714e:	600b      	str	r3, [r1, #0]
 8007150:	4770      	bx	lr
 8007152:	4610      	mov	r0, r2
 8007154:	e7e9      	b.n	800712a <__lo0bits+0x2a>
 8007156:	2000      	movs	r0, #0
 8007158:	4770      	bx	lr
 800715a:	2020      	movs	r0, #32
 800715c:	4770      	bx	lr
	...

08007160 <__i2b>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	2101      	movs	r1, #1
 8007166:	f7ff ff03 	bl	8006f70 <_Balloc>
 800716a:	4602      	mov	r2, r0
 800716c:	b928      	cbnz	r0, 800717a <__i2b+0x1a>
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <__i2b+0x24>)
 8007170:	4805      	ldr	r0, [pc, #20]	; (8007188 <__i2b+0x28>)
 8007172:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007176:	f000 fce1 	bl	8007b3c <__assert_func>
 800717a:	2301      	movs	r3, #1
 800717c:	6144      	str	r4, [r0, #20]
 800717e:	6103      	str	r3, [r0, #16]
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop
 8007184:	08008ba7 	.word	0x08008ba7
 8007188:	08008bb8 	.word	0x08008bb8

0800718c <__multiply>:
 800718c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4691      	mov	r9, r2
 8007192:	690a      	ldr	r2, [r1, #16]
 8007194:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	bfb8      	it	lt
 800719c:	460b      	movlt	r3, r1
 800719e:	460c      	mov	r4, r1
 80071a0:	bfbc      	itt	lt
 80071a2:	464c      	movlt	r4, r9
 80071a4:	4699      	movlt	r9, r3
 80071a6:	6927      	ldr	r7, [r4, #16]
 80071a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071ac:	68a3      	ldr	r3, [r4, #8]
 80071ae:	6861      	ldr	r1, [r4, #4]
 80071b0:	eb07 060a 	add.w	r6, r7, sl
 80071b4:	42b3      	cmp	r3, r6
 80071b6:	b085      	sub	sp, #20
 80071b8:	bfb8      	it	lt
 80071ba:	3101      	addlt	r1, #1
 80071bc:	f7ff fed8 	bl	8006f70 <_Balloc>
 80071c0:	b930      	cbnz	r0, 80071d0 <__multiply+0x44>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b44      	ldr	r3, [pc, #272]	; (80072d8 <__multiply+0x14c>)
 80071c6:	4845      	ldr	r0, [pc, #276]	; (80072dc <__multiply+0x150>)
 80071c8:	f240 115d 	movw	r1, #349	; 0x15d
 80071cc:	f000 fcb6 	bl	8007b3c <__assert_func>
 80071d0:	f100 0514 	add.w	r5, r0, #20
 80071d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071d8:	462b      	mov	r3, r5
 80071da:	2200      	movs	r2, #0
 80071dc:	4543      	cmp	r3, r8
 80071de:	d321      	bcc.n	8007224 <__multiply+0x98>
 80071e0:	f104 0314 	add.w	r3, r4, #20
 80071e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071e8:	f109 0314 	add.w	r3, r9, #20
 80071ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071f0:	9202      	str	r2, [sp, #8]
 80071f2:	1b3a      	subs	r2, r7, r4
 80071f4:	3a15      	subs	r2, #21
 80071f6:	f022 0203 	bic.w	r2, r2, #3
 80071fa:	3204      	adds	r2, #4
 80071fc:	f104 0115 	add.w	r1, r4, #21
 8007200:	428f      	cmp	r7, r1
 8007202:	bf38      	it	cc
 8007204:	2204      	movcc	r2, #4
 8007206:	9201      	str	r2, [sp, #4]
 8007208:	9a02      	ldr	r2, [sp, #8]
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	429a      	cmp	r2, r3
 800720e:	d80c      	bhi.n	800722a <__multiply+0x9e>
 8007210:	2e00      	cmp	r6, #0
 8007212:	dd03      	ble.n	800721c <__multiply+0x90>
 8007214:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007218:	2b00      	cmp	r3, #0
 800721a:	d05a      	beq.n	80072d2 <__multiply+0x146>
 800721c:	6106      	str	r6, [r0, #16]
 800721e:	b005      	add	sp, #20
 8007220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007224:	f843 2b04 	str.w	r2, [r3], #4
 8007228:	e7d8      	b.n	80071dc <__multiply+0x50>
 800722a:	f8b3 a000 	ldrh.w	sl, [r3]
 800722e:	f1ba 0f00 	cmp.w	sl, #0
 8007232:	d024      	beq.n	800727e <__multiply+0xf2>
 8007234:	f104 0e14 	add.w	lr, r4, #20
 8007238:	46a9      	mov	r9, r5
 800723a:	f04f 0c00 	mov.w	ip, #0
 800723e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007242:	f8d9 1000 	ldr.w	r1, [r9]
 8007246:	fa1f fb82 	uxth.w	fp, r2
 800724a:	b289      	uxth	r1, r1
 800724c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007250:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007254:	f8d9 2000 	ldr.w	r2, [r9]
 8007258:	4461      	add	r1, ip
 800725a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800725e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007262:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007266:	b289      	uxth	r1, r1
 8007268:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800726c:	4577      	cmp	r7, lr
 800726e:	f849 1b04 	str.w	r1, [r9], #4
 8007272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007276:	d8e2      	bhi.n	800723e <__multiply+0xb2>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	f845 c002 	str.w	ip, [r5, r2]
 800727e:	9a03      	ldr	r2, [sp, #12]
 8007280:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007284:	3304      	adds	r3, #4
 8007286:	f1b9 0f00 	cmp.w	r9, #0
 800728a:	d020      	beq.n	80072ce <__multiply+0x142>
 800728c:	6829      	ldr	r1, [r5, #0]
 800728e:	f104 0c14 	add.w	ip, r4, #20
 8007292:	46ae      	mov	lr, r5
 8007294:	f04f 0a00 	mov.w	sl, #0
 8007298:	f8bc b000 	ldrh.w	fp, [ip]
 800729c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072a0:	fb09 220b 	mla	r2, r9, fp, r2
 80072a4:	4492      	add	sl, r2
 80072a6:	b289      	uxth	r1, r1
 80072a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072ac:	f84e 1b04 	str.w	r1, [lr], #4
 80072b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072b4:	f8be 1000 	ldrh.w	r1, [lr]
 80072b8:	0c12      	lsrs	r2, r2, #16
 80072ba:	fb09 1102 	mla	r1, r9, r2, r1
 80072be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072c2:	4567      	cmp	r7, ip
 80072c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072c8:	d8e6      	bhi.n	8007298 <__multiply+0x10c>
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	50a9      	str	r1, [r5, r2]
 80072ce:	3504      	adds	r5, #4
 80072d0:	e79a      	b.n	8007208 <__multiply+0x7c>
 80072d2:	3e01      	subs	r6, #1
 80072d4:	e79c      	b.n	8007210 <__multiply+0x84>
 80072d6:	bf00      	nop
 80072d8:	08008ba7 	.word	0x08008ba7
 80072dc:	08008bb8 	.word	0x08008bb8

080072e0 <__pow5mult>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4615      	mov	r5, r2
 80072e6:	f012 0203 	ands.w	r2, r2, #3
 80072ea:	4606      	mov	r6, r0
 80072ec:	460f      	mov	r7, r1
 80072ee:	d007      	beq.n	8007300 <__pow5mult+0x20>
 80072f0:	4c25      	ldr	r4, [pc, #148]	; (8007388 <__pow5mult+0xa8>)
 80072f2:	3a01      	subs	r2, #1
 80072f4:	2300      	movs	r3, #0
 80072f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072fa:	f7ff fe9b 	bl	8007034 <__multadd>
 80072fe:	4607      	mov	r7, r0
 8007300:	10ad      	asrs	r5, r5, #2
 8007302:	d03d      	beq.n	8007380 <__pow5mult+0xa0>
 8007304:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007306:	b97c      	cbnz	r4, 8007328 <__pow5mult+0x48>
 8007308:	2010      	movs	r0, #16
 800730a:	f7ff fe1b 	bl	8006f44 <malloc>
 800730e:	4602      	mov	r2, r0
 8007310:	6270      	str	r0, [r6, #36]	; 0x24
 8007312:	b928      	cbnz	r0, 8007320 <__pow5mult+0x40>
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <__pow5mult+0xac>)
 8007316:	481e      	ldr	r0, [pc, #120]	; (8007390 <__pow5mult+0xb0>)
 8007318:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800731c:	f000 fc0e 	bl	8007b3c <__assert_func>
 8007320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007324:	6004      	str	r4, [r0, #0]
 8007326:	60c4      	str	r4, [r0, #12]
 8007328:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800732c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007330:	b94c      	cbnz	r4, 8007346 <__pow5mult+0x66>
 8007332:	f240 2171 	movw	r1, #625	; 0x271
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ff12 	bl	8007160 <__i2b>
 800733c:	2300      	movs	r3, #0
 800733e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007342:	4604      	mov	r4, r0
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	f04f 0900 	mov.w	r9, #0
 800734a:	07eb      	lsls	r3, r5, #31
 800734c:	d50a      	bpl.n	8007364 <__pow5mult+0x84>
 800734e:	4639      	mov	r1, r7
 8007350:	4622      	mov	r2, r4
 8007352:	4630      	mov	r0, r6
 8007354:	f7ff ff1a 	bl	800718c <__multiply>
 8007358:	4639      	mov	r1, r7
 800735a:	4680      	mov	r8, r0
 800735c:	4630      	mov	r0, r6
 800735e:	f7ff fe47 	bl	8006ff0 <_Bfree>
 8007362:	4647      	mov	r7, r8
 8007364:	106d      	asrs	r5, r5, #1
 8007366:	d00b      	beq.n	8007380 <__pow5mult+0xa0>
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	b938      	cbnz	r0, 800737c <__pow5mult+0x9c>
 800736c:	4622      	mov	r2, r4
 800736e:	4621      	mov	r1, r4
 8007370:	4630      	mov	r0, r6
 8007372:	f7ff ff0b 	bl	800718c <__multiply>
 8007376:	6020      	str	r0, [r4, #0]
 8007378:	f8c0 9000 	str.w	r9, [r0]
 800737c:	4604      	mov	r4, r0
 800737e:	e7e4      	b.n	800734a <__pow5mult+0x6a>
 8007380:	4638      	mov	r0, r7
 8007382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007386:	bf00      	nop
 8007388:	08008d08 	.word	0x08008d08
 800738c:	08008b35 	.word	0x08008b35
 8007390:	08008bb8 	.word	0x08008bb8

08007394 <__lshift>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	460c      	mov	r4, r1
 800739a:	6849      	ldr	r1, [r1, #4]
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073a2:	68a3      	ldr	r3, [r4, #8]
 80073a4:	4607      	mov	r7, r0
 80073a6:	4691      	mov	r9, r2
 80073a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073ac:	f108 0601 	add.w	r6, r8, #1
 80073b0:	42b3      	cmp	r3, r6
 80073b2:	db0b      	blt.n	80073cc <__lshift+0x38>
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff fddb 	bl	8006f70 <_Balloc>
 80073ba:	4605      	mov	r5, r0
 80073bc:	b948      	cbnz	r0, 80073d2 <__lshift+0x3e>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <__lshift+0xd8>)
 80073c2:	482b      	ldr	r0, [pc, #172]	; (8007470 <__lshift+0xdc>)
 80073c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073c8:	f000 fbb8 	bl	8007b3c <__assert_func>
 80073cc:	3101      	adds	r1, #1
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	e7ee      	b.n	80073b0 <__lshift+0x1c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	f100 0114 	add.w	r1, r0, #20
 80073d8:	f100 0210 	add.w	r2, r0, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	4553      	cmp	r3, sl
 80073e0:	db37      	blt.n	8007452 <__lshift+0xbe>
 80073e2:	6920      	ldr	r0, [r4, #16]
 80073e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e8:	f104 0314 	add.w	r3, r4, #20
 80073ec:	f019 091f 	ands.w	r9, r9, #31
 80073f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073f8:	d02f      	beq.n	800745a <__lshift+0xc6>
 80073fa:	f1c9 0e20 	rsb	lr, r9, #32
 80073fe:	468a      	mov	sl, r1
 8007400:	f04f 0c00 	mov.w	ip, #0
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	fa02 f209 	lsl.w	r2, r2, r9
 800740a:	ea42 020c 	orr.w	r2, r2, ip
 800740e:	f84a 2b04 	str.w	r2, [sl], #4
 8007412:	f853 2b04 	ldr.w	r2, [r3], #4
 8007416:	4298      	cmp	r0, r3
 8007418:	fa22 fc0e 	lsr.w	ip, r2, lr
 800741c:	d8f2      	bhi.n	8007404 <__lshift+0x70>
 800741e:	1b03      	subs	r3, r0, r4
 8007420:	3b15      	subs	r3, #21
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	3304      	adds	r3, #4
 8007428:	f104 0215 	add.w	r2, r4, #21
 800742c:	4290      	cmp	r0, r2
 800742e:	bf38      	it	cc
 8007430:	2304      	movcc	r3, #4
 8007432:	f841 c003 	str.w	ip, [r1, r3]
 8007436:	f1bc 0f00 	cmp.w	ip, #0
 800743a:	d001      	beq.n	8007440 <__lshift+0xac>
 800743c:	f108 0602 	add.w	r6, r8, #2
 8007440:	3e01      	subs	r6, #1
 8007442:	4638      	mov	r0, r7
 8007444:	612e      	str	r6, [r5, #16]
 8007446:	4621      	mov	r1, r4
 8007448:	f7ff fdd2 	bl	8006ff0 <_Bfree>
 800744c:	4628      	mov	r0, r5
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	f842 0f04 	str.w	r0, [r2, #4]!
 8007456:	3301      	adds	r3, #1
 8007458:	e7c1      	b.n	80073de <__lshift+0x4a>
 800745a:	3904      	subs	r1, #4
 800745c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007460:	f841 2f04 	str.w	r2, [r1, #4]!
 8007464:	4298      	cmp	r0, r3
 8007466:	d8f9      	bhi.n	800745c <__lshift+0xc8>
 8007468:	e7ea      	b.n	8007440 <__lshift+0xac>
 800746a:	bf00      	nop
 800746c:	08008ba7 	.word	0x08008ba7
 8007470:	08008bb8 	.word	0x08008bb8

08007474 <__mcmp>:
 8007474:	b530      	push	{r4, r5, lr}
 8007476:	6902      	ldr	r2, [r0, #16]
 8007478:	690c      	ldr	r4, [r1, #16]
 800747a:	1b12      	subs	r2, r2, r4
 800747c:	d10e      	bne.n	800749c <__mcmp+0x28>
 800747e:	f100 0314 	add.w	r3, r0, #20
 8007482:	3114      	adds	r1, #20
 8007484:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007488:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800748c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007490:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007494:	42a5      	cmp	r5, r4
 8007496:	d003      	beq.n	80074a0 <__mcmp+0x2c>
 8007498:	d305      	bcc.n	80074a6 <__mcmp+0x32>
 800749a:	2201      	movs	r2, #1
 800749c:	4610      	mov	r0, r2
 800749e:	bd30      	pop	{r4, r5, pc}
 80074a0:	4283      	cmp	r3, r0
 80074a2:	d3f3      	bcc.n	800748c <__mcmp+0x18>
 80074a4:	e7fa      	b.n	800749c <__mcmp+0x28>
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	e7f7      	b.n	800749c <__mcmp+0x28>

080074ac <__mdiff>:
 80074ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	460c      	mov	r4, r1
 80074b2:	4606      	mov	r6, r0
 80074b4:	4611      	mov	r1, r2
 80074b6:	4620      	mov	r0, r4
 80074b8:	4690      	mov	r8, r2
 80074ba:	f7ff ffdb 	bl	8007474 <__mcmp>
 80074be:	1e05      	subs	r5, r0, #0
 80074c0:	d110      	bne.n	80074e4 <__mdiff+0x38>
 80074c2:	4629      	mov	r1, r5
 80074c4:	4630      	mov	r0, r6
 80074c6:	f7ff fd53 	bl	8006f70 <_Balloc>
 80074ca:	b930      	cbnz	r0, 80074da <__mdiff+0x2e>
 80074cc:	4b3a      	ldr	r3, [pc, #232]	; (80075b8 <__mdiff+0x10c>)
 80074ce:	4602      	mov	r2, r0
 80074d0:	f240 2132 	movw	r1, #562	; 0x232
 80074d4:	4839      	ldr	r0, [pc, #228]	; (80075bc <__mdiff+0x110>)
 80074d6:	f000 fb31 	bl	8007b3c <__assert_func>
 80074da:	2301      	movs	r3, #1
 80074dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	bfa4      	itt	ge
 80074e6:	4643      	movge	r3, r8
 80074e8:	46a0      	movge	r8, r4
 80074ea:	4630      	mov	r0, r6
 80074ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074f0:	bfa6      	itte	ge
 80074f2:	461c      	movge	r4, r3
 80074f4:	2500      	movge	r5, #0
 80074f6:	2501      	movlt	r5, #1
 80074f8:	f7ff fd3a 	bl	8006f70 <_Balloc>
 80074fc:	b920      	cbnz	r0, 8007508 <__mdiff+0x5c>
 80074fe:	4b2e      	ldr	r3, [pc, #184]	; (80075b8 <__mdiff+0x10c>)
 8007500:	4602      	mov	r2, r0
 8007502:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007506:	e7e5      	b.n	80074d4 <__mdiff+0x28>
 8007508:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800750c:	6926      	ldr	r6, [r4, #16]
 800750e:	60c5      	str	r5, [r0, #12]
 8007510:	f104 0914 	add.w	r9, r4, #20
 8007514:	f108 0514 	add.w	r5, r8, #20
 8007518:	f100 0e14 	add.w	lr, r0, #20
 800751c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007520:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007524:	f108 0210 	add.w	r2, r8, #16
 8007528:	46f2      	mov	sl, lr
 800752a:	2100      	movs	r1, #0
 800752c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007530:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007534:	fa1f f883 	uxth.w	r8, r3
 8007538:	fa11 f18b 	uxtah	r1, r1, fp
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	eba1 0808 	sub.w	r8, r1, r8
 8007542:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007546:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800754a:	fa1f f888 	uxth.w	r8, r8
 800754e:	1419      	asrs	r1, r3, #16
 8007550:	454e      	cmp	r6, r9
 8007552:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007556:	f84a 3b04 	str.w	r3, [sl], #4
 800755a:	d8e7      	bhi.n	800752c <__mdiff+0x80>
 800755c:	1b33      	subs	r3, r6, r4
 800755e:	3b15      	subs	r3, #21
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	3304      	adds	r3, #4
 8007566:	3415      	adds	r4, #21
 8007568:	42a6      	cmp	r6, r4
 800756a:	bf38      	it	cc
 800756c:	2304      	movcc	r3, #4
 800756e:	441d      	add	r5, r3
 8007570:	4473      	add	r3, lr
 8007572:	469e      	mov	lr, r3
 8007574:	462e      	mov	r6, r5
 8007576:	4566      	cmp	r6, ip
 8007578:	d30e      	bcc.n	8007598 <__mdiff+0xec>
 800757a:	f10c 0203 	add.w	r2, ip, #3
 800757e:	1b52      	subs	r2, r2, r5
 8007580:	f022 0203 	bic.w	r2, r2, #3
 8007584:	3d03      	subs	r5, #3
 8007586:	45ac      	cmp	ip, r5
 8007588:	bf38      	it	cc
 800758a:	2200      	movcc	r2, #0
 800758c:	441a      	add	r2, r3
 800758e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007592:	b17b      	cbz	r3, 80075b4 <__mdiff+0x108>
 8007594:	6107      	str	r7, [r0, #16]
 8007596:	e7a3      	b.n	80074e0 <__mdiff+0x34>
 8007598:	f856 8b04 	ldr.w	r8, [r6], #4
 800759c:	fa11 f288 	uxtah	r2, r1, r8
 80075a0:	1414      	asrs	r4, r2, #16
 80075a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075a6:	b292      	uxth	r2, r2
 80075a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075ac:	f84e 2b04 	str.w	r2, [lr], #4
 80075b0:	1421      	asrs	r1, r4, #16
 80075b2:	e7e0      	b.n	8007576 <__mdiff+0xca>
 80075b4:	3f01      	subs	r7, #1
 80075b6:	e7ea      	b.n	800758e <__mdiff+0xe2>
 80075b8:	08008ba7 	.word	0x08008ba7
 80075bc:	08008bb8 	.word	0x08008bb8

080075c0 <__d2b>:
 80075c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c4:	4689      	mov	r9, r1
 80075c6:	2101      	movs	r1, #1
 80075c8:	ec57 6b10 	vmov	r6, r7, d0
 80075cc:	4690      	mov	r8, r2
 80075ce:	f7ff fccf 	bl	8006f70 <_Balloc>
 80075d2:	4604      	mov	r4, r0
 80075d4:	b930      	cbnz	r0, 80075e4 <__d2b+0x24>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b25      	ldr	r3, [pc, #148]	; (8007670 <__d2b+0xb0>)
 80075da:	4826      	ldr	r0, [pc, #152]	; (8007674 <__d2b+0xb4>)
 80075dc:	f240 310a 	movw	r1, #778	; 0x30a
 80075e0:	f000 faac 	bl	8007b3c <__assert_func>
 80075e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075ec:	bb35      	cbnz	r5, 800763c <__d2b+0x7c>
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	d028      	beq.n	8007646 <__d2b+0x86>
 80075f4:	4668      	mov	r0, sp
 80075f6:	9600      	str	r6, [sp, #0]
 80075f8:	f7ff fd82 	bl	8007100 <__lo0bits>
 80075fc:	9900      	ldr	r1, [sp, #0]
 80075fe:	b300      	cbz	r0, 8007642 <__d2b+0x82>
 8007600:	9a01      	ldr	r2, [sp, #4]
 8007602:	f1c0 0320 	rsb	r3, r0, #32
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	430b      	orrs	r3, r1
 800760c:	40c2      	lsrs	r2, r0
 800760e:	6163      	str	r3, [r4, #20]
 8007610:	9201      	str	r2, [sp, #4]
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	61a3      	str	r3, [r4, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bf14      	ite	ne
 800761a:	2202      	movne	r2, #2
 800761c:	2201      	moveq	r2, #1
 800761e:	6122      	str	r2, [r4, #16]
 8007620:	b1d5      	cbz	r5, 8007658 <__d2b+0x98>
 8007622:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007626:	4405      	add	r5, r0
 8007628:	f8c9 5000 	str.w	r5, [r9]
 800762c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007630:	f8c8 0000 	str.w	r0, [r8]
 8007634:	4620      	mov	r0, r4
 8007636:	b003      	add	sp, #12
 8007638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800763c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007640:	e7d5      	b.n	80075ee <__d2b+0x2e>
 8007642:	6161      	str	r1, [r4, #20]
 8007644:	e7e5      	b.n	8007612 <__d2b+0x52>
 8007646:	a801      	add	r0, sp, #4
 8007648:	f7ff fd5a 	bl	8007100 <__lo0bits>
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	6163      	str	r3, [r4, #20]
 8007650:	2201      	movs	r2, #1
 8007652:	6122      	str	r2, [r4, #16]
 8007654:	3020      	adds	r0, #32
 8007656:	e7e3      	b.n	8007620 <__d2b+0x60>
 8007658:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800765c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007660:	f8c9 0000 	str.w	r0, [r9]
 8007664:	6918      	ldr	r0, [r3, #16]
 8007666:	f7ff fd2b 	bl	80070c0 <__hi0bits>
 800766a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800766e:	e7df      	b.n	8007630 <__d2b+0x70>
 8007670:	08008ba7 	.word	0x08008ba7
 8007674:	08008bb8 	.word	0x08008bb8

08007678 <_calloc_r>:
 8007678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800767a:	fba1 2402 	umull	r2, r4, r1, r2
 800767e:	b94c      	cbnz	r4, 8007694 <_calloc_r+0x1c>
 8007680:	4611      	mov	r1, r2
 8007682:	9201      	str	r2, [sp, #4]
 8007684:	f000 f87a 	bl	800777c <_malloc_r>
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	4605      	mov	r5, r0
 800768c:	b930      	cbnz	r0, 800769c <_calloc_r+0x24>
 800768e:	4628      	mov	r0, r5
 8007690:	b003      	add	sp, #12
 8007692:	bd30      	pop	{r4, r5, pc}
 8007694:	220c      	movs	r2, #12
 8007696:	6002      	str	r2, [r0, #0]
 8007698:	2500      	movs	r5, #0
 800769a:	e7f8      	b.n	800768e <_calloc_r+0x16>
 800769c:	4621      	mov	r1, r4
 800769e:	f7fe f941 	bl	8005924 <memset>
 80076a2:	e7f4      	b.n	800768e <_calloc_r+0x16>

080076a4 <_free_r>:
 80076a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076a6:	2900      	cmp	r1, #0
 80076a8:	d044      	beq.n	8007734 <_free_r+0x90>
 80076aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ae:	9001      	str	r0, [sp, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f1a1 0404 	sub.w	r4, r1, #4
 80076b6:	bfb8      	it	lt
 80076b8:	18e4      	addlt	r4, r4, r3
 80076ba:	f000 fa9b 	bl	8007bf4 <__malloc_lock>
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <_free_r+0x94>)
 80076c0:	9801      	ldr	r0, [sp, #4]
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	b933      	cbnz	r3, 80076d4 <_free_r+0x30>
 80076c6:	6063      	str	r3, [r4, #4]
 80076c8:	6014      	str	r4, [r2, #0]
 80076ca:	b003      	add	sp, #12
 80076cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d0:	f000 ba96 	b.w	8007c00 <__malloc_unlock>
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	d908      	bls.n	80076ea <_free_r+0x46>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf01      	itttt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	1949      	addeq	r1, r1, r5
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	e7ed      	b.n	80076c6 <_free_r+0x22>
 80076ea:	461a      	mov	r2, r3
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	b10b      	cbz	r3, 80076f4 <_free_r+0x50>
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d9fa      	bls.n	80076ea <_free_r+0x46>
 80076f4:	6811      	ldr	r1, [r2, #0]
 80076f6:	1855      	adds	r5, r2, r1
 80076f8:	42a5      	cmp	r5, r4
 80076fa:	d10b      	bne.n	8007714 <_free_r+0x70>
 80076fc:	6824      	ldr	r4, [r4, #0]
 80076fe:	4421      	add	r1, r4
 8007700:	1854      	adds	r4, r2, r1
 8007702:	42a3      	cmp	r3, r4
 8007704:	6011      	str	r1, [r2, #0]
 8007706:	d1e0      	bne.n	80076ca <_free_r+0x26>
 8007708:	681c      	ldr	r4, [r3, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	6053      	str	r3, [r2, #4]
 800770e:	4421      	add	r1, r4
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	e7da      	b.n	80076ca <_free_r+0x26>
 8007714:	d902      	bls.n	800771c <_free_r+0x78>
 8007716:	230c      	movs	r3, #12
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	e7d6      	b.n	80076ca <_free_r+0x26>
 800771c:	6825      	ldr	r5, [r4, #0]
 800771e:	1961      	adds	r1, r4, r5
 8007720:	428b      	cmp	r3, r1
 8007722:	bf04      	itt	eq
 8007724:	6819      	ldreq	r1, [r3, #0]
 8007726:	685b      	ldreq	r3, [r3, #4]
 8007728:	6063      	str	r3, [r4, #4]
 800772a:	bf04      	itt	eq
 800772c:	1949      	addeq	r1, r1, r5
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	6054      	str	r4, [r2, #4]
 8007732:	e7ca      	b.n	80076ca <_free_r+0x26>
 8007734:	b003      	add	sp, #12
 8007736:	bd30      	pop	{r4, r5, pc}
 8007738:	20000508 	.word	0x20000508

0800773c <sbrk_aligned>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4e0e      	ldr	r6, [pc, #56]	; (8007778 <sbrk_aligned+0x3c>)
 8007740:	460c      	mov	r4, r1
 8007742:	6831      	ldr	r1, [r6, #0]
 8007744:	4605      	mov	r5, r0
 8007746:	b911      	cbnz	r1, 800774e <sbrk_aligned+0x12>
 8007748:	f000 f9e8 	bl	8007b1c <_sbrk_r>
 800774c:	6030      	str	r0, [r6, #0]
 800774e:	4621      	mov	r1, r4
 8007750:	4628      	mov	r0, r5
 8007752:	f000 f9e3 	bl	8007b1c <_sbrk_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	d00a      	beq.n	8007770 <sbrk_aligned+0x34>
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d007      	beq.n	8007774 <sbrk_aligned+0x38>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4628      	mov	r0, r5
 8007768:	f000 f9d8 	bl	8007b1c <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d101      	bne.n	8007774 <sbrk_aligned+0x38>
 8007770:	f04f 34ff 	mov.w	r4, #4294967295
 8007774:	4620      	mov	r0, r4
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	2000050c 	.word	0x2000050c

0800777c <_malloc_r>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	1ccd      	adds	r5, r1, #3
 8007782:	f025 0503 	bic.w	r5, r5, #3
 8007786:	3508      	adds	r5, #8
 8007788:	2d0c      	cmp	r5, #12
 800778a:	bf38      	it	cc
 800778c:	250c      	movcc	r5, #12
 800778e:	2d00      	cmp	r5, #0
 8007790:	4607      	mov	r7, r0
 8007792:	db01      	blt.n	8007798 <_malloc_r+0x1c>
 8007794:	42a9      	cmp	r1, r5
 8007796:	d905      	bls.n	80077a4 <_malloc_r+0x28>
 8007798:	230c      	movs	r3, #12
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	2600      	movs	r6, #0
 800779e:	4630      	mov	r0, r6
 80077a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a4:	4e2e      	ldr	r6, [pc, #184]	; (8007860 <_malloc_r+0xe4>)
 80077a6:	f000 fa25 	bl	8007bf4 <__malloc_lock>
 80077aa:	6833      	ldr	r3, [r6, #0]
 80077ac:	461c      	mov	r4, r3
 80077ae:	bb34      	cbnz	r4, 80077fe <_malloc_r+0x82>
 80077b0:	4629      	mov	r1, r5
 80077b2:	4638      	mov	r0, r7
 80077b4:	f7ff ffc2 	bl	800773c <sbrk_aligned>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	4604      	mov	r4, r0
 80077bc:	d14d      	bne.n	800785a <_malloc_r+0xde>
 80077be:	6834      	ldr	r4, [r6, #0]
 80077c0:	4626      	mov	r6, r4
 80077c2:	2e00      	cmp	r6, #0
 80077c4:	d140      	bne.n	8007848 <_malloc_r+0xcc>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	4631      	mov	r1, r6
 80077ca:	4638      	mov	r0, r7
 80077cc:	eb04 0803 	add.w	r8, r4, r3
 80077d0:	f000 f9a4 	bl	8007b1c <_sbrk_r>
 80077d4:	4580      	cmp	r8, r0
 80077d6:	d13a      	bne.n	800784e <_malloc_r+0xd2>
 80077d8:	6821      	ldr	r1, [r4, #0]
 80077da:	3503      	adds	r5, #3
 80077dc:	1a6d      	subs	r5, r5, r1
 80077de:	f025 0503 	bic.w	r5, r5, #3
 80077e2:	3508      	adds	r5, #8
 80077e4:	2d0c      	cmp	r5, #12
 80077e6:	bf38      	it	cc
 80077e8:	250c      	movcc	r5, #12
 80077ea:	4629      	mov	r1, r5
 80077ec:	4638      	mov	r0, r7
 80077ee:	f7ff ffa5 	bl	800773c <sbrk_aligned>
 80077f2:	3001      	adds	r0, #1
 80077f4:	d02b      	beq.n	800784e <_malloc_r+0xd2>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	442b      	add	r3, r5
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	e00e      	b.n	800781c <_malloc_r+0xa0>
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	1b52      	subs	r2, r2, r5
 8007802:	d41e      	bmi.n	8007842 <_malloc_r+0xc6>
 8007804:	2a0b      	cmp	r2, #11
 8007806:	d916      	bls.n	8007836 <_malloc_r+0xba>
 8007808:	1961      	adds	r1, r4, r5
 800780a:	42a3      	cmp	r3, r4
 800780c:	6025      	str	r5, [r4, #0]
 800780e:	bf18      	it	ne
 8007810:	6059      	strne	r1, [r3, #4]
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	bf08      	it	eq
 8007816:	6031      	streq	r1, [r6, #0]
 8007818:	5162      	str	r2, [r4, r5]
 800781a:	604b      	str	r3, [r1, #4]
 800781c:	4638      	mov	r0, r7
 800781e:	f104 060b 	add.w	r6, r4, #11
 8007822:	f000 f9ed 	bl	8007c00 <__malloc_unlock>
 8007826:	f026 0607 	bic.w	r6, r6, #7
 800782a:	1d23      	adds	r3, r4, #4
 800782c:	1af2      	subs	r2, r6, r3
 800782e:	d0b6      	beq.n	800779e <_malloc_r+0x22>
 8007830:	1b9b      	subs	r3, r3, r6
 8007832:	50a3      	str	r3, [r4, r2]
 8007834:	e7b3      	b.n	800779e <_malloc_r+0x22>
 8007836:	6862      	ldr	r2, [r4, #4]
 8007838:	42a3      	cmp	r3, r4
 800783a:	bf0c      	ite	eq
 800783c:	6032      	streq	r2, [r6, #0]
 800783e:	605a      	strne	r2, [r3, #4]
 8007840:	e7ec      	b.n	800781c <_malloc_r+0xa0>
 8007842:	4623      	mov	r3, r4
 8007844:	6864      	ldr	r4, [r4, #4]
 8007846:	e7b2      	b.n	80077ae <_malloc_r+0x32>
 8007848:	4634      	mov	r4, r6
 800784a:	6876      	ldr	r6, [r6, #4]
 800784c:	e7b9      	b.n	80077c2 <_malloc_r+0x46>
 800784e:	230c      	movs	r3, #12
 8007850:	603b      	str	r3, [r7, #0]
 8007852:	4638      	mov	r0, r7
 8007854:	f000 f9d4 	bl	8007c00 <__malloc_unlock>
 8007858:	e7a1      	b.n	800779e <_malloc_r+0x22>
 800785a:	6025      	str	r5, [r4, #0]
 800785c:	e7de      	b.n	800781c <_malloc_r+0xa0>
 800785e:	bf00      	nop
 8007860:	20000508 	.word	0x20000508

08007864 <__ssputs_r>:
 8007864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007868:	688e      	ldr	r6, [r1, #8]
 800786a:	429e      	cmp	r6, r3
 800786c:	4682      	mov	sl, r0
 800786e:	460c      	mov	r4, r1
 8007870:	4690      	mov	r8, r2
 8007872:	461f      	mov	r7, r3
 8007874:	d838      	bhi.n	80078e8 <__ssputs_r+0x84>
 8007876:	898a      	ldrh	r2, [r1, #12]
 8007878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800787c:	d032      	beq.n	80078e4 <__ssputs_r+0x80>
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	6909      	ldr	r1, [r1, #16]
 8007882:	eba5 0901 	sub.w	r9, r5, r1
 8007886:	6965      	ldr	r5, [r4, #20]
 8007888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800788c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007890:	3301      	adds	r3, #1
 8007892:	444b      	add	r3, r9
 8007894:	106d      	asrs	r5, r5, #1
 8007896:	429d      	cmp	r5, r3
 8007898:	bf38      	it	cc
 800789a:	461d      	movcc	r5, r3
 800789c:	0553      	lsls	r3, r2, #21
 800789e:	d531      	bpl.n	8007904 <__ssputs_r+0xa0>
 80078a0:	4629      	mov	r1, r5
 80078a2:	f7ff ff6b 	bl	800777c <_malloc_r>
 80078a6:	4606      	mov	r6, r0
 80078a8:	b950      	cbnz	r0, 80078c0 <__ssputs_r+0x5c>
 80078aa:	230c      	movs	r3, #12
 80078ac:	f8ca 3000 	str.w	r3, [sl]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	f04f 30ff 	mov.w	r0, #4294967295
 80078bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c0:	6921      	ldr	r1, [r4, #16]
 80078c2:	464a      	mov	r2, r9
 80078c4:	f7ff fb46 	bl	8006f54 <memcpy>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	6126      	str	r6, [r4, #16]
 80078d6:	6165      	str	r5, [r4, #20]
 80078d8:	444e      	add	r6, r9
 80078da:	eba5 0509 	sub.w	r5, r5, r9
 80078de:	6026      	str	r6, [r4, #0]
 80078e0:	60a5      	str	r5, [r4, #8]
 80078e2:	463e      	mov	r6, r7
 80078e4:	42be      	cmp	r6, r7
 80078e6:	d900      	bls.n	80078ea <__ssputs_r+0x86>
 80078e8:	463e      	mov	r6, r7
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	4632      	mov	r2, r6
 80078ee:	4641      	mov	r1, r8
 80078f0:	f000 f966 	bl	8007bc0 <memmove>
 80078f4:	68a3      	ldr	r3, [r4, #8]
 80078f6:	1b9b      	subs	r3, r3, r6
 80078f8:	60a3      	str	r3, [r4, #8]
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	4433      	add	r3, r6
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	2000      	movs	r0, #0
 8007902:	e7db      	b.n	80078bc <__ssputs_r+0x58>
 8007904:	462a      	mov	r2, r5
 8007906:	f000 f981 	bl	8007c0c <_realloc_r>
 800790a:	4606      	mov	r6, r0
 800790c:	2800      	cmp	r0, #0
 800790e:	d1e1      	bne.n	80078d4 <__ssputs_r+0x70>
 8007910:	6921      	ldr	r1, [r4, #16]
 8007912:	4650      	mov	r0, sl
 8007914:	f7ff fec6 	bl	80076a4 <_free_r>
 8007918:	e7c7      	b.n	80078aa <__ssputs_r+0x46>
	...

0800791c <_svfiprintf_r>:
 800791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	4698      	mov	r8, r3
 8007922:	898b      	ldrh	r3, [r1, #12]
 8007924:	061b      	lsls	r3, r3, #24
 8007926:	b09d      	sub	sp, #116	; 0x74
 8007928:	4607      	mov	r7, r0
 800792a:	460d      	mov	r5, r1
 800792c:	4614      	mov	r4, r2
 800792e:	d50e      	bpl.n	800794e <_svfiprintf_r+0x32>
 8007930:	690b      	ldr	r3, [r1, #16]
 8007932:	b963      	cbnz	r3, 800794e <_svfiprintf_r+0x32>
 8007934:	2140      	movs	r1, #64	; 0x40
 8007936:	f7ff ff21 	bl	800777c <_malloc_r>
 800793a:	6028      	str	r0, [r5, #0]
 800793c:	6128      	str	r0, [r5, #16]
 800793e:	b920      	cbnz	r0, 800794a <_svfiprintf_r+0x2e>
 8007940:	230c      	movs	r3, #12
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	e0d1      	b.n	8007aee <_svfiprintf_r+0x1d2>
 800794a:	2340      	movs	r3, #64	; 0x40
 800794c:	616b      	str	r3, [r5, #20]
 800794e:	2300      	movs	r3, #0
 8007950:	9309      	str	r3, [sp, #36]	; 0x24
 8007952:	2320      	movs	r3, #32
 8007954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007958:	f8cd 800c 	str.w	r8, [sp, #12]
 800795c:	2330      	movs	r3, #48	; 0x30
 800795e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b08 <_svfiprintf_r+0x1ec>
 8007962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007966:	f04f 0901 	mov.w	r9, #1
 800796a:	4623      	mov	r3, r4
 800796c:	469a      	mov	sl, r3
 800796e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007972:	b10a      	cbz	r2, 8007978 <_svfiprintf_r+0x5c>
 8007974:	2a25      	cmp	r2, #37	; 0x25
 8007976:	d1f9      	bne.n	800796c <_svfiprintf_r+0x50>
 8007978:	ebba 0b04 	subs.w	fp, sl, r4
 800797c:	d00b      	beq.n	8007996 <_svfiprintf_r+0x7a>
 800797e:	465b      	mov	r3, fp
 8007980:	4622      	mov	r2, r4
 8007982:	4629      	mov	r1, r5
 8007984:	4638      	mov	r0, r7
 8007986:	f7ff ff6d 	bl	8007864 <__ssputs_r>
 800798a:	3001      	adds	r0, #1
 800798c:	f000 80aa 	beq.w	8007ae4 <_svfiprintf_r+0x1c8>
 8007990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007992:	445a      	add	r2, fp
 8007994:	9209      	str	r2, [sp, #36]	; 0x24
 8007996:	f89a 3000 	ldrb.w	r3, [sl]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 80a2 	beq.w	8007ae4 <_svfiprintf_r+0x1c8>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295
 80079a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079aa:	f10a 0a01 	add.w	sl, sl, #1
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	9307      	str	r3, [sp, #28]
 80079b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b6:	931a      	str	r3, [sp, #104]	; 0x68
 80079b8:	4654      	mov	r4, sl
 80079ba:	2205      	movs	r2, #5
 80079bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c0:	4851      	ldr	r0, [pc, #324]	; (8007b08 <_svfiprintf_r+0x1ec>)
 80079c2:	f7f8 fc2d 	bl	8000220 <memchr>
 80079c6:	9a04      	ldr	r2, [sp, #16]
 80079c8:	b9d8      	cbnz	r0, 8007a02 <_svfiprintf_r+0xe6>
 80079ca:	06d0      	lsls	r0, r2, #27
 80079cc:	bf44      	itt	mi
 80079ce:	2320      	movmi	r3, #32
 80079d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d4:	0711      	lsls	r1, r2, #28
 80079d6:	bf44      	itt	mi
 80079d8:	232b      	movmi	r3, #43	; 0x2b
 80079da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079de:	f89a 3000 	ldrb.w	r3, [sl]
 80079e2:	2b2a      	cmp	r3, #42	; 0x2a
 80079e4:	d015      	beq.n	8007a12 <_svfiprintf_r+0xf6>
 80079e6:	9a07      	ldr	r2, [sp, #28]
 80079e8:	4654      	mov	r4, sl
 80079ea:	2000      	movs	r0, #0
 80079ec:	f04f 0c0a 	mov.w	ip, #10
 80079f0:	4621      	mov	r1, r4
 80079f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f6:	3b30      	subs	r3, #48	; 0x30
 80079f8:	2b09      	cmp	r3, #9
 80079fa:	d94e      	bls.n	8007a9a <_svfiprintf_r+0x17e>
 80079fc:	b1b0      	cbz	r0, 8007a2c <_svfiprintf_r+0x110>
 80079fe:	9207      	str	r2, [sp, #28]
 8007a00:	e014      	b.n	8007a2c <_svfiprintf_r+0x110>
 8007a02:	eba0 0308 	sub.w	r3, r0, r8
 8007a06:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	46a2      	mov	sl, r4
 8007a10:	e7d2      	b.n	80079b8 <_svfiprintf_r+0x9c>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	1d19      	adds	r1, r3, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	9103      	str	r1, [sp, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfbb      	ittet	lt
 8007a1e:	425b      	neglt	r3, r3
 8007a20:	f042 0202 	orrlt.w	r2, r2, #2
 8007a24:	9307      	strge	r3, [sp, #28]
 8007a26:	9307      	strlt	r3, [sp, #28]
 8007a28:	bfb8      	it	lt
 8007a2a:	9204      	strlt	r2, [sp, #16]
 8007a2c:	7823      	ldrb	r3, [r4, #0]
 8007a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a30:	d10c      	bne.n	8007a4c <_svfiprintf_r+0x130>
 8007a32:	7863      	ldrb	r3, [r4, #1]
 8007a34:	2b2a      	cmp	r3, #42	; 0x2a
 8007a36:	d135      	bne.n	8007aa4 <_svfiprintf_r+0x188>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	9203      	str	r2, [sp, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bfb8      	it	lt
 8007a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a48:	3402      	adds	r4, #2
 8007a4a:	9305      	str	r3, [sp, #20]
 8007a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b18 <_svfiprintf_r+0x1fc>
 8007a50:	7821      	ldrb	r1, [r4, #0]
 8007a52:	2203      	movs	r2, #3
 8007a54:	4650      	mov	r0, sl
 8007a56:	f7f8 fbe3 	bl	8000220 <memchr>
 8007a5a:	b140      	cbz	r0, 8007a6e <_svfiprintf_r+0x152>
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	eba0 000a 	sub.w	r0, r0, sl
 8007a62:	fa03 f000 	lsl.w	r0, r3, r0
 8007a66:	9b04      	ldr	r3, [sp, #16]
 8007a68:	4303      	orrs	r3, r0
 8007a6a:	3401      	adds	r4, #1
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a72:	4826      	ldr	r0, [pc, #152]	; (8007b0c <_svfiprintf_r+0x1f0>)
 8007a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a78:	2206      	movs	r2, #6
 8007a7a:	f7f8 fbd1 	bl	8000220 <memchr>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d038      	beq.n	8007af4 <_svfiprintf_r+0x1d8>
 8007a82:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <_svfiprintf_r+0x1f4>)
 8007a84:	bb1b      	cbnz	r3, 8007ace <_svfiprintf_r+0x1b2>
 8007a86:	9b03      	ldr	r3, [sp, #12]
 8007a88:	3307      	adds	r3, #7
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	3308      	adds	r3, #8
 8007a90:	9303      	str	r3, [sp, #12]
 8007a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a94:	4433      	add	r3, r6
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
 8007a98:	e767      	b.n	800796a <_svfiprintf_r+0x4e>
 8007a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	e7a5      	b.n	80079f0 <_svfiprintf_r+0xd4>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	3401      	adds	r4, #1
 8007aa8:	9305      	str	r3, [sp, #20]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	f04f 0c0a 	mov.w	ip, #10
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab6:	3a30      	subs	r2, #48	; 0x30
 8007ab8:	2a09      	cmp	r2, #9
 8007aba:	d903      	bls.n	8007ac4 <_svfiprintf_r+0x1a8>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0c5      	beq.n	8007a4c <_svfiprintf_r+0x130>
 8007ac0:	9105      	str	r1, [sp, #20]
 8007ac2:	e7c3      	b.n	8007a4c <_svfiprintf_r+0x130>
 8007ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac8:	4604      	mov	r4, r0
 8007aca:	2301      	movs	r3, #1
 8007acc:	e7f0      	b.n	8007ab0 <_svfiprintf_r+0x194>
 8007ace:	ab03      	add	r3, sp, #12
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	462a      	mov	r2, r5
 8007ad4:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <_svfiprintf_r+0x1f8>)
 8007ad6:	a904      	add	r1, sp, #16
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7fd ffcb 	bl	8005a74 <_printf_float>
 8007ade:	1c42      	adds	r2, r0, #1
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	d1d6      	bne.n	8007a92 <_svfiprintf_r+0x176>
 8007ae4:	89ab      	ldrh	r3, [r5, #12]
 8007ae6:	065b      	lsls	r3, r3, #25
 8007ae8:	f53f af2c 	bmi.w	8007944 <_svfiprintf_r+0x28>
 8007aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aee:	b01d      	add	sp, #116	; 0x74
 8007af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	ab03      	add	r3, sp, #12
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	462a      	mov	r2, r5
 8007afa:	4b06      	ldr	r3, [pc, #24]	; (8007b14 <_svfiprintf_r+0x1f8>)
 8007afc:	a904      	add	r1, sp, #16
 8007afe:	4638      	mov	r0, r7
 8007b00:	f7fe fa5c 	bl	8005fbc <_printf_i>
 8007b04:	e7eb      	b.n	8007ade <_svfiprintf_r+0x1c2>
 8007b06:	bf00      	nop
 8007b08:	08008d14 	.word	0x08008d14
 8007b0c:	08008d1e 	.word	0x08008d1e
 8007b10:	08005a75 	.word	0x08005a75
 8007b14:	08007865 	.word	0x08007865
 8007b18:	08008d1a 	.word	0x08008d1a

08007b1c <_sbrk_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4d06      	ldr	r5, [pc, #24]	; (8007b38 <_sbrk_r+0x1c>)
 8007b20:	2300      	movs	r3, #0
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	f7fa fc42 	bl	80023b0 <_sbrk>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_sbrk_r+0x1a>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_sbrk_r+0x1a>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	20000510 	.word	0x20000510

08007b3c <__assert_func>:
 8007b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b3e:	4614      	mov	r4, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <__assert_func+0x2c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4605      	mov	r5, r0
 8007b48:	68d8      	ldr	r0, [r3, #12]
 8007b4a:	b14c      	cbz	r4, 8007b60 <__assert_func+0x24>
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <__assert_func+0x30>)
 8007b4e:	9100      	str	r1, [sp, #0]
 8007b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b54:	4906      	ldr	r1, [pc, #24]	; (8007b70 <__assert_func+0x34>)
 8007b56:	462b      	mov	r3, r5
 8007b58:	f000 f80e 	bl	8007b78 <fiprintf>
 8007b5c:	f000 faac 	bl	80080b8 <abort>
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <__assert_func+0x38>)
 8007b62:	461c      	mov	r4, r3
 8007b64:	e7f3      	b.n	8007b4e <__assert_func+0x12>
 8007b66:	bf00      	nop
 8007b68:	20000018 	.word	0x20000018
 8007b6c:	08008d25 	.word	0x08008d25
 8007b70:	08008d32 	.word	0x08008d32
 8007b74:	08008d60 	.word	0x08008d60

08007b78 <fiprintf>:
 8007b78:	b40e      	push	{r1, r2, r3}
 8007b7a:	b503      	push	{r0, r1, lr}
 8007b7c:	4601      	mov	r1, r0
 8007b7e:	ab03      	add	r3, sp, #12
 8007b80:	4805      	ldr	r0, [pc, #20]	; (8007b98 <fiprintf+0x20>)
 8007b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	f000 f897 	bl	8007cbc <_vfiprintf_r>
 8007b8e:	b002      	add	sp, #8
 8007b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b94:	b003      	add	sp, #12
 8007b96:	4770      	bx	lr
 8007b98:	20000018 	.word	0x20000018

08007b9c <__ascii_mbtowc>:
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	b901      	cbnz	r1, 8007ba2 <__ascii_mbtowc+0x6>
 8007ba0:	a901      	add	r1, sp, #4
 8007ba2:	b142      	cbz	r2, 8007bb6 <__ascii_mbtowc+0x1a>
 8007ba4:	b14b      	cbz	r3, 8007bba <__ascii_mbtowc+0x1e>
 8007ba6:	7813      	ldrb	r3, [r2, #0]
 8007ba8:	600b      	str	r3, [r1, #0]
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	1e10      	subs	r0, r2, #0
 8007bae:	bf18      	it	ne
 8007bb0:	2001      	movne	r0, #1
 8007bb2:	b002      	add	sp, #8
 8007bb4:	4770      	bx	lr
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	e7fb      	b.n	8007bb2 <__ascii_mbtowc+0x16>
 8007bba:	f06f 0001 	mvn.w	r0, #1
 8007bbe:	e7f8      	b.n	8007bb2 <__ascii_mbtowc+0x16>

08007bc0 <memmove>:
 8007bc0:	4288      	cmp	r0, r1
 8007bc2:	b510      	push	{r4, lr}
 8007bc4:	eb01 0402 	add.w	r4, r1, r2
 8007bc8:	d902      	bls.n	8007bd0 <memmove+0x10>
 8007bca:	4284      	cmp	r4, r0
 8007bcc:	4623      	mov	r3, r4
 8007bce:	d807      	bhi.n	8007be0 <memmove+0x20>
 8007bd0:	1e43      	subs	r3, r0, #1
 8007bd2:	42a1      	cmp	r1, r4
 8007bd4:	d008      	beq.n	8007be8 <memmove+0x28>
 8007bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bde:	e7f8      	b.n	8007bd2 <memmove+0x12>
 8007be0:	4402      	add	r2, r0
 8007be2:	4601      	mov	r1, r0
 8007be4:	428a      	cmp	r2, r1
 8007be6:	d100      	bne.n	8007bea <memmove+0x2a>
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf2:	e7f7      	b.n	8007be4 <memmove+0x24>

08007bf4 <__malloc_lock>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__malloc_lock+0x8>)
 8007bf6:	f000 bc1f 	b.w	8008438 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	20000514 	.word	0x20000514

08007c00 <__malloc_unlock>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__malloc_unlock+0x8>)
 8007c02:	f000 bc1a 	b.w	800843a <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	20000514 	.word	0x20000514

08007c0c <_realloc_r>:
 8007c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c10:	4680      	mov	r8, r0
 8007c12:	4614      	mov	r4, r2
 8007c14:	460e      	mov	r6, r1
 8007c16:	b921      	cbnz	r1, 8007c22 <_realloc_r+0x16>
 8007c18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	f7ff bdad 	b.w	800777c <_malloc_r>
 8007c22:	b92a      	cbnz	r2, 8007c30 <_realloc_r+0x24>
 8007c24:	f7ff fd3e 	bl	80076a4 <_free_r>
 8007c28:	4625      	mov	r5, r4
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	f000 fc6a 	bl	8008508 <_malloc_usable_size_r>
 8007c34:	4284      	cmp	r4, r0
 8007c36:	4607      	mov	r7, r0
 8007c38:	d802      	bhi.n	8007c40 <_realloc_r+0x34>
 8007c3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c3e:	d812      	bhi.n	8007c66 <_realloc_r+0x5a>
 8007c40:	4621      	mov	r1, r4
 8007c42:	4640      	mov	r0, r8
 8007c44:	f7ff fd9a 	bl	800777c <_malloc_r>
 8007c48:	4605      	mov	r5, r0
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d0ed      	beq.n	8007c2a <_realloc_r+0x1e>
 8007c4e:	42bc      	cmp	r4, r7
 8007c50:	4622      	mov	r2, r4
 8007c52:	4631      	mov	r1, r6
 8007c54:	bf28      	it	cs
 8007c56:	463a      	movcs	r2, r7
 8007c58:	f7ff f97c 	bl	8006f54 <memcpy>
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff fd20 	bl	80076a4 <_free_r>
 8007c64:	e7e1      	b.n	8007c2a <_realloc_r+0x1e>
 8007c66:	4635      	mov	r5, r6
 8007c68:	e7df      	b.n	8007c2a <_realloc_r+0x1e>

08007c6a <__sfputc_r>:
 8007c6a:	6893      	ldr	r3, [r2, #8]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	b410      	push	{r4}
 8007c72:	6093      	str	r3, [r2, #8]
 8007c74:	da08      	bge.n	8007c88 <__sfputc_r+0x1e>
 8007c76:	6994      	ldr	r4, [r2, #24]
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	db01      	blt.n	8007c80 <__sfputc_r+0x16>
 8007c7c:	290a      	cmp	r1, #10
 8007c7e:	d103      	bne.n	8007c88 <__sfputc_r+0x1e>
 8007c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c84:	f000 b94a 	b.w	8007f1c <__swbuf_r>
 8007c88:	6813      	ldr	r3, [r2, #0]
 8007c8a:	1c58      	adds	r0, r3, #1
 8007c8c:	6010      	str	r0, [r2, #0]
 8007c8e:	7019      	strb	r1, [r3, #0]
 8007c90:	4608      	mov	r0, r1
 8007c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <__sfputs_r>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	18d5      	adds	r5, r2, r3
 8007ca2:	42ac      	cmp	r4, r5
 8007ca4:	d101      	bne.n	8007caa <__sfputs_r+0x12>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e007      	b.n	8007cba <__sfputs_r+0x22>
 8007caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cae:	463a      	mov	r2, r7
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff ffda 	bl	8007c6a <__sfputc_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d1f3      	bne.n	8007ca2 <__sfputs_r+0xa>
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cbc <_vfiprintf_r>:
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	b09d      	sub	sp, #116	; 0x74
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	4698      	mov	r8, r3
 8007cc8:	4606      	mov	r6, r0
 8007cca:	b118      	cbz	r0, 8007cd4 <_vfiprintf_r+0x18>
 8007ccc:	6983      	ldr	r3, [r0, #24]
 8007cce:	b90b      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x18>
 8007cd0:	f000 fb14 	bl	80082fc <__sinit>
 8007cd4:	4b89      	ldr	r3, [pc, #548]	; (8007efc <_vfiprintf_r+0x240>)
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	d11b      	bne.n	8007d12 <_vfiprintf_r+0x56>
 8007cda:	6875      	ldr	r5, [r6, #4]
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f000 fba5 	bl	8008438 <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x3c>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b9eb      	cbnz	r3, 8007d34 <_vfiprintf_r+0x78>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f96e 	bl	8007fdc <__swsetup_r>
 8007d00:	b1c0      	cbz	r0, 8007d34 <_vfiprintf_r+0x78>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d50e      	bpl.n	8007d26 <_vfiprintf_r+0x6a>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	b01d      	add	sp, #116	; 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <_vfiprintf_r+0x244>)
 8007d14:	429d      	cmp	r5, r3
 8007d16:	d101      	bne.n	8007d1c <_vfiprintf_r+0x60>
 8007d18:	68b5      	ldr	r5, [r6, #8]
 8007d1a:	e7df      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d1c:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <_vfiprintf_r+0x248>)
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	bf08      	it	eq
 8007d22:	68f5      	ldreq	r5, [r6, #12]
 8007d24:	e7da      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d4ed      	bmi.n	8007d08 <_vfiprintf_r+0x4c>
 8007d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2e:	f000 fb84 	bl	800843a <__retarget_lock_release_recursive>
 8007d32:	e7e9      	b.n	8007d08 <_vfiprintf_r+0x4c>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9309      	str	r3, [sp, #36]	; 0x24
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d42:	2330      	movs	r3, #48	; 0x30
 8007d44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f08 <_vfiprintf_r+0x24c>
 8007d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d4c:	f04f 0901 	mov.w	r9, #1
 8007d50:	4623      	mov	r3, r4
 8007d52:	469a      	mov	sl, r3
 8007d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d58:	b10a      	cbz	r2, 8007d5e <_vfiprintf_r+0xa2>
 8007d5a:	2a25      	cmp	r2, #37	; 0x25
 8007d5c:	d1f9      	bne.n	8007d52 <_vfiprintf_r+0x96>
 8007d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d62:	d00b      	beq.n	8007d7c <_vfiprintf_r+0xc0>
 8007d64:	465b      	mov	r3, fp
 8007d66:	4622      	mov	r2, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff94 	bl	8007c98 <__sfputs_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	f000 80aa 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d78:	445a      	add	r2, fp
 8007d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80a2 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d90:	f10a 0a01 	add.w	sl, sl, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2205      	movs	r2, #5
 8007da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da6:	4858      	ldr	r0, [pc, #352]	; (8007f08 <_vfiprintf_r+0x24c>)
 8007da8:	f7f8 fa3a 	bl	8000220 <memchr>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	b9d8      	cbnz	r0, 8007de8 <_vfiprintf_r+0x12c>
 8007db0:	06d1      	lsls	r1, r2, #27
 8007db2:	bf44      	itt	mi
 8007db4:	2320      	movmi	r3, #32
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	0713      	lsls	r3, r2, #28
 8007dbc:	bf44      	itt	mi
 8007dbe:	232b      	movmi	r3, #43	; 0x2b
 8007dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dca:	d015      	beq.n	8007df8 <_vfiprintf_r+0x13c>
 8007dcc:	9a07      	ldr	r2, [sp, #28]
 8007dce:	4654      	mov	r4, sl
 8007dd0:	2000      	movs	r0, #0
 8007dd2:	f04f 0c0a 	mov.w	ip, #10
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ddc:	3b30      	subs	r3, #48	; 0x30
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d94e      	bls.n	8007e80 <_vfiprintf_r+0x1c4>
 8007de2:	b1b0      	cbz	r0, 8007e12 <_vfiprintf_r+0x156>
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	e014      	b.n	8007e12 <_vfiprintf_r+0x156>
 8007de8:	eba0 0308 	sub.w	r3, r0, r8
 8007dec:	fa09 f303 	lsl.w	r3, r9, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	46a2      	mov	sl, r4
 8007df6:	e7d2      	b.n	8007d9e <_vfiprintf_r+0xe2>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	1d19      	adds	r1, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	9103      	str	r1, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbb      	ittet	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	f042 0202 	orrlt.w	r2, r2, #2
 8007e0a:	9307      	strge	r3, [sp, #28]
 8007e0c:	9307      	strlt	r3, [sp, #28]
 8007e0e:	bfb8      	it	lt
 8007e10:	9204      	strlt	r2, [sp, #16]
 8007e12:	7823      	ldrb	r3, [r4, #0]
 8007e14:	2b2e      	cmp	r3, #46	; 0x2e
 8007e16:	d10c      	bne.n	8007e32 <_vfiprintf_r+0x176>
 8007e18:	7863      	ldrb	r3, [r4, #1]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d135      	bne.n	8007e8a <_vfiprintf_r+0x1ce>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	9203      	str	r2, [sp, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e2e:	3402      	adds	r4, #2
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f18 <_vfiprintf_r+0x25c>
 8007e36:	7821      	ldrb	r1, [r4, #0]
 8007e38:	2203      	movs	r2, #3
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7f8 f9f0 	bl	8000220 <memchr>
 8007e40:	b140      	cbz	r0, 8007e54 <_vfiprintf_r+0x198>
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	eba0 000a 	sub.w	r0, r0, sl
 8007e48:	fa03 f000 	lsl.w	r0, r3, r0
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	4303      	orrs	r3, r0
 8007e50:	3401      	adds	r4, #1
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	482c      	ldr	r0, [pc, #176]	; (8007f0c <_vfiprintf_r+0x250>)
 8007e5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e5e:	2206      	movs	r2, #6
 8007e60:	f7f8 f9de 	bl	8000220 <memchr>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d03f      	beq.n	8007ee8 <_vfiprintf_r+0x22c>
 8007e68:	4b29      	ldr	r3, [pc, #164]	; (8007f10 <_vfiprintf_r+0x254>)
 8007e6a:	bb1b      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x1f8>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	3307      	adds	r3, #7
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	443b      	add	r3, r7
 8007e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7e:	e767      	b.n	8007d50 <_vfiprintf_r+0x94>
 8007e80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e84:	460c      	mov	r4, r1
 8007e86:	2001      	movs	r0, #1
 8007e88:	e7a5      	b.n	8007dd6 <_vfiprintf_r+0x11a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	3401      	adds	r4, #1
 8007e8e:	9305      	str	r3, [sp, #20]
 8007e90:	4619      	mov	r1, r3
 8007e92:	f04f 0c0a 	mov.w	ip, #10
 8007e96:	4620      	mov	r0, r4
 8007e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e9c:	3a30      	subs	r2, #48	; 0x30
 8007e9e:	2a09      	cmp	r2, #9
 8007ea0:	d903      	bls.n	8007eaa <_vfiprintf_r+0x1ee>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0c5      	beq.n	8007e32 <_vfiprintf_r+0x176>
 8007ea6:	9105      	str	r1, [sp, #20]
 8007ea8:	e7c3      	b.n	8007e32 <_vfiprintf_r+0x176>
 8007eaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eae:	4604      	mov	r4, r0
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e7f0      	b.n	8007e96 <_vfiprintf_r+0x1da>
 8007eb4:	ab03      	add	r3, sp, #12
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <_vfiprintf_r+0x258>)
 8007ebc:	a904      	add	r1, sp, #16
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7fd fdd8 	bl	8005a74 <_printf_float>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	1c78      	adds	r0, r7, #1
 8007ec8:	d1d6      	bne.n	8007e78 <_vfiprintf_r+0x1bc>
 8007eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ecc:	07d9      	lsls	r1, r3, #31
 8007ece:	d405      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed0:	89ab      	ldrh	r3, [r5, #12]
 8007ed2:	059a      	lsls	r2, r3, #22
 8007ed4:	d402      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed8:	f000 faaf 	bl	800843a <__retarget_lock_release_recursive>
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	065b      	lsls	r3, r3, #25
 8007ee0:	f53f af12 	bmi.w	8007d08 <_vfiprintf_r+0x4c>
 8007ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee6:	e711      	b.n	8007d0c <_vfiprintf_r+0x50>
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <_vfiprintf_r+0x258>)
 8007ef0:	a904      	add	r1, sp, #16
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7fe f862 	bl	8005fbc <_printf_i>
 8007ef8:	e7e4      	b.n	8007ec4 <_vfiprintf_r+0x208>
 8007efa:	bf00      	nop
 8007efc:	08008e8c 	.word	0x08008e8c
 8007f00:	08008eac 	.word	0x08008eac
 8007f04:	08008e6c 	.word	0x08008e6c
 8007f08:	08008d14 	.word	0x08008d14
 8007f0c:	08008d1e 	.word	0x08008d1e
 8007f10:	08005a75 	.word	0x08005a75
 8007f14:	08007c99 	.word	0x08007c99
 8007f18:	08008d1a 	.word	0x08008d1a

08007f1c <__swbuf_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	4605      	mov	r5, r0
 8007f24:	b118      	cbz	r0, 8007f2e <__swbuf_r+0x12>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	b90b      	cbnz	r3, 8007f2e <__swbuf_r+0x12>
 8007f2a:	f000 f9e7 	bl	80082fc <__sinit>
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <__swbuf_r+0x98>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d12b      	bne.n	8007f8c <__swbuf_r+0x70>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	69a3      	ldr	r3, [r4, #24]
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	071a      	lsls	r2, r3, #28
 8007f3e:	d52f      	bpl.n	8007fa0 <__swbuf_r+0x84>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	b36b      	cbz	r3, 8007fa0 <__swbuf_r+0x84>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	1ac0      	subs	r0, r0, r3
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	b2f6      	uxtb	r6, r6
 8007f4e:	4283      	cmp	r3, r0
 8007f50:	4637      	mov	r7, r6
 8007f52:	dc04      	bgt.n	8007f5e <__swbuf_r+0x42>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f93c 	bl	80081d4 <_fflush_r>
 8007f5c:	bb30      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	701e      	strb	r6, [r3, #0]
 8007f6c:	6963      	ldr	r3, [r4, #20]
 8007f6e:	3001      	adds	r0, #1
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d004      	beq.n	8007f7e <__swbuf_r+0x62>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d506      	bpl.n	8007f88 <__swbuf_r+0x6c>
 8007f7a:	2e0a      	cmp	r6, #10
 8007f7c:	d104      	bne.n	8007f88 <__swbuf_r+0x6c>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f927 	bl	80081d4 <_fflush_r>
 8007f86:	b988      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <__swbuf_r+0x9c>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swbuf_r+0x7a>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7cf      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__swbuf_r+0xa0>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7ca      	b.n	8007f36 <__swbuf_r+0x1a>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f81a 	bl	8007fdc <__swsetup_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0cb      	beq.n	8007f44 <__swbuf_r+0x28>
 8007fac:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb0:	e7ea      	b.n	8007f88 <__swbuf_r+0x6c>
 8007fb2:	bf00      	nop
 8007fb4:	08008e8c 	.word	0x08008e8c
 8007fb8:	08008eac 	.word	0x08008eac
 8007fbc:	08008e6c 	.word	0x08008e6c

08007fc0 <__ascii_wctomb>:
 8007fc0:	b149      	cbz	r1, 8007fd6 <__ascii_wctomb+0x16>
 8007fc2:	2aff      	cmp	r2, #255	; 0xff
 8007fc4:	bf85      	ittet	hi
 8007fc6:	238a      	movhi	r3, #138	; 0x8a
 8007fc8:	6003      	strhi	r3, [r0, #0]
 8007fca:	700a      	strbls	r2, [r1, #0]
 8007fcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fd0:	bf98      	it	ls
 8007fd2:	2001      	movls	r0, #1
 8007fd4:	4770      	bx	lr
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4770      	bx	lr
	...

08007fdc <__swsetup_r>:
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <__swsetup_r+0xcc>)
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b125      	cbz	r5, 8007ff2 <__swsetup_r+0x16>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__swsetup_r+0x16>
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 f985 	bl	80082fc <__sinit>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__swsetup_r+0xd0>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d10f      	bne.n	8008018 <__swsetup_r+0x3c>
 8007ff8:	686c      	ldr	r4, [r5, #4]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	d42c      	bmi.n	800805e <__swsetup_r+0x82>
 8008004:	06dd      	lsls	r5, r3, #27
 8008006:	d411      	bmi.n	800802c <__swsetup_r+0x50>
 8008008:	2309      	movs	r3, #9
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295
 8008016:	e03e      	b.n	8008096 <__swsetup_r+0xba>
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <__swsetup_r+0xd4>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swsetup_r+0x46>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7eb      	b.n	8007ffa <__swsetup_r+0x1e>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__swsetup_r+0xd8>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7e6      	b.n	8007ffa <__swsetup_r+0x1e>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x7a>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x6a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x66>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fb31 	bl	80076a4 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x9a>
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f000 fa09 	bl	8008488 <__smakebuf_r>
 8008076:	89a0      	ldrh	r0, [r4, #12]
 8008078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807c:	f010 0301 	ands.w	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <__swsetup_r+0xbc>
 8008082:	2300      	movs	r3, #0
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	425b      	negs	r3, r3
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b943      	cbnz	r3, 80080a2 <__swsetup_r+0xc6>
 8008090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008094:	d1ba      	bne.n	800800c <__swsetup_r+0x30>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	0781      	lsls	r1, r0, #30
 800809a:	bf58      	it	pl
 800809c:	6963      	ldrpl	r3, [r4, #20]
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7f4      	b.n	800808c <__swsetup_r+0xb0>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e7f7      	b.n	8008096 <__swsetup_r+0xba>
 80080a6:	bf00      	nop
 80080a8:	20000018 	.word	0x20000018
 80080ac:	08008e8c 	.word	0x08008e8c
 80080b0:	08008eac 	.word	0x08008eac
 80080b4:	08008e6c 	.word	0x08008e6c

080080b8 <abort>:
 80080b8:	b508      	push	{r3, lr}
 80080ba:	2006      	movs	r0, #6
 80080bc:	f000 fa54 	bl	8008568 <raise>
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7fa f8fd 	bl	80022c0 <_exit>
	...

080080c8 <__sflush_r>:
 80080c8:	898a      	ldrh	r2, [r1, #12]
 80080ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	4605      	mov	r5, r0
 80080d0:	0710      	lsls	r0, r2, #28
 80080d2:	460c      	mov	r4, r1
 80080d4:	d458      	bmi.n	8008188 <__sflush_r+0xc0>
 80080d6:	684b      	ldr	r3, [r1, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc05      	bgt.n	80080e8 <__sflush_r+0x20>
 80080dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dc02      	bgt.n	80080e8 <__sflush_r+0x20>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ea:	2e00      	cmp	r6, #0
 80080ec:	d0f9      	beq.n	80080e2 <__sflush_r+0x1a>
 80080ee:	2300      	movs	r3, #0
 80080f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080f4:	682f      	ldr	r7, [r5, #0]
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	d032      	beq.n	8008160 <__sflush_r+0x98>
 80080fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080fc:	89a3      	ldrh	r3, [r4, #12]
 80080fe:	075a      	lsls	r2, r3, #29
 8008100:	d505      	bpl.n	800810e <__sflush_r+0x46>
 8008102:	6863      	ldr	r3, [r4, #4]
 8008104:	1ac0      	subs	r0, r0, r3
 8008106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008108:	b10b      	cbz	r3, 800810e <__sflush_r+0x46>
 800810a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800810c:	1ac0      	subs	r0, r0, r3
 800810e:	2300      	movs	r3, #0
 8008110:	4602      	mov	r2, r0
 8008112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008114:	6a21      	ldr	r1, [r4, #32]
 8008116:	4628      	mov	r0, r5
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	d106      	bne.n	800812e <__sflush_r+0x66>
 8008120:	6829      	ldr	r1, [r5, #0]
 8008122:	291d      	cmp	r1, #29
 8008124:	d82c      	bhi.n	8008180 <__sflush_r+0xb8>
 8008126:	4a2a      	ldr	r2, [pc, #168]	; (80081d0 <__sflush_r+0x108>)
 8008128:	40ca      	lsrs	r2, r1
 800812a:	07d6      	lsls	r6, r2, #31
 800812c:	d528      	bpl.n	8008180 <__sflush_r+0xb8>
 800812e:	2200      	movs	r2, #0
 8008130:	6062      	str	r2, [r4, #4]
 8008132:	04d9      	lsls	r1, r3, #19
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	6022      	str	r2, [r4, #0]
 8008138:	d504      	bpl.n	8008144 <__sflush_r+0x7c>
 800813a:	1c42      	adds	r2, r0, #1
 800813c:	d101      	bne.n	8008142 <__sflush_r+0x7a>
 800813e:	682b      	ldr	r3, [r5, #0]
 8008140:	b903      	cbnz	r3, 8008144 <__sflush_r+0x7c>
 8008142:	6560      	str	r0, [r4, #84]	; 0x54
 8008144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008146:	602f      	str	r7, [r5, #0]
 8008148:	2900      	cmp	r1, #0
 800814a:	d0ca      	beq.n	80080e2 <__sflush_r+0x1a>
 800814c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008150:	4299      	cmp	r1, r3
 8008152:	d002      	beq.n	800815a <__sflush_r+0x92>
 8008154:	4628      	mov	r0, r5
 8008156:	f7ff faa5 	bl	80076a4 <_free_r>
 800815a:	2000      	movs	r0, #0
 800815c:	6360      	str	r0, [r4, #52]	; 0x34
 800815e:	e7c1      	b.n	80080e4 <__sflush_r+0x1c>
 8008160:	6a21      	ldr	r1, [r4, #32]
 8008162:	2301      	movs	r3, #1
 8008164:	4628      	mov	r0, r5
 8008166:	47b0      	blx	r6
 8008168:	1c41      	adds	r1, r0, #1
 800816a:	d1c7      	bne.n	80080fc <__sflush_r+0x34>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0c4      	beq.n	80080fc <__sflush_r+0x34>
 8008172:	2b1d      	cmp	r3, #29
 8008174:	d001      	beq.n	800817a <__sflush_r+0xb2>
 8008176:	2b16      	cmp	r3, #22
 8008178:	d101      	bne.n	800817e <__sflush_r+0xb6>
 800817a:	602f      	str	r7, [r5, #0]
 800817c:	e7b1      	b.n	80080e2 <__sflush_r+0x1a>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	e7ad      	b.n	80080e4 <__sflush_r+0x1c>
 8008188:	690f      	ldr	r7, [r1, #16]
 800818a:	2f00      	cmp	r7, #0
 800818c:	d0a9      	beq.n	80080e2 <__sflush_r+0x1a>
 800818e:	0793      	lsls	r3, r2, #30
 8008190:	680e      	ldr	r6, [r1, #0]
 8008192:	bf08      	it	eq
 8008194:	694b      	ldreq	r3, [r1, #20]
 8008196:	600f      	str	r7, [r1, #0]
 8008198:	bf18      	it	ne
 800819a:	2300      	movne	r3, #0
 800819c:	eba6 0807 	sub.w	r8, r6, r7
 80081a0:	608b      	str	r3, [r1, #8]
 80081a2:	f1b8 0f00 	cmp.w	r8, #0
 80081a6:	dd9c      	ble.n	80080e2 <__sflush_r+0x1a>
 80081a8:	6a21      	ldr	r1, [r4, #32]
 80081aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081ac:	4643      	mov	r3, r8
 80081ae:	463a      	mov	r2, r7
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b0      	blx	r6
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dc06      	bgt.n	80081c6 <__sflush_r+0xfe>
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081be:	81a3      	strh	r3, [r4, #12]
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	e78e      	b.n	80080e4 <__sflush_r+0x1c>
 80081c6:	4407      	add	r7, r0
 80081c8:	eba8 0800 	sub.w	r8, r8, r0
 80081cc:	e7e9      	b.n	80081a2 <__sflush_r+0xda>
 80081ce:	bf00      	nop
 80081d0:	20400001 	.word	0x20400001

080081d4 <_fflush_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	690b      	ldr	r3, [r1, #16]
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b913      	cbnz	r3, 80081e4 <_fflush_r+0x10>
 80081de:	2500      	movs	r5, #0
 80081e0:	4628      	mov	r0, r5
 80081e2:	bd38      	pop	{r3, r4, r5, pc}
 80081e4:	b118      	cbz	r0, 80081ee <_fflush_r+0x1a>
 80081e6:	6983      	ldr	r3, [r0, #24]
 80081e8:	b90b      	cbnz	r3, 80081ee <_fflush_r+0x1a>
 80081ea:	f000 f887 	bl	80082fc <__sinit>
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <_fflush_r+0x6c>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	d11b      	bne.n	800822c <_fflush_r+0x58>
 80081f4:	686c      	ldr	r4, [r5, #4]
 80081f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <_fflush_r+0xa>
 80081fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008200:	07d0      	lsls	r0, r2, #31
 8008202:	d404      	bmi.n	800820e <_fflush_r+0x3a>
 8008204:	0599      	lsls	r1, r3, #22
 8008206:	d402      	bmi.n	800820e <_fflush_r+0x3a>
 8008208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820a:	f000 f915 	bl	8008438 <__retarget_lock_acquire_recursive>
 800820e:	4628      	mov	r0, r5
 8008210:	4621      	mov	r1, r4
 8008212:	f7ff ff59 	bl	80080c8 <__sflush_r>
 8008216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008218:	07da      	lsls	r2, r3, #31
 800821a:	4605      	mov	r5, r0
 800821c:	d4e0      	bmi.n	80081e0 <_fflush_r+0xc>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	059b      	lsls	r3, r3, #22
 8008222:	d4dd      	bmi.n	80081e0 <_fflush_r+0xc>
 8008224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008226:	f000 f908 	bl	800843a <__retarget_lock_release_recursive>
 800822a:	e7d9      	b.n	80081e0 <_fflush_r+0xc>
 800822c:	4b05      	ldr	r3, [pc, #20]	; (8008244 <_fflush_r+0x70>)
 800822e:	429c      	cmp	r4, r3
 8008230:	d101      	bne.n	8008236 <_fflush_r+0x62>
 8008232:	68ac      	ldr	r4, [r5, #8]
 8008234:	e7df      	b.n	80081f6 <_fflush_r+0x22>
 8008236:	4b04      	ldr	r3, [pc, #16]	; (8008248 <_fflush_r+0x74>)
 8008238:	429c      	cmp	r4, r3
 800823a:	bf08      	it	eq
 800823c:	68ec      	ldreq	r4, [r5, #12]
 800823e:	e7da      	b.n	80081f6 <_fflush_r+0x22>
 8008240:	08008e8c 	.word	0x08008e8c
 8008244:	08008eac 	.word	0x08008eac
 8008248:	08008e6c 	.word	0x08008e6c

0800824c <std>:
 800824c:	2300      	movs	r3, #0
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	e9c0 3300 	strd	r3, r3, [r0]
 8008256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800825a:	6083      	str	r3, [r0, #8]
 800825c:	8181      	strh	r1, [r0, #12]
 800825e:	6643      	str	r3, [r0, #100]	; 0x64
 8008260:	81c2      	strh	r2, [r0, #14]
 8008262:	6183      	str	r3, [r0, #24]
 8008264:	4619      	mov	r1, r3
 8008266:	2208      	movs	r2, #8
 8008268:	305c      	adds	r0, #92	; 0x5c
 800826a:	f7fd fb5b 	bl	8005924 <memset>
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x38>)
 8008270:	6263      	str	r3, [r4, #36]	; 0x24
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x3c>)
 8008274:	62a3      	str	r3, [r4, #40]	; 0x28
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <std+0x40>)
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800827a:	4b05      	ldr	r3, [pc, #20]	; (8008290 <std+0x44>)
 800827c:	6224      	str	r4, [r4, #32]
 800827e:	6323      	str	r3, [r4, #48]	; 0x30
 8008280:	bd10      	pop	{r4, pc}
 8008282:	bf00      	nop
 8008284:	080085a1 	.word	0x080085a1
 8008288:	080085c3 	.word	0x080085c3
 800828c:	080085fb 	.word	0x080085fb
 8008290:	0800861f 	.word	0x0800861f

08008294 <_cleanup_r>:
 8008294:	4901      	ldr	r1, [pc, #4]	; (800829c <_cleanup_r+0x8>)
 8008296:	f000 b8af 	b.w	80083f8 <_fwalk_reent>
 800829a:	bf00      	nop
 800829c:	080081d5 	.word	0x080081d5

080082a0 <__sfmoreglue>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	2268      	movs	r2, #104	; 0x68
 80082a4:	1e4d      	subs	r5, r1, #1
 80082a6:	4355      	muls	r5, r2
 80082a8:	460e      	mov	r6, r1
 80082aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ae:	f7ff fa65 	bl	800777c <_malloc_r>
 80082b2:	4604      	mov	r4, r0
 80082b4:	b140      	cbz	r0, 80082c8 <__sfmoreglue+0x28>
 80082b6:	2100      	movs	r1, #0
 80082b8:	e9c0 1600 	strd	r1, r6, [r0]
 80082bc:	300c      	adds	r0, #12
 80082be:	60a0      	str	r0, [r4, #8]
 80082c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082c4:	f7fd fb2e 	bl	8005924 <memset>
 80082c8:	4620      	mov	r0, r4
 80082ca:	bd70      	pop	{r4, r5, r6, pc}

080082cc <__sfp_lock_acquire>:
 80082cc:	4801      	ldr	r0, [pc, #4]	; (80082d4 <__sfp_lock_acquire+0x8>)
 80082ce:	f000 b8b3 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082d2:	bf00      	nop
 80082d4:	20000515 	.word	0x20000515

080082d8 <__sfp_lock_release>:
 80082d8:	4801      	ldr	r0, [pc, #4]	; (80082e0 <__sfp_lock_release+0x8>)
 80082da:	f000 b8ae 	b.w	800843a <__retarget_lock_release_recursive>
 80082de:	bf00      	nop
 80082e0:	20000515 	.word	0x20000515

080082e4 <__sinit_lock_acquire>:
 80082e4:	4801      	ldr	r0, [pc, #4]	; (80082ec <__sinit_lock_acquire+0x8>)
 80082e6:	f000 b8a7 	b.w	8008438 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	20000516 	.word	0x20000516

080082f0 <__sinit_lock_release>:
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <__sinit_lock_release+0x8>)
 80082f2:	f000 b8a2 	b.w	800843a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	20000516 	.word	0x20000516

080082fc <__sinit>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	f7ff fff0 	bl	80082e4 <__sinit_lock_acquire>
 8008304:	69a3      	ldr	r3, [r4, #24]
 8008306:	b11b      	cbz	r3, 8008310 <__sinit+0x14>
 8008308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830c:	f7ff bff0 	b.w	80082f0 <__sinit_lock_release>
 8008310:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008314:	6523      	str	r3, [r4, #80]	; 0x50
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <__sinit+0x68>)
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <__sinit+0x6c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	62a2      	str	r2, [r4, #40]	; 0x28
 800831e:	42a3      	cmp	r3, r4
 8008320:	bf04      	itt	eq
 8008322:	2301      	moveq	r3, #1
 8008324:	61a3      	streq	r3, [r4, #24]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f820 	bl	800836c <__sfp>
 800832c:	6060      	str	r0, [r4, #4]
 800832e:	4620      	mov	r0, r4
 8008330:	f000 f81c 	bl	800836c <__sfp>
 8008334:	60a0      	str	r0, [r4, #8]
 8008336:	4620      	mov	r0, r4
 8008338:	f000 f818 	bl	800836c <__sfp>
 800833c:	2200      	movs	r2, #0
 800833e:	60e0      	str	r0, [r4, #12]
 8008340:	2104      	movs	r1, #4
 8008342:	6860      	ldr	r0, [r4, #4]
 8008344:	f7ff ff82 	bl	800824c <std>
 8008348:	68a0      	ldr	r0, [r4, #8]
 800834a:	2201      	movs	r2, #1
 800834c:	2109      	movs	r1, #9
 800834e:	f7ff ff7d 	bl	800824c <std>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	2202      	movs	r2, #2
 8008356:	2112      	movs	r1, #18
 8008358:	f7ff ff78 	bl	800824c <std>
 800835c:	2301      	movs	r3, #1
 800835e:	61a3      	str	r3, [r4, #24]
 8008360:	e7d2      	b.n	8008308 <__sinit+0xc>
 8008362:	bf00      	nop
 8008364:	08008af0 	.word	0x08008af0
 8008368:	08008295 	.word	0x08008295

0800836c <__sfp>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	4607      	mov	r7, r0
 8008370:	f7ff ffac 	bl	80082cc <__sfp_lock_acquire>
 8008374:	4b1e      	ldr	r3, [pc, #120]	; (80083f0 <__sfp+0x84>)
 8008376:	681e      	ldr	r6, [r3, #0]
 8008378:	69b3      	ldr	r3, [r6, #24]
 800837a:	b913      	cbnz	r3, 8008382 <__sfp+0x16>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff ffbd 	bl	80082fc <__sinit>
 8008382:	3648      	adds	r6, #72	; 0x48
 8008384:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008388:	3b01      	subs	r3, #1
 800838a:	d503      	bpl.n	8008394 <__sfp+0x28>
 800838c:	6833      	ldr	r3, [r6, #0]
 800838e:	b30b      	cbz	r3, 80083d4 <__sfp+0x68>
 8008390:	6836      	ldr	r6, [r6, #0]
 8008392:	e7f7      	b.n	8008384 <__sfp+0x18>
 8008394:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008398:	b9d5      	cbnz	r5, 80083d0 <__sfp+0x64>
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <__sfp+0x88>)
 800839c:	60e3      	str	r3, [r4, #12]
 800839e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083a2:	6665      	str	r5, [r4, #100]	; 0x64
 80083a4:	f000 f847 	bl	8008436 <__retarget_lock_init_recursive>
 80083a8:	f7ff ff96 	bl	80082d8 <__sfp_lock_release>
 80083ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083b4:	6025      	str	r5, [r4, #0]
 80083b6:	61a5      	str	r5, [r4, #24]
 80083b8:	2208      	movs	r2, #8
 80083ba:	4629      	mov	r1, r5
 80083bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083c0:	f7fd fab0 	bl	8005924 <memset>
 80083c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083cc:	4620      	mov	r0, r4
 80083ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d0:	3468      	adds	r4, #104	; 0x68
 80083d2:	e7d9      	b.n	8008388 <__sfp+0x1c>
 80083d4:	2104      	movs	r1, #4
 80083d6:	4638      	mov	r0, r7
 80083d8:	f7ff ff62 	bl	80082a0 <__sfmoreglue>
 80083dc:	4604      	mov	r4, r0
 80083de:	6030      	str	r0, [r6, #0]
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1d5      	bne.n	8008390 <__sfp+0x24>
 80083e4:	f7ff ff78 	bl	80082d8 <__sfp_lock_release>
 80083e8:	230c      	movs	r3, #12
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	e7ee      	b.n	80083cc <__sfp+0x60>
 80083ee:	bf00      	nop
 80083f0:	08008af0 	.word	0x08008af0
 80083f4:	ffff0001 	.word	0xffff0001

080083f8 <_fwalk_reent>:
 80083f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083fc:	4606      	mov	r6, r0
 80083fe:	4688      	mov	r8, r1
 8008400:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008404:	2700      	movs	r7, #0
 8008406:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800840a:	f1b9 0901 	subs.w	r9, r9, #1
 800840e:	d505      	bpl.n	800841c <_fwalk_reent+0x24>
 8008410:	6824      	ldr	r4, [r4, #0]
 8008412:	2c00      	cmp	r4, #0
 8008414:	d1f7      	bne.n	8008406 <_fwalk_reent+0xe>
 8008416:	4638      	mov	r0, r7
 8008418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841c:	89ab      	ldrh	r3, [r5, #12]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d907      	bls.n	8008432 <_fwalk_reent+0x3a>
 8008422:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008426:	3301      	adds	r3, #1
 8008428:	d003      	beq.n	8008432 <_fwalk_reent+0x3a>
 800842a:	4629      	mov	r1, r5
 800842c:	4630      	mov	r0, r6
 800842e:	47c0      	blx	r8
 8008430:	4307      	orrs	r7, r0
 8008432:	3568      	adds	r5, #104	; 0x68
 8008434:	e7e9      	b.n	800840a <_fwalk_reent+0x12>

08008436 <__retarget_lock_init_recursive>:
 8008436:	4770      	bx	lr

08008438 <__retarget_lock_acquire_recursive>:
 8008438:	4770      	bx	lr

0800843a <__retarget_lock_release_recursive>:
 800843a:	4770      	bx	lr

0800843c <__swhatbuf_r>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	460e      	mov	r6, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	2900      	cmp	r1, #0
 8008446:	b096      	sub	sp, #88	; 0x58
 8008448:	4614      	mov	r4, r2
 800844a:	461d      	mov	r5, r3
 800844c:	da08      	bge.n	8008460 <__swhatbuf_r+0x24>
 800844e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	602a      	str	r2, [r5, #0]
 8008456:	061a      	lsls	r2, r3, #24
 8008458:	d410      	bmi.n	800847c <__swhatbuf_r+0x40>
 800845a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845e:	e00e      	b.n	800847e <__swhatbuf_r+0x42>
 8008460:	466a      	mov	r2, sp
 8008462:	f000 f903 	bl	800866c <_fstat_r>
 8008466:	2800      	cmp	r0, #0
 8008468:	dbf1      	blt.n	800844e <__swhatbuf_r+0x12>
 800846a:	9a01      	ldr	r2, [sp, #4]
 800846c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008470:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008474:	425a      	negs	r2, r3
 8008476:	415a      	adcs	r2, r3
 8008478:	602a      	str	r2, [r5, #0]
 800847a:	e7ee      	b.n	800845a <__swhatbuf_r+0x1e>
 800847c:	2340      	movs	r3, #64	; 0x40
 800847e:	2000      	movs	r0, #0
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	b016      	add	sp, #88	; 0x58
 8008484:	bd70      	pop	{r4, r5, r6, pc}
	...

08008488 <__smakebuf_r>:
 8008488:	898b      	ldrh	r3, [r1, #12]
 800848a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800848c:	079d      	lsls	r5, r3, #30
 800848e:	4606      	mov	r6, r0
 8008490:	460c      	mov	r4, r1
 8008492:	d507      	bpl.n	80084a4 <__smakebuf_r+0x1c>
 8008494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	2301      	movs	r3, #1
 800849e:	6163      	str	r3, [r4, #20]
 80084a0:	b002      	add	sp, #8
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	ab01      	add	r3, sp, #4
 80084a6:	466a      	mov	r2, sp
 80084a8:	f7ff ffc8 	bl	800843c <__swhatbuf_r>
 80084ac:	9900      	ldr	r1, [sp, #0]
 80084ae:	4605      	mov	r5, r0
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff f963 	bl	800777c <_malloc_r>
 80084b6:	b948      	cbnz	r0, 80084cc <__smakebuf_r+0x44>
 80084b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084bc:	059a      	lsls	r2, r3, #22
 80084be:	d4ef      	bmi.n	80084a0 <__smakebuf_r+0x18>
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	f043 0302 	orr.w	r3, r3, #2
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	e7e3      	b.n	8008494 <__smakebuf_r+0xc>
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <__smakebuf_r+0x7c>)
 80084ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	6120      	str	r0, [r4, #16]
 80084e2:	b15b      	cbz	r3, 80084fc <__smakebuf_r+0x74>
 80084e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 f8d1 	bl	8008690 <_isatty_r>
 80084ee:	b128      	cbz	r0, 80084fc <__smakebuf_r+0x74>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	89a0      	ldrh	r0, [r4, #12]
 80084fe:	4305      	orrs	r5, r0
 8008500:	81a5      	strh	r5, [r4, #12]
 8008502:	e7cd      	b.n	80084a0 <__smakebuf_r+0x18>
 8008504:	08008295 	.word	0x08008295

08008508 <_malloc_usable_size_r>:
 8008508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850c:	1f18      	subs	r0, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbc      	itt	lt
 8008512:	580b      	ldrlt	r3, [r1, r0]
 8008514:	18c0      	addlt	r0, r0, r3
 8008516:	4770      	bx	lr

08008518 <_raise_r>:
 8008518:	291f      	cmp	r1, #31
 800851a:	b538      	push	{r3, r4, r5, lr}
 800851c:	4604      	mov	r4, r0
 800851e:	460d      	mov	r5, r1
 8008520:	d904      	bls.n	800852c <_raise_r+0x14>
 8008522:	2316      	movs	r3, #22
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	f04f 30ff 	mov.w	r0, #4294967295
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800852e:	b112      	cbz	r2, 8008536 <_raise_r+0x1e>
 8008530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008534:	b94b      	cbnz	r3, 800854a <_raise_r+0x32>
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f830 	bl	800859c <_getpid_r>
 800853c:	462a      	mov	r2, r5
 800853e:	4601      	mov	r1, r0
 8008540:	4620      	mov	r0, r4
 8008542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008546:	f000 b817 	b.w	8008578 <_kill_r>
 800854a:	2b01      	cmp	r3, #1
 800854c:	d00a      	beq.n	8008564 <_raise_r+0x4c>
 800854e:	1c59      	adds	r1, r3, #1
 8008550:	d103      	bne.n	800855a <_raise_r+0x42>
 8008552:	2316      	movs	r3, #22
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	2001      	movs	r0, #1
 8008558:	e7e7      	b.n	800852a <_raise_r+0x12>
 800855a:	2400      	movs	r4, #0
 800855c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008560:	4628      	mov	r0, r5
 8008562:	4798      	blx	r3
 8008564:	2000      	movs	r0, #0
 8008566:	e7e0      	b.n	800852a <_raise_r+0x12>

08008568 <raise>:
 8008568:	4b02      	ldr	r3, [pc, #8]	; (8008574 <raise+0xc>)
 800856a:	4601      	mov	r1, r0
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	f7ff bfd3 	b.w	8008518 <_raise_r>
 8008572:	bf00      	nop
 8008574:	20000018 	.word	0x20000018

08008578 <_kill_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4d07      	ldr	r5, [pc, #28]	; (8008598 <_kill_r+0x20>)
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	4611      	mov	r1, r2
 8008584:	602b      	str	r3, [r5, #0]
 8008586:	f7f9 fe8b 	bl	80022a0 <_kill>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d102      	bne.n	8008594 <_kill_r+0x1c>
 800858e:	682b      	ldr	r3, [r5, #0]
 8008590:	b103      	cbz	r3, 8008594 <_kill_r+0x1c>
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	bd38      	pop	{r3, r4, r5, pc}
 8008596:	bf00      	nop
 8008598:	20000510 	.word	0x20000510

0800859c <_getpid_r>:
 800859c:	f7f9 be78 	b.w	8002290 <_getpid>

080085a0 <__sread>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	f000 f894 	bl	80086d4 <_read_r>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	bfab      	itete	ge
 80085b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085b2:	89a3      	ldrhlt	r3, [r4, #12]
 80085b4:	181b      	addge	r3, r3, r0
 80085b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085ba:	bfac      	ite	ge
 80085bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085be:	81a3      	strhlt	r3, [r4, #12]
 80085c0:	bd10      	pop	{r4, pc}

080085c2 <__swrite>:
 80085c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c6:	461f      	mov	r7, r3
 80085c8:	898b      	ldrh	r3, [r1, #12]
 80085ca:	05db      	lsls	r3, r3, #23
 80085cc:	4605      	mov	r5, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	4616      	mov	r6, r2
 80085d2:	d505      	bpl.n	80085e0 <__swrite+0x1e>
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	2302      	movs	r3, #2
 80085da:	2200      	movs	r2, #0
 80085dc:	f000 f868 	bl	80086b0 <_lseek_r>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	4632      	mov	r2, r6
 80085ee:	463b      	mov	r3, r7
 80085f0:	4628      	mov	r0, r5
 80085f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	f000 b817 	b.w	8008628 <_write_r>

080085fa <__sseek>:
 80085fa:	b510      	push	{r4, lr}
 80085fc:	460c      	mov	r4, r1
 80085fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008602:	f000 f855 	bl	80086b0 <_lseek_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	bf15      	itete	ne
 800860c:	6560      	strne	r0, [r4, #84]	; 0x54
 800860e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008616:	81a3      	strheq	r3, [r4, #12]
 8008618:	bf18      	it	ne
 800861a:	81a3      	strhne	r3, [r4, #12]
 800861c:	bd10      	pop	{r4, pc}

0800861e <__sclose>:
 800861e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008622:	f000 b813 	b.w	800864c <_close_r>
	...

08008628 <_write_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d07      	ldr	r5, [pc, #28]	; (8008648 <_write_r+0x20>)
 800862c:	4604      	mov	r4, r0
 800862e:	4608      	mov	r0, r1
 8008630:	4611      	mov	r1, r2
 8008632:	2200      	movs	r2, #0
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	f7f9 fe69 	bl	800230e <_write>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_write_r+0x1e>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_write_r+0x1e>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20000510 	.word	0x20000510

0800864c <_close_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4d06      	ldr	r5, [pc, #24]	; (8008668 <_close_r+0x1c>)
 8008650:	2300      	movs	r3, #0
 8008652:	4604      	mov	r4, r0
 8008654:	4608      	mov	r0, r1
 8008656:	602b      	str	r3, [r5, #0]
 8008658:	f7f9 fe75 	bl	8002346 <_close>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_close_r+0x1a>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_close_r+0x1a>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	20000510 	.word	0x20000510

0800866c <_fstat_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_fstat_r+0x20>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	4611      	mov	r1, r2
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	f7f9 fe70 	bl	800235e <_fstat>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d102      	bne.n	8008688 <_fstat_r+0x1c>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	b103      	cbz	r3, 8008688 <_fstat_r+0x1c>
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	20000510 	.word	0x20000510

08008690 <_isatty_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d06      	ldr	r5, [pc, #24]	; (80086ac <_isatty_r+0x1c>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	602b      	str	r3, [r5, #0]
 800869c:	f7f9 fe6f 	bl	800237e <_isatty>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_isatty_r+0x1a>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_isatty_r+0x1a>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20000510 	.word	0x20000510

080086b0 <_lseek_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d07      	ldr	r5, [pc, #28]	; (80086d0 <_lseek_r+0x20>)
 80086b4:	4604      	mov	r4, r0
 80086b6:	4608      	mov	r0, r1
 80086b8:	4611      	mov	r1, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	f7f9 fe68 	bl	8002394 <_lseek>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_lseek_r+0x1e>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_lseek_r+0x1e>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000510 	.word	0x20000510

080086d4 <_read_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d07      	ldr	r5, [pc, #28]	; (80086f4 <_read_r+0x20>)
 80086d8:	4604      	mov	r4, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f7f9 fdf6 	bl	80022d4 <_read>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_read_r+0x1e>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_read_r+0x1e>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20000510 	.word	0x20000510

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
