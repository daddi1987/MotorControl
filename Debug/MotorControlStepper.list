
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adcc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800afa0  0800afa0  0001afa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7cc  0800b7cc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7cc  0800b7cc  0001b7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7d4  0800b7d4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7d4  0800b7d4  0001b7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7d8  0800b7d8  0001b7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cc8  200001e4  0800b9c0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004eac  0800b9c0  00024eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019848  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003504  00000000  00000000  00039a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  0003e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004953  00000000  00000000  0003f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da99  00000000  00000000  0004428b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd100  00000000  00000000  00061d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ee24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c60  00000000  00000000  0013ee74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800af84 	.word	0x0800af84

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800af84 	.word	0x0800af84

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <StepperMotor_Init>:
    {0, 0, 0, 1},   // Step 7
    {1, 0, 0, 1}    // Step 8
};

// Inizializza il motore stepper
void StepperMotor_Init(StepperMotor* motor) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
    motor->in1Port = IN1_PhaseA_GPIO_Port;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <StepperMotor_Init+0x4c>)
 8000f98:	601a      	str	r2, [r3, #0]
    motor->in1Pin = IN1_PhaseA_Pin;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	809a      	strh	r2, [r3, #4]
    motor->in2Port = IN1_PhaseB_GPIO_Port;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <StepperMotor_Init+0x50>)
 8000fa4:	609a      	str	r2, [r3, #8]
    motor->in2Pin = IN1_PhaseB_Pin;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	819a      	strh	r2, [r3, #12]
    motor->in3Port = IN2_PhaseA_GPIO_Port;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <StepperMotor_Init+0x4c>)
 8000fb0:	611a      	str	r2, [r3, #16]
    motor->in3Pin = IN2_PhaseA_Pin;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	829a      	strh	r2, [r3, #20]
    motor->in4Port = IN2_PhaseB_GPIO_Port;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <StepperMotor_Init+0x4c>)
 8000fbe:	619a      	str	r2, [r3, #24]
    motor->in4Pin = IN2_PhaseB_Pin;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2240      	movs	r2, #64	; 0x40
 8000fc4:	839a      	strh	r2, [r3, #28]
    motor->stepSequenceIndex = 0;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	779a      	strb	r2, [r3, #30]

    // Abilita il clock per le porte GPIO utilizzate
    //RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    //RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f001 f965 	bl	80022b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f89f 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f9f9 	bl	80013e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 f9cd 	bl	8001390 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000ff6:	f000 f959 	bl	80012ac <MX_TIM6_Init>
  MX_TIM7_Init();
 8000ffa:	f000 f98f 	bl	800131c <MX_TIM7_Init>
  MX_TIM1_Init();
 8000ffe:	f000 f903 	bl	8001208 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  sprintf(Prefix, "Px;");
 8001002:	4934      	ldr	r1, [pc, #208]	; (80010d4 <main+0xf4>)
 8001004:	4834      	ldr	r0, [pc, #208]	; (80010d8 <main+0xf8>)
 8001006:	f007 fd51 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, Prefix, sizeof(Prefix), 100);
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	2203      	movs	r2, #3
 800100e:	4932      	ldr	r1, [pc, #200]	; (80010d8 <main+0xf8>)
 8001010:	4832      	ldr	r0, [pc, #200]	; (80010dc <main+0xfc>)
 8001012:	f003 ff4f 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(HEADER1, "PulseEncoder;");
 8001016:	4932      	ldr	r1, [pc, #200]	; (80010e0 <main+0x100>)
 8001018:	4832      	ldr	r0, [pc, #200]	; (80010e4 <main+0x104>)
 800101a:	f007 fd47 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, HEADER1, sizeof(HEADER1), 100);
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2223      	movs	r2, #35	; 0x23
 8001022:	4930      	ldr	r1, [pc, #192]	; (80010e4 <main+0x104>)
 8001024:	482d      	ldr	r0, [pc, #180]	; (80010dc <main+0xfc>)
 8001026:	f003 ff45 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(HEADER2, "PositionMotor;");
 800102a:	492f      	ldr	r1, [pc, #188]	; (80010e8 <main+0x108>)
 800102c:	482f      	ldr	r0, [pc, #188]	; (80010ec <main+0x10c>)
 800102e:	f007 fd3d 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, HEADER2, sizeof(HEADER2), 100);
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	2223      	movs	r2, #35	; 0x23
 8001036:	492d      	ldr	r1, [pc, #180]	; (80010ec <main+0x10c>)
 8001038:	4828      	ldr	r0, [pc, #160]	; (80010dc <main+0xfc>)
 800103a:	f003 ff3b 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(HEADER3, "RevolutionMotor;");
 800103e:	492c      	ldr	r1, [pc, #176]	; (80010f0 <main+0x110>)
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <main+0x114>)
 8001042:	f007 fd33 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, HEADER3, sizeof(HEADER3), 100);
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2223      	movs	r2, #35	; 0x23
 800104a:	492a      	ldr	r1, [pc, #168]	; (80010f4 <main+0x114>)
 800104c:	4823      	ldr	r0, [pc, #140]	; (80010dc <main+0xfc>)
 800104e:	f003 ff31 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(HEADER4, "KinematicPositionUnit;");
 8001052:	4929      	ldr	r1, [pc, #164]	; (80010f8 <main+0x118>)
 8001054:	4829      	ldr	r0, [pc, #164]	; (80010fc <main+0x11c>)
 8001056:	f007 fd29 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, HEADER4, sizeof(HEADER4), 100);
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	2223      	movs	r2, #35	; 0x23
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <main+0x11c>)
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <main+0xfc>)
 8001062:	f003 ff27 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(HEADER5, "KinematicSpeed[Rpm];");
 8001066:	4926      	ldr	r1, [pc, #152]	; (8001100 <main+0x120>)
 8001068:	4826      	ldr	r0, [pc, #152]	; (8001104 <main+0x124>)
 800106a:	f007 fd1f 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, HEADER5, sizeof(HEADER5), 100);
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2223      	movs	r2, #35	; 0x23
 8001072:	4924      	ldr	r1, [pc, #144]	; (8001104 <main+0x124>)
 8001074:	4819      	ldr	r0, [pc, #100]	; (80010dc <main+0xfc>)
 8001076:	f003 ff1d 	bl	8004eb4 <HAL_UART_Transmit>
  sprintf(Sufix, "Sx;\n");
 800107a:	4923      	ldr	r1, [pc, #140]	; (8001108 <main+0x128>)
 800107c:	4823      	ldr	r0, [pc, #140]	; (800110c <main+0x12c>)
 800107e:	f007 fd15 	bl	8008aac <siprintf>
  HAL_UART_Transmit(&huart2, Sufix, sizeof(Sufix), 100);
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	2203      	movs	r2, #3
 8001086:	4921      	ldr	r1, [pc, #132]	; (800110c <main+0x12c>)
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <main+0xfc>)
 800108a:	f003 ff13 	bl	8004eb4 <HAL_UART_Transmit>
  //HAL_Delay(1000);

  GetConstantFilter();
 800108e:	f000 fc71 	bl	8001974 <GetConstantFilter>


  StepperMotor motor;

     // Inizializza il motore stepper
     StepperMotor_Init(&motor);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff79 	bl	8000f8c <StepperMotor_Init>
     EnablePhaseA();
 800109a:	f000 fd9d 	bl	8001bd8 <EnablePhaseA>
     EnablePhaseB();
 800109e:	f000 fda7 	bl	8001bf0 <EnablePhaseB>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010a2:	f004 fb05 	bl	80056b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <main+0x130>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	481a      	ldr	r0, [pc, #104]	; (8001114 <main+0x134>)
 80010ac:	f004 fb4a 	bl	8005744 <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <main+0x138>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80010b6:	4a19      	ldr	r2, [pc, #100]	; (800111c <main+0x13c>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <main+0x140>)
 80010bc:	f004 fb42 	bl	8005744 <osThreadNew>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a18      	ldr	r2, [pc, #96]	; (8001124 <main+0x144>)
 80010c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010c6:	f004 fb17 	bl	80056f8 <osKernelStart>
		     //TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6);


	        //--------------------- COMMAND MOTOR-----------------------------------------

		  	DemandMotorStep = 10;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <main+0x148>)
 80010cc:	220a      	movs	r2, #10
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e7fb      	b.n	80010ca <main+0xea>
 80010d2:	bf00      	nop
 80010d4:	0800afb0 	.word	0x0800afb0
 80010d8:	200003f4 	.word	0x200003f4
 80010dc:	200002d8 	.word	0x200002d8
 80010e0:	0800afb4 	.word	0x0800afb4
 80010e4:	200003fc 	.word	0x200003fc
 80010e8:	0800afc4 	.word	0x0800afc4
 80010ec:	20000420 	.word	0x20000420
 80010f0:	0800afd4 	.word	0x0800afd4
 80010f4:	20000444 	.word	0x20000444
 80010f8:	0800afe8 	.word	0x0800afe8
 80010fc:	20000468 	.word	0x20000468
 8001100:	0800b000 	.word	0x0800b000
 8001104:	2000048c 	.word	0x2000048c
 8001108:	0800b018 	.word	0x0800b018
 800110c:	200003f8 	.word	0x200003f8
 8001110:	0800b390 	.word	0x0800b390
 8001114:	08001c41 	.word	0x08001c41
 8001118:	2000031c 	.word	0x2000031c
 800111c:	0800b3b4 	.word	0x0800b3b4
 8001120:	08001d79 	.word	0x08001d79
 8001124:	20000320 	.word	0x20000320
 8001128:	200004f4 	.word	0x200004f4

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	; 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2234      	movs	r2, #52	; 0x34
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f007 f844 	bl	80081c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <SystemClock_Config+0xd4>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <SystemClock_Config+0xd4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <SystemClock_Config+0xd8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001178:	4a22      	ldr	r2, [pc, #136]	; (8001204 <SystemClock_Config+0xd8>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <SystemClock_Config+0xd8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f9b2 	bl	8003524 <HAL_RCC_OscConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011c6:	f000 fddf 	bl	8001d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ca:	230f      	movs	r3, #15
 80011cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ce:	2302      	movs	r3, #2
 80011d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2102      	movs	r1, #2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fd60 	bl	8002cac <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011f2:	f000 fdc9 	bl	8001d88 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)  // Timer for step speed 1 microsecond
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MX_TIM1_Init+0xa0>)
 8001228:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1; // Old 1-1  // (SystemCoreClock / 1000000) - 1
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM1_Init+0x9c>)
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 41; // Old 65535  or 76
 8001236:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001238:	2229      	movs	r2, #41	; 0x29
 800123a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_TIM1_Init+0x9c>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_TIM1_Init+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001250:	f002 fcc4 	bl	8003bdc <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800125a:	f000 fd95 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_TIM1_Init+0x9c>)
 800126c:	f002 ff74 	bl	8004158 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001276:	f000 fd87 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001288:	f003 fc48 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001292:	f000 fd79 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Start Timer
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM1_Init+0x9c>)
 8001298:	f002 fd90 	bl	8003dbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000200 	.word	0x20000200
 80012a8:	40010000 	.word	0x40010000

080012ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)  // Using Timer For calculate the time between two encoder signal samples 0.0009 s
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	463b      	mov	r3, r7
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_TIM6_Init+0x68>)
 80012bc:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_TIM6_Init+0x6c>)
 80012be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_TIM6_Init+0x68>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_TIM6_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_TIM6_Init+0x68>)
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_TIM6_Init+0x68>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_TIM6_Init+0x68>)
 80012dc:	f002 fc7e 	bl	8003bdc <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012e6:	f000 fd4f 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM6_Init+0x68>)
 80012f8:	f003 fc10 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001302:	f000 fd41 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_TIM_Base_Start_IT(&htim6); // Start Timer
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM6_Init+0x68>)
 8001308:	f002 fd58 	bl	8003dbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM6_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000248 	.word	0x20000248
 8001318:	40001000 	.word	0x40001000

0800131c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_TIM7_Init+0x6c>)
 800132c:	4a17      	ldr	r2, [pc, #92]	; (800138c <MX_TIM7_Init+0x70>)
 800132e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41999;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM7_Init+0x6c>)
 8001332:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001336:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_TIM7_Init+0x6c>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_TIM7_Init+0x6c>)
 8001340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001344:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_TIM7_Init+0x6c>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <MX_TIM7_Init+0x6c>)
 800134e:	f002 fc45 	bl	8003bdc <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001358:	f000 fd16 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM7_Init+0x6c>)
 800136a:	f003 fbd7 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001374:	f000 fd08 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM7_Init+0x6c>)
 800137a:	f002 fd1f 	bl	8003dbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM7_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000290 	.word	0x20000290
 800138c:	40001400 	.word	0x40001400

08001390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_USART2_UART_Init+0x50>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_USART2_UART_Init+0x4c>)
 80013c8:	f003 fc9a 	bl	8004d00 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d2:	f000 fcd9 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002d8 	.word	0x200002d8
 80013e0:	40004400 	.word	0x40004400

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b5b      	ldr	r3, [pc, #364]	; (800156c <MX_GPIO_Init+0x188>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a5a      	ldr	r2, [pc, #360]	; (800156c <MX_GPIO_Init+0x188>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b58      	ldr	r3, [pc, #352]	; (800156c <MX_GPIO_Init+0x188>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b54      	ldr	r3, [pc, #336]	; (800156c <MX_GPIO_Init+0x188>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a53      	ldr	r2, [pc, #332]	; (800156c <MX_GPIO_Init+0x188>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b51      	ldr	r3, [pc, #324]	; (800156c <MX_GPIO_Init+0x188>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <MX_GPIO_Init+0x188>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a4c      	ldr	r2, [pc, #304]	; (800156c <MX_GPIO_Init+0x188>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <MX_GPIO_Init+0x188>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b46      	ldr	r3, [pc, #280]	; (800156c <MX_GPIO_Init+0x188>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a45      	ldr	r2, [pc, #276]	; (800156c <MX_GPIO_Init+0x188>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b43      	ldr	r3, [pc, #268]	; (800156c <MX_GPIO_Init+0x188>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001470:	483f      	ldr	r0, [pc, #252]	; (8001570 <MX_GPIO_Init+0x18c>)
 8001472:	f001 fba9 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800147c:	483d      	ldr	r0, [pc, #244]	; (8001574 <MX_GPIO_Init+0x190>)
 800147e:	f001 fba3 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	483c      	ldr	r0, [pc, #240]	; (8001578 <MX_GPIO_Init+0x194>)
 8001488:	f001 fb9e 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001492:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4835      	ldr	r0, [pc, #212]	; (8001578 <MX_GPIO_Init+0x194>)
 80014a4:	f001 f846 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 80014a8:	2303      	movs	r3, #3
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	482c      	ldr	r0, [pc, #176]	; (8001570 <MX_GPIO_Init+0x18c>)
 80014be:	f001 f839 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 80014c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <MX_GPIO_Init+0x18c>)
 80014dc:	f001 f82a 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 80014e0:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	481e      	ldr	r0, [pc, #120]	; (8001574 <MX_GPIO_Init+0x190>)
 80014fa:	f001 f81b 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <MX_GPIO_Init+0x194>)
 8001516:	f001 f80d 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4810      	ldr	r0, [pc, #64]	; (8001570 <MX_GPIO_Init+0x18c>)
 8001530:	f001 f800 	bl	8002534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2105      	movs	r1, #5
 8001538:	2006      	movs	r0, #6
 800153a:	f000 ffb7 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800153e:	2006      	movs	r0, #6
 8001540:	f000 ffe0 	bl	8002504 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2105      	movs	r1, #5
 8001548:	2007      	movs	r0, #7
 800154a:	f000 ffaf 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800154e:	2007      	movs	r0, #7
 8001550:	f000 ffd8 	bl	8002504 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2105      	movs	r1, #5
 8001558:	2028      	movs	r0, #40	; 0x28
 800155a:	f000 ffa7 	bl	80024ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800155e:	2028      	movs	r0, #40	; 0x28
 8001560:	f000 ffd0 	bl	8002504 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800

0800157c <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 800157c:	b598      	push	{r3, r4, r7, lr}
 800157e:	af00      	add	r7, sp, #0
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 8001580:	2102      	movs	r1, #2
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <rot_get_state+0x28>)
 8001584:	f001 fafa 	bl	8002b7c <HAL_GPIO_ReadPin>
 8001588:	4603      	mov	r3, r0
 800158a:	005b      	lsls	r3, r3, #1
                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 800158c:	b25c      	sxtb	r4, r3
 800158e:	2101      	movs	r1, #1
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <rot_get_state+0x28>)
 8001592:	f001 faf3 	bl	8002b7c <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4323      	orrs	r3, r4
 800159c:	b25b      	sxtb	r3, r3
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd98      	pop	{r3, r4, r7, pc}
 80015a4:	40020000 	.word	0x40020000

080015a8 <HAL_GPIO_EXTI_Callback>:
/* Use Interrupt callback for determinate the count encoder and direction
 * The Encoder Have a 2048 pulse/rot, in this implementation do it increment counter POSITION four time at impulse
 * Example 1rev/8192 pulse
 * PIN ENCODER A0 COUNT AND A1 DIRECTION
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direct_Pin) {
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_EXTI_Callback+0x18>
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	f040 8082 	bne.w	80016c4 <HAL_GPIO_EXTI_Callback+0x11c>

		rot_new_state = rot_get_state();
 80015c0:	f7ff ffdc 	bl	800157c <rot_get_state>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 80015ca:	701a      	strb	r2, [r3, #0]

		//DBG("%d:%d", rot_old_state, rot_new_state);

		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 80015cc:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d109      	bne.n	80015e8 <HAL_GPIO_EXTI_Callback+0x40>
 80015d4:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_EXTI_Callback+0x40>
			EncoderCount++;
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e060      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d109      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x5c>
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_GPIO_EXTI_Callback+0x5c>
			EncoderCount++;
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e052      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_GPIO_EXTI_Callback+0x78>
 800160c:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_EXTI_Callback+0x78>
			EncoderCount++;
 8001614:	4b2f      	ldr	r3, [pc, #188]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e044      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d109      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x94>
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d105      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0x94>
			EncoderCount++;
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e036      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d109      	bne.n	8001658 <HAL_GPIO_EXTI_Callback+0xb0>
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_EXTI_Callback+0xb0>
			EncoderCount--;
 800164c:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3b01      	subs	r3, #1
 8001652:	4a20      	ldr	r2, [pc, #128]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e028      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d109      	bne.n	8001674 <HAL_GPIO_EXTI_Callback+0xcc>
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_GPIO_EXTI_Callback+0xcc>
			EncoderCount--;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	3b01      	subs	r3, #1
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01a      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0xe8>
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d105      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0xe8>
			EncoderCount--;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00c      	b.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d108      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d104      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x102>
			EncoderCount--;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_GPIO_EXTI_Callback+0x12c>)
 80016a8:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_GPIO_EXTI_Callback+0x124>)
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_GPIO_EXTI_Callback+0x128>)
 80016b0:	701a      	strb	r2, [r3, #0]
		Calculate_Rotation(EncoderPulse,RevoluctionFactor);
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_GPIO_EXTI_Callback+0x130>)
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_GPIO_EXTI_Callback+0x134>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	4610      	mov	r0, r2
 80016c0:	f000 f80e 	bl	80016e0 <Calculate_Rotation>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200004c4 	.word	0x200004c4
 80016d0:	200004c5 	.word	0x200004c5
 80016d4:	20000324 	.word	0x20000324
 80016d8:	20000004 	.word	0x20000004
 80016dc:	20000006 	.word	0x20000006

080016e0 <Calculate_Rotation>:
// ----------------------------------------CALCULATE REV TO FACTOR --------------------------------------
/* Calculate Revolution to Factor
 *
 */
void Calculate_Rotation(uint16_t EncoderPulseSet,uint16_t RevoluctionFactorSet)
{
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	80fb      	strh	r3, [r7, #6]
 80016ec:	4613      	mov	r3, r2
 80016ee:	80bb      	strh	r3, [r7, #4]
EncoderPosition = EncoderCount/4.0;   // Single Event Encoder 1*4 in Single Counter
 80016f0:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <Calculate_Rotation+0x240>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff35 	bl	8000564 <__aeabi_i2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <Calculate_Rotation+0x244>)
 8001700:	f7ff f8c4 	bl	800088c <__aeabi_ddiv>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa44 	bl	8000b98 <__aeabi_d2iz>
 8001710:	4603      	mov	r3, r0
 8001712:	4a85      	ldr	r2, [pc, #532]	; (8001928 <Calculate_Rotation+0x248>)
 8001714:	6013      	str	r3, [r2, #0]
EncoderPositionFloat = EncoderPosition; // Single Counter Encoder
 8001716:	4b84      	ldr	r3, [pc, #528]	; (8001928 <Calculate_Rotation+0x248>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <Calculate_Rotation+0x24c>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
PositionMotor = EncoderPositionFloat/EncoderPulseSet;
 8001728:	4b80      	ldr	r3, [pc, #512]	; (800192c <Calculate_Rotation+0x24c>)
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173c:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <Calculate_Rotation+0x250>)
 800173e:	edc3 7a00 	vstr	s15, [r3]
KinematicPositionUnit = RevoluctionFactorSet * PositionMotor;
 8001742:	88bb      	ldrh	r3, [r7, #4]
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <Calculate_Rotation+0x250>)
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001756:	4b77      	ldr	r3, [pc, #476]	; (8001934 <Calculate_Rotation+0x254>)
 8001758:	edc3 7a00 	vstr	s15, [r3]

TM6_Currentvalue = __HAL_TIM_GET_COUNTER(&htim6); // Get current time (microseconds)
 800175c:	4b76      	ldr	r3, [pc, #472]	; (8001938 <Calculate_Rotation+0x258>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	b21a      	sxth	r2, r3
 8001764:	4b75      	ldr	r3, [pc, #468]	; (800193c <Calculate_Rotation+0x25c>)
 8001766:	801a      	strh	r2, [r3, #0]

if(TM6_Currentvalue >= TM6_OldValue)
 8001768:	4b74      	ldr	r3, [pc, #464]	; (800193c <Calculate_Rotation+0x25c>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	461a      	mov	r2, r3
 8001770:	4b73      	ldr	r3, [pc, #460]	; (8001940 <Calculate_Rotation+0x260>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	f0c0 80c2 	bcc.w	80018fe <Calculate_Rotation+0x21e>
{
	TM6_DiffCaunter = (TM6_Currentvalue - TM6_OldValue); // Calculate time from count to count
 800177a:	4b70      	ldr	r3, [pc, #448]	; (800193c <Calculate_Rotation+0x25c>)
 800177c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001780:	461a      	mov	r2, r3
 8001782:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <Calculate_Rotation+0x260>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <Calculate_Rotation+0x264>)
 800178a:	6013      	str	r3, [r2, #0]
	if (FilterSpeedEnable == 1)  //  CutOff Low-Pass Filter
 800178c:	4b6e      	ldr	r3, [pc, #440]	; (8001948 <Calculate_Rotation+0x268>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d16e      	bne.n	8001872 <Calculate_Rotation+0x192>
	{
		GetConstantFilter();
 8001794:	f000 f8ee 	bl	8001974 <GetConstantFilter>
		EncoderSpeedRPSToFiler = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <Calculate_Rotation+0x264>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed1 	bl	8000544 <__aeabi_ui2d>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	a15c      	add	r1, pc, #368	; (adr r1, 8001918 <Calculate_Rotation+0x238>)
 80017a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ac:	f7ff f86e 	bl	800088c <__aeabi_ddiv>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4614      	mov	r4, r2
 80017b6:	461d      	mov	r5, r3
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fed1 	bl	8000564 <__aeabi_i2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7ff f85f 	bl	800088c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff fa07 	bl	8000be8 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a5b      	ldr	r2, [pc, #364]	; (800194c <Calculate_Rotation+0x26c>)
 80017de:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPS = ((b_i*RPSSpeedFilter) + (a_i*EncoderSpeedRPSToFiler) + (a_i*RPSSpeedFilterPrev));
 80017e0:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <Calculate_Rotation+0x270>)
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <Calculate_Rotation+0x274>)
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <Calculate_Rotation+0x278>)
 80017f2:	edd3 6a00 	vldr	s13, [r3]
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <Calculate_Rotation+0x26c>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001804:	4b54      	ldr	r3, [pc, #336]	; (8001958 <Calculate_Rotation+0x278>)
 8001806:	edd3 6a00 	vldr	s13, [r3]
 800180a:	4b54      	ldr	r3, [pc, #336]	; (800195c <Calculate_Rotation+0x27c>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <Calculate_Rotation+0x280>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 800181e:	4b50      	ldr	r3, [pc, #320]	; (8001960 <Calculate_Rotation+0x280>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001964 <Calculate_Rotation+0x284>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <Calculate_Rotation+0x288>)
 800182e:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <Calculate_Rotation+0x288>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <Calculate_Rotation+0x28c>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <Calculate_Rotation+0x25c>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	4b3a      	ldr	r3, [pc, #232]	; (8001940 <Calculate_Rotation+0x260>)
 8001856:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8001858:	2120      	movs	r1, #32
 800185a:	4845      	ldr	r0, [pc, #276]	; (8001970 <Calculate_Rotation+0x290>)
 800185c:	f001 f9e6 	bl	8002c2c <HAL_GPIO_TogglePin>
		RPSSpeedFilterPrev = EncoderSpeedRPSToFiler;
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <Calculate_Rotation+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a3d      	ldr	r2, [pc, #244]	; (800195c <Calculate_Rotation+0x27c>)
 8001866:	6013      	str	r3, [r2, #0]
		RPSSpeedFilter = EncoderSpeedRPS;
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <Calculate_Rotation+0x280>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a39      	ldr	r2, [pc, #228]	; (8001954 <Calculate_Rotation+0x274>)
 800186e:	6013      	str	r3, [r2, #0]
else
{
	TM6_OldValue = TM6_Currentvalue;
}

}
 8001870:	e04b      	b.n	800190a <Calculate_Rotation+0x22a>
		EncoderSpeedRPS = ((1000000.0/TM6_DiffCaunter)/(EncoderPulseSet*4)); //Calculate RPS speed From microsecond to second
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <Calculate_Rotation+0x264>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe64 	bl	8000544 <__aeabi_ui2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	a125      	add	r1, pc, #148	; (adr r1, 8001918 <Calculate_Rotation+0x238>)
 8001882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001886:	f7ff f801 	bl	800088c <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4614      	mov	r4, r2
 8001890:	461d      	mov	r5, r3
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe64 	bl	8000564 <__aeabi_i2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fff2 	bl	800088c <__aeabi_ddiv>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f99a 	bl	8000be8 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <Calculate_Rotation+0x280>)
 80018b8:	6013      	str	r3, [r2, #0]
		EncoderSpeedRPM = (EncoderSpeedRPS * 60.0); //Calculate RPM Speed
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <Calculate_Rotation+0x280>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001964 <Calculate_Rotation+0x284>
 80018c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <Calculate_Rotation+0x288>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
		EncoderSpeedUnit = (EncoderSpeedRPM * RevoluctionFactorSet);
 80018ce:	88bb      	ldrh	r3, [r7, #4]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <Calculate_Rotation+0x288>)
 80018da:	edd3 7a00 	vldr	s15, [r3]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <Calculate_Rotation+0x28c>)
 80018e4:	edc3 7a00 	vstr	s15, [r3]
		TM6_OldValue = TM6_Currentvalue; // Save to old value
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <Calculate_Rotation+0x25c>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <Calculate_Rotation+0x260>)
 80018f2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 80018f4:	2120      	movs	r1, #32
 80018f6:	481e      	ldr	r0, [pc, #120]	; (8001970 <Calculate_Rotation+0x290>)
 80018f8:	f001 f998 	bl	8002c2c <HAL_GPIO_TogglePin>
}
 80018fc:	e005      	b.n	800190a <Calculate_Rotation+0x22a>
	TM6_OldValue = TM6_Currentvalue;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <Calculate_Rotation+0x25c>)
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	461a      	mov	r2, r3
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <Calculate_Rotation+0x260>)
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bdb0      	pop	{r4, r5, r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	00000000 	.word	0x00000000
 800191c:	412e8480 	.word	0x412e8480
 8001920:	20000324 	.word	0x20000324
 8001924:	40100000 	.word	0x40100000
 8001928:	200004cc 	.word	0x200004cc
 800192c:	200004d0 	.word	0x200004d0
 8001930:	200004c8 	.word	0x200004c8
 8001934:	200004d4 	.word	0x200004d4
 8001938:	20000248 	.word	0x20000248
 800193c:	200004f8 	.word	0x200004f8
 8001940:	200004ec 	.word	0x200004ec
 8001944:	200004e8 	.word	0x200004e8
 8001948:	20000000 	.word	0x20000000
 800194c:	200004b8 	.word	0x200004b8
 8001950:	200004bc 	.word	0x200004bc
 8001954:	200004b0 	.word	0x200004b0
 8001958:	200004c0 	.word	0x200004c0
 800195c:	200004b4 	.word	0x200004b4
 8001960:	200004d8 	.word	0x200004d8
 8001964:	42700000 	.word	0x42700000
 8001968:	200004dc 	.word	0x200004dc
 800196c:	200004e4 	.word	0x200004e4
 8001970:	40020000 	.word	0x40020000

08001974 <GetConstantFilter>:
/* Calculate Revolution to Factor
 *
 */
//----------------------------DA CONTROLLARE NON FUNZIONANTE--------------------------
void GetConstantFilter(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
    b2= b0;
    a1 = 2.0 * (ita*ita - 1.0) * b0;
    a2 = -(1.0 - q*ita + ita*ita) * b0;
    */

	switch (FrequencyCase) {
 8001978:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <GetConstantFilter+0x1f4>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	2b0b      	cmp	r3, #11
 8001980:	f200 80ed 	bhi.w	8001b5e <GetConstantFilter+0x1ea>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <GetConstantFilter+0x18>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019bd 	.word	0x080019bd
 8001990:	080019d9 	.word	0x080019d9
 8001994:	080019fd 	.word	0x080019fd
 8001998:	08001a21 	.word	0x08001a21
 800199c:	08001a45 	.word	0x08001a45
 80019a0:	08001a69 	.word	0x08001a69
 80019a4:	08001a8d 	.word	0x08001a8d
 80019a8:	08001ab1 	.word	0x08001ab1
 80019ac:	08001ad5 	.word	0x08001ad5
 80019b0:	08001af9 	.word	0x08001af9
 80019b4:	08001b1d 	.word	0x08001b1d
 80019b8:	08001b41 	.word	0x08001b41

	  case 1:
		if(FrequencySpeedFilter <= 5)
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <GetConstantFilter+0x1f8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d806      	bhi.n	80019d2 <GetConstantFilter+0x5e>
		{
			b_i = 0.96906992;
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <GetConstantFilter+0x1fc>)
 80019c6:	4a6b      	ldr	r2, [pc, #428]	; (8001b74 <GetConstantFilter+0x200>)
 80019c8:	601a      	str	r2, [r3, #0]
			a_i = 0.01546504;
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <GetConstantFilter+0x204>)
 80019cc:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <GetConstantFilter+0x208>)
 80019ce:	601a      	str	r2, [r3, #0]
			//FrequencySpeedFilter = 1;
			break;
 80019d0:	e0c5      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 2;
 80019d2:	4b65      	ldr	r3, [pc, #404]	; (8001b68 <GetConstantFilter+0x1f4>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
		}


	  case 2:
		if ((FrequencySpeedFilter >= 6)&&(FrequencySpeedFilter <= 10))
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <GetConstantFilter+0x1f8>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d90a      	bls.n	80019f6 <GetConstantFilter+0x82>
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <GetConstantFilter+0x1f8>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b0a      	cmp	r3, #10
 80019e6:	d806      	bhi.n	80019f6 <GetConstantFilter+0x82>
		{
		    b_i = 0.93908194;
 80019e8:	4b61      	ldr	r3, [pc, #388]	; (8001b70 <GetConstantFilter+0x1fc>)
 80019ea:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <GetConstantFilter+0x20c>)
 80019ec:	601a      	str	r2, [r3, #0]
		    a_i = 0.03045903;
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <GetConstantFilter+0x204>)
 80019f0:	4a64      	ldr	r2, [pc, #400]	; (8001b84 <GetConstantFilter+0x210>)
 80019f2:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 2;
		    break;
 80019f4:	e0b3      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 3;
 80019f6:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <GetConstantFilter+0x1f4>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	701a      	strb	r2, [r3, #0]
		}


	  case 3:
		if ((FrequencySpeedFilter >= 11)&&(FrequencySpeedFilter <= 15))
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <GetConstantFilter+0x1f8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b0a      	cmp	r3, #10
 8001a02:	d90a      	bls.n	8001a1a <GetConstantFilter+0xa6>
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d806      	bhi.n	8001a1a <GetConstantFilter+0xa6>
		{
		    b_i = 0.90999367;
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	; (8001b88 <GetConstantFilter+0x214>)
 8001a10:	601a      	str	r2, [r3, #0]
		    a_i = 0.04500317;
 8001a12:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <GetConstantFilter+0x204>)
 8001a14:	4a5d      	ldr	r2, [pc, #372]	; (8001b8c <GetConstantFilter+0x218>)
 8001a16:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 3;
		    break;
 8001a18:	e0a1      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 4;
 8001a1a:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	701a      	strb	r2, [r3, #0]
		}


	  case 4:
		if ((FrequencySpeedFilter >= 16)&&(FrequencySpeedFilter <= 25))
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b0f      	cmp	r3, #15
 8001a26:	d90a      	bls.n	8001a3e <GetConstantFilter+0xca>
 8001a28:	4b50      	ldr	r3, [pc, #320]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b19      	cmp	r3, #25
 8001a2e:	d806      	bhi.n	8001a3e <GetConstantFilter+0xca>
		{
		    b_i = 0.85435899;
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001a32:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <GetConstantFilter+0x21c>)
 8001a34:	601a      	str	r2, [r3, #0]
		    a_i = 0.07282051;
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <GetConstantFilter+0x204>)
 8001a38:	4a56      	ldr	r2, [pc, #344]	; (8001b94 <GetConstantFilter+0x220>)
 8001a3a:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 4;
		    break;
 8001a3c:	e08f      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 5;
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001a40:	2205      	movs	r2, #5
 8001a42:	701a      	strb	r2, [r3, #0]
		}


	  case 5:
		if ((FrequencySpeedFilter >= 26)&&(FrequencySpeedFilter <= 35))
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b19      	cmp	r3, #25
 8001a4a:	d90a      	bls.n	8001a62 <GetConstantFilter+0xee>
 8001a4c:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b23      	cmp	r3, #35	; 0x23
 8001a52:	d806      	bhi.n	8001a62 <GetConstantFilter+0xee>
		{
		    b_i = 0.80187364;
 8001a54:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001a56:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <GetConstantFilter+0x224>)
 8001a58:	601a      	str	r2, [r3, #0]
		    a_i = 0.09906318;
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <GetConstantFilter+0x204>)
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <GetConstantFilter+0x228>)
 8001a5e:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 5;
		    break;
 8001a60:	e07d      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 6;
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001a64:	2206      	movs	r2, #6
 8001a66:	701a      	strb	r2, [r3, #0]
		}


	  case 6:
		if ((FrequencySpeedFilter >= 36)&&(FrequencySpeedFilter <= 45))
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b23      	cmp	r3, #35	; 0x23
 8001a6e:	d90a      	bls.n	8001a86 <GetConstantFilter+0x112>
 8001a70:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b2d      	cmp	r3, #45	; 0x2d
 8001a76:	d806      	bhi.n	8001a86 <GetConstantFilter+0x112>
		{
		    b_i = 0.75227759;
 8001a78:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001a7a:	4a49      	ldr	r2, [pc, #292]	; (8001ba0 <GetConstantFilter+0x22c>)
 8001a7c:	601a      	str	r2, [r3, #0]
		    a_i = 0.1238612;
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <GetConstantFilter+0x204>)
 8001a80:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <GetConstantFilter+0x230>)
 8001a82:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 6;
		    break;
 8001a84:	e06b      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 7;
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	701a      	strb	r2, [r3, #0]
		}


	  case 7:
		if ((FrequencySpeedFilter >= 46)&&(FrequencySpeedFilter <= 55))
 8001a8c:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b2d      	cmp	r3, #45	; 0x2d
 8001a92:	d90a      	bls.n	8001aaa <GetConstantFilter+0x136>
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b37      	cmp	r3, #55	; 0x37
 8001a9a:	d806      	bhi.n	8001aaa <GetConstantFilter+0x136>
		{
		    b_i = 0.70533864;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001a9e:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <GetConstantFilter+0x234>)
 8001aa0:	601a      	str	r2, [r3, #0]
		    a_i = 0.14733068;
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <GetConstantFilter+0x204>)
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <GetConstantFilter+0x238>)
 8001aa6:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 7;
		    break;
 8001aa8:	e059      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 8;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001aac:	2208      	movs	r2, #8
 8001aae:	701a      	strb	r2, [r3, #0]
		}


	  case 8:
		if ((FrequencySpeedFilter >= 56)&&(FrequencySpeedFilter <= 65))
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b37      	cmp	r3, #55	; 0x37
 8001ab6:	d90a      	bls.n	8001ace <GetConstantFilter+0x15a>
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b41      	cmp	r3, #65	; 0x41
 8001abe:	d806      	bhi.n	8001ace <GetConstantFilter+0x15a>
		{
		    b_i = 0.66084882;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001ac2:	4a3b      	ldr	r2, [pc, #236]	; (8001bb0 <GetConstantFilter+0x23c>)
 8001ac4:	601a      	str	r2, [r3, #0]
		    a_i = 0.16957559;
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <GetConstantFilter+0x204>)
 8001ac8:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <GetConstantFilter+0x240>)
 8001aca:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 8;
		    break;
 8001acc:	e047      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 9;
 8001ace:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001ad0:	2209      	movs	r2, #9
 8001ad2:	701a      	strb	r2, [r3, #0]
		}


	  case 9:
		if ((FrequencySpeedFilter >= 66)&&(FrequencySpeedFilter <= 75))
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b41      	cmp	r3, #65	; 0x41
 8001ada:	d90a      	bls.n	8001af2 <GetConstantFilter+0x17e>
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b4b      	cmp	r3, #75	; 0x4b
 8001ae2:	d806      	bhi.n	8001af2 <GetConstantFilter+0x17e>
		{
		    b_i = 0.61862133;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001ae6:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <GetConstantFilter+0x244>)
 8001ae8:	601a      	str	r2, [r3, #0]
		    a_i = 0.19068933;
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <GetConstantFilter+0x204>)
 8001aec:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <GetConstantFilter+0x248>)
 8001aee:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 9;
		    break;
 8001af0:	e035      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 10;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001af4:	220a      	movs	r2, #10
 8001af6:	701a      	strb	r2, [r3, #0]
		}


	  case 10:
		if ((FrequencySpeedFilter >= 76)&&(FrequencySpeedFilter <= 85))
 8001af8:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b4b      	cmp	r3, #75	; 0x4b
 8001afe:	d90a      	bls.n	8001b16 <GetConstantFilter+0x1a2>
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b55      	cmp	r3, #85	; 0x55
 8001b06:	d806      	bhi.n	8001b16 <GetConstantFilter+0x1a2>
		{
		    b_i = 0.57848789;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001b0a:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <GetConstantFilter+0x24c>)
 8001b0c:	601a      	str	r2, [r3, #0]
		    a_i = 0.21075605;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <GetConstantFilter+0x204>)
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <GetConstantFilter+0x250>)
 8001b12:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 10;
		    break;
 8001b14:	e023      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 11;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001b18:	220b      	movs	r2, #11
 8001b1a:	701a      	strb	r2, [r3, #0]
		}


	  case 11:
		if ((FrequencySpeedFilter >= 86)&&(FrequencySpeedFilter <= 95))
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b55      	cmp	r3, #85	; 0x55
 8001b22:	d90a      	bls.n	8001b3a <GetConstantFilter+0x1c6>
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b5f      	cmp	r3, #95	; 0x5f
 8001b2a:	d806      	bhi.n	8001b3a <GetConstantFilter+0x1c6>
		{
		    b_i = 0.5402965;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001b2e:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <GetConstantFilter+0x254>)
 8001b30:	601a      	str	r2, [r3, #0]
		    a_i = 0.22985175;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <GetConstantFilter+0x204>)
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <GetConstantFilter+0x258>)
 8001b36:	601a      	str	r2, [r3, #0]
		    //FrequencySpeedFilter = 11;
		    break;
 8001b38:	e011      	b.n	8001b5e <GetConstantFilter+0x1ea>
		}
		else
		{
			FrequencyCase = 12;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	701a      	strb	r2, [r3, #0]
		}


	  case 12:
	  		if (FrequencySpeedFilter >= 96)
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <GetConstantFilter+0x1f8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b5f      	cmp	r3, #95	; 0x5f
 8001b46:	d906      	bls.n	8001b56 <GetConstantFilter+0x1e2>
	  		{
	  		    b_i = 0.50390953;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <GetConstantFilter+0x1fc>)
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <GetConstantFilter+0x25c>)
 8001b4c:	601a      	str	r2, [r3, #0]
	  		    a_i = 0.24804523;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <GetConstantFilter+0x204>)
 8001b50:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <GetConstantFilter+0x260>)
 8001b52:	601a      	str	r2, [r3, #0]
	  		    //FrequencySpeedFilter = 10;
	  		    break;
 8001b54:	e003      	b.n	8001b5e <GetConstantFilter+0x1ea>
	  		}
	  		else
	  		{
	  			FrequencyCase = 1;
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <GetConstantFilter+0x1f4>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
	  		}

}
}
 8001b5c:	e7ff      	b.n	8001b5e <GetConstantFilter+0x1ea>
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	20000002 	.word	0x20000002
 8001b6c:	20000001 	.word	0x20000001
 8001b70:	200004bc 	.word	0x200004bc
 8001b74:	3f7814f7 	.word	0x3f7814f7
 8001b78:	200004c0 	.word	0x200004c0
 8001b7c:	3c7d6114 	.word	0x3c7d6114
 8001b80:	3f7067ad 	.word	0x3f7067ad
 8001b84:	3cf98537 	.word	0x3cf98537
 8001b88:	3f68f558 	.word	0x3f68f558
 8001b8c:	3d38553e 	.word	0x3d38553e
 8001b90:	3f5ab745 	.word	0x3f5ab745
 8001b94:	3d9522eb 	.word	0x3d9522eb
 8001b98:	3f4d4797 	.word	0x3f4d4797
 8001b9c:	3dcae1a3 	.word	0x3dcae1a3
 8001ba0:	3f409544 	.word	0x3f409544
 8001ba4:	3dfdaaf1 	.word	0x3dfdaaf1
 8001ba8:	3f349113 	.word	0x3f349113
 8001bac:	3e16dddb 	.word	0x3e16dddb
 8001bb0:	3f292d63 	.word	0x3f292d63
 8001bb4:	3e2da539 	.word	0x3e2da539
 8001bb8:	3f1e5df8 	.word	0x3f1e5df8
 8001bbc:	3e434410 	.word	0x3e434410
 8001bc0:	3f1417c8 	.word	0x3f1417c8
 8001bc4:	3e57d06f 	.word	0x3e57d06f
 8001bc8:	3f0a50df 	.word	0x3f0a50df
 8001bcc:	3e6b5e42 	.word	0x3e6b5e42
 8001bd0:	3f010037 	.word	0x3f010037
 8001bd4:	3e7dff92 	.word	0x3e7dff92

08001bd8 <EnablePhaseA>:
//----------------------------FINE  CONTROLLARE NON FUNZIONANTE--------------------------

//---------------------------- ENABLE PIN STEPPER MOTOR----------------------------------

void EnablePhaseA(void)  // Phase A
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Enable_A_PhaseStepper_Pin, GPIO_PIN_SET); //Enable PhaseA with PA8 - D7
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be2:	4802      	ldr	r0, [pc, #8]	; (8001bec <EnablePhaseA+0x14>)
 8001be4:	f000 fff0 	bl	8002bc8 <HAL_GPIO_WritePin>

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40020000 	.word	0x40020000

08001bf0 <EnablePhaseB>:
	HAL_GPIO_WritePin(GPIOA, Enable_A_PhaseStepper_Pin, GPIO_PIN_RESET); //Enable PhaseA with PA8 - D7

}

void EnablePhaseB(void)  // Phase B
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Enable_B_PhaseStepper_Pin, GPIO_PIN_SET); //Enable PhaseA with PA8 - D7
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <EnablePhaseB+0x14>)
 8001bfc:	f000 ffe4 	bl	8002bc8 <HAL_GPIO_WritePin>

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_TIM_PeriodElapsedCallback>:
}


// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim6)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d006      	beq.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  //TickSerial = 1;
  }
  else if (htim == &htim7)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d102      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  TickSerial = 1;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000248 	.word	0x20000248
 8001c38:	20000290 	.word	0x20000290
 8001c3c:	200004fa 	.word	0x200004fa

08001c40 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	b08f      	sub	sp, #60	; 0x3c
 8001c46:	af0a      	add	r7, sp, #40	; 0x28
 8001c48:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f003 fe0c 	bl	8005868 <osDelay>
    //printf("Task1 \n");
		 if((EncoderSpeedRPSold == EncoderSpeedRPS) && (IncrementSpeedCheckDouble >=10))
 8001c50:	4b3b      	ldr	r3, [pc, #236]	; (8001d40 <StartTask1+0x100>)
 8001c52:	ed93 7a00 	vldr	s14, [r3]
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <StartTask1+0x104>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d114      	bne.n	8001c90 <StartTask1+0x50>
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <StartTask1+0x108>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d910      	bls.n	8001c90 <StartTask1+0x50>
		 {
			EncoderSpeedRPS = 0.0;
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <StartTask1+0x104>)
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
			EncoderSpeedRPM = 0.0;
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <StartTask1+0x10c>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
			EncoderSpeedUnit = 0.0;
 8001c7e:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <StartTask1+0x110>)
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
			EncoderSpeedRPSold = EncoderSpeedRPS;
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <StartTask1+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <StartTask1+0x100>)
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e009      	b.n	8001ca4 <StartTask1+0x64>
		 }
		 else
		 {
			EncoderSpeedRPSold = EncoderSpeedRPS;
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <StartTask1+0x104>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2a      	ldr	r2, [pc, #168]	; (8001d40 <StartTask1+0x100>)
 8001c96:	6013      	str	r3, [r2, #0]
			IncrementSpeedCheckDouble++;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <StartTask1+0x108>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <StartTask1+0x108>)
 8001ca2:	701a      	strb	r2, [r3, #0]
		 }

		 sprintf(MSG, "Px;%d;%d;%.3f;%.3f;%.3f;%.3f;%.3f;Sx\r",
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <StartTask1+0x114>)
 8001ca6:	681e      	ldr	r6, [r3, #0]
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <StartTask1+0x118>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <StartTask1+0x11c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc68 	bl	8000588 <__aeabi_f2d>
 8001cb8:	4604      	mov	r4, r0
 8001cba:	460d      	mov	r5, r1
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <StartTask1+0x120>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc61 	bl	8000588 <__aeabi_f2d>
 8001cc6:	4680      	mov	r8, r0
 8001cc8:	4689      	mov	r9, r1
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <StartTask1+0x104>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc5a 	bl	8000588 <__aeabi_f2d>
 8001cd4:	4682      	mov	sl, r0
 8001cd6:	468b      	mov	fp, r1
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <StartTask1+0x10c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc53 	bl	8000588 <__aeabi_f2d>
 8001ce2:	e9c7 0100 	strd	r0, r1, [r7]
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <StartTask1+0x110>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc4c 	bl	8000588 <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001cf8:	ed97 7b00 	vldr	d7, [r7]
 8001cfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d00:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d04:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d08:	e9cd 4500 	strd	r4, r5, [sp]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	4632      	mov	r2, r6
 8001d10:	4914      	ldr	r1, [pc, #80]	; (8001d64 <StartTask1+0x124>)
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <StartTask1+0x128>)
 8001d14:	f006 feca 	bl	8008aac <siprintf>
				 PositionMotor,
				 KinematicPositionUnit,
				 EncoderSpeedRPS,
				 EncoderSpeedRPM,
				 EncoderSpeedUnit);
				 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 0xFFFF);
 8001d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d1c:	22c8      	movs	r2, #200	; 0xc8
 8001d1e:	4912      	ldr	r1, [pc, #72]	; (8001d68 <StartTask1+0x128>)
 8001d20:	4812      	ldr	r0, [pc, #72]	; (8001d6c <StartTask1+0x12c>)
 8001d22:	f003 f8c7 	bl	8004eb4 <HAL_UART_Transmit>
				 sprintf(CR,"\n");   											//Indispensable for Send Value without error to row empty
 8001d26:	4912      	ldr	r1, [pc, #72]	; (8001d70 <StartTask1+0x130>)
 8001d28:	4812      	ldr	r0, [pc, #72]	; (8001d74 <StartTask1+0x134>)
 8001d2a:	f006 febf 	bl	8008aac <siprintf>
				 HAL_UART_Transmit(&huart2, CR, sizeof(CR), 0xFFFF);        //Indispensable for Send Value without error to row empty
 8001d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d32:	2202      	movs	r2, #2
 8001d34:	490f      	ldr	r1, [pc, #60]	; (8001d74 <StartTask1+0x134>)
 8001d36:	480d      	ldr	r0, [pc, #52]	; (8001d6c <StartTask1+0x12c>)
 8001d38:	f003 f8bc 	bl	8004eb4 <HAL_UART_Transmit>
    osDelay(1);
 8001d3c:	e785      	b.n	8001c4a <StartTask1+0xa>
 8001d3e:	bf00      	nop
 8001d40:	200004e0 	.word	0x200004e0
 8001d44:	200004d8 	.word	0x200004d8
 8001d48:	200004f0 	.word	0x200004f0
 8001d4c:	200004dc 	.word	0x200004dc
 8001d50:	200004e4 	.word	0x200004e4
 8001d54:	20000324 	.word	0x20000324
 8001d58:	200004cc 	.word	0x200004cc
 8001d5c:	200004c8 	.word	0x200004c8
 8001d60:	200004d4 	.word	0x200004d4
 8001d64:	0800b020 	.word	0x0800b020
 8001d68:	20000328 	.word	0x20000328
 8001d6c:	200002d8 	.word	0x200002d8
 8001d70:	0800b048 	.word	0x0800b048
 8001d74:	200003f0 	.word	0x200003f0

08001d78 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f003 fd71 	bl	8005868 <osDelay>
 8001d86:	e7fb      	b.n	8001d80 <StartTask2+0x8>

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8c:	b672      	cpsid	i
}
 8001d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <Error_Handler+0x8>

08001d92 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_MspInit+0x54>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_MspInit+0x54>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_MspInit+0x54>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	603b      	str	r3, [r7, #0]
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_MspInit+0x54>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_MspInit+0x54>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_MspInit+0x54>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	210f      	movs	r1, #15
 8001dea:	f06f 0001 	mvn.w	r0, #1
 8001dee:	f000 fb5d 	bl	80024ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <HAL_TIM_Base_MspInit+0x98>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10e      	bne.n	8001e30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e2e:	e02e      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM6)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <HAL_TIM_Base_MspInit+0xa0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
}
 8001e56:	e01a      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM7)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_TIM_Base_MspInit+0xa4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d115      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e6c:	f043 0320 	orr.w	r3, r3, #32
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_TIM_Base_MspInit+0x9c>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2105      	movs	r1, #5
 8001e82:	2037      	movs	r0, #55	; 0x37
 8001e84:	f000 fb12 	bl	80024ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e88:	2037      	movs	r0, #55	; 0x37
 8001e8a:	f000 fb3b 	bl	8002504 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40001000 	.word	0x40001000
 8001ea4:	40001400 	.word	0x40001400

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <HAL_UART_MspInit+0x84>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d12b      	bne.n	8001f22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a17      	ldr	r2, [pc, #92]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_UART_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f02:	230c      	movs	r3, #12
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f12:	2307      	movs	r3, #7
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_UART_MspInit+0x8c>)
 8001f1e:	f000 fb09 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f22:	bf00      	nop
 8001f24:	3728      	adds	r7, #40	; 0x28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000

08001f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	; 0x38
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_InitTick+0xe8>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_InitTick+0xe8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_InitTick+0xe8>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f64:	f107 0210 	add.w	r2, r7, #16
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f876 	bl	8003060 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f7e:	f001 f847 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8001f82:	6378      	str	r0, [r7, #52]	; 0x34
 8001f84:	e004      	b.n	8001f90 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f86:	f001 f843 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_InitTick+0xec>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_InitTick+0xf0>)
 8001fa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_InitTick+0xf0>)
 8001fa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fac:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_InitTick+0xf0>)
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_InitTick+0xf0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_InitTick+0xf0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_InitTick+0xf0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <HAL_InitTick+0xf0>)
 8001fc8:	f001 fe08 	bl	8003bdc <HAL_TIM_Base_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d11b      	bne.n	8002012 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001fda:	4813      	ldr	r0, [pc, #76]	; (8002028 <HAL_InitTick+0xf0>)
 8001fdc:	f001 feee 	bl	8003dbc <HAL_TIM_Base_Start_IT>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d111      	bne.n	8002012 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fee:	201c      	movs	r0, #28
 8001ff0:	f000 fa88 	bl	8002504 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	d808      	bhi.n	800200c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	201c      	movs	r0, #28
 8002000:	f000 fa54 	bl	80024ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002004:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_InitTick+0xf4>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e002      	b.n	8002012 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002016:	4618      	mov	r0, r3
 8002018:	3738      	adds	r7, #56	; 0x38
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	431bde83 	.word	0x431bde83
 8002028:	200004fc 	.word	0x200004fc
 800202c:	2000000c 	.word	0x2000000c

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8002060:	2001      	movs	r0, #1
 8002062:	f000 fe0b 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}

0800206a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 800206e:	2002      	movs	r0, #2
 8002070:	f000 fe04 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <TIM2_IRQHandler+0x10>)
 800207e:	f001 ff63 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200004fc 	.word	0x200004fc

0800208c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002090:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002094:	f000 fdf2 	bl	8002c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM7_IRQHandler+0x10>)
 80020a2:	f001 ff51 	bl	8003f48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000290 	.word	0x20000290

080020b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_kill>:

int _kill(int pid, int sig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ca:	f006 f845 	bl	8008158 <__errno>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2216      	movs	r2, #22
 80020d2:	601a      	str	r2, [r3, #0]
  return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_exit>:

void _exit (int status)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffe7 	bl	80020c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f2:	e7fe      	b.n	80020f2 <_exit+0x12>

080020f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002106:	f3af 8000 	nop.w
 800210a:	4601      	mov	r1, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	60ba      	str	r2, [r7, #8]
 8002112:	b2ca      	uxtb	r2, r1
 8002114:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	dbf0      	blt.n	8002106 <_read+0x12>
    //ITM_SendChart(*ptr++);
  }

  return len;
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	e009      	b.n	8002154 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	60ba      	str	r2, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3301      	adds	r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <_write+0x12>
  }
  return len;
 800215c:	687b      	ldr	r3, [r7, #4]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_close>:

int _close(int file)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	605a      	str	r2, [r3, #4]
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_isatty>:

int _isatty(int file)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f005 ffaa 	bl	8008158 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20020000 	.word	0x20020000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000544 	.word	0x20000544
 8002238:	20004eb0 	.word	0x20004eb0

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002298 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002266:	490e      	ldr	r1, [pc, #56]	; (80022a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800227c:	4c0b      	ldr	r4, [pc, #44]	; (80022ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800228a:	f7ff ffd7 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f005 ff69 	bl	8008164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002292:	f7fe fea5 	bl	8000fe0 <main>
  bx  lr    
 8002296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80022a4:	0800b7dc 	.word	0x0800b7dc
  ldr r2, =_sbss
 80022a8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80022ac:	20004eac 	.word	0x20004eac

080022b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <HAL_Init+0x40>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <HAL_Init+0x40>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_Init+0x40>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 f8c5 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f7ff fe28 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7ff fd5e 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000548 	.word	0x20000548

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d00f      	beq.n	800249a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d00c      	beq.n	800249a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b05      	cmp	r3, #5
 8002484:	d009      	beq.n	800249a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d006      	beq.n	800249a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d003      	beq.n	800249a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002492:	2190      	movs	r1, #144	; 0x90
 8002494:	4804      	ldr	r0, [pc, #16]	; (80024a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002496:	f7ff fc7c 	bl	8001d92 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff38 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	0800b04c 	.word	0x0800b04c

080024ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d903      	bls.n	80024cc <HAL_NVIC_SetPriority+0x20>
 80024c4:	21a8      	movs	r1, #168	; 0xa8
 80024c6:	480e      	ldr	r0, [pc, #56]	; (8002500 <HAL_NVIC_SetPriority+0x54>)
 80024c8:	f7ff fc63 	bl	8001d92 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b0f      	cmp	r3, #15
 80024d0:	d903      	bls.n	80024da <HAL_NVIC_SetPriority+0x2e>
 80024d2:	21a9      	movs	r1, #169	; 0xa9
 80024d4:	480a      	ldr	r0, [pc, #40]	; (8002500 <HAL_NVIC_SetPriority+0x54>)
 80024d6:	f7ff fc5c 	bl	8001d92 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024da:	f7ff ff3d 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	6978      	ldr	r0, [r7, #20]
 80024e6:	f7ff ff8d 	bl	8002404 <NVIC_EncodePriority>
 80024ea:	4602      	mov	r2, r0
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff5c 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f8:	bf00      	nop
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0800b04c 	.word	0x0800b04c

08002504 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	da03      	bge.n	800251e <HAL_NVIC_EnableIRQ+0x1a>
 8002516:	21bc      	movs	r1, #188	; 0xbc
 8002518:	4805      	ldr	r0, [pc, #20]	; (8002530 <HAL_NVIC_EnableIRQ+0x2c>)
 800251a:	f7ff fc3a 	bl	8001d92 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff26 	bl	8002374 <__NVIC_EnableIRQ>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	0800b04c 	.word	0x0800b04c

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_GPIO_Init+0xf8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d01f      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a36      	ldr	r2, [pc, #216]	; (8002630 <HAL_GPIO_Init+0xfc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01b      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a35      	ldr	r2, [pc, #212]	; (8002634 <HAL_GPIO_Init+0x100>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d017      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a34      	ldr	r2, [pc, #208]	; (8002638 <HAL_GPIO_Init+0x104>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a33      	ldr	r2, [pc, #204]	; (800263c <HAL_GPIO_Init+0x108>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a32      	ldr	r2, [pc, #200]	; (8002640 <HAL_GPIO_Init+0x10c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_GPIO_Init+0x110>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a30      	ldr	r2, [pc, #192]	; (8002648 <HAL_GPIO_Init+0x114>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x5e>
 800258a:	21ac      	movs	r1, #172	; 0xac
 800258c:	482f      	ldr	r0, [pc, #188]	; (800264c <HAL_GPIO_Init+0x118>)
 800258e:	f7ff fc00 	bl	8001d92 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_GPIO_Init+0x74>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x7c>
 80025a8:	21ad      	movs	r1, #173	; 0xad
 80025aa:	4828      	ldr	r0, [pc, #160]	; (800264c <HAL_GPIO_Init+0x118>)
 80025ac:	f7ff fbf1 	bl	8001d92 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d035      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d031      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d02d      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d029      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d025      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80025e0:	d020      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80025ea:	d01b      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80025f4:	d016      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80025fe:	d011      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002608:	d00c      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002612:	d007      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0xf0>
 800261c:	21ae      	movs	r1, #174	; 0xae
 800261e:	480b      	ldr	r0, [pc, #44]	; (800264c <HAL_GPIO_Init+0x118>)
 8002620:	f7ff fbb7 	bl	8001d92 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	e289      	b.n	8002b3e <HAL_GPIO_Init+0x60a>
 800262a:	bf00      	nop
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40021c00 	.word	0x40021c00
 800264c:	0800b0c0 	.word	0x0800b0c0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 8265 	bne.w	8002b38 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002682:	2b02      	cmp	r3, #2
 8002684:	d144      	bne.n	8002710 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00f      	beq.n	80026ae <HAL_GPIO_Init+0x17a>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d00b      	beq.n	80026ae <HAL_GPIO_Init+0x17a>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x17a>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x17a>
 80026a6:	21c0      	movs	r1, #192	; 0xc0
 80026a8:	4831      	ldr	r0, [pc, #196]	; (8002770 <HAL_GPIO_Init+0x23c>)
 80026aa:	f7ff fb72 	bl	8001d92 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d02b      	beq.n	8002774 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00b      	beq.n	800273c <HAL_GPIO_Init+0x208>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x208>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x208>
 8002734:	21d1      	movs	r1, #209	; 0xd1
 8002736:	480e      	ldr	r0, [pc, #56]	; (8002770 <HAL_GPIO_Init+0x23c>)
 8002738:	f7ff fb2b 	bl	8001d92 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x240>
 800276e:	bf00      	nop
 8002770:	0800b0c0 	.word	0x0800b0c0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	f040 810c 	bne.w	800299a <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80e3 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2b09      	cmp	r3, #9
 8002792:	f000 80de 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80d9 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80d4 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80cf 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80ca 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f000 80c5 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f000 80c0 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f000 80bb 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f000 80b6 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f000 80b1 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	f000 80ac 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	f000 80a7 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	2b04      	cmp	r3, #4
 800280a:	f000 80a2 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b04      	cmp	r3, #4
 8002814:	f000 809d 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b05      	cmp	r3, #5
 800281e:	f000 8098 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b05      	cmp	r3, #5
 8002828:	f000 8093 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b09      	cmp	r3, #9
 8002832:	f000 808e 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b06      	cmp	r3, #6
 800283c:	f000 8089 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b09      	cmp	r3, #9
 8002846:	f000 8084 	beq.w	8002952 <HAL_GPIO_Init+0x41e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b07      	cmp	r3, #7
 8002850:	d07f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b07      	cmp	r3, #7
 8002858:	d07b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	2b07      	cmp	r3, #7
 8002860:	d077      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b08      	cmp	r3, #8
 8002868:	d073      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d06f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b08      	cmp	r3, #8
 8002878:	d06b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d067      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b09      	cmp	r3, #9
 8002888:	d063      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b0a      	cmp	r3, #10
 8002890:	d05f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b0a      	cmp	r3, #10
 8002898:	d05b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b0b      	cmp	r3, #11
 80028a0:	d057      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b0c      	cmp	r3, #12
 80028a8:	d053      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d04f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b0d      	cmp	r3, #13
 80028b8:	d04b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d047      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d043      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d03f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d03b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d037      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d033      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d02f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d02b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d027      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b07      	cmp	r3, #7
 8002908:	d023      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b07      	cmp	r3, #7
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b07      	cmp	r3, #7
 8002918:	d01b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b07      	cmp	r3, #7
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d00f      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b09      	cmp	r3, #9
 8002938:	d00b      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b0a      	cmp	r3, #10
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b0a      	cmp	r3, #10
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x41e>
 800294a:	21de      	movs	r1, #222	; 0xde
 800294c:	4880      	ldr	r0, [pc, #512]	; (8002b50 <HAL_GPIO_Init+0x61c>)
 800294e:	f7ff fa20 	bl	8001d92 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	220f      	movs	r2, #15
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	69b9      	ldr	r1, [r7, #24]
 8002996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0203 	and.w	r2, r3, #3
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80ae 	beq.w	8002b38 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_GPIO_Init+0x620>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_GPIO_Init+0x620>)
 80029e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ea:	6453      	str	r3, [r2, #68]	; 0x44
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_GPIO_Init+0x620>)
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f8:	4a57      	ldr	r2, [pc, #348]	; (8002b58 <HAL_GPIO_Init+0x624>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a4f      	ldr	r2, [pc, #316]	; (8002b5c <HAL_GPIO_Init+0x628>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d025      	beq.n	8002a70 <HAL_GPIO_Init+0x53c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <HAL_GPIO_Init+0x62c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d01f      	beq.n	8002a6c <HAL_GPIO_Init+0x538>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a4d      	ldr	r2, [pc, #308]	; (8002b64 <HAL_GPIO_Init+0x630>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d019      	beq.n	8002a68 <HAL_GPIO_Init+0x534>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_GPIO_Init+0x634>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d013      	beq.n	8002a64 <HAL_GPIO_Init+0x530>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_GPIO_Init+0x638>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00d      	beq.n	8002a60 <HAL_GPIO_Init+0x52c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a4a      	ldr	r2, [pc, #296]	; (8002b70 <HAL_GPIO_Init+0x63c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <HAL_GPIO_Init+0x528>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a49      	ldr	r2, [pc, #292]	; (8002b74 <HAL_GPIO_Init+0x640>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d101      	bne.n	8002a58 <HAL_GPIO_Init+0x524>
 8002a54:	2306      	movs	r3, #6
 8002a56:	e00c      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a58:	2307      	movs	r3, #7
 8002a5a:	e00a      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	e008      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a60:	2304      	movs	r3, #4
 8002a62:	e006      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a64:	2303      	movs	r3, #3
 8002a66:	e004      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e002      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_GPIO_Init+0x53e>
 8002a70:	2300      	movs	r3, #0
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a82:	4935      	ldr	r1, [pc, #212]	; (8002b58 <HAL_GPIO_Init+0x624>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a90:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ade:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b32:	4a11      	ldr	r2, [pc, #68]	; (8002b78 <HAL_GPIO_Init+0x644>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	f67f ad85 	bls.w	8002650 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	0800b0c0 	.word	0x0800b0c0
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400
 8002b64:	40020800 	.word	0x40020800
 8002b68:	40020c00 	.word	0x40020c00
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_GPIO_ReadPin+0x1c>
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_GPIO_ReadPin+0x26>
 8002b98:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002b9c:	4809      	ldr	r0, [pc, #36]	; (8002bc4 <HAL_GPIO_ReadPin+0x48>)
 8002b9e:	f7ff f8f8 	bl	8001d92 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e001      	b.n	8002bb8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800b0c0 	.word	0x0800b0c0

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_GPIO_WritePin+0x20>
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x2a>
 8002be8:	f240 119d 	movw	r1, #413	; 0x19d
 8002bec:	480e      	ldr	r0, [pc, #56]	; (8002c28 <HAL_GPIO_WritePin+0x60>)
 8002bee:	f7ff f8d0 	bl	8001d92 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_WritePin+0x40>
 8002bf8:	787b      	ldrb	r3, [r7, #1]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d004      	beq.n	8002c08 <HAL_GPIO_WritePin+0x40>
 8002bfe:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <HAL_GPIO_WritePin+0x60>)
 8002c04:	f7ff f8c5 	bl	8001d92 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002c08:	787b      	ldrb	r3, [r7, #1]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c14:	e003      	b.n	8002c1e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	041a      	lsls	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	619a      	str	r2, [r3, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	0800b0c0 	.word	0x0800b0c0

08002c2c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_GPIO_TogglePin+0x1c>
 8002c3e:	887b      	ldrh	r3, [r7, #2]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_GPIO_TogglePin+0x26>
 8002c48:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002c4c:	480a      	ldr	r0, [pc, #40]	; (8002c78 <HAL_GPIO_TogglePin+0x4c>)
 8002c4e:	f7ff f8a0 	bl	8001d92 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c58:	887a      	ldrh	r2, [r7, #2]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	041a      	lsls	r2, r3, #16
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43d9      	mvns	r1, r3
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	400b      	ands	r3, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0800b0c0 	.word	0x0800b0c0

08002c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fc84 	bl	80015a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40013c00 	.word	0x40013c00

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e18c      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x24>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d904      	bls.n	8002cda <HAL_RCC_ClockConfig+0x2e>
 8002cd0:	f240 215a 	movw	r1, #602	; 0x25a
 8002cd4:	4887      	ldr	r0, [pc, #540]	; (8002ef4 <HAL_RCC_ClockConfig+0x248>)
 8002cd6:	f7ff f85c 	bl	8001d92 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d031      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d02e      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d02b      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d025      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d022      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d01f      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b07      	cmp	r3, #7
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b09      	cmp	r3, #9
 8002d14:	d016      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b0a      	cmp	r3, #10
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b0b      	cmp	r3, #11
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b0d      	cmp	r3, #13
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b0e      	cmp	r3, #14
 8002d32:	d007      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	d004      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x98>
 8002d3a:	f240 215b 	movw	r1, #603	; 0x25b
 8002d3e:	486d      	ldr	r0, [pc, #436]	; (8002ef4 <HAL_RCC_ClockConfig+0x248>)
 8002d40:	f7ff f827 	bl	8001d92 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 030f 	and.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d90c      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e136      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d049      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b5d      	ldr	r3, [pc, #372]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a5c      	ldr	r2, [pc, #368]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002d8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4a56      	ldr	r2, [pc, #344]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d024      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b80      	cmp	r3, #128	; 0x80
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b90      	cmp	r3, #144	; 0x90
 8002dbe:	d01c      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2ba0      	cmp	r3, #160	; 0xa0
 8002dc6:	d018      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2bb0      	cmp	r3, #176	; 0xb0
 8002dce:	d014      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2bc0      	cmp	r3, #192	; 0xc0
 8002dd6:	d010      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2bd0      	cmp	r3, #208	; 0xd0
 8002dde:	d00c      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2be0      	cmp	r3, #224	; 0xe0
 8002de6:	d008      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2bf0      	cmp	r3, #240	; 0xf0
 8002dee:	d004      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x14e>
 8002df0:	f240 217e 	movw	r1, #638	; 0x27e
 8002df4:	483f      	ldr	r0, [pc, #252]	; (8002ef4 <HAL_RCC_ClockConfig+0x248>)
 8002df6:	f7fe ffcc 	bl	8001d92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfa:	4b40      	ldr	r3, [pc, #256]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	493d      	ldr	r1, [pc, #244]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d059      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x196>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d00c      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x196>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x196>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d004      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x196>
 8002e38:	f240 2185 	movw	r1, #645	; 0x285
 8002e3c:	482d      	ldr	r0, [pc, #180]	; (8002ef4 <HAL_RCC_ClockConfig+0x248>)
 8002e3e:	f7fe ffa8 	bl	8001d92 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0bf      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b24      	ldr	r3, [pc, #144]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0af      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0a7      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4919      	ldr	r1, [pc, #100]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7ff fa2c 	bl	80022f8 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7ff fa28 	bl	80022f8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e08f      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCC_ClockConfig+0x250>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d212      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_ClockConfig+0x24c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d007      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e072      	b.n	8002fda <HAL_RCC_ClockConfig+0x32e>
 8002ef4:	0800b134 	.word	0x0800b134
 8002ef8:	40023c00 	.word	0x40023c00
 8002efc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d025      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d018      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x29a>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1c:	d013      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x29a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f26:	d00e      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x29a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f3a:	d004      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x29a>
 8002f3c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002f40:	4828      	ldr	r0, [pc, #160]	; (8002fe4 <HAL_RCC_ClockConfig+0x338>)
 8002f42:	f7fe ff26 	bl	8001d92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <HAL_RCC_ClockConfig+0x33c>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4925      	ldr	r1, [pc, #148]	; (8002fe8 <HAL_RCC_ClockConfig+0x33c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d026      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d018      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2f2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d013      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2f2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f7e:	d00e      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2f2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f88:	d009      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2f2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f92:	d004      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2f2>
 8002f94:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f98:	4812      	ldr	r0, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x338>)
 8002f9a:	f7fe fefa 	bl	8001d92 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x33c>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <HAL_RCC_ClockConfig+0x33c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fb2:	f000 f887 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x33c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x340>)
 8002fc4:	5ccb      	ldrb	r3, [r1, r3]
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x344>)
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x348>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ffb0 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0800b134 	.word	0x0800b134
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	0800b3d8 	.word	0x0800b3d8
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	2000000c 	.word	0x2000000c

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000008 	.word	0x20000008

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	; (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	0800b3e8 	.word	0x0800b3e8

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffdc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0b5b      	lsrs	r3, r3, #13
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	0800b3e8 	.word	0x0800b3e8

08003060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	220f      	movs	r2, #15
 800306e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0203 	and.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003094:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_RCC_GetClockConfig+0x60>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 020f 	and.w	r2, r3, #15
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40023c00 	.word	0x40023c00

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0ae      	sub	sp, #184	; 0xb8
 80030ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ea:	4bcb      	ldr	r3, [pc, #812]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	f200 8206 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x440>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003135 	.word	0x08003135
 8003104:	08003505 	.word	0x08003505
 8003108:	08003505 	.word	0x08003505
 800310c:	08003505 	.word	0x08003505
 8003110:	0800313d 	.word	0x0800313d
 8003114:	08003505 	.word	0x08003505
 8003118:	08003505 	.word	0x08003505
 800311c:	08003505 	.word	0x08003505
 8003120:	08003145 	.word	0x08003145
 8003124:	08003505 	.word	0x08003505
 8003128:	08003505 	.word	0x08003505
 800312c:	08003505 	.word	0x08003505
 8003130:	08003335 	.word	0x08003335
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4bb9      	ldr	r3, [pc, #740]	; (800341c <HAL_RCC_GetSysClockFreq+0x358>)
 8003136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800313a:	e1e7      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800313c:	4bb8      	ldr	r3, [pc, #736]	; (8003420 <HAL_RCC_GetSysClockFreq+0x35c>)
 800313e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003142:	e1e3      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003144:	4bb4      	ldr	r3, [pc, #720]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003150:	4bb1      	ldr	r3, [pc, #708]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d071      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800315c:	4bae      	ldr	r3, [pc, #696]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003168:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800316c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003178:	2300      	movs	r3, #0
 800317a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800317e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003182:	4622      	mov	r2, r4
 8003184:	462b      	mov	r3, r5
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003194:	0150      	lsls	r0, r2, #5
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4621      	mov	r1, r4
 800319c:	1a51      	subs	r1, r2, r1
 800319e:	6439      	str	r1, [r7, #64]	; 0x40
 80031a0:	4629      	mov	r1, r5
 80031a2:	eb63 0301 	sbc.w	r3, r3, r1
 80031a6:	647b      	str	r3, [r7, #68]	; 0x44
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80031b4:	4649      	mov	r1, r9
 80031b6:	018b      	lsls	r3, r1, #6
 80031b8:	4641      	mov	r1, r8
 80031ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031be:	4641      	mov	r1, r8
 80031c0:	018a      	lsls	r2, r1, #6
 80031c2:	4641      	mov	r1, r8
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80031c8:	4649      	mov	r1, r9
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80031dc:	4649      	mov	r1, r9
 80031de:	00cb      	lsls	r3, r1, #3
 80031e0:	4641      	mov	r1, r8
 80031e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e6:	4641      	mov	r1, r8
 80031e8:	00ca      	lsls	r2, r1, #3
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	4622      	mov	r2, r4
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
 80031f6:	462b      	mov	r3, r5
 80031f8:	460a      	mov	r2, r1
 80031fa:	eb42 0303 	adc.w	r3, r2, r3
 80031fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320c:	4629      	mov	r1, r5
 800320e:	024b      	lsls	r3, r1, #9
 8003210:	4621      	mov	r1, r4
 8003212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003216:	4621      	mov	r1, r4
 8003218:	024a      	lsls	r2, r1, #9
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800322c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003230:	f7fd fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4613      	mov	r3, r2
 800323a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800323e:	e067      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003240:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	2200      	movs	r2, #0
 8003248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800324c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	67bb      	str	r3, [r7, #120]	; 0x78
 800325a:	2300      	movs	r3, #0
 800325c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800325e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003274:	0150      	lsls	r0, r2, #5
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4621      	mov	r1, r4
 800327c:	1a51      	subs	r1, r2, r1
 800327e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003280:	4629      	mov	r1, r5
 8003282:	eb63 0301 	sbc.w	r3, r3, r1
 8003286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003294:	4649      	mov	r1, r9
 8003296:	018b      	lsls	r3, r1, #6
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329e:	4641      	mov	r1, r8
 80032a0:	018a      	lsls	r2, r1, #6
 80032a2:	4641      	mov	r1, r8
 80032a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80032a8:	4649      	mov	r1, r9
 80032aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c2:	4692      	mov	sl, r2
 80032c4:	469b      	mov	fp, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	eb1a 0303 	adds.w	r3, sl, r3
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	462b      	mov	r3, r5
 80032d0:	eb4b 0303 	adc.w	r3, fp, r3
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032e2:	4629      	mov	r1, r5
 80032e4:	028b      	lsls	r3, r1, #10
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ec:	4621      	mov	r1, r4
 80032ee:	028a      	lsls	r2, r1, #10
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f8:	2200      	movs	r2, #0
 80032fa:	673b      	str	r3, [r7, #112]	; 0x70
 80032fc:	677a      	str	r2, [r7, #116]	; 0x74
 80032fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003302:	f7fd fcc1 	bl	8000c88 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4613      	mov	r3, r2
 800330c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003310:	4b41      	ldr	r3, [pc, #260]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
 800332e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003332:	e0eb      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003334:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d06b      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b32      	ldr	r3, [pc, #200]	; (8003418 <HAL_RCC_GetSysClockFreq+0x354>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	2200      	movs	r2, #0
 8003354:	66bb      	str	r3, [r7, #104]	; 0x68
 8003356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335e:	663b      	str	r3, [r7, #96]	; 0x60
 8003360:	2300      	movs	r3, #0
 8003362:	667b      	str	r3, [r7, #100]	; 0x64
 8003364:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003368:	4622      	mov	r2, r4
 800336a:	462b      	mov	r3, r5
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	0159      	lsls	r1, r3, #5
 8003376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800337a:	0150      	lsls	r0, r2, #5
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4621      	mov	r1, r4
 8003382:	1a51      	subs	r1, r2, r1
 8003384:	61b9      	str	r1, [r7, #24]
 8003386:	4629      	mov	r1, r5
 8003388:	eb63 0301 	sbc.w	r3, r3, r1
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800339a:	4659      	mov	r1, fp
 800339c:	018b      	lsls	r3, r1, #6
 800339e:	4651      	mov	r1, sl
 80033a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033a4:	4651      	mov	r1, sl
 80033a6:	018a      	lsls	r2, r1, #6
 80033a8:	4651      	mov	r1, sl
 80033aa:	ebb2 0801 	subs.w	r8, r2, r1
 80033ae:	4659      	mov	r1, fp
 80033b0:	eb63 0901 	sbc.w	r9, r3, r1
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c8:	4690      	mov	r8, r2
 80033ca:	4699      	mov	r9, r3
 80033cc:	4623      	mov	r3, r4
 80033ce:	eb18 0303 	adds.w	r3, r8, r3
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	462b      	mov	r3, r5
 80033d6:	eb49 0303 	adc.w	r3, r9, r3
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033e8:	4629      	mov	r1, r5
 80033ea:	024b      	lsls	r3, r1, #9
 80033ec:	4621      	mov	r1, r4
 80033ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033f2:	4621      	mov	r1, r4
 80033f4:	024a      	lsls	r2, r1, #9
 80033f6:	4610      	mov	r0, r2
 80033f8:	4619      	mov	r1, r3
 80033fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033fe:	2200      	movs	r2, #0
 8003400:	65bb      	str	r3, [r7, #88]	; 0x58
 8003402:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003408:	f7fd fc3e 	bl	8000c88 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003416:	e065      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x420>
 8003418:	40023800 	.word	0x40023800
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_GetSysClockFreq+0x458>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	4618      	mov	r0, r3
 800342e:	4611      	mov	r1, r2
 8003430:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003434:	653b      	str	r3, [r7, #80]	; 0x50
 8003436:	2300      	movs	r3, #0
 8003438:	657b      	str	r3, [r7, #84]	; 0x54
 800343a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800343e:	4642      	mov	r2, r8
 8003440:	464b      	mov	r3, r9
 8003442:	f04f 0000 	mov.w	r0, #0
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	0159      	lsls	r1, r3, #5
 800344c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003450:	0150      	lsls	r0, r2, #5
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4641      	mov	r1, r8
 8003458:	1a51      	subs	r1, r2, r1
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	4649      	mov	r1, r9
 800345e:	eb63 0301 	sbc.w	r3, r3, r1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003470:	4659      	mov	r1, fp
 8003472:	018b      	lsls	r3, r1, #6
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347a:	4651      	mov	r1, sl
 800347c:	018a      	lsls	r2, r1, #6
 800347e:	4651      	mov	r1, sl
 8003480:	1a54      	subs	r4, r2, r1
 8003482:	4659      	mov	r1, fp
 8003484:	eb63 0501 	sbc.w	r5, r3, r1
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	00eb      	lsls	r3, r5, #3
 8003492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003496:	00e2      	lsls	r2, r4, #3
 8003498:	4614      	mov	r4, r2
 800349a:	461d      	mov	r5, r3
 800349c:	4643      	mov	r3, r8
 800349e:	18e3      	adds	r3, r4, r3
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	464b      	mov	r3, r9
 80034a4:	eb45 0303 	adc.w	r3, r5, r3
 80034a8:	607b      	str	r3, [r7, #4]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034b6:	4629      	mov	r1, r5
 80034b8:	028b      	lsls	r3, r1, #10
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c0:	4621      	mov	r1, r4
 80034c2:	028a      	lsls	r2, r1, #10
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034cc:	2200      	movs	r2, #0
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80034d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034d6:	f7fd fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4613      	mov	r3, r2
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_GetSysClockFreq+0x458>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	0f1b      	lsrs	r3, r3, #28
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80034f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003502:	e003      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800350a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003510:	4618      	mov	r0, r3
 8003512:	37b8      	adds	r7, #184	; 0xb8
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400

08003524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e347      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d904      	bls.n	8003548 <HAL_RCC_OscConfig+0x24>
 800353e:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8003542:	4893      	ldr	r0, [pc, #588]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f7fe fc25 	bl	8001d92 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8096 	beq.w	8003682 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00e      	beq.n	800357c <HAL_RCC_OscConfig+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003566:	d009      	beq.n	800357c <HAL_RCC_OscConfig+0x58>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d004      	beq.n	800357c <HAL_RCC_OscConfig+0x58>
 8003572:	f640 5115 	movw	r1, #3349	; 0xd15
 8003576:	4886      	ldr	r0, [pc, #536]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f7fe fc0b 	bl	8001d92 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800357c:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b04      	cmp	r3, #4
 8003586:	d019      	beq.n	80035bc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003588:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003590:	2b08      	cmp	r3, #8
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003594:	4b7f      	ldr	r3, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a0:	d00c      	beq.n	80035bc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a2:	4b7c      	ldr	r3, [pc, #496]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d112      	bne.n	80035d4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b79      	ldr	r3, [pc, #484]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035bc:	4b75      	ldr	r3, [pc, #468]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d05b      	beq.n	8003680 <HAL_RCC_OscConfig+0x15c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d157      	bne.n	8003680 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e2f8      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d106      	bne.n	80035ec <HAL_RCC_OscConfig+0xc8>
 80035de:	4b6d      	ldr	r3, [pc, #436]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e01d      	b.n	8003628 <HAL_RCC_OscConfig+0x104>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0xec>
 80035f6:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a66      	ldr	r2, [pc, #408]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b64      	ldr	r3, [pc, #400]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a63      	ldr	r2, [pc, #396]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	e00b      	b.n	8003628 <HAL_RCC_OscConfig+0x104>
 8003610:	4b60      	ldr	r3, [pc, #384]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5f      	ldr	r2, [pc, #380]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d013      	beq.n	8003658 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fe62 	bl	80022f8 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe fe5e 	bl	80022f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e2bd      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <HAL_RCC_OscConfig+0x114>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fe fe4e 	bl	80022f8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fe fe4a 	bl	80022f8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e2a9      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003672:	4b48      	ldr	r3, [pc, #288]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x13c>
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 808c 	beq.w	80037a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCC_OscConfig+0x186>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d004      	beq.n	80036aa <HAL_RCC_OscConfig+0x186>
 80036a0:	f640 514d 	movw	r1, #3405	; 0xd4d
 80036a4:	483a      	ldr	r0, [pc, #232]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	f7fe fb74 	bl	8001d92 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b1f      	cmp	r3, #31
 80036b0:	d904      	bls.n	80036bc <HAL_RCC_OscConfig+0x198>
 80036b2:	f640 514e 	movw	r1, #3406	; 0xd4e
 80036b6:	4836      	ldr	r0, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f7fe fb6b 	bl	8001d92 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036bc:	4b35      	ldr	r3, [pc, #212]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00b      	beq.n	80036f8 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d11c      	bne.n	8003726 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d116      	bne.n	8003726 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_OscConfig+0x1ec>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e25a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	491d      	ldr	r1, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003720:	4313      	orrs	r3, r2
 8003722:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003724:	e040      	b.n	80037a8 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fde0 	bl	80022f8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe fddc 	bl	80022f8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e23b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490a      	ldr	r1, [pc, #40]	; (8003794 <HAL_RCC_OscConfig+0x270>)
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	e01b      	b.n	80037a8 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x274>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fe fdbf 	bl	80022f8 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377c:	e00e      	b.n	800379c <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377e:	f7fe fdbb 	bl	80022f8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d907      	bls.n	800379c <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e21a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
 8003790:	0800b1a8 	.word	0x0800b1a8
 8003794:	40023800 	.word	0x40023800
 8003798:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379c:	4b74      	ldr	r3, [pc, #464]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ea      	bne.n	800377e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03d      	beq.n	8003830 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_OscConfig+0x2aa>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d004      	beq.n	80037ce <HAL_RCC_OscConfig+0x2aa>
 80037c4:	f640 5194 	movw	r1, #3476	; 0xd94
 80037c8:	486a      	ldr	r0, [pc, #424]	; (8003974 <HAL_RCC_OscConfig+0x450>)
 80037ca:	f7fe fae2 	bl	8001d92 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x454>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fe fd8c 	bl	80022f8 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe fd88 	bl	80022f8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1e7      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2c0>
 8003802:	e015      	b.n	8003830 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x454>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fe fd75 	bl	80022f8 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fd71 	bl	80022f8 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1d0      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b52      	ldr	r3, [pc, #328]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80b0 	beq.w	800399e <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_RCC_OscConfig+0x340>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d008      	beq.n	8003864 <HAL_RCC_OscConfig+0x340>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d004      	beq.n	8003864 <HAL_RCC_OscConfig+0x340>
 800385a:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 800385e:	4845      	ldr	r0, [pc, #276]	; (8003974 <HAL_RCC_OscConfig+0x450>)
 8003860:	f7fe fa97 	bl	8001d92 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4b42      	ldr	r3, [pc, #264]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10f      	bne.n	8003890 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a3d      	ldr	r2, [pc, #244]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388c:	2301      	movs	r3, #1
 800388e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCC_OscConfig+0x458>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d118      	bne.n	80038ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389c:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_RCC_OscConfig+0x458>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a36      	ldr	r2, [pc, #216]	; (800397c <HAL_RCC_OscConfig+0x458>)
 80038a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a8:	f7fe fd26 	bl	80022f8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fe fd22 	bl	80022f8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e181      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c2:	4b2e      	ldr	r3, [pc, #184]	; (800397c <HAL_RCC_OscConfig+0x458>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x3c0>
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	4a25      	ldr	r2, [pc, #148]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	; 0x70
 80038e2:	e01c      	b.n	800391e <HAL_RCC_OscConfig+0x3fa>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d10c      	bne.n	8003906 <HAL_RCC_OscConfig+0x3e2>
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a1f      	ldr	r2, [pc, #124]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
 8003904:	e00b      	b.n	800391e <HAL_RCC_OscConfig+0x3fa>
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003918:	f023 0304 	bic.w	r3, r3, #4
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe fce7 	bl	80022f8 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe fce3 	bl	80022f8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	; 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e140      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCC_OscConfig+0x44c>)
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ee      	beq.n	800392e <HAL_RCC_OscConfig+0x40a>
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fe fcd1 	bl	80022f8 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003958:	e012      	b.n	8003980 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe fccd 	bl	80022f8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d909      	bls.n	8003980 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e12a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
 8003970:	40023800 	.word	0x40023800
 8003974:	0800b1a8 	.word	0x0800b1a8
 8003978:	42470e80 	.word	0x42470e80
 800397c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003980:	4b93      	ldr	r3, [pc, #588]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e6      	bne.n	800395a <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003992:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a8e      	ldr	r2, [pc, #568]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_RCC_OscConfig+0x49c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d008      	beq.n	80039c0 <HAL_RCC_OscConfig+0x49c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d004      	beq.n	80039c0 <HAL_RCC_OscConfig+0x49c>
 80039b6:	f640 6103 	movw	r1, #3587	; 0xe03
 80039ba:	4886      	ldr	r0, [pc, #536]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 80039bc:	f7fe f9e9 	bl	8001d92 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80fd 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ca:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	f000 80b6 	beq.w	8003b44 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	f040 809a 	bne.w	8003b16 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_OscConfig+0x4da>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f2:	d004      	beq.n	80039fe <HAL_RCC_OscConfig+0x4da>
 80039f4:	f640 610c 	movw	r1, #3596	; 0xe0c
 80039f8:	4876      	ldr	r0, [pc, #472]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 80039fa:	f7fe f9ca 	bl	8001d92 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	2b3f      	cmp	r3, #63	; 0x3f
 8003a04:	d904      	bls.n	8003a10 <HAL_RCC_OscConfig+0x4ec>
 8003a06:	f640 610d 	movw	r1, #3597	; 0xe0d
 8003a0a:	4872      	ldr	r0, [pc, #456]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 8003a0c:	f7fe f9c1 	bl	8001d92 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	2b31      	cmp	r3, #49	; 0x31
 8003a16:	d904      	bls.n	8003a22 <HAL_RCC_OscConfig+0x4fe>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003a20:	d904      	bls.n	8003a2c <HAL_RCC_OscConfig+0x508>
 8003a22:	f640 610e 	movw	r1, #3598	; 0xe0e
 8003a26:	486b      	ldr	r0, [pc, #428]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 8003a28:	f7fe f9b3 	bl	8001d92 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d010      	beq.n	8003a56 <HAL_RCC_OscConfig+0x532>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d00c      	beq.n	8003a56 <HAL_RCC_OscConfig+0x532>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	2b06      	cmp	r3, #6
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_OscConfig+0x532>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCC_OscConfig+0x532>
 8003a4c:	f640 610f 	movw	r1, #3599	; 0xe0f
 8003a50:	4860      	ldr	r0, [pc, #384]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 8003a52:	f7fe f99e 	bl	8001d92 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d903      	bls.n	8003a66 <HAL_RCC_OscConfig+0x542>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	2b0f      	cmp	r3, #15
 8003a64:	d904      	bls.n	8003a70 <HAL_RCC_OscConfig+0x54c>
 8003a66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003a6a:	485a      	ldr	r0, [pc, #360]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 8003a6c:	f7fe f991 	bl	8001d92 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d903      	bls.n	8003a80 <HAL_RCC_OscConfig+0x55c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	d904      	bls.n	8003a8a <HAL_RCC_OscConfig+0x566>
 8003a80:	f640 6111 	movw	r1, #3601	; 0xe11
 8003a84:	4853      	ldr	r0, [pc, #332]	; (8003bd4 <HAL_RCC_OscConfig+0x6b0>)
 8003a86:	f7fe f984 	bl	8001d92 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_OscConfig+0x6b4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fc32 	bl	80022f8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fe fc2e 	bl	80022f8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e08d      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b49      	ldr	r3, [pc, #292]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	019b      	lsls	r3, r3, #6
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	071b      	lsls	r3, r3, #28
 8003ae2:	493b      	ldr	r1, [pc, #236]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_OscConfig+0x6b4>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fe fc03 	bl	80022f8 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe fbff 	bl	80022f8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e05e      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x5d2>
 8003b14:	e056      	b.n	8003bc4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <HAL_RCC_OscConfig+0x6b4>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fbec 	bl	80022f8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fbe8 	bl	80022f8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e047      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x600>
 8003b42:	e03f      	b.n	8003bc4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e03a      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b50:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d030      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d129      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d122      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d119      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d10f      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	0800b1a8 	.word	0x0800b1a8
 8003bd8:	42470060 	.word	0x42470060

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0c5      	b.n	8003d7a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a64      	ldr	r2, [pc, #400]	; (8003d84 <HAL_TIM_Base_Init+0x1a8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d045      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d040      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <HAL_TIM_Base_Init+0x1ac>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d03b      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_TIM_Base_Init+0x1b0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d036      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_TIM_Base_Init+0x1b4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d031      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5b      	ldr	r2, [pc, #364]	; (8003d94 <HAL_TIM_Base_Init+0x1b8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02c      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_TIM_Base_Init+0x1bc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d027      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_TIM_Base_Init+0x1c0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d022      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_TIM_Base_Init+0x1c4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d01d      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a55      	ldr	r2, [pc, #340]	; (8003da4 <HAL_TIM_Base_Init+0x1c8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d018      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a54      	ldr	r2, [pc, #336]	; (8003da8 <HAL_TIM_Base_Init+0x1cc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_TIM_Base_Init+0x1d0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00e      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a51      	ldr	r2, [pc, #324]	; (8003db0 <HAL_TIM_Base_Init+0x1d4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a4f      	ldr	r2, [pc, #316]	; (8003db4 <HAL_TIM_Base_Init+0x1d8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_TIM_Base_Init+0xa8>
 8003c7a:	f240 1113 	movw	r1, #275	; 0x113
 8003c7e:	484e      	ldr	r0, [pc, #312]	; (8003db8 <HAL_TIM_Base_Init+0x1dc>)
 8003c80:	f7fe f887 	bl	8001d92 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d014      	beq.n	8003cb6 <HAL_TIM_Base_Init+0xda>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d010      	beq.n	8003cb6 <HAL_TIM_Base_Init+0xda>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_TIM_Base_Init+0xda>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d008      	beq.n	8003cb6 <HAL_TIM_Base_Init+0xda>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_Base_Init+0xda>
 8003cac:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003cb0:	4841      	ldr	r0, [pc, #260]	; (8003db8 <HAL_TIM_Base_Init+0x1dc>)
 8003cb2:	f7fe f86e 	bl	8001d92 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIM_Base_Init+0x100>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIM_Base_Init+0x100>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_Base_Init+0x100>
 8003cd2:	f240 1115 	movw	r1, #277	; 0x115
 8003cd6:	4838      	ldr	r0, [pc, #224]	; (8003db8 <HAL_TIM_Base_Init+0x1dc>)
 8003cd8:	f7fe f85b 	bl	8001d92 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_TIM_Base_Init+0x11a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIM_Base_Init+0x11a>
 8003cec:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003cf0:	4831      	ldr	r0, [pc, #196]	; (8003db8 <HAL_TIM_Base_Init+0x1dc>)
 8003cf2:	f7fe f84e 	bl	8001d92 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe f878 	bl	8001e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 fdc0 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40001000 	.word	0x40001000
 8003d98:	40001400 	.word	0x40001400
 8003d9c:	40010400 	.word	0x40010400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40014400 	.word	0x40014400
 8003da8:	40014800 	.word	0x40014800
 8003dac:	40001800 	.word	0x40001800
 8003db0:	40001c00 	.word	0x40001c00
 8003db4:	40002000 	.word	0x40002000
 8003db8:	0800b21c 	.word	0x0800b21c

08003dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <HAL_TIM_Base_Start_IT+0x154>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d045      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd6:	d040      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_TIM_Base_Start_IT+0x158>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d03b      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_TIM_Base_Start_IT+0x15c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d036      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <HAL_TIM_Base_Start_IT+0x160>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d031      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a49      	ldr	r2, [pc, #292]	; (8003f20 <HAL_TIM_Base_Start_IT+0x164>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d02c      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a47      	ldr	r2, [pc, #284]	; (8003f24 <HAL_TIM_Base_Start_IT+0x168>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d027      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a46      	ldr	r2, [pc, #280]	; (8003f28 <HAL_TIM_Base_Start_IT+0x16c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a44      	ldr	r2, [pc, #272]	; (8003f2c <HAL_TIM_Base_Start_IT+0x170>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a43      	ldr	r2, [pc, #268]	; (8003f30 <HAL_TIM_Base_Start_IT+0x174>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a41      	ldr	r2, [pc, #260]	; (8003f34 <HAL_TIM_Base_Start_IT+0x178>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <HAL_TIM_Base_Start_IT+0x17c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a3e      	ldr	r2, [pc, #248]	; (8003f3c <HAL_TIM_Base_Start_IT+0x180>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <HAL_TIM_Base_Start_IT+0x184>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_Base_Start_IT+0x9e>
 8003e50:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003e54:	483b      	ldr	r0, [pc, #236]	; (8003f44 <HAL_TIM_Base_Start_IT+0x188>)
 8003e56:	f7fd ff9c 	bl	8001d92 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e04e      	b.n	8003f08 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <HAL_TIM_Base_Start_IT+0x154>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e94:	d01d      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_TIM_Base_Start_IT+0x158>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <HAL_TIM_Base_Start_IT+0x15c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	; (8003f1c <HAL_TIM_Base_Start_IT+0x160>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_TIM_Base_Start_IT+0x16c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1a      	ldr	r2, [pc, #104]	; (8003f2c <HAL_TIM_Base_Start_IT+0x170>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_TIM_Base_Start_IT+0x116>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_TIM_Base_Start_IT+0x17c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d111      	bne.n	8003ef6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d010      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	e007      	b.n	8003f06 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40010000 	.word	0x40010000
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40001000 	.word	0x40001000
 8003f24:	40001400 	.word	0x40001400
 8003f28:	40010400 	.word	0x40010400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40014400 	.word	0x40014400
 8003f34:	40014800 	.word	0x40014800
 8003f38:	40001800 	.word	0x40001800
 8003f3c:	40001c00 	.word	0x40001c00
 8003f40:	40002000 	.word	0x40002000
 8003f44:	0800b21c 	.word	0x0800b21c

08003f48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d122      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0202 	mvn.w	r2, #2
 8003f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fc6e 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fc60 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fc71 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d122      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0204 	mvn.w	r2, #4
 8003fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fc44 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 8003fe4:	e005      	b.n	8003ff2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fc36 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fc47 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b08      	cmp	r3, #8
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0208 	mvn.w	r2, #8
 800401c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2204      	movs	r2, #4
 8004022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fc1a 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fc0c 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fc1d 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b10      	cmp	r3, #16
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b10      	cmp	r3, #16
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0210 	mvn.w	r2, #16
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2208      	movs	r2, #8
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fbf0 	bl	800486c <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fbe2 	bl	8004858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fbf3 	bl	8004880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0201 	mvn.w	r2, #1
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fd fd9e 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fdfa 	bl	8004cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d10e      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d107      	bne.n	8004124 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800411c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fbb8 	bl	8004894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b20      	cmp	r3, #32
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b20      	cmp	r3, #32
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0220 	mvn.w	r2, #32
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fdc4 	bl	8004cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIM_ConfigClockSource+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e35c      	b.n	800482e <HAL_TIM_ConfigClockSource+0x6d6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418c:	d029      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b70      	cmp	r3, #112	; 0x70
 8004194:	d025      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419e:	d020      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d01c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b50      	cmp	r3, #80	; 0x50
 80041ae:	d018      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b60      	cmp	r3, #96	; 0x60
 80041b6:	d014      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d00c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d008      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b30      	cmp	r3, #48	; 0x30
 80041d6:	d004      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x8a>
 80041d8:	f241 41b7 	movw	r1, #5303	; 0x14b7
 80041dc:	4893      	ldr	r0, [pc, #588]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 80041de:	f7fd fdd8 	bl	8001d92 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420a:	f000 812b 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x30c>
 800420e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004212:	f200 82ff 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	d02e      	beq.n	800427a <HAL_TIM_ConfigClockSource+0x122>
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004220:	f200 82f8 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004224:	2b70      	cmp	r3, #112	; 0x70
 8004226:	f000 8082 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x1d6>
 800422a:	2b70      	cmp	r3, #112	; 0x70
 800422c:	f200 82f2 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004230:	2b60      	cmp	r3, #96	; 0x60
 8004232:	f000 81f9 	beq.w	8004628 <HAL_TIM_ConfigClockSource+0x4d0>
 8004236:	2b60      	cmp	r3, #96	; 0x60
 8004238:	f200 82ec 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 800423c:	2b50      	cmp	r3, #80	; 0x50
 800423e:	f000 8182 	beq.w	8004546 <HAL_TIM_ConfigClockSource+0x3ee>
 8004242:	2b50      	cmp	r3, #80	; 0x50
 8004244:	f200 82e6 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	f000 824d 	beq.w	80046e8 <HAL_TIM_ConfigClockSource+0x590>
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	f200 82e0 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004254:	2b30      	cmp	r3, #48	; 0x30
 8004256:	f000 82a7 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x650>
 800425a:	2b30      	cmp	r3, #48	; 0x30
 800425c:	f200 82da 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 8004260:	2b20      	cmp	r3, #32
 8004262:	f000 82a1 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x650>
 8004266:	2b20      	cmp	r3, #32
 8004268:	f200 82d4 	bhi.w	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 829b 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x650>
 8004272:	2b10      	cmp	r3, #16
 8004274:	f000 8298 	beq.w	80047a8 <HAL_TIM_ConfigClockSource+0x650>
 8004278:	e2cc      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6c      	ldr	r2, [pc, #432]	; (8004430 <HAL_TIM_ConfigClockSource+0x2d8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	f000 82ca 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800428e:	f000 82c4 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a67      	ldr	r2, [pc, #412]	; (8004434 <HAL_TIM_ConfigClockSource+0x2dc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	f000 82be 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a65      	ldr	r2, [pc, #404]	; (8004438 <HAL_TIM_ConfigClockSource+0x2e0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	f000 82b8 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a63      	ldr	r2, [pc, #396]	; (800443c <HAL_TIM_ConfigClockSource+0x2e4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f000 82b2 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a61      	ldr	r2, [pc, #388]	; (8004440 <HAL_TIM_ConfigClockSource+0x2e8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f000 82ac 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5f      	ldr	r2, [pc, #380]	; (8004444 <HAL_TIM_ConfigClockSource+0x2ec>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	f000 82a6 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5d      	ldr	r2, [pc, #372]	; (8004448 <HAL_TIM_ConfigClockSource+0x2f0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	f000 82a0 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a5b      	ldr	r2, [pc, #364]	; (800444c <HAL_TIM_ConfigClockSource+0x2f4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	f000 829a 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a59      	ldr	r2, [pc, #356]	; (8004450 <HAL_TIM_ConfigClockSource+0x2f8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	f000 8294 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a57      	ldr	r2, [pc, #348]	; (8004454 <HAL_TIM_ConfigClockSource+0x2fc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f000 828e 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a55      	ldr	r2, [pc, #340]	; (8004458 <HAL_TIM_ConfigClockSource+0x300>)
 8004304:	4293      	cmp	r3, r2
 8004306:	f000 8288 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a53      	ldr	r2, [pc, #332]	; (800445c <HAL_TIM_ConfigClockSource+0x304>)
 8004310:	4293      	cmp	r3, r2
 8004312:	f000 8282 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a51      	ldr	r2, [pc, #324]	; (8004460 <HAL_TIM_ConfigClockSource+0x308>)
 800431c:	4293      	cmp	r3, r2
 800431e:	f000 827c 	beq.w	800481a <HAL_TIM_ConfigClockSource+0x6c2>
 8004322:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8004326:	4841      	ldr	r0, [pc, #260]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 8004328:	f7fd fd33 	bl	8001d92 <assert_failed>
      break;
 800432c:	e275      	b.n	800481a <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <HAL_TIM_ConfigClockSource+0x2d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d022      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <HAL_TIM_ConfigClockSource+0x2dc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a39      	ldr	r2, [pc, #228]	; (8004438 <HAL_TIM_ConfigClockSource+0x2e0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a38      	ldr	r2, [pc, #224]	; (800443c <HAL_TIM_ConfigClockSource+0x2e4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a38      	ldr	r2, [pc, #224]	; (8004448 <HAL_TIM_ConfigClockSource+0x2f0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a37      	ldr	r2, [pc, #220]	; (800444c <HAL_TIM_ConfigClockSource+0x2f4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a37      	ldr	r2, [pc, #220]	; (8004458 <HAL_TIM_ConfigClockSource+0x300>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0x230>
 800437e:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8004382:	482a      	ldr	r0, [pc, #168]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 8004384:	f7fd fd05 	bl	8001d92 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x260>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d00e      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x260>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d009      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x260>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0x260>
 80043ae:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80043b2:	481e      	ldr	r0, [pc, #120]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 80043b4:	f7fd fced 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c0:	d014      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x294>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d010      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x294>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x294>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d008      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x294>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d004      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0x294>
 80043e2:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80043e6:	4811      	ldr	r0, [pc, #68]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 80043e8:	f7fd fcd3 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d904      	bls.n	80043fe <HAL_TIM_ConfigClockSource+0x2a6>
 80043f4:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80043f8:	480c      	ldr	r0, [pc, #48]	; (800442c <HAL_TIM_ConfigClockSource+0x2d4>)
 80043fa:	f7fd fcca 	bl	8001d92 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	6899      	ldr	r1, [r3, #8]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f000 fb65 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	609a      	str	r2, [r3, #8]
      break;
 800442a:	e1f7      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
 800442c:	0800b21c 	.word	0x0800b21c
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40001000 	.word	0x40001000
 8004444:	40001400 	.word	0x40001400
 8004448:	40010400 	.word	0x40010400
 800444c:	40014000 	.word	0x40014000
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800
 8004458:	40001800 	.word	0x40001800
 800445c:	40001c00 	.word	0x40001c00
 8004460:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a67      	ldr	r2, [pc, #412]	; (8004608 <HAL_TIM_ConfigClockSource+0x4b0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01d      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d018      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a63      	ldr	r2, [pc, #396]	; (800460c <HAL_TIM_ConfigClockSource+0x4b4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a62      	ldr	r2, [pc, #392]	; (8004610 <HAL_TIM_ConfigClockSource+0x4b8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a60      	ldr	r2, [pc, #384]	; (8004614 <HAL_TIM_ConfigClockSource+0x4bc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a5f      	ldr	r2, [pc, #380]	; (8004618 <HAL_TIM_ConfigClockSource+0x4c0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x352>
 80044a0:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80044a4:	485d      	ldr	r0, [pc, #372]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 80044a6:	f7fd fc74 	bl	8001d92 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d013      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x382>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ba:	d00e      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x382>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c4:	d009      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x382>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ce:	d004      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x382>
 80044d0:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80044d4:	4851      	ldr	r0, [pc, #324]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 80044d6:	f7fd fc5c 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d014      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x3b6>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x3b6>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x3b6>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d008      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x3b6>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b0a      	cmp	r3, #10
 8004502:	d004      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x3b6>
 8004504:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8004508:	4844      	ldr	r0, [pc, #272]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 800450a:	f7fd fc42 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b0f      	cmp	r3, #15
 8004514:	d904      	bls.n	8004520 <HAL_TIM_ConfigClockSource+0x3c8>
 8004516:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800451a:	4840      	ldr	r0, [pc, #256]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 800451c:	f7fd fc39 	bl	8001d92 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f000 fad4 	bl	8004adc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004542:	609a      	str	r2, [r3, #8]
      break;
 8004544:	e16a      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <HAL_TIM_ConfigClockSource+0x4b0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d027      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d022      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2b      	ldr	r2, [pc, #172]	; (800460c <HAL_TIM_ConfigClockSource+0x4b4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d01d      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a29      	ldr	r2, [pc, #164]	; (8004610 <HAL_TIM_ConfigClockSource+0x4b8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d018      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a28      	ldr	r2, [pc, #160]	; (8004614 <HAL_TIM_ConfigClockSource+0x4bc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a26      	ldr	r2, [pc, #152]	; (8004618 <HAL_TIM_ConfigClockSource+0x4c0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a26      	ldr	r2, [pc, #152]	; (8004620 <HAL_TIM_ConfigClockSource+0x4c8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a24      	ldr	r2, [pc, #144]	; (8004624 <HAL_TIM_ConfigClockSource+0x4cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_ConfigClockSource+0x448>
 8004596:	f241 41f6 	movw	r1, #5366	; 0x14f6
 800459a:	4820      	ldr	r0, [pc, #128]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 800459c:	f7fd fbf9 	bl	8001d92 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a8:	d014      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x47c>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x47c>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x47c>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d008      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x47c>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b0a      	cmp	r3, #10
 80045c8:	d004      	beq.n	80045d4 <HAL_TIM_ConfigClockSource+0x47c>
 80045ca:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80045ce:	4813      	ldr	r0, [pc, #76]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 80045d0:	f7fd fbdf 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d904      	bls.n	80045e6 <HAL_TIM_ConfigClockSource+0x48e>
 80045dc:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80045e0:	480e      	ldr	r0, [pc, #56]	; (800461c <HAL_TIM_ConfigClockSource+0x4c4>)
 80045e2:	f7fd fbd6 	bl	8001d92 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 f9f8 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	; 0x50
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fa51 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004604:	e10a      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
 8004606:	bf00      	nop
 8004608:	40010000 	.word	0x40010000
 800460c:	40000400 	.word	0x40000400
 8004610:	40000800 	.word	0x40000800
 8004614:	40000c00 	.word	0x40000c00
 8004618:	40010400 	.word	0x40010400
 800461c:	0800b21c 	.word	0x0800b21c
 8004620:	40014000 	.word	0x40014000
 8004624:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a82      	ldr	r2, [pc, #520]	; (8004838 <HAL_TIM_ConfigClockSource+0x6e0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d027      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d022      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a7e      	ldr	r2, [pc, #504]	; (800483c <HAL_TIM_ConfigClockSource+0x6e4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01d      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7d      	ldr	r2, [pc, #500]	; (8004840 <HAL_TIM_ConfigClockSource+0x6e8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7b      	ldr	r2, [pc, #492]	; (8004844 <HAL_TIM_ConfigClockSource+0x6ec>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <HAL_TIM_ConfigClockSource+0x6f0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a78      	ldr	r2, [pc, #480]	; (800484c <HAL_TIM_ConfigClockSource+0x6f4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a77      	ldr	r2, [pc, #476]	; (8004850 <HAL_TIM_ConfigClockSource+0x6f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x52a>
 8004678:	f241 5106 	movw	r1, #5382	; 0x1506
 800467c:	4875      	ldr	r0, [pc, #468]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 800467e:	f7fd fb88 	bl	8001d92 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d014      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x55e>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d010      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x55e>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00c      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x55e>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d008      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x55e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b0a      	cmp	r3, #10
 80046aa:	d004      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x55e>
 80046ac:	f241 5109 	movw	r1, #5385	; 0x1509
 80046b0:	4868      	ldr	r0, [pc, #416]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 80046b2:	f7fd fb6e 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b0f      	cmp	r3, #15
 80046bc:	d904      	bls.n	80046c8 <HAL_TIM_ConfigClockSource+0x570>
 80046be:	f241 510a 	movw	r1, #5386	; 0x150a
 80046c2:	4864      	ldr	r0, [pc, #400]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 80046c4:	f7fd fb65 	bl	8001d92 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f000 f9b6 	bl	8004a46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2160      	movs	r1, #96	; 0x60
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f9e0 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80046e6:	e099      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a52      	ldr	r2, [pc, #328]	; (8004838 <HAL_TIM_ConfigClockSource+0x6e0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d027      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046fa:	d022      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a4e      	ldr	r2, [pc, #312]	; (800483c <HAL_TIM_ConfigClockSource+0x6e4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01d      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a4d      	ldr	r2, [pc, #308]	; (8004840 <HAL_TIM_ConfigClockSource+0x6e8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a4b      	ldr	r2, [pc, #300]	; (8004844 <HAL_TIM_ConfigClockSource+0x6ec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a4a      	ldr	r2, [pc, #296]	; (8004848 <HAL_TIM_ConfigClockSource+0x6f0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a48      	ldr	r2, [pc, #288]	; (800484c <HAL_TIM_ConfigClockSource+0x6f4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a47      	ldr	r2, [pc, #284]	; (8004850 <HAL_TIM_ConfigClockSource+0x6f8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x5ea>
 8004738:	f241 5116 	movw	r1, #5398	; 0x1516
 800473c:	4845      	ldr	r0, [pc, #276]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 800473e:	f7fd fb28 	bl	8001d92 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474a:	d014      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x61e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x61e>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x61e>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d008      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x61e>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b0a      	cmp	r3, #10
 800476a:	d004      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x61e>
 800476c:	f241 5119 	movw	r1, #5401	; 0x1519
 8004770:	4838      	ldr	r0, [pc, #224]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 8004772:	f7fd fb0e 	bl	8001d92 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d904      	bls.n	8004788 <HAL_TIM_ConfigClockSource+0x630>
 800477e:	f241 511a 	movw	r1, #5402	; 0x151a
 8004782:	4834      	ldr	r0, [pc, #208]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 8004784:	f7fd fb05 	bl	8001d92 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	461a      	mov	r2, r3
 8004796:	f000 f927 	bl	80049e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f980 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 80047a6:	e039      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_ConfigClockSource+0x6e0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d027      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d022      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_TIM_ConfigClockSource+0x6e4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d01d      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_TIM_ConfigClockSource+0x6e8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIM_ConfigClockSource+0x6ec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_TIM_ConfigClockSource+0x6f0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIM_ConfigClockSource+0x6f4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_TIM_ConfigClockSource+0x6f8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x6aa>
 80047f8:	f241 5129 	movw	r1, #5417	; 0x1529
 80047fc:	4815      	ldr	r0, [pc, #84]	; (8004854 <HAL_TIM_ConfigClockSource+0x6fc>)
 80047fe:	f7fd fac8 	bl	8001d92 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f000 f94a 	bl	8004aa6 <TIM_ITRx_SetConfig>
      break;
 8004812:	e003      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      break;
 8004818:	e000      	b.n	800481c <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 800481a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800482c:	7bfb      	ldrb	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800
 8004854:	0800b21c 	.word	0x0800b21c

08004858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a40      	ldr	r2, [pc, #256]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d00f      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d007      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d003      	beq.n	80048e8 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a3a      	ldr	r2, [pc, #232]	; (80049cc <TIM_Base_SetConfig+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d108      	bne.n	80048fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <TIM_Base_SetConfig+0x114>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004908:	d027      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <TIM_Base_SetConfig+0x118>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d023      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2b      	ldr	r2, [pc, #172]	; (80049c4 <TIM_Base_SetConfig+0x11c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d01f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2a      	ldr	r2, [pc, #168]	; (80049c8 <TIM_Base_SetConfig+0x120>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a29      	ldr	r2, [pc, #164]	; (80049cc <TIM_Base_SetConfig+0x124>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d017      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a28      	ldr	r2, [pc, #160]	; (80049d0 <TIM_Base_SetConfig+0x128>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <TIM_Base_SetConfig+0x12c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_Base_SetConfig+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <TIM_Base_SetConfig+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a24      	ldr	r2, [pc, #144]	; (80049e0 <TIM_Base_SetConfig+0x138>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <TIM_Base_SetConfig+0x13c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d108      	bne.n	800496c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <TIM_Base_SetConfig+0x114>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0xf8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d103      	bne.n	80049a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	615a      	str	r2, [r3, #20]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800
 80049dc:	40001800 	.word	0x40001800
 80049e0:	40001c00 	.word	0x40001c00
 80049e4:	40002000 	.word	0x40002000

080049e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	f023 0201 	bic.w	r2, r3, #1
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f023 030a 	bic.w	r3, r3, #10
 8004a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b087      	sub	sp, #28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	031b      	lsls	r3, r3, #12
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f043 0307 	orr.w	r3, r3, #7
 8004ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	021a      	lsls	r2, r3, #8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a61      	ldr	r2, [pc, #388]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d027      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d022      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5d      	ldr	r2, [pc, #372]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d01d      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5b      	ldr	r2, [pc, #364]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d018      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5a      	ldr	r2, [pc, #360]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d009      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a55      	ldr	r2, [pc, #340]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d004      	beq.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004b76:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8004b7a:	4854      	ldr	r0, [pc, #336]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004b7c:	f7fd f909 	bl	8001d92 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d01c      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d018      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d014      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d010      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b50      	cmp	r3, #80	; 0x50
 8004bae:	d00c      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b60      	cmp	r3, #96	; 0x60
 8004bb6:	d008      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d004      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004bc0:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8004bc4:	4841      	ldr	r0, [pc, #260]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004bc6:	f7fd f8e4 	bl	8001d92 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d008      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bda:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8004bde:	483b      	ldr	r0, [pc, #236]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8004be0:	f7fd f8d7 	bl	8001d92 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e05a      	b.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d022      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d01d      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1a      	ldr	r2, [pc, #104]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a18      	ldr	r2, [pc, #96]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10c      	bne.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40001000 	.word	0x40001000
 8004cc4:	40001400 	.word	0x40001400
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	0800b290 	.word	0x0800b290
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40001800 	.word	0x40001800

08004cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0be      	b.n	8004e90 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d03b      	beq.n	8004d92 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a5e      	ldr	r2, [pc, #376]	; (8004e98 <HAL_UART_Init+0x198>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01d      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5c      	ldr	r2, [pc, #368]	; (8004e9c <HAL_UART_Init+0x19c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d018      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a5b      	ldr	r2, [pc, #364]	; (8004ea0 <HAL_UART_Init+0x1a0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d013      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a59      	ldr	r2, [pc, #356]	; (8004ea4 <HAL_UART_Init+0x1a4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00e      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_UART_Init+0x1a8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d009      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a56      	ldr	r2, [pc, #344]	; (8004eac <HAL_UART_Init+0x1ac>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d004      	beq.n	8004d60 <HAL_UART_Init+0x60>
 8004d56:	f240 1173 	movw	r1, #371	; 0x173
 8004d5a:	4855      	ldr	r0, [pc, #340]	; (8004eb0 <HAL_UART_Init+0x1b0>)
 8004d5c:	f7fd f819 	bl	8001d92 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d037      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d70:	d032      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7a:	d02d      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d84:	d028      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004d86:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8004d8a:	4849      	ldr	r0, [pc, #292]	; (8004eb0 <HAL_UART_Init+0x1b0>)
 8004d8c:	f7fd f801 	bl	8001d92 <assert_failed>
 8004d90:	e022      	b.n	8004dd8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a40      	ldr	r2, [pc, #256]	; (8004e98 <HAL_UART_Init+0x198>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a3e      	ldr	r2, [pc, #248]	; (8004e9c <HAL_UART_Init+0x19c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d018      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3d      	ldr	r2, [pc, #244]	; (8004ea0 <HAL_UART_Init+0x1a0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d013      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <HAL_UART_Init+0x1a4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00e      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3a      	ldr	r2, [pc, #232]	; (8004ea8 <HAL_UART_Init+0x1a8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d009      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a38      	ldr	r2, [pc, #224]	; (8004eac <HAL_UART_Init+0x1ac>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d004      	beq.n	8004dd8 <HAL_UART_Init+0xd8>
 8004dce:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8004dd2:	4837      	ldr	r0, [pc, #220]	; (8004eb0 <HAL_UART_Init+0x1b0>)
 8004dd4:	f7fc ffdd 	bl	8001d92 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_Init+0xf4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de8:	d004      	beq.n	8004df4 <HAL_UART_Init+0xf4>
 8004dea:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8004dee:	4830      	ldr	r0, [pc, #192]	; (8004eb0 <HAL_UART_Init+0x1b0>)
 8004df0:	f7fc ffcf 	bl	8001d92 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <HAL_UART_Init+0x110>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e04:	d004      	beq.n	8004e10 <HAL_UART_Init+0x110>
 8004e06:	f240 117b 	movw	r1, #379	; 0x17b
 8004e0a:	4829      	ldr	r0, [pc, #164]	; (8004eb0 <HAL_UART_Init+0x1b0>)
 8004e0c:	f7fc ffc1 	bl	8001d92 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7fd f83f 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2224      	movs	r2, #36	; 0x24
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f936 	bl	80050b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40011000 	.word	0x40011000
 8004e9c:	40004400 	.word	0x40004400
 8004ea0:	40004800 	.word	0x40004800
 8004ea4:	40004c00 	.word	0x40004c00
 8004ea8:	40005000 	.word	0x40005000
 8004eac:	40011400 	.word	0x40011400
 8004eb0:	0800b304 	.word	0x0800b304

08004eb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d17c      	bne.n	8004fce <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_UART_Transmit+0x2c>
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e075      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Transmit+0x3e>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e06e      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f08:	f7fd f9f6 	bl	80022f8 <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	88fa      	ldrh	r2, [r7, #6]
 8004f18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	d108      	bne.n	8004f36 <HAL_UART_Transmit+0x82>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e003      	b.n	8004f3e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f46:	e02a      	b.n	8004f9e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2180      	movs	r1, #128	; 0x80
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f840 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e036      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f76:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3302      	adds	r3, #2
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e007      	b.n	8004f90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1cf      	bne.n	8004f48 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2140      	movs	r1, #64	; 0x40
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f810 	bl	8004fd8 <UART_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b090      	sub	sp, #64	; 0x40
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe8:	e050      	b.n	800508c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d04c      	beq.n	800508c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff8:	f7fd f97e 	bl	80022f8 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005004:	429a      	cmp	r2, r3
 8005006:	d241      	bcs.n	800508c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	330c      	adds	r3, #12
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005028:	637a      	str	r2, [r7, #52]	; 0x34
 800502a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800502e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	e853 3f00 	ldrex	r3, [r3]
 800504a:	613b      	str	r3, [r7, #16]
   return(result);
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f023 0301 	bic.w	r3, r3, #1
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800505c:	623a      	str	r2, [r7, #32]
 800505e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005060:	69f9      	ldr	r1, [r7, #28]
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	e841 2300 	strex	r3, r2, [r1]
 8005068:	61bb      	str	r3, [r7, #24]
   return(result);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e00f      	b.n	80050ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4013      	ands	r3, r2
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	429a      	cmp	r2, r3
 800509a:	bf0c      	ite	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	2300      	movne	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d09f      	beq.n	8004fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3740      	adds	r7, #64	; 0x40
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b0c0      	sub	sp, #256	; 0x100
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	4bcf      	ldr	r3, [pc, #828]	; (8005404 <UART_SetConfig+0x350>)
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d904      	bls.n	80050d6 <UART_SetConfig+0x22>
 80050cc:	f640 6161 	movw	r1, #3681	; 0xe61
 80050d0:	48cd      	ldr	r0, [pc, #820]	; (8005408 <UART_SetConfig+0x354>)
 80050d2:	f7fc fe5e 	bl	8001d92 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <UART_SetConfig+0x42>
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	d004      	beq.n	80050f6 <UART_SetConfig+0x42>
 80050ec:	f640 6162 	movw	r1, #3682	; 0xe62
 80050f0:	48c5      	ldr	r0, [pc, #788]	; (8005408 <UART_SetConfig+0x354>)
 80050f2:	f7fc fe4e 	bl	8001d92 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80050f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <UART_SetConfig+0x6e>
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510a:	d00a      	beq.n	8005122 <UART_SetConfig+0x6e>
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005116:	d004      	beq.n	8005122 <UART_SetConfig+0x6e>
 8005118:	f640 6163 	movw	r1, #3683	; 0xe63
 800511c:	48ba      	ldr	r0, [pc, #744]	; (8005408 <UART_SetConfig+0x354>)
 800511e:	f7fc fe38 	bl	8001d92 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005126:	695a      	ldr	r2, [r3, #20]
 8005128:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <UART_SetConfig+0x88>
 8005132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <UART_SetConfig+0x92>
 800513c:	f640 6164 	movw	r1, #3684	; 0xe64
 8005140:	48b1      	ldr	r0, [pc, #708]	; (8005408 <UART_SetConfig+0x354>)
 8005142:	f7fc fe26 	bl	8001d92 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	68d9      	ldr	r1, [r3, #12]
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	ea40 0301 	orr.w	r3, r0, r1
 8005162:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	431a      	orrs	r2, r3
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	431a      	orrs	r2, r3
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005192:	f021 010c 	bic.w	r1, r1, #12
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051a0:	430b      	orrs	r3, r1
 80051a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	6999      	ldr	r1, [r3, #24]
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	ea40 0301 	orr.w	r3, r0, r1
 80051c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b90      	ldr	r3, [pc, #576]	; (800540c <UART_SetConfig+0x358>)
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d005      	beq.n	80051da <UART_SetConfig+0x126>
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b8e      	ldr	r3, [pc, #568]	; (8005410 <UART_SetConfig+0x35c>)
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d104      	bne.n	80051e4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051da:	f7fd ff2d 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 80051de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051e2:	e003      	b.n	80051ec <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fd ff14 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 80051e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f6:	f040 810f 	bne.w	8005418 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005204:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005208:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800520c:	4622      	mov	r2, r4
 800520e:	462b      	mov	r3, r5
 8005210:	1891      	adds	r1, r2, r2
 8005212:	65b9      	str	r1, [r7, #88]	; 0x58
 8005214:	415b      	adcs	r3, r3
 8005216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005218:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800521c:	4621      	mov	r1, r4
 800521e:	eb12 0801 	adds.w	r8, r2, r1
 8005222:	4629      	mov	r1, r5
 8005224:	eb43 0901 	adc.w	r9, r3, r1
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005234:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005238:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523c:	4690      	mov	r8, r2
 800523e:	4699      	mov	r9, r3
 8005240:	4623      	mov	r3, r4
 8005242:	eb18 0303 	adds.w	r3, r8, r3
 8005246:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800524a:	462b      	mov	r3, r5
 800524c:	eb49 0303 	adc.w	r3, r9, r3
 8005250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005260:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005264:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005268:	460b      	mov	r3, r1
 800526a:	18db      	adds	r3, r3, r3
 800526c:	653b      	str	r3, [r7, #80]	; 0x50
 800526e:	4613      	mov	r3, r2
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	657b      	str	r3, [r7, #84]	; 0x54
 8005276:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800527a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800527e:	f7fb fd03 	bl	8000c88 <__aeabi_uldivmod>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4b63      	ldr	r3, [pc, #396]	; (8005414 <UART_SetConfig+0x360>)
 8005288:	fba3 2302 	umull	r2, r3, r3, r2
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	011c      	lsls	r4, r3, #4
 8005290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005294:	2200      	movs	r2, #0
 8005296:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800529a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800529e:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052a2:	4642      	mov	r2, r8
 80052a4:	464b      	mov	r3, r9
 80052a6:	1891      	adds	r1, r2, r2
 80052a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80052aa:	415b      	adcs	r3, r3
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052b2:	4641      	mov	r1, r8
 80052b4:	eb12 0a01 	adds.w	sl, r2, r1
 80052b8:	4649      	mov	r1, r9
 80052ba:	eb43 0b01 	adc.w	fp, r3, r1
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d2:	4692      	mov	sl, r2
 80052d4:	469b      	mov	fp, r3
 80052d6:	4643      	mov	r3, r8
 80052d8:	eb1a 0303 	adds.w	r3, sl, r3
 80052dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052e0:	464b      	mov	r3, r9
 80052e2:	eb4b 0303 	adc.w	r3, fp, r3
 80052e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052f6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052fe:	460b      	mov	r3, r1
 8005300:	18db      	adds	r3, r3, r3
 8005302:	643b      	str	r3, [r7, #64]	; 0x40
 8005304:	4613      	mov	r3, r2
 8005306:	eb42 0303 	adc.w	r3, r2, r3
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
 800530c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005310:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005314:	f7fb fcb8 	bl	8000c88 <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4611      	mov	r1, r2
 800531e:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <UART_SetConfig+0x360>)
 8005320:	fba3 2301 	umull	r2, r3, r3, r1
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2264      	movs	r2, #100	; 0x64
 8005328:	fb02 f303 	mul.w	r3, r2, r3
 800532c:	1acb      	subs	r3, r1, r3
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005334:	4b37      	ldr	r3, [pc, #220]	; (8005414 <UART_SetConfig+0x360>)
 8005336:	fba3 2302 	umull	r2, r3, r3, r2
 800533a:	095b      	lsrs	r3, r3, #5
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005342:	441c      	add	r4, r3
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800534e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005352:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	63b9      	str	r1, [r7, #56]	; 0x38
 800535e:	415b      	adcs	r3, r3
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005362:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005366:	4641      	mov	r1, r8
 8005368:	1851      	adds	r1, r2, r1
 800536a:	6339      	str	r1, [r7, #48]	; 0x30
 800536c:	4649      	mov	r1, r9
 800536e:	414b      	adcs	r3, r1
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800537e:	4659      	mov	r1, fp
 8005380:	00cb      	lsls	r3, r1, #3
 8005382:	4651      	mov	r1, sl
 8005384:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005388:	4651      	mov	r1, sl
 800538a:	00ca      	lsls	r2, r1, #3
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	4603      	mov	r3, r0
 8005392:	4642      	mov	r2, r8
 8005394:	189b      	adds	r3, r3, r2
 8005396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800539a:	464b      	mov	r3, r9
 800539c:	460a      	mov	r2, r1
 800539e:	eb42 0303 	adc.w	r3, r2, r3
 80053a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053b2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053ba:	460b      	mov	r3, r1
 80053bc:	18db      	adds	r3, r3, r3
 80053be:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c0:	4613      	mov	r3, r2
 80053c2:	eb42 0303 	adc.w	r3, r2, r3
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053cc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053d0:	f7fb fc5a 	bl	8000c88 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <UART_SetConfig+0x360>)
 80053da:	fba3 1302 	umull	r1, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2164      	movs	r1, #100	; 0x64
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	3332      	adds	r3, #50	; 0x32
 80053ec:	4a09      	ldr	r2, [pc, #36]	; (8005414 <UART_SetConfig+0x360>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 0207 	and.w	r2, r3, #7
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4422      	add	r2, r4
 8005400:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005402:	e108      	b.n	8005616 <UART_SetConfig+0x562>
 8005404:	00a037a0 	.word	0x00a037a0
 8005408:	0800b304 	.word	0x0800b304
 800540c:	40011000 	.word	0x40011000
 8005410:	40011400 	.word	0x40011400
 8005414:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541c:	2200      	movs	r2, #0
 800541e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005422:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005426:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800542a:	4642      	mov	r2, r8
 800542c:	464b      	mov	r3, r9
 800542e:	1891      	adds	r1, r2, r2
 8005430:	6239      	str	r1, [r7, #32]
 8005432:	415b      	adcs	r3, r3
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800543a:	4641      	mov	r1, r8
 800543c:	1854      	adds	r4, r2, r1
 800543e:	4649      	mov	r1, r9
 8005440:	eb43 0501 	adc.w	r5, r3, r1
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	00eb      	lsls	r3, r5, #3
 800544e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005452:	00e2      	lsls	r2, r4, #3
 8005454:	4614      	mov	r4, r2
 8005456:	461d      	mov	r5, r3
 8005458:	4643      	mov	r3, r8
 800545a:	18e3      	adds	r3, r4, r3
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005460:	464b      	mov	r3, r9
 8005462:	eb45 0303 	adc.w	r3, r5, r3
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800546a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005476:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800547a:	f04f 0200 	mov.w	r2, #0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005486:	4629      	mov	r1, r5
 8005488:	008b      	lsls	r3, r1, #2
 800548a:	4621      	mov	r1, r4
 800548c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005490:	4621      	mov	r1, r4
 8005492:	008a      	lsls	r2, r1, #2
 8005494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005498:	f7fb fbf6 	bl	8000c88 <__aeabi_uldivmod>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4b60      	ldr	r3, [pc, #384]	; (8005624 <UART_SetConfig+0x570>)
 80054a2:	fba3 2302 	umull	r2, r3, r3, r2
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	011c      	lsls	r4, r3, #4
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054bc:	4642      	mov	r2, r8
 80054be:	464b      	mov	r3, r9
 80054c0:	1891      	adds	r1, r2, r2
 80054c2:	61b9      	str	r1, [r7, #24]
 80054c4:	415b      	adcs	r3, r3
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054cc:	4641      	mov	r1, r8
 80054ce:	1851      	adds	r1, r2, r1
 80054d0:	6139      	str	r1, [r7, #16]
 80054d2:	4649      	mov	r1, r9
 80054d4:	414b      	adcs	r3, r1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e4:	4659      	mov	r1, fp
 80054e6:	00cb      	lsls	r3, r1, #3
 80054e8:	4651      	mov	r1, sl
 80054ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ee:	4651      	mov	r1, sl
 80054f0:	00ca      	lsls	r2, r1, #3
 80054f2:	4610      	mov	r0, r2
 80054f4:	4619      	mov	r1, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	4642      	mov	r2, r8
 80054fa:	189b      	adds	r3, r3, r2
 80054fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005500:	464b      	mov	r3, r9
 8005502:	460a      	mov	r2, r1
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	67bb      	str	r3, [r7, #120]	; 0x78
 8005516:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005524:	4649      	mov	r1, r9
 8005526:	008b      	lsls	r3, r1, #2
 8005528:	4641      	mov	r1, r8
 800552a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552e:	4641      	mov	r1, r8
 8005530:	008a      	lsls	r2, r1, #2
 8005532:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005536:	f7fb fba7 	bl	8000c88 <__aeabi_uldivmod>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4b39      	ldr	r3, [pc, #228]	; (8005624 <UART_SetConfig+0x570>)
 8005540:	fba3 1302 	umull	r1, r3, r3, r2
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	2164      	movs	r1, #100	; 0x64
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	3332      	adds	r3, #50	; 0x32
 8005552:	4a34      	ldr	r2, [pc, #208]	; (8005624 <UART_SetConfig+0x570>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800555e:	441c      	add	r4, r3
 8005560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005564:	2200      	movs	r2, #0
 8005566:	673b      	str	r3, [r7, #112]	; 0x70
 8005568:	677a      	str	r2, [r7, #116]	; 0x74
 800556a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	1891      	adds	r1, r2, r2
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	415b      	adcs	r3, r3
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800557e:	4641      	mov	r1, r8
 8005580:	1851      	adds	r1, r2, r1
 8005582:	6039      	str	r1, [r7, #0]
 8005584:	4649      	mov	r1, r9
 8005586:	414b      	adcs	r3, r1
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005596:	4659      	mov	r1, fp
 8005598:	00cb      	lsls	r3, r1, #3
 800559a:	4651      	mov	r1, sl
 800559c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a0:	4651      	mov	r1, sl
 80055a2:	00ca      	lsls	r2, r1, #3
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	4603      	mov	r3, r0
 80055aa:	4642      	mov	r2, r8
 80055ac:	189b      	adds	r3, r3, r2
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b0:	464b      	mov	r3, r9
 80055b2:	460a      	mov	r2, r1
 80055b4:	eb42 0303 	adc.w	r3, r2, r3
 80055b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	663b      	str	r3, [r7, #96]	; 0x60
 80055c4:	667a      	str	r2, [r7, #100]	; 0x64
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055d2:	4649      	mov	r1, r9
 80055d4:	008b      	lsls	r3, r1, #2
 80055d6:	4641      	mov	r1, r8
 80055d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055dc:	4641      	mov	r1, r8
 80055de:	008a      	lsls	r2, r1, #2
 80055e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055e4:	f7fb fb50 	bl	8000c88 <__aeabi_uldivmod>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <UART_SetConfig+0x570>)
 80055ee:	fba3 1302 	umull	r1, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2164      	movs	r1, #100	; 0x64
 80055f6:	fb01 f303 	mul.w	r3, r1, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	3332      	adds	r3, #50	; 0x32
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <UART_SetConfig+0x570>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4422      	add	r2, r4
 8005614:	609a      	str	r2, [r3, #8]
}
 8005616:	bf00      	nop
 8005618:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800561c:	46bd      	mov	sp, r7
 800561e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005622:	bf00      	nop
 8005624:	51eb851f 	.word	0x51eb851f

08005628 <__NVIC_SetPriority>:
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	4603      	mov	r3, r0
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db0a      	blt.n	8005652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	b2da      	uxtb	r2, r3
 8005640:	490c      	ldr	r1, [pc, #48]	; (8005674 <__NVIC_SetPriority+0x4c>)
 8005642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005646:	0112      	lsls	r2, r2, #4
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	440b      	add	r3, r1
 800564c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005650:	e00a      	b.n	8005668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	b2da      	uxtb	r2, r3
 8005656:	4908      	ldr	r1, [pc, #32]	; (8005678 <__NVIC_SetPriority+0x50>)
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	3b04      	subs	r3, #4
 8005660:	0112      	lsls	r2, r2, #4
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	440b      	add	r3, r1
 8005666:	761a      	strb	r2, [r3, #24]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	e000e100 	.word	0xe000e100
 8005678:	e000ed00 	.word	0xe000ed00

0800567c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <SysTick_Handler+0x1c>)
 8005682:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005684:	f002 f93a 	bl	80078fc <xTaskGetSchedulerState>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d001      	beq.n	8005692 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800568e:	f000 fd9b 	bl	80061c8 <xPortSysTickHandler>
  }
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	e000e010 	.word	0xe000e010

0800569c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056a0:	2100      	movs	r1, #0
 80056a2:	f06f 0004 	mvn.w	r0, #4
 80056a6:	f7ff ffbf 	bl	8005628 <__NVIC_SetPriority>
#endif
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b6:	f3ef 8305 	mrs	r3, IPSR
 80056ba:	603b      	str	r3, [r7, #0]
  return(result);
 80056bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056c2:	f06f 0305 	mvn.w	r3, #5
 80056c6:	607b      	str	r3, [r7, #4]
 80056c8:	e00c      	b.n	80056e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <osKernelInitialize+0x44>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <osKernelInitialize+0x44>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056d8:	2300      	movs	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e002      	b.n	80056e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056e4:	687b      	ldr	r3, [r7, #4]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000054c 	.word	0x2000054c

080056f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056fe:	f3ef 8305 	mrs	r3, IPSR
 8005702:	603b      	str	r3, [r7, #0]
  return(result);
 8005704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <osKernelStart+0x1a>
    stat = osErrorISR;
 800570a:	f06f 0305 	mvn.w	r3, #5
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	e010      	b.n	8005734 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <osKernelStart+0x48>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d109      	bne.n	800572e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800571a:	f7ff ffbf 	bl	800569c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <osKernelStart+0x48>)
 8005720:	2202      	movs	r2, #2
 8005722:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005724:	f001 fca2 	bl	800706c <vTaskStartScheduler>
      stat = osOK;
 8005728:	2300      	movs	r3, #0
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	e002      	b.n	8005734 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295
 8005732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005734:	687b      	ldr	r3, [r7, #4]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	2000054c 	.word	0x2000054c

08005744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af04      	add	r7, sp, #16
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005754:	f3ef 8305 	mrs	r3, IPSR
 8005758:	617b      	str	r3, [r7, #20]
  return(result);
 800575a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800575c:	2b00      	cmp	r3, #0
 800575e:	d17e      	bne.n	800585e <osThreadNew+0x11a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d07b      	beq.n	800585e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800576a:	2318      	movs	r3, #24
 800576c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295
 8005776:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d045      	beq.n	800580a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <osThreadNew+0x48>
        name = attr->name;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <osThreadNew+0x6e>
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b38      	cmp	r3, #56	; 0x38
 80057a4:	d805      	bhi.n	80057b2 <osThreadNew+0x6e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <osThreadNew+0x72>
        return (NULL);
 80057b2:	2300      	movs	r3, #0
 80057b4:	e054      	b.n	8005860 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	089b      	lsrs	r3, r3, #2
 80057c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00e      	beq.n	80057ec <osThreadNew+0xa8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b5b      	cmp	r3, #91	; 0x5b
 80057d4:	d90a      	bls.n	80057ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d006      	beq.n	80057ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <osThreadNew+0xa8>
        mem = 1;
 80057e6:	2301      	movs	r3, #1
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e010      	b.n	800580e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10c      	bne.n	800580e <osThreadNew+0xca>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d108      	bne.n	800580e <osThreadNew+0xca>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <osThreadNew+0xca>
          mem = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	e001      	b.n	800580e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800580a:	2300      	movs	r3, #0
 800580c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d110      	bne.n	8005836 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800581c:	9202      	str	r2, [sp, #8]
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 fa48 	bl	8006cc0 <xTaskCreateStatic>
 8005830:	4603      	mov	r3, r0
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	e013      	b.n	800585e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d110      	bne.n	800585e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	b29a      	uxth	r2, r3
 8005840:	f107 0310 	add.w	r3, r7, #16
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f001 fa93 	bl	8006d7a <xTaskCreate>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <osThreadNew+0x11a>
            hTask = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800585e:	693b      	ldr	r3, [r7, #16]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005870:	f3ef 8305 	mrs	r3, IPSR
 8005874:	60bb      	str	r3, [r7, #8]
  return(result);
 8005876:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <osDelay+0x1c>
    stat = osErrorISR;
 800587c:	f06f 0305 	mvn.w	r3, #5
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e007      	b.n	8005894 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <osDelay+0x2c>
      vTaskDelay(ticks);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fbb8 	bl	8007004 <vTaskDelay>
    }
  }

  return (stat);
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a07      	ldr	r2, [pc, #28]	; (80058cc <vApplicationGetIdleTaskMemory+0x2c>)
 80058b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <vApplicationGetIdleTaskMemory+0x30>)
 80058b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000550 	.word	0x20000550
 80058d0:	200005ac 	.word	0x200005ac

080058d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a07      	ldr	r2, [pc, #28]	; (8005900 <vApplicationGetTimerTaskMemory+0x2c>)
 80058e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4a06      	ldr	r2, [pc, #24]	; (8005904 <vApplicationGetTimerTaskMemory+0x30>)
 80058ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	200007ac 	.word	0x200007ac
 8005904:	20000808 	.word	0x20000808

08005908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005914:	f001 fc10 	bl	8007138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005918:	4b5b      	ldr	r3, [pc, #364]	; (8005a88 <pvPortMalloc+0x180>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005920:	f000 f920 	bl	8005b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005924:	4b59      	ldr	r3, [pc, #356]	; (8005a8c <pvPortMalloc+0x184>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4013      	ands	r3, r2
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8093 	bne.w	8005a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01d      	beq.n	8005974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005938:	2208      	movs	r2, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	2b00      	cmp	r3, #0
 8005948:	d014      	beq.n	8005974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f023 0307 	bic.w	r3, r3, #7
 8005950:	3308      	adds	r3, #8
 8005952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d06e      	beq.n	8005a58 <pvPortMalloc+0x150>
 800597a:	4b45      	ldr	r3, [pc, #276]	; (8005a90 <pvPortMalloc+0x188>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d869      	bhi.n	8005a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005984:	4b43      	ldr	r3, [pc, #268]	; (8005a94 <pvPortMalloc+0x18c>)
 8005986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005988:	4b42      	ldr	r3, [pc, #264]	; (8005a94 <pvPortMalloc+0x18c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800598e:	e004      	b.n	800599a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d903      	bls.n	80059ac <pvPortMalloc+0xa4>
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f1      	bne.n	8005990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059ac:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <pvPortMalloc+0x180>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d050      	beq.n	8005a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2208      	movs	r2, #8
 80059bc:	4413      	add	r3, r2
 80059be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1ad2      	subs	r2, r2, r3
 80059d0:	2308      	movs	r3, #8
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d91f      	bls.n	8005a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4413      	add	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <pvPortMalloc+0xf8>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	613b      	str	r3, [r7, #16]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1ad2      	subs	r2, r2, r3
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a12:	69b8      	ldr	r0, [r7, #24]
 8005a14:	f000 f908 	bl	8005c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <pvPortMalloc+0x188>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <pvPortMalloc+0x188>)
 8005a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a26:	4b1a      	ldr	r3, [pc, #104]	; (8005a90 <pvPortMalloc+0x188>)
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <pvPortMalloc+0x190>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d203      	bcs.n	8005a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <pvPortMalloc+0x188>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <pvPortMalloc+0x190>)
 8005a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <pvPortMalloc+0x184>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <pvPortMalloc+0x194>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a11      	ldr	r2, [pc, #68]	; (8005a9c <pvPortMalloc+0x194>)
 8005a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a58:	f001 fb7c 	bl	8007154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <pvPortMalloc+0x174>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	60fb      	str	r3, [r7, #12]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <pvPortMalloc+0x172>
	return pvReturn;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	; 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20004810 	.word	0x20004810
 8005a8c:	20004824 	.word	0x20004824
 8005a90:	20004814 	.word	0x20004814
 8005a94:	20004808 	.word	0x20004808
 8005a98:	20004818 	.word	0x20004818
 8005a9c:	2000481c 	.word	0x2000481c

08005aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04d      	beq.n	8005b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4413      	add	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	4b24      	ldr	r3, [pc, #144]	; (8005b58 <vPortFree+0xb8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10a      	bne.n	8005ae4 <vPortFree+0x44>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60fb      	str	r3, [r7, #12]
}
 8005ae0:	bf00      	nop
 8005ae2:	e7fe      	b.n	8005ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <vPortFree+0x62>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	60bb      	str	r3, [r7, #8]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <vPortFree+0xb8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01e      	beq.n	8005b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d11a      	bne.n	8005b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <vPortFree+0xb8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b28:	f001 fb06 	bl	8007138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <vPortFree+0xbc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4413      	add	r3, r2
 8005b36:	4a09      	ldr	r2, [pc, #36]	; (8005b5c <vPortFree+0xbc>)
 8005b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b3a:	6938      	ldr	r0, [r7, #16]
 8005b3c:	f000 f874 	bl	8005c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <vPortFree+0xc0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <vPortFree+0xc0>)
 8005b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b4a:	f001 fb03 	bl	8007154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20004824 	.word	0x20004824
 8005b5c:	20004814 	.word	0x20004814
 8005b60:	20004820 	.word	0x20004820

08005b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b70:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <prvHeapInit+0xac>)
 8005b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00c      	beq.n	8005b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3307      	adds	r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <prvHeapInit+0xac>)
 8005b94:	4413      	add	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <prvHeapInit+0xb0>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	; (8005c14 <prvHeapInit+0xb0>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0307 	bic.w	r3, r3, #7
 8005bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <prvHeapInit+0xb4>)
 8005bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bc6:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <prvHeapInit+0xb4>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bce:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <prvHeapInit+0xb4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <prvHeapInit+0xb4>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <prvHeapInit+0xb8>)
 8005bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <prvHeapInit+0xbc>)
 8005bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <prvHeapInit+0xc0>)
 8005bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000c08 	.word	0x20000c08
 8005c14:	20004808 	.word	0x20004808
 8005c18:	20004810 	.word	0x20004810
 8005c1c:	20004818 	.word	0x20004818
 8005c20:	20004814 	.word	0x20004814
 8005c24:	20004824 	.word	0x20004824

08005c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c30:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <prvInsertBlockIntoFreeList+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	e002      	b.n	8005c3c <prvInsertBlockIntoFreeList+0x14>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d8f7      	bhi.n	8005c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4413      	add	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d108      	bne.n	8005c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	441a      	add	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d118      	bne.n	8005cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	4b15      	ldr	r3, [pc, #84]	; (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d00d      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	441a      	add	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e008      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e003      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d002      	beq.n	8005cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	20004808 	.word	0x20004808
 8005cd8:	20004810 	.word	0x20004810

08005cdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f103 0208 	add.w	r2, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f103 0208 	add.w	r2, r3, #8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f103 0208 	add.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d103      	bne.n	8005d9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	e00c      	b.n	8005db8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3308      	adds	r3, #8
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e002      	b.n	8005dac <vListInsert+0x2e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d2f6      	bcs.n	8005da6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d103      	bne.n	8005e24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1e5a      	subs	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3b04      	subs	r3, #4
 8005e54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	3b04      	subs	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f023 0201 	bic.w	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e74:	4a0c      	ldr	r2, [pc, #48]	; (8005ea8 <pxPortInitialiseStack+0x64>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3b14      	subs	r3, #20
 8005e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f06f 0202 	mvn.w	r2, #2
 8005e92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3b20      	subs	r3, #32
 8005e98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	08005ead 	.word	0x08005ead

08005eac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005eb6:	4b12      	ldr	r3, [pc, #72]	; (8005f00 <prvTaskExitError+0x54>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d00a      	beq.n	8005ed6 <prvTaskExitError+0x2a>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <prvTaskExitError+0x28>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	60bb      	str	r3, [r7, #8]
}
 8005ee8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005eea:	bf00      	nop
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0fc      	beq.n	8005eec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000010 	.word	0x20000010
	...

08005f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <pxCurrentTCBConst2>)
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	6808      	ldr	r0, [r1, #0]
 8005f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	f380 8809 	msr	PSP, r0
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8811 	msr	BASEPRI, r0
 8005f2a:	4770      	bx	lr
 8005f2c:	f3af 8000 	nop.w

08005f30 <pxCurrentTCBConst2>:
 8005f30:	20004870 	.word	0x20004870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop

08005f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f38:	4808      	ldr	r0, [pc, #32]	; (8005f5c <prvPortStartFirstTask+0x24>)
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f380 8808 	msr	MSP, r0
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f380 8814 	msr	CONTROL, r0
 8005f4a:	b662      	cpsie	i
 8005f4c:	b661      	cpsie	f
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	df00      	svc	0
 8005f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f5a:	bf00      	nop
 8005f5c:	e000ed08 	.word	0xe000ed08

08005f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f66:	4b46      	ldr	r3, [pc, #280]	; (8006080 <xPortStartScheduler+0x120>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a46      	ldr	r2, [pc, #280]	; (8006084 <xPortStartScheduler+0x124>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10a      	bne.n	8005f86 <xPortStartScheduler+0x26>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	613b      	str	r3, [r7, #16]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f86:	4b3e      	ldr	r3, [pc, #248]	; (8006080 <xPortStartScheduler+0x120>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a3f      	ldr	r2, [pc, #252]	; (8006088 <xPortStartScheduler+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10a      	bne.n	8005fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60fb      	str	r3, [r7, #12]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fa6:	4b39      	ldr	r3, [pc, #228]	; (800608c <xPortStartScheduler+0x12c>)
 8005fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005fc8:	b2da      	uxtb	r2, r3
 8005fca:	4b31      	ldr	r3, [pc, #196]	; (8006090 <xPortStartScheduler+0x130>)
 8005fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <xPortStartScheduler+0x134>)
 8005fd0:	2207      	movs	r2, #7
 8005fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fd4:	e009      	b.n	8005fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005fd6:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <xPortStartScheduler+0x134>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	4a2d      	ldr	r2, [pc, #180]	; (8006094 <xPortStartScheduler+0x134>)
 8005fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d0ef      	beq.n	8005fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ff6:	4b27      	ldr	r3, [pc, #156]	; (8006094 <xPortStartScheduler+0x134>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f1c3 0307 	rsb	r3, r3, #7
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d00a      	beq.n	8006018 <xPortStartScheduler+0xb8>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <xPortStartScheduler+0x134>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <xPortStartScheduler+0x134>)
 8006020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006022:	4b1c      	ldr	r3, [pc, #112]	; (8006094 <xPortStartScheduler+0x134>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800602a:	4a1a      	ldr	r2, [pc, #104]	; (8006094 <xPortStartScheduler+0x134>)
 800602c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006036:	4b18      	ldr	r3, [pc, #96]	; (8006098 <xPortStartScheduler+0x138>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a17      	ldr	r2, [pc, #92]	; (8006098 <xPortStartScheduler+0x138>)
 800603c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <xPortStartScheduler+0x138>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <xPortStartScheduler+0x138>)
 8006048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800604c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800604e:	f000 f8dd 	bl	800620c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006052:	4b12      	ldr	r3, [pc, #72]	; (800609c <xPortStartScheduler+0x13c>)
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006058:	f000 f8fc 	bl	8006254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <xPortStartScheduler+0x140>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <xPortStartScheduler+0x140>)
 8006062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006068:	f7ff ff66 	bl	8005f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800606c:	f001 f9da 	bl	8007424 <vTaskSwitchContext>
	prvTaskExitError();
 8006070:	f7ff ff1c 	bl	8005eac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	e000ed00 	.word	0xe000ed00
 8006084:	410fc271 	.word	0x410fc271
 8006088:	410fc270 	.word	0x410fc270
 800608c:	e000e400 	.word	0xe000e400
 8006090:	20004828 	.word	0x20004828
 8006094:	2000482c 	.word	0x2000482c
 8006098:	e000ed20 	.word	0xe000ed20
 800609c:	20000010 	.word	0x20000010
 80060a0:	e000ef34 	.word	0xe000ef34

080060a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	607b      	str	r3, [r7, #4]
}
 80060bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060be:	4b0f      	ldr	r3, [pc, #60]	; (80060fc <vPortEnterCritical+0x58>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a0d      	ldr	r2, [pc, #52]	; (80060fc <vPortEnterCritical+0x58>)
 80060c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <vPortEnterCritical+0x58>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d10f      	bne.n	80060f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <vPortEnterCritical+0x5c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80060da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	603b      	str	r3, [r7, #0]
}
 80060ec:	bf00      	nop
 80060ee:	e7fe      	b.n	80060ee <vPortEnterCritical+0x4a>
	}
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	20000010 	.word	0x20000010
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <vPortExitCritical+0x50>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <vPortExitCritical+0x24>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	607b      	str	r3, [r7, #4]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <vPortExitCritical+0x50>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3b01      	subs	r3, #1
 800612e:	4a09      	ldr	r2, [pc, #36]	; (8006154 <vPortExitCritical+0x50>)
 8006130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <vPortExitCritical+0x50>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <vPortExitCritical+0x42>
 800613a:	2300      	movs	r3, #0
 800613c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000010 	.word	0x20000010
	...

08006160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006160:	f3ef 8009 	mrs	r0, PSP
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <pxCurrentTCBConst>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f01e 0f10 	tst.w	lr, #16
 8006170:	bf08      	it	eq
 8006172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006184:	f380 8811 	msr	BASEPRI, r0
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f001 f948 	bl	8007424 <vTaskSwitchContext>
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f380 8811 	msr	BASEPRI, r0
 800619c:	bc09      	pop	{r0, r3}
 800619e:	6819      	ldr	r1, [r3, #0]
 80061a0:	6808      	ldr	r0, [r1, #0]
 80061a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a6:	f01e 0f10 	tst.w	lr, #16
 80061aa:	bf08      	it	eq
 80061ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061b0:	f380 8809 	msr	PSP, r0
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst>:
 80061c0:	20004870 	.word	0x20004870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
}
 80061e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061e2:	f001 f865 	bl	80072b0 <xTaskIncrementTick>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	4b06      	ldr	r3, [pc, #24]	; (8006208 <xPortSysTickHandler+0x40>)
 80061ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	2300      	movs	r3, #0
 80061f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <vPortSetupTimerInterrupt+0x38>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <vPortSetupTimerInterrupt+0x3c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0a      	ldr	r2, [pc, #40]	; (800624c <vPortSetupTimerInterrupt+0x40>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	099b      	lsrs	r3, r3, #6
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <vPortSetupTimerInterrupt+0x44>)
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800622e:	4b04      	ldr	r3, [pc, #16]	; (8006240 <vPortSetupTimerInterrupt+0x34>)
 8006230:	2207      	movs	r2, #7
 8006232:	601a      	str	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e010 	.word	0xe000e010
 8006244:	e000e018 	.word	0xe000e018
 8006248:	20000008 	.word	0x20000008
 800624c:	10624dd3 	.word	0x10624dd3
 8006250:	e000e014 	.word	0xe000e014

08006254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006264 <vPortEnableVFP+0x10>
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800625e:	6001      	str	r1, [r0, #0]
 8006260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006262:	bf00      	nop
 8006264:	e000ed88 	.word	0xe000ed88

08006268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800626e:	f3ef 8305 	mrs	r3, IPSR
 8006272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d914      	bls.n	80062a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <vPortValidateInterruptPriority+0x70>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006284:	4b15      	ldr	r3, [pc, #84]	; (80062dc <vPortValidateInterruptPriority+0x74>)
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	7afa      	ldrb	r2, [r7, #11]
 800628a:	429a      	cmp	r2, r3
 800628c:	d20a      	bcs.n	80062a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <vPortValidateInterruptPriority+0x78>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062ac:	4b0d      	ldr	r3, [pc, #52]	; (80062e4 <vPortValidateInterruptPriority+0x7c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d90a      	bls.n	80062ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	603b      	str	r3, [r7, #0]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <vPortValidateInterruptPriority+0x60>
	}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	e000e3f0 	.word	0xe000e3f0
 80062dc:	20004828 	.word	0x20004828
 80062e0:	e000ed0c 	.word	0xe000ed0c
 80062e4:	2000482c 	.word	0x2000482c

080062e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueGenericReset+0x2a>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60bb      	str	r3, [r7, #8]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006312:	f7ff fec7 	bl	80060a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	441a      	add	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006342:	3b01      	subs	r3, #1
 8006344:	68f9      	ldr	r1, [r7, #12]
 8006346:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	441a      	add	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d114      	bne.n	8006392 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01a      	beq.n	80063a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3310      	adds	r3, #16
 8006374:	4618      	mov	r0, r3
 8006376:	f001 f903 	bl	8007580 <xTaskRemoveFromEventList>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d012      	beq.n	80063a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <xQueueGenericReset+0xcc>)
 8006382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	e009      	b.n	80063a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3310      	adds	r3, #16
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff fca0 	bl	8005cdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fc9b 	bl	8005cdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063a6:	f7ff fead 	bl	8006104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063aa:	2301      	movs	r3, #1
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08e      	sub	sp, #56	; 0x38
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <xQueueGenericCreateStatic+0x52>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <xQueueGenericCreateStatic+0x56>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <xQueueGenericCreateStatic+0x58>
 800640e:	2300      	movs	r3, #0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	623b      	str	r3, [r7, #32]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <xQueueGenericCreateStatic+0x7e>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <xQueueGenericCreateStatic+0x82>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <xQueueGenericCreateStatic+0x84>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10a      	bne.n	8006456 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	61fb      	str	r3, [r7, #28]
}
 8006452:	bf00      	nop
 8006454:	e7fe      	b.n	8006454 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006456:	2350      	movs	r3, #80	; 0x50
 8006458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b50      	cmp	r3, #80	; 0x50
 800645e:	d00a      	beq.n	8006476 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	61bb      	str	r3, [r7, #24]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006476:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00d      	beq.n	800649e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800648a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4613      	mov	r3, r2
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 f805 	bl	80064a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3730      	adds	r7, #48	; 0x30
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e002      	b.n	80064ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064d6:	2101      	movs	r1, #1
 80064d8:	69b8      	ldr	r0, [r7, #24]
 80064da:	f7ff ff05 	bl	80062e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	78fa      	ldrb	r2, [r7, #3]
 80064e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08e      	sub	sp, #56	; 0x38
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064fe:	2300      	movs	r3, #0
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xQueueGenericSend+0x32>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <xQueueGenericSend+0x40>
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <xQueueGenericSend+0x44>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <xQueueGenericSend+0x46>
 8006534:	2300      	movs	r3, #0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <xQueueGenericSend+0x60>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d103      	bne.n	800655e <xQueueGenericSend+0x6e>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <xQueueGenericSend+0x72>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <xQueueGenericSend+0x74>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericSend+0x8e>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	623b      	str	r3, [r7, #32]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657e:	f001 f9bd 	bl	80078fc <xTaskGetSchedulerState>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <xQueueGenericSend+0x9e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <xQueueGenericSend+0xa2>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <xQueueGenericSend+0xa4>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10a      	bne.n	80065ae <xQueueGenericSend+0xbe>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61fb      	str	r3, [r7, #28]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ae:	f7ff fd79 	bl	80060a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <xQueueGenericSend+0xd4>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d129      	bne.n	8006618 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ca:	f000 fa0b 	bl	80069e4 <prvCopyDataToQueue>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	3324      	adds	r3, #36	; 0x24
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 ffcf 	bl	8007580 <xTaskRemoveFromEventList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e8:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <xQueueGenericSend+0x1f8>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	e00a      	b.n	8006610 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006600:	4b39      	ldr	r3, [pc, #228]	; (80066e8 <xQueueGenericSend+0x1f8>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006610:	f7ff fd78 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	e063      	b.n	80066e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800661e:	f7ff fd71 	bl	8006104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006622:	2300      	movs	r3, #0
 8006624:	e05c      	b.n	80066e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4618      	mov	r0, r3
 8006632:	f001 f809 	bl	8007648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663a:	f7ff fd63 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663e:	f000 fd7b 	bl	8007138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006642:	f7ff fd2f 	bl	80060a4 <vPortEnterCritical>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800664c:	b25b      	sxtb	r3, r3
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d103      	bne.n	800665c <xQueueGenericSend+0x16c>
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006662:	b25b      	sxtb	r3, r3
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d103      	bne.n	8006672 <xQueueGenericSend+0x182>
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006672:	f7ff fd47 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	f107 0314 	add.w	r3, r7, #20
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fff8 	bl	8007674 <xTaskCheckForTimeOut>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d124      	bne.n	80066d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800668a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668c:	f000 faa2 	bl	8006bd4 <prvIsQueueFull>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	3310      	adds	r3, #16
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff1e 	bl	80074e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066a6:	f000 fa2d 	bl	8006b04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066aa:	f000 fd53 	bl	8007154 <xTaskResumeAll>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af7c 	bne.w	80065ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066b6:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <xQueueGenericSend+0x1f8>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	e772      	b.n	80065ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066ca:	f000 fa1b 	bl	8006b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ce:	f000 fd41 	bl	8007154 <xTaskResumeAll>
 80066d2:	e76c      	b.n	80065ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d6:	f000 fa15 	bl	8006b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066da:	f000 fd3b 	bl	8007154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3738      	adds	r7, #56	; 0x38
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b090      	sub	sp, #64	; 0x40
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <xQueueGenericSendFromISR+0x3c>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <xQueueGenericSendFromISR+0x40>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <xQueueGenericSendFromISR+0x42>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d103      	bne.n	8006756 <xQueueGenericSendFromISR+0x6a>
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <xQueueGenericSendFromISR+0x6e>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <xQueueGenericSendFromISR+0x70>
 800675a:	2300      	movs	r3, #0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006776:	f7ff fd77 	bl	8006268 <vPortValidateInterruptPriority>
	__asm volatile
 800677a:	f3ef 8211 	mrs	r2, BASEPRI
 800677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006782:	f383 8811 	msr	BASEPRI, r3
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	61fa      	str	r2, [r7, #28]
 8006790:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006792:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <xQueueGenericSendFromISR+0xbc>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d12f      	bne.n	8006808 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067be:	f000 f911 	bl	80069e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d112      	bne.n	80067f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d016      	beq.n	8006802 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fed1 	bl	8007580 <xTaskRemoveFromEventList>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00e      	beq.n	8006802 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	e007      	b.n	8006802 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067f6:	3301      	adds	r3, #1
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	b25a      	sxtb	r2, r3
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006802:	2301      	movs	r3, #1
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006806:	e001      	b.n	800680c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006808:	2300      	movs	r3, #0
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f383 8811 	msr	BASEPRI, r3
}
 8006816:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800681a:	4618      	mov	r0, r3
 800681c:	3740      	adds	r7, #64	; 0x40
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08c      	sub	sp, #48	; 0x30
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006830:	2300      	movs	r3, #0
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <xQueueReceive+0x30>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	623b      	str	r3, [r7, #32]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <xQueueReceive+0x3e>
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xQueueReceive+0x42>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xQueueReceive+0x44>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xQueueReceive+0x5e>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	61fb      	str	r3, [r7, #28]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006882:	f001 f83b 	bl	80078fc <xTaskGetSchedulerState>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <xQueueReceive+0x6e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <xQueueReceive+0x72>
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <xQueueReceive+0x74>
 8006896:	2300      	movs	r3, #0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <xQueueReceive+0x8e>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61bb      	str	r3, [r7, #24]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068b2:	f7ff fbf7 	bl	80060a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01f      	beq.n	8006902 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c6:	f000 f8f7 	bl	8006ab8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	1e5a      	subs	r2, r3, #1
 80068ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00f      	beq.n	80068fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	3310      	adds	r3, #16
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fe4e 	bl	8007580 <xTaskRemoveFromEventList>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068ea:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <xQueueReceive+0x1bc>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068fa:	f7ff fc03 	bl	8006104 <vPortExitCritical>
				return pdPASS;
 80068fe:	2301      	movs	r3, #1
 8006900:	e069      	b.n	80069d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006908:	f7ff fbfc 	bl	8006104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800690c:	2300      	movs	r3, #0
 800690e:	e062      	b.n	80069d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d106      	bne.n	8006924 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006916:	f107 0310 	add.w	r3, r7, #16
 800691a:	4618      	mov	r0, r3
 800691c:	f000 fe94 	bl	8007648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006924:	f7ff fbee 	bl	8006104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006928:	f000 fc06 	bl	8007138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800692c:	f7ff fbba 	bl	80060a4 <vPortEnterCritical>
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006936:	b25b      	sxtb	r3, r3
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d103      	bne.n	8006946 <xQueueReceive+0x122>
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694c:	b25b      	sxtb	r3, r3
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d103      	bne.n	800695c <xQueueReceive+0x138>
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800695c:	f7ff fbd2 	bl	8006104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006960:	1d3a      	adds	r2, r7, #4
 8006962:	f107 0310 	add.w	r3, r7, #16
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fe83 	bl	8007674 <xTaskCheckForTimeOut>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d123      	bne.n	80069bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006976:	f000 f917 	bl	8006ba8 <prvIsQueueEmpty>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d017      	beq.n	80069b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4611      	mov	r1, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fda9 	bl	80074e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800698e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006990:	f000 f8b8 	bl	8006b04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006994:	f000 fbde 	bl	8007154 <xTaskResumeAll>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d189      	bne.n	80068b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <xQueueReceive+0x1bc>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	e780      	b.n	80068b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b2:	f000 f8a7 	bl	8006b04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b6:	f000 fbcd 	bl	8007154 <xTaskResumeAll>
 80069ba:	e77a      	b.n	80068b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069be:	f000 f8a1 	bl	8006b04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069c2:	f000 fbc7 	bl	8007154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c8:	f000 f8ee 	bl	8006ba8 <prvIsQueueEmpty>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f43f af6f 	beq.w	80068b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3730      	adds	r7, #48	; 0x30
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d14d      	bne.n	8006aa6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 ff92 	bl	8007938 <xTaskPriorityDisinherit>
 8006a14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	609a      	str	r2, [r3, #8]
 8006a1c:	e043      	b.n	8006aa6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d119      	bne.n	8006a58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6858      	ldr	r0, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	f001 fbbc 	bl	80081ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	441a      	add	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d32b      	bcc.n	8006aa6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	e026      	b.n	8006aa6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68d8      	ldr	r0, [r3, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	461a      	mov	r2, r3
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	f001 fba2 	bl	80081ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	425b      	negs	r3, r3
 8006a72:	441a      	add	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d207      	bcs.n	8006a94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	425b      	negs	r3, r3
 8006a8e:	441a      	add	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d105      	bne.n	8006aa6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006aae:	697b      	ldr	r3, [r7, #20]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d018      	beq.n	8006afc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	441a      	add	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d303      	bcc.n	8006aec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68d9      	ldr	r1, [r3, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	461a      	mov	r2, r3
 8006af6:	6838      	ldr	r0, [r7, #0]
 8006af8:	f001 fb58 	bl	80081ac <memcpy>
	}
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b0c:	f7ff faca 	bl	80060a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b18:	e011      	b.n	8006b3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d012      	beq.n	8006b48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 fd2a 	bl	8007580 <xTaskRemoveFromEventList>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b32:	f000 fe01 	bl	8007738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dce9      	bgt.n	8006b1a <prvUnlockQueue+0x16>
 8006b46:	e000      	b.n	8006b4a <prvUnlockQueue+0x46>
					break;
 8006b48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b52:	f7ff fad7 	bl	8006104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b56:	f7ff faa5 	bl	80060a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b62:	e011      	b.n	8006b88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d012      	beq.n	8006b92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3310      	adds	r3, #16
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fd05 	bl	8007580 <xTaskRemoveFromEventList>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b7c:	f000 fddc 	bl	8007738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dce9      	bgt.n	8006b64 <prvUnlockQueue+0x60>
 8006b90:	e000      	b.n	8006b94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b9c:	f7ff fab2 	bl	8006104 <vPortExitCritical>
}
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bb0:	f7ff fa78 	bl	80060a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e001      	b.n	8006bc6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bc6:	f7ff fa9d 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bdc:	f7ff fa62 	bl	80060a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d102      	bne.n	8006bf2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	e001      	b.n	8006bf6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bf6:	f7ff fa85 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	e014      	b.n	8006c3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <vQueueAddToRegistry+0x50>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c20:	490c      	ldr	r1, [pc, #48]	; (8006c54 <vQueueAddToRegistry+0x50>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <vQueueAddToRegistry+0x50>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4413      	add	r3, r2
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c36:	e006      	b.n	8006c46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b07      	cmp	r3, #7
 8006c42:	d9e7      	bls.n	8006c14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20004830 	.word	0x20004830

08006c58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c68:	f7ff fa1c 	bl	80060a4 <vPortEnterCritical>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d103      	bne.n	8006c82 <vQueueWaitForMessageRestricted+0x2a>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d103      	bne.n	8006c98 <vQueueWaitForMessageRestricted+0x40>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c98:	f7ff fa34 	bl	8006104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d106      	bne.n	8006cb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	3324      	adds	r3, #36	; 0x24
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fc3b 	bl	8007528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f7ff ff26 	bl	8006b04 <prvUnlockQueue>
	}
 8006cb8:	bf00      	nop
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08e      	sub	sp, #56	; 0x38
 8006cc4:	af04      	add	r7, sp, #16
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <xTaskCreateStatic+0x2a>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	623b      	str	r3, [r7, #32]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTaskCreateStatic+0x46>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	61fb      	str	r3, [r7, #28]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d06:	235c      	movs	r3, #92	; 0x5c
 8006d08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	2b5c      	cmp	r3, #92	; 0x5c
 8006d0e:	d00a      	beq.n	8006d26 <xTaskCreateStatic+0x66>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	61bb      	str	r3, [r7, #24]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01e      	beq.n	8006d6c <xTaskCreateStatic+0xac>
 8006d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01b      	beq.n	8006d6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d46:	2300      	movs	r3, #0
 8006d48:	9303      	str	r3, [sp, #12]
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	9302      	str	r3, [sp, #8]
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f850 	bl	8006e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d66:	f000 f8dd 	bl	8006f24 <prvAddNewTaskToReadyList>
 8006d6a:	e001      	b.n	8006d70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d70:	697b      	ldr	r3, [r7, #20]
	}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3728      	adds	r7, #40	; 0x28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b08c      	sub	sp, #48	; 0x30
 8006d7e:	af04      	add	r7, sp, #16
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	60b9      	str	r1, [r7, #8]
 8006d84:	603b      	str	r3, [r7, #0]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d8a:	88fb      	ldrh	r3, [r7, #6]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fdba 	bl	8005908 <pvPortMalloc>
 8006d94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d9c:	205c      	movs	r0, #92	; 0x5c
 8006d9e:	f7fe fdb3 	bl	8005908 <pvPortMalloc>
 8006da2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
 8006db0:	e005      	b.n	8006dbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006db2:	6978      	ldr	r0, [r7, #20]
 8006db4:	f7fe fe74 	bl	8005aa0 <vPortFree>
 8006db8:	e001      	b.n	8006dbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dcc:	88fa      	ldrh	r2, [r7, #6]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9303      	str	r3, [sp, #12]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f000 f80e 	bl	8006e04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006de8:	69f8      	ldr	r0, [r7, #28]
 8006dea:	f000 f89b 	bl	8006f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	e002      	b.n	8006dfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006df4:	f04f 33ff 	mov.w	r3, #4294967295
 8006df8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
	}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	21a5      	movs	r1, #165	; 0xa5
 8006e1e:	f001 f9d3 	bl	80081c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	f003 0307 	and.w	r3, r3, #7
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	617b      	str	r3, [r7, #20]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d01f      	beq.n	8006ea2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	e012      	b.n	8006e8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	7819      	ldrb	r1, [r3, #0]
 8006e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	3334      	adds	r3, #52	; 0x34
 8006e78:	460a      	mov	r2, r1
 8006e7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	2b0f      	cmp	r3, #15
 8006e92:	d9e9      	bls.n	8006e68 <prvInitialiseNewTask+0x64>
 8006e94:	e000      	b.n	8006e98 <prvInitialiseNewTask+0x94>
			{
				break;
 8006e96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ea0:	e003      	b.n	8006eaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	2b37      	cmp	r3, #55	; 0x37
 8006eae:	d901      	bls.n	8006eb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006eb0:	2337      	movs	r3, #55	; 0x37
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe ff26 	bl	8005d1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe ff21 	bl	8005d1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	68f9      	ldr	r1, [r7, #12]
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f7fe ff9e 	bl	8005e44 <pxPortInitialiseStack>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f2c:	f7ff f8ba 	bl	80060a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f30:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <prvAddNewTaskToReadyList+0xc4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a2c      	ldr	r2, [pc, #176]	; (8006fe8 <prvAddNewTaskToReadyList+0xc4>)
 8006f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f3a:	4b2c      	ldr	r3, [pc, #176]	; (8006fec <prvAddNewTaskToReadyList+0xc8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <prvAddNewTaskToReadyList+0xc8>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f48:	4b27      	ldr	r3, [pc, #156]	; (8006fe8 <prvAddNewTaskToReadyList+0xc4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d110      	bne.n	8006f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f50:	f000 fc16 	bl	8007780 <prvInitialiseTaskLists>
 8006f54:	e00d      	b.n	8006f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f56:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <prvAddNewTaskToReadyList+0xcc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d109      	bne.n	8006f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f5e:	4b23      	ldr	r3, [pc, #140]	; (8006fec <prvAddNewTaskToReadyList+0xc8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d802      	bhi.n	8006f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f6c:	4a1f      	ldr	r2, [pc, #124]	; (8006fec <prvAddNewTaskToReadyList+0xc8>)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f72:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <prvAddNewTaskToReadyList+0xd0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3301      	adds	r3, #1
 8006f78:	4a1e      	ldr	r2, [pc, #120]	; (8006ff4 <prvAddNewTaskToReadyList+0xd0>)
 8006f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <prvAddNewTaskToReadyList+0xd0>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <prvAddNewTaskToReadyList+0xd4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d903      	bls.n	8006f98 <prvAddNewTaskToReadyList+0x74>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <prvAddNewTaskToReadyList+0xd4>)
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <prvAddNewTaskToReadyList+0xd8>)
 8006fa6:	441a      	add	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	4619      	mov	r1, r3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	f7fe fec1 	bl	8005d36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fb4:	f7ff f8a6 	bl	8006104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <prvAddNewTaskToReadyList+0xcc>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00e      	beq.n	8006fde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <prvAddNewTaskToReadyList+0xc8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d207      	bcs.n	8006fde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fce:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <prvAddNewTaskToReadyList+0xdc>)
 8006fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20004d44 	.word	0x20004d44
 8006fec:	20004870 	.word	0x20004870
 8006ff0:	20004d50 	.word	0x20004d50
 8006ff4:	20004d60 	.word	0x20004d60
 8006ff8:	20004d4c 	.word	0x20004d4c
 8006ffc:	20004874 	.word	0x20004874
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d017      	beq.n	8007046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007016:	4b13      	ldr	r3, [pc, #76]	; (8007064 <vTaskDelay+0x60>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <vTaskDelay+0x30>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60bb      	str	r3, [r7, #8]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007034:	f000 f880 	bl	8007138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fcea 	bl	8007a14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007040:	f000 f888 	bl	8007154 <xTaskResumeAll>
 8007044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d107      	bne.n	800705c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <vTaskDelay+0x64>)
 800704e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	20004d6c 	.word	0x20004d6c
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	; 0x28
 8007070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800707a:	463a      	mov	r2, r7
 800707c:	1d39      	adds	r1, r7, #4
 800707e:	f107 0308 	add.w	r3, r7, #8
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fc0c 	bl	80058a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	2300      	movs	r3, #0
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	460a      	mov	r2, r1
 800709a:	4921      	ldr	r1, [pc, #132]	; (8007120 <vTaskStartScheduler+0xb4>)
 800709c:	4821      	ldr	r0, [pc, #132]	; (8007124 <vTaskStartScheduler+0xb8>)
 800709e:	f7ff fe0f 	bl	8006cc0 <xTaskCreateStatic>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4a20      	ldr	r2, [pc, #128]	; (8007128 <vTaskStartScheduler+0xbc>)
 80070a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070a8:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <vTaskStartScheduler+0xbc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e001      	b.n	80070ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d102      	bne.n	80070c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070c0:	f000 fcfc 	bl	8007abc <xTimerCreateTimerTask>
 80070c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d116      	bne.n	80070fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	613b      	str	r3, [r7, #16]
}
 80070de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <vTaskStartScheduler+0xc0>)
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070e8:	4b11      	ldr	r3, [pc, #68]	; (8007130 <vTaskStartScheduler+0xc4>)
 80070ea:	2201      	movs	r2, #1
 80070ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070ee:	4b11      	ldr	r3, [pc, #68]	; (8007134 <vTaskStartScheduler+0xc8>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070f4:	f7fe ff34 	bl	8005f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070f8:	e00e      	b.n	8007118 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d10a      	bne.n	8007118 <vTaskStartScheduler+0xac>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60fb      	str	r3, [r7, #12]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <vTaskStartScheduler+0xaa>
}
 8007118:	bf00      	nop
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	0800b378 	.word	0x0800b378
 8007124:	08007751 	.word	0x08007751
 8007128:	20004d68 	.word	0x20004d68
 800712c:	20004d64 	.word	0x20004d64
 8007130:	20004d50 	.word	0x20004d50
 8007134:	20004d48 	.word	0x20004d48

08007138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <vTaskSuspendAll+0x18>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3301      	adds	r3, #1
 8007142:	4a03      	ldr	r2, [pc, #12]	; (8007150 <vTaskSuspendAll+0x18>)
 8007144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007146:	bf00      	nop
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20004d6c 	.word	0x20004d6c

08007154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800715e:	2300      	movs	r3, #0
 8007160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007162:	4b42      	ldr	r3, [pc, #264]	; (800726c <xTaskResumeAll+0x118>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <xTaskResumeAll+0x2c>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	603b      	str	r3, [r7, #0]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007180:	f7fe ff90 	bl	80060a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007184:	4b39      	ldr	r3, [pc, #228]	; (800726c <xTaskResumeAll+0x118>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	4a38      	ldr	r2, [pc, #224]	; (800726c <xTaskResumeAll+0x118>)
 800718c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800718e:	4b37      	ldr	r3, [pc, #220]	; (800726c <xTaskResumeAll+0x118>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d162      	bne.n	800725c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007196:	4b36      	ldr	r3, [pc, #216]	; (8007270 <xTaskResumeAll+0x11c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d05e      	beq.n	800725c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800719e:	e02f      	b.n	8007200 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a0:	4b34      	ldr	r3, [pc, #208]	; (8007274 <xTaskResumeAll+0x120>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3318      	adds	r3, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fe fe1f 	bl	8005df0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fe1a 	bl	8005df0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	4b2d      	ldr	r3, [pc, #180]	; (8007278 <xTaskResumeAll+0x124>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d903      	bls.n	80071d0 <xTaskResumeAll+0x7c>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	4a2a      	ldr	r2, [pc, #168]	; (8007278 <xTaskResumeAll+0x124>)
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4a27      	ldr	r2, [pc, #156]	; (800727c <xTaskResumeAll+0x128>)
 80071de:	441a      	add	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f7fe fda5 	bl	8005d36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4b23      	ldr	r3, [pc, #140]	; (8007280 <xTaskResumeAll+0x12c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <xTaskResumeAll+0x130>)
 80071fc:	2201      	movs	r2, #1
 80071fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007200:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xTaskResumeAll+0x120>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1cb      	bne.n	80071a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800720e:	f000 fb55 	bl	80078bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007212:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <xTaskResumeAll+0x134>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d010      	beq.n	8007240 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800721e:	f000 f847 	bl	80072b0 <xTaskIncrementTick>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007228:	4b16      	ldr	r3, [pc, #88]	; (8007284 <xTaskResumeAll+0x130>)
 800722a:	2201      	movs	r2, #1
 800722c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3b01      	subs	r3, #1
 8007232:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f1      	bne.n	800721e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <xTaskResumeAll+0x134>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <xTaskResumeAll+0x130>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800724c:	4b0f      	ldr	r3, [pc, #60]	; (800728c <xTaskResumeAll+0x138>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800725c:	f7fe ff52 	bl	8006104 <vPortExitCritical>

	return xAlreadyYielded;
 8007260:	68bb      	ldr	r3, [r7, #8]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20004d6c 	.word	0x20004d6c
 8007270:	20004d44 	.word	0x20004d44
 8007274:	20004d04 	.word	0x20004d04
 8007278:	20004d4c 	.word	0x20004d4c
 800727c:	20004874 	.word	0x20004874
 8007280:	20004870 	.word	0x20004870
 8007284:	20004d58 	.word	0x20004d58
 8007288:	20004d54 	.word	0x20004d54
 800728c:	e000ed04 	.word	0xe000ed04

08007290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007296:	4b05      	ldr	r3, [pc, #20]	; (80072ac <xTaskGetTickCount+0x1c>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800729c:	687b      	ldr	r3, [r7, #4]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20004d48 	.word	0x20004d48

080072b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ba:	4b4f      	ldr	r3, [pc, #316]	; (80073f8 <xTaskIncrementTick+0x148>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 808f 	bne.w	80073e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072c4:	4b4d      	ldr	r3, [pc, #308]	; (80073fc <xTaskIncrementTick+0x14c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072cc:	4a4b      	ldr	r2, [pc, #300]	; (80073fc <xTaskIncrementTick+0x14c>)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d120      	bne.n	800731a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072d8:	4b49      	ldr	r3, [pc, #292]	; (8007400 <xTaskIncrementTick+0x150>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	603b      	str	r3, [r7, #0]
}
 80072f4:	bf00      	nop
 80072f6:	e7fe      	b.n	80072f6 <xTaskIncrementTick+0x46>
 80072f8:	4b41      	ldr	r3, [pc, #260]	; (8007400 <xTaskIncrementTick+0x150>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	4b41      	ldr	r3, [pc, #260]	; (8007404 <xTaskIncrementTick+0x154>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a3f      	ldr	r2, [pc, #252]	; (8007400 <xTaskIncrementTick+0x150>)
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	4a3f      	ldr	r2, [pc, #252]	; (8007404 <xTaskIncrementTick+0x154>)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <xTaskIncrementTick+0x158>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	4a3d      	ldr	r2, [pc, #244]	; (8007408 <xTaskIncrementTick+0x158>)
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	f000 fad1 	bl	80078bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800731a:	4b3c      	ldr	r3, [pc, #240]	; (800740c <xTaskIncrementTick+0x15c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	429a      	cmp	r2, r3
 8007322:	d349      	bcc.n	80073b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <xTaskIncrementTick+0x150>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d104      	bne.n	8007338 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800732e:	4b37      	ldr	r3, [pc, #220]	; (800740c <xTaskIncrementTick+0x15c>)
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	601a      	str	r2, [r3, #0]
					break;
 8007336:	e03f      	b.n	80073b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <xTaskIncrementTick+0x150>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	429a      	cmp	r2, r3
 800734e:	d203      	bcs.n	8007358 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007350:	4a2e      	ldr	r2, [pc, #184]	; (800740c <xTaskIncrementTick+0x15c>)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007356:	e02f      	b.n	80073b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	3304      	adds	r3, #4
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fd47 	bl	8005df0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d004      	beq.n	8007374 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	3318      	adds	r3, #24
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fd3e 	bl	8005df0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	4b25      	ldr	r3, [pc, #148]	; (8007410 <xTaskIncrementTick+0x160>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d903      	bls.n	8007388 <xTaskIncrementTick+0xd8>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a22      	ldr	r2, [pc, #136]	; (8007410 <xTaskIncrementTick+0x160>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <xTaskIncrementTick+0x164>)
 8007396:	441a      	add	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	3304      	adds	r3, #4
 800739c:	4619      	mov	r1, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	f7fe fcc9 	bl	8005d36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <xTaskIncrementTick+0x168>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3b8      	bcc.n	8007324 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073b2:	2301      	movs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073b6:	e7b5      	b.n	8007324 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <xTaskIncrementTick+0x168>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073be:	4915      	ldr	r1, [pc, #84]	; (8007414 <xTaskIncrementTick+0x164>)
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d901      	bls.n	80073d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073d4:	4b11      	ldr	r3, [pc, #68]	; (800741c <xTaskIncrementTick+0x16c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e004      	b.n	80073ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <xTaskIncrementTick+0x170>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	4a0d      	ldr	r2, [pc, #52]	; (8007420 <xTaskIncrementTick+0x170>)
 80073ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80073ec:	697b      	ldr	r3, [r7, #20]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20004d6c 	.word	0x20004d6c
 80073fc:	20004d48 	.word	0x20004d48
 8007400:	20004cfc 	.word	0x20004cfc
 8007404:	20004d00 	.word	0x20004d00
 8007408:	20004d5c 	.word	0x20004d5c
 800740c:	20004d64 	.word	0x20004d64
 8007410:	20004d4c 	.word	0x20004d4c
 8007414:	20004874 	.word	0x20004874
 8007418:	20004870 	.word	0x20004870
 800741c:	20004d58 	.word	0x20004d58
 8007420:	20004d54 	.word	0x20004d54

08007424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800742a:	4b28      	ldr	r3, [pc, #160]	; (80074cc <vTaskSwitchContext+0xa8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007432:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <vTaskSwitchContext+0xac>)
 8007434:	2201      	movs	r2, #1
 8007436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007438:	e041      	b.n	80074be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800743a:	4b25      	ldr	r3, [pc, #148]	; (80074d0 <vTaskSwitchContext+0xac>)
 800743c:	2200      	movs	r2, #0
 800743e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007440:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <vTaskSwitchContext+0xb0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e010      	b.n	800746a <vTaskSwitchContext+0x46>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10a      	bne.n	8007464 <vTaskSwitchContext+0x40>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <vTaskSwitchContext+0x3e>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3b01      	subs	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	491b      	ldr	r1, [pc, #108]	; (80074d8 <vTaskSwitchContext+0xb4>)
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0e4      	beq.n	8007448 <vTaskSwitchContext+0x24>
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <vTaskSwitchContext+0xb4>)
 800748a:	4413      	add	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	605a      	str	r2, [r3, #4]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	3308      	adds	r3, #8
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d104      	bne.n	80074ae <vTaskSwitchContext+0x8a>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	605a      	str	r2, [r3, #4]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4a09      	ldr	r2, [pc, #36]	; (80074dc <vTaskSwitchContext+0xb8>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	4a06      	ldr	r2, [pc, #24]	; (80074d4 <vTaskSwitchContext+0xb0>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6013      	str	r3, [r2, #0]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20004d6c 	.word	0x20004d6c
 80074d0:	20004d58 	.word	0x20004d58
 80074d4:	20004d4c 	.word	0x20004d4c
 80074d8:	20004874 	.word	0x20004874
 80074dc:	20004870 	.word	0x20004870

080074e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <vTaskPlaceOnEventList+0x44>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3318      	adds	r3, #24
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe fc35 	bl	8005d7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007514:	2101      	movs	r1, #1
 8007516:	6838      	ldr	r0, [r7, #0]
 8007518:	f000 fa7c 	bl	8007a14 <prvAddCurrentTaskToDelayedList>
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	20004870 	.word	0x20004870

08007528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10a      	bne.n	8007550 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	617b      	str	r3, [r7, #20]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <vTaskPlaceOnEventListRestricted+0x54>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3318      	adds	r3, #24
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7fe fbec 	bl	8005d36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007564:	f04f 33ff 	mov.w	r3, #4294967295
 8007568:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	68b8      	ldr	r0, [r7, #8]
 800756e:	f000 fa51 	bl	8007a14 <prvAddCurrentTaskToDelayedList>
	}
 8007572:	bf00      	nop
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20004870 	.word	0x20004870

08007580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60fb      	str	r3, [r7, #12]
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	3318      	adds	r3, #24
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fc1d 	bl	8005df0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b6:	4b1e      	ldr	r3, [pc, #120]	; (8007630 <xTaskRemoveFromEventList+0xb0>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d11d      	bne.n	80075fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fc14 	bl	8005df0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4b19      	ldr	r3, [pc, #100]	; (8007634 <xTaskRemoveFromEventList+0xb4>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d903      	bls.n	80075dc <xTaskRemoveFromEventList+0x5c>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <xTaskRemoveFromEventList+0xb4>)
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4a13      	ldr	r2, [pc, #76]	; (8007638 <xTaskRemoveFromEventList+0xb8>)
 80075ea:	441a      	add	r2, r3
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4610      	mov	r0, r2
 80075f4:	f7fe fb9f 	bl	8005d36 <vListInsertEnd>
 80075f8:	e005      	b.n	8007606 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	3318      	adds	r3, #24
 80075fe:	4619      	mov	r1, r3
 8007600:	480e      	ldr	r0, [pc, #56]	; (800763c <xTaskRemoveFromEventList+0xbc>)
 8007602:	f7fe fb98 	bl	8005d36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <xTaskRemoveFromEventList+0xc0>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	429a      	cmp	r2, r3
 8007612:	d905      	bls.n	8007620 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <xTaskRemoveFromEventList+0xc4>)
 800761a:	2201      	movs	r2, #1
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e001      	b.n	8007624 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007620:	2300      	movs	r3, #0
 8007622:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007624:	697b      	ldr	r3, [r7, #20]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	20004d6c 	.word	0x20004d6c
 8007634:	20004d4c 	.word	0x20004d4c
 8007638:	20004874 	.word	0x20004874
 800763c:	20004d04 	.word	0x20004d04
 8007640:	20004870 	.word	0x20004870
 8007644:	20004d58 	.word	0x20004d58

08007648 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007650:	4b06      	ldr	r3, [pc, #24]	; (800766c <vTaskInternalSetTimeOutState+0x24>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <vTaskInternalSetTimeOutState+0x28>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	605a      	str	r2, [r3, #4]
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20004d5c 	.word	0x20004d5c
 8007670:	20004d48 	.word	0x20004d48

08007674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007688:	f383 8811 	msr	BASEPRI, r3
 800768c:	f3bf 8f6f 	isb	sy
 8007690:	f3bf 8f4f 	dsb	sy
 8007694:	613b      	str	r3, [r7, #16]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	60fb      	str	r3, [r7, #12]
}
 80076b2:	bf00      	nop
 80076b4:	e7fe      	b.n	80076b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076b6:	f7fe fcf5 	bl	80060a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <xTaskCheckForTimeOut+0xbc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d2:	d102      	bne.n	80076da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	e023      	b.n	8007722 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b15      	ldr	r3, [pc, #84]	; (8007734 <xTaskCheckForTimeOut+0xc0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d007      	beq.n	80076f6 <xTaskCheckForTimeOut+0x82>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d302      	bcc.n	80076f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076f0:	2301      	movs	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	e015      	b.n	8007722 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d20b      	bcs.n	8007718 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ff9b 	bl	8007648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]
 8007716:	e004      	b.n	8007722 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007722:	f7fe fcef 	bl	8006104 <vPortExitCritical>

	return xReturn;
 8007726:	69fb      	ldr	r3, [r7, #28]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3720      	adds	r7, #32
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20004d48 	.word	0x20004d48
 8007734:	20004d5c 	.word	0x20004d5c

08007738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <vTaskMissedYield+0x14>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]
}
 8007742:	bf00      	nop
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20004d58 	.word	0x20004d58

08007750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007758:	f000 f852 	bl	8007800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <prvIdleTask+0x28>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d9f9      	bls.n	8007758 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <prvIdleTask+0x2c>)
 8007766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007774:	e7f0      	b.n	8007758 <prvIdleTask+0x8>
 8007776:	bf00      	nop
 8007778:	20004874 	.word	0x20004874
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007786:	2300      	movs	r3, #0
 8007788:	607b      	str	r3, [r7, #4]
 800778a:	e00c      	b.n	80077a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4a12      	ldr	r2, [pc, #72]	; (80077e0 <prvInitialiseTaskLists+0x60>)
 8007798:	4413      	add	r3, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fa9e 	bl	8005cdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3301      	adds	r3, #1
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b37      	cmp	r3, #55	; 0x37
 80077aa:	d9ef      	bls.n	800778c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077ac:	480d      	ldr	r0, [pc, #52]	; (80077e4 <prvInitialiseTaskLists+0x64>)
 80077ae:	f7fe fa95 	bl	8005cdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077b2:	480d      	ldr	r0, [pc, #52]	; (80077e8 <prvInitialiseTaskLists+0x68>)
 80077b4:	f7fe fa92 	bl	8005cdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077b8:	480c      	ldr	r0, [pc, #48]	; (80077ec <prvInitialiseTaskLists+0x6c>)
 80077ba:	f7fe fa8f 	bl	8005cdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077be:	480c      	ldr	r0, [pc, #48]	; (80077f0 <prvInitialiseTaskLists+0x70>)
 80077c0:	f7fe fa8c 	bl	8005cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077c4:	480b      	ldr	r0, [pc, #44]	; (80077f4 <prvInitialiseTaskLists+0x74>)
 80077c6:	f7fe fa89 	bl	8005cdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <prvInitialiseTaskLists+0x78>)
 80077cc:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <prvInitialiseTaskLists+0x64>)
 80077ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvInitialiseTaskLists+0x7c>)
 80077d2:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <prvInitialiseTaskLists+0x68>)
 80077d4:	601a      	str	r2, [r3, #0]
}
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20004874 	.word	0x20004874
 80077e4:	20004cd4 	.word	0x20004cd4
 80077e8:	20004ce8 	.word	0x20004ce8
 80077ec:	20004d04 	.word	0x20004d04
 80077f0:	20004d18 	.word	0x20004d18
 80077f4:	20004d30 	.word	0x20004d30
 80077f8:	20004cfc 	.word	0x20004cfc
 80077fc:	20004d00 	.word	0x20004d00

08007800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007806:	e019      	b.n	800783c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007808:	f7fe fc4c 	bl	80060a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800780c:	4b10      	ldr	r3, [pc, #64]	; (8007850 <prvCheckTasksWaitingTermination+0x50>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fae9 	bl	8005df0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800781e:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <prvCheckTasksWaitingTermination+0x54>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3b01      	subs	r3, #1
 8007824:	4a0b      	ldr	r2, [pc, #44]	; (8007854 <prvCheckTasksWaitingTermination+0x54>)
 8007826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <prvCheckTasksWaitingTermination+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3b01      	subs	r3, #1
 800782e:	4a0a      	ldr	r2, [pc, #40]	; (8007858 <prvCheckTasksWaitingTermination+0x58>)
 8007830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007832:	f7fe fc67 	bl	8006104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f810 	bl	800785c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <prvCheckTasksWaitingTermination+0x58>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e1      	bne.n	8007808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20004d18 	.word	0x20004d18
 8007854:	20004d44 	.word	0x20004d44
 8007858:	20004d2c 	.word	0x20004d2c

0800785c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800786a:	2b00      	cmp	r3, #0
 800786c:	d108      	bne.n	8007880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe f914 	bl	8005aa0 <vPortFree>
				vPortFree( pxTCB );
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7fe f911 	bl	8005aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800787e:	e018      	b.n	80078b2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007886:	2b01      	cmp	r3, #1
 8007888:	d103      	bne.n	8007892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fe f908 	bl	8005aa0 <vPortFree>
	}
 8007890:	e00f      	b.n	80078b2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007898:	2b02      	cmp	r3, #2
 800789a:	d00a      	beq.n	80078b2 <prvDeleteTCB+0x56>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	60fb      	str	r3, [r7, #12]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <prvDeleteTCB+0x54>
	}
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <prvResetNextTaskUnblockTime+0x38>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d104      	bne.n	80078d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078cc:	4b0a      	ldr	r3, [pc, #40]	; (80078f8 <prvResetNextTaskUnblockTime+0x3c>)
 80078ce:	f04f 32ff 	mov.w	r2, #4294967295
 80078d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078d4:	e008      	b.n	80078e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <prvResetNextTaskUnblockTime+0x38>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <prvResetNextTaskUnblockTime+0x3c>)
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	20004cfc 	.word	0x20004cfc
 80078f8:	20004d64 	.word	0x20004d64

080078fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007902:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <xTaskGetSchedulerState+0x34>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d102      	bne.n	8007910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800790a:	2301      	movs	r3, #1
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	e008      	b.n	8007922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <xTaskGetSchedulerState+0x38>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007918:	2302      	movs	r3, #2
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	e001      	b.n	8007922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800791e:	2300      	movs	r3, #0
 8007920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007922:	687b      	ldr	r3, [r7, #4]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	20004d50 	.word	0x20004d50
 8007934:	20004d6c 	.word	0x20004d6c

08007938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d056      	beq.n	80079fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800794e:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <xTaskPriorityDisinherit+0xd0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	429a      	cmp	r2, r3
 8007956:	d00a      	beq.n	800796e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60bb      	str	r3, [r7, #8]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007990:	1e5a      	subs	r2, r3, #1
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d02c      	beq.n	80079fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d128      	bne.n	80079fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fa1e 	bl	8005df0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <xTaskPriorityDisinherit+0xd4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d903      	bls.n	80079dc <xTaskPriorityDisinherit+0xa4>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <xTaskPriorityDisinherit+0xd4>)
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <xTaskPriorityDisinherit+0xd8>)
 80079ea:	441a      	add	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe f99f 	bl	8005d36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079fc:	697b      	ldr	r3, [r7, #20]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20004870 	.word	0x20004870
 8007a0c:	20004d4c 	.word	0x20004d4c
 8007a10:	20004874 	.word	0x20004874

08007a14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a24:	4b20      	ldr	r3, [pc, #128]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe f9e0 	bl	8005df0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d10a      	bne.n	8007a4e <prvAddCurrentTaskToDelayedList+0x3a>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d007      	beq.n	8007a4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4819      	ldr	r0, [pc, #100]	; (8007aac <prvAddCurrentTaskToDelayedList+0x98>)
 8007a48:	f7fe f975 	bl	8005d36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a4c:	e026      	b.n	8007a9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d209      	bcs.n	8007a7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a66:	4b12      	ldr	r3, [pc, #72]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe f983 	bl	8005d7e <vListInsert>
}
 8007a78:	e010      	b.n	8007a9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7a:	4b0e      	ldr	r3, [pc, #56]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe f979 	bl	8005d7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d202      	bcs.n	8007a9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a96:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20004d48 	.word	0x20004d48
 8007aa8:	20004870 	.word	0x20004870
 8007aac:	20004d30 	.word	0x20004d30
 8007ab0:	20004d00 	.word	0x20004d00
 8007ab4:	20004cfc 	.word	0x20004cfc
 8007ab8:	20004d64 	.word	0x20004d64

08007abc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ac6:	f000 fb07 	bl	80080d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007aca:	4b1c      	ldr	r3, [pc, #112]	; (8007b3c <xTimerCreateTimerTask+0x80>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d021      	beq.n	8007b16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ada:	1d3a      	adds	r2, r7, #4
 8007adc:	f107 0108 	add.w	r1, r7, #8
 8007ae0:	f107 030c 	add.w	r3, r7, #12
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fd fef5 	bl	80058d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	9202      	str	r2, [sp, #8]
 8007af2:	9301      	str	r3, [sp, #4]
 8007af4:	2302      	movs	r3, #2
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	460a      	mov	r2, r1
 8007afc:	4910      	ldr	r1, [pc, #64]	; (8007b40 <xTimerCreateTimerTask+0x84>)
 8007afe:	4811      	ldr	r0, [pc, #68]	; (8007b44 <xTimerCreateTimerTask+0x88>)
 8007b00:	f7ff f8de 	bl	8006cc0 <xTaskCreateStatic>
 8007b04:	4603      	mov	r3, r0
 8007b06:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <xTimerCreateTimerTask+0x8c>)
 8007b08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <xTimerCreateTimerTask+0x8c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b32:	697b      	ldr	r3, [r7, #20]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20004da0 	.word	0x20004da0
 8007b40:	0800b380 	.word	0x0800b380
 8007b44:	08007c81 	.word	0x08007c81
 8007b48:	20004da4 	.word	0x20004da4

08007b4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08a      	sub	sp, #40	; 0x28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	623b      	str	r3, [r7, #32]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <xTimerGenericCommand+0x98>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d02a      	beq.n	8007bd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	dc18      	bgt.n	8007bc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b94:	f7ff feb2 	bl	80078fc <xTaskGetSchedulerState>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d109      	bne.n	8007bb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <xTimerGenericCommand+0x98>)
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f107 0110 	add.w	r1, r7, #16
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007baa:	f7fe fca1 	bl	80064f0 <xQueueGenericSend>
 8007bae:	6278      	str	r0, [r7, #36]	; 0x24
 8007bb0:	e012      	b.n	8007bd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <xTimerGenericCommand+0x98>)
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	f107 0110 	add.w	r1, r7, #16
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f7fe fc97 	bl	80064f0 <xQueueGenericSend>
 8007bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8007bc4:	e008      	b.n	8007bd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <xTimerGenericCommand+0x98>)
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	f107 0110 	add.w	r1, r7, #16
 8007bce:	2300      	movs	r3, #0
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	f7fe fd8b 	bl	80066ec <xQueueGenericSendFromISR>
 8007bd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3728      	adds	r7, #40	; 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20004da0 	.word	0x20004da0

08007be8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf2:	4b22      	ldr	r3, [pc, #136]	; (8007c7c <prvProcessExpiredTimer+0x94>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	3304      	adds	r3, #4
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe f8f5 	bl	8005df0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d022      	beq.n	8007c5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	18d1      	adds	r1, r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	6978      	ldr	r0, [r7, #20]
 8007c22:	f000 f8d1 	bl	8007dc8 <prvInsertTimerInActiveList>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01f      	beq.n	8007c6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2300      	movs	r3, #0
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	2100      	movs	r1, #0
 8007c36:	6978      	ldr	r0, [r7, #20]
 8007c38:	f7ff ff88 	bl	8007b4c <xTimerGenericCommand>
 8007c3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d113      	bne.n	8007c6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	60fb      	str	r3, [r7, #12]
}
 8007c56:	bf00      	nop
 8007c58:	e7fe      	b.n	8007c58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	6978      	ldr	r0, [r7, #20]
 8007c72:	4798      	blx	r3
}
 8007c74:	bf00      	nop
 8007c76:	3718      	adds	r7, #24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20004d98 	.word	0x20004d98

08007c80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c88:	f107 0308 	add.w	r3, r7, #8
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 f857 	bl	8007d40 <prvGetNextExpireTime>
 8007c92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4619      	mov	r1, r3
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f803 	bl	8007ca4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c9e:	f000 f8d5 	bl	8007e4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ca2:	e7f1      	b.n	8007c88 <prvTimerTask+0x8>

08007ca4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cae:	f7ff fa43 	bl	8007138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f866 	bl	8007d88 <prvSampleTimeNow>
 8007cbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d130      	bne.n	8007d26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <prvProcessTimerOrBlockTask+0x3c>
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d806      	bhi.n	8007ce0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007cd2:	f7ff fa3f 	bl	8007154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff85 	bl	8007be8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007cde:	e024      	b.n	8007d2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d008      	beq.n	8007cf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ce6:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <prvProcessTimerOrBlockTask+0x90>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <prvProcessTimerOrBlockTask+0x50>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <prvProcessTimerOrBlockTask+0x52>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007cf8:	4b0f      	ldr	r3, [pc, #60]	; (8007d38 <prvProcessTimerOrBlockTask+0x94>)
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	f7fe ffa7 	bl	8006c58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d0a:	f7ff fa23 	bl	8007154 <xTaskResumeAll>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <prvProcessTimerOrBlockTask+0x98>)
 8007d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	f3bf 8f6f 	isb	sy
}
 8007d24:	e001      	b.n	8007d2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d26:	f7ff fa15 	bl	8007154 <xTaskResumeAll>
}
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20004d9c 	.word	0x20004d9c
 8007d38:	20004da0 	.word	0x20004da0
 8007d3c:	e000ed04 	.word	0xe000ed04

08007d40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <prvGetNextExpireTime+0x44>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <prvGetNextExpireTime+0x16>
 8007d52:	2201      	movs	r2, #1
 8007d54:	e000      	b.n	8007d58 <prvGetNextExpireTime+0x18>
 8007d56:	2200      	movs	r2, #0
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d64:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <prvGetNextExpireTime+0x44>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	e001      	b.n	8007d74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	20004d98 	.word	0x20004d98

08007d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d90:	f7ff fa7e 	bl	8007290 <xTaskGetTickCount>
 8007d94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <prvSampleTimeNow+0x3c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d205      	bcs.n	8007dac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007da0:	f000 f936 	bl	8008010 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e002      	b.n	8007db2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007db2:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <prvSampleTimeNow+0x3c>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20004da8 	.word	0x20004da8

08007dc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d812      	bhi.n	8007e14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	1ad2      	subs	r2, r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d302      	bcc.n	8007e02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e01b      	b.n	8007e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e02:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <prvInsertTimerInActiveList+0x7c>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	f7fd ffb6 	bl	8005d7e <vListInsert>
 8007e12:	e012      	b.n	8007e3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d206      	bcs.n	8007e2a <prvInsertTimerInActiveList+0x62>
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e007      	b.n	8007e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <prvInsertTimerInActiveList+0x80>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7fd ffa2 	bl	8005d7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e3a:	697b      	ldr	r3, [r7, #20]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20004d9c 	.word	0x20004d9c
 8007e48:	20004d98 	.word	0x20004d98

08007e4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08e      	sub	sp, #56	; 0x38
 8007e50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e52:	e0ca      	b.n	8007fea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da18      	bge.n	8007e8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e5a:	1d3b      	adds	r3, r7, #4
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	61fb      	str	r3, [r7, #28]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e82:	6850      	ldr	r0, [r2, #4]
 8007e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e86:	6892      	ldr	r2, [r2, #8]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f2c0 80aa 	blt.w	8007fe8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fd ffa3 	bl	8005df0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff ff6b 	bl	8007d88 <prvSampleTimeNow>
 8007eb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b09      	cmp	r3, #9
 8007eb8:	f200 8097 	bhi.w	8007fea <prvProcessReceivedCommands+0x19e>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <prvProcessReceivedCommands+0x78>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007eed 	.word	0x08007eed
 8007ec8:	08007eed 	.word	0x08007eed
 8007ecc:	08007eed 	.word	0x08007eed
 8007ed0:	08007f61 	.word	0x08007f61
 8007ed4:	08007f75 	.word	0x08007f75
 8007ed8:	08007fbf 	.word	0x08007fbf
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007eed 	.word	0x08007eed
 8007ee4:	08007f61 	.word	0x08007f61
 8007ee8:	08007f75 	.word	0x08007f75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	18d1      	adds	r1, r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0c:	f7ff ff5c 	bl	8007dc8 <prvInsertTimerInActiveList>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d069      	beq.n	8007fea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d05e      	beq.n	8007fea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	441a      	add	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3e:	f7ff fe05 	bl	8007b4c <xTimerGenericCommand>
 8007f42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d14f      	bne.n	8007fea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	61bb      	str	r3, [r7, #24]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f72:	e03a      	b.n	8007fea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	617b      	str	r3, [r7, #20]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	18d1      	adds	r1, r2, r3
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb8:	f7ff ff06 	bl	8007dc8 <prvInsertTimerInActiveList>
					break;
 8007fbc:	e015      	b.n	8007fea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fce:	f7fd fd67 	bl	8005aa0 <vPortFree>
 8007fd2:	e00a      	b.n	8007fea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fe6:	e000      	b.n	8007fea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007fe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fea:	4b08      	ldr	r3, [pc, #32]	; (800800c <prvProcessReceivedCommands+0x1c0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1d39      	adds	r1, r7, #4
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fc16 	bl	8006824 <xQueueReceive>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f af2a 	bne.w	8007e54 <prvProcessReceivedCommands+0x8>
	}
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	3730      	adds	r7, #48	; 0x30
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20004da0 	.word	0x20004da0

08008010 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008016:	e048      	b.n	80080aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008018:	4b2d      	ldr	r3, [pc, #180]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008022:	4b2b      	ldr	r3, [pc, #172]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd fedd 	bl	8005df0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d02e      	beq.n	80080aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4413      	add	r3, r2
 8008054:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	429a      	cmp	r2, r3
 800805c:	d90e      	bls.n	800807c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800806a:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7fd fe82 	bl	8005d7e <vListInsert>
 800807a:	e016      	b.n	80080aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800807c:	2300      	movs	r3, #0
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	2100      	movs	r1, #0
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fd60 	bl	8007b4c <xTimerGenericCommand>
 800808c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	603b      	str	r3, [r7, #0]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1b1      	bne.n	8008018 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <prvSwitchTimerLists+0xc4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <prvSwitchTimerLists+0xc0>)
 80080c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080c2:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <prvSwitchTimerLists+0xc4>)
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	6013      	str	r3, [r2, #0]
}
 80080c8:	bf00      	nop
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20004d98 	.word	0x20004d98
 80080d4:	20004d9c 	.word	0x20004d9c

080080d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080de:	f7fd ffe1 	bl	80060a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d120      	bne.n	800812c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080ea:	4814      	ldr	r0, [pc, #80]	; (800813c <prvCheckForValidListAndQueue+0x64>)
 80080ec:	f7fd fdf6 	bl	8005cdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080f0:	4813      	ldr	r0, [pc, #76]	; (8008140 <prvCheckForValidListAndQueue+0x68>)
 80080f2:	f7fd fdf3 	bl	8005cdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <prvCheckForValidListAndQueue+0x6c>)
 80080f8:	4a10      	ldr	r2, [pc, #64]	; (800813c <prvCheckForValidListAndQueue+0x64>)
 80080fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080fc:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvCheckForValidListAndQueue+0x70>)
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <prvCheckForValidListAndQueue+0x68>)
 8008100:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008102:	2300      	movs	r3, #0
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <prvCheckForValidListAndQueue+0x74>)
 8008108:	4a11      	ldr	r2, [pc, #68]	; (8008150 <prvCheckForValidListAndQueue+0x78>)
 800810a:	2110      	movs	r1, #16
 800810c:	200a      	movs	r0, #10
 800810e:	f7fe f953 	bl	80063b8 <xQueueGenericCreateStatic>
 8008112:	4603      	mov	r3, r0
 8008114:	4a08      	ldr	r2, [pc, #32]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 8008116:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <prvCheckForValidListAndQueue+0x60>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	490b      	ldr	r1, [pc, #44]	; (8008154 <prvCheckForValidListAndQueue+0x7c>)
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fd6c 	bl	8006c04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800812c:	f7fd ffea 	bl	8006104 <vPortExitCritical>
}
 8008130:	bf00      	nop
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20004da0 	.word	0x20004da0
 800813c:	20004d70 	.word	0x20004d70
 8008140:	20004d84 	.word	0x20004d84
 8008144:	20004d98 	.word	0x20004d98
 8008148:	20004d9c 	.word	0x20004d9c
 800814c:	20004e4c 	.word	0x20004e4c
 8008150:	20004dac 	.word	0x20004dac
 8008154:	0800b388 	.word	0x0800b388

08008158 <__errno>:
 8008158:	4b01      	ldr	r3, [pc, #4]	; (8008160 <__errno+0x8>)
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000014 	.word	0x20000014

08008164 <__libc_init_array>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4d0d      	ldr	r5, [pc, #52]	; (800819c <__libc_init_array+0x38>)
 8008168:	4c0d      	ldr	r4, [pc, #52]	; (80081a0 <__libc_init_array+0x3c>)
 800816a:	1b64      	subs	r4, r4, r5
 800816c:	10a4      	asrs	r4, r4, #2
 800816e:	2600      	movs	r6, #0
 8008170:	42a6      	cmp	r6, r4
 8008172:	d109      	bne.n	8008188 <__libc_init_array+0x24>
 8008174:	4d0b      	ldr	r5, [pc, #44]	; (80081a4 <__libc_init_array+0x40>)
 8008176:	4c0c      	ldr	r4, [pc, #48]	; (80081a8 <__libc_init_array+0x44>)
 8008178:	f002 ff04 	bl	800af84 <_init>
 800817c:	1b64      	subs	r4, r4, r5
 800817e:	10a4      	asrs	r4, r4, #2
 8008180:	2600      	movs	r6, #0
 8008182:	42a6      	cmp	r6, r4
 8008184:	d105      	bne.n	8008192 <__libc_init_array+0x2e>
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	f855 3b04 	ldr.w	r3, [r5], #4
 800818c:	4798      	blx	r3
 800818e:	3601      	adds	r6, #1
 8008190:	e7ee      	b.n	8008170 <__libc_init_array+0xc>
 8008192:	f855 3b04 	ldr.w	r3, [r5], #4
 8008196:	4798      	blx	r3
 8008198:	3601      	adds	r6, #1
 800819a:	e7f2      	b.n	8008182 <__libc_init_array+0x1e>
 800819c:	0800b7d4 	.word	0x0800b7d4
 80081a0:	0800b7d4 	.word	0x0800b7d4
 80081a4:	0800b7d4 	.word	0x0800b7d4
 80081a8:	0800b7d8 	.word	0x0800b7d8

080081ac <memcpy>:
 80081ac:	440a      	add	r2, r1
 80081ae:	4291      	cmp	r1, r2
 80081b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081b4:	d100      	bne.n	80081b8 <memcpy+0xc>
 80081b6:	4770      	bx	lr
 80081b8:	b510      	push	{r4, lr}
 80081ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081c2:	4291      	cmp	r1, r2
 80081c4:	d1f9      	bne.n	80081ba <memcpy+0xe>
 80081c6:	bd10      	pop	{r4, pc}

080081c8 <memset>:
 80081c8:	4402      	add	r2, r0
 80081ca:	4603      	mov	r3, r0
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d100      	bne.n	80081d2 <memset+0xa>
 80081d0:	4770      	bx	lr
 80081d2:	f803 1b01 	strb.w	r1, [r3], #1
 80081d6:	e7f9      	b.n	80081cc <memset+0x4>

080081d8 <__cvt>:
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	ec55 4b10 	vmov	r4, r5, d0
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	460e      	mov	r6, r1
 80081e4:	4619      	mov	r1, r3
 80081e6:	462b      	mov	r3, r5
 80081e8:	bfbb      	ittet	lt
 80081ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081ee:	461d      	movlt	r5, r3
 80081f0:	2300      	movge	r3, #0
 80081f2:	232d      	movlt	r3, #45	; 0x2d
 80081f4:	700b      	strb	r3, [r1, #0]
 80081f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081fc:	4691      	mov	r9, r2
 80081fe:	f023 0820 	bic.w	r8, r3, #32
 8008202:	bfbc      	itt	lt
 8008204:	4622      	movlt	r2, r4
 8008206:	4614      	movlt	r4, r2
 8008208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800820c:	d005      	beq.n	800821a <__cvt+0x42>
 800820e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008212:	d100      	bne.n	8008216 <__cvt+0x3e>
 8008214:	3601      	adds	r6, #1
 8008216:	2102      	movs	r1, #2
 8008218:	e000      	b.n	800821c <__cvt+0x44>
 800821a:	2103      	movs	r1, #3
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	ab02      	add	r3, sp, #8
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	4653      	mov	r3, sl
 800822a:	4632      	mov	r2, r6
 800822c:	f000 fcec 	bl	8008c08 <_dtoa_r>
 8008230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008234:	4607      	mov	r7, r0
 8008236:	d102      	bne.n	800823e <__cvt+0x66>
 8008238:	f019 0f01 	tst.w	r9, #1
 800823c:	d022      	beq.n	8008284 <__cvt+0xac>
 800823e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008242:	eb07 0906 	add.w	r9, r7, r6
 8008246:	d110      	bne.n	800826a <__cvt+0x92>
 8008248:	783b      	ldrb	r3, [r7, #0]
 800824a:	2b30      	cmp	r3, #48	; 0x30
 800824c:	d10a      	bne.n	8008264 <__cvt+0x8c>
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4620      	mov	r0, r4
 8008254:	4629      	mov	r1, r5
 8008256:	f7f8 fc57 	bl	8000b08 <__aeabi_dcmpeq>
 800825a:	b918      	cbnz	r0, 8008264 <__cvt+0x8c>
 800825c:	f1c6 0601 	rsb	r6, r6, #1
 8008260:	f8ca 6000 	str.w	r6, [sl]
 8008264:	f8da 3000 	ldr.w	r3, [sl]
 8008268:	4499      	add	r9, r3
 800826a:	2200      	movs	r2, #0
 800826c:	2300      	movs	r3, #0
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8008276:	b108      	cbz	r0, 800827c <__cvt+0xa4>
 8008278:	f8cd 900c 	str.w	r9, [sp, #12]
 800827c:	2230      	movs	r2, #48	; 0x30
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	454b      	cmp	r3, r9
 8008282:	d307      	bcc.n	8008294 <__cvt+0xbc>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008288:	1bdb      	subs	r3, r3, r7
 800828a:	4638      	mov	r0, r7
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	b004      	add	sp, #16
 8008290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e7f0      	b.n	800827e <__cvt+0xa6>

0800829c <__exponent>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	4603      	mov	r3, r0
 80082a0:	2900      	cmp	r1, #0
 80082a2:	bfb8      	it	lt
 80082a4:	4249      	neglt	r1, r1
 80082a6:	f803 2b02 	strb.w	r2, [r3], #2
 80082aa:	bfb4      	ite	lt
 80082ac:	222d      	movlt	r2, #45	; 0x2d
 80082ae:	222b      	movge	r2, #43	; 0x2b
 80082b0:	2909      	cmp	r1, #9
 80082b2:	7042      	strb	r2, [r0, #1]
 80082b4:	dd2a      	ble.n	800830c <__exponent+0x70>
 80082b6:	f10d 0407 	add.w	r4, sp, #7
 80082ba:	46a4      	mov	ip, r4
 80082bc:	270a      	movs	r7, #10
 80082be:	46a6      	mov	lr, r4
 80082c0:	460a      	mov	r2, r1
 80082c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80082c6:	fb07 1516 	mls	r5, r7, r6, r1
 80082ca:	3530      	adds	r5, #48	; 0x30
 80082cc:	2a63      	cmp	r2, #99	; 0x63
 80082ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80082d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082d6:	4631      	mov	r1, r6
 80082d8:	dcf1      	bgt.n	80082be <__exponent+0x22>
 80082da:	3130      	adds	r1, #48	; 0x30
 80082dc:	f1ae 0502 	sub.w	r5, lr, #2
 80082e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80082e4:	1c44      	adds	r4, r0, #1
 80082e6:	4629      	mov	r1, r5
 80082e8:	4561      	cmp	r1, ip
 80082ea:	d30a      	bcc.n	8008302 <__exponent+0x66>
 80082ec:	f10d 0209 	add.w	r2, sp, #9
 80082f0:	eba2 020e 	sub.w	r2, r2, lr
 80082f4:	4565      	cmp	r5, ip
 80082f6:	bf88      	it	hi
 80082f8:	2200      	movhi	r2, #0
 80082fa:	4413      	add	r3, r2
 80082fc:	1a18      	subs	r0, r3, r0
 80082fe:	b003      	add	sp, #12
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800830a:	e7ed      	b.n	80082e8 <__exponent+0x4c>
 800830c:	2330      	movs	r3, #48	; 0x30
 800830e:	3130      	adds	r1, #48	; 0x30
 8008310:	7083      	strb	r3, [r0, #2]
 8008312:	70c1      	strb	r1, [r0, #3]
 8008314:	1d03      	adds	r3, r0, #4
 8008316:	e7f1      	b.n	80082fc <__exponent+0x60>

08008318 <_printf_float>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b02 	vpush	{d8}
 8008320:	b08d      	sub	sp, #52	; 0x34
 8008322:	460c      	mov	r4, r1
 8008324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008328:	4616      	mov	r6, r2
 800832a:	461f      	mov	r7, r3
 800832c:	4605      	mov	r5, r0
 800832e:	f001 fa59 	bl	80097e4 <_localeconv_r>
 8008332:	f8d0 a000 	ldr.w	sl, [r0]
 8008336:	4650      	mov	r0, sl
 8008338:	f7f7 ff6a 	bl	8000210 <strlen>
 800833c:	2300      	movs	r3, #0
 800833e:	930a      	str	r3, [sp, #40]	; 0x28
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	f8d8 3000 	ldr.w	r3, [r8]
 8008348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	f103 0208 	add.w	r2, r3, #8
 8008356:	f8c8 2000 	str.w	r2, [r8]
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008370:	ee08 0a10 	vmov	s16, r0
 8008374:	4b9f      	ldr	r3, [pc, #636]	; (80085f4 <_printf_float+0x2dc>)
 8008376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800837a:	f04f 32ff 	mov.w	r2, #4294967295
 800837e:	f7f8 fbf5 	bl	8000b6c <__aeabi_dcmpun>
 8008382:	bb88      	cbnz	r0, 80083e8 <_printf_float+0xd0>
 8008384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008388:	4b9a      	ldr	r3, [pc, #616]	; (80085f4 <_printf_float+0x2dc>)
 800838a:	f04f 32ff 	mov.w	r2, #4294967295
 800838e:	f7f8 fbcf 	bl	8000b30 <__aeabi_dcmple>
 8008392:	bb48      	cbnz	r0, 80083e8 <_printf_float+0xd0>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4640      	mov	r0, r8
 800839a:	4649      	mov	r1, r9
 800839c:	f7f8 fbbe 	bl	8000b1c <__aeabi_dcmplt>
 80083a0:	b110      	cbz	r0, 80083a8 <_printf_float+0x90>
 80083a2:	232d      	movs	r3, #45	; 0x2d
 80083a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a8:	4b93      	ldr	r3, [pc, #588]	; (80085f8 <_printf_float+0x2e0>)
 80083aa:	4894      	ldr	r0, [pc, #592]	; (80085fc <_printf_float+0x2e4>)
 80083ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083b0:	bf94      	ite	ls
 80083b2:	4698      	movls	r8, r3
 80083b4:	4680      	movhi	r8, r0
 80083b6:	2303      	movs	r3, #3
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	9b05      	ldr	r3, [sp, #20]
 80083bc:	f023 0204 	bic.w	r2, r3, #4
 80083c0:	6022      	str	r2, [r4, #0]
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	9700      	str	r7, [sp, #0]
 80083c8:	4633      	mov	r3, r6
 80083ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f9d8 	bl	8008784 <_printf_common>
 80083d4:	3001      	adds	r0, #1
 80083d6:	f040 8090 	bne.w	80084fa <_printf_float+0x1e2>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	b00d      	add	sp, #52	; 0x34
 80083e0:	ecbd 8b02 	vpop	{d8}
 80083e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	4649      	mov	r1, r9
 80083f0:	f7f8 fbbc 	bl	8000b6c <__aeabi_dcmpun>
 80083f4:	b140      	cbz	r0, 8008408 <_printf_float+0xf0>
 80083f6:	464b      	mov	r3, r9
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	bfbc      	itt	lt
 80083fc:	232d      	movlt	r3, #45	; 0x2d
 80083fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008402:	487f      	ldr	r0, [pc, #508]	; (8008600 <_printf_float+0x2e8>)
 8008404:	4b7f      	ldr	r3, [pc, #508]	; (8008604 <_printf_float+0x2ec>)
 8008406:	e7d1      	b.n	80083ac <_printf_float+0x94>
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800840e:	9206      	str	r2, [sp, #24]
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	d13f      	bne.n	8008494 <_printf_float+0x17c>
 8008414:	2306      	movs	r3, #6
 8008416:	6063      	str	r3, [r4, #4]
 8008418:	9b05      	ldr	r3, [sp, #20]
 800841a:	6861      	ldr	r1, [r4, #4]
 800841c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008420:	2300      	movs	r3, #0
 8008422:	9303      	str	r3, [sp, #12]
 8008424:	ab0a      	add	r3, sp, #40	; 0x28
 8008426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800842a:	ab09      	add	r3, sp, #36	; 0x24
 800842c:	ec49 8b10 	vmov	d0, r8, r9
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff fecd 	bl	80081d8 <__cvt>
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008442:	2b47      	cmp	r3, #71	; 0x47
 8008444:	4680      	mov	r8, r0
 8008446:	d108      	bne.n	800845a <_printf_float+0x142>
 8008448:	1cc8      	adds	r0, r1, #3
 800844a:	db02      	blt.n	8008452 <_printf_float+0x13a>
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	4299      	cmp	r1, r3
 8008450:	dd41      	ble.n	80084d6 <_printf_float+0x1be>
 8008452:	f1ab 0b02 	sub.w	fp, fp, #2
 8008456:	fa5f fb8b 	uxtb.w	fp, fp
 800845a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800845e:	d820      	bhi.n	80084a2 <_printf_float+0x18a>
 8008460:	3901      	subs	r1, #1
 8008462:	465a      	mov	r2, fp
 8008464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008468:	9109      	str	r1, [sp, #36]	; 0x24
 800846a:	f7ff ff17 	bl	800829c <__exponent>
 800846e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008470:	1813      	adds	r3, r2, r0
 8008472:	2a01      	cmp	r2, #1
 8008474:	4681      	mov	r9, r0
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	dc02      	bgt.n	8008480 <_printf_float+0x168>
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	07d2      	lsls	r2, r2, #31
 800847e:	d501      	bpl.n	8008484 <_printf_float+0x16c>
 8008480:	3301      	adds	r3, #1
 8008482:	6123      	str	r3, [r4, #16]
 8008484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008488:	2b00      	cmp	r3, #0
 800848a:	d09c      	beq.n	80083c6 <_printf_float+0xae>
 800848c:	232d      	movs	r3, #45	; 0x2d
 800848e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008492:	e798      	b.n	80083c6 <_printf_float+0xae>
 8008494:	9a06      	ldr	r2, [sp, #24]
 8008496:	2a47      	cmp	r2, #71	; 0x47
 8008498:	d1be      	bne.n	8008418 <_printf_float+0x100>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1bc      	bne.n	8008418 <_printf_float+0x100>
 800849e:	2301      	movs	r3, #1
 80084a0:	e7b9      	b.n	8008416 <_printf_float+0xfe>
 80084a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084a6:	d118      	bne.n	80084da <_printf_float+0x1c2>
 80084a8:	2900      	cmp	r1, #0
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	dd0b      	ble.n	80084c6 <_printf_float+0x1ae>
 80084ae:	6121      	str	r1, [r4, #16]
 80084b0:	b913      	cbnz	r3, 80084b8 <_printf_float+0x1a0>
 80084b2:	6822      	ldr	r2, [r4, #0]
 80084b4:	07d0      	lsls	r0, r2, #31
 80084b6:	d502      	bpl.n	80084be <_printf_float+0x1a6>
 80084b8:	3301      	adds	r3, #1
 80084ba:	440b      	add	r3, r1
 80084bc:	6123      	str	r3, [r4, #16]
 80084be:	65a1      	str	r1, [r4, #88]	; 0x58
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	e7de      	b.n	8008484 <_printf_float+0x16c>
 80084c6:	b913      	cbnz	r3, 80084ce <_printf_float+0x1b6>
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	07d2      	lsls	r2, r2, #31
 80084cc:	d501      	bpl.n	80084d2 <_printf_float+0x1ba>
 80084ce:	3302      	adds	r3, #2
 80084d0:	e7f4      	b.n	80084bc <_printf_float+0x1a4>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7f2      	b.n	80084bc <_printf_float+0x1a4>
 80084d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084dc:	4299      	cmp	r1, r3
 80084de:	db05      	blt.n	80084ec <_printf_float+0x1d4>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	6121      	str	r1, [r4, #16]
 80084e4:	07d8      	lsls	r0, r3, #31
 80084e6:	d5ea      	bpl.n	80084be <_printf_float+0x1a6>
 80084e8:	1c4b      	adds	r3, r1, #1
 80084ea:	e7e7      	b.n	80084bc <_printf_float+0x1a4>
 80084ec:	2900      	cmp	r1, #0
 80084ee:	bfd4      	ite	le
 80084f0:	f1c1 0202 	rsble	r2, r1, #2
 80084f4:	2201      	movgt	r2, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	e7e0      	b.n	80084bc <_printf_float+0x1a4>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	055a      	lsls	r2, r3, #21
 80084fe:	d407      	bmi.n	8008510 <_printf_float+0x1f8>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	4642      	mov	r2, r8
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	d12c      	bne.n	8008568 <_printf_float+0x250>
 800850e:	e764      	b.n	80083da <_printf_float+0xc2>
 8008510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008514:	f240 80e0 	bls.w	80086d8 <_printf_float+0x3c0>
 8008518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	f7f8 faf2 	bl	8000b08 <__aeabi_dcmpeq>
 8008524:	2800      	cmp	r0, #0
 8008526:	d034      	beq.n	8008592 <_printf_float+0x27a>
 8008528:	4a37      	ldr	r2, [pc, #220]	; (8008608 <_printf_float+0x2f0>)
 800852a:	2301      	movs	r3, #1
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f af51 	beq.w	80083da <_printf_float+0xc2>
 8008538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800853c:	429a      	cmp	r2, r3
 800853e:	db02      	blt.n	8008546 <_printf_float+0x22e>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	07d8      	lsls	r0, r3, #31
 8008544:	d510      	bpl.n	8008568 <_printf_float+0x250>
 8008546:	ee18 3a10 	vmov	r3, s16
 800854a:	4652      	mov	r2, sl
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	f43f af41 	beq.w	80083da <_printf_float+0xc2>
 8008558:	f04f 0800 	mov.w	r8, #0
 800855c:	f104 091a 	add.w	r9, r4, #26
 8008560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008562:	3b01      	subs	r3, #1
 8008564:	4543      	cmp	r3, r8
 8008566:	dc09      	bgt.n	800857c <_printf_float+0x264>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	079b      	lsls	r3, r3, #30
 800856c:	f100 8105 	bmi.w	800877a <_printf_float+0x462>
 8008570:	68e0      	ldr	r0, [r4, #12]
 8008572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008574:	4298      	cmp	r0, r3
 8008576:	bfb8      	it	lt
 8008578:	4618      	movlt	r0, r3
 800857a:	e730      	b.n	80083de <_printf_float+0xc6>
 800857c:	2301      	movs	r3, #1
 800857e:	464a      	mov	r2, r9
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f af27 	beq.w	80083da <_printf_float+0xc2>
 800858c:	f108 0801 	add.w	r8, r8, #1
 8008590:	e7e6      	b.n	8008560 <_printf_float+0x248>
 8008592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	dc39      	bgt.n	800860c <_printf_float+0x2f4>
 8008598:	4a1b      	ldr	r2, [pc, #108]	; (8008608 <_printf_float+0x2f0>)
 800859a:	2301      	movs	r3, #1
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f af19 	beq.w	80083da <_printf_float+0xc2>
 80085a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085ac:	4313      	orrs	r3, r2
 80085ae:	d102      	bne.n	80085b6 <_printf_float+0x29e>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	07d9      	lsls	r1, r3, #31
 80085b4:	d5d8      	bpl.n	8008568 <_printf_float+0x250>
 80085b6:	ee18 3a10 	vmov	r3, s16
 80085ba:	4652      	mov	r2, sl
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	47b8      	blx	r7
 80085c2:	3001      	adds	r0, #1
 80085c4:	f43f af09 	beq.w	80083da <_printf_float+0xc2>
 80085c8:	f04f 0900 	mov.w	r9, #0
 80085cc:	f104 0a1a 	add.w	sl, r4, #26
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	425b      	negs	r3, r3
 80085d4:	454b      	cmp	r3, r9
 80085d6:	dc01      	bgt.n	80085dc <_printf_float+0x2c4>
 80085d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085da:	e792      	b.n	8008502 <_printf_float+0x1ea>
 80085dc:	2301      	movs	r3, #1
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f aef7 	beq.w	80083da <_printf_float+0xc2>
 80085ec:	f109 0901 	add.w	r9, r9, #1
 80085f0:	e7ee      	b.n	80085d0 <_printf_float+0x2b8>
 80085f2:	bf00      	nop
 80085f4:	7fefffff 	.word	0x7fefffff
 80085f8:	0800b3f4 	.word	0x0800b3f4
 80085fc:	0800b3f8 	.word	0x0800b3f8
 8008600:	0800b400 	.word	0x0800b400
 8008604:	0800b3fc 	.word	0x0800b3fc
 8008608:	0800b404 	.word	0x0800b404
 800860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008610:	429a      	cmp	r2, r3
 8008612:	bfa8      	it	ge
 8008614:	461a      	movge	r2, r3
 8008616:	2a00      	cmp	r2, #0
 8008618:	4691      	mov	r9, r2
 800861a:	dc37      	bgt.n	800868c <_printf_float+0x374>
 800861c:	f04f 0b00 	mov.w	fp, #0
 8008620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008624:	f104 021a 	add.w	r2, r4, #26
 8008628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	eba3 0309 	sub.w	r3, r3, r9
 8008630:	455b      	cmp	r3, fp
 8008632:	dc33      	bgt.n	800869c <_printf_float+0x384>
 8008634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	db3b      	blt.n	80086b4 <_printf_float+0x39c>
 800863c:	6823      	ldr	r3, [r4, #0]
 800863e:	07da      	lsls	r2, r3, #31
 8008640:	d438      	bmi.n	80086b4 <_printf_float+0x39c>
 8008642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008644:	9a05      	ldr	r2, [sp, #20]
 8008646:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008648:	1a9a      	subs	r2, r3, r2
 800864a:	eba3 0901 	sub.w	r9, r3, r1
 800864e:	4591      	cmp	r9, r2
 8008650:	bfa8      	it	ge
 8008652:	4691      	movge	r9, r2
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	dc35      	bgt.n	80086c6 <_printf_float+0x3ae>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008662:	f104 0a1a 	add.w	sl, r4, #26
 8008666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	eba3 0309 	sub.w	r3, r3, r9
 8008670:	4543      	cmp	r3, r8
 8008672:	f77f af79 	ble.w	8008568 <_printf_float+0x250>
 8008676:	2301      	movs	r3, #1
 8008678:	4652      	mov	r2, sl
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f aeaa 	beq.w	80083da <_printf_float+0xc2>
 8008686:	f108 0801 	add.w	r8, r8, #1
 800868a:	e7ec      	b.n	8008666 <_printf_float+0x34e>
 800868c:	4613      	mov	r3, r2
 800868e:	4631      	mov	r1, r6
 8008690:	4642      	mov	r2, r8
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	d1c0      	bne.n	800861c <_printf_float+0x304>
 800869a:	e69e      	b.n	80083da <_printf_float+0xc2>
 800869c:	2301      	movs	r3, #1
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	9205      	str	r2, [sp, #20]
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f ae97 	beq.w	80083da <_printf_float+0xc2>
 80086ac:	9a05      	ldr	r2, [sp, #20]
 80086ae:	f10b 0b01 	add.w	fp, fp, #1
 80086b2:	e7b9      	b.n	8008628 <_printf_float+0x310>
 80086b4:	ee18 3a10 	vmov	r3, s16
 80086b8:	4652      	mov	r2, sl
 80086ba:	4631      	mov	r1, r6
 80086bc:	4628      	mov	r0, r5
 80086be:	47b8      	blx	r7
 80086c0:	3001      	adds	r0, #1
 80086c2:	d1be      	bne.n	8008642 <_printf_float+0x32a>
 80086c4:	e689      	b.n	80083da <_printf_float+0xc2>
 80086c6:	9a05      	ldr	r2, [sp, #20]
 80086c8:	464b      	mov	r3, r9
 80086ca:	4442      	add	r2, r8
 80086cc:	4631      	mov	r1, r6
 80086ce:	4628      	mov	r0, r5
 80086d0:	47b8      	blx	r7
 80086d2:	3001      	adds	r0, #1
 80086d4:	d1c1      	bne.n	800865a <_printf_float+0x342>
 80086d6:	e680      	b.n	80083da <_printf_float+0xc2>
 80086d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086da:	2a01      	cmp	r2, #1
 80086dc:	dc01      	bgt.n	80086e2 <_printf_float+0x3ca>
 80086de:	07db      	lsls	r3, r3, #31
 80086e0:	d538      	bpl.n	8008754 <_printf_float+0x43c>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4642      	mov	r2, r8
 80086e6:	4631      	mov	r1, r6
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b8      	blx	r7
 80086ec:	3001      	adds	r0, #1
 80086ee:	f43f ae74 	beq.w	80083da <_printf_float+0xc2>
 80086f2:	ee18 3a10 	vmov	r3, s16
 80086f6:	4652      	mov	r2, sl
 80086f8:	4631      	mov	r1, r6
 80086fa:	4628      	mov	r0, r5
 80086fc:	47b8      	blx	r7
 80086fe:	3001      	adds	r0, #1
 8008700:	f43f ae6b 	beq.w	80083da <_printf_float+0xc2>
 8008704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	f7f8 f9fc 	bl	8000b08 <__aeabi_dcmpeq>
 8008710:	b9d8      	cbnz	r0, 800874a <_printf_float+0x432>
 8008712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008714:	f108 0201 	add.w	r2, r8, #1
 8008718:	3b01      	subs	r3, #1
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d10e      	bne.n	8008742 <_printf_float+0x42a>
 8008724:	e659      	b.n	80083da <_printf_float+0xc2>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4631      	mov	r1, r6
 800872c:	4628      	mov	r0, r5
 800872e:	47b8      	blx	r7
 8008730:	3001      	adds	r0, #1
 8008732:	f43f ae52 	beq.w	80083da <_printf_float+0xc2>
 8008736:	f108 0801 	add.w	r8, r8, #1
 800873a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873c:	3b01      	subs	r3, #1
 800873e:	4543      	cmp	r3, r8
 8008740:	dcf1      	bgt.n	8008726 <_printf_float+0x40e>
 8008742:	464b      	mov	r3, r9
 8008744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008748:	e6dc      	b.n	8008504 <_printf_float+0x1ec>
 800874a:	f04f 0800 	mov.w	r8, #0
 800874e:	f104 0a1a 	add.w	sl, r4, #26
 8008752:	e7f2      	b.n	800873a <_printf_float+0x422>
 8008754:	2301      	movs	r3, #1
 8008756:	4642      	mov	r2, r8
 8008758:	e7df      	b.n	800871a <_printf_float+0x402>
 800875a:	2301      	movs	r3, #1
 800875c:	464a      	mov	r2, r9
 800875e:	4631      	mov	r1, r6
 8008760:	4628      	mov	r0, r5
 8008762:	47b8      	blx	r7
 8008764:	3001      	adds	r0, #1
 8008766:	f43f ae38 	beq.w	80083da <_printf_float+0xc2>
 800876a:	f108 0801 	add.w	r8, r8, #1
 800876e:	68e3      	ldr	r3, [r4, #12]
 8008770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008772:	1a5b      	subs	r3, r3, r1
 8008774:	4543      	cmp	r3, r8
 8008776:	dcf0      	bgt.n	800875a <_printf_float+0x442>
 8008778:	e6fa      	b.n	8008570 <_printf_float+0x258>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	f104 0919 	add.w	r9, r4, #25
 8008782:	e7f4      	b.n	800876e <_printf_float+0x456>

08008784 <_printf_common>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	4616      	mov	r6, r2
 800878a:	4699      	mov	r9, r3
 800878c:	688a      	ldr	r2, [r1, #8]
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	bfb8      	it	lt
 8008798:	4613      	movlt	r3, r2
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087a0:	4607      	mov	r7, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	b10a      	cbz	r2, 80087aa <_printf_common+0x26>
 80087a6:	3301      	adds	r3, #1
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0699      	lsls	r1, r3, #26
 80087ae:	bf42      	ittt	mi
 80087b0:	6833      	ldrmi	r3, [r6, #0]
 80087b2:	3302      	addmi	r3, #2
 80087b4:	6033      	strmi	r3, [r6, #0]
 80087b6:	6825      	ldr	r5, [r4, #0]
 80087b8:	f015 0506 	ands.w	r5, r5, #6
 80087bc:	d106      	bne.n	80087cc <_printf_common+0x48>
 80087be:	f104 0a19 	add.w	sl, r4, #25
 80087c2:	68e3      	ldr	r3, [r4, #12]
 80087c4:	6832      	ldr	r2, [r6, #0]
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc26      	bgt.n	800881a <_printf_common+0x96>
 80087cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087d0:	1e13      	subs	r3, r2, #0
 80087d2:	6822      	ldr	r2, [r4, #0]
 80087d4:	bf18      	it	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	0692      	lsls	r2, r2, #26
 80087da:	d42b      	bmi.n	8008834 <_printf_common+0xb0>
 80087dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e0:	4649      	mov	r1, r9
 80087e2:	4638      	mov	r0, r7
 80087e4:	47c0      	blx	r8
 80087e6:	3001      	adds	r0, #1
 80087e8:	d01e      	beq.n	8008828 <_printf_common+0xa4>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	68e5      	ldr	r5, [r4, #12]
 80087ee:	6832      	ldr	r2, [r6, #0]
 80087f0:	f003 0306 	and.w	r3, r3, #6
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	bf08      	it	eq
 80087f8:	1aad      	subeq	r5, r5, r2
 80087fa:	68a3      	ldr	r3, [r4, #8]
 80087fc:	6922      	ldr	r2, [r4, #16]
 80087fe:	bf0c      	ite	eq
 8008800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008804:	2500      	movne	r5, #0
 8008806:	4293      	cmp	r3, r2
 8008808:	bfc4      	itt	gt
 800880a:	1a9b      	subgt	r3, r3, r2
 800880c:	18ed      	addgt	r5, r5, r3
 800880e:	2600      	movs	r6, #0
 8008810:	341a      	adds	r4, #26
 8008812:	42b5      	cmp	r5, r6
 8008814:	d11a      	bne.n	800884c <_printf_common+0xc8>
 8008816:	2000      	movs	r0, #0
 8008818:	e008      	b.n	800882c <_printf_common+0xa8>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4649      	mov	r1, r9
 8008820:	4638      	mov	r0, r7
 8008822:	47c0      	blx	r8
 8008824:	3001      	adds	r0, #1
 8008826:	d103      	bne.n	8008830 <_printf_common+0xac>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	3501      	adds	r5, #1
 8008832:	e7c6      	b.n	80087c2 <_printf_common+0x3e>
 8008834:	18e1      	adds	r1, r4, r3
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	2030      	movs	r0, #48	; 0x30
 800883a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800883e:	4422      	add	r2, r4
 8008840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008848:	3302      	adds	r3, #2
 800884a:	e7c7      	b.n	80087dc <_printf_common+0x58>
 800884c:	2301      	movs	r3, #1
 800884e:	4622      	mov	r2, r4
 8008850:	4649      	mov	r1, r9
 8008852:	4638      	mov	r0, r7
 8008854:	47c0      	blx	r8
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xa4>
 800885a:	3601      	adds	r6, #1
 800885c:	e7d9      	b.n	8008812 <_printf_common+0x8e>
	...

08008860 <_printf_i>:
 8008860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	7e0f      	ldrb	r7, [r1, #24]
 8008866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008868:	2f78      	cmp	r7, #120	; 0x78
 800886a:	4691      	mov	r9, r2
 800886c:	4680      	mov	r8, r0
 800886e:	460c      	mov	r4, r1
 8008870:	469a      	mov	sl, r3
 8008872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008876:	d807      	bhi.n	8008888 <_printf_i+0x28>
 8008878:	2f62      	cmp	r7, #98	; 0x62
 800887a:	d80a      	bhi.n	8008892 <_printf_i+0x32>
 800887c:	2f00      	cmp	r7, #0
 800887e:	f000 80d8 	beq.w	8008a32 <_printf_i+0x1d2>
 8008882:	2f58      	cmp	r7, #88	; 0x58
 8008884:	f000 80a3 	beq.w	80089ce <_printf_i+0x16e>
 8008888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800888c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008890:	e03a      	b.n	8008908 <_printf_i+0xa8>
 8008892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008896:	2b15      	cmp	r3, #21
 8008898:	d8f6      	bhi.n	8008888 <_printf_i+0x28>
 800889a:	a101      	add	r1, pc, #4	; (adr r1, 80088a0 <_printf_i+0x40>)
 800889c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	08008889 	.word	0x08008889
 80088ac:	08008889 	.word	0x08008889
 80088b0:	08008889 	.word	0x08008889
 80088b4:	08008889 	.word	0x08008889
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008889 	.word	0x08008889
 80088c0:	08008889 	.word	0x08008889
 80088c4:	08008889 	.word	0x08008889
 80088c8:	08008889 	.word	0x08008889
 80088cc:	08008a19 	.word	0x08008a19
 80088d0:	0800893d 	.word	0x0800893d
 80088d4:	080089fb 	.word	0x080089fb
 80088d8:	08008889 	.word	0x08008889
 80088dc:	08008889 	.word	0x08008889
 80088e0:	08008a3b 	.word	0x08008a3b
 80088e4:	08008889 	.word	0x08008889
 80088e8:	0800893d 	.word	0x0800893d
 80088ec:	08008889 	.word	0x08008889
 80088f0:	08008889 	.word	0x08008889
 80088f4:	08008a03 	.word	0x08008a03
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	1d1a      	adds	r2, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	602a      	str	r2, [r5, #0]
 8008900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008908:	2301      	movs	r3, #1
 800890a:	e0a3      	b.n	8008a54 <_printf_i+0x1f4>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	6829      	ldr	r1, [r5, #0]
 8008910:	0606      	lsls	r6, r0, #24
 8008912:	f101 0304 	add.w	r3, r1, #4
 8008916:	d50a      	bpl.n	800892e <_printf_i+0xce>
 8008918:	680e      	ldr	r6, [r1, #0]
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	2e00      	cmp	r6, #0
 800891e:	da03      	bge.n	8008928 <_printf_i+0xc8>
 8008920:	232d      	movs	r3, #45	; 0x2d
 8008922:	4276      	negs	r6, r6
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	485e      	ldr	r0, [pc, #376]	; (8008aa4 <_printf_i+0x244>)
 800892a:	230a      	movs	r3, #10
 800892c:	e019      	b.n	8008962 <_printf_i+0x102>
 800892e:	680e      	ldr	r6, [r1, #0]
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008936:	bf18      	it	ne
 8008938:	b236      	sxthne	r6, r6
 800893a:	e7ef      	b.n	800891c <_printf_i+0xbc>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	6820      	ldr	r0, [r4, #0]
 8008940:	1d19      	adds	r1, r3, #4
 8008942:	6029      	str	r1, [r5, #0]
 8008944:	0601      	lsls	r1, r0, #24
 8008946:	d501      	bpl.n	800894c <_printf_i+0xec>
 8008948:	681e      	ldr	r6, [r3, #0]
 800894a:	e002      	b.n	8008952 <_printf_i+0xf2>
 800894c:	0646      	lsls	r6, r0, #25
 800894e:	d5fb      	bpl.n	8008948 <_printf_i+0xe8>
 8008950:	881e      	ldrh	r6, [r3, #0]
 8008952:	4854      	ldr	r0, [pc, #336]	; (8008aa4 <_printf_i+0x244>)
 8008954:	2f6f      	cmp	r7, #111	; 0x6f
 8008956:	bf0c      	ite	eq
 8008958:	2308      	moveq	r3, #8
 800895a:	230a      	movne	r3, #10
 800895c:	2100      	movs	r1, #0
 800895e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008962:	6865      	ldr	r5, [r4, #4]
 8008964:	60a5      	str	r5, [r4, #8]
 8008966:	2d00      	cmp	r5, #0
 8008968:	bfa2      	ittt	ge
 800896a:	6821      	ldrge	r1, [r4, #0]
 800896c:	f021 0104 	bicge.w	r1, r1, #4
 8008970:	6021      	strge	r1, [r4, #0]
 8008972:	b90e      	cbnz	r6, 8008978 <_printf_i+0x118>
 8008974:	2d00      	cmp	r5, #0
 8008976:	d04d      	beq.n	8008a14 <_printf_i+0x1b4>
 8008978:	4615      	mov	r5, r2
 800897a:	fbb6 f1f3 	udiv	r1, r6, r3
 800897e:	fb03 6711 	mls	r7, r3, r1, r6
 8008982:	5dc7      	ldrb	r7, [r0, r7]
 8008984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008988:	4637      	mov	r7, r6
 800898a:	42bb      	cmp	r3, r7
 800898c:	460e      	mov	r6, r1
 800898e:	d9f4      	bls.n	800897a <_printf_i+0x11a>
 8008990:	2b08      	cmp	r3, #8
 8008992:	d10b      	bne.n	80089ac <_printf_i+0x14c>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	07de      	lsls	r6, r3, #31
 8008998:	d508      	bpl.n	80089ac <_printf_i+0x14c>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6861      	ldr	r1, [r4, #4]
 800899e:	4299      	cmp	r1, r3
 80089a0:	bfde      	ittt	le
 80089a2:	2330      	movle	r3, #48	; 0x30
 80089a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089ac:	1b52      	subs	r2, r2, r5
 80089ae:	6122      	str	r2, [r4, #16]
 80089b0:	f8cd a000 	str.w	sl, [sp]
 80089b4:	464b      	mov	r3, r9
 80089b6:	aa03      	add	r2, sp, #12
 80089b8:	4621      	mov	r1, r4
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7ff fee2 	bl	8008784 <_printf_common>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d14c      	bne.n	8008a5e <_printf_i+0x1fe>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b004      	add	sp, #16
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	4835      	ldr	r0, [pc, #212]	; (8008aa4 <_printf_i+0x244>)
 80089d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089d4:	6829      	ldr	r1, [r5, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80089dc:	6029      	str	r1, [r5, #0]
 80089de:	061d      	lsls	r5, r3, #24
 80089e0:	d514      	bpl.n	8008a0c <_printf_i+0x1ac>
 80089e2:	07df      	lsls	r7, r3, #31
 80089e4:	bf44      	itt	mi
 80089e6:	f043 0320 	orrmi.w	r3, r3, #32
 80089ea:	6023      	strmi	r3, [r4, #0]
 80089ec:	b91e      	cbnz	r6, 80089f6 <_printf_i+0x196>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f023 0320 	bic.w	r3, r3, #32
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	2310      	movs	r3, #16
 80089f8:	e7b0      	b.n	800895c <_printf_i+0xfc>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f043 0320 	orr.w	r3, r3, #32
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	2378      	movs	r3, #120	; 0x78
 8008a04:	4828      	ldr	r0, [pc, #160]	; (8008aa8 <_printf_i+0x248>)
 8008a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a0a:	e7e3      	b.n	80089d4 <_printf_i+0x174>
 8008a0c:	0659      	lsls	r1, r3, #25
 8008a0e:	bf48      	it	mi
 8008a10:	b2b6      	uxthmi	r6, r6
 8008a12:	e7e6      	b.n	80089e2 <_printf_i+0x182>
 8008a14:	4615      	mov	r5, r2
 8008a16:	e7bb      	b.n	8008990 <_printf_i+0x130>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	6826      	ldr	r6, [r4, #0]
 8008a1c:	6961      	ldr	r1, [r4, #20]
 8008a1e:	1d18      	adds	r0, r3, #4
 8008a20:	6028      	str	r0, [r5, #0]
 8008a22:	0635      	lsls	r5, r6, #24
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	d501      	bpl.n	8008a2c <_printf_i+0x1cc>
 8008a28:	6019      	str	r1, [r3, #0]
 8008a2a:	e002      	b.n	8008a32 <_printf_i+0x1d2>
 8008a2c:	0670      	lsls	r0, r6, #25
 8008a2e:	d5fb      	bpl.n	8008a28 <_printf_i+0x1c8>
 8008a30:	8019      	strh	r1, [r3, #0]
 8008a32:	2300      	movs	r3, #0
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	4615      	mov	r5, r2
 8008a38:	e7ba      	b.n	80089b0 <_printf_i+0x150>
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	602a      	str	r2, [r5, #0]
 8008a40:	681d      	ldr	r5, [r3, #0]
 8008a42:	6862      	ldr	r2, [r4, #4]
 8008a44:	2100      	movs	r1, #0
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7f7 fbea 	bl	8000220 <memchr>
 8008a4c:	b108      	cbz	r0, 8008a52 <_printf_i+0x1f2>
 8008a4e:	1b40      	subs	r0, r0, r5
 8008a50:	6060      	str	r0, [r4, #4]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	2300      	movs	r3, #0
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5c:	e7a8      	b.n	80089b0 <_printf_i+0x150>
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4649      	mov	r1, r9
 8008a64:	4640      	mov	r0, r8
 8008a66:	47d0      	blx	sl
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d0ab      	beq.n	80089c4 <_printf_i+0x164>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	d413      	bmi.n	8008a9a <_printf_i+0x23a>
 8008a72:	68e0      	ldr	r0, [r4, #12]
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	4298      	cmp	r0, r3
 8008a78:	bfb8      	it	lt
 8008a7a:	4618      	movlt	r0, r3
 8008a7c:	e7a4      	b.n	80089c8 <_printf_i+0x168>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	4632      	mov	r2, r6
 8008a82:	4649      	mov	r1, r9
 8008a84:	4640      	mov	r0, r8
 8008a86:	47d0      	blx	sl
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d09b      	beq.n	80089c4 <_printf_i+0x164>
 8008a8c:	3501      	adds	r5, #1
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	9903      	ldr	r1, [sp, #12]
 8008a92:	1a5b      	subs	r3, r3, r1
 8008a94:	42ab      	cmp	r3, r5
 8008a96:	dcf2      	bgt.n	8008a7e <_printf_i+0x21e>
 8008a98:	e7eb      	b.n	8008a72 <_printf_i+0x212>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	f104 0619 	add.w	r6, r4, #25
 8008aa0:	e7f5      	b.n	8008a8e <_printf_i+0x22e>
 8008aa2:	bf00      	nop
 8008aa4:	0800b406 	.word	0x0800b406
 8008aa8:	0800b417 	.word	0x0800b417

08008aac <siprintf>:
 8008aac:	b40e      	push	{r1, r2, r3}
 8008aae:	b500      	push	{lr}
 8008ab0:	b09c      	sub	sp, #112	; 0x70
 8008ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab4:	9002      	str	r0, [sp, #8]
 8008ab6:	9006      	str	r0, [sp, #24]
 8008ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008abc:	4809      	ldr	r0, [pc, #36]	; (8008ae4 <siprintf+0x38>)
 8008abe:	9107      	str	r1, [sp, #28]
 8008ac0:	9104      	str	r1, [sp, #16]
 8008ac2:	4909      	ldr	r1, [pc, #36]	; (8008ae8 <siprintf+0x3c>)
 8008ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac8:	9105      	str	r1, [sp, #20]
 8008aca:	6800      	ldr	r0, [r0, #0]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	a902      	add	r1, sp, #8
 8008ad0:	f001 fb6a 	bl	800a1a8 <_svfiprintf_r>
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	b01c      	add	sp, #112	; 0x70
 8008adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae0:	b003      	add	sp, #12
 8008ae2:	4770      	bx	lr
 8008ae4:	20000014 	.word	0x20000014
 8008ae8:	ffff0208 	.word	0xffff0208

08008aec <quorem>:
 8008aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	6903      	ldr	r3, [r0, #16]
 8008af2:	690c      	ldr	r4, [r1, #16]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	4607      	mov	r7, r0
 8008af8:	f2c0 8081 	blt.w	8008bfe <quorem+0x112>
 8008afc:	3c01      	subs	r4, #1
 8008afe:	f101 0814 	add.w	r8, r1, #20
 8008b02:	f100 0514 	add.w	r5, r0, #20
 8008b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b14:	3301      	adds	r3, #1
 8008b16:	429a      	cmp	r2, r3
 8008b18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b20:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b24:	d331      	bcc.n	8008b8a <quorem+0x9e>
 8008b26:	f04f 0e00 	mov.w	lr, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	46ac      	mov	ip, r5
 8008b2e:	46f2      	mov	sl, lr
 8008b30:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b34:	b293      	uxth	r3, r2
 8008b36:	fb06 e303 	mla	r3, r6, r3, lr
 8008b3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	ebaa 0303 	sub.w	r3, sl, r3
 8008b44:	f8dc a000 	ldr.w	sl, [ip]
 8008b48:	0c12      	lsrs	r2, r2, #16
 8008b4a:	fa13 f38a 	uxtah	r3, r3, sl
 8008b4e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	9b00      	ldr	r3, [sp, #0]
 8008b56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b64:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b68:	4581      	cmp	r9, r0
 8008b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b6e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b76:	d2db      	bcs.n	8008b30 <quorem+0x44>
 8008b78:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b7c:	b92b      	cbnz	r3, 8008b8a <quorem+0x9e>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	429d      	cmp	r5, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	d32e      	bcc.n	8008be6 <quorem+0xfa>
 8008b88:	613c      	str	r4, [r7, #16]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f001 f8b8 	bl	8009d00 <__mcmp>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	db24      	blt.n	8008bde <quorem+0xf2>
 8008b94:	3601      	adds	r6, #1
 8008b96:	4628      	mov	r0, r5
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ba4:	b293      	uxth	r3, r2
 8008ba6:	ebac 0303 	sub.w	r3, ip, r3
 8008baa:	0c12      	lsrs	r2, r2, #16
 8008bac:	fa13 f38e 	uxtah	r3, r3, lr
 8008bb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbe:	45c1      	cmp	r9, r8
 8008bc0:	f840 3b04 	str.w	r3, [r0], #4
 8008bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc8:	d2e8      	bcs.n	8008b9c <quorem+0xb0>
 8008bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bd2:	b922      	cbnz	r2, 8008bde <quorem+0xf2>
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	d30a      	bcc.n	8008bf2 <quorem+0x106>
 8008bdc:	613c      	str	r4, [r7, #16]
 8008bde:	4630      	mov	r0, r6
 8008be0:	b003      	add	sp, #12
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	3b04      	subs	r3, #4
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d1cc      	bne.n	8008b88 <quorem+0x9c>
 8008bee:	3c01      	subs	r4, #1
 8008bf0:	e7c7      	b.n	8008b82 <quorem+0x96>
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1f0      	bne.n	8008bdc <quorem+0xf0>
 8008bfa:	3c01      	subs	r4, #1
 8008bfc:	e7eb      	b.n	8008bd6 <quorem+0xea>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e7ee      	b.n	8008be0 <quorem+0xf4>
 8008c02:	0000      	movs	r0, r0
 8008c04:	0000      	movs	r0, r0
	...

08008c08 <_dtoa_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b04 	vpush	{d8-d9}
 8008c10:	ec57 6b10 	vmov	r6, r7, d0
 8008c14:	b093      	sub	sp, #76	; 0x4c
 8008c16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c1c:	9106      	str	r1, [sp, #24]
 8008c1e:	ee10 aa10 	vmov	sl, s0
 8008c22:	4604      	mov	r4, r0
 8008c24:	9209      	str	r2, [sp, #36]	; 0x24
 8008c26:	930c      	str	r3, [sp, #48]	; 0x30
 8008c28:	46bb      	mov	fp, r7
 8008c2a:	b975      	cbnz	r5, 8008c4a <_dtoa_r+0x42>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f000 fddd 	bl	80097ec <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6260      	str	r0, [r4, #36]	; 0x24
 8008c36:	b920      	cbnz	r0, 8008c42 <_dtoa_r+0x3a>
 8008c38:	4ba7      	ldr	r3, [pc, #668]	; (8008ed8 <_dtoa_r+0x2d0>)
 8008c3a:	21ea      	movs	r1, #234	; 0xea
 8008c3c:	48a7      	ldr	r0, [pc, #668]	; (8008edc <_dtoa_r+0x2d4>)
 8008c3e:	f001 fbc3 	bl	800a3c8 <__assert_func>
 8008c42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c46:	6005      	str	r5, [r0, #0]
 8008c48:	60c5      	str	r5, [r0, #12]
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	b151      	cbz	r1, 8008c66 <_dtoa_r+0x5e>
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	604a      	str	r2, [r1, #4]
 8008c54:	2301      	movs	r3, #1
 8008c56:	4093      	lsls	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fe0e 	bl	800987c <_Bfree>
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	1e3b      	subs	r3, r7, #0
 8008c68:	bfaa      	itet	ge
 8008c6a:	2300      	movge	r3, #0
 8008c6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c70:	f8c8 3000 	strge.w	r3, [r8]
 8008c74:	4b9a      	ldr	r3, [pc, #616]	; (8008ee0 <_dtoa_r+0x2d8>)
 8008c76:	bfbc      	itt	lt
 8008c78:	2201      	movlt	r2, #1
 8008c7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c7e:	ea33 030b 	bics.w	r3, r3, fp
 8008c82:	d11b      	bne.n	8008cbc <_dtoa_r+0xb4>
 8008c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c90:	4333      	orrs	r3, r6
 8008c92:	f000 8592 	beq.w	80097ba <_dtoa_r+0xbb2>
 8008c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c98:	b963      	cbnz	r3, 8008cb4 <_dtoa_r+0xac>
 8008c9a:	4b92      	ldr	r3, [pc, #584]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008c9c:	e022      	b.n	8008ce4 <_dtoa_r+0xdc>
 8008c9e:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <_dtoa_r+0x2e0>)
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	b013      	add	sp, #76	; 0x4c
 8008cac:	ecbd 8b04 	vpop	{d8-d9}
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	4b8b      	ldr	r3, [pc, #556]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	3303      	adds	r3, #3
 8008cba:	e7f3      	b.n	8008ca4 <_dtoa_r+0x9c>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	f7f7 ff20 	bl	8000b08 <__aeabi_dcmpeq>
 8008cc8:	ec4b ab19 	vmov	d9, sl, fp
 8008ccc:	4680      	mov	r8, r0
 8008cce:	b158      	cbz	r0, 8008ce8 <_dtoa_r+0xe0>
 8008cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 856b 	beq.w	80097b4 <_dtoa_r+0xbac>
 8008cde:	4883      	ldr	r0, [pc, #524]	; (8008eec <_dtoa_r+0x2e4>)
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	1e43      	subs	r3, r0, #1
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	e7df      	b.n	8008ca8 <_dtoa_r+0xa0>
 8008ce8:	ec4b ab10 	vmov	d0, sl, fp
 8008cec:	aa10      	add	r2, sp, #64	; 0x40
 8008cee:	a911      	add	r1, sp, #68	; 0x44
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 f8ab 	bl	8009e4c <__d2b>
 8008cf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cfa:	ee08 0a10 	vmov	s16, r0
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	f000 8084 	beq.w	8008e0c <_dtoa_r+0x204>
 8008d04:	ee19 3a90 	vmov	r3, s19
 8008d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d10:	4656      	mov	r6, sl
 8008d12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d1e:	4b74      	ldr	r3, [pc, #464]	; (8008ef0 <_dtoa_r+0x2e8>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 facf 	bl	80002c8 <__aeabi_dsub>
 8008d2a:	a365      	add	r3, pc, #404	; (adr r3, 8008ec0 <_dtoa_r+0x2b8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	a364      	add	r3, pc, #400	; (adr r3, 8008ec8 <_dtoa_r+0x2c0>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fac7 	bl	80002cc <__adddf3>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4628      	mov	r0, r5
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 fc0e 	bl	8000564 <__aeabi_i2d>
 8008d48:	a361      	add	r3, pc, #388	; (adr r3, 8008ed0 <_dtoa_r+0x2c8>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc73 	bl	8000638 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fab7 	bl	80002cc <__adddf3>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	f7f7 ff19 	bl	8000b98 <__aeabi_d2iz>
 8008d66:	2200      	movs	r2, #0
 8008d68:	9000      	str	r0, [sp, #0]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fed4 	bl	8000b1c <__aeabi_dcmplt>
 8008d74:	b150      	cbz	r0, 8008d8c <_dtoa_r+0x184>
 8008d76:	9800      	ldr	r0, [sp, #0]
 8008d78:	f7f7 fbf4 	bl	8000564 <__aeabi_i2d>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 8008d84:	b910      	cbnz	r0, 8008d8c <_dtoa_r+0x184>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	2b16      	cmp	r3, #22
 8008d90:	d85a      	bhi.n	8008e48 <_dtoa_r+0x240>
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	4b57      	ldr	r3, [pc, #348]	; (8008ef4 <_dtoa_r+0x2ec>)
 8008d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	ec51 0b19 	vmov	r0, r1, d9
 8008da2:	f7f7 febb 	bl	8000b1c <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d050      	beq.n	8008e4c <_dtoa_r+0x244>
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008db6:	1b5d      	subs	r5, r3, r5
 8008db8:	1e6b      	subs	r3, r5, #1
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	bf45      	ittet	mi
 8008dbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dc2:	9304      	strmi	r3, [sp, #16]
 8008dc4:	2300      	movpl	r3, #0
 8008dc6:	2300      	movmi	r3, #0
 8008dc8:	bf4c      	ite	mi
 8008dca:	9305      	strmi	r3, [sp, #20]
 8008dcc:	9304      	strpl	r3, [sp, #16]
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db3d      	blt.n	8008e50 <_dtoa_r+0x248>
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	9a00      	ldr	r2, [sp, #0]
 8008dd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dda:	4413      	add	r3, r2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b09      	cmp	r3, #9
 8008de6:	f200 8089 	bhi.w	8008efc <_dtoa_r+0x2f4>
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	bfc4      	itt	gt
 8008dee:	3b04      	subgt	r3, #4
 8008df0:	9306      	strgt	r3, [sp, #24]
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	f1a3 0302 	sub.w	r3, r3, #2
 8008df8:	bfcc      	ite	gt
 8008dfa:	2500      	movgt	r5, #0
 8008dfc:	2501      	movle	r5, #1
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	f200 8087 	bhi.w	8008f12 <_dtoa_r+0x30a>
 8008e04:	e8df f003 	tbb	[pc, r3]
 8008e08:	59383a2d 	.word	0x59383a2d
 8008e0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e10:	441d      	add	r5, r3
 8008e12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	bfc1      	itttt	gt
 8008e1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e2a:	bfda      	itte	le
 8008e2c:	f1c3 0320 	rsble	r3, r3, #32
 8008e30:	fa06 f003 	lslle.w	r0, r6, r3
 8008e34:	4318      	orrgt	r0, r3
 8008e36:	f7f7 fb85 	bl	8000544 <__aeabi_ui2d>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e42:	3d01      	subs	r5, #1
 8008e44:	930e      	str	r3, [sp, #56]	; 0x38
 8008e46:	e76a      	b.n	8008d1e <_dtoa_r+0x116>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7b2      	b.n	8008db2 <_dtoa_r+0x1aa>
 8008e4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e4e:	e7b1      	b.n	8008db4 <_dtoa_r+0x1ac>
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	9a00      	ldr	r2, [sp, #0]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	4253      	negs	r3, r2
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e60:	e7bf      	b.n	8008de2 <_dtoa_r+0x1da>
 8008e62:	2300      	movs	r3, #0
 8008e64:	9308      	str	r3, [sp, #32]
 8008e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc55      	bgt.n	8008f18 <_dtoa_r+0x310>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e72:	461a      	mov	r2, r3
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	e00c      	b.n	8008e92 <_dtoa_r+0x28a>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7f3      	b.n	8008e64 <_dtoa_r+0x25c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	4413      	add	r3, r2
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	bfb8      	it	lt
 8008e90:	2301      	movlt	r3, #1
 8008e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	6042      	str	r2, [r0, #4]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	f102 0614 	add.w	r6, r2, #20
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	6841      	ldr	r1, [r0, #4]
 8008ea2:	d93d      	bls.n	8008f20 <_dtoa_r+0x318>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fca9 	bl	80097fc <_Balloc>
 8008eaa:	9001      	str	r0, [sp, #4]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d13b      	bne.n	8008f28 <_dtoa_r+0x320>
 8008eb0:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <_dtoa_r+0x2f0>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eb8:	e6c0      	b.n	8008c3c <_dtoa_r+0x34>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7df      	b.n	8008e7e <_dtoa_r+0x276>
 8008ebe:	bf00      	nop
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800b435 	.word	0x0800b435
 8008edc:	0800b44c 	.word	0x0800b44c
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800b431 	.word	0x0800b431
 8008ee8:	0800b428 	.word	0x0800b428
 8008eec:	0800b405 	.word	0x0800b405
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800b540 	.word	0x0800b540
 8008ef8:	0800b4a7 	.word	0x0800b4a7
 8008efc:	2501      	movs	r5, #1
 8008efe:	2300      	movs	r3, #0
 8008f00:	9306      	str	r3, [sp, #24]
 8008f02:	9508      	str	r5, [sp, #32]
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295
 8008f08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2312      	movs	r3, #18
 8008f10:	e7b0      	b.n	8008e74 <_dtoa_r+0x26c>
 8008f12:	2301      	movs	r3, #1
 8008f14:	9308      	str	r3, [sp, #32]
 8008f16:	e7f5      	b.n	8008f04 <_dtoa_r+0x2fc>
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f1e:	e7b8      	b.n	8008e92 <_dtoa_r+0x28a>
 8008f20:	3101      	adds	r1, #1
 8008f22:	6041      	str	r1, [r0, #4]
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	e7b8      	b.n	8008e9a <_dtoa_r+0x292>
 8008f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2a:	9a01      	ldr	r2, [sp, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	2b0e      	cmp	r3, #14
 8008f32:	f200 809d 	bhi.w	8009070 <_dtoa_r+0x468>
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	f000 809a 	beq.w	8009070 <_dtoa_r+0x468>
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dd32      	ble.n	8008fa8 <_dtoa_r+0x3a0>
 8008f42:	4ab7      	ldr	r2, [pc, #732]	; (8009220 <_dtoa_r+0x618>)
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f50:	9b00      	ldr	r3, [sp, #0]
 8008f52:	05d8      	lsls	r0, r3, #23
 8008f54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f58:	d516      	bpl.n	8008f88 <_dtoa_r+0x380>
 8008f5a:	4bb2      	ldr	r3, [pc, #712]	; (8009224 <_dtoa_r+0x61c>)
 8008f5c:	ec51 0b19 	vmov	r0, r1, d9
 8008f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f64:	f7f7 fc92 	bl	800088c <__aeabi_ddiv>
 8008f68:	f007 070f 	and.w	r7, r7, #15
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	468b      	mov	fp, r1
 8008f70:	2503      	movs	r5, #3
 8008f72:	4eac      	ldr	r6, [pc, #688]	; (8009224 <_dtoa_r+0x61c>)
 8008f74:	b957      	cbnz	r7, 8008f8c <_dtoa_r+0x384>
 8008f76:	4642      	mov	r2, r8
 8008f78:	464b      	mov	r3, r9
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	f7f7 fc85 	bl	800088c <__aeabi_ddiv>
 8008f82:	4682      	mov	sl, r0
 8008f84:	468b      	mov	fp, r1
 8008f86:	e028      	b.n	8008fda <_dtoa_r+0x3d2>
 8008f88:	2502      	movs	r5, #2
 8008f8a:	e7f2      	b.n	8008f72 <_dtoa_r+0x36a>
 8008f8c:	07f9      	lsls	r1, r7, #31
 8008f8e:	d508      	bpl.n	8008fa2 <_dtoa_r+0x39a>
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f98:	f7f7 fb4e 	bl	8000638 <__aeabi_dmul>
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4689      	mov	r9, r1
 8008fa2:	107f      	asrs	r7, r7, #1
 8008fa4:	3608      	adds	r6, #8
 8008fa6:	e7e5      	b.n	8008f74 <_dtoa_r+0x36c>
 8008fa8:	f000 809b 	beq.w	80090e2 <_dtoa_r+0x4da>
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	4f9d      	ldr	r7, [pc, #628]	; (8009224 <_dtoa_r+0x61c>)
 8008fb0:	425e      	negs	r6, r3
 8008fb2:	4b9b      	ldr	r3, [pc, #620]	; (8009220 <_dtoa_r+0x618>)
 8008fb4:	f006 020f 	and.w	r2, r6, #15
 8008fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	ec51 0b19 	vmov	r0, r1, d9
 8008fc4:	f7f7 fb38 	bl	8000638 <__aeabi_dmul>
 8008fc8:	1136      	asrs	r6, r6, #4
 8008fca:	4682      	mov	sl, r0
 8008fcc:	468b      	mov	fp, r1
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2502      	movs	r5, #2
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d17a      	bne.n	80090cc <_dtoa_r+0x4c4>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1d3      	bne.n	8008f82 <_dtoa_r+0x37a>
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8082 	beq.w	80090e6 <_dtoa_r+0x4de>
 8008fe2:	4b91      	ldr	r3, [pc, #580]	; (8009228 <_dtoa_r+0x620>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	f7f7 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d079      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d076      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd36      	ble.n	800906c <_dtoa_r+0x464>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	4650      	mov	r0, sl
 8009002:	4659      	mov	r1, fp
 8009004:	1e5f      	subs	r7, r3, #1
 8009006:	2200      	movs	r2, #0
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <_dtoa_r+0x624>)
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	9e02      	ldr	r6, [sp, #8]
 8009010:	4682      	mov	sl, r0
 8009012:	468b      	mov	fp, r1
 8009014:	3501      	adds	r5, #1
 8009016:	4628      	mov	r0, r5
 8009018:	f7f7 faa4 	bl	8000564 <__aeabi_i2d>
 800901c:	4652      	mov	r2, sl
 800901e:	465b      	mov	r3, fp
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <_dtoa_r+0x628>)
 8009026:	2200      	movs	r2, #0
 8009028:	f7f7 f950 	bl	80002cc <__adddf3>
 800902c:	46d0      	mov	r8, sl
 800902e:	46d9      	mov	r9, fp
 8009030:	4682      	mov	sl, r0
 8009032:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009036:	2e00      	cmp	r6, #0
 8009038:	d158      	bne.n	80090ec <_dtoa_r+0x4e4>
 800903a:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <_dtoa_r+0x62c>)
 800903c:	2200      	movs	r2, #0
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 f941 	bl	80002c8 <__aeabi_dsub>
 8009046:	4652      	mov	r2, sl
 8009048:	465b      	mov	r3, fp
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	f7f7 fd83 	bl	8000b58 <__aeabi_dcmpgt>
 8009052:	2800      	cmp	r0, #0
 8009054:	f040 8295 	bne.w	8009582 <_dtoa_r+0x97a>
 8009058:	4652      	mov	r2, sl
 800905a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8289 	bne.w	800957e <_dtoa_r+0x976>
 800906c:	ec5b ab19 	vmov	sl, fp, d9
 8009070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009072:	2b00      	cmp	r3, #0
 8009074:	f2c0 8148 	blt.w	8009308 <_dtoa_r+0x700>
 8009078:	9a00      	ldr	r2, [sp, #0]
 800907a:	2a0e      	cmp	r2, #14
 800907c:	f300 8144 	bgt.w	8009308 <_dtoa_r+0x700>
 8009080:	4b67      	ldr	r3, [pc, #412]	; (8009220 <_dtoa_r+0x618>)
 8009082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800908a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	f280 80d5 	bge.w	800923c <_dtoa_r+0x634>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f300 80d1 	bgt.w	800923c <_dtoa_r+0x634>
 800909a:	f040 826f 	bne.w	800957c <_dtoa_r+0x974>
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <_dtoa_r+0x62c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4640      	mov	r0, r8
 80090a4:	4649      	mov	r1, r9
 80090a6:	f7f7 fac7 	bl	8000638 <__aeabi_dmul>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 fd49 	bl	8000b44 <__aeabi_dcmpge>
 80090b2:	9e03      	ldr	r6, [sp, #12]
 80090b4:	4637      	mov	r7, r6
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f040 8245 	bne.w	8009546 <_dtoa_r+0x93e>
 80090bc:	9d01      	ldr	r5, [sp, #4]
 80090be:	2331      	movs	r3, #49	; 0x31
 80090c0:	f805 3b01 	strb.w	r3, [r5], #1
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	e240      	b.n	800954e <_dtoa_r+0x946>
 80090cc:	07f2      	lsls	r2, r6, #31
 80090ce:	d505      	bpl.n	80090dc <_dtoa_r+0x4d4>
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	f7f7 fab0 	bl	8000638 <__aeabi_dmul>
 80090d8:	3501      	adds	r5, #1
 80090da:	2301      	movs	r3, #1
 80090dc:	1076      	asrs	r6, r6, #1
 80090de:	3708      	adds	r7, #8
 80090e0:	e777      	b.n	8008fd2 <_dtoa_r+0x3ca>
 80090e2:	2502      	movs	r5, #2
 80090e4:	e779      	b.n	8008fda <_dtoa_r+0x3d2>
 80090e6:	9f00      	ldr	r7, [sp, #0]
 80090e8:	9e03      	ldr	r6, [sp, #12]
 80090ea:	e794      	b.n	8009016 <_dtoa_r+0x40e>
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	4b4c      	ldr	r3, [pc, #304]	; (8009220 <_dtoa_r+0x618>)
 80090f0:	4431      	add	r1, r6
 80090f2:	910d      	str	r1, [sp, #52]	; 0x34
 80090f4:	9908      	ldr	r1, [sp, #32]
 80090f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090fe:	2900      	cmp	r1, #0
 8009100:	d043      	beq.n	800918a <_dtoa_r+0x582>
 8009102:	494d      	ldr	r1, [pc, #308]	; (8009238 <_dtoa_r+0x630>)
 8009104:	2000      	movs	r0, #0
 8009106:	f7f7 fbc1 	bl	800088c <__aeabi_ddiv>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	f7f7 f8db 	bl	80002c8 <__aeabi_dsub>
 8009112:	9d01      	ldr	r5, [sp, #4]
 8009114:	4682      	mov	sl, r0
 8009116:	468b      	mov	fp, r1
 8009118:	4649      	mov	r1, r9
 800911a:	4640      	mov	r0, r8
 800911c:	f7f7 fd3c 	bl	8000b98 <__aeabi_d2iz>
 8009120:	4606      	mov	r6, r0
 8009122:	f7f7 fa1f 	bl	8000564 <__aeabi_i2d>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f8cb 	bl	80002c8 <__aeabi_dsub>
 8009132:	3630      	adds	r6, #48	; 0x30
 8009134:	f805 6b01 	strb.w	r6, [r5], #1
 8009138:	4652      	mov	r2, sl
 800913a:	465b      	mov	r3, fp
 800913c:	4680      	mov	r8, r0
 800913e:	4689      	mov	r9, r1
 8009140:	f7f7 fcec 	bl	8000b1c <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	d163      	bne.n	8009210 <_dtoa_r+0x608>
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	4936      	ldr	r1, [pc, #216]	; (8009228 <_dtoa_r+0x620>)
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 f8ba 	bl	80002c8 <__aeabi_dsub>
 8009154:	4652      	mov	r2, sl
 8009156:	465b      	mov	r3, fp
 8009158:	f7f7 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f040 80b5 	bne.w	80092cc <_dtoa_r+0x6c4>
 8009162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009164:	429d      	cmp	r5, r3
 8009166:	d081      	beq.n	800906c <_dtoa_r+0x464>
 8009168:	4b30      	ldr	r3, [pc, #192]	; (800922c <_dtoa_r+0x624>)
 800916a:	2200      	movs	r2, #0
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	f7f7 fa62 	bl	8000638 <__aeabi_dmul>
 8009174:	4b2d      	ldr	r3, [pc, #180]	; (800922c <_dtoa_r+0x624>)
 8009176:	4682      	mov	sl, r0
 8009178:	468b      	mov	fp, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	2200      	movs	r2, #0
 8009180:	f7f7 fa5a 	bl	8000638 <__aeabi_dmul>
 8009184:	4680      	mov	r8, r0
 8009186:	4689      	mov	r9, r1
 8009188:	e7c6      	b.n	8009118 <_dtoa_r+0x510>
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 fa53 	bl	8000638 <__aeabi_dmul>
 8009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	930f      	str	r3, [sp, #60]	; 0x3c
 8009198:	4682      	mov	sl, r0
 800919a:	468b      	mov	fp, r1
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	f7f7 fcfa 	bl	8000b98 <__aeabi_d2iz>
 80091a4:	4606      	mov	r6, r0
 80091a6:	f7f7 f9dd 	bl	8000564 <__aeabi_i2d>
 80091aa:	3630      	adds	r6, #48	; 0x30
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 f888 	bl	80002c8 <__aeabi_dsub>
 80091b8:	f805 6b01 	strb.w	r6, [r5], #1
 80091bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091be:	429d      	cmp	r5, r3
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	d124      	bne.n	8009214 <_dtoa_r+0x60c>
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <_dtoa_r+0x630>)
 80091cc:	4650      	mov	r0, sl
 80091ce:	4659      	mov	r1, fp
 80091d0:	f7f7 f87c 	bl	80002cc <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	f7f7 fcbc 	bl	8000b58 <__aeabi_dcmpgt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d173      	bne.n	80092cc <_dtoa_r+0x6c4>
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	4913      	ldr	r1, [pc, #76]	; (8009238 <_dtoa_r+0x630>)
 80091ea:	2000      	movs	r0, #0
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	f7f7 fc90 	bl	8000b1c <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f af35 	beq.w	800906c <_dtoa_r+0x464>
 8009202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009204:	1e6b      	subs	r3, r5, #1
 8009206:	930f      	str	r3, [sp, #60]	; 0x3c
 8009208:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800920c:	2b30      	cmp	r3, #48	; 0x30
 800920e:	d0f8      	beq.n	8009202 <_dtoa_r+0x5fa>
 8009210:	9700      	str	r7, [sp, #0]
 8009212:	e049      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <_dtoa_r+0x624>)
 8009216:	f7f7 fa0f 	bl	8000638 <__aeabi_dmul>
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	e7bd      	b.n	800919c <_dtoa_r+0x594>
 8009220:	0800b540 	.word	0x0800b540
 8009224:	0800b518 	.word	0x0800b518
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	40240000 	.word	0x40240000
 8009230:	401c0000 	.word	0x401c0000
 8009234:	40140000 	.word	0x40140000
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	9d01      	ldr	r5, [sp, #4]
 800923e:	4656      	mov	r6, sl
 8009240:	465f      	mov	r7, fp
 8009242:	4642      	mov	r2, r8
 8009244:	464b      	mov	r3, r9
 8009246:	4630      	mov	r0, r6
 8009248:	4639      	mov	r1, r7
 800924a:	f7f7 fb1f 	bl	800088c <__aeabi_ddiv>
 800924e:	f7f7 fca3 	bl	8000b98 <__aeabi_d2iz>
 8009252:	4682      	mov	sl, r0
 8009254:	f7f7 f986 	bl	8000564 <__aeabi_i2d>
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	f7f7 f9ec 	bl	8000638 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800926c:	f7f7 f82c 	bl	80002c8 <__aeabi_dsub>
 8009270:	f805 6b01 	strb.w	r6, [r5], #1
 8009274:	9e01      	ldr	r6, [sp, #4]
 8009276:	9f03      	ldr	r7, [sp, #12]
 8009278:	1bae      	subs	r6, r5, r6
 800927a:	42b7      	cmp	r7, r6
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	d135      	bne.n	80092ee <_dtoa_r+0x6e6>
 8009282:	f7f7 f823 	bl	80002cc <__adddf3>
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	f7f7 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 8009292:	b9d0      	cbnz	r0, 80092ca <_dtoa_r+0x6c2>
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fc34 	bl	8000b08 <__aeabi_dcmpeq>
 80092a0:	b110      	cbz	r0, 80092a8 <_dtoa_r+0x6a0>
 80092a2:	f01a 0f01 	tst.w	sl, #1
 80092a6:	d110      	bne.n	80092ca <_dtoa_r+0x6c2>
 80092a8:	4620      	mov	r0, r4
 80092aa:	ee18 1a10 	vmov	r1, s16
 80092ae:	f000 fae5 	bl	800987c <_Bfree>
 80092b2:	2300      	movs	r3, #0
 80092b4:	9800      	ldr	r0, [sp, #0]
 80092b6:	702b      	strb	r3, [r5, #0]
 80092b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ba:	3001      	adds	r0, #1
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f43f acf1 	beq.w	8008ca8 <_dtoa_r+0xa0>
 80092c6:	601d      	str	r5, [r3, #0]
 80092c8:	e4ee      	b.n	8008ca8 <_dtoa_r+0xa0>
 80092ca:	9f00      	ldr	r7, [sp, #0]
 80092cc:	462b      	mov	r3, r5
 80092ce:	461d      	mov	r5, r3
 80092d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d4:	2a39      	cmp	r2, #57	; 0x39
 80092d6:	d106      	bne.n	80092e6 <_dtoa_r+0x6de>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d1f7      	bne.n	80092ce <_dtoa_r+0x6c6>
 80092de:	9901      	ldr	r1, [sp, #4]
 80092e0:	2230      	movs	r2, #48	; 0x30
 80092e2:	3701      	adds	r7, #1
 80092e4:	700a      	strb	r2, [r1, #0]
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	3201      	adds	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e790      	b.n	8009210 <_dtoa_r+0x608>
 80092ee:	4ba6      	ldr	r3, [pc, #664]	; (8009588 <_dtoa_r+0x980>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f9a1 	bl	8000638 <__aeabi_dmul>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	f7f7 fc03 	bl	8000b08 <__aeabi_dcmpeq>
 8009302:	2800      	cmp	r0, #0
 8009304:	d09d      	beq.n	8009242 <_dtoa_r+0x63a>
 8009306:	e7cf      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 80d7 	beq.w	80094be <_dtoa_r+0x8b6>
 8009310:	9a06      	ldr	r2, [sp, #24]
 8009312:	2a01      	cmp	r2, #1
 8009314:	f300 80ba 	bgt.w	800948c <_dtoa_r+0x884>
 8009318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800931a:	2a00      	cmp	r2, #0
 800931c:	f000 80b2 	beq.w	8009484 <_dtoa_r+0x87c>
 8009320:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009324:	9e07      	ldr	r6, [sp, #28]
 8009326:	9d04      	ldr	r5, [sp, #16]
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	441a      	add	r2, r3
 800932c:	9204      	str	r2, [sp, #16]
 800932e:	9a05      	ldr	r2, [sp, #20]
 8009330:	2101      	movs	r1, #1
 8009332:	441a      	add	r2, r3
 8009334:	4620      	mov	r0, r4
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	f000 fb58 	bl	80099ec <__i2b>
 800933c:	4607      	mov	r7, r0
 800933e:	2d00      	cmp	r5, #0
 8009340:	dd0c      	ble.n	800935c <_dtoa_r+0x754>
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd09      	ble.n	800935c <_dtoa_r+0x754>
 8009348:	42ab      	cmp	r3, r5
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	bfa8      	it	ge
 800934e:	462b      	movge	r3, r5
 8009350:	1ad2      	subs	r2, r2, r3
 8009352:	9204      	str	r2, [sp, #16]
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	1aed      	subs	r5, r5, r3
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	b31b      	cbz	r3, 80093a8 <_dtoa_r+0x7a0>
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80af 	beq.w	80094c6 <_dtoa_r+0x8be>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd13      	ble.n	8009394 <_dtoa_r+0x78c>
 800936c:	4639      	mov	r1, r7
 800936e:	4632      	mov	r2, r6
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fbfb 	bl	8009b6c <__pow5mult>
 8009376:	ee18 2a10 	vmov	r2, s16
 800937a:	4601      	mov	r1, r0
 800937c:	4607      	mov	r7, r0
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fb4a 	bl	8009a18 <__multiply>
 8009384:	ee18 1a10 	vmov	r1, s16
 8009388:	4680      	mov	r8, r0
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fa76 	bl	800987c <_Bfree>
 8009390:	ee08 8a10 	vmov	s16, r8
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	1b9a      	subs	r2, r3, r6
 8009398:	d006      	beq.n	80093a8 <_dtoa_r+0x7a0>
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fbe4 	bl	8009b6c <__pow5mult>
 80093a4:	ee08 0a10 	vmov	s16, r0
 80093a8:	2101      	movs	r1, #1
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fb1e 	bl	80099ec <__i2b>
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	4606      	mov	r6, r0
 80093b6:	f340 8088 	ble.w	80094ca <_dtoa_r+0x8c2>
 80093ba:	461a      	mov	r2, r3
 80093bc:	4601      	mov	r1, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fbd4 	bl	8009b6c <__pow5mult>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	4606      	mov	r6, r0
 80093ca:	f340 8081 	ble.w	80094d0 <_dtoa_r+0x8c8>
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	6933      	ldr	r3, [r6, #16]
 80093d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d8:	6918      	ldr	r0, [r3, #16]
 80093da:	f000 fab7 	bl	800994c <__hi0bits>
 80093de:	f1c0 0020 	rsb	r0, r0, #32
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	4418      	add	r0, r3
 80093e6:	f010 001f 	ands.w	r0, r0, #31
 80093ea:	f000 8092 	beq.w	8009512 <_dtoa_r+0x90a>
 80093ee:	f1c0 0320 	rsb	r3, r0, #32
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	f340 808a 	ble.w	800950c <_dtoa_r+0x904>
 80093f8:	f1c0 001c 	rsb	r0, r0, #28
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	4403      	add	r3, r0
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	4403      	add	r3, r0
 8009406:	4405      	add	r5, r0
 8009408:	9305      	str	r3, [sp, #20]
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd07      	ble.n	8009420 <_dtoa_r+0x818>
 8009410:	ee18 1a10 	vmov	r1, s16
 8009414:	461a      	mov	r2, r3
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fc02 	bl	8009c20 <__lshift>
 800941c:	ee08 0a10 	vmov	s16, r0
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0x82a>
 8009426:	4631      	mov	r1, r6
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fbf8 	bl	8009c20 <__lshift>
 8009430:	4606      	mov	r6, r0
 8009432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d06e      	beq.n	8009516 <_dtoa_r+0x90e>
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	4631      	mov	r1, r6
 800943e:	f000 fc5f 	bl	8009d00 <__mcmp>
 8009442:	2800      	cmp	r0, #0
 8009444:	da67      	bge.n	8009516 <_dtoa_r+0x90e>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	ee18 1a10 	vmov	r1, s16
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	220a      	movs	r2, #10
 8009452:	2300      	movs	r3, #0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fa33 	bl	80098c0 <__multadd>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	ee08 0a10 	vmov	s16, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 81b1 	beq.w	80097c8 <_dtoa_r+0xbc0>
 8009466:	2300      	movs	r3, #0
 8009468:	4639      	mov	r1, r7
 800946a:	220a      	movs	r2, #10
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fa27 	bl	80098c0 <__multadd>
 8009472:	9b02      	ldr	r3, [sp, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	4607      	mov	r7, r0
 8009478:	f300 808e 	bgt.w	8009598 <_dtoa_r+0x990>
 800947c:	9b06      	ldr	r3, [sp, #24]
 800947e:	2b02      	cmp	r3, #2
 8009480:	dc51      	bgt.n	8009526 <_dtoa_r+0x91e>
 8009482:	e089      	b.n	8009598 <_dtoa_r+0x990>
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800948a:	e74b      	b.n	8009324 <_dtoa_r+0x71c>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1e5e      	subs	r6, r3, #1
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	42b3      	cmp	r3, r6
 8009494:	bfbf      	itttt	lt
 8009496:	9b07      	ldrlt	r3, [sp, #28]
 8009498:	9607      	strlt	r6, [sp, #28]
 800949a:	1af2      	sublt	r2, r6, r3
 800949c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800949e:	bfb6      	itet	lt
 80094a0:	189b      	addlt	r3, r3, r2
 80094a2:	1b9e      	subge	r6, r3, r6
 80094a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	bfb8      	it	lt
 80094aa:	2600      	movlt	r6, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfb7      	itett	lt
 80094b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094b8:	1a9d      	sublt	r5, r3, r2
 80094ba:	2300      	movlt	r3, #0
 80094bc:	e734      	b.n	8009328 <_dtoa_r+0x720>
 80094be:	9e07      	ldr	r6, [sp, #28]
 80094c0:	9d04      	ldr	r5, [sp, #16]
 80094c2:	9f08      	ldr	r7, [sp, #32]
 80094c4:	e73b      	b.n	800933e <_dtoa_r+0x736>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	e767      	b.n	800939a <_dtoa_r+0x792>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	dc18      	bgt.n	8009502 <_dtoa_r+0x8fa>
 80094d0:	f1ba 0f00 	cmp.w	sl, #0
 80094d4:	d115      	bne.n	8009502 <_dtoa_r+0x8fa>
 80094d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094da:	b993      	cbnz	r3, 8009502 <_dtoa_r+0x8fa>
 80094dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094e0:	0d1b      	lsrs	r3, r3, #20
 80094e2:	051b      	lsls	r3, r3, #20
 80094e4:	b183      	cbz	r3, 8009508 <_dtoa_r+0x900>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9b05      	ldr	r3, [sp, #20]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	f04f 0801 	mov.w	r8, #1
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f af6a 	bne.w	80093d2 <_dtoa_r+0x7ca>
 80094fe:	2001      	movs	r0, #1
 8009500:	e76f      	b.n	80093e2 <_dtoa_r+0x7da>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	e7f6      	b.n	80094f6 <_dtoa_r+0x8ee>
 8009508:	4698      	mov	r8, r3
 800950a:	e7f4      	b.n	80094f6 <_dtoa_r+0x8ee>
 800950c:	f43f af7d 	beq.w	800940a <_dtoa_r+0x802>
 8009510:	4618      	mov	r0, r3
 8009512:	301c      	adds	r0, #28
 8009514:	e772      	b.n	80093fc <_dtoa_r+0x7f4>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc37      	bgt.n	800958c <_dtoa_r+0x984>
 800951c:	9b06      	ldr	r3, [sp, #24]
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd34      	ble.n	800958c <_dtoa_r+0x984>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	b96b      	cbnz	r3, 8009546 <_dtoa_r+0x93e>
 800952a:	4631      	mov	r1, r6
 800952c:	2205      	movs	r2, #5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 f9c6 	bl	80098c0 <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4606      	mov	r6, r0
 8009538:	ee18 0a10 	vmov	r0, s16
 800953c:	f000 fbe0 	bl	8009d00 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	f73f adbb 	bgt.w	80090bc <_dtoa_r+0x4b4>
 8009546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009548:	9d01      	ldr	r5, [sp, #4]
 800954a:	43db      	mvns	r3, r3
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	4631      	mov	r1, r6
 8009554:	4620      	mov	r0, r4
 8009556:	f000 f991 	bl	800987c <_Bfree>
 800955a:	2f00      	cmp	r7, #0
 800955c:	f43f aea4 	beq.w	80092a8 <_dtoa_r+0x6a0>
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d005      	beq.n	8009572 <_dtoa_r+0x96a>
 8009566:	45b8      	cmp	r8, r7
 8009568:	d003      	beq.n	8009572 <_dtoa_r+0x96a>
 800956a:	4641      	mov	r1, r8
 800956c:	4620      	mov	r0, r4
 800956e:	f000 f985 	bl	800987c <_Bfree>
 8009572:	4639      	mov	r1, r7
 8009574:	4620      	mov	r0, r4
 8009576:	f000 f981 	bl	800987c <_Bfree>
 800957a:	e695      	b.n	80092a8 <_dtoa_r+0x6a0>
 800957c:	2600      	movs	r6, #0
 800957e:	4637      	mov	r7, r6
 8009580:	e7e1      	b.n	8009546 <_dtoa_r+0x93e>
 8009582:	9700      	str	r7, [sp, #0]
 8009584:	4637      	mov	r7, r6
 8009586:	e599      	b.n	80090bc <_dtoa_r+0x4b4>
 8009588:	40240000 	.word	0x40240000
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80ca 	beq.w	8009728 <_dtoa_r+0xb20>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	2d00      	cmp	r5, #0
 800959a:	dd05      	ble.n	80095a8 <_dtoa_r+0x9a0>
 800959c:	4639      	mov	r1, r7
 800959e:	462a      	mov	r2, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fb3d 	bl	8009c20 <__lshift>
 80095a6:	4607      	mov	r7, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d05b      	beq.n	8009666 <_dtoa_r+0xa5e>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 f923 	bl	80097fc <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <_dtoa_r+0x9be>
 80095ba:	4b87      	ldr	r3, [pc, #540]	; (80097d8 <_dtoa_r+0xbd0>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095c2:	f7ff bb3b 	b.w	8008c3c <_dtoa_r+0x34>
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7fe fdeb 	bl	80081ac <memcpy>
 80095d6:	2201      	movs	r2, #1
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fb20 	bl	8009c20 <__lshift>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	f103 0901 	add.w	r9, r3, #1
 80095e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095ea:	4413      	add	r3, r2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f00a 0301 	and.w	r3, sl, #1
 80095f2:	46b8      	mov	r8, r7
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	4607      	mov	r7, r0
 80095f8:	4631      	mov	r1, r6
 80095fa:	ee18 0a10 	vmov	r0, s16
 80095fe:	f7ff fa75 	bl	8008aec <quorem>
 8009602:	4641      	mov	r1, r8
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800960a:	ee18 0a10 	vmov	r0, s16
 800960e:	f000 fb77 	bl	8009d00 <__mcmp>
 8009612:	463a      	mov	r2, r7
 8009614:	9003      	str	r0, [sp, #12]
 8009616:	4631      	mov	r1, r6
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fb8d 	bl	8009d38 <__mdiff>
 800961e:	68c2      	ldr	r2, [r0, #12]
 8009620:	f109 3bff 	add.w	fp, r9, #4294967295
 8009624:	4605      	mov	r5, r0
 8009626:	bb02      	cbnz	r2, 800966a <_dtoa_r+0xa62>
 8009628:	4601      	mov	r1, r0
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	f000 fb67 	bl	8009d00 <__mcmp>
 8009632:	4602      	mov	r2, r0
 8009634:	4629      	mov	r1, r5
 8009636:	4620      	mov	r0, r4
 8009638:	9207      	str	r2, [sp, #28]
 800963a:	f000 f91f 	bl	800987c <_Bfree>
 800963e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	430b      	orrs	r3, r1
 800964a:	464d      	mov	r5, r9
 800964c:	d10f      	bne.n	800966e <_dtoa_r+0xa66>
 800964e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009652:	d02a      	beq.n	80096aa <_dtoa_r+0xaa2>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd02      	ble.n	8009660 <_dtoa_r+0xa58>
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009660:	f88b a000 	strb.w	sl, [fp]
 8009664:	e775      	b.n	8009552 <_dtoa_r+0x94a>
 8009666:	4638      	mov	r0, r7
 8009668:	e7ba      	b.n	80095e0 <_dtoa_r+0x9d8>
 800966a:	2201      	movs	r2, #1
 800966c:	e7e2      	b.n	8009634 <_dtoa_r+0xa2c>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db04      	blt.n	800967e <_dtoa_r+0xa76>
 8009674:	9906      	ldr	r1, [sp, #24]
 8009676:	430b      	orrs	r3, r1
 8009678:	9904      	ldr	r1, [sp, #16]
 800967a:	430b      	orrs	r3, r1
 800967c:	d122      	bne.n	80096c4 <_dtoa_r+0xabc>
 800967e:	2a00      	cmp	r2, #0
 8009680:	ddee      	ble.n	8009660 <_dtoa_r+0xa58>
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	2201      	movs	r2, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fac9 	bl	8009c20 <__lshift>
 800968e:	4631      	mov	r1, r6
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	f000 fb34 	bl	8009d00 <__mcmp>
 8009698:	2800      	cmp	r0, #0
 800969a:	dc03      	bgt.n	80096a4 <_dtoa_r+0xa9c>
 800969c:	d1e0      	bne.n	8009660 <_dtoa_r+0xa58>
 800969e:	f01a 0f01 	tst.w	sl, #1
 80096a2:	d0dd      	beq.n	8009660 <_dtoa_r+0xa58>
 80096a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a8:	d1d7      	bne.n	800965a <_dtoa_r+0xa52>
 80096aa:	2339      	movs	r3, #57	; 0x39
 80096ac:	f88b 3000 	strb.w	r3, [fp]
 80096b0:	462b      	mov	r3, r5
 80096b2:	461d      	mov	r5, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096ba:	2a39      	cmp	r2, #57	; 0x39
 80096bc:	d071      	beq.n	80097a2 <_dtoa_r+0xb9a>
 80096be:	3201      	adds	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e746      	b.n	8009552 <_dtoa_r+0x94a>
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	dd07      	ble.n	80096d8 <_dtoa_r+0xad0>
 80096c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096cc:	d0ed      	beq.n	80096aa <_dtoa_r+0xaa2>
 80096ce:	f10a 0301 	add.w	r3, sl, #1
 80096d2:	f88b 3000 	strb.w	r3, [fp]
 80096d6:	e73c      	b.n	8009552 <_dtoa_r+0x94a>
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096de:	4599      	cmp	r9, r3
 80096e0:	d047      	beq.n	8009772 <_dtoa_r+0xb6a>
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	2300      	movs	r3, #0
 80096e8:	220a      	movs	r2, #10
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f8e8 	bl	80098c0 <__multadd>
 80096f0:	45b8      	cmp	r8, r7
 80096f2:	ee08 0a10 	vmov	s16, r0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	f04f 020a 	mov.w	r2, #10
 80096fe:	4641      	mov	r1, r8
 8009700:	4620      	mov	r0, r4
 8009702:	d106      	bne.n	8009712 <_dtoa_r+0xb0a>
 8009704:	f000 f8dc 	bl	80098c0 <__multadd>
 8009708:	4680      	mov	r8, r0
 800970a:	4607      	mov	r7, r0
 800970c:	f109 0901 	add.w	r9, r9, #1
 8009710:	e772      	b.n	80095f8 <_dtoa_r+0x9f0>
 8009712:	f000 f8d5 	bl	80098c0 <__multadd>
 8009716:	4639      	mov	r1, r7
 8009718:	4680      	mov	r8, r0
 800971a:	2300      	movs	r3, #0
 800971c:	220a      	movs	r2, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f8ce 	bl	80098c0 <__multadd>
 8009724:	4607      	mov	r7, r0
 8009726:	e7f1      	b.n	800970c <_dtoa_r+0xb04>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	9d01      	ldr	r5, [sp, #4]
 800972e:	ee18 0a10 	vmov	r0, s16
 8009732:	4631      	mov	r1, r6
 8009734:	f7ff f9da 	bl	8008aec <quorem>
 8009738:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	f805 ab01 	strb.w	sl, [r5], #1
 8009742:	1aea      	subs	r2, r5, r3
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	4293      	cmp	r3, r2
 8009748:	dd09      	ble.n	800975e <_dtoa_r+0xb56>
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	2300      	movs	r3, #0
 8009750:	220a      	movs	r2, #10
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f8b4 	bl	80098c0 <__multadd>
 8009758:	ee08 0a10 	vmov	s16, r0
 800975c:	e7e7      	b.n	800972e <_dtoa_r+0xb26>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfc8      	it	gt
 8009764:	461d      	movgt	r5, r3
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	bfd8      	it	le
 800976a:	2501      	movle	r5, #1
 800976c:	441d      	add	r5, r3
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	2201      	movs	r2, #1
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fa51 	bl	8009c20 <__lshift>
 800977e:	4631      	mov	r1, r6
 8009780:	ee08 0a10 	vmov	s16, r0
 8009784:	f000 fabc 	bl	8009d00 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	dc91      	bgt.n	80096b0 <_dtoa_r+0xaa8>
 800978c:	d102      	bne.n	8009794 <_dtoa_r+0xb8c>
 800978e:	f01a 0f01 	tst.w	sl, #1
 8009792:	d18d      	bne.n	80096b0 <_dtoa_r+0xaa8>
 8009794:	462b      	mov	r3, r5
 8009796:	461d      	mov	r5, r3
 8009798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979c:	2a30      	cmp	r2, #48	; 0x30
 800979e:	d0fa      	beq.n	8009796 <_dtoa_r+0xb8e>
 80097a0:	e6d7      	b.n	8009552 <_dtoa_r+0x94a>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d184      	bne.n	80096b2 <_dtoa_r+0xaaa>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2331      	movs	r3, #49	; 0x31
 80097b0:	7013      	strb	r3, [r2, #0]
 80097b2:	e6ce      	b.n	8009552 <_dtoa_r+0x94a>
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <_dtoa_r+0xbd4>)
 80097b6:	f7ff ba95 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f aa6e 	bne.w	8008c9e <_dtoa_r+0x96>
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <_dtoa_r+0xbd8>)
 80097c4:	f7ff ba8e 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dcae      	bgt.n	800972c <_dtoa_r+0xb24>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f73f aea8 	bgt.w	8009526 <_dtoa_r+0x91e>
 80097d6:	e7a9      	b.n	800972c <_dtoa_r+0xb24>
 80097d8:	0800b4a7 	.word	0x0800b4a7
 80097dc:	0800b404 	.word	0x0800b404
 80097e0:	0800b428 	.word	0x0800b428

080097e4 <_localeconv_r>:
 80097e4:	4800      	ldr	r0, [pc, #0]	; (80097e8 <_localeconv_r+0x4>)
 80097e6:	4770      	bx	lr
 80097e8:	20000168 	.word	0x20000168

080097ec <malloc>:
 80097ec:	4b02      	ldr	r3, [pc, #8]	; (80097f8 <malloc+0xc>)
 80097ee:	4601      	mov	r1, r0
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	f000 bc09 	b.w	800a008 <_malloc_r>
 80097f6:	bf00      	nop
 80097f8:	20000014 	.word	0x20000014

080097fc <_Balloc>:
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009800:	4604      	mov	r4, r0
 8009802:	460d      	mov	r5, r1
 8009804:	b976      	cbnz	r6, 8009824 <_Balloc+0x28>
 8009806:	2010      	movs	r0, #16
 8009808:	f7ff fff0 	bl	80097ec <malloc>
 800980c:	4602      	mov	r2, r0
 800980e:	6260      	str	r0, [r4, #36]	; 0x24
 8009810:	b920      	cbnz	r0, 800981c <_Balloc+0x20>
 8009812:	4b18      	ldr	r3, [pc, #96]	; (8009874 <_Balloc+0x78>)
 8009814:	4818      	ldr	r0, [pc, #96]	; (8009878 <_Balloc+0x7c>)
 8009816:	2166      	movs	r1, #102	; 0x66
 8009818:	f000 fdd6 	bl	800a3c8 <__assert_func>
 800981c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009820:	6006      	str	r6, [r0, #0]
 8009822:	60c6      	str	r6, [r0, #12]
 8009824:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009826:	68f3      	ldr	r3, [r6, #12]
 8009828:	b183      	cbz	r3, 800984c <_Balloc+0x50>
 800982a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009832:	b9b8      	cbnz	r0, 8009864 <_Balloc+0x68>
 8009834:	2101      	movs	r1, #1
 8009836:	fa01 f605 	lsl.w	r6, r1, r5
 800983a:	1d72      	adds	r2, r6, #5
 800983c:	0092      	lsls	r2, r2, #2
 800983e:	4620      	mov	r0, r4
 8009840:	f000 fb60 	bl	8009f04 <_calloc_r>
 8009844:	b160      	cbz	r0, 8009860 <_Balloc+0x64>
 8009846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800984a:	e00e      	b.n	800986a <_Balloc+0x6e>
 800984c:	2221      	movs	r2, #33	; 0x21
 800984e:	2104      	movs	r1, #4
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fb57 	bl	8009f04 <_calloc_r>
 8009856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009858:	60f0      	str	r0, [r6, #12]
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e4      	bne.n	800982a <_Balloc+0x2e>
 8009860:	2000      	movs	r0, #0
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	6802      	ldr	r2, [r0, #0]
 8009866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800986a:	2300      	movs	r3, #0
 800986c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009870:	e7f7      	b.n	8009862 <_Balloc+0x66>
 8009872:	bf00      	nop
 8009874:	0800b435 	.word	0x0800b435
 8009878:	0800b4b8 	.word	0x0800b4b8

0800987c <_Bfree>:
 800987c:	b570      	push	{r4, r5, r6, lr}
 800987e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	b976      	cbnz	r6, 80098a4 <_Bfree+0x28>
 8009886:	2010      	movs	r0, #16
 8009888:	f7ff ffb0 	bl	80097ec <malloc>
 800988c:	4602      	mov	r2, r0
 800988e:	6268      	str	r0, [r5, #36]	; 0x24
 8009890:	b920      	cbnz	r0, 800989c <_Bfree+0x20>
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <_Bfree+0x3c>)
 8009894:	4809      	ldr	r0, [pc, #36]	; (80098bc <_Bfree+0x40>)
 8009896:	218a      	movs	r1, #138	; 0x8a
 8009898:	f000 fd96 	bl	800a3c8 <__assert_func>
 800989c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a0:	6006      	str	r6, [r0, #0]
 80098a2:	60c6      	str	r6, [r0, #12]
 80098a4:	b13c      	cbz	r4, 80098b6 <_Bfree+0x3a>
 80098a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098a8:	6862      	ldr	r2, [r4, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098b0:	6021      	str	r1, [r4, #0]
 80098b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	0800b435 	.word	0x0800b435
 80098bc:	0800b4b8 	.word	0x0800b4b8

080098c0 <__multadd>:
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	690d      	ldr	r5, [r1, #16]
 80098c6:	4607      	mov	r7, r0
 80098c8:	460c      	mov	r4, r1
 80098ca:	461e      	mov	r6, r3
 80098cc:	f101 0c14 	add.w	ip, r1, #20
 80098d0:	2000      	movs	r0, #0
 80098d2:	f8dc 3000 	ldr.w	r3, [ip]
 80098d6:	b299      	uxth	r1, r3
 80098d8:	fb02 6101 	mla	r1, r2, r1, r6
 80098dc:	0c1e      	lsrs	r6, r3, #16
 80098de:	0c0b      	lsrs	r3, r1, #16
 80098e0:	fb02 3306 	mla	r3, r2, r6, r3
 80098e4:	b289      	uxth	r1, r1
 80098e6:	3001      	adds	r0, #1
 80098e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098ec:	4285      	cmp	r5, r0
 80098ee:	f84c 1b04 	str.w	r1, [ip], #4
 80098f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098f6:	dcec      	bgt.n	80098d2 <__multadd+0x12>
 80098f8:	b30e      	cbz	r6, 800993e <__multadd+0x7e>
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	dc19      	bgt.n	8009934 <__multadd+0x74>
 8009900:	6861      	ldr	r1, [r4, #4]
 8009902:	4638      	mov	r0, r7
 8009904:	3101      	adds	r1, #1
 8009906:	f7ff ff79 	bl	80097fc <_Balloc>
 800990a:	4680      	mov	r8, r0
 800990c:	b928      	cbnz	r0, 800991a <__multadd+0x5a>
 800990e:	4602      	mov	r2, r0
 8009910:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <__multadd+0x84>)
 8009912:	480d      	ldr	r0, [pc, #52]	; (8009948 <__multadd+0x88>)
 8009914:	21b5      	movs	r1, #181	; 0xb5
 8009916:	f000 fd57 	bl	800a3c8 <__assert_func>
 800991a:	6922      	ldr	r2, [r4, #16]
 800991c:	3202      	adds	r2, #2
 800991e:	f104 010c 	add.w	r1, r4, #12
 8009922:	0092      	lsls	r2, r2, #2
 8009924:	300c      	adds	r0, #12
 8009926:	f7fe fc41 	bl	80081ac <memcpy>
 800992a:	4621      	mov	r1, r4
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ffa5 	bl	800987c <_Bfree>
 8009932:	4644      	mov	r4, r8
 8009934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009938:	3501      	adds	r5, #1
 800993a:	615e      	str	r6, [r3, #20]
 800993c:	6125      	str	r5, [r4, #16]
 800993e:	4620      	mov	r0, r4
 8009940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009944:	0800b4a7 	.word	0x0800b4a7
 8009948:	0800b4b8 	.word	0x0800b4b8

0800994c <__hi0bits>:
 800994c:	0c03      	lsrs	r3, r0, #16
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	b9d3      	cbnz	r3, 8009988 <__hi0bits+0x3c>
 8009952:	0400      	lsls	r0, r0, #16
 8009954:	2310      	movs	r3, #16
 8009956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800995a:	bf04      	itt	eq
 800995c:	0200      	lsleq	r0, r0, #8
 800995e:	3308      	addeq	r3, #8
 8009960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009964:	bf04      	itt	eq
 8009966:	0100      	lsleq	r0, r0, #4
 8009968:	3304      	addeq	r3, #4
 800996a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800996e:	bf04      	itt	eq
 8009970:	0080      	lsleq	r0, r0, #2
 8009972:	3302      	addeq	r3, #2
 8009974:	2800      	cmp	r0, #0
 8009976:	db05      	blt.n	8009984 <__hi0bits+0x38>
 8009978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800997c:	f103 0301 	add.w	r3, r3, #1
 8009980:	bf08      	it	eq
 8009982:	2320      	moveq	r3, #32
 8009984:	4618      	mov	r0, r3
 8009986:	4770      	bx	lr
 8009988:	2300      	movs	r3, #0
 800998a:	e7e4      	b.n	8009956 <__hi0bits+0xa>

0800998c <__lo0bits>:
 800998c:	6803      	ldr	r3, [r0, #0]
 800998e:	f013 0207 	ands.w	r2, r3, #7
 8009992:	4601      	mov	r1, r0
 8009994:	d00b      	beq.n	80099ae <__lo0bits+0x22>
 8009996:	07da      	lsls	r2, r3, #31
 8009998:	d423      	bmi.n	80099e2 <__lo0bits+0x56>
 800999a:	0798      	lsls	r0, r3, #30
 800999c:	bf49      	itett	mi
 800999e:	085b      	lsrmi	r3, r3, #1
 80099a0:	089b      	lsrpl	r3, r3, #2
 80099a2:	2001      	movmi	r0, #1
 80099a4:	600b      	strmi	r3, [r1, #0]
 80099a6:	bf5c      	itt	pl
 80099a8:	600b      	strpl	r3, [r1, #0]
 80099aa:	2002      	movpl	r0, #2
 80099ac:	4770      	bx	lr
 80099ae:	b298      	uxth	r0, r3
 80099b0:	b9a8      	cbnz	r0, 80099de <__lo0bits+0x52>
 80099b2:	0c1b      	lsrs	r3, r3, #16
 80099b4:	2010      	movs	r0, #16
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	b90a      	cbnz	r2, 80099be <__lo0bits+0x32>
 80099ba:	3008      	adds	r0, #8
 80099bc:	0a1b      	lsrs	r3, r3, #8
 80099be:	071a      	lsls	r2, r3, #28
 80099c0:	bf04      	itt	eq
 80099c2:	091b      	lsreq	r3, r3, #4
 80099c4:	3004      	addeq	r0, #4
 80099c6:	079a      	lsls	r2, r3, #30
 80099c8:	bf04      	itt	eq
 80099ca:	089b      	lsreq	r3, r3, #2
 80099cc:	3002      	addeq	r0, #2
 80099ce:	07da      	lsls	r2, r3, #31
 80099d0:	d403      	bmi.n	80099da <__lo0bits+0x4e>
 80099d2:	085b      	lsrs	r3, r3, #1
 80099d4:	f100 0001 	add.w	r0, r0, #1
 80099d8:	d005      	beq.n	80099e6 <__lo0bits+0x5a>
 80099da:	600b      	str	r3, [r1, #0]
 80099dc:	4770      	bx	lr
 80099de:	4610      	mov	r0, r2
 80099e0:	e7e9      	b.n	80099b6 <__lo0bits+0x2a>
 80099e2:	2000      	movs	r0, #0
 80099e4:	4770      	bx	lr
 80099e6:	2020      	movs	r0, #32
 80099e8:	4770      	bx	lr
	...

080099ec <__i2b>:
 80099ec:	b510      	push	{r4, lr}
 80099ee:	460c      	mov	r4, r1
 80099f0:	2101      	movs	r1, #1
 80099f2:	f7ff ff03 	bl	80097fc <_Balloc>
 80099f6:	4602      	mov	r2, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__i2b+0x1a>
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <__i2b+0x24>)
 80099fc:	4805      	ldr	r0, [pc, #20]	; (8009a14 <__i2b+0x28>)
 80099fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a02:	f000 fce1 	bl	800a3c8 <__assert_func>
 8009a06:	2301      	movs	r3, #1
 8009a08:	6144      	str	r4, [r0, #20]
 8009a0a:	6103      	str	r3, [r0, #16]
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop
 8009a10:	0800b4a7 	.word	0x0800b4a7
 8009a14:	0800b4b8 	.word	0x0800b4b8

08009a18 <__multiply>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4691      	mov	r9, r2
 8009a1e:	690a      	ldr	r2, [r1, #16]
 8009a20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	bfb8      	it	lt
 8009a28:	460b      	movlt	r3, r1
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	bfbc      	itt	lt
 8009a2e:	464c      	movlt	r4, r9
 8009a30:	4699      	movlt	r9, r3
 8009a32:	6927      	ldr	r7, [r4, #16]
 8009a34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a38:	68a3      	ldr	r3, [r4, #8]
 8009a3a:	6861      	ldr	r1, [r4, #4]
 8009a3c:	eb07 060a 	add.w	r6, r7, sl
 8009a40:	42b3      	cmp	r3, r6
 8009a42:	b085      	sub	sp, #20
 8009a44:	bfb8      	it	lt
 8009a46:	3101      	addlt	r1, #1
 8009a48:	f7ff fed8 	bl	80097fc <_Balloc>
 8009a4c:	b930      	cbnz	r0, 8009a5c <__multiply+0x44>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b44      	ldr	r3, [pc, #272]	; (8009b64 <__multiply+0x14c>)
 8009a52:	4845      	ldr	r0, [pc, #276]	; (8009b68 <__multiply+0x150>)
 8009a54:	f240 115d 	movw	r1, #349	; 0x15d
 8009a58:	f000 fcb6 	bl	800a3c8 <__assert_func>
 8009a5c:	f100 0514 	add.w	r5, r0, #20
 8009a60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a64:	462b      	mov	r3, r5
 8009a66:	2200      	movs	r2, #0
 8009a68:	4543      	cmp	r3, r8
 8009a6a:	d321      	bcc.n	8009ab0 <__multiply+0x98>
 8009a6c:	f104 0314 	add.w	r3, r4, #20
 8009a70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a74:	f109 0314 	add.w	r3, r9, #20
 8009a78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a7c:	9202      	str	r2, [sp, #8]
 8009a7e:	1b3a      	subs	r2, r7, r4
 8009a80:	3a15      	subs	r2, #21
 8009a82:	f022 0203 	bic.w	r2, r2, #3
 8009a86:	3204      	adds	r2, #4
 8009a88:	f104 0115 	add.w	r1, r4, #21
 8009a8c:	428f      	cmp	r7, r1
 8009a8e:	bf38      	it	cc
 8009a90:	2204      	movcc	r2, #4
 8009a92:	9201      	str	r2, [sp, #4]
 8009a94:	9a02      	ldr	r2, [sp, #8]
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d80c      	bhi.n	8009ab6 <__multiply+0x9e>
 8009a9c:	2e00      	cmp	r6, #0
 8009a9e:	dd03      	ble.n	8009aa8 <__multiply+0x90>
 8009aa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d05a      	beq.n	8009b5e <__multiply+0x146>
 8009aa8:	6106      	str	r6, [r0, #16]
 8009aaa:	b005      	add	sp, #20
 8009aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	f843 2b04 	str.w	r2, [r3], #4
 8009ab4:	e7d8      	b.n	8009a68 <__multiply+0x50>
 8009ab6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009aba:	f1ba 0f00 	cmp.w	sl, #0
 8009abe:	d024      	beq.n	8009b0a <__multiply+0xf2>
 8009ac0:	f104 0e14 	add.w	lr, r4, #20
 8009ac4:	46a9      	mov	r9, r5
 8009ac6:	f04f 0c00 	mov.w	ip, #0
 8009aca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ace:	f8d9 1000 	ldr.w	r1, [r9]
 8009ad2:	fa1f fb82 	uxth.w	fp, r2
 8009ad6:	b289      	uxth	r1, r1
 8009ad8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009adc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ae4:	4461      	add	r1, ip
 8009ae6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009aea:	fb0a c20b 	mla	r2, sl, fp, ip
 8009aee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009af2:	b289      	uxth	r1, r1
 8009af4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009af8:	4577      	cmp	r7, lr
 8009afa:	f849 1b04 	str.w	r1, [r9], #4
 8009afe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b02:	d8e2      	bhi.n	8009aca <__multiply+0xb2>
 8009b04:	9a01      	ldr	r2, [sp, #4]
 8009b06:	f845 c002 	str.w	ip, [r5, r2]
 8009b0a:	9a03      	ldr	r2, [sp, #12]
 8009b0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b10:	3304      	adds	r3, #4
 8009b12:	f1b9 0f00 	cmp.w	r9, #0
 8009b16:	d020      	beq.n	8009b5a <__multiply+0x142>
 8009b18:	6829      	ldr	r1, [r5, #0]
 8009b1a:	f104 0c14 	add.w	ip, r4, #20
 8009b1e:	46ae      	mov	lr, r5
 8009b20:	f04f 0a00 	mov.w	sl, #0
 8009b24:	f8bc b000 	ldrh.w	fp, [ip]
 8009b28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b2c:	fb09 220b 	mla	r2, r9, fp, r2
 8009b30:	4492      	add	sl, r2
 8009b32:	b289      	uxth	r1, r1
 8009b34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b38:	f84e 1b04 	str.w	r1, [lr], #4
 8009b3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b40:	f8be 1000 	ldrh.w	r1, [lr]
 8009b44:	0c12      	lsrs	r2, r2, #16
 8009b46:	fb09 1102 	mla	r1, r9, r2, r1
 8009b4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b4e:	4567      	cmp	r7, ip
 8009b50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b54:	d8e6      	bhi.n	8009b24 <__multiply+0x10c>
 8009b56:	9a01      	ldr	r2, [sp, #4]
 8009b58:	50a9      	str	r1, [r5, r2]
 8009b5a:	3504      	adds	r5, #4
 8009b5c:	e79a      	b.n	8009a94 <__multiply+0x7c>
 8009b5e:	3e01      	subs	r6, #1
 8009b60:	e79c      	b.n	8009a9c <__multiply+0x84>
 8009b62:	bf00      	nop
 8009b64:	0800b4a7 	.word	0x0800b4a7
 8009b68:	0800b4b8 	.word	0x0800b4b8

08009b6c <__pow5mult>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	4615      	mov	r5, r2
 8009b72:	f012 0203 	ands.w	r2, r2, #3
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	d007      	beq.n	8009b8c <__pow5mult+0x20>
 8009b7c:	4c25      	ldr	r4, [pc, #148]	; (8009c14 <__pow5mult+0xa8>)
 8009b7e:	3a01      	subs	r2, #1
 8009b80:	2300      	movs	r3, #0
 8009b82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b86:	f7ff fe9b 	bl	80098c0 <__multadd>
 8009b8a:	4607      	mov	r7, r0
 8009b8c:	10ad      	asrs	r5, r5, #2
 8009b8e:	d03d      	beq.n	8009c0c <__pow5mult+0xa0>
 8009b90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b92:	b97c      	cbnz	r4, 8009bb4 <__pow5mult+0x48>
 8009b94:	2010      	movs	r0, #16
 8009b96:	f7ff fe29 	bl	80097ec <malloc>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6270      	str	r0, [r6, #36]	; 0x24
 8009b9e:	b928      	cbnz	r0, 8009bac <__pow5mult+0x40>
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <__pow5mult+0xac>)
 8009ba2:	481e      	ldr	r0, [pc, #120]	; (8009c1c <__pow5mult+0xb0>)
 8009ba4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ba8:	f000 fc0e 	bl	800a3c8 <__assert_func>
 8009bac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bb0:	6004      	str	r4, [r0, #0]
 8009bb2:	60c4      	str	r4, [r0, #12]
 8009bb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bbc:	b94c      	cbnz	r4, 8009bd2 <__pow5mult+0x66>
 8009bbe:	f240 2171 	movw	r1, #625	; 0x271
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7ff ff12 	bl	80099ec <__i2b>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bce:	4604      	mov	r4, r0
 8009bd0:	6003      	str	r3, [r0, #0]
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	07eb      	lsls	r3, r5, #31
 8009bd8:	d50a      	bpl.n	8009bf0 <__pow5mult+0x84>
 8009bda:	4639      	mov	r1, r7
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7ff ff1a 	bl	8009a18 <__multiply>
 8009be4:	4639      	mov	r1, r7
 8009be6:	4680      	mov	r8, r0
 8009be8:	4630      	mov	r0, r6
 8009bea:	f7ff fe47 	bl	800987c <_Bfree>
 8009bee:	4647      	mov	r7, r8
 8009bf0:	106d      	asrs	r5, r5, #1
 8009bf2:	d00b      	beq.n	8009c0c <__pow5mult+0xa0>
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	b938      	cbnz	r0, 8009c08 <__pow5mult+0x9c>
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff ff0b 	bl	8009a18 <__multiply>
 8009c02:	6020      	str	r0, [r4, #0]
 8009c04:	f8c0 9000 	str.w	r9, [r0]
 8009c08:	4604      	mov	r4, r0
 8009c0a:	e7e4      	b.n	8009bd6 <__pow5mult+0x6a>
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c12:	bf00      	nop
 8009c14:	0800b608 	.word	0x0800b608
 8009c18:	0800b435 	.word	0x0800b435
 8009c1c:	0800b4b8 	.word	0x0800b4b8

08009c20 <__lshift>:
 8009c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c24:	460c      	mov	r4, r1
 8009c26:	6849      	ldr	r1, [r1, #4]
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c2e:	68a3      	ldr	r3, [r4, #8]
 8009c30:	4607      	mov	r7, r0
 8009c32:	4691      	mov	r9, r2
 8009c34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c38:	f108 0601 	add.w	r6, r8, #1
 8009c3c:	42b3      	cmp	r3, r6
 8009c3e:	db0b      	blt.n	8009c58 <__lshift+0x38>
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff fddb 	bl	80097fc <_Balloc>
 8009c46:	4605      	mov	r5, r0
 8009c48:	b948      	cbnz	r0, 8009c5e <__lshift+0x3e>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <__lshift+0xd8>)
 8009c4e:	482b      	ldr	r0, [pc, #172]	; (8009cfc <__lshift+0xdc>)
 8009c50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c54:	f000 fbb8 	bl	800a3c8 <__assert_func>
 8009c58:	3101      	adds	r1, #1
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	e7ee      	b.n	8009c3c <__lshift+0x1c>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	f100 0114 	add.w	r1, r0, #20
 8009c64:	f100 0210 	add.w	r2, r0, #16
 8009c68:	4618      	mov	r0, r3
 8009c6a:	4553      	cmp	r3, sl
 8009c6c:	db37      	blt.n	8009cde <__lshift+0xbe>
 8009c6e:	6920      	ldr	r0, [r4, #16]
 8009c70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c74:	f104 0314 	add.w	r3, r4, #20
 8009c78:	f019 091f 	ands.w	r9, r9, #31
 8009c7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c84:	d02f      	beq.n	8009ce6 <__lshift+0xc6>
 8009c86:	f1c9 0e20 	rsb	lr, r9, #32
 8009c8a:	468a      	mov	sl, r1
 8009c8c:	f04f 0c00 	mov.w	ip, #0
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	fa02 f209 	lsl.w	r2, r2, r9
 8009c96:	ea42 020c 	orr.w	r2, r2, ip
 8009c9a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca2:	4298      	cmp	r0, r3
 8009ca4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009ca8:	d8f2      	bhi.n	8009c90 <__lshift+0x70>
 8009caa:	1b03      	subs	r3, r0, r4
 8009cac:	3b15      	subs	r3, #21
 8009cae:	f023 0303 	bic.w	r3, r3, #3
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	f104 0215 	add.w	r2, r4, #21
 8009cb8:	4290      	cmp	r0, r2
 8009cba:	bf38      	it	cc
 8009cbc:	2304      	movcc	r3, #4
 8009cbe:	f841 c003 	str.w	ip, [r1, r3]
 8009cc2:	f1bc 0f00 	cmp.w	ip, #0
 8009cc6:	d001      	beq.n	8009ccc <__lshift+0xac>
 8009cc8:	f108 0602 	add.w	r6, r8, #2
 8009ccc:	3e01      	subs	r6, #1
 8009cce:	4638      	mov	r0, r7
 8009cd0:	612e      	str	r6, [r5, #16]
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	f7ff fdd2 	bl	800987c <_Bfree>
 8009cd8:	4628      	mov	r0, r5
 8009cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cde:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	e7c1      	b.n	8009c6a <__lshift+0x4a>
 8009ce6:	3904      	subs	r1, #4
 8009ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cec:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cf0:	4298      	cmp	r0, r3
 8009cf2:	d8f9      	bhi.n	8009ce8 <__lshift+0xc8>
 8009cf4:	e7ea      	b.n	8009ccc <__lshift+0xac>
 8009cf6:	bf00      	nop
 8009cf8:	0800b4a7 	.word	0x0800b4a7
 8009cfc:	0800b4b8 	.word	0x0800b4b8

08009d00 <__mcmp>:
 8009d00:	b530      	push	{r4, r5, lr}
 8009d02:	6902      	ldr	r2, [r0, #16]
 8009d04:	690c      	ldr	r4, [r1, #16]
 8009d06:	1b12      	subs	r2, r2, r4
 8009d08:	d10e      	bne.n	8009d28 <__mcmp+0x28>
 8009d0a:	f100 0314 	add.w	r3, r0, #20
 8009d0e:	3114      	adds	r1, #20
 8009d10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d20:	42a5      	cmp	r5, r4
 8009d22:	d003      	beq.n	8009d2c <__mcmp+0x2c>
 8009d24:	d305      	bcc.n	8009d32 <__mcmp+0x32>
 8009d26:	2201      	movs	r2, #1
 8009d28:	4610      	mov	r0, r2
 8009d2a:	bd30      	pop	{r4, r5, pc}
 8009d2c:	4283      	cmp	r3, r0
 8009d2e:	d3f3      	bcc.n	8009d18 <__mcmp+0x18>
 8009d30:	e7fa      	b.n	8009d28 <__mcmp+0x28>
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	e7f7      	b.n	8009d28 <__mcmp+0x28>

08009d38 <__mdiff>:
 8009d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	4606      	mov	r6, r0
 8009d40:	4611      	mov	r1, r2
 8009d42:	4620      	mov	r0, r4
 8009d44:	4690      	mov	r8, r2
 8009d46:	f7ff ffdb 	bl	8009d00 <__mcmp>
 8009d4a:	1e05      	subs	r5, r0, #0
 8009d4c:	d110      	bne.n	8009d70 <__mdiff+0x38>
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7ff fd53 	bl	80097fc <_Balloc>
 8009d56:	b930      	cbnz	r0, 8009d66 <__mdiff+0x2e>
 8009d58:	4b3a      	ldr	r3, [pc, #232]	; (8009e44 <__mdiff+0x10c>)
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	f240 2132 	movw	r1, #562	; 0x232
 8009d60:	4839      	ldr	r0, [pc, #228]	; (8009e48 <__mdiff+0x110>)
 8009d62:	f000 fb31 	bl	800a3c8 <__assert_func>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	bfa4      	itt	ge
 8009d72:	4643      	movge	r3, r8
 8009d74:	46a0      	movge	r8, r4
 8009d76:	4630      	mov	r0, r6
 8009d78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d7c:	bfa6      	itte	ge
 8009d7e:	461c      	movge	r4, r3
 8009d80:	2500      	movge	r5, #0
 8009d82:	2501      	movlt	r5, #1
 8009d84:	f7ff fd3a 	bl	80097fc <_Balloc>
 8009d88:	b920      	cbnz	r0, 8009d94 <__mdiff+0x5c>
 8009d8a:	4b2e      	ldr	r3, [pc, #184]	; (8009e44 <__mdiff+0x10c>)
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d92:	e7e5      	b.n	8009d60 <__mdiff+0x28>
 8009d94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009d98:	6926      	ldr	r6, [r4, #16]
 8009d9a:	60c5      	str	r5, [r0, #12]
 8009d9c:	f104 0914 	add.w	r9, r4, #20
 8009da0:	f108 0514 	add.w	r5, r8, #20
 8009da4:	f100 0e14 	add.w	lr, r0, #20
 8009da8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009dac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009db0:	f108 0210 	add.w	r2, r8, #16
 8009db4:	46f2      	mov	sl, lr
 8009db6:	2100      	movs	r1, #0
 8009db8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009dc0:	fa1f f883 	uxth.w	r8, r3
 8009dc4:	fa11 f18b 	uxtah	r1, r1, fp
 8009dc8:	0c1b      	lsrs	r3, r3, #16
 8009dca:	eba1 0808 	sub.w	r8, r1, r8
 8009dce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009dd6:	fa1f f888 	uxth.w	r8, r8
 8009dda:	1419      	asrs	r1, r3, #16
 8009ddc:	454e      	cmp	r6, r9
 8009dde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009de2:	f84a 3b04 	str.w	r3, [sl], #4
 8009de6:	d8e7      	bhi.n	8009db8 <__mdiff+0x80>
 8009de8:	1b33      	subs	r3, r6, r4
 8009dea:	3b15      	subs	r3, #21
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	3304      	adds	r3, #4
 8009df2:	3415      	adds	r4, #21
 8009df4:	42a6      	cmp	r6, r4
 8009df6:	bf38      	it	cc
 8009df8:	2304      	movcc	r3, #4
 8009dfa:	441d      	add	r5, r3
 8009dfc:	4473      	add	r3, lr
 8009dfe:	469e      	mov	lr, r3
 8009e00:	462e      	mov	r6, r5
 8009e02:	4566      	cmp	r6, ip
 8009e04:	d30e      	bcc.n	8009e24 <__mdiff+0xec>
 8009e06:	f10c 0203 	add.w	r2, ip, #3
 8009e0a:	1b52      	subs	r2, r2, r5
 8009e0c:	f022 0203 	bic.w	r2, r2, #3
 8009e10:	3d03      	subs	r5, #3
 8009e12:	45ac      	cmp	ip, r5
 8009e14:	bf38      	it	cc
 8009e16:	2200      	movcc	r2, #0
 8009e18:	441a      	add	r2, r3
 8009e1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e1e:	b17b      	cbz	r3, 8009e40 <__mdiff+0x108>
 8009e20:	6107      	str	r7, [r0, #16]
 8009e22:	e7a3      	b.n	8009d6c <__mdiff+0x34>
 8009e24:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e28:	fa11 f288 	uxtah	r2, r1, r8
 8009e2c:	1414      	asrs	r4, r2, #16
 8009e2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e32:	b292      	uxth	r2, r2
 8009e34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e38:	f84e 2b04 	str.w	r2, [lr], #4
 8009e3c:	1421      	asrs	r1, r4, #16
 8009e3e:	e7e0      	b.n	8009e02 <__mdiff+0xca>
 8009e40:	3f01      	subs	r7, #1
 8009e42:	e7ea      	b.n	8009e1a <__mdiff+0xe2>
 8009e44:	0800b4a7 	.word	0x0800b4a7
 8009e48:	0800b4b8 	.word	0x0800b4b8

08009e4c <__d2b>:
 8009e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e50:	4689      	mov	r9, r1
 8009e52:	2101      	movs	r1, #1
 8009e54:	ec57 6b10 	vmov	r6, r7, d0
 8009e58:	4690      	mov	r8, r2
 8009e5a:	f7ff fccf 	bl	80097fc <_Balloc>
 8009e5e:	4604      	mov	r4, r0
 8009e60:	b930      	cbnz	r0, 8009e70 <__d2b+0x24>
 8009e62:	4602      	mov	r2, r0
 8009e64:	4b25      	ldr	r3, [pc, #148]	; (8009efc <__d2b+0xb0>)
 8009e66:	4826      	ldr	r0, [pc, #152]	; (8009f00 <__d2b+0xb4>)
 8009e68:	f240 310a 	movw	r1, #778	; 0x30a
 8009e6c:	f000 faac 	bl	800a3c8 <__assert_func>
 8009e70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e78:	bb35      	cbnz	r5, 8009ec8 <__d2b+0x7c>
 8009e7a:	2e00      	cmp	r6, #0
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	d028      	beq.n	8009ed2 <__d2b+0x86>
 8009e80:	4668      	mov	r0, sp
 8009e82:	9600      	str	r6, [sp, #0]
 8009e84:	f7ff fd82 	bl	800998c <__lo0bits>
 8009e88:	9900      	ldr	r1, [sp, #0]
 8009e8a:	b300      	cbz	r0, 8009ece <__d2b+0x82>
 8009e8c:	9a01      	ldr	r2, [sp, #4]
 8009e8e:	f1c0 0320 	rsb	r3, r0, #32
 8009e92:	fa02 f303 	lsl.w	r3, r2, r3
 8009e96:	430b      	orrs	r3, r1
 8009e98:	40c2      	lsrs	r2, r0
 8009e9a:	6163      	str	r3, [r4, #20]
 8009e9c:	9201      	str	r2, [sp, #4]
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	61a3      	str	r3, [r4, #24]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bf14      	ite	ne
 8009ea6:	2202      	movne	r2, #2
 8009ea8:	2201      	moveq	r2, #1
 8009eaa:	6122      	str	r2, [r4, #16]
 8009eac:	b1d5      	cbz	r5, 8009ee4 <__d2b+0x98>
 8009eae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009eb2:	4405      	add	r5, r0
 8009eb4:	f8c9 5000 	str.w	r5, [r9]
 8009eb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ebc:	f8c8 0000 	str.w	r0, [r8]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	b003      	add	sp, #12
 8009ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ecc:	e7d5      	b.n	8009e7a <__d2b+0x2e>
 8009ece:	6161      	str	r1, [r4, #20]
 8009ed0:	e7e5      	b.n	8009e9e <__d2b+0x52>
 8009ed2:	a801      	add	r0, sp, #4
 8009ed4:	f7ff fd5a 	bl	800998c <__lo0bits>
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	6163      	str	r3, [r4, #20]
 8009edc:	2201      	movs	r2, #1
 8009ede:	6122      	str	r2, [r4, #16]
 8009ee0:	3020      	adds	r0, #32
 8009ee2:	e7e3      	b.n	8009eac <__d2b+0x60>
 8009ee4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ee8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eec:	f8c9 0000 	str.w	r0, [r9]
 8009ef0:	6918      	ldr	r0, [r3, #16]
 8009ef2:	f7ff fd2b 	bl	800994c <__hi0bits>
 8009ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009efa:	e7df      	b.n	8009ebc <__d2b+0x70>
 8009efc:	0800b4a7 	.word	0x0800b4a7
 8009f00:	0800b4b8 	.word	0x0800b4b8

08009f04 <_calloc_r>:
 8009f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f06:	fba1 2402 	umull	r2, r4, r1, r2
 8009f0a:	b94c      	cbnz	r4, 8009f20 <_calloc_r+0x1c>
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	9201      	str	r2, [sp, #4]
 8009f10:	f000 f87a 	bl	800a008 <_malloc_r>
 8009f14:	9a01      	ldr	r2, [sp, #4]
 8009f16:	4605      	mov	r5, r0
 8009f18:	b930      	cbnz	r0, 8009f28 <_calloc_r+0x24>
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	b003      	add	sp, #12
 8009f1e:	bd30      	pop	{r4, r5, pc}
 8009f20:	220c      	movs	r2, #12
 8009f22:	6002      	str	r2, [r0, #0]
 8009f24:	2500      	movs	r5, #0
 8009f26:	e7f8      	b.n	8009f1a <_calloc_r+0x16>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7fe f94d 	bl	80081c8 <memset>
 8009f2e:	e7f4      	b.n	8009f1a <_calloc_r+0x16>

08009f30 <_free_r>:
 8009f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f32:	2900      	cmp	r1, #0
 8009f34:	d044      	beq.n	8009fc0 <_free_r+0x90>
 8009f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f3a:	9001      	str	r0, [sp, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f42:	bfb8      	it	lt
 8009f44:	18e4      	addlt	r4, r4, r3
 8009f46:	f000 fa9b 	bl	800a480 <__malloc_lock>
 8009f4a:	4a1e      	ldr	r2, [pc, #120]	; (8009fc4 <_free_r+0x94>)
 8009f4c:	9801      	ldr	r0, [sp, #4]
 8009f4e:	6813      	ldr	r3, [r2, #0]
 8009f50:	b933      	cbnz	r3, 8009f60 <_free_r+0x30>
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	6014      	str	r4, [r2, #0]
 8009f56:	b003      	add	sp, #12
 8009f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f5c:	f000 ba96 	b.w	800a48c <__malloc_unlock>
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	d908      	bls.n	8009f76 <_free_r+0x46>
 8009f64:	6825      	ldr	r5, [r4, #0]
 8009f66:	1961      	adds	r1, r4, r5
 8009f68:	428b      	cmp	r3, r1
 8009f6a:	bf01      	itttt	eq
 8009f6c:	6819      	ldreq	r1, [r3, #0]
 8009f6e:	685b      	ldreq	r3, [r3, #4]
 8009f70:	1949      	addeq	r1, r1, r5
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	e7ed      	b.n	8009f52 <_free_r+0x22>
 8009f76:	461a      	mov	r2, r3
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	b10b      	cbz	r3, 8009f80 <_free_r+0x50>
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	d9fa      	bls.n	8009f76 <_free_r+0x46>
 8009f80:	6811      	ldr	r1, [r2, #0]
 8009f82:	1855      	adds	r5, r2, r1
 8009f84:	42a5      	cmp	r5, r4
 8009f86:	d10b      	bne.n	8009fa0 <_free_r+0x70>
 8009f88:	6824      	ldr	r4, [r4, #0]
 8009f8a:	4421      	add	r1, r4
 8009f8c:	1854      	adds	r4, r2, r1
 8009f8e:	42a3      	cmp	r3, r4
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	d1e0      	bne.n	8009f56 <_free_r+0x26>
 8009f94:	681c      	ldr	r4, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	6053      	str	r3, [r2, #4]
 8009f9a:	4421      	add	r1, r4
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	e7da      	b.n	8009f56 <_free_r+0x26>
 8009fa0:	d902      	bls.n	8009fa8 <_free_r+0x78>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	e7d6      	b.n	8009f56 <_free_r+0x26>
 8009fa8:	6825      	ldr	r5, [r4, #0]
 8009faa:	1961      	adds	r1, r4, r5
 8009fac:	428b      	cmp	r3, r1
 8009fae:	bf04      	itt	eq
 8009fb0:	6819      	ldreq	r1, [r3, #0]
 8009fb2:	685b      	ldreq	r3, [r3, #4]
 8009fb4:	6063      	str	r3, [r4, #4]
 8009fb6:	bf04      	itt	eq
 8009fb8:	1949      	addeq	r1, r1, r5
 8009fba:	6021      	streq	r1, [r4, #0]
 8009fbc:	6054      	str	r4, [r2, #4]
 8009fbe:	e7ca      	b.n	8009f56 <_free_r+0x26>
 8009fc0:	b003      	add	sp, #12
 8009fc2:	bd30      	pop	{r4, r5, pc}
 8009fc4:	20004e9c 	.word	0x20004e9c

08009fc8 <sbrk_aligned>:
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	4e0e      	ldr	r6, [pc, #56]	; (800a004 <sbrk_aligned+0x3c>)
 8009fcc:	460c      	mov	r4, r1
 8009fce:	6831      	ldr	r1, [r6, #0]
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	b911      	cbnz	r1, 8009fda <sbrk_aligned+0x12>
 8009fd4:	f000 f9e8 	bl	800a3a8 <_sbrk_r>
 8009fd8:	6030      	str	r0, [r6, #0]
 8009fda:	4621      	mov	r1, r4
 8009fdc:	4628      	mov	r0, r5
 8009fde:	f000 f9e3 	bl	800a3a8 <_sbrk_r>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d00a      	beq.n	8009ffc <sbrk_aligned+0x34>
 8009fe6:	1cc4      	adds	r4, r0, #3
 8009fe8:	f024 0403 	bic.w	r4, r4, #3
 8009fec:	42a0      	cmp	r0, r4
 8009fee:	d007      	beq.n	800a000 <sbrk_aligned+0x38>
 8009ff0:	1a21      	subs	r1, r4, r0
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f9d8 	bl	800a3a8 <_sbrk_r>
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d101      	bne.n	800a000 <sbrk_aligned+0x38>
 8009ffc:	f04f 34ff 	mov.w	r4, #4294967295
 800a000:	4620      	mov	r0, r4
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	20004ea0 	.word	0x20004ea0

0800a008 <_malloc_r>:
 800a008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00c:	1ccd      	adds	r5, r1, #3
 800a00e:	f025 0503 	bic.w	r5, r5, #3
 800a012:	3508      	adds	r5, #8
 800a014:	2d0c      	cmp	r5, #12
 800a016:	bf38      	it	cc
 800a018:	250c      	movcc	r5, #12
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	4607      	mov	r7, r0
 800a01e:	db01      	blt.n	800a024 <_malloc_r+0x1c>
 800a020:	42a9      	cmp	r1, r5
 800a022:	d905      	bls.n	800a030 <_malloc_r+0x28>
 800a024:	230c      	movs	r3, #12
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	2600      	movs	r6, #0
 800a02a:	4630      	mov	r0, r6
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	4e2e      	ldr	r6, [pc, #184]	; (800a0ec <_malloc_r+0xe4>)
 800a032:	f000 fa25 	bl	800a480 <__malloc_lock>
 800a036:	6833      	ldr	r3, [r6, #0]
 800a038:	461c      	mov	r4, r3
 800a03a:	bb34      	cbnz	r4, 800a08a <_malloc_r+0x82>
 800a03c:	4629      	mov	r1, r5
 800a03e:	4638      	mov	r0, r7
 800a040:	f7ff ffc2 	bl	8009fc8 <sbrk_aligned>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	4604      	mov	r4, r0
 800a048:	d14d      	bne.n	800a0e6 <_malloc_r+0xde>
 800a04a:	6834      	ldr	r4, [r6, #0]
 800a04c:	4626      	mov	r6, r4
 800a04e:	2e00      	cmp	r6, #0
 800a050:	d140      	bne.n	800a0d4 <_malloc_r+0xcc>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	4631      	mov	r1, r6
 800a056:	4638      	mov	r0, r7
 800a058:	eb04 0803 	add.w	r8, r4, r3
 800a05c:	f000 f9a4 	bl	800a3a8 <_sbrk_r>
 800a060:	4580      	cmp	r8, r0
 800a062:	d13a      	bne.n	800a0da <_malloc_r+0xd2>
 800a064:	6821      	ldr	r1, [r4, #0]
 800a066:	3503      	adds	r5, #3
 800a068:	1a6d      	subs	r5, r5, r1
 800a06a:	f025 0503 	bic.w	r5, r5, #3
 800a06e:	3508      	adds	r5, #8
 800a070:	2d0c      	cmp	r5, #12
 800a072:	bf38      	it	cc
 800a074:	250c      	movcc	r5, #12
 800a076:	4629      	mov	r1, r5
 800a078:	4638      	mov	r0, r7
 800a07a:	f7ff ffa5 	bl	8009fc8 <sbrk_aligned>
 800a07e:	3001      	adds	r0, #1
 800a080:	d02b      	beq.n	800a0da <_malloc_r+0xd2>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	442b      	add	r3, r5
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	e00e      	b.n	800a0a8 <_malloc_r+0xa0>
 800a08a:	6822      	ldr	r2, [r4, #0]
 800a08c:	1b52      	subs	r2, r2, r5
 800a08e:	d41e      	bmi.n	800a0ce <_malloc_r+0xc6>
 800a090:	2a0b      	cmp	r2, #11
 800a092:	d916      	bls.n	800a0c2 <_malloc_r+0xba>
 800a094:	1961      	adds	r1, r4, r5
 800a096:	42a3      	cmp	r3, r4
 800a098:	6025      	str	r5, [r4, #0]
 800a09a:	bf18      	it	ne
 800a09c:	6059      	strne	r1, [r3, #4]
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	bf08      	it	eq
 800a0a2:	6031      	streq	r1, [r6, #0]
 800a0a4:	5162      	str	r2, [r4, r5]
 800a0a6:	604b      	str	r3, [r1, #4]
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f104 060b 	add.w	r6, r4, #11
 800a0ae:	f000 f9ed 	bl	800a48c <__malloc_unlock>
 800a0b2:	f026 0607 	bic.w	r6, r6, #7
 800a0b6:	1d23      	adds	r3, r4, #4
 800a0b8:	1af2      	subs	r2, r6, r3
 800a0ba:	d0b6      	beq.n	800a02a <_malloc_r+0x22>
 800a0bc:	1b9b      	subs	r3, r3, r6
 800a0be:	50a3      	str	r3, [r4, r2]
 800a0c0:	e7b3      	b.n	800a02a <_malloc_r+0x22>
 800a0c2:	6862      	ldr	r2, [r4, #4]
 800a0c4:	42a3      	cmp	r3, r4
 800a0c6:	bf0c      	ite	eq
 800a0c8:	6032      	streq	r2, [r6, #0]
 800a0ca:	605a      	strne	r2, [r3, #4]
 800a0cc:	e7ec      	b.n	800a0a8 <_malloc_r+0xa0>
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	6864      	ldr	r4, [r4, #4]
 800a0d2:	e7b2      	b.n	800a03a <_malloc_r+0x32>
 800a0d4:	4634      	mov	r4, r6
 800a0d6:	6876      	ldr	r6, [r6, #4]
 800a0d8:	e7b9      	b.n	800a04e <_malloc_r+0x46>
 800a0da:	230c      	movs	r3, #12
 800a0dc:	603b      	str	r3, [r7, #0]
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f000 f9d4 	bl	800a48c <__malloc_unlock>
 800a0e4:	e7a1      	b.n	800a02a <_malloc_r+0x22>
 800a0e6:	6025      	str	r5, [r4, #0]
 800a0e8:	e7de      	b.n	800a0a8 <_malloc_r+0xa0>
 800a0ea:	bf00      	nop
 800a0ec:	20004e9c 	.word	0x20004e9c

0800a0f0 <__ssputs_r>:
 800a0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	688e      	ldr	r6, [r1, #8]
 800a0f6:	429e      	cmp	r6, r3
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	4690      	mov	r8, r2
 800a0fe:	461f      	mov	r7, r3
 800a100:	d838      	bhi.n	800a174 <__ssputs_r+0x84>
 800a102:	898a      	ldrh	r2, [r1, #12]
 800a104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a108:	d032      	beq.n	800a170 <__ssputs_r+0x80>
 800a10a:	6825      	ldr	r5, [r4, #0]
 800a10c:	6909      	ldr	r1, [r1, #16]
 800a10e:	eba5 0901 	sub.w	r9, r5, r1
 800a112:	6965      	ldr	r5, [r4, #20]
 800a114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a11c:	3301      	adds	r3, #1
 800a11e:	444b      	add	r3, r9
 800a120:	106d      	asrs	r5, r5, #1
 800a122:	429d      	cmp	r5, r3
 800a124:	bf38      	it	cc
 800a126:	461d      	movcc	r5, r3
 800a128:	0553      	lsls	r3, r2, #21
 800a12a:	d531      	bpl.n	800a190 <__ssputs_r+0xa0>
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7ff ff6b 	bl	800a008 <_malloc_r>
 800a132:	4606      	mov	r6, r0
 800a134:	b950      	cbnz	r0, 800a14c <__ssputs_r+0x5c>
 800a136:	230c      	movs	r3, #12
 800a138:	f8ca 3000 	str.w	r3, [sl]
 800a13c:	89a3      	ldrh	r3, [r4, #12]
 800a13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a142:	81a3      	strh	r3, [r4, #12]
 800a144:	f04f 30ff 	mov.w	r0, #4294967295
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	6921      	ldr	r1, [r4, #16]
 800a14e:	464a      	mov	r2, r9
 800a150:	f7fe f82c 	bl	80081ac <memcpy>
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	6126      	str	r6, [r4, #16]
 800a162:	6165      	str	r5, [r4, #20]
 800a164:	444e      	add	r6, r9
 800a166:	eba5 0509 	sub.w	r5, r5, r9
 800a16a:	6026      	str	r6, [r4, #0]
 800a16c:	60a5      	str	r5, [r4, #8]
 800a16e:	463e      	mov	r6, r7
 800a170:	42be      	cmp	r6, r7
 800a172:	d900      	bls.n	800a176 <__ssputs_r+0x86>
 800a174:	463e      	mov	r6, r7
 800a176:	6820      	ldr	r0, [r4, #0]
 800a178:	4632      	mov	r2, r6
 800a17a:	4641      	mov	r1, r8
 800a17c:	f000 f966 	bl	800a44c <memmove>
 800a180:	68a3      	ldr	r3, [r4, #8]
 800a182:	1b9b      	subs	r3, r3, r6
 800a184:	60a3      	str	r3, [r4, #8]
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	4433      	add	r3, r6
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	2000      	movs	r0, #0
 800a18e:	e7db      	b.n	800a148 <__ssputs_r+0x58>
 800a190:	462a      	mov	r2, r5
 800a192:	f000 f981 	bl	800a498 <_realloc_r>
 800a196:	4606      	mov	r6, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d1e1      	bne.n	800a160 <__ssputs_r+0x70>
 800a19c:	6921      	ldr	r1, [r4, #16]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f7ff fec6 	bl	8009f30 <_free_r>
 800a1a4:	e7c7      	b.n	800a136 <__ssputs_r+0x46>
	...

0800a1a8 <_svfiprintf_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	4698      	mov	r8, r3
 800a1ae:	898b      	ldrh	r3, [r1, #12]
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	b09d      	sub	sp, #116	; 0x74
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	d50e      	bpl.n	800a1da <_svfiprintf_r+0x32>
 800a1bc:	690b      	ldr	r3, [r1, #16]
 800a1be:	b963      	cbnz	r3, 800a1da <_svfiprintf_r+0x32>
 800a1c0:	2140      	movs	r1, #64	; 0x40
 800a1c2:	f7ff ff21 	bl	800a008 <_malloc_r>
 800a1c6:	6028      	str	r0, [r5, #0]
 800a1c8:	6128      	str	r0, [r5, #16]
 800a1ca:	b920      	cbnz	r0, 800a1d6 <_svfiprintf_r+0x2e>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	e0d1      	b.n	800a37a <_svfiprintf_r+0x1d2>
 800a1d6:	2340      	movs	r3, #64	; 0x40
 800a1d8:	616b      	str	r3, [r5, #20]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	2320      	movs	r3, #32
 800a1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e8:	2330      	movs	r3, #48	; 0x30
 800a1ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a394 <_svfiprintf_r+0x1ec>
 800a1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f2:	f04f 0901 	mov.w	r9, #1
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fe:	b10a      	cbz	r2, 800a204 <_svfiprintf_r+0x5c>
 800a200:	2a25      	cmp	r2, #37	; 0x25
 800a202:	d1f9      	bne.n	800a1f8 <_svfiprintf_r+0x50>
 800a204:	ebba 0b04 	subs.w	fp, sl, r4
 800a208:	d00b      	beq.n	800a222 <_svfiprintf_r+0x7a>
 800a20a:	465b      	mov	r3, fp
 800a20c:	4622      	mov	r2, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ff6d 	bl	800a0f0 <__ssputs_r>
 800a216:	3001      	adds	r0, #1
 800a218:	f000 80aa 	beq.w	800a370 <_svfiprintf_r+0x1c8>
 800a21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a21e:	445a      	add	r2, fp
 800a220:	9209      	str	r2, [sp, #36]	; 0x24
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80a2 	beq.w	800a370 <_svfiprintf_r+0x1c8>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a236:	f10a 0a01 	add.w	sl, sl, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a242:	931a      	str	r3, [sp, #104]	; 0x68
 800a244:	4654      	mov	r4, sl
 800a246:	2205      	movs	r2, #5
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	4851      	ldr	r0, [pc, #324]	; (800a394 <_svfiprintf_r+0x1ec>)
 800a24e:	f7f5 ffe7 	bl	8000220 <memchr>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	b9d8      	cbnz	r0, 800a28e <_svfiprintf_r+0xe6>
 800a256:	06d0      	lsls	r0, r2, #27
 800a258:	bf44      	itt	mi
 800a25a:	2320      	movmi	r3, #32
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a260:	0711      	lsls	r1, r2, #28
 800a262:	bf44      	itt	mi
 800a264:	232b      	movmi	r3, #43	; 0x2b
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26a:	f89a 3000 	ldrb.w	r3, [sl]
 800a26e:	2b2a      	cmp	r3, #42	; 0x2a
 800a270:	d015      	beq.n	800a29e <_svfiprintf_r+0xf6>
 800a272:	9a07      	ldr	r2, [sp, #28]
 800a274:	4654      	mov	r4, sl
 800a276:	2000      	movs	r0, #0
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4621      	mov	r1, r4
 800a27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a282:	3b30      	subs	r3, #48	; 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d94e      	bls.n	800a326 <_svfiprintf_r+0x17e>
 800a288:	b1b0      	cbz	r0, 800a2b8 <_svfiprintf_r+0x110>
 800a28a:	9207      	str	r2, [sp, #28]
 800a28c:	e014      	b.n	800a2b8 <_svfiprintf_r+0x110>
 800a28e:	eba0 0308 	sub.w	r3, r0, r8
 800a292:	fa09 f303 	lsl.w	r3, r9, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	46a2      	mov	sl, r4
 800a29c:	e7d2      	b.n	800a244 <_svfiprintf_r+0x9c>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	1d19      	adds	r1, r3, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	9103      	str	r1, [sp, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfbb      	ittet	lt
 800a2aa:	425b      	neglt	r3, r3
 800a2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b0:	9307      	strge	r3, [sp, #28]
 800a2b2:	9307      	strlt	r3, [sp, #28]
 800a2b4:	bfb8      	it	lt
 800a2b6:	9204      	strlt	r2, [sp, #16]
 800a2b8:	7823      	ldrb	r3, [r4, #0]
 800a2ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a2bc:	d10c      	bne.n	800a2d8 <_svfiprintf_r+0x130>
 800a2be:	7863      	ldrb	r3, [r4, #1]
 800a2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c2:	d135      	bne.n	800a330 <_svfiprintf_r+0x188>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	9203      	str	r2, [sp, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb8      	it	lt
 800a2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2d4:	3402      	adds	r4, #2
 800a2d6:	9305      	str	r3, [sp, #20]
 800a2d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3a4 <_svfiprintf_r+0x1fc>
 800a2dc:	7821      	ldrb	r1, [r4, #0]
 800a2de:	2203      	movs	r2, #3
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7f5 ff9d 	bl	8000220 <memchr>
 800a2e6:	b140      	cbz	r0, 800a2fa <_svfiprintf_r+0x152>
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	eba0 000a 	sub.w	r0, r0, sl
 800a2ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a2f2:	9b04      	ldr	r3, [sp, #16]
 800a2f4:	4303      	orrs	r3, r0
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fe:	4826      	ldr	r0, [pc, #152]	; (800a398 <_svfiprintf_r+0x1f0>)
 800a300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a304:	2206      	movs	r2, #6
 800a306:	f7f5 ff8b 	bl	8000220 <memchr>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d038      	beq.n	800a380 <_svfiprintf_r+0x1d8>
 800a30e:	4b23      	ldr	r3, [pc, #140]	; (800a39c <_svfiprintf_r+0x1f4>)
 800a310:	bb1b      	cbnz	r3, 800a35a <_svfiprintf_r+0x1b2>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	3307      	adds	r3, #7
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	3308      	adds	r3, #8
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a320:	4433      	add	r3, r6
 800a322:	9309      	str	r3, [sp, #36]	; 0x24
 800a324:	e767      	b.n	800a1f6 <_svfiprintf_r+0x4e>
 800a326:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32a:	460c      	mov	r4, r1
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7a5      	b.n	800a27c <_svfiprintf_r+0xd4>
 800a330:	2300      	movs	r3, #0
 800a332:	3401      	adds	r4, #1
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	4619      	mov	r1, r3
 800a338:	f04f 0c0a 	mov.w	ip, #10
 800a33c:	4620      	mov	r0, r4
 800a33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a342:	3a30      	subs	r2, #48	; 0x30
 800a344:	2a09      	cmp	r2, #9
 800a346:	d903      	bls.n	800a350 <_svfiprintf_r+0x1a8>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0c5      	beq.n	800a2d8 <_svfiprintf_r+0x130>
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	e7c3      	b.n	800a2d8 <_svfiprintf_r+0x130>
 800a350:	fb0c 2101 	mla	r1, ip, r1, r2
 800a354:	4604      	mov	r4, r0
 800a356:	2301      	movs	r3, #1
 800a358:	e7f0      	b.n	800a33c <_svfiprintf_r+0x194>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <_svfiprintf_r+0x1f8>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4638      	mov	r0, r7
 800a366:	f7fd ffd7 	bl	8008318 <_printf_float>
 800a36a:	1c42      	adds	r2, r0, #1
 800a36c:	4606      	mov	r6, r0
 800a36e:	d1d6      	bne.n	800a31e <_svfiprintf_r+0x176>
 800a370:	89ab      	ldrh	r3, [r5, #12]
 800a372:	065b      	lsls	r3, r3, #25
 800a374:	f53f af2c 	bmi.w	800a1d0 <_svfiprintf_r+0x28>
 800a378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37a:	b01d      	add	sp, #116	; 0x74
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	ab03      	add	r3, sp, #12
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	462a      	mov	r2, r5
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <_svfiprintf_r+0x1f8>)
 800a388:	a904      	add	r1, sp, #16
 800a38a:	4638      	mov	r0, r7
 800a38c:	f7fe fa68 	bl	8008860 <_printf_i>
 800a390:	e7eb      	b.n	800a36a <_svfiprintf_r+0x1c2>
 800a392:	bf00      	nop
 800a394:	0800b614 	.word	0x0800b614
 800a398:	0800b61e 	.word	0x0800b61e
 800a39c:	08008319 	.word	0x08008319
 800a3a0:	0800a0f1 	.word	0x0800a0f1
 800a3a4:	0800b61a 	.word	0x0800b61a

0800a3a8 <_sbrk_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d06      	ldr	r5, [pc, #24]	; (800a3c4 <_sbrk_r+0x1c>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	f7f7 ff0c 	bl	80021d0 <_sbrk>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_sbrk_r+0x1a>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_sbrk_r+0x1a>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20004ea4 	.word	0x20004ea4

0800a3c8 <__assert_func>:
 800a3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3ca:	4614      	mov	r4, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <__assert_func+0x2c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4605      	mov	r5, r0
 800a3d4:	68d8      	ldr	r0, [r3, #12]
 800a3d6:	b14c      	cbz	r4, 800a3ec <__assert_func+0x24>
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <__assert_func+0x30>)
 800a3da:	9100      	str	r1, [sp, #0]
 800a3dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e0:	4906      	ldr	r1, [pc, #24]	; (800a3fc <__assert_func+0x34>)
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	f000 f80e 	bl	800a404 <fiprintf>
 800a3e8:	f000 faac 	bl	800a944 <abort>
 800a3ec:	4b04      	ldr	r3, [pc, #16]	; (800a400 <__assert_func+0x38>)
 800a3ee:	461c      	mov	r4, r3
 800a3f0:	e7f3      	b.n	800a3da <__assert_func+0x12>
 800a3f2:	bf00      	nop
 800a3f4:	20000014 	.word	0x20000014
 800a3f8:	0800b625 	.word	0x0800b625
 800a3fc:	0800b632 	.word	0x0800b632
 800a400:	0800b660 	.word	0x0800b660

0800a404 <fiprintf>:
 800a404:	b40e      	push	{r1, r2, r3}
 800a406:	b503      	push	{r0, r1, lr}
 800a408:	4601      	mov	r1, r0
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	4805      	ldr	r0, [pc, #20]	; (800a424 <fiprintf+0x20>)
 800a40e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a412:	6800      	ldr	r0, [r0, #0]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	f000 f897 	bl	800a548 <_vfiprintf_r>
 800a41a:	b002      	add	sp, #8
 800a41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a420:	b003      	add	sp, #12
 800a422:	4770      	bx	lr
 800a424:	20000014 	.word	0x20000014

0800a428 <__ascii_mbtowc>:
 800a428:	b082      	sub	sp, #8
 800a42a:	b901      	cbnz	r1, 800a42e <__ascii_mbtowc+0x6>
 800a42c:	a901      	add	r1, sp, #4
 800a42e:	b142      	cbz	r2, 800a442 <__ascii_mbtowc+0x1a>
 800a430:	b14b      	cbz	r3, 800a446 <__ascii_mbtowc+0x1e>
 800a432:	7813      	ldrb	r3, [r2, #0]
 800a434:	600b      	str	r3, [r1, #0]
 800a436:	7812      	ldrb	r2, [r2, #0]
 800a438:	1e10      	subs	r0, r2, #0
 800a43a:	bf18      	it	ne
 800a43c:	2001      	movne	r0, #1
 800a43e:	b002      	add	sp, #8
 800a440:	4770      	bx	lr
 800a442:	4610      	mov	r0, r2
 800a444:	e7fb      	b.n	800a43e <__ascii_mbtowc+0x16>
 800a446:	f06f 0001 	mvn.w	r0, #1
 800a44a:	e7f8      	b.n	800a43e <__ascii_mbtowc+0x16>

0800a44c <memmove>:
 800a44c:	4288      	cmp	r0, r1
 800a44e:	b510      	push	{r4, lr}
 800a450:	eb01 0402 	add.w	r4, r1, r2
 800a454:	d902      	bls.n	800a45c <memmove+0x10>
 800a456:	4284      	cmp	r4, r0
 800a458:	4623      	mov	r3, r4
 800a45a:	d807      	bhi.n	800a46c <memmove+0x20>
 800a45c:	1e43      	subs	r3, r0, #1
 800a45e:	42a1      	cmp	r1, r4
 800a460:	d008      	beq.n	800a474 <memmove+0x28>
 800a462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a46a:	e7f8      	b.n	800a45e <memmove+0x12>
 800a46c:	4402      	add	r2, r0
 800a46e:	4601      	mov	r1, r0
 800a470:	428a      	cmp	r2, r1
 800a472:	d100      	bne.n	800a476 <memmove+0x2a>
 800a474:	bd10      	pop	{r4, pc}
 800a476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a47e:	e7f7      	b.n	800a470 <memmove+0x24>

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__malloc_lock+0x8>)
 800a482:	f000 bc1f 	b.w	800acc4 <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	20004ea8 	.word	0x20004ea8

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__malloc_unlock+0x8>)
 800a48e:	f000 bc1a 	b.w	800acc6 <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	20004ea8 	.word	0x20004ea8

0800a498 <_realloc_r>:
 800a498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49c:	4680      	mov	r8, r0
 800a49e:	4614      	mov	r4, r2
 800a4a0:	460e      	mov	r6, r1
 800a4a2:	b921      	cbnz	r1, 800a4ae <_realloc_r+0x16>
 800a4a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	f7ff bdad 	b.w	800a008 <_malloc_r>
 800a4ae:	b92a      	cbnz	r2, 800a4bc <_realloc_r+0x24>
 800a4b0:	f7ff fd3e 	bl	8009f30 <_free_r>
 800a4b4:	4625      	mov	r5, r4
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4bc:	f000 fc6a 	bl	800ad94 <_malloc_usable_size_r>
 800a4c0:	4284      	cmp	r4, r0
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	d802      	bhi.n	800a4cc <_realloc_r+0x34>
 800a4c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ca:	d812      	bhi.n	800a4f2 <_realloc_r+0x5a>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f7ff fd9a 	bl	800a008 <_malloc_r>
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d0ed      	beq.n	800a4b6 <_realloc_r+0x1e>
 800a4da:	42bc      	cmp	r4, r7
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4631      	mov	r1, r6
 800a4e0:	bf28      	it	cs
 800a4e2:	463a      	movcs	r2, r7
 800a4e4:	f7fd fe62 	bl	80081ac <memcpy>
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	f7ff fd20 	bl	8009f30 <_free_r>
 800a4f0:	e7e1      	b.n	800a4b6 <_realloc_r+0x1e>
 800a4f2:	4635      	mov	r5, r6
 800a4f4:	e7df      	b.n	800a4b6 <_realloc_r+0x1e>

0800a4f6 <__sfputc_r>:
 800a4f6:	6893      	ldr	r3, [r2, #8]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	b410      	push	{r4}
 800a4fe:	6093      	str	r3, [r2, #8]
 800a500:	da08      	bge.n	800a514 <__sfputc_r+0x1e>
 800a502:	6994      	ldr	r4, [r2, #24]
 800a504:	42a3      	cmp	r3, r4
 800a506:	db01      	blt.n	800a50c <__sfputc_r+0x16>
 800a508:	290a      	cmp	r1, #10
 800a50a:	d103      	bne.n	800a514 <__sfputc_r+0x1e>
 800a50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a510:	f000 b94a 	b.w	800a7a8 <__swbuf_r>
 800a514:	6813      	ldr	r3, [r2, #0]
 800a516:	1c58      	adds	r0, r3, #1
 800a518:	6010      	str	r0, [r2, #0]
 800a51a:	7019      	strb	r1, [r3, #0]
 800a51c:	4608      	mov	r0, r1
 800a51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <__sfputs_r>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	4614      	mov	r4, r2
 800a52c:	18d5      	adds	r5, r2, r3
 800a52e:	42ac      	cmp	r4, r5
 800a530:	d101      	bne.n	800a536 <__sfputs_r+0x12>
 800a532:	2000      	movs	r0, #0
 800a534:	e007      	b.n	800a546 <__sfputs_r+0x22>
 800a536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53a:	463a      	mov	r2, r7
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff ffda 	bl	800a4f6 <__sfputc_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d1f3      	bne.n	800a52e <__sfputs_r+0xa>
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a548 <_vfiprintf_r>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	460d      	mov	r5, r1
 800a54e:	b09d      	sub	sp, #116	; 0x74
 800a550:	4614      	mov	r4, r2
 800a552:	4698      	mov	r8, r3
 800a554:	4606      	mov	r6, r0
 800a556:	b118      	cbz	r0, 800a560 <_vfiprintf_r+0x18>
 800a558:	6983      	ldr	r3, [r0, #24]
 800a55a:	b90b      	cbnz	r3, 800a560 <_vfiprintf_r+0x18>
 800a55c:	f000 fb14 	bl	800ab88 <__sinit>
 800a560:	4b89      	ldr	r3, [pc, #548]	; (800a788 <_vfiprintf_r+0x240>)
 800a562:	429d      	cmp	r5, r3
 800a564:	d11b      	bne.n	800a59e <_vfiprintf_r+0x56>
 800a566:	6875      	ldr	r5, [r6, #4]
 800a568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56a:	07d9      	lsls	r1, r3, #31
 800a56c:	d405      	bmi.n	800a57a <_vfiprintf_r+0x32>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d402      	bmi.n	800a57a <_vfiprintf_r+0x32>
 800a574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a576:	f000 fba5 	bl	800acc4 <__retarget_lock_acquire_recursive>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	071b      	lsls	r3, r3, #28
 800a57e:	d501      	bpl.n	800a584 <_vfiprintf_r+0x3c>
 800a580:	692b      	ldr	r3, [r5, #16]
 800a582:	b9eb      	cbnz	r3, 800a5c0 <_vfiprintf_r+0x78>
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f000 f96e 	bl	800a868 <__swsetup_r>
 800a58c:	b1c0      	cbz	r0, 800a5c0 <_vfiprintf_r+0x78>
 800a58e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a590:	07dc      	lsls	r4, r3, #31
 800a592:	d50e      	bpl.n	800a5b2 <_vfiprintf_r+0x6a>
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	b01d      	add	sp, #116	; 0x74
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	4b7b      	ldr	r3, [pc, #492]	; (800a78c <_vfiprintf_r+0x244>)
 800a5a0:	429d      	cmp	r5, r3
 800a5a2:	d101      	bne.n	800a5a8 <_vfiprintf_r+0x60>
 800a5a4:	68b5      	ldr	r5, [r6, #8]
 800a5a6:	e7df      	b.n	800a568 <_vfiprintf_r+0x20>
 800a5a8:	4b79      	ldr	r3, [pc, #484]	; (800a790 <_vfiprintf_r+0x248>)
 800a5aa:	429d      	cmp	r5, r3
 800a5ac:	bf08      	it	eq
 800a5ae:	68f5      	ldreq	r5, [r6, #12]
 800a5b0:	e7da      	b.n	800a568 <_vfiprintf_r+0x20>
 800a5b2:	89ab      	ldrh	r3, [r5, #12]
 800a5b4:	0598      	lsls	r0, r3, #22
 800a5b6:	d4ed      	bmi.n	800a594 <_vfiprintf_r+0x4c>
 800a5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ba:	f000 fb84 	bl	800acc6 <__retarget_lock_release_recursive>
 800a5be:	e7e9      	b.n	800a594 <_vfiprintf_r+0x4c>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c4:	2320      	movs	r3, #32
 800a5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ce:	2330      	movs	r3, #48	; 0x30
 800a5d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a794 <_vfiprintf_r+0x24c>
 800a5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d8:	f04f 0901 	mov.w	r9, #1
 800a5dc:	4623      	mov	r3, r4
 800a5de:	469a      	mov	sl, r3
 800a5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_vfiprintf_r+0xa2>
 800a5e6:	2a25      	cmp	r2, #37	; 0x25
 800a5e8:	d1f9      	bne.n	800a5de <_vfiprintf_r+0x96>
 800a5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ee:	d00b      	beq.n	800a608 <_vfiprintf_r+0xc0>
 800a5f0:	465b      	mov	r3, fp
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff94 	bl	800a524 <__sfputs_r>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f000 80aa 	beq.w	800a756 <_vfiprintf_r+0x20e>
 800a602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a604:	445a      	add	r2, fp
 800a606:	9209      	str	r2, [sp, #36]	; 0x24
 800a608:	f89a 3000 	ldrb.w	r3, [sl]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80a2 	beq.w	800a756 <_vfiprintf_r+0x20e>
 800a612:	2300      	movs	r3, #0
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61c:	f10a 0a01 	add.w	sl, sl, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a628:	931a      	str	r3, [sp, #104]	; 0x68
 800a62a:	4654      	mov	r4, sl
 800a62c:	2205      	movs	r2, #5
 800a62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a632:	4858      	ldr	r0, [pc, #352]	; (800a794 <_vfiprintf_r+0x24c>)
 800a634:	f7f5 fdf4 	bl	8000220 <memchr>
 800a638:	9a04      	ldr	r2, [sp, #16]
 800a63a:	b9d8      	cbnz	r0, 800a674 <_vfiprintf_r+0x12c>
 800a63c:	06d1      	lsls	r1, r2, #27
 800a63e:	bf44      	itt	mi
 800a640:	2320      	movmi	r3, #32
 800a642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a646:	0713      	lsls	r3, r2, #28
 800a648:	bf44      	itt	mi
 800a64a:	232b      	movmi	r3, #43	; 0x2b
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a650:	f89a 3000 	ldrb.w	r3, [sl]
 800a654:	2b2a      	cmp	r3, #42	; 0x2a
 800a656:	d015      	beq.n	800a684 <_vfiprintf_r+0x13c>
 800a658:	9a07      	ldr	r2, [sp, #28]
 800a65a:	4654      	mov	r4, sl
 800a65c:	2000      	movs	r0, #0
 800a65e:	f04f 0c0a 	mov.w	ip, #10
 800a662:	4621      	mov	r1, r4
 800a664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a668:	3b30      	subs	r3, #48	; 0x30
 800a66a:	2b09      	cmp	r3, #9
 800a66c:	d94e      	bls.n	800a70c <_vfiprintf_r+0x1c4>
 800a66e:	b1b0      	cbz	r0, 800a69e <_vfiprintf_r+0x156>
 800a670:	9207      	str	r2, [sp, #28]
 800a672:	e014      	b.n	800a69e <_vfiprintf_r+0x156>
 800a674:	eba0 0308 	sub.w	r3, r0, r8
 800a678:	fa09 f303 	lsl.w	r3, r9, r3
 800a67c:	4313      	orrs	r3, r2
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	46a2      	mov	sl, r4
 800a682:	e7d2      	b.n	800a62a <_vfiprintf_r+0xe2>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	1d19      	adds	r1, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	9103      	str	r1, [sp, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfbb      	ittet	lt
 800a690:	425b      	neglt	r3, r3
 800a692:	f042 0202 	orrlt.w	r2, r2, #2
 800a696:	9307      	strge	r3, [sp, #28]
 800a698:	9307      	strlt	r3, [sp, #28]
 800a69a:	bfb8      	it	lt
 800a69c:	9204      	strlt	r2, [sp, #16]
 800a69e:	7823      	ldrb	r3, [r4, #0]
 800a6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a2:	d10c      	bne.n	800a6be <_vfiprintf_r+0x176>
 800a6a4:	7863      	ldrb	r3, [r4, #1]
 800a6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a8:	d135      	bne.n	800a716 <_vfiprintf_r+0x1ce>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	9203      	str	r2, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfb8      	it	lt
 800a6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ba:	3402      	adds	r4, #2
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7a4 <_vfiprintf_r+0x25c>
 800a6c2:	7821      	ldrb	r1, [r4, #0]
 800a6c4:	2203      	movs	r2, #3
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f7f5 fdaa 	bl	8000220 <memchr>
 800a6cc:	b140      	cbz	r0, 800a6e0 <_vfiprintf_r+0x198>
 800a6ce:	2340      	movs	r3, #64	; 0x40
 800a6d0:	eba0 000a 	sub.w	r0, r0, sl
 800a6d4:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	3401      	adds	r4, #1
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e4:	482c      	ldr	r0, [pc, #176]	; (800a798 <_vfiprintf_r+0x250>)
 800a6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ea:	2206      	movs	r2, #6
 800a6ec:	f7f5 fd98 	bl	8000220 <memchr>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d03f      	beq.n	800a774 <_vfiprintf_r+0x22c>
 800a6f4:	4b29      	ldr	r3, [pc, #164]	; (800a79c <_vfiprintf_r+0x254>)
 800a6f6:	bb1b      	cbnz	r3, 800a740 <_vfiprintf_r+0x1f8>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	3307      	adds	r3, #7
 800a6fc:	f023 0307 	bic.w	r3, r3, #7
 800a700:	3308      	adds	r3, #8
 800a702:	9303      	str	r3, [sp, #12]
 800a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a706:	443b      	add	r3, r7
 800a708:	9309      	str	r3, [sp, #36]	; 0x24
 800a70a:	e767      	b.n	800a5dc <_vfiprintf_r+0x94>
 800a70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a710:	460c      	mov	r4, r1
 800a712:	2001      	movs	r0, #1
 800a714:	e7a5      	b.n	800a662 <_vfiprintf_r+0x11a>
 800a716:	2300      	movs	r3, #0
 800a718:	3401      	adds	r4, #1
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	4619      	mov	r1, r3
 800a71e:	f04f 0c0a 	mov.w	ip, #10
 800a722:	4620      	mov	r0, r4
 800a724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a728:	3a30      	subs	r2, #48	; 0x30
 800a72a:	2a09      	cmp	r2, #9
 800a72c:	d903      	bls.n	800a736 <_vfiprintf_r+0x1ee>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0c5      	beq.n	800a6be <_vfiprintf_r+0x176>
 800a732:	9105      	str	r1, [sp, #20]
 800a734:	e7c3      	b.n	800a6be <_vfiprintf_r+0x176>
 800a736:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73a:	4604      	mov	r4, r0
 800a73c:	2301      	movs	r3, #1
 800a73e:	e7f0      	b.n	800a722 <_vfiprintf_r+0x1da>
 800a740:	ab03      	add	r3, sp, #12
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	462a      	mov	r2, r5
 800a746:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <_vfiprintf_r+0x258>)
 800a748:	a904      	add	r1, sp, #16
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7fd fde4 	bl	8008318 <_printf_float>
 800a750:	4607      	mov	r7, r0
 800a752:	1c78      	adds	r0, r7, #1
 800a754:	d1d6      	bne.n	800a704 <_vfiprintf_r+0x1bc>
 800a756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a758:	07d9      	lsls	r1, r3, #31
 800a75a:	d405      	bmi.n	800a768 <_vfiprintf_r+0x220>
 800a75c:	89ab      	ldrh	r3, [r5, #12]
 800a75e:	059a      	lsls	r2, r3, #22
 800a760:	d402      	bmi.n	800a768 <_vfiprintf_r+0x220>
 800a762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a764:	f000 faaf 	bl	800acc6 <__retarget_lock_release_recursive>
 800a768:	89ab      	ldrh	r3, [r5, #12]
 800a76a:	065b      	lsls	r3, r3, #25
 800a76c:	f53f af12 	bmi.w	800a594 <_vfiprintf_r+0x4c>
 800a770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a772:	e711      	b.n	800a598 <_vfiprintf_r+0x50>
 800a774:	ab03      	add	r3, sp, #12
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	462a      	mov	r2, r5
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <_vfiprintf_r+0x258>)
 800a77c:	a904      	add	r1, sp, #16
 800a77e:	4630      	mov	r0, r6
 800a780:	f7fe f86e 	bl	8008860 <_printf_i>
 800a784:	e7e4      	b.n	800a750 <_vfiprintf_r+0x208>
 800a786:	bf00      	nop
 800a788:	0800b78c 	.word	0x0800b78c
 800a78c:	0800b7ac 	.word	0x0800b7ac
 800a790:	0800b76c 	.word	0x0800b76c
 800a794:	0800b614 	.word	0x0800b614
 800a798:	0800b61e 	.word	0x0800b61e
 800a79c:	08008319 	.word	0x08008319
 800a7a0:	0800a525 	.word	0x0800a525
 800a7a4:	0800b61a 	.word	0x0800b61a

0800a7a8 <__swbuf_r>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	460e      	mov	r6, r1
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	b118      	cbz	r0, 800a7ba <__swbuf_r+0x12>
 800a7b2:	6983      	ldr	r3, [r0, #24]
 800a7b4:	b90b      	cbnz	r3, 800a7ba <__swbuf_r+0x12>
 800a7b6:	f000 f9e7 	bl	800ab88 <__sinit>
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <__swbuf_r+0x98>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	d12b      	bne.n	800a818 <__swbuf_r+0x70>
 800a7c0:	686c      	ldr	r4, [r5, #4]
 800a7c2:	69a3      	ldr	r3, [r4, #24]
 800a7c4:	60a3      	str	r3, [r4, #8]
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	071a      	lsls	r2, r3, #28
 800a7ca:	d52f      	bpl.n	800a82c <__swbuf_r+0x84>
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	b36b      	cbz	r3, 800a82c <__swbuf_r+0x84>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	6820      	ldr	r0, [r4, #0]
 800a7d4:	1ac0      	subs	r0, r0, r3
 800a7d6:	6963      	ldr	r3, [r4, #20]
 800a7d8:	b2f6      	uxtb	r6, r6
 800a7da:	4283      	cmp	r3, r0
 800a7dc:	4637      	mov	r7, r6
 800a7de:	dc04      	bgt.n	800a7ea <__swbuf_r+0x42>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f93c 	bl	800aa60 <_fflush_r>
 800a7e8:	bb30      	cbnz	r0, 800a838 <__swbuf_r+0x90>
 800a7ea:	68a3      	ldr	r3, [r4, #8]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	60a3      	str	r3, [r4, #8]
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	701e      	strb	r6, [r3, #0]
 800a7f8:	6963      	ldr	r3, [r4, #20]
 800a7fa:	3001      	adds	r0, #1
 800a7fc:	4283      	cmp	r3, r0
 800a7fe:	d004      	beq.n	800a80a <__swbuf_r+0x62>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	07db      	lsls	r3, r3, #31
 800a804:	d506      	bpl.n	800a814 <__swbuf_r+0x6c>
 800a806:	2e0a      	cmp	r6, #10
 800a808:	d104      	bne.n	800a814 <__swbuf_r+0x6c>
 800a80a:	4621      	mov	r1, r4
 800a80c:	4628      	mov	r0, r5
 800a80e:	f000 f927 	bl	800aa60 <_fflush_r>
 800a812:	b988      	cbnz	r0, 800a838 <__swbuf_r+0x90>
 800a814:	4638      	mov	r0, r7
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <__swbuf_r+0x9c>)
 800a81a:	429c      	cmp	r4, r3
 800a81c:	d101      	bne.n	800a822 <__swbuf_r+0x7a>
 800a81e:	68ac      	ldr	r4, [r5, #8]
 800a820:	e7cf      	b.n	800a7c2 <__swbuf_r+0x1a>
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <__swbuf_r+0xa0>)
 800a824:	429c      	cmp	r4, r3
 800a826:	bf08      	it	eq
 800a828:	68ec      	ldreq	r4, [r5, #12]
 800a82a:	e7ca      	b.n	800a7c2 <__swbuf_r+0x1a>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 f81a 	bl	800a868 <__swsetup_r>
 800a834:	2800      	cmp	r0, #0
 800a836:	d0cb      	beq.n	800a7d0 <__swbuf_r+0x28>
 800a838:	f04f 37ff 	mov.w	r7, #4294967295
 800a83c:	e7ea      	b.n	800a814 <__swbuf_r+0x6c>
 800a83e:	bf00      	nop
 800a840:	0800b78c 	.word	0x0800b78c
 800a844:	0800b7ac 	.word	0x0800b7ac
 800a848:	0800b76c 	.word	0x0800b76c

0800a84c <__ascii_wctomb>:
 800a84c:	b149      	cbz	r1, 800a862 <__ascii_wctomb+0x16>
 800a84e:	2aff      	cmp	r2, #255	; 0xff
 800a850:	bf85      	ittet	hi
 800a852:	238a      	movhi	r3, #138	; 0x8a
 800a854:	6003      	strhi	r3, [r0, #0]
 800a856:	700a      	strbls	r2, [r1, #0]
 800a858:	f04f 30ff 	movhi.w	r0, #4294967295
 800a85c:	bf98      	it	ls
 800a85e:	2001      	movls	r0, #1
 800a860:	4770      	bx	lr
 800a862:	4608      	mov	r0, r1
 800a864:	4770      	bx	lr
	...

0800a868 <__swsetup_r>:
 800a868:	4b32      	ldr	r3, [pc, #200]	; (800a934 <__swsetup_r+0xcc>)
 800a86a:	b570      	push	{r4, r5, r6, lr}
 800a86c:	681d      	ldr	r5, [r3, #0]
 800a86e:	4606      	mov	r6, r0
 800a870:	460c      	mov	r4, r1
 800a872:	b125      	cbz	r5, 800a87e <__swsetup_r+0x16>
 800a874:	69ab      	ldr	r3, [r5, #24]
 800a876:	b913      	cbnz	r3, 800a87e <__swsetup_r+0x16>
 800a878:	4628      	mov	r0, r5
 800a87a:	f000 f985 	bl	800ab88 <__sinit>
 800a87e:	4b2e      	ldr	r3, [pc, #184]	; (800a938 <__swsetup_r+0xd0>)
 800a880:	429c      	cmp	r4, r3
 800a882:	d10f      	bne.n	800a8a4 <__swsetup_r+0x3c>
 800a884:	686c      	ldr	r4, [r5, #4]
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a88c:	0719      	lsls	r1, r3, #28
 800a88e:	d42c      	bmi.n	800a8ea <__swsetup_r+0x82>
 800a890:	06dd      	lsls	r5, r3, #27
 800a892:	d411      	bmi.n	800a8b8 <__swsetup_r+0x50>
 800a894:	2309      	movs	r3, #9
 800a896:	6033      	str	r3, [r6, #0]
 800a898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a89c:	81a3      	strh	r3, [r4, #12]
 800a89e:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a2:	e03e      	b.n	800a922 <__swsetup_r+0xba>
 800a8a4:	4b25      	ldr	r3, [pc, #148]	; (800a93c <__swsetup_r+0xd4>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <__swsetup_r+0x46>
 800a8aa:	68ac      	ldr	r4, [r5, #8]
 800a8ac:	e7eb      	b.n	800a886 <__swsetup_r+0x1e>
 800a8ae:	4b24      	ldr	r3, [pc, #144]	; (800a940 <__swsetup_r+0xd8>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68ec      	ldreq	r4, [r5, #12]
 800a8b6:	e7e6      	b.n	800a886 <__swsetup_r+0x1e>
 800a8b8:	0758      	lsls	r0, r3, #29
 800a8ba:	d512      	bpl.n	800a8e2 <__swsetup_r+0x7a>
 800a8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8be:	b141      	cbz	r1, 800a8d2 <__swsetup_r+0x6a>
 800a8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	d002      	beq.n	800a8ce <__swsetup_r+0x66>
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7ff fb31 	bl	8009f30 <_free_r>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6363      	str	r3, [r4, #52]	; 0x34
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	b94b      	cbnz	r3, 800a902 <__swsetup_r+0x9a>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8f8:	d003      	beq.n	800a902 <__swsetup_r+0x9a>
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f000 fa09 	bl	800ad14 <__smakebuf_r>
 800a902:	89a0      	ldrh	r0, [r4, #12]
 800a904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a908:	f010 0301 	ands.w	r3, r0, #1
 800a90c:	d00a      	beq.n	800a924 <__swsetup_r+0xbc>
 800a90e:	2300      	movs	r3, #0
 800a910:	60a3      	str	r3, [r4, #8]
 800a912:	6963      	ldr	r3, [r4, #20]
 800a914:	425b      	negs	r3, r3
 800a916:	61a3      	str	r3, [r4, #24]
 800a918:	6923      	ldr	r3, [r4, #16]
 800a91a:	b943      	cbnz	r3, 800a92e <__swsetup_r+0xc6>
 800a91c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a920:	d1ba      	bne.n	800a898 <__swsetup_r+0x30>
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	0781      	lsls	r1, r0, #30
 800a926:	bf58      	it	pl
 800a928:	6963      	ldrpl	r3, [r4, #20]
 800a92a:	60a3      	str	r3, [r4, #8]
 800a92c:	e7f4      	b.n	800a918 <__swsetup_r+0xb0>
 800a92e:	2000      	movs	r0, #0
 800a930:	e7f7      	b.n	800a922 <__swsetup_r+0xba>
 800a932:	bf00      	nop
 800a934:	20000014 	.word	0x20000014
 800a938:	0800b78c 	.word	0x0800b78c
 800a93c:	0800b7ac 	.word	0x0800b7ac
 800a940:	0800b76c 	.word	0x0800b76c

0800a944 <abort>:
 800a944:	b508      	push	{r3, lr}
 800a946:	2006      	movs	r0, #6
 800a948:	f000 fa54 	bl	800adf4 <raise>
 800a94c:	2001      	movs	r0, #1
 800a94e:	f7f7 fbc7 	bl	80020e0 <_exit>
	...

0800a954 <__sflush_r>:
 800a954:	898a      	ldrh	r2, [r1, #12]
 800a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	4605      	mov	r5, r0
 800a95c:	0710      	lsls	r0, r2, #28
 800a95e:	460c      	mov	r4, r1
 800a960:	d458      	bmi.n	800aa14 <__sflush_r+0xc0>
 800a962:	684b      	ldr	r3, [r1, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	dc05      	bgt.n	800a974 <__sflush_r+0x20>
 800a968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dc02      	bgt.n	800a974 <__sflush_r+0x20>
 800a96e:	2000      	movs	r0, #0
 800a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a976:	2e00      	cmp	r6, #0
 800a978:	d0f9      	beq.n	800a96e <__sflush_r+0x1a>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a980:	682f      	ldr	r7, [r5, #0]
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	d032      	beq.n	800a9ec <__sflush_r+0x98>
 800a986:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	075a      	lsls	r2, r3, #29
 800a98c:	d505      	bpl.n	800a99a <__sflush_r+0x46>
 800a98e:	6863      	ldr	r3, [r4, #4]
 800a990:	1ac0      	subs	r0, r0, r3
 800a992:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a994:	b10b      	cbz	r3, 800a99a <__sflush_r+0x46>
 800a996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a998:	1ac0      	subs	r0, r0, r3
 800a99a:	2300      	movs	r3, #0
 800a99c:	4602      	mov	r2, r0
 800a99e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9a0:	6a21      	ldr	r1, [r4, #32]
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b0      	blx	r6
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	d106      	bne.n	800a9ba <__sflush_r+0x66>
 800a9ac:	6829      	ldr	r1, [r5, #0]
 800a9ae:	291d      	cmp	r1, #29
 800a9b0:	d82c      	bhi.n	800aa0c <__sflush_r+0xb8>
 800a9b2:	4a2a      	ldr	r2, [pc, #168]	; (800aa5c <__sflush_r+0x108>)
 800a9b4:	40ca      	lsrs	r2, r1
 800a9b6:	07d6      	lsls	r6, r2, #31
 800a9b8:	d528      	bpl.n	800aa0c <__sflush_r+0xb8>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6062      	str	r2, [r4, #4]
 800a9be:	04d9      	lsls	r1, r3, #19
 800a9c0:	6922      	ldr	r2, [r4, #16]
 800a9c2:	6022      	str	r2, [r4, #0]
 800a9c4:	d504      	bpl.n	800a9d0 <__sflush_r+0x7c>
 800a9c6:	1c42      	adds	r2, r0, #1
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0x7a>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	b903      	cbnz	r3, 800a9d0 <__sflush_r+0x7c>
 800a9ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9d2:	602f      	str	r7, [r5, #0]
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	d0ca      	beq.n	800a96e <__sflush_r+0x1a>
 800a9d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9dc:	4299      	cmp	r1, r3
 800a9de:	d002      	beq.n	800a9e6 <__sflush_r+0x92>
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f7ff faa5 	bl	8009f30 <_free_r>
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ea:	e7c1      	b.n	800a970 <__sflush_r+0x1c>
 800a9ec:	6a21      	ldr	r1, [r4, #32]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b0      	blx	r6
 800a9f4:	1c41      	adds	r1, r0, #1
 800a9f6:	d1c7      	bne.n	800a988 <__sflush_r+0x34>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0c4      	beq.n	800a988 <__sflush_r+0x34>
 800a9fe:	2b1d      	cmp	r3, #29
 800aa00:	d001      	beq.n	800aa06 <__sflush_r+0xb2>
 800aa02:	2b16      	cmp	r3, #22
 800aa04:	d101      	bne.n	800aa0a <__sflush_r+0xb6>
 800aa06:	602f      	str	r7, [r5, #0]
 800aa08:	e7b1      	b.n	800a96e <__sflush_r+0x1a>
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	e7ad      	b.n	800a970 <__sflush_r+0x1c>
 800aa14:	690f      	ldr	r7, [r1, #16]
 800aa16:	2f00      	cmp	r7, #0
 800aa18:	d0a9      	beq.n	800a96e <__sflush_r+0x1a>
 800aa1a:	0793      	lsls	r3, r2, #30
 800aa1c:	680e      	ldr	r6, [r1, #0]
 800aa1e:	bf08      	it	eq
 800aa20:	694b      	ldreq	r3, [r1, #20]
 800aa22:	600f      	str	r7, [r1, #0]
 800aa24:	bf18      	it	ne
 800aa26:	2300      	movne	r3, #0
 800aa28:	eba6 0807 	sub.w	r8, r6, r7
 800aa2c:	608b      	str	r3, [r1, #8]
 800aa2e:	f1b8 0f00 	cmp.w	r8, #0
 800aa32:	dd9c      	ble.n	800a96e <__sflush_r+0x1a>
 800aa34:	6a21      	ldr	r1, [r4, #32]
 800aa36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa38:	4643      	mov	r3, r8
 800aa3a:	463a      	mov	r2, r7
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	47b0      	blx	r6
 800aa40:	2800      	cmp	r0, #0
 800aa42:	dc06      	bgt.n	800aa52 <__sflush_r+0xfe>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	e78e      	b.n	800a970 <__sflush_r+0x1c>
 800aa52:	4407      	add	r7, r0
 800aa54:	eba8 0800 	sub.w	r8, r8, r0
 800aa58:	e7e9      	b.n	800aa2e <__sflush_r+0xda>
 800aa5a:	bf00      	nop
 800aa5c:	20400001 	.word	0x20400001

0800aa60 <_fflush_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	690b      	ldr	r3, [r1, #16]
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	b913      	cbnz	r3, 800aa70 <_fflush_r+0x10>
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	b118      	cbz	r0, 800aa7a <_fflush_r+0x1a>
 800aa72:	6983      	ldr	r3, [r0, #24]
 800aa74:	b90b      	cbnz	r3, 800aa7a <_fflush_r+0x1a>
 800aa76:	f000 f887 	bl	800ab88 <__sinit>
 800aa7a:	4b14      	ldr	r3, [pc, #80]	; (800aacc <_fflush_r+0x6c>)
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	d11b      	bne.n	800aab8 <_fflush_r+0x58>
 800aa80:	686c      	ldr	r4, [r5, #4]
 800aa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0ef      	beq.n	800aa6a <_fflush_r+0xa>
 800aa8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa8c:	07d0      	lsls	r0, r2, #31
 800aa8e:	d404      	bmi.n	800aa9a <_fflush_r+0x3a>
 800aa90:	0599      	lsls	r1, r3, #22
 800aa92:	d402      	bmi.n	800aa9a <_fflush_r+0x3a>
 800aa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa96:	f000 f915 	bl	800acc4 <__retarget_lock_acquire_recursive>
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	f7ff ff59 	bl	800a954 <__sflush_r>
 800aaa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaa4:	07da      	lsls	r2, r3, #31
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	d4e0      	bmi.n	800aa6c <_fflush_r+0xc>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	059b      	lsls	r3, r3, #22
 800aaae:	d4dd      	bmi.n	800aa6c <_fflush_r+0xc>
 800aab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aab2:	f000 f908 	bl	800acc6 <__retarget_lock_release_recursive>
 800aab6:	e7d9      	b.n	800aa6c <_fflush_r+0xc>
 800aab8:	4b05      	ldr	r3, [pc, #20]	; (800aad0 <_fflush_r+0x70>)
 800aaba:	429c      	cmp	r4, r3
 800aabc:	d101      	bne.n	800aac2 <_fflush_r+0x62>
 800aabe:	68ac      	ldr	r4, [r5, #8]
 800aac0:	e7df      	b.n	800aa82 <_fflush_r+0x22>
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <_fflush_r+0x74>)
 800aac4:	429c      	cmp	r4, r3
 800aac6:	bf08      	it	eq
 800aac8:	68ec      	ldreq	r4, [r5, #12]
 800aaca:	e7da      	b.n	800aa82 <_fflush_r+0x22>
 800aacc:	0800b78c 	.word	0x0800b78c
 800aad0:	0800b7ac 	.word	0x0800b7ac
 800aad4:	0800b76c 	.word	0x0800b76c

0800aad8 <std>:
 800aad8:	2300      	movs	r3, #0
 800aada:	b510      	push	{r4, lr}
 800aadc:	4604      	mov	r4, r0
 800aade:	e9c0 3300 	strd	r3, r3, [r0]
 800aae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aae6:	6083      	str	r3, [r0, #8]
 800aae8:	8181      	strh	r1, [r0, #12]
 800aaea:	6643      	str	r3, [r0, #100]	; 0x64
 800aaec:	81c2      	strh	r2, [r0, #14]
 800aaee:	6183      	str	r3, [r0, #24]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	2208      	movs	r2, #8
 800aaf4:	305c      	adds	r0, #92	; 0x5c
 800aaf6:	f7fd fb67 	bl	80081c8 <memset>
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <std+0x38>)
 800aafc:	6263      	str	r3, [r4, #36]	; 0x24
 800aafe:	4b05      	ldr	r3, [pc, #20]	; (800ab14 <std+0x3c>)
 800ab00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab02:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <std+0x40>)
 800ab04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab06:	4b05      	ldr	r3, [pc, #20]	; (800ab1c <std+0x44>)
 800ab08:	6224      	str	r4, [r4, #32]
 800ab0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	bf00      	nop
 800ab10:	0800ae2d 	.word	0x0800ae2d
 800ab14:	0800ae4f 	.word	0x0800ae4f
 800ab18:	0800ae87 	.word	0x0800ae87
 800ab1c:	0800aeab 	.word	0x0800aeab

0800ab20 <_cleanup_r>:
 800ab20:	4901      	ldr	r1, [pc, #4]	; (800ab28 <_cleanup_r+0x8>)
 800ab22:	f000 b8af 	b.w	800ac84 <_fwalk_reent>
 800ab26:	bf00      	nop
 800ab28:	0800aa61 	.word	0x0800aa61

0800ab2c <__sfmoreglue>:
 800ab2c:	b570      	push	{r4, r5, r6, lr}
 800ab2e:	2268      	movs	r2, #104	; 0x68
 800ab30:	1e4d      	subs	r5, r1, #1
 800ab32:	4355      	muls	r5, r2
 800ab34:	460e      	mov	r6, r1
 800ab36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab3a:	f7ff fa65 	bl	800a008 <_malloc_r>
 800ab3e:	4604      	mov	r4, r0
 800ab40:	b140      	cbz	r0, 800ab54 <__sfmoreglue+0x28>
 800ab42:	2100      	movs	r1, #0
 800ab44:	e9c0 1600 	strd	r1, r6, [r0]
 800ab48:	300c      	adds	r0, #12
 800ab4a:	60a0      	str	r0, [r4, #8]
 800ab4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab50:	f7fd fb3a 	bl	80081c8 <memset>
 800ab54:	4620      	mov	r0, r4
 800ab56:	bd70      	pop	{r4, r5, r6, pc}

0800ab58 <__sfp_lock_acquire>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__sfp_lock_acquire+0x8>)
 800ab5a:	f000 b8b3 	b.w	800acc4 <__retarget_lock_acquire_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20004ea9 	.word	0x20004ea9

0800ab64 <__sfp_lock_release>:
 800ab64:	4801      	ldr	r0, [pc, #4]	; (800ab6c <__sfp_lock_release+0x8>)
 800ab66:	f000 b8ae 	b.w	800acc6 <__retarget_lock_release_recursive>
 800ab6a:	bf00      	nop
 800ab6c:	20004ea9 	.word	0x20004ea9

0800ab70 <__sinit_lock_acquire>:
 800ab70:	4801      	ldr	r0, [pc, #4]	; (800ab78 <__sinit_lock_acquire+0x8>)
 800ab72:	f000 b8a7 	b.w	800acc4 <__retarget_lock_acquire_recursive>
 800ab76:	bf00      	nop
 800ab78:	20004eaa 	.word	0x20004eaa

0800ab7c <__sinit_lock_release>:
 800ab7c:	4801      	ldr	r0, [pc, #4]	; (800ab84 <__sinit_lock_release+0x8>)
 800ab7e:	f000 b8a2 	b.w	800acc6 <__retarget_lock_release_recursive>
 800ab82:	bf00      	nop
 800ab84:	20004eaa 	.word	0x20004eaa

0800ab88 <__sinit>:
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	f7ff fff0 	bl	800ab70 <__sinit_lock_acquire>
 800ab90:	69a3      	ldr	r3, [r4, #24]
 800ab92:	b11b      	cbz	r3, 800ab9c <__sinit+0x14>
 800ab94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab98:	f7ff bff0 	b.w	800ab7c <__sinit_lock_release>
 800ab9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aba0:	6523      	str	r3, [r4, #80]	; 0x50
 800aba2:	4b13      	ldr	r3, [pc, #76]	; (800abf0 <__sinit+0x68>)
 800aba4:	4a13      	ldr	r2, [pc, #76]	; (800abf4 <__sinit+0x6c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	62a2      	str	r2, [r4, #40]	; 0x28
 800abaa:	42a3      	cmp	r3, r4
 800abac:	bf04      	itt	eq
 800abae:	2301      	moveq	r3, #1
 800abb0:	61a3      	streq	r3, [r4, #24]
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f820 	bl	800abf8 <__sfp>
 800abb8:	6060      	str	r0, [r4, #4]
 800abba:	4620      	mov	r0, r4
 800abbc:	f000 f81c 	bl	800abf8 <__sfp>
 800abc0:	60a0      	str	r0, [r4, #8]
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 f818 	bl	800abf8 <__sfp>
 800abc8:	2200      	movs	r2, #0
 800abca:	60e0      	str	r0, [r4, #12]
 800abcc:	2104      	movs	r1, #4
 800abce:	6860      	ldr	r0, [r4, #4]
 800abd0:	f7ff ff82 	bl	800aad8 <std>
 800abd4:	68a0      	ldr	r0, [r4, #8]
 800abd6:	2201      	movs	r2, #1
 800abd8:	2109      	movs	r1, #9
 800abda:	f7ff ff7d 	bl	800aad8 <std>
 800abde:	68e0      	ldr	r0, [r4, #12]
 800abe0:	2202      	movs	r2, #2
 800abe2:	2112      	movs	r1, #18
 800abe4:	f7ff ff78 	bl	800aad8 <std>
 800abe8:	2301      	movs	r3, #1
 800abea:	61a3      	str	r3, [r4, #24]
 800abec:	e7d2      	b.n	800ab94 <__sinit+0xc>
 800abee:	bf00      	nop
 800abf0:	0800b3f0 	.word	0x0800b3f0
 800abf4:	0800ab21 	.word	0x0800ab21

0800abf8 <__sfp>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	4607      	mov	r7, r0
 800abfc:	f7ff ffac 	bl	800ab58 <__sfp_lock_acquire>
 800ac00:	4b1e      	ldr	r3, [pc, #120]	; (800ac7c <__sfp+0x84>)
 800ac02:	681e      	ldr	r6, [r3, #0]
 800ac04:	69b3      	ldr	r3, [r6, #24]
 800ac06:	b913      	cbnz	r3, 800ac0e <__sfp+0x16>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff ffbd 	bl	800ab88 <__sinit>
 800ac0e:	3648      	adds	r6, #72	; 0x48
 800ac10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	d503      	bpl.n	800ac20 <__sfp+0x28>
 800ac18:	6833      	ldr	r3, [r6, #0]
 800ac1a:	b30b      	cbz	r3, 800ac60 <__sfp+0x68>
 800ac1c:	6836      	ldr	r6, [r6, #0]
 800ac1e:	e7f7      	b.n	800ac10 <__sfp+0x18>
 800ac20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac24:	b9d5      	cbnz	r5, 800ac5c <__sfp+0x64>
 800ac26:	4b16      	ldr	r3, [pc, #88]	; (800ac80 <__sfp+0x88>)
 800ac28:	60e3      	str	r3, [r4, #12]
 800ac2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac2e:	6665      	str	r5, [r4, #100]	; 0x64
 800ac30:	f000 f847 	bl	800acc2 <__retarget_lock_init_recursive>
 800ac34:	f7ff ff96 	bl	800ab64 <__sfp_lock_release>
 800ac38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac40:	6025      	str	r5, [r4, #0]
 800ac42:	61a5      	str	r5, [r4, #24]
 800ac44:	2208      	movs	r2, #8
 800ac46:	4629      	mov	r1, r5
 800ac48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac4c:	f7fd fabc 	bl	80081c8 <memset>
 800ac50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac58:	4620      	mov	r0, r4
 800ac5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac5c:	3468      	adds	r4, #104	; 0x68
 800ac5e:	e7d9      	b.n	800ac14 <__sfp+0x1c>
 800ac60:	2104      	movs	r1, #4
 800ac62:	4638      	mov	r0, r7
 800ac64:	f7ff ff62 	bl	800ab2c <__sfmoreglue>
 800ac68:	4604      	mov	r4, r0
 800ac6a:	6030      	str	r0, [r6, #0]
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d1d5      	bne.n	800ac1c <__sfp+0x24>
 800ac70:	f7ff ff78 	bl	800ab64 <__sfp_lock_release>
 800ac74:	230c      	movs	r3, #12
 800ac76:	603b      	str	r3, [r7, #0]
 800ac78:	e7ee      	b.n	800ac58 <__sfp+0x60>
 800ac7a:	bf00      	nop
 800ac7c:	0800b3f0 	.word	0x0800b3f0
 800ac80:	ffff0001 	.word	0xffff0001

0800ac84 <_fwalk_reent>:
 800ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac88:	4606      	mov	r6, r0
 800ac8a:	4688      	mov	r8, r1
 800ac8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac90:	2700      	movs	r7, #0
 800ac92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac96:	f1b9 0901 	subs.w	r9, r9, #1
 800ac9a:	d505      	bpl.n	800aca8 <_fwalk_reent+0x24>
 800ac9c:	6824      	ldr	r4, [r4, #0]
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	d1f7      	bne.n	800ac92 <_fwalk_reent+0xe>
 800aca2:	4638      	mov	r0, r7
 800aca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca8:	89ab      	ldrh	r3, [r5, #12]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d907      	bls.n	800acbe <_fwalk_reent+0x3a>
 800acae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acb2:	3301      	adds	r3, #1
 800acb4:	d003      	beq.n	800acbe <_fwalk_reent+0x3a>
 800acb6:	4629      	mov	r1, r5
 800acb8:	4630      	mov	r0, r6
 800acba:	47c0      	blx	r8
 800acbc:	4307      	orrs	r7, r0
 800acbe:	3568      	adds	r5, #104	; 0x68
 800acc0:	e7e9      	b.n	800ac96 <_fwalk_reent+0x12>

0800acc2 <__retarget_lock_init_recursive>:
 800acc2:	4770      	bx	lr

0800acc4 <__retarget_lock_acquire_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <__retarget_lock_release_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__swhatbuf_r>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	460e      	mov	r6, r1
 800accc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd0:	2900      	cmp	r1, #0
 800acd2:	b096      	sub	sp, #88	; 0x58
 800acd4:	4614      	mov	r4, r2
 800acd6:	461d      	mov	r5, r3
 800acd8:	da08      	bge.n	800acec <__swhatbuf_r+0x24>
 800acda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	061a      	lsls	r2, r3, #24
 800ace4:	d410      	bmi.n	800ad08 <__swhatbuf_r+0x40>
 800ace6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acea:	e00e      	b.n	800ad0a <__swhatbuf_r+0x42>
 800acec:	466a      	mov	r2, sp
 800acee:	f000 f903 	bl	800aef8 <_fstat_r>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	dbf1      	blt.n	800acda <__swhatbuf_r+0x12>
 800acf6:	9a01      	ldr	r2, [sp, #4]
 800acf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad00:	425a      	negs	r2, r3
 800ad02:	415a      	adcs	r2, r3
 800ad04:	602a      	str	r2, [r5, #0]
 800ad06:	e7ee      	b.n	800ace6 <__swhatbuf_r+0x1e>
 800ad08:	2340      	movs	r3, #64	; 0x40
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	b016      	add	sp, #88	; 0x58
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad14 <__smakebuf_r>:
 800ad14:	898b      	ldrh	r3, [r1, #12]
 800ad16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad18:	079d      	lsls	r5, r3, #30
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	d507      	bpl.n	800ad30 <__smakebuf_r+0x1c>
 800ad20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	2301      	movs	r3, #1
 800ad2a:	6163      	str	r3, [r4, #20]
 800ad2c:	b002      	add	sp, #8
 800ad2e:	bd70      	pop	{r4, r5, r6, pc}
 800ad30:	ab01      	add	r3, sp, #4
 800ad32:	466a      	mov	r2, sp
 800ad34:	f7ff ffc8 	bl	800acc8 <__swhatbuf_r>
 800ad38:	9900      	ldr	r1, [sp, #0]
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff f963 	bl	800a008 <_malloc_r>
 800ad42:	b948      	cbnz	r0, 800ad58 <__smakebuf_r+0x44>
 800ad44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad48:	059a      	lsls	r2, r3, #22
 800ad4a:	d4ef      	bmi.n	800ad2c <__smakebuf_r+0x18>
 800ad4c:	f023 0303 	bic.w	r3, r3, #3
 800ad50:	f043 0302 	orr.w	r3, r3, #2
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	e7e3      	b.n	800ad20 <__smakebuf_r+0xc>
 800ad58:	4b0d      	ldr	r3, [pc, #52]	; (800ad90 <__smakebuf_r+0x7c>)
 800ad5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	6020      	str	r0, [r4, #0]
 800ad60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	9b00      	ldr	r3, [sp, #0]
 800ad68:	6163      	str	r3, [r4, #20]
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	6120      	str	r0, [r4, #16]
 800ad6e:	b15b      	cbz	r3, 800ad88 <__smakebuf_r+0x74>
 800ad70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad74:	4630      	mov	r0, r6
 800ad76:	f000 f8d1 	bl	800af1c <_isatty_r>
 800ad7a:	b128      	cbz	r0, 800ad88 <__smakebuf_r+0x74>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	89a0      	ldrh	r0, [r4, #12]
 800ad8a:	4305      	orrs	r5, r0
 800ad8c:	81a5      	strh	r5, [r4, #12]
 800ad8e:	e7cd      	b.n	800ad2c <__smakebuf_r+0x18>
 800ad90:	0800ab21 	.word	0x0800ab21

0800ad94 <_malloc_usable_size_r>:
 800ad94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad98:	1f18      	subs	r0, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bfbc      	itt	lt
 800ad9e:	580b      	ldrlt	r3, [r1, r0]
 800ada0:	18c0      	addlt	r0, r0, r3
 800ada2:	4770      	bx	lr

0800ada4 <_raise_r>:
 800ada4:	291f      	cmp	r1, #31
 800ada6:	b538      	push	{r3, r4, r5, lr}
 800ada8:	4604      	mov	r4, r0
 800adaa:	460d      	mov	r5, r1
 800adac:	d904      	bls.n	800adb8 <_raise_r+0x14>
 800adae:	2316      	movs	r3, #22
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800adba:	b112      	cbz	r2, 800adc2 <_raise_r+0x1e>
 800adbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adc0:	b94b      	cbnz	r3, 800add6 <_raise_r+0x32>
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 f830 	bl	800ae28 <_getpid_r>
 800adc8:	462a      	mov	r2, r5
 800adca:	4601      	mov	r1, r0
 800adcc:	4620      	mov	r0, r4
 800adce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add2:	f000 b817 	b.w	800ae04 <_kill_r>
 800add6:	2b01      	cmp	r3, #1
 800add8:	d00a      	beq.n	800adf0 <_raise_r+0x4c>
 800adda:	1c59      	adds	r1, r3, #1
 800addc:	d103      	bne.n	800ade6 <_raise_r+0x42>
 800adde:	2316      	movs	r3, #22
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	2001      	movs	r0, #1
 800ade4:	e7e7      	b.n	800adb6 <_raise_r+0x12>
 800ade6:	2400      	movs	r4, #0
 800ade8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800adec:	4628      	mov	r0, r5
 800adee:	4798      	blx	r3
 800adf0:	2000      	movs	r0, #0
 800adf2:	e7e0      	b.n	800adb6 <_raise_r+0x12>

0800adf4 <raise>:
 800adf4:	4b02      	ldr	r3, [pc, #8]	; (800ae00 <raise+0xc>)
 800adf6:	4601      	mov	r1, r0
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f7ff bfd3 	b.w	800ada4 <_raise_r>
 800adfe:	bf00      	nop
 800ae00:	20000014 	.word	0x20000014

0800ae04 <_kill_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_kill_r+0x20>)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	4611      	mov	r1, r2
 800ae10:	602b      	str	r3, [r5, #0]
 800ae12:	f7f7 f955 	bl	80020c0 <_kill>
 800ae16:	1c43      	adds	r3, r0, #1
 800ae18:	d102      	bne.n	800ae20 <_kill_r+0x1c>
 800ae1a:	682b      	ldr	r3, [r5, #0]
 800ae1c:	b103      	cbz	r3, 800ae20 <_kill_r+0x1c>
 800ae1e:	6023      	str	r3, [r4, #0]
 800ae20:	bd38      	pop	{r3, r4, r5, pc}
 800ae22:	bf00      	nop
 800ae24:	20004ea4 	.word	0x20004ea4

0800ae28 <_getpid_r>:
 800ae28:	f7f7 b942 	b.w	80020b0 <_getpid>

0800ae2c <__sread>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	460c      	mov	r4, r1
 800ae30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae34:	f000 f894 	bl	800af60 <_read_r>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	bfab      	itete	ge
 800ae3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae40:	181b      	addge	r3, r3, r0
 800ae42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae46:	bfac      	ite	ge
 800ae48:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae4a:	81a3      	strhlt	r3, [r4, #12]
 800ae4c:	bd10      	pop	{r4, pc}

0800ae4e <__swrite>:
 800ae4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae52:	461f      	mov	r7, r3
 800ae54:	898b      	ldrh	r3, [r1, #12]
 800ae56:	05db      	lsls	r3, r3, #23
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	4616      	mov	r6, r2
 800ae5e:	d505      	bpl.n	800ae6c <__swrite+0x1e>
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	2302      	movs	r3, #2
 800ae66:	2200      	movs	r2, #0
 800ae68:	f000 f868 	bl	800af3c <_lseek_r>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae76:	81a3      	strh	r3, [r4, #12]
 800ae78:	4632      	mov	r2, r6
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae82:	f000 b817 	b.w	800aeb4 <_write_r>

0800ae86 <__sseek>:
 800ae86:	b510      	push	{r4, lr}
 800ae88:	460c      	mov	r4, r1
 800ae8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8e:	f000 f855 	bl	800af3c <_lseek_r>
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	bf15      	itete	ne
 800ae98:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aea2:	81a3      	strheq	r3, [r4, #12]
 800aea4:	bf18      	it	ne
 800aea6:	81a3      	strhne	r3, [r4, #12]
 800aea8:	bd10      	pop	{r4, pc}

0800aeaa <__sclose>:
 800aeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeae:	f000 b813 	b.w	800aed8 <_close_r>
	...

0800aeb4 <_write_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_write_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f7 f933 	bl	800212e <_write>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_write_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_write_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20004ea4 	.word	0x20004ea4

0800aed8 <_close_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d06      	ldr	r5, [pc, #24]	; (800aef4 <_close_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f7 f93f 	bl	8002166 <_close>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_close_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_close_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20004ea4 	.word	0x20004ea4

0800aef8 <_fstat_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	; (800af18 <_fstat_r+0x20>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	4611      	mov	r1, r2
 800af04:	602b      	str	r3, [r5, #0]
 800af06:	f7f7 f93a 	bl	800217e <_fstat>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	d102      	bne.n	800af14 <_fstat_r+0x1c>
 800af0e:	682b      	ldr	r3, [r5, #0]
 800af10:	b103      	cbz	r3, 800af14 <_fstat_r+0x1c>
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	bd38      	pop	{r3, r4, r5, pc}
 800af16:	bf00      	nop
 800af18:	20004ea4 	.word	0x20004ea4

0800af1c <_isatty_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4d06      	ldr	r5, [pc, #24]	; (800af38 <_isatty_r+0x1c>)
 800af20:	2300      	movs	r3, #0
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	602b      	str	r3, [r5, #0]
 800af28:	f7f7 f939 	bl	800219e <_isatty>
 800af2c:	1c43      	adds	r3, r0, #1
 800af2e:	d102      	bne.n	800af36 <_isatty_r+0x1a>
 800af30:	682b      	ldr	r3, [r5, #0]
 800af32:	b103      	cbz	r3, 800af36 <_isatty_r+0x1a>
 800af34:	6023      	str	r3, [r4, #0]
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	20004ea4 	.word	0x20004ea4

0800af3c <_lseek_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	; (800af5c <_lseek_r+0x20>)
 800af40:	4604      	mov	r4, r0
 800af42:	4608      	mov	r0, r1
 800af44:	4611      	mov	r1, r2
 800af46:	2200      	movs	r2, #0
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f7f7 f932 	bl	80021b4 <_lseek>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_lseek_r+0x1e>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_lseek_r+0x1e>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20004ea4 	.word	0x20004ea4

0800af60 <_read_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_read_r+0x20>)
 800af64:	4604      	mov	r4, r0
 800af66:	4608      	mov	r0, r1
 800af68:	4611      	mov	r1, r2
 800af6a:	2200      	movs	r2, #0
 800af6c:	602a      	str	r2, [r5, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	f7f7 f8c0 	bl	80020f4 <_read>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_read_r+0x1e>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_read_r+0x1e>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20004ea4 	.word	0x20004ea4

0800af84 <_init>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	bf00      	nop
 800af88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8a:	bc08      	pop	{r3}
 800af8c:	469e      	mov	lr, r3
 800af8e:	4770      	bx	lr

0800af90 <_fini>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr
