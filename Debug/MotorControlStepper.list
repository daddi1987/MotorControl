
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b38  08003b38  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b40  08003b40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08003bb8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003bb8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008864  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001632  00000000  00000000  00028904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204e7  00000000  00000000  0002ac50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4e1  00000000  00000000  0004b137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c65b2  00000000  00000000  00055618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011bbca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e70  00000000  00000000  0011bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003878 	.word	0x08003878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003878 	.word	0x08003878

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fb5a 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8b4 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f888 	bl	80006d8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	 sprintf(MSG, "Position:  %d\r\n", EncoderCount);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0x38>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	; (80005f0 <main+0x3c>)
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <main+0x40>)
 80005d2:	f002 fce3 	bl	8002f9c <siprintf>
	 HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2223      	movs	r2, #35	; 0x23
 80005da:	4906      	ldr	r1, [pc, #24]	; (80005f4 <main+0x40>)
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <main+0x44>)
 80005de:	f002 f8f1 	bl	80027c4 <HAL_UART_Transmit>
	 HAL_Delay(1);
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fbb6 	bl	8000d54 <HAL_Delay>
  {
 80005e8:	e7ee      	b.n	80005c8 <main+0x14>
 80005ea:	bf00      	nop
 80005ec:	200000d0 	.word	0x200000d0
 80005f0:	08003890 	.word	0x08003890
 80005f4:	200000d4 	.word	0x200000d4
 80005f8:	2000008c 	.word	0x2000008c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2234      	movs	r2, #52	; 0x34
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fcbe 	bl	8002f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b2a      	ldr	r3, [pc, #168]	; (80006d0 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a29      	ldr	r2, [pc, #164]	; (80006d0 <SystemClock_Config+0xd4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xd4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xd8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <SystemClock_Config+0xd8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000670:	2310      	movs	r3, #16
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067a:	2304      	movs	r3, #4
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fc64 	bl	8001f58 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 f9b9 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2102      	movs	r1, #2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 f844 	bl	8001744 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006c2:	f000 f9a3 	bl	8000a0c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_USART2_UART_Init+0x50>)
 80006e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 80006fe:	220c      	movs	r2, #12
 8000700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USART2_UART_Init+0x4c>)
 8000710:	f001 ff7e 	bl	8002610 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071a:	f000 f977 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	2000008c 	.word	0x2000008c
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b5b      	ldr	r3, [pc, #364]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a5a      	ldr	r2, [pc, #360]	; (80008b4 <MX_GPIO_Init+0x188>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b54      	ldr	r3, [pc, #336]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b51      	ldr	r3, [pc, #324]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b4d      	ldr	r3, [pc, #308]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a4c      	ldr	r2, [pc, #304]	; (80008b4 <MX_GPIO_Init+0x188>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b4a      	ldr	r3, [pc, #296]	; (80008b4 <MX_GPIO_Init+0x188>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b46      	ldr	r3, [pc, #280]	; (80008b4 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <MX_GPIO_Init+0x188>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80007b8:	483f      	ldr	r0, [pc, #252]	; (80008b8 <MX_GPIO_Init+0x18c>)
 80007ba:	f000 ff79 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80007c4:	483d      	ldr	r0, [pc, #244]	; (80008bc <MX_GPIO_Init+0x190>)
 80007c6:	f000 ff73 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	483c      	ldr	r0, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x194>)
 80007d0:	f000 ff6e 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4835      	ldr	r0, [pc, #212]	; (80008c0 <MX_GPIO_Init+0x194>)
 80007ec:	f000 fc16 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 80007f0:	2303      	movs	r3, #3
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	482c      	ldr	r0, [pc, #176]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000806:	f000 fc09 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 800080a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4825      	ldr	r0, [pc, #148]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000824:	f000 fbfa 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 8000828:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <MX_GPIO_Init+0x190>)
 8000842:	f000 fbeb 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_GPIO_Init+0x194>)
 800085e:	f000 fbdd 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <MX_GPIO_Init+0x18c>)
 8000878:	f000 fbd0 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2006      	movs	r0, #6
 8000882:	f000 fb7b 	bl	8000f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000886:	2006      	movs	r0, #6
 8000888:	f000 fba4 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2007      	movs	r0, #7
 8000892:	f000 fb73 	bl	8000f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fb9c 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2028      	movs	r0, #40	; 0x28
 80008a2:	f000 fb6b 	bl	8000f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a6:	2028      	movs	r0, #40	; 0x28
 80008a8:	f000 fb94 	bl	8000fd4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40020800 	.word	0x40020800

080008c4 <rot_get_state>:

/* USER CODE BEGIN 4 */

uint8_t rot_get_state() {
 80008c4:	b598      	push	{r3, r4, r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80008c8:	2102      	movs	r1, #2
 80008ca:	4808      	ldr	r0, [pc, #32]	; (80008ec <rot_get_state+0x28>)
 80008cc:	f000 feca 	bl	8001664 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	005b      	lsls	r3, r3, #1
                | (HAL_GPIO_ReadPin(GPIOA, Encoder1_Count_Pin)));
 80008d4:	b25c      	sxtb	r4, r3
 80008d6:	2101      	movs	r1, #1
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <rot_get_state+0x28>)
 80008da:	f000 fec3 	bl	8001664 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4323      	orrs	r3, r4
 80008e4:	b25b      	sxtb	r3, r3
	return (uint8_t)((HAL_GPIO_ReadPin(GPIOA, Encoder1_Direct_Pin) << 1)
 80008e6:	b2db      	uxtb	r3, r3
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	bd98      	pop	{r3, r4, r7, pc}
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_GPIO_EXTI_Callback>:

// External interrupts from rotary encoder
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Encoder1_Count_Pin || GPIO_Pin == Encoder1_Direct_Pin) {
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d002      	beq.n	8000906 <HAL_GPIO_EXTI_Callback+0x16>
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d178      	bne.n	80009f8 <HAL_GPIO_EXTI_Callback+0x108>

		rot_new_state = rot_get_state();
 8000906:	f7ff ffdd 	bl	80008c4 <rot_get_state>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 8000910:	701a      	strb	r2, [r3, #0]

		//DBG("%d:%d", rot_old_state, rot_new_state);

		// Check transition
		if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d109      	bne.n	800092e <HAL_GPIO_EXTI_Callback+0x3e>
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d105      	bne.n	800092e <HAL_GPIO_EXTI_Callback+0x3e>
			EncoderCount++;
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e060      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d109      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x5a>
 8000936:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <HAL_GPIO_EXTI_Callback+0x5a>
			EncoderCount++;
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3301      	adds	r3, #1
 8000944:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000946:	6013      	str	r3, [r2, #0]
 8000948:	e052      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d109      	bne.n	8000966 <HAL_GPIO_EXTI_Callback+0x76>
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d105      	bne.n	8000966 <HAL_GPIO_EXTI_Callback+0x76>
			EncoderCount++;
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e044      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8000966:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d109      	bne.n	8000982 <HAL_GPIO_EXTI_Callback+0x92>
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d105      	bne.n	8000982 <HAL_GPIO_EXTI_Callback+0x92>
			EncoderCount++;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	e036      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d109      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0xae>
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d105      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0xae>
			EncoderCount--;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e028      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d109      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0xca>
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d105      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0xca>
			EncoderCount--;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e01a      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d109      	bne.n	80009d6 <HAL_GPIO_EXTI_Callback+0xe6>
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d105      	bne.n	80009d6 <HAL_GPIO_EXTI_Callback+0xe6>
			EncoderCount--;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	e00c      	b.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
		} else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d108      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d104      	bne.n	80009f0 <HAL_GPIO_EXTI_Callback+0x100>
			EncoderCount--;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x118>)
 80009ee:	6013      	str	r3, [r2, #0]
		}

		rot_old_state = rot_new_state;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x110>)
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x114>)
 80009f6:	701a      	strb	r2, [r3, #0]
	}
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000f7 	.word	0x200000f7
 8000a04:	200000f8 	.word	0x200000f8
 8000a08:	200000d0 	.word	0x200000d0

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>

08000a16 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fa66 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa93 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8dc 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fdd5 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f000 fdce 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b84:	f000 fdc6 	bl	8001714 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f002 f9bc 	bl	8002f38 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20020000 	.word	0x20020000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	200000fc 	.word	0x200000fc
 8000bf4:	20000118 	.word	0x20000118

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480d      	ldr	r0, [pc, #52]	; (8000c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c22:	490e      	ldr	r1, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c38:	4c0b      	ldr	r4, [pc, #44]	; (8000c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c46:	f7ff ffd7 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f002 f97b 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fcb1 	bl	80005b4 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c60:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 8000c64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c68:	20000114 	.word	0x20000114

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f94f 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fec2 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f996 	bl	8001004 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f944 	bl	8000f7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000100 	.word	0x20000100

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000100 	.word	0x20000100

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	d00f      	beq.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b06      	cmp	r3, #6
 8000f4e:	d00c      	beq.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d009      	beq.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d006      	beq.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d003      	beq.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f62:	2190      	movs	r1, #144	; 0x90
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f66:	f7ff fd56 	bl	8000a16 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff16 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	080038a0 	.word	0x080038a0

08000f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d903      	bls.n	8000f9c <HAL_NVIC_SetPriority+0x20>
 8000f94:	21a8      	movs	r1, #168	; 0xa8
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <HAL_NVIC_SetPriority+0x54>)
 8000f98:	f7ff fd3d 	bl	8000a16 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d903      	bls.n	8000faa <HAL_NVIC_SetPriority+0x2e>
 8000fa2:	21a9      	movs	r1, #169	; 0xa9
 8000fa4:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <HAL_NVIC_SetPriority+0x54>)
 8000fa6:	f7ff fd36 	bl	8000a16 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff1b 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ff6b 	bl	8000e90 <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff3a 	bl	8000e3c <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	080038a0 	.word	0x080038a0

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	da03      	bge.n	8000fee <HAL_NVIC_EnableIRQ+0x1a>
 8000fe6:	21bc      	movs	r1, #188	; 0xbc
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_NVIC_EnableIRQ+0x2c>)
 8000fea:	f7ff fd14 	bl	8000a16 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff04 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	080038a0 	.word	0x080038a0

08001004 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff73 	bl	8000ef8 <SysTick_Config>
 8001012:	4603      	mov	r3, r0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a37      	ldr	r2, [pc, #220]	; (8001114 <HAL_GPIO_Init+0xf8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a36      	ldr	r2, [pc, #216]	; (8001118 <HAL_GPIO_Init+0xfc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01b      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a35      	ldr	r2, [pc, #212]	; (800111c <HAL_GPIO_Init+0x100>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <HAL_GPIO_Init+0x104>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a33      	ldr	r2, [pc, #204]	; (8001124 <HAL_GPIO_Init+0x108>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00f      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a32      	ldr	r2, [pc, #200]	; (8001128 <HAL_GPIO_Init+0x10c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00b      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_GPIO_Init+0x110>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a30      	ldr	r2, [pc, #192]	; (8001130 <HAL_GPIO_Init+0x114>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x5e>
 8001072:	21ac      	movs	r1, #172	; 0xac
 8001074:	482f      	ldr	r0, [pc, #188]	; (8001134 <HAL_GPIO_Init+0x118>)
 8001076:	f7ff fcce 	bl	8000a16 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_GPIO_Init+0x74>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0c1b      	lsrs	r3, r3, #16
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x7c>
 8001090:	21ad      	movs	r1, #173	; 0xad
 8001092:	4828      	ldr	r0, [pc, #160]	; (8001134 <HAL_GPIO_Init+0x118>)
 8001094:	f7ff fcbf 	bl	8000a16 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d035      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d031      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d02d      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d029      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d025      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80010c8:	d020      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80010d2:	d01b      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80010dc:	d016      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010e6:	d011      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010f0:	d00c      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b03      	cmp	r3, #3
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0xf0>
 8001104:	21ae      	movs	r1, #174	; 0xae
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_GPIO_Init+0x118>)
 8001108:	f7ff fc85 	bl	8000a16 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	e289      	b.n	8001626 <HAL_GPIO_Init+0x60a>
 8001112:	bf00      	nop
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400
 800111c:	40020800 	.word	0x40020800
 8001120:	40020c00 	.word	0x40020c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40021400 	.word	0x40021400
 800112c:	40021800 	.word	0x40021800
 8001130:	40021c00 	.word	0x40021c00
 8001134:	08003918 	.word	0x08003918
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8265 	bne.w	8001620 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d144      	bne.n	80011f8 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00f      	beq.n	8001196 <HAL_GPIO_Init+0x17a>
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d00b      	beq.n	8001196 <HAL_GPIO_Init+0x17a>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x17a>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x17a>
 800118e:	21c0      	movs	r1, #192	; 0xc0
 8001190:	4831      	ldr	r0, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x23c>)
 8001192:	f7ff fc40 	bl	8000a16 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d02b      	beq.n	800125c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00b      	beq.n	8001224 <HAL_GPIO_Init+0x208>
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x208>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x208>
 800121c:	21d1      	movs	r1, #209	; 0xd1
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <HAL_GPIO_Init+0x23c>)
 8001220:	f7ff fbf9 	bl	8000a16 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	2203      	movs	r2, #3
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x240>
 8001256:	bf00      	nop
 8001258:	08003918 	.word	0x08003918
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 810c 	bne.w	8001482 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80e3 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	2b09      	cmp	r3, #9
 800127a:	f000 80de 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 80d9 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80d4 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80cf 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80ca 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f000 80c5 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f000 80c0 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	f000 80bb 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	f000 80b6 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	f000 80b1 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	f000 80ac 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	f000 80a7 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	f000 80a2 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	f000 809d 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b05      	cmp	r3, #5
 8001306:	f000 8098 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2b05      	cmp	r3, #5
 8001310:	f000 8093 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b09      	cmp	r3, #9
 800131a:	f000 808e 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b06      	cmp	r3, #6
 8001324:	f000 8089 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b09      	cmp	r3, #9
 800132e:	f000 8084 	beq.w	800143a <HAL_GPIO_Init+0x41e>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b07      	cmp	r3, #7
 8001338:	d07f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d07b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	2b07      	cmp	r3, #7
 8001348:	d077      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b08      	cmp	r3, #8
 8001350:	d073      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d06f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b08      	cmp	r3, #8
 8001360:	d06b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b09      	cmp	r3, #9
 8001368:	d067      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	2b09      	cmp	r3, #9
 8001370:	d063      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b0a      	cmp	r3, #10
 8001378:	d05f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	2b0a      	cmp	r3, #10
 8001380:	d05b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b0b      	cmp	r3, #11
 8001388:	d057      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d053      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b0c      	cmp	r3, #12
 8001398:	d04f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	2b0d      	cmp	r3, #13
 80013a0:	d04b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	d047      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d043      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d03f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d03b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d037      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d033      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d02f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d02b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d027      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d023      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d01f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d01b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d017      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b08      	cmp	r3, #8
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d00f      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	2b09      	cmp	r3, #9
 8001420:	d00b      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b0a      	cmp	r3, #10
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x41e>
 8001432:	21de      	movs	r1, #222	; 0xde
 8001434:	4880      	ldr	r0, [pc, #512]	; (8001638 <HAL_GPIO_Init+0x61c>)
 8001436:	f7ff faee 	bl	8000a16 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	69b9      	ldr	r1, [r7, #24]
 800147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0203 	and.w	r2, r3, #3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80ae 	beq.w	8001620 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b5c      	ldr	r3, [pc, #368]	; (800163c <HAL_GPIO_Init+0x620>)
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	4a5b      	ldr	r2, [pc, #364]	; (800163c <HAL_GPIO_Init+0x620>)
 80014ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d2:	6453      	str	r3, [r2, #68]	; 0x44
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_GPIO_Init+0x620>)
 80014d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e0:	4a57      	ldr	r2, [pc, #348]	; (8001640 <HAL_GPIO_Init+0x624>)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <HAL_GPIO_Init+0x628>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d025      	beq.n	8001558 <HAL_GPIO_Init+0x53c>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4e      	ldr	r2, [pc, #312]	; (8001648 <HAL_GPIO_Init+0x62c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d01f      	beq.n	8001554 <HAL_GPIO_Init+0x538>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a4d      	ldr	r2, [pc, #308]	; (800164c <HAL_GPIO_Init+0x630>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d019      	beq.n	8001550 <HAL_GPIO_Init+0x534>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a4c      	ldr	r2, [pc, #304]	; (8001650 <HAL_GPIO_Init+0x634>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d013      	beq.n	800154c <HAL_GPIO_Init+0x530>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <HAL_GPIO_Init+0x638>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d00d      	beq.n	8001548 <HAL_GPIO_Init+0x52c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <HAL_GPIO_Init+0x63c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d007      	beq.n	8001544 <HAL_GPIO_Init+0x528>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <HAL_GPIO_Init+0x640>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d101      	bne.n	8001540 <HAL_GPIO_Init+0x524>
 800153c:	2306      	movs	r3, #6
 800153e:	e00c      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001540:	2307      	movs	r3, #7
 8001542:	e00a      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001544:	2305      	movs	r3, #5
 8001546:	e008      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001548:	2304      	movs	r3, #4
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x53e>
 800154c:	2303      	movs	r3, #3
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x53e>
 8001558:	2300      	movs	r3, #0
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156a:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x624>)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_GPIO_Init+0x644>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x644>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x644>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x644>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x644>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x644>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x644>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	43db      	mvns	r3, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4013      	ands	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_GPIO_Init+0x644>)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3301      	adds	r3, #1
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	f67f ad85 	bls.w	8001138 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	08003918 	.word	0x08003918
 800163c:	40023800 	.word	0x40023800
 8001640:	40013800 	.word	0x40013800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40020800 	.word	0x40020800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40021400 	.word	0x40021400
 800165c:	40021800 	.word	0x40021800
 8001660:	40013c00 	.word	0x40013c00

08001664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001670:	887b      	ldrh	r3, [r7, #2]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <HAL_GPIO_ReadPin+0x1c>
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	0c1b      	lsrs	r3, r3, #16
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <HAL_GPIO_ReadPin+0x26>
 8001680:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_GPIO_ReadPin+0x48>)
 8001686:	f7ff f9c6 	bl	8000a16 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e001      	b.n	80016a0 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08003918 	.word	0x08003918

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_GPIO_WritePin+0x20>
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_GPIO_WritePin+0x2a>
 80016d0:	f240 119d 	movw	r1, #413	; 0x19d
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_GPIO_WritePin+0x60>)
 80016d6:	f7ff f99e 	bl	8000a16 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80016da:	787b      	ldrb	r3, [r7, #1]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <HAL_GPIO_WritePin+0x40>
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d004      	beq.n	80016f0 <HAL_GPIO_WritePin+0x40>
 80016e6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <HAL_GPIO_WritePin+0x60>)
 80016ec:	f7ff f993 	bl	8000a16 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	08003918 	.word	0x08003918

08001714 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff f8dc 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013c00 	.word	0x40013c00

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e18c      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_RCC_ClockConfig+0x24>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d904      	bls.n	8001772 <HAL_RCC_ClockConfig+0x2e>
 8001768:	f240 215a 	movw	r1, #602	; 0x25a
 800176c:	4887      	ldr	r0, [pc, #540]	; (800198c <HAL_RCC_ClockConfig+0x248>)
 800176e:	f7ff f952 	bl	8000a16 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d031      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d02e      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d02b      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d028      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d025      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d022      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b06      	cmp	r3, #6
 800179a:	d01f      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d01c      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d016      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b0a      	cmp	r3, #10
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b0b      	cmp	r3, #11
 80017b8:	d010      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	d00d      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b0d      	cmp	r3, #13
 80017c4:	d00a      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b0e      	cmp	r3, #14
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	d004      	beq.n	80017dc <HAL_RCC_ClockConfig+0x98>
 80017d2:	f240 215b 	movw	r1, #603	; 0x25b
 80017d6:	486d      	ldr	r0, [pc, #436]	; (800198c <HAL_RCC_ClockConfig+0x248>)
 80017d8:	f7ff f91d 	bl	8000a16 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017dc:	4b6c      	ldr	r3, [pc, #432]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d90c      	bls.n	8001804 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b69      	ldr	r3, [pc, #420]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e136      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d049      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a5c      	ldr	r2, [pc, #368]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b57      	ldr	r3, [pc, #348]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a56      	ldr	r2, [pc, #344]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 800183a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d020      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b90      	cmp	r3, #144	; 0x90
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2ba0      	cmp	r3, #160	; 0xa0
 800185e:	d018      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2bb0      	cmp	r3, #176	; 0xb0
 8001866:	d014      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2bc0      	cmp	r3, #192	; 0xc0
 800186e:	d010      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2bd0      	cmp	r3, #208	; 0xd0
 8001876:	d00c      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2be0      	cmp	r3, #224	; 0xe0
 800187e:	d008      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2bf0      	cmp	r3, #240	; 0xf0
 8001886:	d004      	beq.n	8001892 <HAL_RCC_ClockConfig+0x14e>
 8001888:	f240 217e 	movw	r1, #638	; 0x27e
 800188c:	483f      	ldr	r0, [pc, #252]	; (800198c <HAL_RCC_ClockConfig+0x248>)
 800188e:	f7ff f8c2 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	493d      	ldr	r1, [pc, #244]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d059      	beq.n	8001964 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_RCC_ClockConfig+0x196>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d00c      	beq.n	80018da <HAL_RCC_ClockConfig+0x196>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x196>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d004      	beq.n	80018da <HAL_RCC_ClockConfig+0x196>
 80018d0:	f240 2185 	movw	r1, #645	; 0x285
 80018d4:	482d      	ldr	r0, [pc, #180]	; (800198c <HAL_RCC_ClockConfig+0x248>)
 80018d6:	f7ff f89e 	bl	8000a16 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e0bf      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0af      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0a7      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4919      	ldr	r1, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fa02 	bl	8000d3c <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff f9fe 	bl	8000d3c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e08f      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_ClockConfig+0x250>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d212      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_ClockConfig+0x24c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d007      	beq.n	8001998 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e072      	b.n	8001a72 <HAL_RCC_ClockConfig+0x32e>
 800198c:	0800398c 	.word	0x0800398c
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d025      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d018      	beq.n	80019de <HAL_RCC_ClockConfig+0x29a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b4:	d013      	beq.n	80019de <HAL_RCC_ClockConfig+0x29a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80019be:	d00e      	beq.n	80019de <HAL_RCC_ClockConfig+0x29a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x29a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80019d2:	d004      	beq.n	80019de <HAL_RCC_ClockConfig+0x29a>
 80019d4:	f240 21c3 	movw	r1, #707	; 0x2c3
 80019d8:	4828      	ldr	r0, [pc, #160]	; (8001a7c <HAL_RCC_ClockConfig+0x338>)
 80019da:	f7ff f81c 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_RCC_ClockConfig+0x33c>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	4925      	ldr	r1, [pc, #148]	; (8001a80 <HAL_RCC_ClockConfig+0x33c>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d026      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d018      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x2f2>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0c:	d013      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x2f2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a16:	d00e      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x2f2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x2f2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001a2a:	d004      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x2f2>
 8001a2c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8001a30:	4812      	ldr	r0, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x338>)
 8001a32:	f7fe fff0 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_RCC_ClockConfig+0x33c>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490e      	ldr	r1, [pc, #56]	; (8001a80 <HAL_RCC_ClockConfig+0x33c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f855 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_RCC_ClockConfig+0x33c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	490a      	ldr	r1, [pc, #40]	; (8001a84 <HAL_RCC_ClockConfig+0x340>)
 8001a5c:	5ccb      	ldrb	r3, [r1, r3]
 8001a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a62:	4a09      	ldr	r2, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x344>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_RCC_ClockConfig+0x348>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f922 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0800398c 	.word	0x0800398c
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08003aec 	.word	0x08003aec
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aac:	f7ff fff0 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	; (8001acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	08003afc 	.word	0x08003afc

08001ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ad4:	f7ff ffdc 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	0b5b      	lsrs	r3, r3, #13
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4903      	ldr	r1, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08003afc 	.word	0x08003afc

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b0ae      	sub	sp, #184	; 0xb8
 8001afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1e:	4bcb      	ldr	r3, [pc, #812]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	f200 8206 	bhi.w	8001f38 <HAL_RCC_GetSysClockFreq+0x440>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b69 	.word	0x08001b69
 8001b38:	08001f39 	.word	0x08001f39
 8001b3c:	08001f39 	.word	0x08001f39
 8001b40:	08001f39 	.word	0x08001f39
 8001b44:	08001b71 	.word	0x08001b71
 8001b48:	08001f39 	.word	0x08001f39
 8001b4c:	08001f39 	.word	0x08001f39
 8001b50:	08001f39 	.word	0x08001f39
 8001b54:	08001b79 	.word	0x08001b79
 8001b58:	08001f39 	.word	0x08001f39
 8001b5c:	08001f39 	.word	0x08001f39
 8001b60:	08001f39 	.word	0x08001f39
 8001b64:	08001d69 	.word	0x08001d69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4bb9      	ldr	r3, [pc, #740]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001b6e:	e1e7      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4bb8      	ldr	r3, [pc, #736]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b76:	e1e3      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4bb4      	ldr	r3, [pc, #720]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b84:	4bb1      	ldr	r3, [pc, #708]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d071      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b90:	4bae      	ldr	r3, [pc, #696]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	099b      	lsrs	r3, r3, #6
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b9c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	462b      	mov	r3, r5
 8001bba:	f04f 0000 	mov.w	r0, #0
 8001bbe:	f04f 0100 	mov.w	r1, #0
 8001bc2:	0159      	lsls	r1, r3, #5
 8001bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc8:	0150      	lsls	r0, r2, #5
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4621      	mov	r1, r4
 8001bd0:	1a51      	subs	r1, r2, r1
 8001bd2:	6439      	str	r1, [r7, #64]	; 0x40
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001be8:	4649      	mov	r1, r9
 8001bea:	018b      	lsls	r3, r1, #6
 8001bec:	4641      	mov	r1, r8
 8001bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf2:	4641      	mov	r1, r8
 8001bf4:	018a      	lsls	r2, r1, #6
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	1a51      	subs	r1, r2, r1
 8001bfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c10:	4649      	mov	r1, r9
 8001c12:	00cb      	lsls	r3, r1, #3
 8001c14:	4641      	mov	r1, r8
 8001c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	00ca      	lsls	r2, r1, #3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	4622      	mov	r2, r4
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	eb42 0303 	adc.w	r3, r2, r3
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c40:	4629      	mov	r1, r5
 8001c42:	024b      	lsls	r3, r1, #9
 8001c44:	4621      	mov	r1, r4
 8001c46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	024a      	lsls	r2, r1, #9
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c64:	f7fe fb24 	bl	80002b0 <__aeabi_uldivmod>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c72:	e067      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c8e:	2300      	movs	r3, #0
 8001c90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001c96:	4622      	mov	r2, r4
 8001c98:	462b      	mov	r3, r5
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	0159      	lsls	r1, r3, #5
 8001ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca8:	0150      	lsls	r0, r2, #5
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4621      	mov	r1, r4
 8001cb0:	1a51      	subs	r1, r2, r1
 8001cb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001cc8:	4649      	mov	r1, r9
 8001cca:	018b      	lsls	r3, r1, #6
 8001ccc:	4641      	mov	r1, r8
 8001cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd2:	4641      	mov	r1, r8
 8001cd4:	018a      	lsls	r2, r1, #6
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cdc:	4649      	mov	r1, r9
 8001cde:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	4623      	mov	r3, r4
 8001cfc:	eb1a 0303 	adds.w	r3, sl, r3
 8001d00:	623b      	str	r3, [r7, #32]
 8001d02:	462b      	mov	r3, r5
 8001d04:	eb4b 0303 	adc.w	r3, fp, r3
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d30:	677a      	str	r2, [r7, #116]	; 0x74
 8001d32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001d36:	f7fe fabb 	bl	80002b0 <__aeabi_uldivmod>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d44:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d66:	e0eb      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d68:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d06b      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x354>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	2200      	movs	r2, #0
 8001d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
 8001d94:	2300      	movs	r3, #0
 8001d96:	667b      	str	r3, [r7, #100]	; 0x64
 8001d98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	462b      	mov	r3, r5
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0159      	lsls	r1, r3, #5
 8001daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dae:	0150      	lsls	r0, r2, #5
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4621      	mov	r1, r4
 8001db6:	1a51      	subs	r1, r2, r1
 8001db8:	61b9      	str	r1, [r7, #24]
 8001dba:	4629      	mov	r1, r5
 8001dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001dce:	4659      	mov	r1, fp
 8001dd0:	018b      	lsls	r3, r1, #6
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd8:	4651      	mov	r1, sl
 8001dda:	018a      	lsls	r2, r1, #6
 8001ddc:	4651      	mov	r1, sl
 8001dde:	ebb2 0801 	subs.w	r8, r2, r1
 8001de2:	4659      	mov	r1, fp
 8001de4:	eb63 0901 	sbc.w	r9, r3, r1
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dfc:	4690      	mov	r8, r2
 8001dfe:	4699      	mov	r9, r3
 8001e00:	4623      	mov	r3, r4
 8001e02:	eb18 0303 	adds.w	r3, r8, r3
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	462b      	mov	r3, r5
 8001e0a:	eb49 0303 	adc.w	r3, r9, r3
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	024b      	lsls	r3, r1, #9
 8001e20:	4621      	mov	r1, r4
 8001e22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e26:	4621      	mov	r1, r4
 8001e28:	024a      	lsls	r2, r1, #9
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e32:	2200      	movs	r2, #0
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e38:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e3c:	f7fe fa38 	bl	80002b0 <__aeabi_uldivmod>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4613      	mov	r3, r2
 8001e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e4a:	e065      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x420>
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	099b      	lsrs	r3, r3, #6
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	4611      	mov	r1, r2
 8001e64:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e68:	653b      	str	r3, [r7, #80]	; 0x50
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8001e6e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001e72:	4642      	mov	r2, r8
 8001e74:	464b      	mov	r3, r9
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	0159      	lsls	r1, r3, #5
 8001e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e84:	0150      	lsls	r0, r2, #5
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	4649      	mov	r1, r9
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	018b      	lsls	r3, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eae:	4651      	mov	r1, sl
 8001eb0:	018a      	lsls	r2, r1, #6
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	1a54      	subs	r4, r2, r1
 8001eb6:	4659      	mov	r1, fp
 8001eb8:	eb63 0501 	sbc.w	r5, r3, r1
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	00eb      	lsls	r3, r5, #3
 8001ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eca:	00e2      	lsls	r2, r4, #3
 8001ecc:	4614      	mov	r4, r2
 8001ece:	461d      	mov	r5, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	18e3      	adds	r3, r4, r3
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	464b      	mov	r3, r9
 8001ed8:	eb45 0303 	adc.w	r3, r5, r3
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eea:	4629      	mov	r1, r5
 8001eec:	028b      	lsls	r3, r1, #10
 8001eee:	4621      	mov	r1, r4
 8001ef0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	028a      	lsls	r2, r1, #10
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f00:	2200      	movs	r2, #0
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f0a:	f7fe f9d1 	bl	80002b0 <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4613      	mov	r3, r2
 8001f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x458>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0f1b      	lsrs	r3, r3, #28
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f36:	e003      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	37b8      	adds	r7, #184	; 0xb8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400

08001f58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e347      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d904      	bls.n	8001f7c <HAL_RCC_OscConfig+0x24>
 8001f72:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8001f76:	4893      	ldr	r0, [pc, #588]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f7fe fd4d 	bl	8000a16 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8096 	beq.w	80020b6 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00e      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x58>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x58>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d004      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x58>
 8001fa6:	f640 5115 	movw	r1, #3349	; 0xd15
 8001faa:	4886      	ldr	r0, [pc, #536]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f7fe fd33 	bl	8000a16 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fb0:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d019      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fbc:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d106      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d112      	bne.n	8002008 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fee:	d10b      	bne.n	8002008 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d05b      	beq.n	80020b4 <HAL_RCC_OscConfig+0x15c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d157      	bne.n	80020b4 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2f8      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002010:	d106      	bne.n	8002020 <HAL_RCC_OscConfig+0xc8>
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0x104>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0xec>
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x104>
 8002044:	4b60      	ldr	r3, [pc, #384]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5f      	ldr	r2, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5c      	ldr	r2, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fe6a 	bl	8000d3c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe fe66 	bl	8000d3c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e2bd      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x114>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fe56 	bl	8000d3c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fe52 	bl	8000d3c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2a9      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x13c>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808c 	beq.w	80021dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_OscConfig+0x186>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d004      	beq.n	80020de <HAL_RCC_OscConfig+0x186>
 80020d4:	f640 514d 	movw	r1, #3405	; 0xd4d
 80020d8:	483a      	ldr	r0, [pc, #232]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f7fe fc9c 	bl	8000a16 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b1f      	cmp	r3, #31
 80020e4:	d904      	bls.n	80020f0 <HAL_RCC_OscConfig+0x198>
 80020e6:	f640 514e 	movw	r1, #3406	; 0xd4e
 80020ea:	4836      	ldr	r0, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f7fe fc93 	bl	8000a16 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d017      	beq.n	800212c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80020fc:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002104:	2b08      	cmp	r3, #8
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002108:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002114:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d11c      	bne.n	800215a <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002120:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d116      	bne.n	800215a <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212c:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x1ec>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e25a      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	491d      	ldr	r1, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002158:	e040      	b.n	80021dc <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe fde8 	bl	8000d3c <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe fde4 	bl	8000d3c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e23b      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
 80021a2:	e01b      	b.n	80021dc <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7fe fdc7 	bl	8000d3c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe fdc3 	bl	8000d3c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e21a      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
 80021c4:	08003a00 	.word	0x08003a00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d0:	4b74      	ldr	r3, [pc, #464]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ea      	bne.n	80021b2 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d03d      	beq.n	8002264 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_RCC_OscConfig+0x2aa>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d004      	beq.n	8002202 <HAL_RCC_OscConfig+0x2aa>
 80021f8:	f640 5194 	movw	r1, #3476	; 0xd94
 80021fc:	486a      	ldr	r0, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x450>)
 80021fe:	f7fe fc0a 	bl	8000a16 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_OscConfig+0x454>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fd94 	bl	8000d3c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe fd90 	bl	8000d3c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1e7      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2c0>
 8002236:	e015      	b.n	8002264 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x454>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223e:	f7fe fd7d 	bl	8000d3c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7fe fd79 	bl	8000d3c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1d0      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80b0 	beq.w	80023d2 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00c      	beq.n	8002298 <HAL_RCC_OscConfig+0x340>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d008      	beq.n	8002298 <HAL_RCC_OscConfig+0x340>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d004      	beq.n	8002298 <HAL_RCC_OscConfig+0x340>
 800228e:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8002292:	4845      	ldr	r0, [pc, #276]	; (80023a8 <HAL_RCC_OscConfig+0x450>)
 8002294:	f7fe fbbf 	bl	8000a16 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	4b3e      	ldr	r3, [pc, #248]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 80022ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
 80022b4:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCC_OscConfig+0x458>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d118      	bne.n	8002302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_OscConfig+0x458>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a36      	ldr	r2, [pc, #216]	; (80023b0 <HAL_RCC_OscConfig+0x458>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fd2e 	bl	8000d3c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7fe fd2a 	bl	8000d3c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e181      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_OscConfig+0x458>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x3c0>
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x3fa>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x3e2>
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x3fa>
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a19      	ldr	r2, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fcef 	bl	8000d3c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fceb 	bl	8000d3c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e140      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_RCC_OscConfig+0x44c>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCC_OscConfig+0x40a>
 8002384:	e01c      	b.n	80023c0 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fcd9 	bl	8000d3c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e012      	b.n	80023b4 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fcd5 	bl	8000d3c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d909      	bls.n	80023b4 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e12a      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08003a00 	.word	0x08003a00
 80023ac:	42470e80 	.word	0x42470e80
 80023b0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4b93      	ldr	r3, [pc, #588]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e6      	bne.n	800238e <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b8f      	ldr	r3, [pc, #572]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	4a8e      	ldr	r2, [pc, #568]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x49c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d008      	beq.n	80023f4 <HAL_RCC_OscConfig+0x49c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d004      	beq.n	80023f4 <HAL_RCC_OscConfig+0x49c>
 80023ea:	f640 6103 	movw	r1, #3587	; 0xe03
 80023ee:	4886      	ldr	r0, [pc, #536]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 80023f0:	f7fe fb11 	bl	8000a16 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80fd 	beq.w	80025f8 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b08      	cmp	r3, #8
 8002408:	f000 80b6 	beq.w	8002578 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 809a 	bne.w	800254a <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_OscConfig+0x4da>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002426:	d004      	beq.n	8002432 <HAL_RCC_OscConfig+0x4da>
 8002428:	f640 610c 	movw	r1, #3596	; 0xe0c
 800242c:	4876      	ldr	r0, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 800242e:	f7fe faf2 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	2b3f      	cmp	r3, #63	; 0x3f
 8002438:	d904      	bls.n	8002444 <HAL_RCC_OscConfig+0x4ec>
 800243a:	f640 610d 	movw	r1, #3597	; 0xe0d
 800243e:	4872      	ldr	r0, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 8002440:	f7fe fae9 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b31      	cmp	r3, #49	; 0x31
 800244a:	d904      	bls.n	8002456 <HAL_RCC_OscConfig+0x4fe>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002454:	d904      	bls.n	8002460 <HAL_RCC_OscConfig+0x508>
 8002456:	f640 610e 	movw	r1, #3598	; 0xe0e
 800245a:	486b      	ldr	r0, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 800245c:	f7fe fadb 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	2b02      	cmp	r3, #2
 8002466:	d010      	beq.n	800248a <HAL_RCC_OscConfig+0x532>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b04      	cmp	r3, #4
 800246e:	d00c      	beq.n	800248a <HAL_RCC_OscConfig+0x532>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	2b06      	cmp	r3, #6
 8002476:	d008      	beq.n	800248a <HAL_RCC_OscConfig+0x532>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	2b08      	cmp	r3, #8
 800247e:	d004      	beq.n	800248a <HAL_RCC_OscConfig+0x532>
 8002480:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002484:	4860      	ldr	r0, [pc, #384]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 8002486:	f7fe fac6 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d903      	bls.n	800249a <HAL_RCC_OscConfig+0x542>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	2b0f      	cmp	r3, #15
 8002498:	d904      	bls.n	80024a4 <HAL_RCC_OscConfig+0x54c>
 800249a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800249e:	485a      	ldr	r0, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 80024a0:	f7fe fab9 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d903      	bls.n	80024b4 <HAL_RCC_OscConfig+0x55c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	d904      	bls.n	80024be <HAL_RCC_OscConfig+0x566>
 80024b4:	f640 6111 	movw	r1, #3601	; 0xe11
 80024b8:	4853      	ldr	r0, [pc, #332]	; (8002608 <HAL_RCC_OscConfig+0x6b0>)
 80024ba:	f7fe faac 	bl	8000a16 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_OscConfig+0x6b4>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fc3a 	bl	8000d3c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fc36 	bl	8000d3c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e08d      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	493b      	ldr	r1, [pc, #236]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x6b4>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fc0b 	bl	8000d3c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fc07 	bl	8000d3c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e05e      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x5d2>
 8002548:	e056      	b.n	80025f8 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_RCC_OscConfig+0x6b4>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fbf4 	bl	8000d3c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fbf0 	bl	8000d3c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e047      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x600>
 8002576:	e03f      	b.n	80025f8 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCC_OscConfig+0x6ac>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d030      	beq.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d129      	bne.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d122      	bne.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d119      	bne.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d10f      	bne.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	08003a00 	.word	0x08003a00
 800260c:	42470060 	.word	0x42470060

08002610 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0be      	b.n	80027a0 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03b      	beq.n	80026a2 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5e      	ldr	r2, [pc, #376]	; (80027a8 <HAL_UART_Init+0x198>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d01d      	beq.n	8002670 <HAL_UART_Init+0x60>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5c      	ldr	r2, [pc, #368]	; (80027ac <HAL_UART_Init+0x19c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d018      	beq.n	8002670 <HAL_UART_Init+0x60>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_UART_Init+0x1a0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_UART_Init+0x60>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a59      	ldr	r2, [pc, #356]	; (80027b4 <HAL_UART_Init+0x1a4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00e      	beq.n	8002670 <HAL_UART_Init+0x60>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <HAL_UART_Init+0x1a8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_UART_Init+0x60>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a56      	ldr	r2, [pc, #344]	; (80027bc <HAL_UART_Init+0x1ac>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d004      	beq.n	8002670 <HAL_UART_Init+0x60>
 8002666:	f240 1173 	movw	r1, #371	; 0x173
 800266a:	4855      	ldr	r0, [pc, #340]	; (80027c0 <HAL_UART_Init+0x1b0>)
 800266c:	f7fe f9d3 	bl	8000a16 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d037      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002680:	d032      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268a:	d02d      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002694:	d028      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 8002696:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800269a:	4849      	ldr	r0, [pc, #292]	; (80027c0 <HAL_UART_Init+0x1b0>)
 800269c:	f7fe f9bb 	bl	8000a16 <assert_failed>
 80026a0:	e022      	b.n	80026e8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a40      	ldr	r2, [pc, #256]	; (80027a8 <HAL_UART_Init+0x198>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d01d      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <HAL_UART_Init+0x19c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3d      	ldr	r2, [pc, #244]	; (80027b0 <HAL_UART_Init+0x1a0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a3b      	ldr	r2, [pc, #236]	; (80027b4 <HAL_UART_Init+0x1a4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a3a      	ldr	r2, [pc, #232]	; (80027b8 <HAL_UART_Init+0x1a8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a38      	ldr	r2, [pc, #224]	; (80027bc <HAL_UART_Init+0x1ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_UART_Init+0xd8>
 80026de:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80026e2:	4837      	ldr	r0, [pc, #220]	; (80027c0 <HAL_UART_Init+0x1b0>)
 80026e4:	f7fe f997 	bl	8000a16 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_UART_Init+0xf4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f8:	d004      	beq.n	8002704 <HAL_UART_Init+0xf4>
 80026fa:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80026fe:	4830      	ldr	r0, [pc, #192]	; (80027c0 <HAL_UART_Init+0x1b0>)
 8002700:	f7fe f989 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_UART_Init+0x110>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002714:	d004      	beq.n	8002720 <HAL_UART_Init+0x110>
 8002716:	f240 117b 	movw	r1, #379	; 0x17b
 800271a:	4829      	ldr	r0, [pc, #164]	; (80027c0 <HAL_UART_Init+0x1b0>)
 800271c:	f7fe f97b 	bl	8000a16 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe f9a1 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2224      	movs	r2, #36	; 0x24
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002750:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f936 	bl	80029c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002766:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002776:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002786:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40004400 	.word	0x40004400
 80027b0:	40004800 	.word	0x40004800
 80027b4:	40004c00 	.word	0x40004c00
 80027b8:	40005000 	.word	0x40005000
 80027bc:	40011400 	.word	0x40011400
 80027c0:	08003a78 	.word	0x08003a78

080027c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d17c      	bne.n	80028de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_UART_Transmit+0x2c>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e075      	b.n	80028e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Transmit+0x3e>
 80027fe:	2302      	movs	r3, #2
 8002800:	e06e      	b.n	80028e0 <HAL_UART_Transmit+0x11c>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2221      	movs	r2, #33	; 0x21
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002818:	f7fe fa90 	bl	8000d3c <HAL_GetTick>
 800281c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002832:	d108      	bne.n	8002846 <HAL_UART_Transmit+0x82>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e003      	b.n	800284e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002856:	e02a      	b.n	80028ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f840 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e036      	b.n	80028e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002886:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	3302      	adds	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	e007      	b.n	80028a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3301      	adds	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1cf      	bne.n	8002858 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2200      	movs	r2, #0
 80028c0:	2140      	movs	r1, #64	; 0x40
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f810 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e006      	b.n	80028e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	e000      	b.n	80028e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028de:	2302      	movs	r3, #2
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b090      	sub	sp, #64	; 0x40
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f8:	e050      	b.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d04c      	beq.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <UART_WaitOnFlagUntilTimeout+0x30>
 8002908:	f7fe fa18 	bl	8000d3c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002914:	429a      	cmp	r2, r3
 8002916:	d241      	bcs.n	800299c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	e853 3f00 	ldrex	r3, [r3]
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002938:	637a      	str	r2, [r7, #52]	; 0x34
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800293e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002940:	e841 2300 	strex	r3, r2, [r1]
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e5      	bne.n	8002918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	e853 3f00 	ldrex	r3, [r3]
 800295a:	613b      	str	r3, [r7, #16]
   return(result);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f023 0301 	bic.w	r3, r3, #1
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296c:	623a      	str	r2, [r7, #32]
 800296e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69f9      	ldr	r1, [r7, #28]
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	61bb      	str	r3, [r7, #24]
   return(result);
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e5      	bne.n	800294c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e00f      	b.n	80029bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d09f      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3740      	adds	r7, #64	; 0x40
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b0c0      	sub	sp, #256	; 0x100
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4bcf      	ldr	r3, [pc, #828]	; (8002d14 <UART_SetConfig+0x350>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d904      	bls.n	80029e6 <UART_SetConfig+0x22>
 80029dc:	f640 6161 	movw	r1, #3681	; 0xe61
 80029e0:	48cd      	ldr	r0, [pc, #820]	; (8002d18 <UART_SetConfig+0x354>)
 80029e2:	f7fe f818 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <UART_SetConfig+0x42>
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d004      	beq.n	8002a06 <UART_SetConfig+0x42>
 80029fc:	f640 6162 	movw	r1, #3682	; 0xe62
 8002a00:	48c5      	ldr	r0, [pc, #788]	; (8002d18 <UART_SetConfig+0x354>)
 8002a02:	f7fe f808 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d010      	beq.n	8002a32 <UART_SetConfig+0x6e>
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d00a      	beq.n	8002a32 <UART_SetConfig+0x6e>
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a26:	d004      	beq.n	8002a32 <UART_SetConfig+0x6e>
 8002a28:	f640 6163 	movw	r1, #3683	; 0xe63
 8002a2c:	48ba      	ldr	r0, [pc, #744]	; (8002d18 <UART_SetConfig+0x354>)
 8002a2e:	f7fd fff2 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <UART_SetConfig+0x88>
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <UART_SetConfig+0x92>
 8002a4c:	f640 6164 	movw	r1, #3684	; 0xe64
 8002a50:	48b1      	ldr	r0, [pc, #708]	; (8002d18 <UART_SetConfig+0x354>)
 8002a52:	f7fd ffe0 	bl	8000a16 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a66:	68d9      	ldr	r1, [r3, #12]
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	ea40 0301 	orr.w	r3, r0, r1
 8002a72:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002aa2:	f021 010c 	bic.w	r1, r1, #12
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	6999      	ldr	r1, [r3, #24]
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	ea40 0301 	orr.w	r3, r0, r1
 8002ad0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <UART_SetConfig+0x358>)
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d005      	beq.n	8002aea <UART_SetConfig+0x126>
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <UART_SetConfig+0x35c>)
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d104      	bne.n	8002af4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aea:	f7fe fff1 	bl	8001ad0 <HAL_RCC_GetPCLK2Freq>
 8002aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002af2:	e003      	b.n	8002afc <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7fe ffd8 	bl	8001aa8 <HAL_RCC_GetPCLK1Freq>
 8002af8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	f040 810f 	bne.w	8002d28 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b14:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b18:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	462b      	mov	r3, r5
 8002b20:	1891      	adds	r1, r2, r2
 8002b22:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b24:	415b      	adcs	r3, r3
 8002b26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	eb12 0801 	adds.w	r8, r2, r1
 8002b32:	4629      	mov	r1, r5
 8002b34:	eb43 0901 	adc.w	r9, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	eb18 0303 	adds.w	r3, r8, r3
 8002b56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b5a:	462b      	mov	r3, r5
 8002b5c:	eb49 0303 	adc.w	r3, r9, r3
 8002b60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b70:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b78:	460b      	mov	r3, r1
 8002b7a:	18db      	adds	r3, r3, r3
 8002b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b7e:	4613      	mov	r3, r2
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	657b      	str	r3, [r7, #84]	; 0x54
 8002b86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b8a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b8e:	f7fd fb8f 	bl	80002b0 <__aeabi_uldivmod>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <UART_SetConfig+0x360>)
 8002b98:	fba3 2302 	umull	r2, r3, r3, r2
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	011c      	lsls	r4, r3, #4
 8002ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002baa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bae:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bb2:	4642      	mov	r2, r8
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	1891      	adds	r1, r2, r2
 8002bb8:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bba:	415b      	adcs	r3, r3
 8002bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	eb12 0a01 	adds.w	sl, r2, r1
 8002bc8:	4649      	mov	r1, r9
 8002bca:	eb43 0b01 	adc.w	fp, r3, r1
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be2:	4692      	mov	sl, r2
 8002be4:	469b      	mov	fp, r3
 8002be6:	4643      	mov	r3, r8
 8002be8:	eb1a 0303 	adds.w	r3, sl, r3
 8002bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	eb4b 0303 	adc.w	r3, fp, r3
 8002bf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c06:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	18db      	adds	r3, r3, r3
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40
 8002c14:	4613      	mov	r3, r2
 8002c16:	eb42 0303 	adc.w	r3, r2, r3
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c24:	f7fd fb44 	bl	80002b0 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <UART_SetConfig+0x360>)
 8002c30:	fba3 2301 	umull	r2, r3, r3, r1
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	2264      	movs	r2, #100	; 0x64
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	1acb      	subs	r3, r1, r3
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <UART_SetConfig+0x360>)
 8002c46:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c52:	441c      	add	r4, r3
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c5e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c62:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c76:	4641      	mov	r1, r8
 8002c78:	1851      	adds	r1, r2, r1
 8002c7a:	6339      	str	r1, [r7, #48]	; 0x30
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	414b      	adcs	r3, r1
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c8e:	4659      	mov	r1, fp
 8002c90:	00cb      	lsls	r3, r1, #3
 8002c92:	4651      	mov	r1, sl
 8002c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c98:	4651      	mov	r1, sl
 8002c9a:	00ca      	lsls	r2, r1, #3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002caa:	464b      	mov	r3, r9
 8002cac:	460a      	mov	r2, r1
 8002cae:	eb42 0303 	adc.w	r3, r2, r3
 8002cb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cc2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cc6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cca:	460b      	mov	r3, r1
 8002ccc:	18db      	adds	r3, r3, r3
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	eb42 0303 	adc.w	r3, r2, r3
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cdc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ce0:	f7fd fae6 	bl	80002b0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <UART_SetConfig+0x360>)
 8002cea:	fba3 1302 	umull	r1, r3, r3, r2
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2164      	movs	r1, #100	; 0x64
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	3332      	adds	r3, #50	; 0x32
 8002cfc:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <UART_SetConfig+0x360>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	f003 0207 	and.w	r2, r3, #7
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4422      	add	r2, r4
 8002d10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d12:	e108      	b.n	8002f26 <UART_SetConfig+0x562>
 8002d14:	00a037a0 	.word	0x00a037a0
 8002d18:	08003a78 	.word	0x08003a78
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	6239      	str	r1, [r7, #32]
 8002d42:	415b      	adcs	r3, r3
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
 8002d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	1854      	adds	r4, r2, r1
 8002d4e:	4649      	mov	r1, r9
 8002d50:	eb43 0501 	adc.w	r5, r3, r1
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d70:	464b      	mov	r3, r9
 8002d72:	eb45 0303 	adc.w	r3, r5, r3
 8002d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d96:	4629      	mov	r1, r5
 8002d98:	008b      	lsls	r3, r1, #2
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da0:	4621      	mov	r1, r4
 8002da2:	008a      	lsls	r2, r1, #2
 8002da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002da8:	f7fd fa82 	bl	80002b0 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4b60      	ldr	r3, [pc, #384]	; (8002f34 <UART_SetConfig+0x570>)
 8002db2:	fba3 2302 	umull	r2, r3, r3, r2
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	011c      	lsls	r4, r3, #4
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1891      	adds	r1, r2, r2
 8002dd2:	61b9      	str	r1, [r7, #24]
 8002dd4:	415b      	adcs	r3, r3
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	4641      	mov	r1, r8
 8002dde:	1851      	adds	r1, r2, r1
 8002de0:	6139      	str	r1, [r7, #16]
 8002de2:	4649      	mov	r1, r9
 8002de4:	414b      	adcs	r3, r1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df4:	4659      	mov	r1, fp
 8002df6:	00cb      	lsls	r3, r1, #3
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfe:	4651      	mov	r1, sl
 8002e00:	00ca      	lsls	r2, r1, #3
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	4642      	mov	r2, r8
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e10:	464b      	mov	r3, r9
 8002e12:	460a      	mov	r2, r1
 8002e14:	eb42 0303 	adc.w	r3, r2, r3
 8002e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e34:	4649      	mov	r1, r9
 8002e36:	008b      	lsls	r3, r1, #2
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3e:	4641      	mov	r1, r8
 8002e40:	008a      	lsls	r2, r1, #2
 8002e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e46:	f7fd fa33 	bl	80002b0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <UART_SetConfig+0x570>)
 8002e50:	fba3 1302 	umull	r1, r3, r3, r2
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	2164      	movs	r1, #100	; 0x64
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	3332      	adds	r3, #50	; 0x32
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <UART_SetConfig+0x570>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e6e:	441c      	add	r4, r3
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e74:	2200      	movs	r2, #0
 8002e76:	673b      	str	r3, [r7, #112]	; 0x70
 8002e78:	677a      	str	r2, [r7, #116]	; 0x74
 8002e7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e7e:	4642      	mov	r2, r8
 8002e80:	464b      	mov	r3, r9
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	415b      	adcs	r3, r3
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8e:	4641      	mov	r1, r8
 8002e90:	1851      	adds	r1, r2, r1
 8002e92:	6039      	str	r1, [r7, #0]
 8002e94:	4649      	mov	r1, r9
 8002e96:	414b      	adcs	r3, r1
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ea6:	4659      	mov	r1, fp
 8002ea8:	00cb      	lsls	r3, r1, #3
 8002eaa:	4651      	mov	r1, sl
 8002eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	00ca      	lsls	r2, r1, #3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4642      	mov	r2, r8
 8002ebc:	189b      	adds	r3, r3, r2
 8002ebe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed4:	667a      	str	r2, [r7, #100]	; 0x64
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	008b      	lsls	r3, r1, #2
 8002ee6:	4641      	mov	r1, r8
 8002ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eec:	4641      	mov	r1, r8
 8002eee:	008a      	lsls	r2, r1, #2
 8002ef0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ef4:	f7fd f9dc 	bl	80002b0 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <UART_SetConfig+0x570>)
 8002efe:	fba3 1302 	umull	r1, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2164      	movs	r1, #100	; 0x64
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <UART_SetConfig+0x570>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4422      	add	r2, r4
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f32:	bf00      	nop
 8002f34:	51eb851f 	.word	0x51eb851f

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4d0d      	ldr	r5, [pc, #52]	; (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2600      	movs	r6, #0
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4d0b      	ldr	r5, [pc, #44]	; (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 fc8e 	bl	8003878 <_init>
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2600      	movs	r6, #0
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003b40 	.word	0x08003b40
 8002f80:	08003b40 	.word	0x08003b40
 8002f84:	08003b40 	.word	0x08003b40
 8002f88:	08003b44 	.word	0x08003b44

08002f8c <memset>:
 8002f8c:	4402      	add	r2, r0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d100      	bne.n	8002f96 <memset+0xa>
 8002f94:	4770      	bx	lr
 8002f96:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9a:	e7f9      	b.n	8002f90 <memset+0x4>

08002f9c <siprintf>:
 8002f9c:	b40e      	push	{r1, r2, r3}
 8002f9e:	b500      	push	{lr}
 8002fa0:	b09c      	sub	sp, #112	; 0x70
 8002fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8002fa4:	9002      	str	r0, [sp, #8]
 8002fa6:	9006      	str	r0, [sp, #24]
 8002fa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <siprintf+0x38>)
 8002fae:	9107      	str	r1, [sp, #28]
 8002fb0:	9104      	str	r1, [sp, #16]
 8002fb2:	4909      	ldr	r1, [pc, #36]	; (8002fd8 <siprintf+0x3c>)
 8002fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fb8:	9105      	str	r1, [sp, #20]
 8002fba:	6800      	ldr	r0, [r0, #0]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	a902      	add	r1, sp, #8
 8002fc0:	f000 f868 	bl	8003094 <_svfiprintf_r>
 8002fc4:	9b02      	ldr	r3, [sp, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	b01c      	add	sp, #112	; 0x70
 8002fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fd0:	b003      	add	sp, #12
 8002fd2:	4770      	bx	lr
 8002fd4:	2000000c 	.word	0x2000000c
 8002fd8:	ffff0208 	.word	0xffff0208

08002fdc <__ssputs_r>:
 8002fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe0:	688e      	ldr	r6, [r1, #8]
 8002fe2:	429e      	cmp	r6, r3
 8002fe4:	4682      	mov	sl, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	4690      	mov	r8, r2
 8002fea:	461f      	mov	r7, r3
 8002fec:	d838      	bhi.n	8003060 <__ssputs_r+0x84>
 8002fee:	898a      	ldrh	r2, [r1, #12]
 8002ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ff4:	d032      	beq.n	800305c <__ssputs_r+0x80>
 8002ff6:	6825      	ldr	r5, [r4, #0]
 8002ff8:	6909      	ldr	r1, [r1, #16]
 8002ffa:	eba5 0901 	sub.w	r9, r5, r1
 8002ffe:	6965      	ldr	r5, [r4, #20]
 8003000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003008:	3301      	adds	r3, #1
 800300a:	444b      	add	r3, r9
 800300c:	106d      	asrs	r5, r5, #1
 800300e:	429d      	cmp	r5, r3
 8003010:	bf38      	it	cc
 8003012:	461d      	movcc	r5, r3
 8003014:	0553      	lsls	r3, r2, #21
 8003016:	d531      	bpl.n	800307c <__ssputs_r+0xa0>
 8003018:	4629      	mov	r1, r5
 800301a:	f000 fb63 	bl	80036e4 <_malloc_r>
 800301e:	4606      	mov	r6, r0
 8003020:	b950      	cbnz	r0, 8003038 <__ssputs_r+0x5c>
 8003022:	230c      	movs	r3, #12
 8003024:	f8ca 3000 	str.w	r3, [sl]
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003038:	6921      	ldr	r1, [r4, #16]
 800303a:	464a      	mov	r2, r9
 800303c:	f000 fabe 	bl	80035bc <memcpy>
 8003040:	89a3      	ldrh	r3, [r4, #12]
 8003042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304a:	81a3      	strh	r3, [r4, #12]
 800304c:	6126      	str	r6, [r4, #16]
 800304e:	6165      	str	r5, [r4, #20]
 8003050:	444e      	add	r6, r9
 8003052:	eba5 0509 	sub.w	r5, r5, r9
 8003056:	6026      	str	r6, [r4, #0]
 8003058:	60a5      	str	r5, [r4, #8]
 800305a:	463e      	mov	r6, r7
 800305c:	42be      	cmp	r6, r7
 800305e:	d900      	bls.n	8003062 <__ssputs_r+0x86>
 8003060:	463e      	mov	r6, r7
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	4632      	mov	r2, r6
 8003066:	4641      	mov	r1, r8
 8003068:	f000 fab6 	bl	80035d8 <memmove>
 800306c:	68a3      	ldr	r3, [r4, #8]
 800306e:	1b9b      	subs	r3, r3, r6
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	4433      	add	r3, r6
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	2000      	movs	r0, #0
 800307a:	e7db      	b.n	8003034 <__ssputs_r+0x58>
 800307c:	462a      	mov	r2, r5
 800307e:	f000 fba5 	bl	80037cc <_realloc_r>
 8003082:	4606      	mov	r6, r0
 8003084:	2800      	cmp	r0, #0
 8003086:	d1e1      	bne.n	800304c <__ssputs_r+0x70>
 8003088:	6921      	ldr	r1, [r4, #16]
 800308a:	4650      	mov	r0, sl
 800308c:	f000 fabe 	bl	800360c <_free_r>
 8003090:	e7c7      	b.n	8003022 <__ssputs_r+0x46>
	...

08003094 <_svfiprintf_r>:
 8003094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003098:	4698      	mov	r8, r3
 800309a:	898b      	ldrh	r3, [r1, #12]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	b09d      	sub	sp, #116	; 0x74
 80030a0:	4607      	mov	r7, r0
 80030a2:	460d      	mov	r5, r1
 80030a4:	4614      	mov	r4, r2
 80030a6:	d50e      	bpl.n	80030c6 <_svfiprintf_r+0x32>
 80030a8:	690b      	ldr	r3, [r1, #16]
 80030aa:	b963      	cbnz	r3, 80030c6 <_svfiprintf_r+0x32>
 80030ac:	2140      	movs	r1, #64	; 0x40
 80030ae:	f000 fb19 	bl	80036e4 <_malloc_r>
 80030b2:	6028      	str	r0, [r5, #0]
 80030b4:	6128      	str	r0, [r5, #16]
 80030b6:	b920      	cbnz	r0, 80030c2 <_svfiprintf_r+0x2e>
 80030b8:	230c      	movs	r3, #12
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	e0d1      	b.n	8003266 <_svfiprintf_r+0x1d2>
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	616b      	str	r3, [r5, #20]
 80030c6:	2300      	movs	r3, #0
 80030c8:	9309      	str	r3, [sp, #36]	; 0x24
 80030ca:	2320      	movs	r3, #32
 80030cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80030d4:	2330      	movs	r3, #48	; 0x30
 80030d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003280 <_svfiprintf_r+0x1ec>
 80030da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030de:	f04f 0901 	mov.w	r9, #1
 80030e2:	4623      	mov	r3, r4
 80030e4:	469a      	mov	sl, r3
 80030e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030ea:	b10a      	cbz	r2, 80030f0 <_svfiprintf_r+0x5c>
 80030ec:	2a25      	cmp	r2, #37	; 0x25
 80030ee:	d1f9      	bne.n	80030e4 <_svfiprintf_r+0x50>
 80030f0:	ebba 0b04 	subs.w	fp, sl, r4
 80030f4:	d00b      	beq.n	800310e <_svfiprintf_r+0x7a>
 80030f6:	465b      	mov	r3, fp
 80030f8:	4622      	mov	r2, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	4638      	mov	r0, r7
 80030fe:	f7ff ff6d 	bl	8002fdc <__ssputs_r>
 8003102:	3001      	adds	r0, #1
 8003104:	f000 80aa 	beq.w	800325c <_svfiprintf_r+0x1c8>
 8003108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800310a:	445a      	add	r2, fp
 800310c:	9209      	str	r2, [sp, #36]	; 0x24
 800310e:	f89a 3000 	ldrb.w	r3, [sl]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80a2 	beq.w	800325c <_svfiprintf_r+0x1c8>
 8003118:	2300      	movs	r3, #0
 800311a:	f04f 32ff 	mov.w	r2, #4294967295
 800311e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003122:	f10a 0a01 	add.w	sl, sl, #1
 8003126:	9304      	str	r3, [sp, #16]
 8003128:	9307      	str	r3, [sp, #28]
 800312a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800312e:	931a      	str	r3, [sp, #104]	; 0x68
 8003130:	4654      	mov	r4, sl
 8003132:	2205      	movs	r2, #5
 8003134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003138:	4851      	ldr	r0, [pc, #324]	; (8003280 <_svfiprintf_r+0x1ec>)
 800313a:	f7fd f869 	bl	8000210 <memchr>
 800313e:	9a04      	ldr	r2, [sp, #16]
 8003140:	b9d8      	cbnz	r0, 800317a <_svfiprintf_r+0xe6>
 8003142:	06d0      	lsls	r0, r2, #27
 8003144:	bf44      	itt	mi
 8003146:	2320      	movmi	r3, #32
 8003148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314c:	0711      	lsls	r1, r2, #28
 800314e:	bf44      	itt	mi
 8003150:	232b      	movmi	r3, #43	; 0x2b
 8003152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003156:	f89a 3000 	ldrb.w	r3, [sl]
 800315a:	2b2a      	cmp	r3, #42	; 0x2a
 800315c:	d015      	beq.n	800318a <_svfiprintf_r+0xf6>
 800315e:	9a07      	ldr	r2, [sp, #28]
 8003160:	4654      	mov	r4, sl
 8003162:	2000      	movs	r0, #0
 8003164:	f04f 0c0a 	mov.w	ip, #10
 8003168:	4621      	mov	r1, r4
 800316a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800316e:	3b30      	subs	r3, #48	; 0x30
 8003170:	2b09      	cmp	r3, #9
 8003172:	d94e      	bls.n	8003212 <_svfiprintf_r+0x17e>
 8003174:	b1b0      	cbz	r0, 80031a4 <_svfiprintf_r+0x110>
 8003176:	9207      	str	r2, [sp, #28]
 8003178:	e014      	b.n	80031a4 <_svfiprintf_r+0x110>
 800317a:	eba0 0308 	sub.w	r3, r0, r8
 800317e:	fa09 f303 	lsl.w	r3, r9, r3
 8003182:	4313      	orrs	r3, r2
 8003184:	9304      	str	r3, [sp, #16]
 8003186:	46a2      	mov	sl, r4
 8003188:	e7d2      	b.n	8003130 <_svfiprintf_r+0x9c>
 800318a:	9b03      	ldr	r3, [sp, #12]
 800318c:	1d19      	adds	r1, r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	9103      	str	r1, [sp, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	bfbb      	ittet	lt
 8003196:	425b      	neglt	r3, r3
 8003198:	f042 0202 	orrlt.w	r2, r2, #2
 800319c:	9307      	strge	r3, [sp, #28]
 800319e:	9307      	strlt	r3, [sp, #28]
 80031a0:	bfb8      	it	lt
 80031a2:	9204      	strlt	r2, [sp, #16]
 80031a4:	7823      	ldrb	r3, [r4, #0]
 80031a6:	2b2e      	cmp	r3, #46	; 0x2e
 80031a8:	d10c      	bne.n	80031c4 <_svfiprintf_r+0x130>
 80031aa:	7863      	ldrb	r3, [r4, #1]
 80031ac:	2b2a      	cmp	r3, #42	; 0x2a
 80031ae:	d135      	bne.n	800321c <_svfiprintf_r+0x188>
 80031b0:	9b03      	ldr	r3, [sp, #12]
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	9203      	str	r2, [sp, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bfb8      	it	lt
 80031bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80031c0:	3402      	adds	r4, #2
 80031c2:	9305      	str	r3, [sp, #20]
 80031c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003290 <_svfiprintf_r+0x1fc>
 80031c8:	7821      	ldrb	r1, [r4, #0]
 80031ca:	2203      	movs	r2, #3
 80031cc:	4650      	mov	r0, sl
 80031ce:	f7fd f81f 	bl	8000210 <memchr>
 80031d2:	b140      	cbz	r0, 80031e6 <_svfiprintf_r+0x152>
 80031d4:	2340      	movs	r3, #64	; 0x40
 80031d6:	eba0 000a 	sub.w	r0, r0, sl
 80031da:	fa03 f000 	lsl.w	r0, r3, r0
 80031de:	9b04      	ldr	r3, [sp, #16]
 80031e0:	4303      	orrs	r3, r0
 80031e2:	3401      	adds	r4, #1
 80031e4:	9304      	str	r3, [sp, #16]
 80031e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ea:	4826      	ldr	r0, [pc, #152]	; (8003284 <_svfiprintf_r+0x1f0>)
 80031ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031f0:	2206      	movs	r2, #6
 80031f2:	f7fd f80d 	bl	8000210 <memchr>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	d038      	beq.n	800326c <_svfiprintf_r+0x1d8>
 80031fa:	4b23      	ldr	r3, [pc, #140]	; (8003288 <_svfiprintf_r+0x1f4>)
 80031fc:	bb1b      	cbnz	r3, 8003246 <_svfiprintf_r+0x1b2>
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	3307      	adds	r3, #7
 8003202:	f023 0307 	bic.w	r3, r3, #7
 8003206:	3308      	adds	r3, #8
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320c:	4433      	add	r3, r6
 800320e:	9309      	str	r3, [sp, #36]	; 0x24
 8003210:	e767      	b.n	80030e2 <_svfiprintf_r+0x4e>
 8003212:	fb0c 3202 	mla	r2, ip, r2, r3
 8003216:	460c      	mov	r4, r1
 8003218:	2001      	movs	r0, #1
 800321a:	e7a5      	b.n	8003168 <_svfiprintf_r+0xd4>
 800321c:	2300      	movs	r3, #0
 800321e:	3401      	adds	r4, #1
 8003220:	9305      	str	r3, [sp, #20]
 8003222:	4619      	mov	r1, r3
 8003224:	f04f 0c0a 	mov.w	ip, #10
 8003228:	4620      	mov	r0, r4
 800322a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800322e:	3a30      	subs	r2, #48	; 0x30
 8003230:	2a09      	cmp	r2, #9
 8003232:	d903      	bls.n	800323c <_svfiprintf_r+0x1a8>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0c5      	beq.n	80031c4 <_svfiprintf_r+0x130>
 8003238:	9105      	str	r1, [sp, #20]
 800323a:	e7c3      	b.n	80031c4 <_svfiprintf_r+0x130>
 800323c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003240:	4604      	mov	r4, r0
 8003242:	2301      	movs	r3, #1
 8003244:	e7f0      	b.n	8003228 <_svfiprintf_r+0x194>
 8003246:	ab03      	add	r3, sp, #12
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	462a      	mov	r2, r5
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <_svfiprintf_r+0x1f8>)
 800324e:	a904      	add	r1, sp, #16
 8003250:	4638      	mov	r0, r7
 8003252:	f3af 8000 	nop.w
 8003256:	1c42      	adds	r2, r0, #1
 8003258:	4606      	mov	r6, r0
 800325a:	d1d6      	bne.n	800320a <_svfiprintf_r+0x176>
 800325c:	89ab      	ldrh	r3, [r5, #12]
 800325e:	065b      	lsls	r3, r3, #25
 8003260:	f53f af2c 	bmi.w	80030bc <_svfiprintf_r+0x28>
 8003264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003266:	b01d      	add	sp, #116	; 0x74
 8003268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800326c:	ab03      	add	r3, sp, #12
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	462a      	mov	r2, r5
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <_svfiprintf_r+0x1f8>)
 8003274:	a904      	add	r1, sp, #16
 8003276:	4638      	mov	r0, r7
 8003278:	f000 f87a 	bl	8003370 <_printf_i>
 800327c:	e7eb      	b.n	8003256 <_svfiprintf_r+0x1c2>
 800327e:	bf00      	nop
 8003280:	08003b04 	.word	0x08003b04
 8003284:	08003b0e 	.word	0x08003b0e
 8003288:	00000000 	.word	0x00000000
 800328c:	08002fdd 	.word	0x08002fdd
 8003290:	08003b0a 	.word	0x08003b0a

08003294 <_printf_common>:
 8003294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	4616      	mov	r6, r2
 800329a:	4699      	mov	r9, r3
 800329c:	688a      	ldr	r2, [r1, #8]
 800329e:	690b      	ldr	r3, [r1, #16]
 80032a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bfb8      	it	lt
 80032a8:	4613      	movlt	r3, r2
 80032aa:	6033      	str	r3, [r6, #0]
 80032ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b0:	4607      	mov	r7, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b10a      	cbz	r2, 80032ba <_printf_common+0x26>
 80032b6:	3301      	adds	r3, #1
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	0699      	lsls	r1, r3, #26
 80032be:	bf42      	ittt	mi
 80032c0:	6833      	ldrmi	r3, [r6, #0]
 80032c2:	3302      	addmi	r3, #2
 80032c4:	6033      	strmi	r3, [r6, #0]
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	f015 0506 	ands.w	r5, r5, #6
 80032cc:	d106      	bne.n	80032dc <_printf_common+0x48>
 80032ce:	f104 0a19 	add.w	sl, r4, #25
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	6832      	ldr	r2, [r6, #0]
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	42ab      	cmp	r3, r5
 80032da:	dc26      	bgt.n	800332a <_printf_common+0x96>
 80032dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032e0:	1e13      	subs	r3, r2, #0
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	bf18      	it	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	0692      	lsls	r2, r2, #26
 80032ea:	d42b      	bmi.n	8003344 <_printf_common+0xb0>
 80032ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f0:	4649      	mov	r1, r9
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d01e      	beq.n	8003338 <_printf_common+0xa4>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	68e5      	ldr	r5, [r4, #12]
 80032fe:	6832      	ldr	r2, [r6, #0]
 8003300:	f003 0306 	and.w	r3, r3, #6
 8003304:	2b04      	cmp	r3, #4
 8003306:	bf08      	it	eq
 8003308:	1aad      	subeq	r5, r5, r2
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	6922      	ldr	r2, [r4, #16]
 800330e:	bf0c      	ite	eq
 8003310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003314:	2500      	movne	r5, #0
 8003316:	4293      	cmp	r3, r2
 8003318:	bfc4      	itt	gt
 800331a:	1a9b      	subgt	r3, r3, r2
 800331c:	18ed      	addgt	r5, r5, r3
 800331e:	2600      	movs	r6, #0
 8003320:	341a      	adds	r4, #26
 8003322:	42b5      	cmp	r5, r6
 8003324:	d11a      	bne.n	800335c <_printf_common+0xc8>
 8003326:	2000      	movs	r0, #0
 8003328:	e008      	b.n	800333c <_printf_common+0xa8>
 800332a:	2301      	movs	r3, #1
 800332c:	4652      	mov	r2, sl
 800332e:	4649      	mov	r1, r9
 8003330:	4638      	mov	r0, r7
 8003332:	47c0      	blx	r8
 8003334:	3001      	adds	r0, #1
 8003336:	d103      	bne.n	8003340 <_printf_common+0xac>
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	3501      	adds	r5, #1
 8003342:	e7c6      	b.n	80032d2 <_printf_common+0x3e>
 8003344:	18e1      	adds	r1, r4, r3
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	2030      	movs	r0, #48	; 0x30
 800334a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800334e:	4422      	add	r2, r4
 8003350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003358:	3302      	adds	r3, #2
 800335a:	e7c7      	b.n	80032ec <_printf_common+0x58>
 800335c:	2301      	movs	r3, #1
 800335e:	4622      	mov	r2, r4
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d0e6      	beq.n	8003338 <_printf_common+0xa4>
 800336a:	3601      	adds	r6, #1
 800336c:	e7d9      	b.n	8003322 <_printf_common+0x8e>
	...

08003370 <_printf_i>:
 8003370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	7e0f      	ldrb	r7, [r1, #24]
 8003376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003378:	2f78      	cmp	r7, #120	; 0x78
 800337a:	4691      	mov	r9, r2
 800337c:	4680      	mov	r8, r0
 800337e:	460c      	mov	r4, r1
 8003380:	469a      	mov	sl, r3
 8003382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003386:	d807      	bhi.n	8003398 <_printf_i+0x28>
 8003388:	2f62      	cmp	r7, #98	; 0x62
 800338a:	d80a      	bhi.n	80033a2 <_printf_i+0x32>
 800338c:	2f00      	cmp	r7, #0
 800338e:	f000 80d8 	beq.w	8003542 <_printf_i+0x1d2>
 8003392:	2f58      	cmp	r7, #88	; 0x58
 8003394:	f000 80a3 	beq.w	80034de <_printf_i+0x16e>
 8003398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033a0:	e03a      	b.n	8003418 <_printf_i+0xa8>
 80033a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033a6:	2b15      	cmp	r3, #21
 80033a8:	d8f6      	bhi.n	8003398 <_printf_i+0x28>
 80033aa:	a101      	add	r1, pc, #4	; (adr r1, 80033b0 <_printf_i+0x40>)
 80033ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033b0:	08003409 	.word	0x08003409
 80033b4:	0800341d 	.word	0x0800341d
 80033b8:	08003399 	.word	0x08003399
 80033bc:	08003399 	.word	0x08003399
 80033c0:	08003399 	.word	0x08003399
 80033c4:	08003399 	.word	0x08003399
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	08003399 	.word	0x08003399
 80033d0:	08003399 	.word	0x08003399
 80033d4:	08003399 	.word	0x08003399
 80033d8:	08003399 	.word	0x08003399
 80033dc:	08003529 	.word	0x08003529
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	0800350b 	.word	0x0800350b
 80033e8:	08003399 	.word	0x08003399
 80033ec:	08003399 	.word	0x08003399
 80033f0:	0800354b 	.word	0x0800354b
 80033f4:	08003399 	.word	0x08003399
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	08003399 	.word	0x08003399
 8003400:	08003399 	.word	0x08003399
 8003404:	08003513 	.word	0x08003513
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	602a      	str	r2, [r5, #0]
 8003410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003418:	2301      	movs	r3, #1
 800341a:	e0a3      	b.n	8003564 <_printf_i+0x1f4>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	6829      	ldr	r1, [r5, #0]
 8003420:	0606      	lsls	r6, r0, #24
 8003422:	f101 0304 	add.w	r3, r1, #4
 8003426:	d50a      	bpl.n	800343e <_printf_i+0xce>
 8003428:	680e      	ldr	r6, [r1, #0]
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	2e00      	cmp	r6, #0
 800342e:	da03      	bge.n	8003438 <_printf_i+0xc8>
 8003430:	232d      	movs	r3, #45	; 0x2d
 8003432:	4276      	negs	r6, r6
 8003434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003438:	485e      	ldr	r0, [pc, #376]	; (80035b4 <_printf_i+0x244>)
 800343a:	230a      	movs	r3, #10
 800343c:	e019      	b.n	8003472 <_printf_i+0x102>
 800343e:	680e      	ldr	r6, [r1, #0]
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003446:	bf18      	it	ne
 8003448:	b236      	sxthne	r6, r6
 800344a:	e7ef      	b.n	800342c <_printf_i+0xbc>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	1d19      	adds	r1, r3, #4
 8003452:	6029      	str	r1, [r5, #0]
 8003454:	0601      	lsls	r1, r0, #24
 8003456:	d501      	bpl.n	800345c <_printf_i+0xec>
 8003458:	681e      	ldr	r6, [r3, #0]
 800345a:	e002      	b.n	8003462 <_printf_i+0xf2>
 800345c:	0646      	lsls	r6, r0, #25
 800345e:	d5fb      	bpl.n	8003458 <_printf_i+0xe8>
 8003460:	881e      	ldrh	r6, [r3, #0]
 8003462:	4854      	ldr	r0, [pc, #336]	; (80035b4 <_printf_i+0x244>)
 8003464:	2f6f      	cmp	r7, #111	; 0x6f
 8003466:	bf0c      	ite	eq
 8003468:	2308      	moveq	r3, #8
 800346a:	230a      	movne	r3, #10
 800346c:	2100      	movs	r1, #0
 800346e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003472:	6865      	ldr	r5, [r4, #4]
 8003474:	60a5      	str	r5, [r4, #8]
 8003476:	2d00      	cmp	r5, #0
 8003478:	bfa2      	ittt	ge
 800347a:	6821      	ldrge	r1, [r4, #0]
 800347c:	f021 0104 	bicge.w	r1, r1, #4
 8003480:	6021      	strge	r1, [r4, #0]
 8003482:	b90e      	cbnz	r6, 8003488 <_printf_i+0x118>
 8003484:	2d00      	cmp	r5, #0
 8003486:	d04d      	beq.n	8003524 <_printf_i+0x1b4>
 8003488:	4615      	mov	r5, r2
 800348a:	fbb6 f1f3 	udiv	r1, r6, r3
 800348e:	fb03 6711 	mls	r7, r3, r1, r6
 8003492:	5dc7      	ldrb	r7, [r0, r7]
 8003494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003498:	4637      	mov	r7, r6
 800349a:	42bb      	cmp	r3, r7
 800349c:	460e      	mov	r6, r1
 800349e:	d9f4      	bls.n	800348a <_printf_i+0x11a>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d10b      	bne.n	80034bc <_printf_i+0x14c>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	07de      	lsls	r6, r3, #31
 80034a8:	d508      	bpl.n	80034bc <_printf_i+0x14c>
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	6861      	ldr	r1, [r4, #4]
 80034ae:	4299      	cmp	r1, r3
 80034b0:	bfde      	ittt	le
 80034b2:	2330      	movle	r3, #48	; 0x30
 80034b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034bc:	1b52      	subs	r2, r2, r5
 80034be:	6122      	str	r2, [r4, #16]
 80034c0:	f8cd a000 	str.w	sl, [sp]
 80034c4:	464b      	mov	r3, r9
 80034c6:	aa03      	add	r2, sp, #12
 80034c8:	4621      	mov	r1, r4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7ff fee2 	bl	8003294 <_printf_common>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d14c      	bne.n	800356e <_printf_i+0x1fe>
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	b004      	add	sp, #16
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	4835      	ldr	r0, [pc, #212]	; (80035b4 <_printf_i+0x244>)
 80034e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034e4:	6829      	ldr	r1, [r5, #0]
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80034ec:	6029      	str	r1, [r5, #0]
 80034ee:	061d      	lsls	r5, r3, #24
 80034f0:	d514      	bpl.n	800351c <_printf_i+0x1ac>
 80034f2:	07df      	lsls	r7, r3, #31
 80034f4:	bf44      	itt	mi
 80034f6:	f043 0320 	orrmi.w	r3, r3, #32
 80034fa:	6023      	strmi	r3, [r4, #0]
 80034fc:	b91e      	cbnz	r6, 8003506 <_printf_i+0x196>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	f023 0320 	bic.w	r3, r3, #32
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	2310      	movs	r3, #16
 8003508:	e7b0      	b.n	800346c <_printf_i+0xfc>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f043 0320 	orr.w	r3, r3, #32
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	2378      	movs	r3, #120	; 0x78
 8003514:	4828      	ldr	r0, [pc, #160]	; (80035b8 <_printf_i+0x248>)
 8003516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800351a:	e7e3      	b.n	80034e4 <_printf_i+0x174>
 800351c:	0659      	lsls	r1, r3, #25
 800351e:	bf48      	it	mi
 8003520:	b2b6      	uxthmi	r6, r6
 8003522:	e7e6      	b.n	80034f2 <_printf_i+0x182>
 8003524:	4615      	mov	r5, r2
 8003526:	e7bb      	b.n	80034a0 <_printf_i+0x130>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	6826      	ldr	r6, [r4, #0]
 800352c:	6961      	ldr	r1, [r4, #20]
 800352e:	1d18      	adds	r0, r3, #4
 8003530:	6028      	str	r0, [r5, #0]
 8003532:	0635      	lsls	r5, r6, #24
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	d501      	bpl.n	800353c <_printf_i+0x1cc>
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	e002      	b.n	8003542 <_printf_i+0x1d2>
 800353c:	0670      	lsls	r0, r6, #25
 800353e:	d5fb      	bpl.n	8003538 <_printf_i+0x1c8>
 8003540:	8019      	strh	r1, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	6123      	str	r3, [r4, #16]
 8003546:	4615      	mov	r5, r2
 8003548:	e7ba      	b.n	80034c0 <_printf_i+0x150>
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	602a      	str	r2, [r5, #0]
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	2100      	movs	r1, #0
 8003556:	4628      	mov	r0, r5
 8003558:	f7fc fe5a 	bl	8000210 <memchr>
 800355c:	b108      	cbz	r0, 8003562 <_printf_i+0x1f2>
 800355e:	1b40      	subs	r0, r0, r5
 8003560:	6060      	str	r0, [r4, #4]
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	2300      	movs	r3, #0
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356c:	e7a8      	b.n	80034c0 <_printf_i+0x150>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	462a      	mov	r2, r5
 8003572:	4649      	mov	r1, r9
 8003574:	4640      	mov	r0, r8
 8003576:	47d0      	blx	sl
 8003578:	3001      	adds	r0, #1
 800357a:	d0ab      	beq.n	80034d4 <_printf_i+0x164>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	079b      	lsls	r3, r3, #30
 8003580:	d413      	bmi.n	80035aa <_printf_i+0x23a>
 8003582:	68e0      	ldr	r0, [r4, #12]
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	4298      	cmp	r0, r3
 8003588:	bfb8      	it	lt
 800358a:	4618      	movlt	r0, r3
 800358c:	e7a4      	b.n	80034d8 <_printf_i+0x168>
 800358e:	2301      	movs	r3, #1
 8003590:	4632      	mov	r2, r6
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	47d0      	blx	sl
 8003598:	3001      	adds	r0, #1
 800359a:	d09b      	beq.n	80034d4 <_printf_i+0x164>
 800359c:	3501      	adds	r5, #1
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	9903      	ldr	r1, [sp, #12]
 80035a2:	1a5b      	subs	r3, r3, r1
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	dcf2      	bgt.n	800358e <_printf_i+0x21e>
 80035a8:	e7eb      	b.n	8003582 <_printf_i+0x212>
 80035aa:	2500      	movs	r5, #0
 80035ac:	f104 0619 	add.w	r6, r4, #25
 80035b0:	e7f5      	b.n	800359e <_printf_i+0x22e>
 80035b2:	bf00      	nop
 80035b4:	08003b15 	.word	0x08003b15
 80035b8:	08003b26 	.word	0x08003b26

080035bc <memcpy>:
 80035bc:	440a      	add	r2, r1
 80035be:	4291      	cmp	r1, r2
 80035c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80035c4:	d100      	bne.n	80035c8 <memcpy+0xc>
 80035c6:	4770      	bx	lr
 80035c8:	b510      	push	{r4, lr}
 80035ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035d2:	4291      	cmp	r1, r2
 80035d4:	d1f9      	bne.n	80035ca <memcpy+0xe>
 80035d6:	bd10      	pop	{r4, pc}

080035d8 <memmove>:
 80035d8:	4288      	cmp	r0, r1
 80035da:	b510      	push	{r4, lr}
 80035dc:	eb01 0402 	add.w	r4, r1, r2
 80035e0:	d902      	bls.n	80035e8 <memmove+0x10>
 80035e2:	4284      	cmp	r4, r0
 80035e4:	4623      	mov	r3, r4
 80035e6:	d807      	bhi.n	80035f8 <memmove+0x20>
 80035e8:	1e43      	subs	r3, r0, #1
 80035ea:	42a1      	cmp	r1, r4
 80035ec:	d008      	beq.n	8003600 <memmove+0x28>
 80035ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035f6:	e7f8      	b.n	80035ea <memmove+0x12>
 80035f8:	4402      	add	r2, r0
 80035fa:	4601      	mov	r1, r0
 80035fc:	428a      	cmp	r2, r1
 80035fe:	d100      	bne.n	8003602 <memmove+0x2a>
 8003600:	bd10      	pop	{r4, pc}
 8003602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800360a:	e7f7      	b.n	80035fc <memmove+0x24>

0800360c <_free_r>:
 800360c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800360e:	2900      	cmp	r1, #0
 8003610:	d044      	beq.n	800369c <_free_r+0x90>
 8003612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003616:	9001      	str	r0, [sp, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f1a1 0404 	sub.w	r4, r1, #4
 800361e:	bfb8      	it	lt
 8003620:	18e4      	addlt	r4, r4, r3
 8003622:	f000 f913 	bl	800384c <__malloc_lock>
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <_free_r+0x94>)
 8003628:	9801      	ldr	r0, [sp, #4]
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	b933      	cbnz	r3, 800363c <_free_r+0x30>
 800362e:	6063      	str	r3, [r4, #4]
 8003630:	6014      	str	r4, [r2, #0]
 8003632:	b003      	add	sp, #12
 8003634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003638:	f000 b90e 	b.w	8003858 <__malloc_unlock>
 800363c:	42a3      	cmp	r3, r4
 800363e:	d908      	bls.n	8003652 <_free_r+0x46>
 8003640:	6825      	ldr	r5, [r4, #0]
 8003642:	1961      	adds	r1, r4, r5
 8003644:	428b      	cmp	r3, r1
 8003646:	bf01      	itttt	eq
 8003648:	6819      	ldreq	r1, [r3, #0]
 800364a:	685b      	ldreq	r3, [r3, #4]
 800364c:	1949      	addeq	r1, r1, r5
 800364e:	6021      	streq	r1, [r4, #0]
 8003650:	e7ed      	b.n	800362e <_free_r+0x22>
 8003652:	461a      	mov	r2, r3
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b10b      	cbz	r3, 800365c <_free_r+0x50>
 8003658:	42a3      	cmp	r3, r4
 800365a:	d9fa      	bls.n	8003652 <_free_r+0x46>
 800365c:	6811      	ldr	r1, [r2, #0]
 800365e:	1855      	adds	r5, r2, r1
 8003660:	42a5      	cmp	r5, r4
 8003662:	d10b      	bne.n	800367c <_free_r+0x70>
 8003664:	6824      	ldr	r4, [r4, #0]
 8003666:	4421      	add	r1, r4
 8003668:	1854      	adds	r4, r2, r1
 800366a:	42a3      	cmp	r3, r4
 800366c:	6011      	str	r1, [r2, #0]
 800366e:	d1e0      	bne.n	8003632 <_free_r+0x26>
 8003670:	681c      	ldr	r4, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	6053      	str	r3, [r2, #4]
 8003676:	4421      	add	r1, r4
 8003678:	6011      	str	r1, [r2, #0]
 800367a:	e7da      	b.n	8003632 <_free_r+0x26>
 800367c:	d902      	bls.n	8003684 <_free_r+0x78>
 800367e:	230c      	movs	r3, #12
 8003680:	6003      	str	r3, [r0, #0]
 8003682:	e7d6      	b.n	8003632 <_free_r+0x26>
 8003684:	6825      	ldr	r5, [r4, #0]
 8003686:	1961      	adds	r1, r4, r5
 8003688:	428b      	cmp	r3, r1
 800368a:	bf04      	itt	eq
 800368c:	6819      	ldreq	r1, [r3, #0]
 800368e:	685b      	ldreq	r3, [r3, #4]
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	bf04      	itt	eq
 8003694:	1949      	addeq	r1, r1, r5
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	6054      	str	r4, [r2, #4]
 800369a:	e7ca      	b.n	8003632 <_free_r+0x26>
 800369c:	b003      	add	sp, #12
 800369e:	bd30      	pop	{r4, r5, pc}
 80036a0:	20000104 	.word	0x20000104

080036a4 <sbrk_aligned>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4e0e      	ldr	r6, [pc, #56]	; (80036e0 <sbrk_aligned+0x3c>)
 80036a8:	460c      	mov	r4, r1
 80036aa:	6831      	ldr	r1, [r6, #0]
 80036ac:	4605      	mov	r5, r0
 80036ae:	b911      	cbnz	r1, 80036b6 <sbrk_aligned+0x12>
 80036b0:	f000 f8bc 	bl	800382c <_sbrk_r>
 80036b4:	6030      	str	r0, [r6, #0]
 80036b6:	4621      	mov	r1, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 f8b7 	bl	800382c <_sbrk_r>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d00a      	beq.n	80036d8 <sbrk_aligned+0x34>
 80036c2:	1cc4      	adds	r4, r0, #3
 80036c4:	f024 0403 	bic.w	r4, r4, #3
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d007      	beq.n	80036dc <sbrk_aligned+0x38>
 80036cc:	1a21      	subs	r1, r4, r0
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 f8ac 	bl	800382c <_sbrk_r>
 80036d4:	3001      	adds	r0, #1
 80036d6:	d101      	bne.n	80036dc <sbrk_aligned+0x38>
 80036d8:	f04f 34ff 	mov.w	r4, #4294967295
 80036dc:	4620      	mov	r0, r4
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	20000108 	.word	0x20000108

080036e4 <_malloc_r>:
 80036e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e8:	1ccd      	adds	r5, r1, #3
 80036ea:	f025 0503 	bic.w	r5, r5, #3
 80036ee:	3508      	adds	r5, #8
 80036f0:	2d0c      	cmp	r5, #12
 80036f2:	bf38      	it	cc
 80036f4:	250c      	movcc	r5, #12
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	4607      	mov	r7, r0
 80036fa:	db01      	blt.n	8003700 <_malloc_r+0x1c>
 80036fc:	42a9      	cmp	r1, r5
 80036fe:	d905      	bls.n	800370c <_malloc_r+0x28>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	2600      	movs	r6, #0
 8003706:	4630      	mov	r0, r6
 8003708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800370c:	4e2e      	ldr	r6, [pc, #184]	; (80037c8 <_malloc_r+0xe4>)
 800370e:	f000 f89d 	bl	800384c <__malloc_lock>
 8003712:	6833      	ldr	r3, [r6, #0]
 8003714:	461c      	mov	r4, r3
 8003716:	bb34      	cbnz	r4, 8003766 <_malloc_r+0x82>
 8003718:	4629      	mov	r1, r5
 800371a:	4638      	mov	r0, r7
 800371c:	f7ff ffc2 	bl	80036a4 <sbrk_aligned>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	4604      	mov	r4, r0
 8003724:	d14d      	bne.n	80037c2 <_malloc_r+0xde>
 8003726:	6834      	ldr	r4, [r6, #0]
 8003728:	4626      	mov	r6, r4
 800372a:	2e00      	cmp	r6, #0
 800372c:	d140      	bne.n	80037b0 <_malloc_r+0xcc>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	4631      	mov	r1, r6
 8003732:	4638      	mov	r0, r7
 8003734:	eb04 0803 	add.w	r8, r4, r3
 8003738:	f000 f878 	bl	800382c <_sbrk_r>
 800373c:	4580      	cmp	r8, r0
 800373e:	d13a      	bne.n	80037b6 <_malloc_r+0xd2>
 8003740:	6821      	ldr	r1, [r4, #0]
 8003742:	3503      	adds	r5, #3
 8003744:	1a6d      	subs	r5, r5, r1
 8003746:	f025 0503 	bic.w	r5, r5, #3
 800374a:	3508      	adds	r5, #8
 800374c:	2d0c      	cmp	r5, #12
 800374e:	bf38      	it	cc
 8003750:	250c      	movcc	r5, #12
 8003752:	4629      	mov	r1, r5
 8003754:	4638      	mov	r0, r7
 8003756:	f7ff ffa5 	bl	80036a4 <sbrk_aligned>
 800375a:	3001      	adds	r0, #1
 800375c:	d02b      	beq.n	80037b6 <_malloc_r+0xd2>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	442b      	add	r3, r5
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	e00e      	b.n	8003784 <_malloc_r+0xa0>
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	1b52      	subs	r2, r2, r5
 800376a:	d41e      	bmi.n	80037aa <_malloc_r+0xc6>
 800376c:	2a0b      	cmp	r2, #11
 800376e:	d916      	bls.n	800379e <_malloc_r+0xba>
 8003770:	1961      	adds	r1, r4, r5
 8003772:	42a3      	cmp	r3, r4
 8003774:	6025      	str	r5, [r4, #0]
 8003776:	bf18      	it	ne
 8003778:	6059      	strne	r1, [r3, #4]
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	bf08      	it	eq
 800377e:	6031      	streq	r1, [r6, #0]
 8003780:	5162      	str	r2, [r4, r5]
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	4638      	mov	r0, r7
 8003786:	f104 060b 	add.w	r6, r4, #11
 800378a:	f000 f865 	bl	8003858 <__malloc_unlock>
 800378e:	f026 0607 	bic.w	r6, r6, #7
 8003792:	1d23      	adds	r3, r4, #4
 8003794:	1af2      	subs	r2, r6, r3
 8003796:	d0b6      	beq.n	8003706 <_malloc_r+0x22>
 8003798:	1b9b      	subs	r3, r3, r6
 800379a:	50a3      	str	r3, [r4, r2]
 800379c:	e7b3      	b.n	8003706 <_malloc_r+0x22>
 800379e:	6862      	ldr	r2, [r4, #4]
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	bf0c      	ite	eq
 80037a4:	6032      	streq	r2, [r6, #0]
 80037a6:	605a      	strne	r2, [r3, #4]
 80037a8:	e7ec      	b.n	8003784 <_malloc_r+0xa0>
 80037aa:	4623      	mov	r3, r4
 80037ac:	6864      	ldr	r4, [r4, #4]
 80037ae:	e7b2      	b.n	8003716 <_malloc_r+0x32>
 80037b0:	4634      	mov	r4, r6
 80037b2:	6876      	ldr	r6, [r6, #4]
 80037b4:	e7b9      	b.n	800372a <_malloc_r+0x46>
 80037b6:	230c      	movs	r3, #12
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4638      	mov	r0, r7
 80037bc:	f000 f84c 	bl	8003858 <__malloc_unlock>
 80037c0:	e7a1      	b.n	8003706 <_malloc_r+0x22>
 80037c2:	6025      	str	r5, [r4, #0]
 80037c4:	e7de      	b.n	8003784 <_malloc_r+0xa0>
 80037c6:	bf00      	nop
 80037c8:	20000104 	.word	0x20000104

080037cc <_realloc_r>:
 80037cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d0:	4680      	mov	r8, r0
 80037d2:	4614      	mov	r4, r2
 80037d4:	460e      	mov	r6, r1
 80037d6:	b921      	cbnz	r1, 80037e2 <_realloc_r+0x16>
 80037d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	4611      	mov	r1, r2
 80037de:	f7ff bf81 	b.w	80036e4 <_malloc_r>
 80037e2:	b92a      	cbnz	r2, 80037f0 <_realloc_r+0x24>
 80037e4:	f7ff ff12 	bl	800360c <_free_r>
 80037e8:	4625      	mov	r5, r4
 80037ea:	4628      	mov	r0, r5
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f0:	f000 f838 	bl	8003864 <_malloc_usable_size_r>
 80037f4:	4284      	cmp	r4, r0
 80037f6:	4607      	mov	r7, r0
 80037f8:	d802      	bhi.n	8003800 <_realloc_r+0x34>
 80037fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80037fe:	d812      	bhi.n	8003826 <_realloc_r+0x5a>
 8003800:	4621      	mov	r1, r4
 8003802:	4640      	mov	r0, r8
 8003804:	f7ff ff6e 	bl	80036e4 <_malloc_r>
 8003808:	4605      	mov	r5, r0
 800380a:	2800      	cmp	r0, #0
 800380c:	d0ed      	beq.n	80037ea <_realloc_r+0x1e>
 800380e:	42bc      	cmp	r4, r7
 8003810:	4622      	mov	r2, r4
 8003812:	4631      	mov	r1, r6
 8003814:	bf28      	it	cs
 8003816:	463a      	movcs	r2, r7
 8003818:	f7ff fed0 	bl	80035bc <memcpy>
 800381c:	4631      	mov	r1, r6
 800381e:	4640      	mov	r0, r8
 8003820:	f7ff fef4 	bl	800360c <_free_r>
 8003824:	e7e1      	b.n	80037ea <_realloc_r+0x1e>
 8003826:	4635      	mov	r5, r6
 8003828:	e7df      	b.n	80037ea <_realloc_r+0x1e>
	...

0800382c <_sbrk_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d06      	ldr	r5, [pc, #24]	; (8003848 <_sbrk_r+0x1c>)
 8003830:	2300      	movs	r3, #0
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	f7fd f9a8 	bl	8000b8c <_sbrk>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_sbrk_r+0x1a>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_sbrk_r+0x1a>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	2000010c 	.word	0x2000010c

0800384c <__malloc_lock>:
 800384c:	4801      	ldr	r0, [pc, #4]	; (8003854 <__malloc_lock+0x8>)
 800384e:	f000 b811 	b.w	8003874 <__retarget_lock_acquire_recursive>
 8003852:	bf00      	nop
 8003854:	20000110 	.word	0x20000110

08003858 <__malloc_unlock>:
 8003858:	4801      	ldr	r0, [pc, #4]	; (8003860 <__malloc_unlock+0x8>)
 800385a:	f000 b80c 	b.w	8003876 <__retarget_lock_release_recursive>
 800385e:	bf00      	nop
 8003860:	20000110 	.word	0x20000110

08003864 <_malloc_usable_size_r>:
 8003864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003868:	1f18      	subs	r0, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	bfbc      	itt	lt
 800386e:	580b      	ldrlt	r3, [r1, r0]
 8003870:	18c0      	addlt	r0, r0, r3
 8003872:	4770      	bx	lr

08003874 <__retarget_lock_acquire_recursive>:
 8003874:	4770      	bx	lr

08003876 <__retarget_lock_release_recursive>:
 8003876:	4770      	bx	lr

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
