
MotorControlStepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc8  08002dc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002ddc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002ddc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152a  00000000  00000000  00028668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  0002a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201ad  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f28  00000000  00000000  0004aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4725  00000000  00000000  00054945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011906a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a08  00000000  00000000  001190bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002b44 	.word	0x08002b44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002b44 	.word	0x08002b44

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 faac 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f806 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f89c 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f870 	bl	80005fc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x14>
	...

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	; 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fb00 	bl	8002b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xd4>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a29      	ldr	r2, [pc, #164]	; (80005f4 <SystemClock_Config+0xd4>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <SystemClock_Config+0xd4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <SystemClock_Config+0xd8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xd8>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000594:	2310      	movs	r3, #16
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800059c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800059e:	2304      	movs	r3, #4
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fbac 	bl	8001d0c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ba:	f000 f959 	bl	8000870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff8c 	bl	80014f8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005e6:	f000 f943 	bl	8000870 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 fec6 	bl	80023c4 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f917 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	; 0x28
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b5b      	ldr	r3, [pc, #364]	; (80007d8 <MX_GPIO_Init+0x188>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a5a      	ldr	r2, [pc, #360]	; (80007d8 <MX_GPIO_Init+0x188>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b58      	ldr	r3, [pc, #352]	; (80007d8 <MX_GPIO_Init+0x188>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b54      	ldr	r3, [pc, #336]	; (80007d8 <MX_GPIO_Init+0x188>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a53      	ldr	r2, [pc, #332]	; (80007d8 <MX_GPIO_Init+0x188>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b51      	ldr	r3, [pc, #324]	; (80007d8 <MX_GPIO_Init+0x188>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b4d      	ldr	r3, [pc, #308]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a4c      	ldr	r2, [pc, #304]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a45      	ldr	r2, [pc, #276]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <MX_GPIO_Init+0x188>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80006dc:	483f      	ldr	r0, [pc, #252]	; (80007dc <MX_GPIO_Init+0x18c>)
 80006de:	f000 fe99 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80006e8:	483d      	ldr	r0, [pc, #244]	; (80007e0 <MX_GPIO_Init+0x190>)
 80006ea:	f000 fe93 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN1_PhaseB_GPIO_Port, IN1_PhaseB_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	483c      	ldr	r0, [pc, #240]	; (80007e4 <MX_GPIO_Init+0x194>)
 80006f4:	f000 fe8e 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4835      	ldr	r0, [pc, #212]	; (80007e4 <MX_GPIO_Init+0x194>)
 8000710:	f000 fb5c 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder1_Count_Pin Encoder1_Direct_Pin */
  GPIO_InitStruct.Pin = Encoder1_Count_Pin|Encoder1_Direct_Pin;
 8000714:	2303      	movs	r3, #3
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000718:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	482c      	ldr	r0, [pc, #176]	; (80007dc <MX_GPIO_Init+0x18c>)
 800072a:	f000 fb4f 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Enable_A_PhaseStepper_Pin Enable_B_PhaseStepper_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Enable_A_PhaseStepper_Pin|Enable_B_PhaseStepper_Pin;
 800072e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4825      	ldr	r0, [pc, #148]	; (80007dc <MX_GPIO_Init+0x18c>)
 8000748:	f000 fb40 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_PhaseA_Pin IN1_PhaseA_Pin IN2_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN2_PhaseA_Pin|IN1_PhaseA_Pin|IN2_PhaseB_Pin;
 800074c:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	481e      	ldr	r0, [pc, #120]	; (80007e0 <MX_GPIO_Init+0x190>)
 8000766:	f000 fb31 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : IN1_PhaseB_Pin */
  GPIO_InitStruct.Pin = IN1_PhaseB_Pin;
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN1_PhaseB_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4818      	ldr	r0, [pc, #96]	; (80007e4 <MX_GPIO_Init+0x194>)
 8000782:	f000 fb23 	bl	8000dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder1_Index_Pin */
  GPIO_InitStruct.Pin = Encoder1_Index_Pin;
 8000786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encoder1_Index_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4810      	ldr	r0, [pc, #64]	; (80007dc <MX_GPIO_Init+0x18c>)
 800079c:	f000 fb16 	bl	8000dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2006      	movs	r0, #6
 80007a6:	f000 fac1 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007aa:	2006      	movs	r0, #6
 80007ac:	f000 faea 	bl	8000d84 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2007      	movs	r0, #7
 80007b6:	f000 fab9 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ba:	2007      	movs	r0, #7
 80007bc:	f000 fae2 	bl	8000d84 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2028      	movs	r0, #40	; 0x28
 80007c6:	f000 fab1 	bl	8000d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ca:	2028      	movs	r0, #40	; 0x28
 80007cc:	f000 fada 	bl	8000d84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800

080007e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]

   int EncoderStateMachine = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]

   switch(EncoderStateMachine)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d003      	beq.n	8000804 <HAL_GPIO_EXTI_Callback+0x1c>
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d009      	beq.n	8000816 <HAL_GPIO_EXTI_Callback+0x2e>
		  EncoderStateMachine = 0;
		}
	break;

   }
}
 8000802:	e02c      	b.n	800085e <HAL_GPIO_EXTI_Callback+0x76>
		if(GPIO_Pin == Encoder1_Count_Pin)
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d102      	bne.n	8000810 <HAL_GPIO_EXTI_Callback+0x28>
			EncoderStateMachine = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
   break;
 800080e:	e026      	b.n	800085e <HAL_GPIO_EXTI_Callback+0x76>
			EncoderStateMachine = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
   break;
 8000814:	e023      	b.n	800085e <HAL_GPIO_EXTI_Callback+0x76>
		if((GPIO_Pin == Encoder1_Direct_Pin) && (GPIO_Pin == Encoder1_Count_Pin))
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b02      	cmp	r3, #2
 800081a:	d10e      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x52>
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d10b      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x52>
		  HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8000822:	2120      	movs	r1, #32
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <HAL_GPIO_EXTI_Callback+0x80>)
 8000826:	f000 fe27 	bl	8001478 <HAL_GPIO_TogglePin>
		  EncoderCount++;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_GPIO_EXTI_Callback+0x84>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_GPIO_EXTI_Callback+0x84>)
 8000832:	6013      	str	r3, [r2, #0]
		  EncoderStateMachine = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
	break;
 8000838:	e010      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x74>
		else if((GPIO_Pin != Encoder1_Direct_Pin) && (GPIO_Pin == Encoder1_Count_Pin))
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d00d      	beq.n	800085c <HAL_GPIO_EXTI_Callback+0x74>
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10a      	bne.n	800085c <HAL_GPIO_EXTI_Callback+0x74>
		  HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8000846:	2120      	movs	r1, #32
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x80>)
 800084a:	f000 fe15 	bl	8001478 <HAL_GPIO_TogglePin>
		  EncoderCount--;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_GPIO_EXTI_Callback+0x84>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3b01      	subs	r3, #1
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <HAL_GPIO_EXTI_Callback+0x84>)
 8000856:	6013      	str	r3, [r2, #0]
		  EncoderStateMachine = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
	break;
 800085c:	bf00      	nop
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	2000006c 	.word	0x2000006c

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	e7fe      	b.n	8000878 <Error_Handler+0x8>

0800087a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <HAL_MspInit+0x4c>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	; 0x44
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x4c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ce:	2007      	movs	r0, #7
 80008d0:	f000 fa0c 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_UART_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12b      	bne.n	800095a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_UART_MspInit+0x88>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800093a:	230c      	movs	r3, #12
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094a:	2307      	movs	r3, #7
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x8c>)
 8000956:	f000 fa39 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f8a6 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Count_Pin);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fd7d 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder1_Direct_Pin);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f000 fd76 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009e8:	f000 fd6e 	bl	80014c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a30:	4c0b      	ldr	r4, [pc, #44]	; (8000a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a3e:	f7ff ffd7 	bl	80009f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 f853 	bl	8002aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd5f 	bl	8000508 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	20000074 	.word	0x20000074

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f92b 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fef8 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f972 	bl	8000db4 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f920 	bl	8000d2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000070 	.word	0x20000070

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000070 	.word	0x20000070

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d00f      	beq.n	8000d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d00c      	beq.n	8000d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	d009      	beq.n	8000d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d006      	beq.n	8000d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d003      	beq.n	8000d1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d12:	2190      	movs	r1, #144	; 0x90
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d16:	f7ff fdb0 	bl	800087a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff ff16 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	08002b5c 	.word	0x08002b5c

08000d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d903      	bls.n	8000d4c <HAL_NVIC_SetPriority+0x20>
 8000d44:	21a8      	movs	r1, #168	; 0xa8
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <HAL_NVIC_SetPriority+0x54>)
 8000d48:	f7ff fd97 	bl	800087a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	2b0f      	cmp	r3, #15
 8000d50:	d903      	bls.n	8000d5a <HAL_NVIC_SetPriority+0x2e>
 8000d52:	21a9      	movs	r1, #169	; 0xa9
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <HAL_NVIC_SetPriority+0x54>)
 8000d56:	f7ff fd90 	bl	800087a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5a:	f7ff ff1b 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff ff6b 	bl	8000c40 <NVIC_EncodePriority>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff3a 	bl	8000bec <__NVIC_SetPriority>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	08002b5c 	.word	0x08002b5c

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da03      	bge.n	8000d9e <HAL_NVIC_EnableIRQ+0x1a>
 8000d96:	21bc      	movs	r1, #188	; 0xbc
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d9a:	f7ff fd6e 	bl	800087a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff04 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08002b5c 	.word	0x08002b5c

08000db4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff73 	bl	8000ca8 <SysTick_Config>
 8000dc2:	4603      	mov	r3, r0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <HAL_GPIO_Init+0xf8>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a36      	ldr	r2, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0xfc>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01b      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x100>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a34      	ldr	r2, [pc, #208]	; (8000ed0 <HAL_GPIO_Init+0x104>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <HAL_GPIO_Init+0x108>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00f      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_GPIO_Init+0x10c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00b      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_GPIO_Init+0x110>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <HAL_GPIO_Init+0x114>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x5e>
 8000e22:	21ac      	movs	r1, #172	; 0xac
 8000e24:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <HAL_GPIO_Init+0x118>)
 8000e26:	f7ff fd28 	bl	800087a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_GPIO_Init+0x74>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	0c1b      	lsrs	r3, r3, #16
 8000e3a:	041b      	lsls	r3, r3, #16
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x7c>
 8000e40:	21ad      	movs	r1, #173	; 0xad
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <HAL_GPIO_Init+0x118>)
 8000e44:	f7ff fd19 	bl	800087a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d035      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d031      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b11      	cmp	r3, #17
 8000e5e:	d02d      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d029      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b12      	cmp	r3, #18
 8000e6e:	d025      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000e78:	d020      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000e82:	d01b      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000e8c:	d016      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000e96:	d011      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000ea0:	d00c      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0xf0>
 8000eb4:	21ae      	movs	r1, #174	; 0xae
 8000eb6:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <HAL_GPIO_Init+0x118>)
 8000eb8:	f7ff fcdf 	bl	800087a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	e289      	b.n	80013d6 <HAL_GPIO_Init+0x60a>
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	08002bd4 	.word	0x08002bd4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8265 	bne.w	80013d0 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d144      	bne.n	8000fa8 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00f      	beq.n	8000f46 <HAL_GPIO_Init+0x17a>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d00b      	beq.n	8000f46 <HAL_GPIO_Init+0x17a>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x17a>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x17a>
 8000f3e:	21c0      	movs	r1, #192	; 0xc0
 8000f40:	4831      	ldr	r0, [pc, #196]	; (8001008 <HAL_GPIO_Init+0x23c>)
 8000f42:	f7ff fc9a 	bl	800087a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2203      	movs	r2, #3
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d02b      	beq.n	800100c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <HAL_GPIO_Init+0x208>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0x208>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x208>
 8000fcc:	21d1      	movs	r1, #209	; 0xd1
 8000fce:	480e      	ldr	r0, [pc, #56]	; (8001008 <HAL_GPIO_Init+0x23c>)
 8000fd0:	f7ff fc53 	bl	800087a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x240>
 8001006:	bf00      	nop
 8001008:	08002bd4 	.word	0x08002bd4
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	f040 810c 	bne.w	8001232 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80e3 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b09      	cmp	r3, #9
 800102a:	f000 80de 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 80d9 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80d4 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80cf 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80ca 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	f000 80c5 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b01      	cmp	r3, #1
 8001066:	f000 80c0 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b02      	cmp	r3, #2
 8001070:	f000 80bb 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b02      	cmp	r3, #2
 800107a:	f000 80b6 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	2b02      	cmp	r3, #2
 8001084:	f000 80b1 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b03      	cmp	r3, #3
 800108e:	f000 80ac 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	2b04      	cmp	r3, #4
 8001098:	f000 80a7 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	f000 80a2 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	f000 809d 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	f000 8098 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	f000 8093 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	2b09      	cmp	r3, #9
 80010ca:	f000 808e 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	f000 8089 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b09      	cmp	r3, #9
 80010de:	f000 8084 	beq.w	80011ea <HAL_GPIO_Init+0x41e>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b07      	cmp	r3, #7
 80010e8:	d07f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d07b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	d077      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d073      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b08      	cmp	r3, #8
 8001108:	d06f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b08      	cmp	r3, #8
 8001110:	d06b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b09      	cmp	r3, #9
 8001118:	d067      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	2b09      	cmp	r3, #9
 8001120:	d063      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b0a      	cmp	r3, #10
 8001128:	d05f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d05b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	2b0b      	cmp	r3, #11
 8001138:	d057      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d053      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b0c      	cmp	r3, #12
 8001148:	d04f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d04b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d047      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d043      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b0c      	cmp	r3, #12
 8001168:	d03f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	2b06      	cmp	r3, #6
 8001170:	d03b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b03      	cmp	r3, #3
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d033      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d02f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b06      	cmp	r3, #6
 8001190:	d02b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	2b06      	cmp	r3, #6
 8001198:	d027      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d023      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d01b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d013      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d00f      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d00b      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x41e>
 80011e2:	21de      	movs	r1, #222	; 0xde
 80011e4:	4880      	ldr	r0, [pc, #512]	; (80013e8 <HAL_GPIO_Init+0x61c>)
 80011e6:	f7ff fb48 	bl	800087a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	69b9      	ldr	r1, [r7, #24]
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0203 	and.w	r2, r3, #3
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80ae 	beq.w	80013d0 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_GPIO_Init+0x620>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <HAL_GPIO_Init+0x620>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_GPIO_Init+0x620>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001290:	4a57      	ldr	r2, [pc, #348]	; (80013f0 <HAL_GPIO_Init+0x624>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4f      	ldr	r2, [pc, #316]	; (80013f4 <HAL_GPIO_Init+0x628>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d025      	beq.n	8001308 <HAL_GPIO_Init+0x53c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <HAL_GPIO_Init+0x62c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01f      	beq.n	8001304 <HAL_GPIO_Init+0x538>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4d      	ldr	r2, [pc, #308]	; (80013fc <HAL_GPIO_Init+0x630>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x534>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4c      	ldr	r2, [pc, #304]	; (8001400 <HAL_GPIO_Init+0x634>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x530>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_GPIO_Init+0x638>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x52c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4a      	ldr	r2, [pc, #296]	; (8001408 <HAL_GPIO_Init+0x63c>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x528>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a49      	ldr	r2, [pc, #292]	; (800140c <HAL_GPIO_Init+0x640>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x524>
 80012ec:	2306      	movs	r3, #6
 80012ee:	e00c      	b.n	800130a <HAL_GPIO_Init+0x53e>
 80012f0:	2307      	movs	r3, #7
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x53e>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x53e>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x53e>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x53e>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x53e>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x53e>
 8001308:	2300      	movs	r3, #0
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131a:	4935      	ldr	r1, [pc, #212]	; (80013f0 <HAL_GPIO_Init+0x624>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <HAL_GPIO_Init+0x644>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134c:	4a30      	ldr	r2, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x644>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x644>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001376:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x644>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <HAL_GPIO_Init+0x644>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x644>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_GPIO_Init+0x644>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_GPIO_Init+0x644>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3301      	adds	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	f67f ad85 	bls.w	8000ee8 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	08002bd4 	.word	0x08002bd4
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00
 8001404:	40021000 	.word	0x40021000
 8001408:	40021400 	.word	0x40021400
 800140c:	40021800 	.word	0x40021800
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <HAL_GPIO_WritePin+0x20>
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	041b      	lsls	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <HAL_GPIO_WritePin+0x2a>
 8001434:	f240 119d 	movw	r1, #413	; 0x19d
 8001438:	480e      	ldr	r0, [pc, #56]	; (8001474 <HAL_GPIO_WritePin+0x60>)
 800143a:	f7ff fa1e 	bl	800087a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_WritePin+0x40>
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d004      	beq.n	8001454 <HAL_GPIO_WritePin+0x40>
 800144a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_GPIO_WritePin+0x60>)
 8001450:	f7ff fa13 	bl	800087a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	08002bd4 	.word	0x08002bd4

08001478 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_GPIO_TogglePin+0x1c>
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	0c1b      	lsrs	r3, r3, #16
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <HAL_GPIO_TogglePin+0x26>
 8001494:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <HAL_GPIO_TogglePin+0x4c>)
 800149a:	f7ff f9ee 	bl	800087a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	400b      	ands	r3, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	08002bd4 	.word	0x08002bd4

080014c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f97e 	bl	80007e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40013c00 	.word	0x40013c00

080014f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e18c      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_RCC_ClockConfig+0x24>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d904      	bls.n	8001526 <HAL_RCC_ClockConfig+0x2e>
 800151c:	f240 215a 	movw	r1, #602	; 0x25a
 8001520:	4887      	ldr	r0, [pc, #540]	; (8001740 <HAL_RCC_ClockConfig+0x248>)
 8001522:	f7ff f9aa 	bl	800087a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d031      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d02e      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d02b      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d028      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d025      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d022      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b06      	cmp	r3, #6
 800154e:	d01f      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b07      	cmp	r3, #7
 8001554:	d01c      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b08      	cmp	r3, #8
 800155a:	d019      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b09      	cmp	r3, #9
 8001560:	d016      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d013      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2b0b      	cmp	r3, #11
 800156c:	d010      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d00d      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b0d      	cmp	r3, #13
 8001578:	d00a      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b0e      	cmp	r3, #14
 800157e:	d007      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	d004      	beq.n	8001590 <HAL_RCC_ClockConfig+0x98>
 8001586:	f240 215b 	movw	r1, #603	; 0x25b
 800158a:	486d      	ldr	r0, [pc, #436]	; (8001740 <HAL_RCC_ClockConfig+0x248>)
 800158c:	f7ff f975 	bl	800087a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d90c      	bls.n	80015b8 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e136      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d049      	beq.n	8001658 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d0:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a5c      	ldr	r2, [pc, #368]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80015d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e8:	4b57      	ldr	r3, [pc, #348]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a56      	ldr	r2, [pc, #344]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80015ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d024      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b80      	cmp	r3, #128	; 0x80
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b90      	cmp	r3, #144	; 0x90
 800160a:	d01c      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2ba0      	cmp	r3, #160	; 0xa0
 8001612:	d018      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2bb0      	cmp	r3, #176	; 0xb0
 800161a:	d014      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2bc0      	cmp	r3, #192	; 0xc0
 8001622:	d010      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2bd0      	cmp	r3, #208	; 0xd0
 800162a:	d00c      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2be0      	cmp	r3, #224	; 0xe0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2bf0      	cmp	r3, #240	; 0xf0
 800163a:	d004      	beq.n	8001646 <HAL_RCC_ClockConfig+0x14e>
 800163c:	f240 217e 	movw	r1, #638	; 0x27e
 8001640:	483f      	ldr	r0, [pc, #252]	; (8001740 <HAL_RCC_ClockConfig+0x248>)
 8001642:	f7ff f91a 	bl	800087a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001646:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	493d      	ldr	r1, [pc, #244]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d059      	beq.n	8001718 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d010      	beq.n	800168e <HAL_RCC_ClockConfig+0x196>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d00c      	beq.n	800168e <HAL_RCC_ClockConfig+0x196>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x196>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d004      	beq.n	800168e <HAL_RCC_ClockConfig+0x196>
 8001684:	f240 2185 	movw	r1, #645	; 0x285
 8001688:	482d      	ldr	r0, [pc, #180]	; (8001740 <HAL_RCC_ClockConfig+0x248>)
 800168a:	f7ff f8f6 	bl	800087a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0bf      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d003      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0af      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0a7      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4919      	ldr	r1, [pc, #100]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff fa24 	bl	8000b34 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff fa20 	bl	8000b34 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e08f      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_ClockConfig+0x250>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 020c 	and.w	r2, r3, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1eb      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d212      	bcs.n	800174c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_ClockConfig+0x24c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d007      	beq.n	800174c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e072      	b.n	8001826 <HAL_RCC_ClockConfig+0x32e>
 8001740:	08002c48 	.word	0x08002c48
 8001744:	40023c00 	.word	0x40023c00
 8001748:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d025      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d018      	beq.n	8001792 <HAL_RCC_ClockConfig+0x29a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001768:	d013      	beq.n	8001792 <HAL_RCC_ClockConfig+0x29a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001772:	d00e      	beq.n	8001792 <HAL_RCC_ClockConfig+0x29a>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800177c:	d009      	beq.n	8001792 <HAL_RCC_ClockConfig+0x29a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001786:	d004      	beq.n	8001792 <HAL_RCC_ClockConfig+0x29a>
 8001788:	f240 21c3 	movw	r1, #707	; 0x2c3
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <HAL_RCC_ClockConfig+0x338>)
 800178e:	f7ff f874 	bl	800087a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_ClockConfig+0x33c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	4925      	ldr	r1, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x33c>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d026      	beq.n	80017fe <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d018      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2f2>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c0:	d013      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2f2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80017ca:	d00e      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2f2>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2f2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80017de:	d004      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2f2>
 80017e0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80017e4:	4812      	ldr	r0, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x338>)
 80017e6:	f7ff f848 	bl	800087a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x33c>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x33c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f855 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x33c>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x340>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x344>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x348>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f944 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	08002c48 	.word	0x08002c48
 8001834:	40023800 	.word	0x40023800
 8001838:	08002da8 	.word	0x08002da8
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_GetHCLKFreq+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff0 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	08002db8 	.word	0x08002db8

08001884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001888:	f7ff ffdc 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	0b5b      	lsrs	r3, r3, #13
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	08002db8 	.word	0x08002db8

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b0ae      	sub	sp, #184	; 0xb8
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d2:	4bcb      	ldr	r3, [pc, #812]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	f200 8206 	bhi.w	8001cec <HAL_RCC_GetSysClockFreq+0x440>
 80018e0:	a201      	add	r2, pc, #4	; (adr r2, 80018e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e6:	bf00      	nop
 80018e8:	0800191d 	.word	0x0800191d
 80018ec:	08001ced 	.word	0x08001ced
 80018f0:	08001ced 	.word	0x08001ced
 80018f4:	08001ced 	.word	0x08001ced
 80018f8:	08001925 	.word	0x08001925
 80018fc:	08001ced 	.word	0x08001ced
 8001900:	08001ced 	.word	0x08001ced
 8001904:	08001ced 	.word	0x08001ced
 8001908:	0800192d 	.word	0x0800192d
 800190c:	08001ced 	.word	0x08001ced
 8001910:	08001ced 	.word	0x08001ced
 8001914:	08001ced 	.word	0x08001ced
 8001918:	08001b1d 	.word	0x08001b1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800191c:	4bb9      	ldr	r3, [pc, #740]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x358>)
 800191e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001922:	e1e7      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001924:	4bb8      	ldr	r3, [pc, #736]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800192a:	e1e3      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4bb4      	ldr	r3, [pc, #720]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001938:	4bb1      	ldr	r3, [pc, #708]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d071      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4bae      	ldr	r3, [pc, #696]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001950:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800196a:	4622      	mov	r2, r4
 800196c:	462b      	mov	r3, r5
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4621      	mov	r1, r4
 8001984:	1a51      	subs	r1, r2, r1
 8001986:	6439      	str	r1, [r7, #64]	; 0x40
 8001988:	4629      	mov	r1, r5
 800198a:	eb63 0301 	sbc.w	r3, r3, r1
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800199c:	4649      	mov	r1, r9
 800199e:	018b      	lsls	r3, r1, #6
 80019a0:	4641      	mov	r1, r8
 80019a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019a6:	4641      	mov	r1, r8
 80019a8:	018a      	lsls	r2, r1, #6
 80019aa:	4641      	mov	r1, r8
 80019ac:	1a51      	subs	r1, r2, r1
 80019ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80019b0:	4649      	mov	r1, r9
 80019b2:	eb63 0301 	sbc.w	r3, r3, r1
 80019b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80019c4:	4649      	mov	r1, r9
 80019c6:	00cb      	lsls	r3, r1, #3
 80019c8:	4641      	mov	r1, r8
 80019ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019ce:	4641      	mov	r1, r8
 80019d0:	00ca      	lsls	r2, r1, #3
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	4622      	mov	r2, r4
 80019da:	189b      	adds	r3, r3, r2
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
 80019de:	462b      	mov	r3, r5
 80019e0:	460a      	mov	r2, r1
 80019e2:	eb42 0303 	adc.w	r3, r2, r3
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f4:	4629      	mov	r1, r5
 80019f6:	024b      	lsls	r3, r1, #9
 80019f8:	4621      	mov	r1, r4
 80019fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fe:	4621      	mov	r1, r4
 8001a00:	024a      	lsls	r2, r1, #9
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a18:	f7fe fbf4 	bl	8000204 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a26:	e067      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a42:	2300      	movs	r3, #0
 8001a44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	462b      	mov	r3, r5
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0159      	lsls	r1, r3, #5
 8001a58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5c:	0150      	lsls	r0, r2, #5
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4621      	mov	r1, r4
 8001a64:	1a51      	subs	r1, r2, r1
 8001a66:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a68:	4629      	mov	r1, r5
 8001a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	4641      	mov	r1, r8
 8001a82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a86:	4641      	mov	r1, r8
 8001a88:	018a      	lsls	r2, r1, #6
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a90:	4649      	mov	r1, r9
 8001a92:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aa2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aaa:	4692      	mov	sl, r2
 8001aac:	469b      	mov	fp, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	eb1a 0303 	adds.w	r3, sl, r3
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ae4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ae6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001aea:	f7fe fb8b 	bl	8000204 <__aeabi_uldivmod>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4613      	mov	r3, r2
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b1a:	e0eb      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b28:	4b35      	ldr	r3, [pc, #212]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d06b      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b46:	663b      	str	r3, [r7, #96]	; 0x60
 8001b48:	2300      	movs	r3, #0
 8001b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b50:	4622      	mov	r2, r4
 8001b52:	462b      	mov	r3, r5
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0159      	lsls	r1, r3, #5
 8001b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b62:	0150      	lsls	r0, r2, #5
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4621      	mov	r1, r4
 8001b6a:	1a51      	subs	r1, r2, r1
 8001b6c:	61b9      	str	r1, [r7, #24]
 8001b6e:	4629      	mov	r1, r5
 8001b70:	eb63 0301 	sbc.w	r3, r3, r1
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b82:	4659      	mov	r1, fp
 8001b84:	018b      	lsls	r3, r1, #6
 8001b86:	4651      	mov	r1, sl
 8001b88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	018a      	lsls	r2, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ebb2 0801 	subs.w	r8, r2, r1
 8001b96:	4659      	mov	r1, fp
 8001b98:	eb63 0901 	sbc.w	r9, r3, r1
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb0:	4690      	mov	r8, r2
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	eb18 0303 	adds.w	r3, r8, r3
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	462b      	mov	r3, r5
 8001bbe:	eb49 0303 	adc.w	r3, r9, r3
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	024b      	lsls	r3, r1, #9
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bda:	4621      	mov	r1, r4
 8001bdc:	024a      	lsls	r2, r1, #9
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be6:	2200      	movs	r2, #0
 8001be8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001bec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001bf0:	f7fe fb08 	bl	8000204 <__aeabi_uldivmod>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001bfe:	e065      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x420>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	00f42400 	.word	0x00f42400
 8001c08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	2200      	movs	r2, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	4611      	mov	r1, r2
 8001c18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001c1e:	2300      	movs	r3, #0
 8001c20:	657b      	str	r3, [r7, #84]	; 0x54
 8001c22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001c26:	4642      	mov	r2, r8
 8001c28:	464b      	mov	r3, r9
 8001c2a:	f04f 0000 	mov.w	r0, #0
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	0159      	lsls	r1, r3, #5
 8001c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c38:	0150      	lsls	r0, r2, #5
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4641      	mov	r1, r8
 8001c40:	1a51      	subs	r1, r2, r1
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	4649      	mov	r1, r9
 8001c46:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c58:	4659      	mov	r1, fp
 8001c5a:	018b      	lsls	r3, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c62:	4651      	mov	r1, sl
 8001c64:	018a      	lsls	r2, r1, #6
 8001c66:	4651      	mov	r1, sl
 8001c68:	1a54      	subs	r4, r2, r1
 8001c6a:	4659      	mov	r1, fp
 8001c6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	00eb      	lsls	r3, r5, #3
 8001c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7e:	00e2      	lsls	r2, r4, #3
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	18e3      	adds	r3, r4, r3
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001cba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cbe:	f7fe faa1 	bl	8000204 <__aeabi_uldivmod>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0f1b      	lsrs	r3, r3, #28
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cea:	e003      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	37b8      	adds	r7, #184	; 0xb8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400

08001d0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e347      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	d904      	bls.n	8001d30 <HAL_RCC_OscConfig+0x24>
 8001d26:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8001d2a:	4893      	ldr	r0, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f7fe fda5 	bl	800087a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8096 	beq.w	8001e6a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00e      	beq.n	8001d64 <HAL_RCC_OscConfig+0x58>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCC_OscConfig+0x58>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d004      	beq.n	8001d64 <HAL_RCC_OscConfig+0x58>
 8001d5a:	f640 5115 	movw	r1, #3349	; 0xd15
 8001d5e:	4886      	ldr	r0, [pc, #536]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	f7fe fd8b 	bl	800087a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d64:	4b85      	ldr	r3, [pc, #532]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d019      	beq.n	8001da4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d70:	4b82      	ldr	r3, [pc, #520]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d7c:	4b7f      	ldr	r3, [pc, #508]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d88:	d00c      	beq.n	8001da4 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8a:	4b7c      	ldr	r3, [pc, #496]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d112      	bne.n	8001dbc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x15c>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d157      	bne.n	8001e68 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2f8      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xc8>
 8001dc6:	4b6d      	ldr	r3, [pc, #436]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6c      	ldr	r2, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0x104>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xec>
 8001dde:	4b67      	ldr	r3, [pc, #412]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a66      	ldr	r2, [pc, #408]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x104>
 8001df8:	4b60      	ldr	r3, [pc, #384]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a5f      	ldr	r2, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fe8c 	bl	8000b34 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7fe fe88 	bl	8000b34 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e2bd      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b52      	ldr	r3, [pc, #328]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x114>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe fe78 	bl	8000b34 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7fe fe74 	bl	8000b34 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e2a9      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b48      	ldr	r3, [pc, #288]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x13c>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 808c 	beq.w	8001f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_OscConfig+0x186>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d004      	beq.n	8001e92 <HAL_RCC_OscConfig+0x186>
 8001e88:	f640 514d 	movw	r1, #3405	; 0xd4d
 8001e8c:	483a      	ldr	r0, [pc, #232]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f7fe fcf4 	bl	800087a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b1f      	cmp	r3, #31
 8001e98:	d904      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x198>
 8001e9a:	f640 514e 	movw	r1, #3406	; 0xd4e
 8001e9e:	4836      	ldr	r0, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f7fe fceb 	bl	800087a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d11c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d116      	bne.n	8001f0e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x1ec>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e25a      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	491d      	ldr	r1, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0c:	e040      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fe0a 	bl	8000b34 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7fe fe06 	bl	8000b34 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e23b      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490a      	ldr	r1, [pc, #40]	; (8001f7c <HAL_RCC_OscConfig+0x270>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
 8001f56:	e01b      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_OscConfig+0x274>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fde9 	bl	8000b34 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f64:	e00e      	b.n	8001f84 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fde5 	bl	8000b34 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d907      	bls.n	8001f84 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e21a      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
 8001f78:	08002cbc 	.word	0x08002cbc
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f84:	4b74      	ldr	r3, [pc, #464]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ea      	bne.n	8001f66 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03d      	beq.n	8002018 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2aa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d004      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2aa>
 8001fac:	f640 5194 	movw	r1, #3476	; 0xd94
 8001fb0:	486a      	ldr	r0, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x450>)
 8001fb2:	f7fe fc62 	bl	800087a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbe:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x454>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fdb6 	bl	8000b34 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fdb2 	bl	8000b34 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1e7      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	4b5e      	ldr	r3, [pc, #376]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2c0>
 8001fea:	e015      	b.n	8002018 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x454>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff2:	f7fe fd9f 	bl	8000b34 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fd9b 	bl	8000b34 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1d0      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4b52      	ldr	r3, [pc, #328]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 800200e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f0      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80b0 	beq.w	8002186 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00c      	beq.n	800204c <HAL_RCC_OscConfig+0x340>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d008      	beq.n	800204c <HAL_RCC_OscConfig+0x340>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b05      	cmp	r3, #5
 8002040:	d004      	beq.n	800204c <HAL_RCC_OscConfig+0x340>
 8002042:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8002046:	4845      	ldr	r0, [pc, #276]	; (800215c <HAL_RCC_OscConfig+0x450>)
 8002048:	f7fe fc17 	bl	800087a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10f      	bne.n	8002078 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 8002062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002074:	2301      	movs	r3, #1
 8002076:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_RCC_OscConfig+0x458>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d118      	bne.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HAL_RCC_OscConfig+0x458>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a36      	ldr	r2, [pc, #216]	; (8002164 <HAL_RCC_OscConfig+0x458>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002090:	f7fe fd50 	bl	8000b34 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7fe fd4c 	bl	8000b34 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e181      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_RCC_OscConfig+0x458>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x3c0>
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a25      	ldr	r2, [pc, #148]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	e01c      	b.n	8002106 <HAL_RCC_OscConfig+0x3fa>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x3e2>
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x3fa>
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe fd11 	bl	8000b34 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fd0d 	bl	8000b34 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	; 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e140      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_OscConfig+0x44c>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCC_OscConfig+0x40a>
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe fcfb 	bl	8000b34 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	e012      	b.n	8002168 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fcf7 	bl	8000b34 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d909      	bls.n	8002168 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e12a      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
 8002158:	40023800 	.word	0x40023800
 800215c:	08002cbc 	.word	0x08002cbc
 8002160:	42470e80 	.word	0x42470e80
 8002164:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	4b93      	ldr	r3, [pc, #588]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e6      	bne.n	8002142 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d105      	bne.n	8002186 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217a:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a8e      	ldr	r2, [pc, #568]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 8002180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x49c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d008      	beq.n	80021a8 <HAL_RCC_OscConfig+0x49c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d004      	beq.n	80021a8 <HAL_RCC_OscConfig+0x49c>
 800219e:	f640 6103 	movw	r1, #3587	; 0xe03
 80021a2:	4886      	ldr	r0, [pc, #536]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 80021a4:	f7fe fb69 	bl	800087a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80fd 	beq.w	80023ac <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b2:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	f000 80b6 	beq.w	800232c <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f040 809a 	bne.w	80022fe <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021da:	d004      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4da>
 80021dc:	f640 610c 	movw	r1, #3596	; 0xe0c
 80021e0:	4876      	ldr	r0, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 80021e2:	f7fe fb4a 	bl	800087a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	2b3f      	cmp	r3, #63	; 0x3f
 80021ec:	d904      	bls.n	80021f8 <HAL_RCC_OscConfig+0x4ec>
 80021ee:	f640 610d 	movw	r1, #3597	; 0xe0d
 80021f2:	4872      	ldr	r0, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 80021f4:	f7fe fb41 	bl	800087a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b31      	cmp	r3, #49	; 0x31
 80021fe:	d904      	bls.n	800220a <HAL_RCC_OscConfig+0x4fe>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002208:	d904      	bls.n	8002214 <HAL_RCC_OscConfig+0x508>
 800220a:	f640 610e 	movw	r1, #3598	; 0xe0e
 800220e:	486b      	ldr	r0, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 8002210:	f7fe fb33 	bl	800087a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b02      	cmp	r3, #2
 800221a:	d010      	beq.n	800223e <HAL_RCC_OscConfig+0x532>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x532>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	2b06      	cmp	r3, #6
 800222a:	d008      	beq.n	800223e <HAL_RCC_OscConfig+0x532>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	2b08      	cmp	r3, #8
 8002232:	d004      	beq.n	800223e <HAL_RCC_OscConfig+0x532>
 8002234:	f640 610f 	movw	r1, #3599	; 0xe0f
 8002238:	4860      	ldr	r0, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 800223a:	f7fe fb1e 	bl	800087a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	2b01      	cmp	r3, #1
 8002244:	d903      	bls.n	800224e <HAL_RCC_OscConfig+0x542>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	2b0f      	cmp	r3, #15
 800224c:	d904      	bls.n	8002258 <HAL_RCC_OscConfig+0x54c>
 800224e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002252:	485a      	ldr	r0, [pc, #360]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 8002254:	f7fe fb11 	bl	800087a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	2b01      	cmp	r3, #1
 800225e:	d903      	bls.n	8002268 <HAL_RCC_OscConfig+0x55c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	2b07      	cmp	r3, #7
 8002266:	d904      	bls.n	8002272 <HAL_RCC_OscConfig+0x566>
 8002268:	f640 6111 	movw	r1, #3601	; 0xe11
 800226c:	4853      	ldr	r0, [pc, #332]	; (80023bc <HAL_RCC_OscConfig+0x6b0>)
 800226e:	f7fe fb04 	bl	800087a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x6b4>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fc5c 	bl	8000b34 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fc58 	bl	8000b34 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e08d      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	493b      	ldr	r1, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d0:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x6b4>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fc2d 	bl	8000b34 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe fc29 	bl	8000b34 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e05e      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f0:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x5d2>
 80022fc:	e056      	b.n	80023ac <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_RCC_OscConfig+0x6b4>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7fe fc16 	bl	8000b34 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800230c:	f7fe fc12 	bl	8000b34 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e047      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x600>
 800232a:	e03f      	b.n	80023ac <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e03a      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_RCC_OscConfig+0x6ac>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d030      	beq.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d129      	bne.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d122      	bne.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	4293      	cmp	r3, r2
 8002372:	d119      	bne.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d10f      	bne.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	08002cbc 	.word	0x08002cbc
 80023c0:	42470060 	.word	0x42470060

080023c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0be      	b.n	8002554 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d03b      	beq.n	8002456 <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a5e      	ldr	r2, [pc, #376]	; (800255c <HAL_UART_Init+0x198>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01d      	beq.n	8002424 <HAL_UART_Init+0x60>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5c      	ldr	r2, [pc, #368]	; (8002560 <HAL_UART_Init+0x19c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d018      	beq.n	8002424 <HAL_UART_Init+0x60>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5b      	ldr	r2, [pc, #364]	; (8002564 <HAL_UART_Init+0x1a0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_UART_Init+0x60>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a59      	ldr	r2, [pc, #356]	; (8002568 <HAL_UART_Init+0x1a4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_UART_Init+0x60>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_UART_Init+0x1a8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_UART_Init+0x60>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_UART_Init+0x1ac>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_UART_Init+0x60>
 800241a:	f240 1173 	movw	r1, #371	; 0x173
 800241e:	4855      	ldr	r0, [pc, #340]	; (8002574 <HAL_UART_Init+0x1b0>)
 8002420:	f7fe fa2b 	bl	800087a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d037      	beq.n	800249c <HAL_UART_Init+0xd8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	d032      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243e:	d02d      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002448:	d028      	beq.n	800249c <HAL_UART_Init+0xd8>
 800244a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800244e:	4849      	ldr	r0, [pc, #292]	; (8002574 <HAL_UART_Init+0x1b0>)
 8002450:	f7fe fa13 	bl	800087a <assert_failed>
 8002454:	e022      	b.n	800249c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a40      	ldr	r2, [pc, #256]	; (800255c <HAL_UART_Init+0x198>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01d      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <HAL_UART_Init+0x19c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d018      	beq.n	800249c <HAL_UART_Init+0xd8>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <HAL_UART_Init+0x1a0>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_UART_Init+0x1a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_UART_Init+0xd8>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <HAL_UART_Init+0x1a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a38      	ldr	r2, [pc, #224]	; (8002570 <HAL_UART_Init+0x1ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_UART_Init+0xd8>
 8002492:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8002496:	4837      	ldr	r0, [pc, #220]	; (8002574 <HAL_UART_Init+0x1b0>)
 8002498:	f7fe f9ef 	bl	800087a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_UART_Init+0xf4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ac:	d004      	beq.n	80024b8 <HAL_UART_Init+0xf4>
 80024ae:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80024b2:	4830      	ldr	r0, [pc, #192]	; (8002574 <HAL_UART_Init+0x1b0>)
 80024b4:	f7fe f9e1 	bl	800087a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_UART_Init+0x110>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c8:	d004      	beq.n	80024d4 <HAL_UART_Init+0x110>
 80024ca:	f240 117b 	movw	r1, #379	; 0x17b
 80024ce:	4829      	ldr	r0, [pc, #164]	; (8002574 <HAL_UART_Init+0x1b0>)
 80024d0:	f7fe f9d3 	bl	800087a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe f9f9 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2224      	movs	r2, #36	; 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f836 	bl	8002578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800251a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800252a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800253a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40011000 	.word	0x40011000
 8002560:	40004400 	.word	0x40004400
 8002564:	40004800 	.word	0x40004800
 8002568:	40004c00 	.word	0x40004c00
 800256c:	40005000 	.word	0x40005000
 8002570:	40011400 	.word	0x40011400
 8002574:	08002d34 	.word	0x08002d34

08002578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b0c0      	sub	sp, #256	; 0x100
 800257e:	af00      	add	r7, sp, #0
 8002580:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4bcf      	ldr	r3, [pc, #828]	; (80028c8 <UART_SetConfig+0x350>)
 800258c:	429a      	cmp	r2, r3
 800258e:	d904      	bls.n	800259a <UART_SetConfig+0x22>
 8002590:	f640 6161 	movw	r1, #3681	; 0xe61
 8002594:	48cd      	ldr	r0, [pc, #820]	; (80028cc <UART_SetConfig+0x354>)
 8002596:	f7fe f970 	bl	800087a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800259a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <UART_SetConfig+0x42>
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ae:	d004      	beq.n	80025ba <UART_SetConfig+0x42>
 80025b0:	f640 6162 	movw	r1, #3682	; 0xe62
 80025b4:	48c5      	ldr	r0, [pc, #788]	; (80028cc <UART_SetConfig+0x354>)
 80025b6:	f7fe f960 	bl	800087a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <UART_SetConfig+0x6e>
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d00a      	beq.n	80025e6 <UART_SetConfig+0x6e>
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025da:	d004      	beq.n	80025e6 <UART_SetConfig+0x6e>
 80025dc:	f640 6163 	movw	r1, #3683	; 0xe63
 80025e0:	48ba      	ldr	r0, [pc, #744]	; (80028cc <UART_SetConfig+0x354>)
 80025e2:	f7fe f94a 	bl	800087a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <UART_SetConfig+0x88>
 80025f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d104      	bne.n	800260a <UART_SetConfig+0x92>
 8002600:	f640 6164 	movw	r1, #3684	; 0xe64
 8002604:	48b1      	ldr	r0, [pc, #708]	; (80028cc <UART_SetConfig+0x354>)
 8002606:	f7fe f938 	bl	800087a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	68d9      	ldr	r1, [r3, #12]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	ea40 0301 	orr.w	r3, r0, r1
 8002626:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	431a      	orrs	r2, r3
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	431a      	orrs	r2, r3
 800263e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800264a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002656:	f021 010c 	bic.w	r1, r1, #12
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002664:	430b      	orrs	r3, r1
 8002666:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	6999      	ldr	r1, [r3, #24]
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	ea40 0301 	orr.w	r3, r0, r1
 8002684:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b90      	ldr	r3, [pc, #576]	; (80028d0 <UART_SetConfig+0x358>)
 800268e:	429a      	cmp	r2, r3
 8002690:	d005      	beq.n	800269e <UART_SetConfig+0x126>
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b8e      	ldr	r3, [pc, #568]	; (80028d4 <UART_SetConfig+0x35c>)
 800269a:	429a      	cmp	r2, r3
 800269c:	d104      	bne.n	80026a8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800269e:	f7ff f8f1 	bl	8001884 <HAL_RCC_GetPCLK2Freq>
 80026a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026a6:	e003      	b.n	80026b0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026a8:	f7ff f8d8 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80026ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	f040 810f 	bne.w	80028dc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026c2:	2200      	movs	r2, #0
 80026c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026c8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026cc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026d0:	4622      	mov	r2, r4
 80026d2:	462b      	mov	r3, r5
 80026d4:	1891      	adds	r1, r2, r2
 80026d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80026d8:	415b      	adcs	r3, r3
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026e0:	4621      	mov	r1, r4
 80026e2:	eb12 0801 	adds.w	r8, r2, r1
 80026e6:	4629      	mov	r1, r5
 80026e8:	eb43 0901 	adc.w	r9, r3, r1
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002700:	4690      	mov	r8, r2
 8002702:	4699      	mov	r9, r3
 8002704:	4623      	mov	r3, r4
 8002706:	eb18 0303 	adds.w	r3, r8, r3
 800270a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800270e:	462b      	mov	r3, r5
 8002710:	eb49 0303 	adc.w	r3, r9, r3
 8002714:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002724:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002728:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800272c:	460b      	mov	r3, r1
 800272e:	18db      	adds	r3, r3, r3
 8002730:	653b      	str	r3, [r7, #80]	; 0x50
 8002732:	4613      	mov	r3, r2
 8002734:	eb42 0303 	adc.w	r3, r2, r3
 8002738:	657b      	str	r3, [r7, #84]	; 0x54
 800273a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800273e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002742:	f7fd fd5f 	bl	8000204 <__aeabi_uldivmod>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <UART_SetConfig+0x360>)
 800274c:	fba3 2302 	umull	r2, r3, r3, r2
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	011c      	lsls	r4, r3, #4
 8002754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800275e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002762:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002766:	4642      	mov	r2, r8
 8002768:	464b      	mov	r3, r9
 800276a:	1891      	adds	r1, r2, r2
 800276c:	64b9      	str	r1, [r7, #72]	; 0x48
 800276e:	415b      	adcs	r3, r3
 8002770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002776:	4641      	mov	r1, r8
 8002778:	eb12 0a01 	adds.w	sl, r2, r1
 800277c:	4649      	mov	r1, r9
 800277e:	eb43 0b01 	adc.w	fp, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800278e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002796:	4692      	mov	sl, r2
 8002798:	469b      	mov	fp, r3
 800279a:	4643      	mov	r3, r8
 800279c:	eb1a 0303 	adds.w	r3, sl, r3
 80027a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027a4:	464b      	mov	r3, r9
 80027a6:	eb4b 0303 	adc.w	r3, fp, r3
 80027aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027ba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027c2:	460b      	mov	r3, r1
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
 80027c8:	4613      	mov	r3, r2
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027d4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027d8:	f7fd fd14 	bl	8000204 <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4611      	mov	r1, r2
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <UART_SetConfig+0x360>)
 80027e4:	fba3 2301 	umull	r2, r3, r3, r1
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	2264      	movs	r2, #100	; 0x64
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	1acb      	subs	r3, r1, r3
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <UART_SetConfig+0x360>)
 80027fa:	fba3 2302 	umull	r2, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002806:	441c      	add	r4, r3
 8002808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002812:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002816:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	1891      	adds	r1, r2, r2
 8002820:	63b9      	str	r1, [r7, #56]	; 0x38
 8002822:	415b      	adcs	r3, r3
 8002824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002826:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800282a:	4641      	mov	r1, r8
 800282c:	1851      	adds	r1, r2, r1
 800282e:	6339      	str	r1, [r7, #48]	; 0x30
 8002830:	4649      	mov	r1, r9
 8002832:	414b      	adcs	r3, r1
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002842:	4659      	mov	r1, fp
 8002844:	00cb      	lsls	r3, r1, #3
 8002846:	4651      	mov	r1, sl
 8002848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800284c:	4651      	mov	r1, sl
 800284e:	00ca      	lsls	r2, r1, #3
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	4603      	mov	r3, r0
 8002856:	4642      	mov	r2, r8
 8002858:	189b      	adds	r3, r3, r2
 800285a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800285e:	464b      	mov	r3, r9
 8002860:	460a      	mov	r2, r1
 8002862:	eb42 0303 	adc.w	r3, r2, r3
 8002866:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002876:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800287a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800287e:	460b      	mov	r3, r1
 8002880:	18db      	adds	r3, r3, r3
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
 8002884:	4613      	mov	r3, r2
 8002886:	eb42 0303 	adc.w	r3, r2, r3
 800288a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002890:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002894:	f7fd fcb6 	bl	8000204 <__aeabi_uldivmod>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <UART_SetConfig+0x360>)
 800289e:	fba3 1302 	umull	r1, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2164      	movs	r1, #100	; 0x64
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3332      	adds	r3, #50	; 0x32
 80028b0:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <UART_SetConfig+0x360>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4422      	add	r2, r4
 80028c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028c6:	e108      	b.n	8002ada <UART_SetConfig+0x562>
 80028c8:	00a037a0 	.word	0x00a037a0
 80028cc:	08002d34 	.word	0x08002d34
 80028d0:	40011000 	.word	0x40011000
 80028d4:	40011400 	.word	0x40011400
 80028d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028ee:	4642      	mov	r2, r8
 80028f0:	464b      	mov	r3, r9
 80028f2:	1891      	adds	r1, r2, r2
 80028f4:	6239      	str	r1, [r7, #32]
 80028f6:	415b      	adcs	r3, r3
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028fe:	4641      	mov	r1, r8
 8002900:	1854      	adds	r4, r2, r1
 8002902:	4649      	mov	r1, r9
 8002904:	eb43 0501 	adc.w	r5, r3, r1
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	00eb      	lsls	r3, r5, #3
 8002912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002916:	00e2      	lsls	r2, r4, #3
 8002918:	4614      	mov	r4, r2
 800291a:	461d      	mov	r5, r3
 800291c:	4643      	mov	r3, r8
 800291e:	18e3      	adds	r3, r4, r3
 8002920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002924:	464b      	mov	r3, r9
 8002926:	eb45 0303 	adc.w	r3, r5, r3
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800293a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800294a:	4629      	mov	r1, r5
 800294c:	008b      	lsls	r3, r1, #2
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002954:	4621      	mov	r1, r4
 8002956:	008a      	lsls	r2, r1, #2
 8002958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800295c:	f7fd fc52 	bl	8000204 <__aeabi_uldivmod>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <UART_SetConfig+0x570>)
 8002966:	fba3 2302 	umull	r2, r3, r3, r2
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	011c      	lsls	r4, r3, #4
 800296e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800297c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002980:	4642      	mov	r2, r8
 8002982:	464b      	mov	r3, r9
 8002984:	1891      	adds	r1, r2, r2
 8002986:	61b9      	str	r1, [r7, #24]
 8002988:	415b      	adcs	r3, r3
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002990:	4641      	mov	r1, r8
 8002992:	1851      	adds	r1, r2, r1
 8002994:	6139      	str	r1, [r7, #16]
 8002996:	4649      	mov	r1, r9
 8002998:	414b      	adcs	r3, r1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a8:	4659      	mov	r1, fp
 80029aa:	00cb      	lsls	r3, r1, #3
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b2:	4651      	mov	r1, sl
 80029b4:	00ca      	lsls	r2, r1, #3
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	4603      	mov	r3, r0
 80029bc:	4642      	mov	r2, r8
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c4:	464b      	mov	r3, r9
 80029c6:	460a      	mov	r2, r1
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029e8:	4649      	mov	r1, r9
 80029ea:	008b      	lsls	r3, r1, #2
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f2:	4641      	mov	r1, r8
 80029f4:	008a      	lsls	r2, r1, #2
 80029f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029fa:	f7fd fc03 	bl	8000204 <__aeabi_uldivmod>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <UART_SetConfig+0x570>)
 8002a04:	fba3 1302 	umull	r1, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	2164      	movs	r1, #100	; 0x64
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	4a34      	ldr	r2, [pc, #208]	; (8002ae8 <UART_SetConfig+0x570>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	441c      	add	r4, r3
 8002a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a28:	2200      	movs	r2, #0
 8002a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8002a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a32:	4642      	mov	r2, r8
 8002a34:	464b      	mov	r3, r9
 8002a36:	1891      	adds	r1, r2, r2
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	415b      	adcs	r3, r3
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a42:	4641      	mov	r1, r8
 8002a44:	1851      	adds	r1, r2, r1
 8002a46:	6039      	str	r1, [r7, #0]
 8002a48:	4649      	mov	r1, r9
 8002a4a:	414b      	adcs	r3, r1
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a5a:	4659      	mov	r1, fp
 8002a5c:	00cb      	lsls	r3, r1, #3
 8002a5e:	4651      	mov	r1, sl
 8002a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a64:	4651      	mov	r1, sl
 8002a66:	00ca      	lsls	r2, r1, #3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4642      	mov	r2, r8
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a74:	464b      	mov	r3, r9
 8002a76:	460a      	mov	r2, r1
 8002a78:	eb42 0303 	adc.w	r3, r2, r3
 8002a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	663b      	str	r3, [r7, #96]	; 0x60
 8002a88:	667a      	str	r2, [r7, #100]	; 0x64
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a96:	4649      	mov	r1, r9
 8002a98:	008b      	lsls	r3, r1, #2
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	008a      	lsls	r2, r1, #2
 8002aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002aa8:	f7fd fbac 	bl	8000204 <__aeabi_uldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <UART_SetConfig+0x570>)
 8002ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2164      	movs	r1, #100	; 0x64
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	3332      	adds	r3, #50	; 0x32
 8002ac4:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <UART_SetConfig+0x570>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4422      	add	r2, r4
 8002ad8:	609a      	str	r2, [r3, #8]
}
 8002ada:	bf00      	nop
 8002adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	51eb851f 	.word	0x51eb851f

08002aec <__libc_init_array>:
 8002aec:	b570      	push	{r4, r5, r6, lr}
 8002aee:	4d0d      	ldr	r5, [pc, #52]	; (8002b24 <__libc_init_array+0x38>)
 8002af0:	4c0d      	ldr	r4, [pc, #52]	; (8002b28 <__libc_init_array+0x3c>)
 8002af2:	1b64      	subs	r4, r4, r5
 8002af4:	10a4      	asrs	r4, r4, #2
 8002af6:	2600      	movs	r6, #0
 8002af8:	42a6      	cmp	r6, r4
 8002afa:	d109      	bne.n	8002b10 <__libc_init_array+0x24>
 8002afc:	4d0b      	ldr	r5, [pc, #44]	; (8002b2c <__libc_init_array+0x40>)
 8002afe:	4c0c      	ldr	r4, [pc, #48]	; (8002b30 <__libc_init_array+0x44>)
 8002b00:	f000 f820 	bl	8002b44 <_init>
 8002b04:	1b64      	subs	r4, r4, r5
 8002b06:	10a4      	asrs	r4, r4, #2
 8002b08:	2600      	movs	r6, #0
 8002b0a:	42a6      	cmp	r6, r4
 8002b0c:	d105      	bne.n	8002b1a <__libc_init_array+0x2e>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b14:	4798      	blx	r3
 8002b16:	3601      	adds	r6, #1
 8002b18:	e7ee      	b.n	8002af8 <__libc_init_array+0xc>
 8002b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b1e:	4798      	blx	r3
 8002b20:	3601      	adds	r6, #1
 8002b22:	e7f2      	b.n	8002b0a <__libc_init_array+0x1e>
 8002b24:	08002dc8 	.word	0x08002dc8
 8002b28:	08002dc8 	.word	0x08002dc8
 8002b2c:	08002dc8 	.word	0x08002dc8
 8002b30:	08002dcc 	.word	0x08002dcc

08002b34 <memset>:
 8002b34:	4402      	add	r2, r0
 8002b36:	4603      	mov	r3, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d100      	bne.n	8002b3e <memset+0xa>
 8002b3c:	4770      	bx	lr
 8002b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b42:	e7f9      	b.n	8002b38 <memset+0x4>

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
